
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = 'raylib_demo.data';
    var REMOTE_PACKAGE_BASE = 'raylib_demo.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
    var REMOTE_PACKAGE_SIZE = 2611274;
    var PACKAGE_UUID = '0909d1c3-dde2-4986-a4ce-4d059e74ee52';
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'resources', true, true);
Module['FS_createPath']('/resources', 'audio', true, true);
Module['FS_createPath']('/resources', 'fonts', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 133213, 0, 0).open('GET', '/resources/cat.obj');
    new DataRequest(133213, 449026, 0, 0).open('GET', '/resources/catsham.png');
    new DataRequest(449026, 757824, 0, 0).open('GET', '/resources/catwhite.png');
    new DataRequest(757824, 1231655, 0, 0).open('GET', '/resources/lena.png');
    new DataRequest(1231655, 1859670, 0, 0).open('GET', '/resources/mandrill.png');
    new DataRequest(1859670, 1901201, 0, 0).open('GET', '/resources/platforms.png');
    new DataRequest(1901201, 1904961, 0, 0).open('GET', '/resources/raylib_logo.png');
    new DataRequest(1904961, 1906829, 0, 0).open('GET', '/resources/raylib_logo128x128.png');
    new DataRequest(1906829, 1911543, 0, 0).open('GET', '/resources/raylib_window.png');
    new DataRequest(1911543, 1913599, 0, 0).open('GET', '/resources/raylib_window_01.png');
    new DataRequest(1913599, 1916677, 0, 0).open('GET', '/resources/raylib_window_02.png');
    new DataRequest(1916677, 1919729, 0, 0).open('GET', '/resources/raylib_window_03.png');
    new DataRequest(1919729, 1924505, 0, 1).open('GET', '/resources/audio/coin.wav');
    new DataRequest(1924505, 2431443, 0, 1).open('GET', '/resources/audio/guitar_noodling.ogg');
    new DataRequest(2431443, 2442293, 0, 1).open('GET', '/resources/audio/spring.wav');
    new DataRequest(2442293, 2499621, 0, 1).open('GET', '/resources/audio/tanatana.ogg');
    new DataRequest(2499621, 2505867, 0, 1).open('GET', '/resources/audio/weird.wav');
    new DataRequest(2505867, 2508026, 0, 0).open('GET', '/resources/fonts/alagard.rbmf');
    new DataRequest(2508026, 2510186, 0, 0).open('GET', '/resources/fonts/alpha_beta.rbmf');
    new DataRequest(2510186, 2548121, 0, 0).open('GET', '/resources/fonts/custom_alagard.png');
    new DataRequest(2548121, 2571717, 0, 0).open('GET', '/resources/fonts/custom_jupiter_crash.png');
    new DataRequest(2571717, 2598314, 0, 0).open('GET', '/resources/fonts/custom_mecha.png');
    new DataRequest(2598314, 2600474, 0, 0).open('GET', '/resources/fonts/jupiter_crash.rbmf');
    new DataRequest(2600474, 2602634, 0, 0).open('GET', '/resources/fonts/mecha.rbmf');
    new DataRequest(2602634, 2604794, 0, 0).open('GET', '/resources/fonts/pixantiqua.rbmf');
    new DataRequest(2604794, 2606954, 0, 0).open('GET', '/resources/fonts/pixelplay.rbmf');
    new DataRequest(2606954, 2609114, 0, 0).open('GET', '/resources/fonts/romulus.rbmf');
    new DataRequest(2609114, 2611274, 0, 0).open('GET', '/resources/fonts/setback.rbmf');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/resources/cat.obj"].onload();
          DataRequest.prototype.requests["/resources/catsham.png"].onload();
          DataRequest.prototype.requests["/resources/catwhite.png"].onload();
          DataRequest.prototype.requests["/resources/lena.png"].onload();
          DataRequest.prototype.requests["/resources/mandrill.png"].onload();
          DataRequest.prototype.requests["/resources/platforms.png"].onload();
          DataRequest.prototype.requests["/resources/raylib_logo.png"].onload();
          DataRequest.prototype.requests["/resources/raylib_logo128x128.png"].onload();
          DataRequest.prototype.requests["/resources/raylib_window.png"].onload();
          DataRequest.prototype.requests["/resources/raylib_window_01.png"].onload();
          DataRequest.prototype.requests["/resources/raylib_window_02.png"].onload();
          DataRequest.prototype.requests["/resources/raylib_window_03.png"].onload();
          DataRequest.prototype.requests["/resources/audio/coin.wav"].onload();
          DataRequest.prototype.requests["/resources/audio/guitar_noodling.ogg"].onload();
          DataRequest.prototype.requests["/resources/audio/spring.wav"].onload();
          DataRequest.prototype.requests["/resources/audio/tanatana.ogg"].onload();
          DataRequest.prototype.requests["/resources/audio/weird.wav"].onload();
          DataRequest.prototype.requests["/resources/fonts/alagard.rbmf"].onload();
          DataRequest.prototype.requests["/resources/fonts/alpha_beta.rbmf"].onload();
          DataRequest.prototype.requests["/resources/fonts/custom_alagard.png"].onload();
          DataRequest.prototype.requests["/resources/fonts/custom_jupiter_crash.png"].onload();
          DataRequest.prototype.requests["/resources/fonts/custom_mecha.png"].onload();
          DataRequest.prototype.requests["/resources/fonts/jupiter_crash.rbmf"].onload();
          DataRequest.prototype.requests["/resources/fonts/mecha.rbmf"].onload();
          DataRequest.prototype.requests["/resources/fonts/pixantiqua.rbmf"].onload();
          DataRequest.prototype.requests["/resources/fonts/pixelplay.rbmf"].onload();
          DataRequest.prototype.requests["/resources/fonts/romulus.rbmf"].onload();
          DataRequest.prototype.requests["/resources/fonts/setback.rbmf"].onload();
          Module['removeRunDependency']('datafile_raylib_demo.data');

    };
    Module['addRunDependency']('datafile_raylib_demo.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(21851);
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([0,5,0,0,0,0,0,0,208,2,0,0,0,0,0,0,76,79,65,68,73,78,71,46,46,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,114,101,115,115,32,69,78,84,69,82,32,116,111,32,83,84,65,82,84,0,0,0,0,0,0,0,0,0,0,0,0,98,121,32,82,65,77,79,78,32,83,65,78,84,65,77,65,82,73,65,32,91,64,114,97,121,115,97,110,53,93,0,0,0,0,0,0,0,0,0,0,119,119,119,46,114,97,121,108,105,98,46,99,111,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,32,115,105,109,112,108,101,32,97,110,100,32,101,97,115,121,45,116,111,45,117,115,101,32,108,105,98,114,97,114,121,0,0,0,0,0,0,0,0,116,111,32,108,101,97,114,110,32,118,105,100,101,111,103,97,109,101,115,32,112,114,111,103,114,97,109,109,105,110,103,0,0,0,0,0,0,0,0,0,84,72,73,83,32,105,115,32,97,32,67,85,83,84,79,77,32,70,79,78,84,46,46,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,46,46,97,110,100,32,65,78,79,84,72,69,82,32,67,85,83,84,79,77,32,79,78,69,46,46,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,46,46,65,78,68,32,79,78,69,32,77,79,82,69,33,32,58,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,75,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,114,97,121,108,105,98,32,102,117,110,99,116,105,111,110,97,108,105,116,121,32,100,101,109,111,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,102,111,110,116,115,47,97,108,97,103,97,114,100,46,114,98,109,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,102,111,110,116,115,47,112,105,120,101,108,112,108,97,121,46,114,98,109,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,102,111,110,116,115,47,109,101,99,104,97,46,114,98,109,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,102,111,110,116,115,47,115,101,116,98,97,99,107,46,114,98,109,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,102,111,110,116,115,47,114,111,109,117,108,117,115,46,114,98,109,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,114,97,121,108,105,98,95,119,105,110,100,111,119,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,114,97,121,108,105,98,95,119,105,110,100,111,119,95,48,49,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,114,97,121,108,105,98,95,119,105,110,100,111,119,95,48,50,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,114,97,121,108,105,98,95,119,105,110,100,111,119,95,48,51,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,112,108,97,116,102,111,114,109,115,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,114,97,121,108,105,98,95,108,111,103,111,49,50,56,120,49,50,56,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,108,101,110,97,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,109,97,110,100,114,105,108,108,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,102,111,110,116,115,47,99,117,115,116,111,109,95,97,108,97,103,97,114,100,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,102,111,110,116,115,47,99,117,115,116,111,109,95,109,101,99,104,97,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,102,111,110,116,115,47,99,117,115,116,111,109,95,106,117,112,105,116,101,114,95,99,114,97,115,104,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,99,97,116,115,104,97,109,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,99,97,116,46,111,98,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,119,101,105,114,100,46,119,97,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,116,97,110,97,116,97,110,97,46,111,103,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,114,97,121,108,105,98,95,108,111,103,111,46,112,110,103,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,103,117,105,116,97,114,95,110,111,111,100,108,105,110,103,46,111,103,103,0,0,0,0,0,80,82,69,83,83,32,83,80,65,67,69,32,116,111,32,65,67,67,69,76,69,82,65,84,69,32,76,79,65,68,73,78,71,33,32,59,41,0,0,0,80,82,69,83,83,32,69,78,84,69,82,32,116,111,32,67,79,78,84,73,78,85,69,0,114,97,121,108,105,98,32,105,115,32,99,111,109,112,111,115,101,100,32,111,102,32,54,32,109,97,105,110,32,109,111,100,117,108,101,115,58,0,0,0,80,82,69,83,83,32,82,73,71,72,84,32,111,114,32,76,69,70,84,32,116,111,32,69,88,80,76,79,82,69,32,77,79,68,85,76,69,83,0,0,84,104,105,115,32,109,111,100,117,108,101,32,103,105,118,101,32,121,111,117,32,102,117,110,99,116,105,111,110,115,32,116,111,58,0,0,0,0,0,0,79,112,101,110,45,67,108,111,115,101,32,87,105,110,100,111,119,0,0,0,0,0,0,0,77,97,110,97,103,101,32,68,114,97,119,105,110,103,32,65,114,101,97,0,0,0,0,0,77,97,110,97,103,101,32,73,110,112,117,116,115,0,0,0,77,97,110,97,103,101,32,84,105,109,109,105,110,103,0,0,65,117,120,105,108,105,97,114,32,70,117,110,99,116,105,111,110,115,0,0,0,0,0,0,67,104,101,99,107,32,116,104,101,32,112,111,115,115,105,98,108,101,32,119,105,110,100,111,119,115,32,114,97,121,108,105,98,32,99,97,110,32,114,117,110,32,111,110,46,32,80,82,69,83,83,32,75,69,89,58,32,49,44,32,50,44,32,51,32,111,114,32,52,0,0,0,67,111,109,112,105,108,101,32,114,97,121,108,105,98,32,67,32,99,111,100,101,32,102,111,114,32,116,104,101,32,102,111,108,111,119,105,110,103,32,112,108,97,116,102,111,114,109,115,58,0,0,0,0,0,0,0,77,79,86,69,32,77,69,0,91,32,87,32,65,32,83,32,68,32,93,0,0,0,0,0,68,114,97,119,32,66,97,115,105,99,32,83,104,97,112,101,115,0,0,0,0,0,0,0,66,97,115,105,99,32,67,111,108,108,105,115,105,111,110,32,68,101,116,101,99,116,105,111,110,0,0,0,0,0,0,0,76,111,97,100,32,73,109,97,103,101,115,32,97,110,100,32,84,101,120,116,117,114,101,115,0,0,0,0,0,0,0,0,68,114,97,119,32,84,101,120,116,117,114,101,115,0,0,0,76,111,97,100,32,83,112,114,105,116,101,70,111,110,116,115,0,0,0,0,0,0,0,0,68,114,97,119,32,84,101,120,116,0,0,0,0,0,0,0,84,101,120,116,32,70,111,114,109,97,116,116,105,110,103,0,73,116,32,97,108,115,111,32,105,110,99,108,117,100,101,115,32,115,111,109,101,46,46,46,0,0,0,0,0,0,0,0,46,46,46,102,114,101,101,32,102,111,110,116,115,32,105,110,32,114,66,77,70,32,102,111,114,109,97,116,46,46,46,0,46,46,46,116,111,32,98,101,32,117,115,101,100,32,101,118,101,110,32,105,110,46,46,46,0,0,0,0,0,0,0,0,46,46,46,99,111,109,101,114,99,105,97,108,32,112,114,111,106,101,99,116,115,46,46,46,0,0,0,0,0,0,0,0,46,46,46,99,111,109,112,108,101,116,101,108,121,32,102,111,114,32,102,114,101,101,33,0,84,104,105,115,32,105,115,32,97,32,99,117,115,116,111,109,32,102,111,110,116,32,115,112,114,105,116,101,115,104,101,101,116,44,32,114,97,121,108,105,98,32,99,97,110,32,108,111,97,100,32,105,116,32,97,117,116,111,109,97,116,105,99,97,108,108,121,33,0,0,0,0,68,114,97,119,32,71,101,111,109,101,116,114,105,99,32,77,111,100,101,108,115,0,0,0,76,111,97,100,32,51,68,32,77,111,100,101,108,115,0,0,68,114,97,119,32,51,68,32,77,111,100,101,108,115,0,0,76,111,97,100,32,97,110,100,32,80,108,97,121,32,83,111,117,110,100,115,0,0,0,0,80,108,97,121,32,77,117,115,105,99,32,40,115,116,114,101,97,109,105,110,103,41,0,0,80,82,69,83,83,32,83,80,65,67,69,32,116,111,32,83,84,65,82,84,32,80,76,65,89,73,78,71,32,77,85,83,73,67,0,0,0,0,0,0,80,82,69,83,83,32,39,83,39,32,116,111,32,83,84,79,80,32,80,76,65,89,73,78,71,32,77,85,83,73,67,0,80,82,69,83,83,32,39,78,39,32,116,111,32,80,76,65,89,32,97,32,83,79,85,78,68,0,0,0,0,0,0,0,67,79,82,69,0,0,0,0,83,72,65,80,69,83,0,0,84,69,88,84,85,82,69,83,0,0,0,0,0,0,0,0,84,69,88,84,0,0,0,0,77,79,68,69,76,83,0,0,65,85,68,73,79,0,0,0,76,69,65,82,78,32,86,73,68,69,79,71,65,77,69,83,32,80,82,79,71,82,65,77,77,73,78,71,0,0,0,0,37,48,50,105,0,0,0,0,48,48,0,0,0,0,0,0,71,65,77,69,32,80,65,85,83,69,68,32,91,80,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,105,110,100,111,119,32,99,108,111,115,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,0,1,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,97,114,103,101,116,32,116,105,109,101,32,112,101,114,32,102,114,97,109,101,58,32,37,48,50,46,48,51,102,32,109,105,108,108,105,115,101,99,111,110,100,115], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,71,76,70,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,76,70,87,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,87,105,110,100,111,119,0,0,0,0,0,0,0,0,68,105,115,112,108,97,121,32,100,101,118,105,99,101,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,82,101,110,100,101,114,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,0,0,0,83,99,114,101,101,110,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,0,0,0,86,105,101,119,112,111,114,116,32,111,102,102,115,101,116,115,58,32,37,105,44,32,37,105,0,0,0,0,0,0,0,0,68,79,87,78,83,67,65,76,73,78,71,58,32,82,101,113,117,105,114,101,100,32,115,99,114,101,101,110,32,115,105,122,101,32,40,37,105,120,37,105,41,32,105,115,32,98,105,103,103,101,114,32,116,104,97,110,32,100,105,115,112,108,97,121,32,115,105,122,101,32,40,37,105,120,37,105,41,0,0,0,68,111,119,110,115,99,97,108,101,32,109,97,116,114,105,120,32,103,101,110,101,114,97,116,101,100,44,32,99,111,110,116,101,110,116,32,119,105,108,108,32,98,101,32,114,101,110,100,101,114,101,100,32,97,116,58,32,37,105,32,120,32,37,105,0,0,0,0,0,0,0,0,85,80,83,67,65,76,73,78,71,58,32,82,101,113,117,105,114,101,100,32,115,99,114,101,101,110,32,115,105,122,101,58,32,37,105,32,120,32,37,105,32,45,62,32,68,105,115,112,108,97,121,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,0,0,0,0,0,0,91,71,76,70,87,51,32,69,114,114,111,114,93,32,67,111,100,101,58,32,37,105,32,68,101,99,114,105,112,116,105,111,110,58,32,37,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,97,99,107,32,66,117,102,102,101,114,32,79,118,101,114,102,108,111,119,32,40,77,65,88,32,37,105,32,77,97,116,114,105,120,41], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+4936);
/* memory initializer */ allocate([77,65,88,95,76,73,78,69,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,77,65,88,95,84,82,73,65,78,71,76,69,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,65,88,95,81,85,65,68,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,105,110,105,116,105,97,108,105,122,101,32,86,65,79,32,101,120,116,101,110,115,105,111,110,115,44,32,86,65,79,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,71,80,85,58,32,86,101,110,100,111,114,58,32,32,32,37,115,0,0,0,0,0,0,0,71,80,85,58,32,82,101,110,100,101,114,101,114,58,32,37,115,0,0,0,0,0,0,0,71,80,85,58,32,86,101,114,115,105,111,110,58,32,32,37,115,0,0,0,0,0,0,0,71,80,85,58,32,71,76,83,76,58,32,32,32,32,32,37,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,101,114,116,101,120,80,111,115,105,116,105,111,110,0,0,0,0,0,0,0,0,0,0,118,101,114,116,101,120,84,101,120,67,111,111,114,100,0,0,0,0,0,0,0,0,0,0,118,101,114,116,101,120,67,111,108,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,109,111,100,101,108,118,105,101,119,77,97,116,114,105,120,0,0,0,0,0,0,0,0,0,112,114,111,106,101,99,116,105,111,110,77,97,116,114,105,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,101,120,116,117,114,101,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,84,69,88,32,73,68,32,37,105,93,32,66,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,66,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,112,101,110,71,76,32,71,114,97,112,104,105,99,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,0,0,91,84,69,88,32,73,68,32,37,105,93,32,84,101,120,116,117,114,101,32,105,115,32,110,111,116,32,112,111,119,101,114,45,111,102,45,116,119,111,44,32,109,105,112,109,97,112,115,32,99,97,110,32,110,111,116,32,98,101,32,103,101,110,101,114,97,116,101,100,0,0,0,91,84,69,88,32,73,68,32,37,105,93,32,77,105,112,109,97,112,115,32,103,101,110,101,114,97,116,101,100,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,102,111,114,32,110,101,119,32,116,101,120,116,117,114,101,0,0,0,0,0,91,84,69,88,32,73,68,32,37,105,93,32,84,101,120,116,117,114,101,32,99,114,101,97,116,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,120,37,105,41,0,0,0,0,0,0,0,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,77,111,100,101,108,32,117,112,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,116,111,32,86,82,65,77,32,40,71,80,85,41,0,0,0,0,0,67,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,119,105,100,116,104,58,32,37,105,0,0,0,0,67,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,104,101,105,103,104,116,58,32,37,105,0,0,0,67,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,109,105,112,109,97,112,32,108,101,118,101,108,115,58,32,37,105,0,0,0,0,67,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,58,32,48,120,37,120,0,84,101,120,116,117,114,101,32,99,111,109,112,114,101,115,115,101,100,32,102,111,114,109,97,116,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,0,0,0,0,0,0,0,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,76,105,110,101,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,84,114,105,97,110,103,108,101,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,81,117,97,100,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,0,0,67,80,85,32,98,117,102,102,101,114,115,32,40,108,105,110,101,115,44,32,116,114,105,97,110,103,108,101,115,44,32,113,117,97,100,115,41,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,32,35,118,101,114,115,105,111,110,32,49,48,48,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,109,97,116,52,32,112,114,111,106,101,99,116,105,111,110,77,97,116,114,105,120,59,32,32,32,32,32,10,117,110,105,102,111,114,109,32,109,97,116,52,32,109,111,100,101,108,118,105,101,119,77,97,116,114,105,120,59,32,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,118,101,114,116,101,120,80,111,115,105,116,105,111,110,59,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,118,101,114,116,101,120,84,101,120,67,111,111,114,100,59,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,118,101,114,116,101,120,67,111,108,111,114,59,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,50,32,102,114,97,103,84,101,120,67,111,111,114,100,59,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,52,32,102,114,97,103,67,111,108,111,114,59,32,32,32,32,32,32,32,32,32,32,32,32,10,118,111,105,100,32,109,97,105,110,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,123,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,32,32,32,32,102,114,97,103,84,101,120,67,111,111,114,100,32,61,32,118,101,114,116,101,120,84,101,120,67,111,111,114,100,59,32,10,32,32,32,32,102,114,97,103,67,111,108,111,114,32,61,32,118,101,114,116,101,120,67,111,108,111,114,59,32,32,32,32,32,32,32,10,32,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,112,114,111,106,101,99,116,105,111,110,77,97,116,114,105,120,32,42,32,109,111,100,101,108,118,105,101,119,77,97,116,114,105,120,32,42,32,118,101,99,52,40,118,101,114,116,101,120,80,111,115,105,116,105,111,110,44,32,49,46,48,41,59,32,10,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,0,32,35,118,101,114,115,105,111,110,32,49,48,48,32,32,32,32,32,32,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,32,32,32,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,48,59,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,50,32,102,114,97,103,84,101,120,67,111,111,114,100,59,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,52,32,102,114,97,103,67,111,108,111,114,59,32,32,32,32,32,32,32,32,32,32,32,32,10,118,111,105,100,32,109,97,105,110,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,123,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,48,44,32,102,114,97,103,84,101,120,67,111,111,114,100,41,32,42,32,102,114,97,103,67,111,108,111,114,59,32,10,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,0,0,0,0,0,91,86,83,72,68,82,32,73,68,32,37,105,93,32,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,100,101,102,97,117,108,116,32,118,101,114,116,101,120,32,115,104,97,100,101,114,46,46,46,0,0,0,0,0,0,0,0,91,86,83,72,68,82,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,118,101,114,116,101,120,32,115,104,97,100,101,114,32,99,111,109,112,105,108,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,0,91,70,83,72,68,82,32,73,68,32,37,105,93,32,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,100,101,102,97,117,108,116,32,102,114,97,103,109,101,110,116,32,115,104,97,100,101,114,46,46,46,0,0,0,0,0,0,91,70,83,72,68,82,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,102,114,97,103,109,101,110,116,32,115,104,97,100,101,114,32,99,111,109,112,105,108,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,83,104,97,100,101,114,32,112,114,111,103,114,97,109,32,102,97,105,108,32,108,111,103,58,32,37,115,0,0,0,0,0,91,83,72,68,82,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,115,104,97,100,101,114,32,112,114,111,103,114,97,109,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,32,0,0,176,1,0,0,0,0,0,0,0,0,0,32,37,249,142,0,10,2,0,0,128,190,125,95,244,125,31,160,242,43,74,30,9,82,8,0,64,34,65,80,20,4,16,32,32,41,46,18,8,34,8,0,32,34,65,80,20,4,16,32,32,249,16,76,8,250,62,60,16,34,125,222,247,125,16,32,32,161,232,50,8,34,8,0,8,34,5,16,4,69,16,0,240,163,164,50,8,82,8,0,4,34,5,16,4,69,16,32,32,249,226,94,8,2,0,129,2,62,125,31,244,125,16,0,0,32,0,0,176,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,15,0,192,15,224,247,251,125,126,191,95,232,190,80,0,162,8,8,68,232,47,20,10,133,2,129,80,72,160,80,0,162,40,228,73,40,40,20,10,132,2,129,64,72,160,72,0,190,15,2,16,175,235,247,9,132,62,159,216,79,160,71,0,34,136,228,9,161,42,20,10,132,2,129,80,72,160,72,0,34,40,8,4,160,47,20,10,133,2,129,80,72,162,80,0,190,143,0,0,33,32,244,251,125,126,129,95,232,156,208,7,0,128,0,0,224,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,12,0,130,66,191,223,239,247,251,11,5,5,133,66,191,4,72,0,198,66,161,80,40,20,64,8,5,37,133,66,160,8,168,0,170,70,161,80,40,20,64,8,5,37,133,66,144,16,8,0,146,74,161,95,232,247,67,8,5,37,121,126,136,32,8,0,130,82,161,64,40,1,66,8,137,36,133,64,132,64,8,0,130,98,161,64,42,2,66,8,81,36,133,64,130,128,8,0,130,66,191,192,47,244,67,248,33,252,133,126,191,0,9,62,0,0,0,0,4,0,0,0,0,0,0,0,128,1,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,4,0,32,72,65,0,0,0,0,0,8,0,0,4,4,0,4,60,32,0,65,0,0,0,0,0,8,0,0,240,125,223,247,133,239,75,81,190,239,251,190,239,59,81,4,0,69,65,20,133,40,74,73,170,40,138,162,32,8,81,4,240,69,65,244,157,40,74,71,170,40,138,162,224,11,81,4,16,69,65,20,132,40,74,73,170,40,138,162,0,10,145,2,240,125,223,247,133,47,74,209,170,232,251,190,224,123,31,1,0,0,0,0,4,8,64,0,0,0,8,32,0,0,0,0,0,0,0,0,132,15,96,0,0,0,8,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,36,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,36,1,9,0,0,0,0,0,0,0,0,0,0,162,40,250,36,1,9,0,0,0,0,0,0,0,0,0,0,42,37,66,34,82,9,0,0,0,0,0,0,0,0,0,0,42,34,34,36,41,9,0,0,0,0,0,0,0,0,0,0,42,37,18,36,1,9,0,0,0,0,0,0,0,0,0,0,190,232,251,36,1,9,0,0,0,0,0,0,0,0,0,0,0,0,2,172,1,15,0,0,0,0,0,0,0,0,0,0,0,224,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,91,84,69,88,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,102,111,110,116,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,114,98,109,102,0,0,0,0,91,37,115,93,32,83,112,114,105,116,101,70,111,110,116,32,100,97,116,97,32,112,97,114,115,101,100,32,99,111,114,114,101,99,116,108,121,0,0,0,91,37,115,93,32,83,112,114,105,116,101,70,111,110,116,32,110,117,109,32,99,104,97,114,115,32,100,101,116,101,99,116,101,100,58,32,37,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,37,50,46,48,102,32,70,80,83,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,91,37,115,93,32,114,66,77,70,32,102,111,110,116,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,91,37,115,93,32,76,111,97,100,105,110,103,32,114,66,77,70,32,102,105,108,101,44,32,115,105,122,101,58,32,37,105,120,37,105,44,32,110,117,109,67,104,97,114,115,58,32,37,105,44,32,99,104,97,114,72,101,105,103,104,116,58,32,37,105,0,0,0,0,0,0,0,91,37,115,93,32,73,109,97,103,101,32,114,101,99,111,110,115,116,114,117,99,116,101,100,32,99,111,114,114,101,99,116,108,121,44,32,110,111,119,32,99,111,110,118,101,114,116,105,110,103,32,105,116,32,116,111,32,116,101,120,116,117,114,101,0,0,0,0,0,0,0,0,91,37,115,93,32,114,66,77,70,32,102,105,108,101,32,108,111,97,100,101,100,32,99,111,114,114,101,99,116,108,121,32,97,115,32,83,112,114,105,116,101,70,111,110,116,0,0,0,0,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,99,97,110,39,116,32,102,111,112,101,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,110,103,0,0,0,0,0,98,109,112,0,0,0,0,0,116,103,97,0,0,0,0,0,106,112,103,0,0,0,0,0,103,105,102,0,0,0,0,0,112,115,100,0,0,0,0,0,112,105,99,0,0,0,0,0,91,37,115,93,32,73,109,97,103,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,120,37,105,41,0,0,91,37,115,93,32,73,109,97,103,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,44,32,102,105,108,101,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,0,0,0,0,0,100,100,115,0,0,0,0,0,91,37,115,93,32,68,68,83,32,73,109,97,103,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,117,110,99,111,109,112,114,101,115,115,101,100,44,32,110,111,32,109,105,112,109,97,112,115,41,0,0,0,91,37,115,93,32,68,68,83,32,67,111,109,112,114,101,115,115,101,100,32,105,109,97,103,101,32,100,97,116,97,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,0,0,0,0,0,112,107,109,0,0,0,0,0,91,37,115,93,32,80,75,77,32,67,111,109,112,114,101,115,115,101,100,32,105,109,97,103,101,32,100,97,116,97,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,0,0,0,0,0,91,37,115,93,32,73,109,97,103,101,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,44,32,105,116,32,99,97,110,39,116,32,98,101,32,108,111,97,100,101,100,0,91,37,115,93,32,68,68,83,32,116,101,120,116,117,114,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,0,0,0,91,37,115,93,32,68,68,83,32,116,101,120,116,117,114,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,91,37,115,93,32,80,75,77,32,116,101,120,116,117,114,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,0,0,0,91,37,115,93,32,80,75,77,32,116,101,120,116,117,114,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,84,101,120,116,117,114,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,44,32,105,109,97,103,101,32,100,97,116,97,32,105,115,32,110,111,116,32,118,97,108,105,100,0,0,0,0,73,109,97,103,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,80,79,84,58,32,40,37,105,120,37,105,41,32,45,62,32,40,37,105,120,37,105,41,0,0,0,0,0,0,91,37,115,93,32,80,75,77,32,105,109,97,103,101,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,80,75,77,32,0,0,0,0,91,37,115,93,32,80,75,77,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,115,101,101,109,32,116,111,32,98,101,32,97,32,118,97,108,105,100,32,105,109,97,103,101,0,91,37,115,93,32,68,68,83,32,105,109,97,103,101,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,68,68,83,32,0,0,0,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,115,101,101,109,32,116,111,32,98,101,32,97,32,118,97,108,105,100,32,105,109,97,103,101,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,104,101,97,100,101,114,32,115,105,122,101,58,32,37,105,0,0,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,112,105,120,101,108,32,102,111,114,109,97,116,32,115,105,122,101,58,32,37,105,0,0,0,0,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,112,105,120,101,108,32,102,111,114,109,97,116,32,102,108,97,103,115,58,32,48,120,37,120,0,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,102,111,114,109,97,116,58,32,48,120,37,120,0,0,0,0,0,0,91,37,115,93,32,68,68,83,32,105,109,97,103,101,32,117,115,101,115,32,99,111,109,112,114,101,115,115,105,111,110,44,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,111,110,32,79,112,101,110,71,76,32,49,46,49,0,0,0,0,91,37,115,93,32,68,68,83,32,99,111,109,112,114,101,115,115,101,100,32,102,105,108,101,115,32,114,101,113,117,105,114,101,32,79,112,101,110,71,76,32,51,46,50,43,32,111,114,32,69,83,32,50,46,48,0,117,110,107,110,111,119,110,32,105,109,97,103,101,32,116,121,112,101,0,0,0,0,0,0,109,97,120,32,118,97,108,117,101,32,62,32,50,53,53,0,110,111,116,32,71,73,70,0,0,0,0,0,0,0,0,0,109,117,108,116,105,112,108,101,32,73,72,68,82,0,0,0,98,97,100,32,73,72,68,82,32,108,101,110,0,0,0,0,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,49,47,50,47,52,47,56,45,98,105,116,32,111,110,108,121,0,0,0,0,0,0,0,0,98,97,100,32,99,116,121,112,101,0,0,0,0,0,0,0,98,97,100,32,99,111,109,112,32,109,101,116,104,111,100,0,98,97,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,0,0,0,0,0,0,0,98,97,100,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,0,0,0,0,48,45,112,105,120,101,108,32,105,109,97,103,101,0,0,0,102,105,114,115,116,32,110,111,116,32,73,72,68,82,0,0,105,110,118,97,108,105,100,32,80,76,84,69,0,0,0,0,116,82,78,83,32,97,102,116,101,114,32,73,68,65,84,0,116,82,78,83,32,98,101,102,111,114,101,32,80,76,84,69,0,0,0,0,0,0,0,0,98,97,100,32,116,82,78,83,32,108,101,110,0,0,0,0,116,82,78,83,32,119,105,116,104,32,97,108,112,104,97,0,0,255,85,0,17,0,0,0,1,0,0,0,0,0,0,0,110,111,32,80,76,84,69,0,111,117,116,111,102,109,101,109,0,0,0,0,0,0,0,0,111,117,116,111,102,100,97,116,97,0,0,0,0,0,0,0,110,111,32,73,68,65,84,0,88,88,88,88,32,80,78,71,32,99,104,117,110,107,32,110,111,116,32,107,110,111,119,110,0,0,0,0,0,0,0,0,115,45,62,105,109,103,95,111,117,116,95,110,32,61,61,32,52,0,0,0,0,0,0,0,46,47,115,116,98,95,105,109,97,103,101,46,104,0,0,0,115,116,98,105,95,95,100,101,95,105,112,104,111,110,101,0,111,117,116,95,110,32,61,61,32,50,32,124,124,32,111,117,116,95,110,32,61,61,32,52,0,0,0,0,0,0,0,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,116,114,97,110,115,112,97,114,101,110,99,121,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,32,124,124,32,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,43,49,0,0,0,0,0,0,0,0,115,116,98,105,95,95,99,114,101,97,116,101,95,112,110,103,95,105,109,97,103,101,95,114,97,119,0,0,0,0,0,0,110,111,116,32,101,110,111,117,103,104,32,112,105,120,101,108,115,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,102,105,108,116,101,114,0,0,105,109,103,95,119,105,100,116,104,95,98,121,116,101,115,32,60,61,32,120,0,0,0,0,0,1,0,5,6,0,0,0,105,109,103,95,110,43,49,32,61,61,32,111,117,116,95,110,0,0,0,0,0,0,0,0,105,109,103,95,110,32,61,61,32,51,0,0,0,0,0,0,137,80,78,71,13,10,26,10,98,97,100,32,112,110,103,32,115,105,103,0,0,0,0,0,110,111,32,83,79,73,0,0,110,111,32,83,79,70,0,0,98,97,100,32,83,79,70,32,108,101,110,0,0,0,0,0,111,110,108,121,32,56,45,98,105,116,0,0,0,0,0,0,110,111,32,104,101,97,100,101,114,32,104,101,105,103,104,116,0,0,0,0,0,0,0,0,48,32,119,105,100,116,104,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,0,0,0,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,73,68,0,0,0,0,0,0,0,0,98,97,100,32,72,0,0,0,98,97,100,32,86,0,0,0,98,97,100,32,84,81,0,0,101,120,112,101,99,116,101,100,32,109,97,114,107,101,114,0,98,97,100,32,68,82,73,32,108,101,110,0,0,0,0,0,98,97,100,32,68,81,84,32,116,121,112,101,0,0,0,0,98,97,100,32,68,81,84,32,116,97,98,108,101,0,0,0,0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,98,97,100,32,68,72,84,32,104,101,97,100,101,114,0,0,98,97,100,32,99,111,100,101,32,108,101,110,103,116,104,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,100,32,104,117,102,102,109,97,110,32,99,111,100,101,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,27,0,0,0,31,0,0,0,35,0,0,0,43,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,115,0,0,0,131,0,0,0,163,0,0,0,195,0,0,0,227,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,17,0,0,0,25,0,0,0,33,0,0,0,49,0,0,0,65,0,0,0,97,0,0,0,129,0,0,0,193,0,0,0,1,1,0,0,129,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,8,0,0,1,12,0,0,1,16,0,0,1,24,0,0,1,32,0,0,1,48,0,0,1,64,0,0,1,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,98,97,100,32,100,105,115,116,0,0,0,0,0,0,0,0,111,117,116,112,117,116,32,98,117,102,102,101,114,32,108,105,109,105,116,0,0,0,0,0,122,45,62,115,105,122,101,91,98,93,32,61,61,32,115,0,115,116,98,105,95,95,122,104,117,102,102,109,97,110,95,100,101,99,111,100,101,95,115,108,111,119,112,97,116,104,0,0,98,105,116,115,32,60,61,32,49,54,0,0,0,0,0,0,115,116,98,105,95,95,98,105,116,95,114,101,118,101,114,115,101,0,0,0,0,0,0,0,122,45,62,99,111,100,101,95,98,117,102,102,101,114,32,60,32,40,49,85,32,60,60,32,122,45,62,110,117,109,95,98,105,116,115,41,0,0,0,0,115,116,98,105,95,95,102,105,108,108,95,98,105,116,115,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,0,0,0,0,0,99,32,62,61,32,48,32,38,38,32,99,32,60,32,49,57,0,0,0,0,0,0,0,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,104,117,102,102,109,97,110,95,99,111,100,101,115,0,0,0,0,0,99,32,61,61,32,49,56,0,98,97,100,32,99,111,100,101,108,101,110,103,116,104,115,0,115,105,122,101,115,91,105,93,32,60,61,32,40,49,32,60,60,32,105,41,0,0,0,0,115,116,98,105,95,95,122,98,117,105,108,100,95,104,117,102,102,109,97,110,0,0,0,0,97,45,62,110,117,109,95,98,105,116,115,32,61,61,32,48,0,0,0,0,0,0,0,0,115,116,98,105,95,95,112,97,114,115,101,95,117,110,99,111,109,112,101,114,115,115,101,100,95,98,108,111,99,107,0,0,122,108,105,98,32,99,111,114,114,117,112,116,0,0,0,0,114,101,97,100,32,112,97,115,116,32,98,117,102,102,101,114,0,0,0,0,0,0,0,0,98,97,100,32,122,108,105,98,32,104,101,97,100,101,114,0,110,111,32,112,114,101,115,101,116,32,100,105,99,116,0,0,98,97,100,32,99,111,109,112,114,101,115,115,105,111,110,0,98,97,100,32,112,97,108,101,116,116,101,0,0,0,0,0,114,101,113,95,99,111,109,112,32,62,61,32,49,32,38,38,32,114,101,113,95,99,111,109,112,32,60,61,32,52,0,0,115,116,98,105,95,95,99,111,110,118,101,114,116,95,102,111,114,109,97,116,0,0,0,0,48,0,0,0,0,0,0,0,98,97,100,32,102,105,108,101,0,0,0,0,0,0,0,0,98,97,100,32,102,111,114,109,97,116,0,0,0,0,0,0,83,128,246,52,0,0,0,0,80,73,67,84,0,0,0,0,110,111,116,32,80,83,68,0,119,114,111,110,103,32,118,101,114,115,105,111,110,0,0,0,119,114,111,110,103,32,99,104,97,110,110,101,108,32,99,111,117,110,116,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,98,105,116,32,100,101,112,116,104,0,0,0,119,114,111,110,103,32,99,111,108,111,114,32,102,111,114,109,97,116,0,0,0,0,0,0,98,97,100,32,73,109,97,103,101,32,68,101,115,99,114,105,112,116,111,114,0,0,0,0,109,105,115,115,105,110,103,32,99,111,108,111,114,32,116,97,98,108,101,0,0,0,0,0,117,110,107,110,111,119,110,32,99,111,100,101,0,0,0,0,110,111,32,99,108,101,97,114,32,99,111,100,101,0,0,0,116,111,111,32,109,97,110,121,32,99,111,100,101,115,0,0,105,108,108,101,103,97,108,32,99,111,100,101,32,105,110,32,114,97,115,116,101,114,0,0,110,111,116,32,66,77,80,0,117,110,107,110,111,119,110,32,66,77,80,0,0,0,0,0,98,97,100,32,66,77,80,0,109,111,110,111,99,104,114,111,109,101,0,0,0,0,0,0,66,77,80,32,82,76,69,0,104,115,122,32,61,61,32,49,48,56,32,124,124,32,104,115,122,32,61,61,32,49,50,52,0,0,0,0,0,0,0,0,115,116,98,105,95,95,98,109,112,95,108,111,97,100,0,0,105,110,118,97,108,105,100,0,98,97,100,32,98,112,112,0,98,97,100,32,109,97,115,107,115,0,0,0,0,0,0,0,98,97,100,32,114,101,113,95,99,111,109,112,0,0,0,0,106,117,110,107,32,98,101,102,111,114,101,32,109,97,114,107,101,114,0,0,0,0,0,0,99,97,110,39,116,32,109,101,114,103,101,32,100,99,32,97,110,100,32,97,99,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,253,255,255,255,249,255,255,255,241,255,255,255,225,255,255,255,193,255,255,255,129,255,255,255,1,255,255,255,1,254,255,255,1,252,255,255,1,248,255,255,1,240,255,255,1,224,255,255,1,192,255,255,1,128,255,255,40,40,40,106,45,62,99,111,100,101,95,98,117,102,102,101,114,41,32,62,62,32,40,51,50,32,45,32,104,45,62,115,105,122,101,91,99,93,41,41,32,38,32,115,116,98,105,95,95,98,109,97,115,107,91,104,45,62,115,105,122,101,91,99,93,93,41,32,61,61,32,104,45,62,99,111,100,101,91,99,93,0,0,0,0,0,0,0,115,116,98,105,95,95,106,112,101,103,95,104,117,102,102,95,100,101,99,111,100,101,0,0,98,97,100,32,83,79,83,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,98,97,100,32,83,79,83,32,108,101,110,0,0,0,0,0,98,97,100,32,68,67,32,104,117,102,102,0,0,0,0,0,98,97,100,32,65,67,32,104,117,102,102,0,0,0,0,0,98,97,100,32,83,79,83,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,111,98,106,0,0,0,0,0,91,37,115,93,32,77,111,100,101,108,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,44,32,105,116,32,99,97,110,39,116,32,98,101,32,108,111,97,100,101,100,0,114,116,0,0,0,0,0,0,91,37,115,93,32,79,66,74,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,0,0,0,0,0,0,37,99,0,0,0,0,0,0,91,37,115,93,32,77,111,100,101,108,32,110,117,109,32,118,101,114,116,105,99,101,115,58,32,37,105,0,0,0,0,0,91,37,115,93,32,77,111,100,101,108,32,110,117,109,32,116,101,120,99,111,111,114,100,115,58,32,37,105,0,0,0,0,91,37,115,93,32,77,111,100,101,108,32,110,117,109,32,110,111,114,109,97,108,115,58,32,37,105,0,0,0,0,0,0,91,37,115,93,32,77,111,100,101,108,32,110,117,109,32,116,114,105,97,110,103,108,101,115,58,32,37,105,0,0,0,0,37,102,32,37,102,32,37,102,0,0,0,0,0,0,0,0,91,37,115,93,32,78,111,32,110,111,114,109,97,108,115,32,100,97,116,97,32,111,110,32,79,66,74,44,32,110,111,114,109,97,108,115,32,119,105,108,108,32,98,101,32,103,101,110,101,114,97,116,101,100,32,102,114,111,109,32,102,97,99,101,115,32,100,97,116,97,0,0,37,105,32,37,105,32,37,105,0,0,0,0,0,0,0,0,37,105,47,37,105,32,37,105,47,37,105,32,37,105,47,37,105,0,0,0,0,0,0,0,37,105,47,37,105,47,37,105,32,37,105,47,37,105,47,37,105,32,37,105,47,37,105,47,37,105,0,0,0,0,0,0,91,37,115,93,32,77,111,100,101,108,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,105,110,32,82,65,77,32,40,67,80,85,41,0,0,0,0,0,0,0,0,0,0,0,0,0,65,117,100,105,111,32,100,101,118,105,99,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,115,101,116,117,112,32,97,117,100,105,111,32,99,111,110,116,101,120,116,0,0,0,65,117,100,105,111,32,100,101,118,105,99,101,32,97,110,100,32,99,111,110,116,101,120,116,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,58,32,37,115,0,0,0,67,111,117,108,100,32,110,111,116,32,103,101,116,32,99,117,114,114,101,110,116,32,97,117,100,105,111,32,99,111,110,116,101,120,116,32,102,111,114,32,99,108,111,115,105,110,103,0,119,97,118,0,0,0,0,0,111,103,103,0,0,0,0,0,91,37,115,93,32,83,111,117,110,100,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,44,32,105,116,32,99,97,110,39,116,32,98,101,32,108,111,97,100,101,100,0,91,37,115,93,32,83,111,117,110,100,32,102,105,108,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,83,97,109,112,108,101,82,97,116,101,58,32,37,105,44,32,66,105,116,82,97,116,101,58,32,37,105,44,32,67,104,97,110,110,101,108,115,58,32,37,105,41,0,114,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,37,115,93,32,79,71,71,32,97,117,100,105,111,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,91,37,115,93,32,79,103,103,32,115,97,109,112,108,101,32,114,97,116,101,58,32,37,105,0,0,0,0,0,0,0,0,91,37,115,93,32,79,103,103,32,99,104,97,110,110,101,108,115,58,32,37,105,0,0,0,91,37,115,93,32,84,101,109,112,32,109,101,109,111,114,121,32,114,101,113,117,105,114,101,100,58,32,37,105,0,0,0,91,37,115,93,32,77,117,115,105,99,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,44,32,105,116,32,99,97,110,39,116,32,98,101,32,108,111,97,100,101,100,0,79,103,103,32,112,108,97,121,105,110,103,44,32,101,114,114,111,114,32,98,117,102,102,101,114,105,110,103,32,100,97,116,97,46,46,46,0,0,0,0,91,37,115,93,32,83,97,109,112,108,101,115,32,108,101,110,103,116,104,58,32,37,105,0,91,37,115,93,32,84,111,116], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+6776);
/* memory initializer */ allocate([97,108,32,115,101,99,111,110,100,115,58,32,37,102,0,0,91,37,115,93,32,79,103,103,32,97,117,100,105,111,32,108,101,110,103,104,116,32,105,115,32,108,97,114,103,101,114,32,116,104,97,110,32,49,48,32,115,101,99,111,110,100,115,32,40,37,102,41,44,32,116,104,97,116,39,115,32,97,32,98,105,103,32,102,105,108,101,32,105,110,32,109,101,109,111,114,121,44,32,99,111,110,115,105,100,101,114,32,109,117,115,105,99,32,115,116,114,101,97,109,105,110,103,0,0,0,0,0,91,37,115,93,32,84,111,116,97,108,32,115,97,109,112,108,101,115,32,99,97,108,99,117,108,97,116,101,100,58,32,37,105,0,0,0,0,0,0,0,91,37,115,93,32,83,97,109,112,108,101,115,32,111,98,116,97,105,110,101,100,58,32,37,105,0,0,0,0,0,0,0,91,37,115,93,32,79,71,71,32,102,105,108,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,83,97,109,112,108,101,82,97,116,101,58,32,37,105,44,32,66,105,116,82,97,116,101,58,32,37,105,44,32,67,104,97,110,110,101,108,115,58,32,37,105,41,0,0,0,91,37,115,93,32,87,65,86,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,0,0,0,0,0,0,82,73,70,70,0,0,0,0,87,65,86,69,0,0,0,0,91,37,115,93,32,73,110,118,97,108,105,100,32,82,73,70,70,32,111,114,32,87,65,86,69,32,72,101,97,100,101,114,0,0,0,0,0,0,0,0,91,37,115,93,32,73,110,118,97,108,105,100,32,87,97,118,101,32,102,111,114,109,97,116,0,0,0,0,0,0,0,0,91,37,115,93,32,73,110,118,97,108,105,100,32,100,97,116,97,32,104,101,97,100,101,114,0,0,0,0,0,0,0,0,91,37,115,93,32,87,65,86,32,102,105,108,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,83,97,109,112,108,101,82,97,116,101,58,32,37,105,44,32,66,105,116,82,97,116,101,58,32,37,105,44,32,67,104,97,110,110,101,108,115,58,32,37,105,41,0,0,0,78,111,32,109,111,114,101,32,100,97,116,97,32,111,98,116,97,105,110,101,100,32,102,114,111,109,32,115,116,114,101,97,109,0,0,0,0,0,0,0,73,78,70,79,58,32,0,0,69,82,82,79,82,58,32,0,87,65,82,78,73,78,71,58,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,98,117,102,95,99,32,61,61,32,50,0,0,0,0,0,0,115,116,98,95,118,111,114,98,105,115,46,99,0,0,0,0,99,111,110,118,101,114,116,95,99,104,97,110,110,101,108,115,95,115,104,111,114,116,95,105,110,116,101,114,108,101,97,118,101,100,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,3,5,0,0,0,0,3,7,5,0,0,0,3,5,3,5,0,0,3,7,5,3,5,0,3,7,5,3,5,7,0,0,0,0,0,0,79,103,103,83], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+17016);
/* memory initializer */ allocate([1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,102,45,62,98,121,116,101,115,95,105,110,95,115,101,103,32,62,32,48,0,0,0,0,0,103,101,116,56,95,112,97,99,107,101,116,95,114,97,119,0,102,45,62,98,121,116,101,115,95,105,110,95,115,101,103,32,61,61,32,48,0,0,0,0,110,101,120,116,95,115,101,103,109,101,110,116,0,0,0,0,102,45,62,97,108,108,111,99,46,97,108,108,111,99,95,98,117,102,102,101,114,95,108,101,110,103,116,104,95,105,110,95,98,121,116,101,115,32,61,61,32,102,45,62,116,101,109,112,95,111,102,102,115,101,116,0,118,111,114,98,105,115,95,100,101,99,111,100,101,95,105,110,105,116,105,97,108,0,0,0,102,45,62,116,101,109,112,95,111,102,102,115,101,116,32,61,61,32,102,45,62,97,108,108,111,99,46,97,108,108,111,99,95,98,117,102,102,101,114,95,108,101,110,103,116,104,95,105,110,95,98,121,116,101,115,0,115,116,97,114,116,95,100,101,99,111,100,101,114,0,0,0,112,111,119,40,40,102,108,111,97,116,41,32,114,43,49,44,32,100,105,109,41,32,62,32,101,110,116,114,105,101,115,0,108,111,111,107,117,112,49,95,118,97,108,117,101,115,0,0,40,105,110,116,41,32,102,108,111,111,114,40,112,111,119,40,40,102,108,111,97,116,41,32,114,44,32,100,105,109,41,41,32,60,61,32,101,110,116,114,105,101,115,0,0,0,0,0,107,32,61,61,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,0,99,111,109,112,117,116,101,95,115,111,114,116,101,100,95,104,117,102,102,109,97,110,0,0,99,45,62,115,111,114,116,101,100,95,99,111,100,101,119,111,114,100,115,91,120,93,32,61,61,32,99,111,100,101,0,0,108,101,110,32,33,61,32,78,79,95,67,79,68,69,0,0,105,110,99,108,117,100,101,95,105,110,95,115,111,114,116,0,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,32,61,61,32,48,0,0,99,111,109,112,117,116,101,95,99,111,100,101,119,111,114,100,115,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,97,118,97,105,108,97,98,108,101,91,121,93,32,61,61,32,48,0,0,0,0,0,0,0,118,111,114,98,105,115,0,0,103,101,116,95,119,105,110,100,111,119,0,0,0,0,0,0,0,1,0,0,128,0,0,0,86,0,0,0,64,0,0,0,118,111,114,98,105,115,95,100,101,99,111,100,101,95,112,97,99,107,101,116,95,114,101,115,116,0,0,0,0,0,0,0,40,110,32,38,32,51,41,32,61,61,32,48,0,0,0,0,105,109,100,99,116,95,115,116,101,112,51,95,105,116,101,114,48,95,108,111,111,112,0,0,62,180,228,51,9,145,243,51,139,178,1,52,60,32,10,52,35,26,19,52,96,169,28,52,167,215,38,52,75,175,49,52,80,59,61,52,112,135,73,52,35,160,86,52,184,146,100,52,85,109,115,52,136,159,129,52,252,11,138,52,147,4,147,52,105,146,156,52,50,191,166,52,63,149,177,52,147,31,189,52,228,105,201,52,173,128,214,52,54,113,228,52,166,73,243,52,136,140,1,53,192,247,9,53,6,239,18,53,118,123,28,53,192,166,38,53,55,123,49,53,218,3,61,53,94,76,73,53,59,97,86,53,185,79,100,53,252,37,115,53,138,121,129,53,134,227,137,53,124,217,146,53,133,100,156,53,82,142,166,53,51,97,177,53,37,232,188,53,220,46,201,53,206,65,214,53,65,46,228,53,87,2,243,53,143,102,1,54,79,207,9,54,245,195,18,54,152,77,28,54,232,117,38,54,50,71,49,54,116,204,60,54,94,17,73,54,101,34,86,54,206,12,100,54,184,222,114,54,151,83,129,54,28,187,137,54,114,174,146,54,175,54,156,54,129,93,166,54,53,45,177,54,199,176,188,54,228,243,200,54,1,3,214,54,96,235,227,54,30,187,242,54,162,64,1,55,235,166,9,55,241,152,18,55,201,31,28,55,30,69,38,55,61,19,49,55,30,149,60,55,111,214,72,55,162,227,85,55,247,201,99,55,137,151,114,55,175,45,129,55,190,146,137,55,116,131,146,55,230,8,156,55,190,44,166,55,71,249,176,55,121,121,188,55,254,184,200,55,71,196,213,55,146,168,227,55,248,115,242,55,192,26,1,56,147,126,9,56,249,109,18,56,6,242,27,56,98,20,38,56,86,223,48,56,216,93,60,56,146,155,72,56,242,164,85,56,51,135,99,56,110,80,114,56,211,7,129,56,107,106,137,56,130,88,146,56,42,219,155,56,9,252,165,56,104,197,176,56,59,66,188,56,41,126,200,56,160,133,213,56,217,101,227,56,232,44,242,56,233,244,0,57,70,86,9,57,14,67,18,57,81,196,27,57,181,227,37,57,127,171,48,57,162,38,60,57,197,96,72,57,83,102,85,57,131,68,99,57,104,9,114,57,1,226,128,57,36,66,137,57,157,45,146,57,123,173,155,57,99,203,165,57,153,145,176,57,13,11,188,57,102,67,200,57,11,71,213,57,50,35,227,57,237,229,241,57,29,207,0,58,5,46,9,58,48,24,18,58,169,150,27,58,21,179,37,58,183,119,48,58,124,239,59,58,10,38,72,58,199,39,85,58,230,1,99,58,120,194,113,58,59,188,128,58,233,25,137,58,198,2,146,58,219,127,155,58,203,154,165,58,216,93,176,58,239,211,187,58,179,8,200,58,136,8,213,58,159,224,226,58,7,159,241,58,92,169,0,59,208,5,9,59,94,237,17,59,15,105,27,59,132,130,37,59,253,67,48,59,103,184,59,59,97,235,71,59,77,233,84,59,93,191,98,59,156,123,113,59,127,150,128,59,186,241,136,59,249,215,145,59,71,82,155,59,65,106,165,59,39,42,176,59,226,156,187,59,18,206,199,59,23,202,212,59,32,158,226,59,53,88,241,59,166,131,0,60,167,221,8,60,152,194,17,60,130,59,27,60,1,82,37,60,84,16,48,60,97,129,59,60,200,176,71,60,229,170,84,60,232,124,98,60,212,52,113,60,207,112,128,60,150,201,136,60,58,173,145,60,192,36,155,60,197,57,165,60,133,246,175,60,229,101,187,60,130,147,199,60,185,139,212,60,180,91,226,60,121,17,241,60,251,93,0,61,137,181,8,61,223,151,17,61,2,14,27,61,141,33,37,61,185,220,47,61,109,74,59,61,64,118,71,61,145,108,84,61,133,58,98,61,34,238,112,61,42,75,128,61,127,161,136,61,136,130,145,61,72,247,154,61,88,9,165,61,242,194,175,61,248,46,187,61,3,89,199,61,109,77,212,61,92,25,226,61,209,202,240,61,91,56,0,62,119,141,8,62,51,109,17,62,144,224,26,62,39,241,36,62,46,169,47,62,135,19,59,62,202,59,71,62,77,46,84,62,55,248,97,62,132,167,112,62,143,37,128,62,115,121,136,62,226,87,145,62,220,201,154,62,249,216,164,62,109,143,175,62,27,248,186,62,149,30,199,62,51,15,212,62,23,215,225,62,61,132,240,62,198,18,0,63,114,101,8,63,147,66,17,63,43,179,26,63,206,192,36,63,177,117,47,63,178,220,58,63,101,1,71,63,29,240,83,63,251,181,97,63,251,96,112,63,0,0,128,63,122,32,60,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,0,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,115,116,97,114,116,0,0,0,33,99,45,62,115,112,97,114,115,101,32,124,124,32,122,32,60,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,0,0,0,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,100,101,105,110,116,101,114,108,101,97,118,101,95,114,101,112,101,97,116,0,0,0,0,0,99,45,62,115,111,114,116,101,100,95,99,111,100,101,119,111,114,100,115,32,124,124,32,99,45,62,99,111,100,101,119,111,114,100,115,0,0,0,0,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,115,99,97,108,97,114,95,114,97,119,0,0,0,0,0,0,33,99,45,62,115,112,97,114,115,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+18777);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  var GL={counter:1,lastError:0,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        // FIXME: possible bug with negative x
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            switch (format) {
              case 0x1906 /* GL_ALPHA */:
              case 0x1909 /* GL_LUMINANCE */:
                sizePerPixel = 1;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4;
                break;
              case 0x190A /* GL_LUMINANCE_ALPHA */:
                sizePerPixel = 2;
                break;
              default:
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return {
                  pixels: null,
                  internalFormat: 0x0
                };
            }
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 2;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return {
                pixels: null,
                internalFormat: 0x0
              };
            }
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 4;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return {
                pixels: null,
                internalFormat: 0x0
              };
            }
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          case 0x1406 /* GL_FLOAT */:
            switch (format) {
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*4;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*4;
                break;
              default:
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return {
                  pixels: null,
                  internalFormat: 0x0
                };
            }
            internalFormat = GLctx.RGBA;
            break;
          case 0x8D61 /* GL_HALF_FLOAT_OES */:
            switch (format) {
              case 0x1903 /* GL_RED */:
                sizePerPixel = 2;
                break;
              case 0x8277 /* GL_RG */:
                sizePerPixel = 2*2;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*2;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*2;
                break;
              default:
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return {
                  pixels: null,
                  internalFormat: 0x0
                };
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },createContext:function (canvas, webGLContextAttributes) {
        // Default to creating a WebGL 1.0 context if nothing else is specified.
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        var handle = GL.getNewId(GL.contexts);
        var context = { handle: handle };
        context.GLctx = ctx;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['webGLContextAttributes'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = 0;
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
  
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
  
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
  
        context.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        context.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        context.vaoExt = GLctx.getExtension('OES_vertex_array_object');
  
        context.drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
   
        GLctx.getSupportedExtensions().forEach(function(ext) {
          ext = ext.replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        });
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  
  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (ENVIRONMENT_IS_WEB && window['performance'] && window['performance']['now']) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return window['performance']['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x61:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
  
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[0x10]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[0x11]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[0x12]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[0x5B]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        Runtime.dynCall('vii', GLFW.active.charFunc, [GLFW.active.id, charCode]);
      },onKeyChanged:function (event, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key == -1) return;
  
        GLFW.active.keys[key] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        Runtime.dynCall('viiiii', GLFW.active.keyFunc, [GLFW.active.id, key, event.keyCode, status, GLFW.getModBits(GLFW.active)]);
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1); // GLFW_PRESS
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0); // GLFW_RELEASE
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        Runtime.dynCall('vidd', GLFW.active.cursorPosFunc, [GLFW.active.id, Browser.mouseX, Browser.mouseY]);
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active || !GLFW.active.mouseButtonFunc) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        if (status == 1) { // GLFW_PRESS
          try {
            event.target.setCapture();
          } catch (e) {}
        }
  
        // DOM and glfw have different button codes
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
  
  
        Runtime.dynCall('viiii', GLFW.active.mouseButtonFunc, [GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active)]);
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons |= (1 << event['button']);
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons &= ~(1 << event['button']);
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        Runtime.dynCall('viii', GLFW.active.scrollFunc, [GLFW.active.id, sx, sy]);
  
        event.preventDefault();
      },onFullScreenEventChange:function (event) {
        if (!GLFW.active) return;
  
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
        } else {
          document.removeEventListener('fullscreenchange', GLFW.onFullScreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLFW.onFullScreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLFW.onFullScreenEventChange, true);
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
        }
  
        Browser.setCanvasSize(GLFW.active.width, GLFW.active.height);
  
        if (!GLFW.active.windowResizeFunc) return;
  
  
        Runtime.dynCall('viii', GLFW.active.windowResizeFunc, [GLFW.active.id, width, height]);
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mousePosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseWheelFunc = cbfun;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullScreen();
          } else {
            GLFW.cancelFullScreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowResizeFunc) return;
  
  
        Runtime.dynCall('viii', win.windowResizeFunc, [win.id, width, height]);
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullScreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0)    // GLFW_STENCIL_BITS
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          Runtime.dynCall('vi', win.windowCloseFunc, [win.id]);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      GLFW.setScrollCallback(winid, cbfun);
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue;
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      GLFW.setWindowSizeCallback(winid, cbfun);
    }

  
  var AL={contexts:[],currentContext:null,alcErr:0,stringCache:{},alcStringCache:{},QUEUE_INTERVAL:25,QUEUE_LOOKAHEAD:100,newSrcId:0,updateSources:function updateSources(context) {
        for (var srcId in context.src) {
          AL.updateSource(context.src[srcId]);
        }
      },updateSource:function updateSource(src) {
        if (src.state !== 0x1012 /* AL_PLAYING */) {
          return;
        }
  
        var currentTime = AL.currentContext.ctx.currentTime;
        var startTime = src.bufferPosition;
  
        for (var i = src.buffersPlayed; i < src.queue.length; i++) {
          var entry = src.queue[i];
  
          var startOffset = startTime - currentTime;
          var endTime = startTime + entry.buffer.duration;
  
          // Clean up old buffers.
          if (currentTime >= endTime) {
            // Update our location in the queue.
            src.bufferPosition = endTime;
            src.buffersPlayed = i + 1;
  
            // Stop / restart the source when we hit the end.
            if (src.buffersPlayed >= src.queue.length) {
              if (src.loop) {
                AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
              } else {
                AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
              }
            }
          }
          // Process all buffers that'll be played before the next tick.
          else if (startOffset < (AL.QUEUE_LOOKAHEAD / 1000) && !entry.src) {
            // If the start offset is negative, we need to offset the actual buffer.
            var offset = Math.abs(Math.min(startOffset, 0));
  
            entry.src = AL.currentContext.ctx.createBufferSource();
            entry.src.buffer = entry.buffer;
            entry.src.connect(src.gain);
            if (typeof(entry.src.start) !== 'undefined') {
              entry.src.start(startTime, offset);
            } else if (typeof(entry.src.noteOn) !== 'undefined') {
              entry.src.noteOn(startTime);
            }
          }
  
          startTime = endTime;
        }
      },setSourceState:function setSourceState(src, state) {
        if (state === 0x1012 /* AL_PLAYING */) {
          if (src.state !== 0x1013 /* AL_PAUSED */) {
            src.state = 0x1012 /* AL_PLAYING */;
            // Reset our position.
            src.bufferPosition = AL.currentContext.ctx.currentTime;
            src.buffersPlayed = 0;
          } else {
            src.state = 0x1012 /* AL_PLAYING */;
            // Use the current offset from src.bufferPosition to resume at the correct point.
            src.bufferPosition = AL.currentContext.ctx.currentTime - src.bufferPosition;
          }
          AL.stopSourceQueue(src);
          AL.updateSource(src);
        } else if (state === 0x1013 /* AL_PAUSED */) {
          if (src.state === 0x1012 /* AL_PLAYING */) {
            src.state = 0x1013 /* AL_PAUSED */;
            // Store off the current offset to restore with on resume.
            src.bufferPosition = AL.currentContext.ctx.currentTime - src.bufferPosition;
            AL.stopSourceQueue(src);
          }
        } else if (state === 0x1014 /* AL_STOPPED */) {
          if (src.state !== 0x1011 /* AL_INITIAL */) {
            src.state = 0x1014 /* AL_STOPPED */;
            src.buffersPlayed = src.queue.length;
            AL.stopSourceQueue(src);
          }
        } else if (state == 0x1011 /* AL_INITIAL */) {
          if (src.state !== 0x1011 /* AL_INITIAL */) {
            src.state = 0x1011 /* AL_INITIAL */;
            src.bufferPosition = 0;
            src.buffersPlayed = 0;
          }
        }
      },stopSourceQueue:function stopSourceQueue(src) {
        for (var i = 0; i < src.queue.length; i++) {
          var entry = src.queue[i];
          if (entry.src) {
            entry.src.stop(0);
            entry.src = null;
          }
        }
      }};function _alSourcei(source, param, value) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      switch (param) {
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
        src.coneInnerAngle = value;
        break;
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
        src.coneOuterAngle = value;
        break;
      case 0x1007 /* AL_LOOPING */:
        src.loop = (value === 1 /* AL_TRUE */);
        break;
      case 0x1009 /* AL_BUFFER */:
        var buffer = AL.currentContext.buf[value - 1];
        if (value == 0) {
          src.queue = [];
        } else {
          src.queue = [{ buffer: buffer }];
        }
        AL.updateSource(src);
        break;
      case 0x202 /* AL_SOURCE_RELATIVE */:
        if (value === 1 /* AL_TRUE */) {
          if (src.panner) {
            src.panner = null;
  
            // Disconnect from the panner.
            src.gain.disconnect();
  
            src.gain.connect(AL.currentContext.ctx.destination);
          }
        } else if (value === 0 /* AL_FALSE */) {
          if (!src.panner) {
            var panner = src.panner = AL.currentContext.ctx.createPanner();
            panner.panningModel = "equalpower";
            panner.distanceModel = "linear";
            panner.refDistance = src.refDistance;
            panner.maxDistance = src.maxDistance;
            panner.rolloffFactor = src.rolloffFactor;
            panner.setPosition(src.position[0], src.position[1], src.position[2]);
            panner.setVelocity(src.velocity[0], src.velocity[1], src.velocity[2]);
            panner.connect(AL.currentContext.ctx.destination);
  
            // Disconnect from the default source.
            src.gain.disconnect();
  
            src.gain.connect(panner);
          }
        } else {
          AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        }
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _alSourceQueueBuffers(source, count, buffers) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)];
        if (bufferIdx > AL.currentContext.buf.length) {
          AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = AL.currentContext.buf[bufferIdx - 1];
        src.queue.push({ buffer: buffer, src: null });
      }
  
      AL.updateSource(src);
    }

  function _alcGetCurrentContext() {
      for (var i = 0; i < AL.contexts.length; ++i) {
        if (AL.contexts[i] == AL.currentContext) {
          return i + 1;
        }
      }
      return 0;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _alSourcef(source, param, value) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      switch (param) {
      case 0x1003 /* AL_PITCH */:
        break;
      case 0x100A /* AL_GAIN */:
        src.gain.gain.value = value;
        break;
      // case 0x100D /* AL_MIN_GAIN */:
      //   break;
      // case 0x100E /* AL_MAX_GAIN */:
      //   break;
      case 0x1023 /* AL_MAX_DISTANCE */:
        src.maxDistance = value;
        break;
      case 0x1021 /* AL_ROLLOFF_FACTOR */:
        src.rolloffFactor = value;
        break;
      case 0x1022 /* AL_CONE_OUTER_GAIN */:
        src.coneOuterGain = value;
        break;
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
        src.coneInnerAngle = value;
        break;
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
        src.coneOuterAngle = value;
        break;
      case 0x1020 /* AL_REFERENCE_DISTANCE */:
        src.refDistance = value;
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _alcGetString(device, param) {
      if (AL.alcStringCache[param]) return AL.alcStringCache[param];
      var ret;
      switch (param) {
      case 0 /* ALC_NO_ERROR */:
        ret = 'No Error';
        break;
      case 0xA001 /* ALC_INVALID_DEVICE */:
        ret = 'Invalid Device';
        break;
      case 0xA002 /* ALC_INVALID_CONTEXT */:
        ret = 'Invalid Context';
        break;
      case 0xA003 /* ALC_INVALID_ENUM */:
        ret = 'Invalid Enum';
        break;
      case 0xA004 /* ALC_INVALID_VALUE */:
        ret = 'Invalid Value';
        break;
      case 0xA005 /* ALC_OUT_OF_MEMORY */:
        ret = 'Out of Memory';
        break;
      case 0x1004 /* ALC_DEFAULT_DEVICE_SPECIFIER */:
        if (typeof(AudioContext) !== "undefined" ||
            typeof(webkitAudioContext) !== "undefined") {
          ret = 'Device';
        } else {
          return 0;
        }
        break;
      case 0x1005 /* ALC_DEVICE_SPECIFIER */:
        if (typeof(AudioContext) !== "undefined" ||
            typeof(webkitAudioContext) !== "undefined") {
          ret = 'Device\0';
        } else {
          ret = '\0';
        }
        break;
      case 0x311 /* ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER */:
        return 0;
        break;
      case 0x310 /* ALC_CAPTURE_DEVICE_SPECIFIER */:
        ret = '\0'
        break;
      case 0x1006 /* ALC_EXTENSIONS */:
        if (!device) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return 0;
        }
        ret = '';
        break;
      default:
        AL.alcErr = 0xA003 /* ALC_INVALID_ENUM */;
        return 0;
      }
  
      ret = allocate(intArrayFromString(ret), 'i8', ALLOC_NORMAL);
  
      AL.alcStringCache[param] = ret;
  
      return ret;
    }

   
  Module["_memmove"] = _memmove;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.textures);
        var texture = GLctx.createTexture();
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _glDepthFunc(x0) { GLctx.depthFunc(x0) }

  function _glDeleteShader(shader) {
      GLctx.deleteShader(GL.shaders[shader]);
      GL.shaders[shader] = null;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  function _alGetError() {
      if (!AL.currentContext) {
        return 0xA004 /* AL_INVALID_OPERATION */;
      } else {
        // Reset error on get.
        var err = AL.currentContext.err;
        AL.currentContext.err = 0 /* AL_NO_ERROR */;
        return err;
      }
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      assert(GL.currentContext.compressionExt);
      if (data) {
        data = HEAPU8.subarray((data),(data+imageSize));
      } else {
        data = null;
      }
      // N.b. using array notation explicitly to not confuse Closure minification.
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data);
    }

  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  function _glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        HEAP32[((p)>>2)]=GLctx.getProgramInfoLog(GL.programs[program]).length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _alDeleteBuffers(count, buffers)
    {
      if (!AL.currentContext) {
        return;
      }
      if (count > AL.currentContext.buf.length) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)] - 1;
  
        // Make sure the buffer index is valid.
        if (bufferIdx >= AL.currentContext.buf.length || !AL.currentContext.buf[bufferIdx]) {
          AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
  
        // Make sure the buffer is no longer in use.
        var buffer = AL.currentContext.buf[bufferIdx];
        for (var srcId in AL.currentContext.src) {
          var src = AL.currentContext.src[srcId];
          if (!src) {
            continue;
          }
          for (var k = 0; k < src.queue.length; k++) {
            if (buffer === src.queue[k].buffer) {
              AL.currentContext.err = 0xA004 /* AL_INVALID_OPERATION */;
              return;
            }
          }
        }
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)] - 1;
        delete AL.currentContext.buf[bufferIdx];
      }
    }

  function _alcMakeContextCurrent(context) {
      if (context == 0) {
        AL.currentContext = null;
        return 0;
      } else {
        AL.currentContext = AL.contexts[context - 1];
        return 1;
      }
    }

  function _alListener3f(param, v1, v2, v3) {
      if (!AL.currentContext) {
        return;
      }
      switch (param) {
      case 0x1004 /* AL_POSITION */:
        AL.currentContext.ctx.listener._position = [v1, v2, v3];
        AL.currentContext.ctx.listener.setPosition(v1, v2, v3);
        break;
      case 0x1006 /* AL_VELOCITY */:
        AL.currentContext.ctx.listener._velocity = [v1, v2, v3];
        AL.currentContext.ctx.listener.setVelocity(v1, v2, v3);
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      // Work around a bug in Chromium which causes getProgramInfoLog to return null
      if (!log) {
        log = "";
      }
      log = log.substr(0, maxLength - 1);
      writeStringToMemory(log, infoLog);
      if (length) {
        HEAP32[((length)>>2)]=log.length
      }
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

  function _alSource3f(source, param, v1, v2, v3) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      switch (param) {
      case 0x1004 /* AL_POSITION */:
        src.position = [v1, v2, v3];
        break;
      case 0x1005 /* AL_DIRECTION */:
        src.direction = [v1, v2, v3];
        break;
      case 0x1006 /* AL_VELOCITY */:
        src.velocity = [v1, v2, v3];
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  function _glDeleteProgram(program) {
      var program = GL.programs[program];
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[program] = null;
      GL.programInfos[program] = null;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  var _setSourceState=undefined;function _alSourcePlay(source) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glfwPollEvents() {}

  function _glfwGetPrimaryMonitor() {
      return 1;
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  var _sinf=Math_sin;

  var _cos=Math_cos;

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _alcDestroyContext(context) {
      // Stop playback, etc
      clearInterval(AL.contexts[context - 1].interval);
    }

  function _glGenerateMipmap(x0) { GLctx.generateMipmap(x0) }

  function _glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        // Work around a bug in Chromium which causes getShaderInfoLog to return null
        if (!log) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  function _glfwSetErrorCallback(cbfun) {
      GLFW.errorFunc = cbfun;
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _glfwTerminate() {
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _alcCreateContext(device, attrList) {
      if (device != 1) {
        return 0;
      }
  
      if (attrList) {
        return 0;
      }
  
      var ctx;
      try {
        ctx = new AudioContext();
      } catch (e) {
        try {
          ctx = new webkitAudioContext();
        } catch (e) {}
      }
  
      if (ctx) {
        // Old Web Audio API (e.g. Safari 6.0.5) had an inconsistently named createGainNode function.
        if (typeof(ctx.createGain) === 'undefined') ctx.createGain = ctx.createGainNode;
  
        var gain = ctx.createGain();
        gain.connect(ctx.destination);
        var context = {
          ctx: ctx,
          err: 0,
          src: {},
          buf: [],
          interval: setInterval(function() { AL.updateSources(context); }, AL.QUEUE_INTERVAL),
          gain: gain
        };
        AL.contexts.push(context);
        return AL.contexts.length;
      } else {
        return 0;
      }
    }

  function _alSourceStop(source) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
    }

  function _alcCloseDevice(device) {
      // Stop playback, etc
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  var _sqrtf=Math_sqrt;

   
  Module["_strncpy"] = _strncpy;

  function _alcOpenDevice(deviceName) {
      if (typeof(AudioContext) !== "undefined" ||
          typeof(webkitAudioContext) !== "undefined") {
        return 1; // non-null pointer -- we just simulate one device
      } else {
        return 0;
      }
    }

  var _log=Math_log;

  function _glClear(x0) { GLctx.clear(x0) }

  function _glfwSetCharCallback(winid, cbfun) {
      GLFW.setCharCallback(winid, cbfun);
    }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _alSourceUnqueueBuffers(source, count, buffers) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
  
      if (count > src.buffersPlayed) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      for (var i = 0; i < count; i++) {
        var entry = src.queue.shift();
        // Write the buffers index out to the return list.
        for (var j = 0; j < AL.currentContext.buf.length; j++) {
          var b = AL.currentContext.buf[j];
          if (b && b == entry.buffer) {
            HEAP32[(((buffers)+(i*4))>>2)]=j+1;
            break;
          }
        }
        src.buffersPlayed--;
      }
  
      AL.updateSource(src);
    }

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.cursorEnterFunc = cbfun;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  var _BDtoIHigh=true;

  function _alGetSourcei(source, param, value) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
  
      // Being that we have no way to receive end events from buffer nodes,
      // we currently proccess and update a source's buffer queue every
      // ~QUEUE_INTERVAL milliseconds. However, this interval is not precise,
      // so we also forcefully update the source when alGetSourcei is queried
      // to aid in the common scenario of application calling alGetSourcei(AL_BUFFERS_PROCESSED)
      // to recycle buffers.
      AL.updateSource(src);
  
      switch (param) {
      case 0x202 /* AL_SOURCE_RELATIVE */:
        HEAP32[((value)>>2)]=src.panner ? 1 : 0;
        break;
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
        HEAP32[((value)>>2)]=src.coneInnerAngle;
        break;
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
        HEAP32[((value)>>2)]=src.coneOuterAngle;
        break;
      case 0x1009 /* AL_BUFFER */:
        if (!src.queue.length) {
          HEAP32[((value)>>2)]=0;
        } else {
          // Find the first unprocessed buffer.
          var buffer = src.queue[src.buffersPlayed].buffer;
          // Return its index.
          for (var i = 0; i < AL.currentContext.buf.length; ++i) {
            if (buffer == AL.currentContext.buf[i]) {
              HEAP32[((value)>>2)]=i+1;
              return;
            }
          }
          HEAP32[((value)>>2)]=0;
        }
        break;
      case 0x1010 /* AL_SOURCE_STATE */:
        HEAP32[((value)>>2)]=src.state;
        break;
      case 0x1015 /* AL_BUFFERS_QUEUED */:
        HEAP32[((value)>>2)]=src.queue.length
        break;
      case 0x1016 /* AL_BUFFERS_PROCESSED */:
        if (src.loop) {
          HEAP32[((value)>>2)]=0
        } else {
          HEAP32[((value)>>2)]=src.buffersPlayed
        }
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _alcGetContextsDevice(context) {
      if (context <= AL.contexts.length && context > 0) {
        // Returns the only one audio device
        return 1;
      }
      return 0;
    }

  function _alGenSources(count, sources) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        var gain = AL.currentContext.ctx.createGain();
        gain.connect(AL.currentContext.gain);
        AL.currentContext.src[AL.newSrcId] = {
          state: 0x1011 /* AL_INITIAL */,
          queue: [],
          loop: false,
          get refDistance() {
            return this._refDistance || 1;
          },
          set refDistance(val) {
            this._refDistance = val;
            if (this.panner) this.panner.refDistance = val;
          },
          get maxDistance() {
            return this._maxDistance || 10000;
          },
          set maxDistance(val) {
            this._maxDistance = val;
            if (this.panner) this.panner.maxDistance = val;
          },
          get rolloffFactor() {
            return this._rolloffFactor || 1;
          },
          set rolloffFactor(val) {
            this._rolloffFactor = val;
            if (this.panner) this.panner.rolloffFactor = val;
          },
          get position() {
            return this._position || [0, 0, 0];
          },
          set position(val) {
            this._position = val;
            if (this.panner) this.panner.setPosition(val[0], val[1], val[2]);
          },
          get velocity() {
            return this._velocity || [0, 0, 0];
          },
          set velocity(val) {
            this._velocity = val;
            if (this.panner) this.panner.setVelocity(val[0], val[1], val[2]);
          },
          get direction() {
            return this._direction || [0, 0, 0];
          },
          set direction(val) {
            this._direction = val;
            if (this.panner) this.panner.setOrientation(val[0], val[1], val[2]);
          },
          get coneOuterGain() {
            return this._coneOuterGain || 0.0;
          },
          set coneOuterGain(val) {
            this._coneOuterGain = val;
            if (this.panner) this.panner.coneOuterGain = val;
          },
          get coneInnerAngle() {
            return this._coneInnerAngle || 360.0;
          },
          set coneInnerAngle(val) {
            this._coneInnerAngle = val;
            if (this.panner) this.panner.coneInnerAngle = val;
          },
          get coneOuterAngle() {
            return this._coneOuterAngle || 360.0;
          },
          set coneOuterAngle(val) {
            this._coneOuterAngle = val;
            if (this.panner) this.panner.coneOuterAngle = val;
          },
          gain: gain,
          panner: null,
          buffersPlayed: 0,
          bufferPosition: 0
        };
        HEAP32[(((sources)+(i*4))>>2)]=AL.newSrcId;
        AL.newSrcId++;
      }
    }

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)>>0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)>>0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)>>0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)>>0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var quarter = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
            if (format[formatIndex] == 'h') {
              quarter = true;
              formatIndex++;
            }
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          var base = 10;
          switch (type) {
            case 'X': case 'x':
              base = 16;
            case 'd': case 'u': case 'i':
              if (quarter) {
                HEAP8[((argPtr)>>0)]=parseInt(text, base);
              } else if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, base);
              } else if (longLong) {
                (tempI64 = [parseInt(text, base)>>>0,(tempDouble=parseInt(text, base),(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, base);
              }
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))>>0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }
  
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        return -1;
      }
      var buffer = [];
      function get() {
        var c = _fgetc(stream);
        buffer.push(c);
        return c;
      };
      function unget() {
        _ungetc(buffer.pop(), stream);
      };
      return __scanString(format, get, unget, varargs);
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initalTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      return 1; // GL_TRUE
    }

  function _alDeleteSources(count, sources) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        var sourceIdx = HEAP32[(((sources)+(i*4))>>2)];
        delete AL.currentContext.src[sourceIdx];
      }
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }


  function _glfwDefaultWindowHints() {
      GLFW.hints = GLFW.defaultHints;
    }

  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  function _abort() {
      Module['abort']();
    }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _alGenBuffers(count, buffers) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        AL.currentContext.buf.push(null);
        HEAP32[(((buffers)+(i*4))>>2)]=AL.currentContext.buf.length;
      }
    }

  function _glEnable(x0) { GLctx.enable(x0) }

  function _alBufferData(buffer, format, data, size, freq) {
      if (!AL.currentContext) {
        return;
      }
      if (buffer > AL.currentContext.buf.length) {
        return;
      }
      var channels, bytes;
      switch (format) {
      case 0x1100 /* AL_FORMAT_MONO8 */:
        bytes = 1;
        channels = 1;
        break;
      case 0x1101 /* AL_FORMAT_MONO16 */:
        bytes = 2;
        channels = 1;
        break;
      case 0x1102 /* AL_FORMAT_STEREO8 */:
        bytes = 1;
        channels = 2;
        break;
      case 0x1103 /* AL_FORMAT_STEREO16 */:
        bytes = 2;
        channels = 2;
        break;
      default:
        return;
      }
      try {
        AL.currentContext.buf[buffer - 1] = AL.currentContext.ctx.createBuffer(channels, size / (bytes * channels), freq);
        AL.currentContext.buf[buffer - 1].bytesPerSample =  bytes;
      } catch (e) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
      var buf = new Array(channels);
      for (var i = 0; i < channels; ++i) {
        buf[i] = AL.currentContext.buf[buffer - 1].getChannelData(i);
      }
      for (var i = 0; i < size / (bytes * channels); ++i) {
        for (var j = 0; j < channels; ++j) {
          switch (bytes) {
          case 1:
            var val = HEAP8[(((data)+(i*channels+j))>>0)] & 0xff;  // unsigned
            buf[j][i] = -1.0 + val * (2/256);
            break;
          case 2:
            var val = HEAP16[(((data)+(2*(i*channels+j)))>>1)];
            buf[j][i] = val/32768;
            break;
          }
        }
      }
    }

  var _floor=Math_floor;


  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.buffers);
        var buffer = GLctx.createBuffer();
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _rewind(stream) {
      // void rewind(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rewind.html
      _fseek(stream, 0, 0);  // SEEK_SET.
      var streamObj = FS.getStreamFromPtr(stream);
      if (streamObj) streamObj.error = false;
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }

  var _sin=Math_sin;

  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.scheduler, 'there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one, if you want to');
  
      Browser.mainLoop.shouldPause = Browser.mainLoop.paused = false; // if we were cancelled or paused, undo that
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from non-main loop sources
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from the main loop itself
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
        Browser.mainLoop.scheduler();
      }
      if (fps && fps > 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, 1000/fps); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }

  function _glfwDestroyWindow(winid) {
      return GLFW.destroyWindow(winid);
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glfwSetKeyCallback(winid, cbfun) {
      GLFW.setKeyCallback(winid, cbfun);
    }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _glfwGetKey(winid, key) {
      return GLFW.getKey(winid, key);
    }

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }


  function _whiteTexture() {
  Module['printErr']('missing function: whiteTexture'); abort(-1);
  }
var GLctx; GL.init()
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'use asm';
    
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);

  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stdout=env._stdout|0;
  var _whiteTexture=env._whiteTexture|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vii=env.invoke_vii;
  var invoke_vidd=env.invoke_vidd;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _alGetError=env._alGetError;
  var _exp=env._exp;
  var _glfwCreateWindow=env._glfwCreateWindow;
  var _sqrtf=env._sqrtf;
  var _fread=env._fread;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _glGetShaderiv=env._glGetShaderiv;
  var _alBufferData=env._alBufferData;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var _glBindBuffer=env._glBindBuffer;
  var _glCreateProgram=env._glCreateProgram;
  var _alSource3f=env._alSource3f;
  var _fsync=env._fsync;
  var _sbrk=env._sbrk;
  var _glBlendFunc=env._glBlendFunc;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _rewind=env._rewind;
  var _cos=env._cos;
  var _recv=env._recv;
  var _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback;
  var _glfwInit=env._glfwInit;
  var _write=env._write;
  var _ftell=env._ftell;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var _alSourcePlay=env._alSourcePlay;
  var _glfwSetErrorCallback=env._glfwSetErrorCallback;
  var _glfwDefaultWindowHints=env._glfwDefaultWindowHints;
  var _glfwDestroyWindow=env._glfwDestroyWindow;
  var _glGenerateMipmap=env._glGenerateMipmap;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _send=env._send;
  var _alcCreateContext=env._alcCreateContext;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _glDeleteShader=env._glDeleteShader;
  var _glfwMakeContextCurrent=env._glfwMakeContextCurrent;
  var _glDrawElements=env._glDrawElements;
  var _alGetSourcei=env._alGetSourcei;
  var _glBufferSubData=env._glBufferSubData;
  var _alcMakeContextCurrent=env._alcMakeContextCurrent;
  var _strerror_r=env._strerror_r;
  var _glViewport=env._glViewport;
  var _alSourceQueueBuffers=env._alSourceQueueBuffers;
  var _fscanf=env._fscanf;
  var ___setErrNo=env.___setErrNo;
  var _alcGetCurrentContext=env._alcGetCurrentContext;
  var _alSourcef=env._alSourcef;
  var _glDeleteTextures=env._glDeleteTextures;
  var _glDepthFunc=env._glDepthFunc;
  var _alSourcei=env._alSourcei;
  var _alGenBuffers=env._alGenBuffers;
  var _glEnable=env._glEnable;
  var _glGenTextures=env._glGenTextures;
  var _alDeleteSources=env._alDeleteSources;
  var _pread=env._pread;
  var _glfwSetWindowShouldClose=env._glfwSetWindowShouldClose;
  var _emscripten_get_now=env._emscripten_get_now;
  var _glAttachShader=env._glAttachShader;
  var _read=env._read;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _glfwSetMouseButtonCallback=env._glfwSetMouseButtonCallback;
  var _exit=env._exit;
  var _glGetString=env._glGetString;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _glfwPollEvents=env._glfwPollEvents;
  var _lseek=env._lseek;
  var _vfprintf=env._vfprintf;
  var _floor=env._floor;
  var _glCompressedTexImage2D=env._glCompressedTexImage2D;
  var _pwrite=env._pwrite;
  var _open=env._open;
  var _glClearColor=env._glClearColor;
  var _glBindTexture=env._glBindTexture;
  var __scanString=env.__scanString;
  var _glfwSetCharCallback=env._glfwSetCharCallback;
  var _glUniform1i=env._glUniform1i;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _alcDestroyContext=env._alcDestroyContext;
  var _glDrawArrays=env._glDrawArrays;
  var _sinf=env._sinf;
  var _fseek=env._fseek;
  var _fclose=env._fclose;
  var _log=env._log;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _alcGetString=env._alcGetString;
  var _alSourceStop=env._alSourceStop;
  var _glCompileShader=env._glCompileShader;
  var _alcCloseDevice=env._alcCloseDevice;
  var __getFloat=env.__getFloat;
  var _fputc=env._fputc;
  var _abort=env._abort;
  var _alcGetContextsDevice=env._alcGetContextsDevice;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glBufferData=env._glBufferData;
  var _glTexImage2D=env._glTexImage2D;
  var _fopen=env._fopen;
  var _sin=env._sin;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glfwGetTime=env._glfwGetTime;
  var _alListener3f=env._alListener3f;
  var _ungetc=env._ungetc;
  var _glfwGetPrimaryMonitor=env._glfwGetPrimaryMonitor;
  var _glfwGetKey=env._glfwGetKey;
  var _glLinkProgram=env._glLinkProgram;
  var __reallyNegative=env.__reallyNegative;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _strerror=env._strerror;
  var _glClear=env._glClear;
  var _fileno=env._fileno;
  var __exit=env.__exit;
  var _glfwTerminate=env._glfwTerminate;
  var _glPixelStorei=env._glPixelStorei;
  var __formatString=env.__formatString;
  var _alDeleteBuffers=env._alDeleteBuffers;
  var _llvm_stacksave=env._llvm_stacksave;
  var _mkport=env._mkport;
  var _glfwGetCursorPos=env._glfwGetCursorPos;
  var _fflush=env._fflush;
  var _feof=env._feof;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _glfwWindowHint=env._glfwWindowHint;
  var _alGenSources=env._alGenSources;
  var _fgetc=env._fgetc;
  var _alcOpenDevice=env._alcOpenDevice;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _glTexParameteri=env._glTexParameteri;
  var _fgets=env._fgets;
  var _glfwSetScrollCallback=env._glfwSetScrollCallback;
  var _glCreateShader=env._glCreateShader;
  var _glfwSetCursorEnterCallback=env._glfwSetCursorEnterCallback;
  var _alSourceUnqueueBuffers=env._alSourceUnqueueBuffers;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }

  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function _main() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $exitcond = 0, $fxOgg$byval_copy = 0, $i$022 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fxOgg$byval_copy = sp + 352|0;
 $0 = sp + 332|0;
 $1 = sp + 312|0;
 $2 = sp + 292|0;
 $3 = sp + 272|0;
 $4 = sp + 252|0;
 $5 = sp + 240|0;
 $6 = sp + 228|0;
 $7 = sp + 216|0;
 $8 = sp + 204|0;
 $9 = sp + 192|0;
 $10 = sp + 180|0;
 $11 = sp + 100|0;
 $12 = sp + 16|0;
 $13 = sp + 28|0;
 $14 = sp + 80|0;
 $15 = sp + 60|0;
 $16 = sp + 40|0;
 $17 = sp + 112|0;
 $18 = sp + 124|0;
 $19 = sp + 8|0;
 $20 = sp;
 $21 = sp + 168|0;
 $22 = HEAP32[8>>2]|0;
 $23 = HEAP32[16>>2]|0;
 _InitWindow($22,$23,776);
 _InitAudioDevice();
 _LoadSpriteFont($0,832);
 ;HEAP32[808+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[808+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[808+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[808+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[808+16>>2]=HEAP32[$0+16>>2]|0;
 _LoadSpriteFont($1,888);
 ;HEAP32[864+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[864+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[864+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[864+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[864+16>>2]=HEAP32[$1+16>>2]|0;
 _LoadSpriteFont($2,944);
 ;HEAP32[920+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[920+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[920+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[920+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[920+16>>2]=HEAP32[$2+16>>2]|0;
 _LoadSpriteFont($3,1000);
 ;HEAP32[976+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[976+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[976+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[976+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[976+16>>2]=HEAP32[$3+16>>2]|0;
 _LoadSpriteFont($4,1056);
 ;HEAP32[1032+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[1032+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[1032+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[1032+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[1032+16>>2]=HEAP32[$4+16>>2]|0;
 $24 = HEAP32[8>>2]|0;
 $25 = (($24|0) / 2)&-1;
 $26 = (+($25|0));
 $27 = HEAP32[16>>2]|0;
 $28 = (($27|0) / 2)&-1;
 $29 = (($28) + 20)|0;
 $30 = (+($29|0));
 HEAPF32[1088>>2] = $26;
 HEAPF32[((1088 + 4|0))>>2] = $30;
 HEAPF32[1096>>2] = 6.0;
 HEAPF32[((1096 + 4|0))>>2] = 6.0;
 $31 = HEAP32[16>>2]|0;
 $32 = (($31|0) / 2)&-1;
 $33 = (($32) + -10)|0;
 HEAP32[1104>>2] = 20;
 HEAP32[((1104 + 4|0))>>2] = $33;
 HEAP32[((1104 + 8|0))>>2] = 20;
 HEAP32[((1104 + 12|0))>>2] = 100;
 $34 = HEAP32[8>>2]|0;
 $35 = (($34) + -40)|0;
 $36 = HEAP32[16>>2]|0;
 $37 = (($36|0) / 2)&-1;
 $38 = (($37) + -60)|0;
 HEAP32[1120>>2] = $35;
 HEAP32[((1120 + 4|0))>>2] = $38;
 HEAP32[((1120 + 8|0))>>2] = 20;
 HEAP32[((1120 + 12|0))>>2] = 120;
 $39 = HEAP32[8>>2]|0;
 $40 = (($39|0) / 2)&-1;
 $41 = (($40) + -128)|0;
 HEAP32[1136>>2] = $41;
 $42 = HEAP32[16>>2]|0;
 $43 = (($42|0) / 2)&-1;
 $44 = (($43) + -128)|0;
 HEAP32[1144>>2] = $44;
 _LoadTexture($5,1168);
 ;HEAP32[1152+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[1152+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[1152+8>>2]=HEAP32[$5+8>>2]|0;
 _LoadTexture($6,1216);
 ;HEAP32[1200+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[1200+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[1200+8>>2]=HEAP32[$6+8>>2]|0;
 _LoadTexture($7,1264);
 ;HEAP32[1248+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[1248+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[1248+8>>2]=HEAP32[$7+8>>2]|0;
 _LoadTexture($8,1312);
 ;HEAP32[1296+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[1296+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[1296+8>>2]=HEAP32[$8+8>>2]|0;
 _LoadTexture($9,1360);
 ;HEAP32[1344+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[1344+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[1344+8>>2]=HEAP32[$9+8>>2]|0;
 _LoadTexture($10,1400);
 ;HEAP32[1384+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[1384+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[1384+8>>2]=HEAP32[$10+8>>2]|0;
 _LoadTexture($11,1456);
 ;HEAP32[1440+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[1440+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[1440+8>>2]=HEAP32[$11+8>>2]|0;
 _LoadTexture($12,1496);
 ;HEAP32[1480+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[1480+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[1480+8>>2]=HEAP32[$12+8>>2]|0;
 _LoadTexture($13,1536);
 ;HEAP32[1520+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[1520+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[1520+8>>2]=HEAP32[$13+8>>2]|0;
 _LoadSpriteFont($14,1600);
 ;HEAP32[1576+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[1576+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[1576+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[1576+12>>2]=HEAP32[$14+12>>2]|0;HEAP32[1576+16>>2]=HEAP32[$14+16>>2]|0;
 _LoadSpriteFont($15,1536);
 ;HEAP32[1640+0>>2]=HEAP32[$15+0>>2]|0;HEAP32[1640+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[1640+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[1640+12>>2]=HEAP32[$15+12>>2]|0;HEAP32[1640+16>>2]=HEAP32[$15+16>>2]|0;
 _LoadSpriteFont($16,1688);
 ;HEAP32[1664+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[1664+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[1664+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[1664+12>>2]=HEAP32[$16+12>>2]|0;HEAP32[1664+16>>2]=HEAP32[$16+16>>2]|0;
 HEAPF32[1736>>2] = 848.0;
 HEAPF32[((1736 + 4|0))>>2] = 419.0;
 HEAPF32[1744>>2] = 0.0;
 HEAPF32[((1744 + 4|0))>>2] = 12.0;
 HEAPF32[((1744 + 8|0))>>2] = 15.0;
 HEAPF32[((1744 + 12|0))>>2] = 0.0;
 HEAPF32[((1744 + 16|0))>>2] = 3.0;
 HEAPF32[((1744 + 20|0))>>2] = 0.0;
 HEAPF32[((1744 + 24|0))>>2] = 0.0;
 HEAPF32[((1744 + 28|0))>>2] = 1.0;
 HEAPF32[((1744 + 32|0))>>2] = 0.0;
 _LoadTexture($17,1800);
 ;HEAP32[1784+0>>2]=HEAP32[$17+0>>2]|0;HEAP32[1784+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[1784+8>>2]=HEAP32[$17+8>>2]|0;
 _LoadModel($18,1872);
 dest=1824+0|0; src=$18+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1784+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1784+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1784+8>>2]|0;
 _SetModelTexture(1824,$fxOgg$byval_copy);
 _LoadSound($19,1904);
 $45 = $19;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = 1896;
 $52 = $51;
 HEAP32[$52>>2] = $47;
 $53 = (($51) + 4)|0;
 $54 = $53;
 HEAP32[$54>>2] = $50;
 _LoadSound($20,1944);
 $55 = $20;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = 1936;
 $62 = $61;
 HEAP32[$62>>2] = $57;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = $60;
 $i$022 = 0;
 while(1) {
  $65 = (_GetRandomValue(-280,280)|0);
  $66 = (($65) + 930)|0;
  $67 = (+($66|0));
  $68 = (_GetRandomValue(-200,200)|0);
  $69 = (($68) + 420)|0;
  $70 = (+($69|0));
  $71 = (1976 + ($i$022<<3)|0);
  HEAPF32[$71>>2] = $67;
  $72 = ((1976 + ($i$022<<3)|0) + 4|0);
  HEAPF32[$72>>2] = $70;
  $73 = (_GetRandomValue(0,255)|0);
  $74 = $73&255;
  $75 = (_GetRandomValue(0,255)|0);
  $76 = $75&255;
  $77 = (_GetRandomValue(0,255)|0);
  $78 = $77&255;
  $79 = (2104 + ($i$022<<2)|0);
  HEAP8[$79>>0] = $74;
  $80 = ((2104 + ($i$022<<2)|0) + 1|0);
  HEAP8[$80>>0] = $76;
  $81 = ((2104 + ($i$022<<2)|0) + 2|0);
  HEAP8[$81>>0] = $78;
  $82 = ((2104 + ($i$022<<2)|0) + 3|0);
  HEAP8[$82>>0] = -1;
  $83 = (_GetRandomValue(2,50)|0);
  $84 = (2168 + ($i$022<<2)|0);
  HEAP32[$84>>2] = $83;
  $85 = (2232 + ($i$022<<2)|0);
  HEAPF32[$85>>2] = 1.0;
  $86 = (2296 + ($i$022<<2)|0);
  HEAP32[$86>>2] = 0;
  $87 = (($i$022) + 1)|0;
  $exitcond = ($87|0)==(16);
  if ($exitcond) {
   break;
  } else {
   $i$022 = $87;
  }
 }
 _LoadTexture($21,2376);
 ;HEAP32[2360+0>>2]=HEAP32[$21+0>>2]|0;HEAP32[2360+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[2360+8>>2]=HEAP32[$21+8>>2]|0;
 _emscripten_set_main_loop((1|0),0,1);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[808+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[808+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[808+8>>2]|0;HEAP32[$fxOgg$byval_copy+12>>2]=HEAP32[808+12>>2]|0;HEAP32[$fxOgg$byval_copy+16>>2]=HEAP32[808+16>>2]|0;
 _UnloadSpriteFont($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[864+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[864+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[864+8>>2]|0;HEAP32[$fxOgg$byval_copy+12>>2]=HEAP32[864+12>>2]|0;HEAP32[$fxOgg$byval_copy+16>>2]=HEAP32[864+16>>2]|0;
 _UnloadSpriteFont($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[920+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[920+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[920+8>>2]|0;HEAP32[$fxOgg$byval_copy+12>>2]=HEAP32[920+12>>2]|0;HEAP32[$fxOgg$byval_copy+16>>2]=HEAP32[920+16>>2]|0;
 _UnloadSpriteFont($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[976+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[976+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[976+8>>2]|0;HEAP32[$fxOgg$byval_copy+12>>2]=HEAP32[976+12>>2]|0;HEAP32[$fxOgg$byval_copy+16>>2]=HEAP32[976+16>>2]|0;
 _UnloadSpriteFont($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fxOgg$byval_copy+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fxOgg$byval_copy+16>>2]=HEAP32[1032+16>>2]|0;
 _UnloadSpriteFont($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1152+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1152+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1152+8>>2]|0;
 _UnloadTexture($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1200+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1200+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1200+8>>2]|0;
 _UnloadTexture($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1248+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1248+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1248+8>>2]|0;
 _UnloadTexture($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1296+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1296+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1296+8>>2]|0;
 _UnloadTexture($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1344+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1344+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1344+8>>2]|0;
 _UnloadTexture($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[2360+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[2360+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[2360+8>>2]|0;
 _UnloadTexture($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1384+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1384+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1384+8>>2]|0;
 _UnloadTexture($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1440+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1440+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1440+8>>2]|0;
 _UnloadTexture($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1480+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1480+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1480+8>>2]|0;
 _UnloadTexture($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1520+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1520+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1520+8>>2]|0;
 _UnloadTexture($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1576+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1576+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1576+8>>2]|0;HEAP32[$fxOgg$byval_copy+12>>2]=HEAP32[1576+12>>2]|0;HEAP32[$fxOgg$byval_copy+16>>2]=HEAP32[1576+16>>2]|0;
 _UnloadSpriteFont($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1640+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1640+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1640+8>>2]|0;HEAP32[$fxOgg$byval_copy+12>>2]=HEAP32[1640+12>>2]|0;HEAP32[$fxOgg$byval_copy+16>>2]=HEAP32[1640+16>>2]|0;
 _UnloadSpriteFont($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1664+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1664+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1664+8>>2]|0;HEAP32[$fxOgg$byval_copy+12>>2]=HEAP32[1664+12>>2]|0;HEAP32[$fxOgg$byval_copy+16>>2]=HEAP32[1664+16>>2]|0;
 _UnloadSpriteFont($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1784+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1784+4>>2]|0;HEAP32[$fxOgg$byval_copy+8>>2]=HEAP32[1784+8>>2]|0;
 _UnloadTexture($fxOgg$byval_copy);
 dest=$fxOgg$byval_copy+0|0; src=1824+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadModel($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1896+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1896+4>>2]|0;
 _UnloadSound($fxOgg$byval_copy);
 ;HEAP32[$fxOgg$byval_copy+0>>2]=HEAP32[1936+0>>2]|0;HEAP32[$fxOgg$byval_copy+4>>2]=HEAP32[1936+4>>2]|0;
 _UnloadSound($fxOgg$byval_copy);
 _CloseAudioDevice();
 _CloseWindow();
 STACKTOP = sp;return 0;
}
function _UpdateDrawOneFrame() {
 var $$byval_copy204 = 0, $$byval_copy262 = 0, $$neg = 0, $$pr22 = 0, $$pr23 = 0, $$pr25 = 0, $$pr27 = 0, $$pr29 = 0, $$pr31 = 0, $$pr32 = 0, $$pr34 = 0, $$pr37 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0.0;
 var $1004 = 0.0, $1005 = 0.0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0.0, $101 = 0, $1010 = 0.0, $1011 = 0.0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0.0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0.0, $1041 = 0, $1042 = 0.0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0;
 var $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0;
 var $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0;
 var $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0;
 var $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0;
 var $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0.0, $1158 = 0.0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0;
 var $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0.0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0;
 var $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0.0, $1193 = 0, $1194 = 0, $1195 = 0.0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0;
 var $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0.0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0.0, $1213 = 0.0, $1214 = 0.0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0;
 var $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0;
 var $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0;
 var $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0;
 var $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0;
 var $1293 = 0.0, $1294 = 0, $1295 = 0.0, $1296 = 0.0, $1297 = 0, $1298 = 0.0, $1299 = 0.0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0.0, $407 = 0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0.0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0;
 var $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0.0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0.0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0.0, $83 = 0, $830 = 0.0, $831 = 0, $832 = 0.0, $833 = 0.0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0.0, $846 = 0, $847 = 0, $848 = 0, $849 = 0.0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0.0, $86 = 0, $860 = 0.0, $861 = 0, $862 = 0.0, $863 = 0.0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0.0, $869 = 0.0, $87 = 0, $870 = 0, $871 = 0.0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0.0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0.0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0.0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0.0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0.0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0.0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
 var $965 = 0, $966 = 0, $967 = 0.0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0;
 var $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0.0, $991 = 0.0, $992 = 0.0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0.0, $998 = 0.0, $999 = 0.0, $cat$byval_copy = 0, $exitcond = 0;
 var $exitcond53 = 0, $exitcond55 = 0, $fontAlagard$byval_copy247 = 0, $i$041 = 0, $i1$042 = 0, $i2$051 = 0, $i3$049 = 0, $i4$047 = 0, $i5$040 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pongEnemyRec$byval_copy257 = 0, $strlenfirst = 0, $strlenfirst52 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1472|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy262 = sp;
 $pongEnemyRec$byval_copy257 = sp + 792|0;
 $fontAlagard$byval_copy247 = sp + 836|0;
 $$byval_copy204 = sp + 808|0;
 $cat$byval_copy = sp + 904|0;
 $0 = sp + 968|0;
 $1 = sp + 948|0;
 $2 = sp + 972|0;
 $3 = sp + 1016|0;
 $4 = sp + 1020|0;
 $5 = sp + 1024|0;
 $6 = sp + 1032|0;
 $7 = sp + 1040|0;
 $8 = sp + 1048|0;
 $9 = sp + 1056|0;
 $10 = sp + 1064|0;
 $11 = sp + 1076|0;
 $12 = sp + 1036|0;
 $13 = sp + 1000|0;
 $14 = sp + 976|0;
 $15 = sp + 960|0;
 $16 = sp + 1012|0;
 $17 = sp + 1220|0;
 $18 = sp + 1228|0;
 $19 = sp + 1244|0;
 $20 = sp + 1252|0;
 $21 = sp + 1260|0;
 $22 = sp + 1268|0;
 $23 = sp + 1276|0;
 $24 = sp + 1280|0;
 $25 = sp + 832|0;
 $26 = sp + 1284|0;
 $27 = sp + 1288|0;
 $28 = sp + 1292|0;
 $29 = sp + 856|0;
 $30 = sp + 872|0;
 $31 = sp + 880|0;
 $32 = sp + 1304|0;
 $33 = sp + 896|0;
 $34 = sp + 824|0;
 $35 = sp + 888|0;
 $36 = sp + 1320|0;
 $37 = sp + 1328|0;
 $38 = sp + 1332|0;
 $39 = sp + 864|0;
 $40 = sp + 1340|0;
 $41 = sp + 152|0;
 $42 = sp + 1344|0;
 $43 = sp + 136|0;
 $44 = sp + 1348|0;
 $45 = sp + 192|0;
 $46 = sp + 1352|0;
 $47 = sp + 56|0;
 $48 = sp + 1364|0;
 $49 = sp + 48|0;
 $50 = sp + 104|0;
 $51 = sp + 80|0;
 $52 = sp + 88|0;
 $53 = sp + 96|0;
 $54 = sp + 112|0;
 $55 = sp + 392|0;
 $56 = sp + 216|0;
 $57 = sp + 1372|0;
 $58 = sp + 1384|0;
 $59 = sp + 240|0;
 $60 = sp + 256|0;
 $61 = sp + 264|0;
 $62 = sp + 1392|0;
 $63 = sp + 1396|0;
 $64 = sp + 1400|0;
 $65 = sp + 1408|0;
 $66 = sp + 304|0;
 $67 = sp + 320|0;
 $68 = sp + 336|0;
 $69 = sp + 1412|0;
 $70 = sp + 360|0;
 $71 = sp + 1416|0;
 $72 = sp + 376|0;
 $73 = sp + 1456|0;
 $74 = sp + 1464|0;
 $75 = sp + 400|0;
 $76 = sp + 1460|0;
 $77 = sp + 384|0;
 $78 = sp + 1452|0;
 $79 = sp + 1448|0;
 $80 = sp + 1444|0;
 $81 = sp + 1440|0;
 $82 = sp + 1436|0;
 $83 = sp + 1432|0;
 $84 = sp + 1428|0;
 $85 = sp + 1424|0;
 $86 = sp + 1420|0;
 $87 = sp + 368|0;
 $88 = sp + 352|0;
 $89 = sp + 296|0;
 $90 = sp + 1404|0;
 $91 = sp + 288|0;
 $92 = sp + 280|0;
 $93 = sp + 272|0;
 $94 = sp + 1388|0;
 $95 = sp + 232|0;
 $96 = sp + 1380|0;
 $97 = sp + 1376|0;
 $98 = sp + 224|0;
 $99 = sp + 1368|0;
 $100 = sp + 40|0;
 $101 = sp + 1360|0;
 $102 = sp + 1356|0;
 $103 = sp + 64|0;
 $104 = sp + 120|0;
 $105 = sp + 144|0;
 $106 = sp + 160|0;
 $107 = sp + 1336|0;
 $108 = sp + 164|0;
 $109 = sp + 168|0;
 $110 = sp + 184|0;
 $111 = sp + 1324|0;
 $112 = sp + 200|0;
 $113 = sp + 776|0;
 $114 = sp + 408|0;
 $115 = sp + 1316|0;
 $116 = sp + 1312|0;
 $117 = sp + 416|0;
 $118 = sp + 1308|0;
 $119 = sp + 424|0;
 $120 = sp + 1300|0;
 $121 = sp + 432|0;
 $122 = sp + 1296|0;
 $123 = sp + 440|0;
 $124 = sp + 448|0;
 $125 = sp + 456|0;
 $126 = sp + 464|0;
 $127 = sp + 472|0;
 $128 = sp + 480|0;
 $129 = sp + 488|0;
 $130 = sp + 496|0;
 $131 = sp + 1272|0;
 $132 = sp + 504|0;
 $133 = sp + 1264|0;
 $134 = sp + 512|0;
 $135 = sp + 1256|0;
 $136 = sp + 520|0;
 $137 = sp + 1248|0;
 $138 = sp + 528|0;
 $139 = sp + 1240|0;
 $140 = sp + 1236|0;
 $141 = sp + 1232|0;
 $142 = sp + 536|0;
 $143 = sp + 1224|0;
 $144 = sp + 544|0;
 $145 = sp + 1216|0;
 $146 = sp + 552|0;
 $147 = sp + 956|0;
 $148 = sp + 560|0;
 $149 = sp + 964|0;
 $150 = sp + 572|0;
 $151 = sp + 984|0;
 $152 = sp + 584|0;
 $153 = sp + 988|0;
 $154 = sp + 596|0;
 $155 = sp + 1072|0;
 $156 = sp + 608|0;
 $157 = sp + 1068|0;
 $158 = sp + 620|0;
 $159 = sp + 1060|0;
 $160 = sp + 632|0;
 $161 = sp + 1052|0;
 $162 = sp + 644|0;
 $163 = sp + 1044|0;
 $164 = sp + 656|0;
 $165 = sp + 1008|0;
 $166 = sp + 668|0;
 $167 = sp + 1028|0;
 $168 = sp + 680|0;
 $169 = sp + 692|0;
 $170 = sp + 704|0;
 $171 = sp + 716|0;
 $172 = sp + 720|0;
 $173 = sp + 952|0;
 $174 = sp + 736|0;
 $175 = sp + 980|0;
 $176 = sp + 744|0;
 $177 = sp + 1004|0;
 $178 = sp + 996|0;
 $179 = sp + 992|0;
 $180 = sp + 1080|0;
 $181 = sp + 1084|0;
 $182 = sp + 1088|0;
 $183 = sp + 1092|0;
 $184 = sp + 1096|0;
 $185 = sp + 1100|0;
 $186 = sp + 1104|0;
 $187 = sp + 1108|0;
 $188 = sp + 1112|0;
 $189 = sp + 1116|0;
 $190 = sp + 1120|0;
 $191 = sp + 1124|0;
 $192 = sp + 1128|0;
 $193 = sp + 1132|0;
 $194 = sp + 1136|0;
 $195 = sp + 1140|0;
 $196 = sp + 1144|0;
 $197 = sp + 1148|0;
 $198 = sp + 1152|0;
 $199 = sp + 1156|0;
 $200 = sp + 1160|0;
 $201 = sp + 1164|0;
 $202 = sp + 1168|0;
 $203 = sp + 752|0;
 $204 = sp + 760|0;
 $205 = sp + 1172|0;
 $206 = sp + 768|0;
 $207 = sp + 1176|0;
 $208 = sp + 1180|0;
 $209 = sp + 1184|0;
 $210 = sp + 1188|0;
 $211 = sp + 1192|0;
 $212 = sp + 1196|0;
 $213 = sp + 1200|0;
 $214 = sp + 1204|0;
 $215 = sp + 1208|0;
 $216 = sp + 1212|0;
 $217 = HEAP32[736>>2]|0;
 $218 = ($217|0)==(0);
 do {
  if ($218) {
   $219 = HEAP32[424>>2]|0;
   L3: do {
    switch ($219|0) {
    case 2:  {
     $291 = HEAP32[768>>2]|0;
     $292 = (($291) + 1)|0;
     HEAP32[768>>2] = $292;
     $293 = (_IsKeyPressed(262)|0);
     $294 = ($293|0)!=(0);
     $295 = HEAP32[688>>2]|0;
     $296 = ($295>>>0)<(5);
     $or$cond3 = $294 & $296;
     if ($or$cond3) {
      $297 = (($295) + 1)|0;
      HEAP32[688>>2] = $297;
      HEAP32[768>>2] = 0;
      $304 = $297;
     } else {
      $298 = (_IsKeyPressed(263)|0);
      $299 = ($298|0)!=(0);
      $300 = HEAP32[688>>2]|0;
      $301 = ($300|0)!=(0);
      $or$cond5 = $299 & $301;
      if ($or$cond5) {
       $302 = (($300) + -1)|0;
       HEAP32[688>>2] = $302;
       HEAP32[768>>2] = 0;
       $304 = $302;
      } else {
       $304 = $300;
      }
     }
     $303 = ($304|0)==(0);
     if ($303) {
      $305 = HEAP32[768>>2]|0;
      $306 = ($305|0)>(60);
      $307 = HEAP32[704>>2]|0;
      $308 = ($307|0)<(40);
      $or$cond7 = $306 & $308;
      if ($or$cond7) {
       $309 = (($307) + 1)|0;
       HEAP32[704>>2] = $309;
       $310 = +HEAPF32[1736>>2];
       $311 = $310 + 1.0;
       HEAPF32[1736>>2] = $311;
       $312 = +HEAPF32[((1736 + 4|0))>>2];
       $313 = $312 + 1.0;
       HEAPF32[((1736 + 4|0))>>2] = $313;
       $$pr22 = HEAP32[768>>2]|0;
       $315 = $$pr22;
      } else {
       $315 = $305;
      }
      $314 = ($315|0)>(140);
      if ($314) {
       $316 = (_IsKeyDown(65)|0);
       $317 = ($316|0)==(0);
       if (!($317)) {
        $318 = +HEAPF32[1736>>2];
        $319 = $318 + -5.0;
        HEAPF32[1736>>2] = $319;
       }
       $320 = (_IsKeyDown(68)|0);
       $321 = ($320|0)==(0);
       if (!($321)) {
        $322 = +HEAPF32[1736>>2];
        $323 = $322 + 5.0;
        HEAPF32[1736>>2] = $323;
       }
       $324 = (_IsKeyDown(87)|0);
       $325 = ($324|0)==(0);
       if (!($325)) {
        $326 = +HEAPF32[((1736 + 4|0))>>2];
        $327 = $326 + -5.0;
        HEAPF32[((1736 + 4|0))>>2] = $327;
       }
       $328 = (_IsKeyDown(83)|0);
       $329 = ($328|0)==(0);
       if (!($329)) {
        $330 = +HEAPF32[((1736 + 4|0))>>2];
        $331 = $330 + 5.0;
        HEAPF32[((1736 + 4|0))>>2] = $331;
       }
       $332 = (_IsKeyPressed(49)|0);
       $333 = ($332|0)==(0);
       if (!($333)) {
        HEAP32[696>>2] = 1;
       }
       $334 = (_IsKeyPressed(50)|0);
       $335 = ($334|0)==(0);
       if (!($335)) {
        HEAP32[696>>2] = 2;
       }
       $336 = (_IsKeyPressed(51)|0);
       $337 = ($336|0)==(0);
       if (!($337)) {
        HEAP32[696>>2] = 3;
       }
       $338 = (_IsKeyPressed(52)|0);
       $339 = ($338|0)==(0);
       if (!($339)) {
        HEAP32[696>>2] = 4;
       }
      }
     }
     $340 = HEAP32[688>>2]|0;
     $341 = ($340|0)==(2);
     if ($341) {
      $342 = HEAP32[768>>2]|0;
      $343 = (+($342|0));
      $344 = $343 * 0.0261799387799149414768;
      $345 = $344;
      $346 = (+Math_sin((+$345)));
      $347 = $346 + 1.0;
      $348 = $347 * 0.5;
      HEAPF32[712>>2] = $348;
      $$pr23 = HEAP32[688>>2]|0;
      $350 = $$pr23;
     } else {
      $350 = $340;
     }
     $349 = ($350|0)==(5);
     if ($349) {
      $351 = (_IsKeyPressed(32)|0);
      $352 = ($351|0)==(0);
      if (!($352)) {
       $353 = (_MusicIsPlaying()|0);
       $354 = ($353|0)==(0);
       if ($354) {
        _PlayMusicStream(2408);
       }
      }
      $355 = (_IsKeyPressed(83)|0);
      $356 = ($355|0)==(0);
      if (!($356)) {
       _StopMusicStream();
       HEAPF32[720>>2] = 0.0;
       $i2$051 = 0;
       while(1) {
        $357 = (_GetRandomValue(-280,280)|0);
        $358 = (($357) + 930)|0;
        $359 = (+($358|0));
        $360 = (_GetRandomValue(-200,200)|0);
        $361 = (($360) + 420)|0;
        $362 = (+($361|0));
        $363 = (1976 + ($i2$051<<3)|0);
        HEAPF32[$363>>2] = $359;
        $364 = ((1976 + ($i2$051<<3)|0) + 4|0);
        HEAPF32[$364>>2] = $362;
        $365 = (_GetRandomValue(0,255)|0);
        $366 = $365&255;
        $367 = (_GetRandomValue(0,255)|0);
        $368 = $367&255;
        $369 = (_GetRandomValue(0,255)|0);
        $370 = $369&255;
        $371 = (2104 + ($i2$051<<2)|0);
        HEAP8[$371>>0] = $366;
        $372 = ((2104 + ($i2$051<<2)|0) + 1|0);
        HEAP8[$372>>0] = $368;
        $373 = ((2104 + ($i2$051<<2)|0) + 2|0);
        HEAP8[$373>>0] = $370;
        $374 = ((2104 + ($i2$051<<2)|0) + 3|0);
        HEAP8[$374>>0] = -1;
        $375 = (_GetRandomValue(2,50)|0);
        $376 = (2168 + ($i2$051<<2)|0);
        HEAP32[$376>>2] = $375;
        $377 = (2232 + ($i2$051<<2)|0);
        HEAPF32[$377>>2] = 1.0;
        $378 = (2296 + ($i2$051<<2)|0);
        HEAP32[$378>>2] = 0;
        $379 = (($i2$051) + 1)|0;
        $exitcond55 = ($379|0)==(16);
        if ($exitcond55) {
         break;
        } else {
         $i2$051 = $379;
        }
       }
      }
      $380 = (_MusicIsPlaying()|0);
      $381 = ($380|0)==(0);
      if (!($381)) {
       $382 = (+_GetMusicTimePlayed());
       $383 = (+_GetMusicTimeLength());
       $384 = $382 / $383;
       $385 = $384 * 100.0;
       $386 = $385 * 4.0;
       HEAPF32[720>>2] = $386;
       $387 = HEAP32[768>>2]|0;
       $388 = (($387|0) % 10)&-1;
       $389 = ($388|0)==(0);
       L55: do {
        if ($389) {
         $i3$049 = 0;
         while(1) {
          $392 = (2296 + ($i3$049<<2)|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==(0);
          $391 = (($i3$049) + 1)|0;
          if ($394) {
           break;
          }
          $390 = ($391|0)<(16);
          if ($390) {
           $i3$049 = $391;
          } else {
           $i4$047 = 0;
           break L55;
          }
         }
         HEAP32[$392>>2] = 1;
         $i4$047 = 0;
        } else {
         $i4$047 = 0;
        }
       } while(0);
       while(1) {
        $395 = (2296 + ($i4$047<<2)|0);
        $396 = HEAP32[$395>>2]|0;
        $397 = ($396|0)==(0);
        if (!($397)) {
         $398 = (2232 + ($i4$047<<2)|0);
         $399 = +HEAPF32[$398>>2];
         $400 = $399 + -0.00499999988824129104614;
         HEAPF32[$398>>2] = $400;
        }
        $401 = (2232 + ($i4$047<<2)|0);
        $402 = +HEAPF32[$401>>2];
        $403 = !($402 <= 0.0);
        if (!($403)) {
         HEAP32[$395>>2] = 0;
         $404 = (_GetRandomValue(-280,280)|0);
         $405 = (($404) + 930)|0;
         $406 = (+($405|0));
         $407 = (_GetRandomValue(-200,200)|0);
         $408 = (($407) + 420)|0;
         $409 = (+($408|0));
         $410 = (1976 + ($i4$047<<3)|0);
         HEAPF32[$410>>2] = $406;
         $411 = ((1976 + ($i4$047<<3)|0) + 4|0);
         HEAPF32[$411>>2] = $409;
         $412 = (_GetRandomValue(0,255)|0);
         $413 = $412&255;
         $414 = (_GetRandomValue(0,255)|0);
         $415 = $414&255;
         $416 = (_GetRandomValue(0,255)|0);
         $417 = $416&255;
         $418 = (2104 + ($i4$047<<2)|0);
         HEAP8[$418>>0] = $413;
         $419 = ((2104 + ($i4$047<<2)|0) + 1|0);
         HEAP8[$419>>0] = $415;
         $420 = ((2104 + ($i4$047<<2)|0) + 2|0);
         HEAP8[$420>>0] = $417;
         $421 = ((2104 + ($i4$047<<2)|0) + 3|0);
         HEAP8[$421>>0] = -1;
         $422 = (_GetRandomValue(2,60)|0);
         $423 = (2168 + ($i4$047<<2)|0);
         HEAP32[$423>>2] = $422;
         HEAPF32[$401>>2] = 1.0;
        }
        $424 = (($i4$047) + 1)|0;
        $exitcond53 = ($424|0)==(16);
        if ($exitcond53) {
         break;
        } else {
         $i4$047 = $424;
        }
       }
      }
      $425 = (_IsKeyPressed(78)|0);
      $426 = ($425|0)==(0);
      if (!($426)) {
       ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1896+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1896+4>>2]|0;
       _PlaySound($$byval_copy262);
      }
     }
     $427 = (_IsKeyPressed(257)|0);
     $428 = ($427|0)==(0);
     if (!($428)) {
      _TransitionToScreen(3);
      label = 147;
      break L3;
     }
     $429 = (_IsKeyPressed(259)|0);
     $430 = ($429|0)==(0);
     if ($430) {
      label = 147;
     } else {
      _TransitionToScreen(1);
      label = 147;
     }
     break;
    }
    case 0:  {
     $220 = HEAP32[768>>2]|0;
     $221 = (($220) + 1)|0;
     HEAP32[768>>2] = $221;
     $222 = HEAP32[432>>2]|0;
     $223 = HEAP32[440>>2]|0;
     $224 = ($222|0)<($223|0);
     if ($224) {
      $225 = (($221|0) % 30)&-1;
      $226 = ($225|0)==(0);
      if ($226) {
       $227 = (($222) + 1)|0;
       HEAP32[432>>2] = $227;
      }
     }
     $228 = (_IsKeyDown(32)|0);
     $229 = ($228|0)==(0);
     if (!($229)) {
      $230 = HEAP32[432>>2]|0;
      $231 = HEAP32[440>>2]|0;
      $232 = ($230|0)<($231|0);
      if ($232) {
       $233 = (($230) + 4)|0;
       HEAP32[432>>2] = $233;
      }
     }
     $234 = (_IsKeyPressed(257)|0);
     $235 = ($234|0)==(0);
     if ($235) {
      label = 147;
     } else {
      $236 = HEAP32[432>>2]|0;
      $237 = HEAP32[440>>2]|0;
      $238 = ($236|0)<($237|0);
      if ($238) {
       label = 147;
      } else {
       _TransitionToScreen(1);
       label = 147;
      }
     }
     break;
    }
    case 1:  {
     $239 = HEAP32[664>>2]|0;
     do {
      if ((($239|0) == 3)) {
       $258 = HEAP32[768>>2]|0;
       $259 = (($258) + 1)|0;
       HEAP32[768>>2] = $259;
       $260 = (($259|0) % 12)&-1;
       $261 = ($260|0)==(0);
       $262 = HEAP32[616>>2]|0;
       if ($261) {
        $263 = (($262) + 1)|0;
        HEAP32[616>>2] = $263;
        $264 = $263;
       } else {
        $264 = $262;
       }
       switch ($264|0) {
       case 4:  {
        HEAP8[((656 + 3|0))>>0] = 108;
        break;
       }
       case 3:  {
        HEAP8[((656 + 2|0))>>0] = 121;
        break;
       }
       case 2:  {
        HEAP8[((656 + 1|0))>>0] = 97;
        break;
       }
       case 6:  {
        HEAP8[((656 + 5|0))>>0] = 98;
        break;
       }
       case 1:  {
        HEAP8[656>>0] = 114;
        break;
       }
       case 5:  {
        HEAP8[((656 + 4|0))>>0] = 105;
        break;
       }
       default: {
       }
       }
       $265 = HEAP32[616>>2]|0;
       $266 = ($265|0)>(9);
       if ($266) {
        $267 = HEAP32[768>>2]|0;
        $268 = $267 & 1;
        $269 = ($268|0)==(0);
        if ($269) {
         $270 = HEAP32[488>>2]|0;
         $271 = (($270) + 1)|0;
         HEAP32[488>>2] = $271;
        }
        $272 = HEAP32[672>>2]|0;
        $273 = ($272|0)==(0);
        if (!($273)) {
         $281 = HEAP32[680>>2]|0;
         $282 = ($281|0)==(0);
         if (!($282)) {
          break;
         }
         $283 = HEAP32[488>>2]|0;
         $284 = ($283>>>0)<(32);
         if ($284) {
          (_strncpy((496|0),(200|0),($283|0))|0);
          break;
         } else {
          HEAP32[680>>2] = 1;
          HEAP32[768>>2] = 0;
          break;
         }
        }
        $274 = HEAP32[488>>2]|0;
        $275 = ($274>>>0)<(33);
        if ($275) {
         (_strncpy((496|0),(160|0),($274|0))|0);
         break;
        }
        $strlenfirst = HEAP8[496>>0]|0;
        $276 = ($strlenfirst<<24>>24)==(0);
        if (!($276)) {
         $i1$042 = 0;
         while(1) {
          $277 = (496 + ($i1$042)|0);
          HEAP8[$277>>0] = 32;
          $278 = (($i1$042) + 1)|0;
          $279 = (_strlen((496|0))|0);
          $280 = ($278>>>0)<($279>>>0);
          if ($280) {
           $i1$042 = $278;
          } else {
           break;
          }
         }
        }
        HEAP32[488>>2] = 0;
        HEAP32[672>>2] = 1;
       }
      } else if ((($239|0) == 2)) {
       $248 = HEAP32[640>>2]|0;
       $249 = (($248) + 4)|0;
       HEAP32[640>>2] = $249;
       $250 = HEAP32[648>>2]|0;
       $251 = (($250) + 4)|0;
       HEAP32[648>>2] = $251;
       $252 = ($249|0)==(256);
       if ($252) {
        HEAP32[488>>2] = 0;
        $strlenfirst52 = HEAP8[496>>0]|0;
        $253 = ($strlenfirst52<<24>>24)==(0);
        if (!($253)) {
         $i$041 = 0;
         while(1) {
          $254 = (496 + ($i$041)|0);
          HEAP8[$254>>0] = 32;
          $255 = (($i$041) + 1)|0;
          $256 = (_strlen((496|0))|0);
          $257 = ($255>>>0)<($256>>>0);
          if ($257) {
           $i$041 = $255;
          } else {
           break;
          }
         }
        }
        HEAP32[664>>2] = 3;
       }
      } else if ((($239|0) == 1)) {
       $243 = HEAP32[624>>2]|0;
       $244 = (($243) + 4)|0;
       HEAP32[624>>2] = $244;
       $245 = HEAP32[632>>2]|0;
       $246 = (($245) + 4)|0;
       HEAP32[632>>2] = $246;
       $247 = ($244|0)==(256);
       if ($247) {
        HEAP32[664>>2] = 2;
       }
      } else if ((($239|0) == 0)) {
       $240 = HEAP32[768>>2]|0;
       $241 = (($240) + 1)|0;
       HEAP32[768>>2] = $241;
       $242 = ($241|0)==(120);
       if ($242) {
        HEAP32[664>>2] = 1;
        HEAP32[768>>2] = 0;
       }
      }
     } while(0);
     $285 = (_IsKeyPressed(257)|0);
     $286 = ($285|0)!=(0);
     $287 = HEAP32[680>>2]|0;
     $288 = ($287|0)!=(0);
     $or$cond = $286 & $288;
     if ($or$cond) {
      _TransitionToScreen(2);
      label = 147;
      break L3;
     }
     $289 = (_IsKeyPressed(259)|0);
     $290 = ($289|0)==(0);
     if ($290) {
      label = 147;
     } else {
      _TransitionToScreen(1);
      label = 147;
     }
     break;
    }
    case 4:  {
     $431 = HEAP32[768>>2]|0;
     $432 = (($431) + 1)|0;
     HEAP32[768>>2] = $432;
     $433 = (_IsKeyPressed(80)|0);
     $434 = ($433|0)==(0);
     $$pr25 = HEAP32[480>>2]|0;
     if ($434) {
      $438 = $$pr25;
     } else {
      $435 = ($$pr25|0)==(0);
      $436 = $435&1;
      HEAP32[480>>2] = $436;
      $438 = $436;
     }
     $437 = ($438|0)==(0);
     do {
      if ($437) {
       $439 = +HEAPF32[1096>>2];
       $440 = +HEAPF32[1088>>2];
       $441 = $439 + $440;
       HEAPF32[1088>>2] = $441;
       $442 = +HEAPF32[((1096 + 4|0))>>2];
       $443 = +HEAPF32[((1088 + 4|0))>>2];
       $444 = $442 + $443;
       HEAPF32[((1088 + 4|0))>>2] = $444;
       $445 = +HEAPF32[1088>>2];
       $446 = HEAP32[8>>2]|0;
       $447 = (($446) + -5)|0;
       $448 = (+($447|0));
       $449 = $445 >= $448;
       $450 = $445 <= 5.0;
       $or$cond9 = $449 | $450;
       if ($or$cond9) {
        $451 = +HEAPF32[1096>>2];
        $452 = $451 * -1.0;
        HEAPF32[1096>>2] = $452;
       }
       $453 = +HEAPF32[((1088 + 4|0))>>2];
       $454 = HEAP32[16>>2]|0;
       $455 = (($454) + -5)|0;
       $456 = (+($455|0));
       $457 = $453 >= $456;
       $458 = $453 <= 5.0;
       $or$cond11 = $457 | $458;
       if ($or$cond11) {
        $459 = +HEAPF32[((1096 + 4|0))>>2];
        $460 = $459 * -1.0;
        HEAPF32[((1096 + 4|0))>>2] = $460;
       }
       $461 = (_IsKeyDown(265)|0);
       $462 = ($461|0)==(0);
       do {
        if ($462) {
         $463 = (_IsKeyDown(87)|0);
         $464 = ($463|0)==(0);
         if ($464) {
          $467 = (_IsKeyDown(264)|0);
          $468 = ($467|0)==(0);
          if ($468) {
           $469 = (_IsKeyDown(83)|0);
           $470 = ($469|0)==(0);
           if ($470) {
            $473 = HEAP32[472>>2]|0;
            $474 = ($473|0)>(0);
            if (!($474)) {
             break;
            }
            $475 = (($473) + -1)|0;
            HEAP32[472>>2] = $475;
            $476 = ($475|0)==(0);
            if (!($476)) {
             break;
            }
            HEAP32[464>>2] = 1;
            break;
           }
          }
          $471 = HEAP32[((1104 + 4|0))>>2]|0;
          $472 = (($471) + 5)|0;
          HEAP32[((1104 + 4|0))>>2] = $472;
          HEAP32[464>>2] = 0;
          HEAP32[472>>2] = 180;
         } else {
          label = 105;
         }
        } else {
         label = 105;
        }
       } while(0);
       if ((label|0) == 105) {
        $465 = HEAP32[((1104 + 4|0))>>2]|0;
        $466 = (($465) + -5)|0;
        HEAP32[((1104 + 4|0))>>2] = $466;
        HEAP32[464>>2] = 0;
        HEAP32[472>>2] = 180;
       }
       $477 = +HEAPF32[1088>>2];
       $478 = $477 < 600.0;
       $479 = HEAP32[464>>2]|0;
       $480 = ($479|0)!=(0);
       $or$cond13 = $478 & $480;
       do {
        if ($or$cond13) {
         $481 = +HEAPF32[((1088 + 4|0))>>2];
         $482 = HEAP32[((1104 + 4|0))>>2]|0;
         $483 = HEAP32[((1104 + 12|0))>>2]|0;
         $484 = (($483|0) / 2)&-1;
         $485 = (($484) + ($482))|0;
         $486 = (+($485|0));
         $487 = $481 > $486;
         if ($487) {
          $488 = (($482) + 5)|0;
          HEAP32[((1104 + 4|0))>>2] = $488;
          $492 = $488;
          break;
         }
         $489 = $481 < $486;
         if ($489) {
          $490 = (($482) + -5)|0;
          HEAP32[((1104 + 4|0))>>2] = $490;
          $492 = $490;
         } else {
          label = 117;
         }
        } else {
         label = 117;
        }
       } while(0);
       if ((label|0) == 117) {
        $$pr27 = HEAP32[((1104 + 4|0))>>2]|0;
        $492 = $$pr27;
       }
       $491 = ($492|0)<(1);
       if ($491) {
        HEAP32[((1104 + 4|0))>>2] = 0;
       } else {
        $493 = HEAP32[((1104 + 12|0))>>2]|0;
        $494 = (($493) + ($492))|0;
        $495 = HEAP32[16>>2]|0;
        $496 = ($494|0)<($495|0);
        if (!($496)) {
         $497 = (($495) - ($493))|0;
         HEAP32[((1104 + 4|0))>>2] = $497;
        }
       }
       $498 = +HEAPF32[1088>>2];
       $499 = HEAP32[8>>2]|0;
       $500 = (($499) + -600)|0;
       $501 = (+($500|0));
       $502 = $498 > $501;
       do {
        if ($502) {
         $503 = +HEAPF32[((1088 + 4|0))>>2];
         $504 = HEAP32[((1120 + 4|0))>>2]|0;
         $505 = HEAP32[((1120 + 12|0))>>2]|0;
         $506 = (($505|0) / 2)&-1;
         $507 = (($506) + ($504))|0;
         $508 = (+($507|0));
         $509 = $503 > $508;
         do {
          if ($509) {
           $510 = (($504) + 5)|0;
           HEAP32[((1120 + 4|0))>>2] = $510;
           $514 = $510;
          } else {
           $511 = $503 < $508;
           if ($511) {
            $512 = (($504) + -5)|0;
            HEAP32[((1120 + 4|0))>>2] = $512;
            $514 = $512;
            break;
           } else {
            $$pr29 = HEAP32[((1120 + 4|0))>>2]|0;
            $514 = $$pr29;
            break;
           }
          }
         } while(0);
         $513 = ($514|0)<(1);
         if ($513) {
          HEAP32[((1120 + 4|0))>>2] = 0;
          break;
         }
         $515 = HEAP32[((1120 + 12|0))>>2]|0;
         $516 = (($515) + ($514))|0;
         $517 = HEAP32[16>>2]|0;
         $518 = ($516|0)<($517|0);
         if (!($518)) {
          $519 = (($517) - ($515))|0;
          HEAP32[((1120 + 4|0))>>2] = $519;
         }
        }
       } while(0);
       ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[1088+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[1088+4>>2]|0;
       ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1104+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1104+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1104+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1104+12>>2]|0;
       $520 = (_CheckCollisionCircleRec($pongEnemyRec$byval_copy257,10.0,$$byval_copy262)|0);
       $521 = ($520|0)==(0);
       if ($521) {
        ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[1088+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[1088+4>>2]|0;
        ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1120+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1120+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1120+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1120+12>>2]|0;
        $522 = (_CheckCollisionCircleRec($pongEnemyRec$byval_copy257,10.0,$$byval_copy262)|0);
        $523 = ($522|0)==(0);
        if (!($523)) {
         label = 134;
        }
       } else {
        label = 134;
       }
       if ((label|0) == 134) {
        $524 = +HEAPF32[1096>>2];
        $525 = $524 * -1.0;
        HEAPF32[1096>>2] = $525;
       }
       $526 = +HEAPF32[1088>>2];
       $527 = HEAP32[8>>2]|0;
       $528 = (($527) + -5)|0;
       $529 = (+($528|0));
       $530 = !($526 >= $529);
       if (!($530)) {
        $531 = HEAP32[448>>2]|0;
        $532 = (($531) + 1)|0;
        HEAP32[448>>2] = $532;
        break;
       }
       $533 = !($526 <= 5.0);
       if (!($533)) {
        $534 = HEAP32[456>>2]|0;
        $535 = (($534) + 1)|0;
        HEAP32[456>>2] = $535;
       }
      }
     } while(0);
     $536 = (_IsKeyPressed(257)|0);
     $537 = ($536|0)==(0);
     if (!($537)) {
      _TransitionToScreen(3);
     }
     $538 = (_IsKeyPressed(259)|0);
     $539 = ($538|0)==(0);
     if ($539) {
      label = 147;
     } else {
      _TransitionToScreen(3);
      label = 147;
     }
     break;
    }
    case 3:  {
     $540 = HEAP32[768>>2]|0;
     $541 = (($540) + 1)|0;
     HEAP32[768>>2] = $541;
     $542 = (_IsKeyPressed(257)|0);
     $543 = ($542|0)==(0);
     if (!($543)) {
      _TransitionToScreen(4);
     }
     $544 = (_IsKeyPressed(259)|0);
     $545 = ($544|0)==(0);
     if ($545) {
      label = 147;
     } else {
      _TransitionToScreen(2);
      label = 147;
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   if ((label|0) == 147) {
    $$pr31 = HEAP32[424>>2]|0;
    $546 = ($$pr31|0)==(0);
    if ($546) {
     break;
    }
   }
   $547 = HEAP32[416>>2]|0;
   $548 = HEAP32[408>>2]|0;
   $549 = ($547|0)<($548|0);
   if ($549) {
    $550 = (($547) + 1)|0;
    HEAP32[416>>2] = $550;
   }
  } else {
   _UpdateTransition();
  }
 } while(0);
 _BeginDrawing();
 HEAP8[$0>>0] = -11;
 $551 = (($0) + 1|0);
 HEAP8[$551>>0] = -11;
 $552 = (($0) + 2|0);
 HEAP8[$552>>0] = -11;
 $553 = (($0) + 3|0);
 HEAP8[$553>>0] = -1;
 ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$0+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$0+3>>0]|0;
 _ClearBackground($$byval_copy262);
 $554 = HEAP32[424>>2]|0;
 L210: do {
  switch ($554|0) {
  case 0:  {
   $555 = HEAP32[432>>2]|0;
   $556 = HEAP32[440>>2]|0;
   $557 = ($555|0)<($556|0);
   if ($557) {
    $558 = HEAP32[768>>2]|0;
    $559 = (($558|0) / 40)&-1;
    $560 = $559 & 1;
    $561 = ($560|0)==(0);
    if (!($561)) {
     HEAP8[$1>>0] = 80;
     $562 = (($1) + 1|0);
     HEAP8[$562>>0] = 80;
     $563 = (($1) + 2|0);
     HEAP8[$563>>0] = 80;
     $564 = (($1) + 3|0);
     HEAP8[$564>>0] = -1;
     ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$1+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$1+3>>0]|0;
     _DrawText(24,360,240,40,$$byval_copy262);
    }
   }
   $565 = HEAP32[440>>2]|0;
   $566 = (($565) + 8)|0;
   HEAP8[$2>>0] = -56;
   $567 = (($2) + 1|0);
   HEAP8[$567>>0] = -56;
   $568 = (($2) + 2|0);
   HEAP8[$568>>0] = -56;
   $569 = (($2) + 3|0);
   HEAP8[$569>>0] = -1;
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$2+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$2+3>>0]|0;
   _DrawRectangle(356,296,$566,68,$$byval_copy262);
   $570 = HEAP32[432>>2]|0;
   $571 = (($570) + -1)|0;
   HEAP8[$3>>0] = 80;
   $572 = (($3) + 1|0);
   HEAP8[$572>>0] = 80;
   $573 = (($3) + 2|0);
   HEAP8[$573>>0] = 80;
   $574 = (($3) + 3|0);
   HEAP8[$574>>0] = -1;
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$3+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$3+3>>0]|0;
   _DrawRectangle(360,300,$571,60,$$byval_copy262);
   $575 = HEAP32[440>>2]|0;
   $576 = (($575) + 8)|0;
   HEAP8[$4>>0] = 80;
   $577 = (($4) + 1|0);
   HEAP8[$577>>0] = 80;
   $578 = (($4) + 2|0);
   HEAP8[$578>>0] = 80;
   $579 = (($4) + 3|0);
   HEAP8[$579>>0] = -1;
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$4+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$4+3>>0]|0;
   _DrawRectangleLines(356,295,$576,68,$$byval_copy262);
   $580 = HEAP32[432>>2]|0;
   $581 = HEAP32[440>>2]|0;
   $582 = ($580|0)<($581|0);
   if ($582) {
    $595 = HEAP32[8>>2]|0;
    $596 = (($595|0) / 2)&-1;
    $597 = (($596) + -200)|0;
    HEAP8[$6>>0] = -56;
    $598 = (($6) + 1|0);
    HEAP8[$598>>0] = -56;
    $599 = (($6) + 2|0);
    HEAP8[$599>>0] = -56;
    $600 = (($6) + 3|0);
    HEAP8[$600>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$6+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$6+3>>0]|0;
    _DrawText(2448,$597,400,20,$$byval_copy262);
    label = 206;
    break L210;
   }
   $583 = HEAP32[768>>2]|0;
   $584 = (($583|0) / 30)&-1;
   $585 = $584 & 1;
   $586 = ($585|0)==(0);
   if ($586) {
    label = 206;
   } else {
    $587 = HEAP32[8>>2]|0;
    $588 = (($587|0) / 2)&-1;
    $589 = (_MeasureText(56,40)|0);
    $$neg = (($589|0) / -2)&-1;
    $590 = (($588) + 20)|0;
    $591 = (($590) + ($$neg))|0;
    HEAP8[$5>>0] = 80;
    $592 = (($5) + 1|0);
    HEAP8[$592>>0] = 80;
    $593 = (($5) + 2|0);
    HEAP8[$593>>0] = 80;
    $594 = (($5) + 3|0);
    HEAP8[$594>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$5+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$5+3>>0]|0;
    _DrawText(56,$591,400,40,$$byval_copy262);
    label = 206;
   }
   break;
  }
  case 1:  {
   $601 = HEAP32[664>>2]|0;
   if ((($601|0) == 1)) {
    $612 = HEAP32[1136>>2]|0;
    $613 = HEAP32[1144>>2]|0;
    $614 = (($613) + -60)|0;
    $615 = HEAP32[624>>2]|0;
    HEAP8[$8>>0] = 0;
    $616 = (($8) + 1|0);
    HEAP8[$616>>0] = 0;
    $617 = (($8) + 2|0);
    HEAP8[$617>>0] = 0;
    $618 = (($8) + 3|0);
    HEAP8[$618>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$8+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$8+3>>0]|0;
    _DrawRectangle($612,$614,$615,16,$$byval_copy262);
    $619 = HEAP32[1136>>2]|0;
    $620 = HEAP32[1144>>2]|0;
    $621 = (($620) + -60)|0;
    $622 = HEAP32[632>>2]|0;
    HEAP8[$9>>0] = 0;
    $623 = (($9) + 1|0);
    HEAP8[$623>>0] = 0;
    $624 = (($9) + 2|0);
    HEAP8[$624>>0] = 0;
    $625 = (($9) + 3|0);
    HEAP8[$625>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$9+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$9+3>>0]|0;
    _DrawRectangle($619,$621,16,$622,$$byval_copy262);
    label = 206;
    break L210;
   } else if ((($601|0) == 0)) {
    $602 = HEAP32[768>>2]|0;
    $603 = (($602|0) / 15)&-1;
    $604 = $603 & 1;
    $605 = ($604|0)==(0);
    if ($605) {
     label = 206;
     break L210;
    }
    $606 = HEAP32[1136>>2]|0;
    $607 = HEAP32[1144>>2]|0;
    $608 = (($607) + -60)|0;
    HEAP8[$7>>0] = 0;
    $609 = (($7) + 1|0);
    HEAP8[$609>>0] = 0;
    $610 = (($7) + 2|0);
    HEAP8[$610>>0] = 0;
    $611 = (($7) + 3|0);
    HEAP8[$611>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$7+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$7+3>>0]|0;
    _DrawRectangle($606,$608,16,16,$$byval_copy262);
    label = 206;
    break L210;
   } else if ((($601|0) == 2)) {
    $626 = HEAP32[1136>>2]|0;
    $627 = HEAP32[1144>>2]|0;
    $628 = (($627) + -60)|0;
    $629 = HEAP32[624>>2]|0;
    HEAP8[$10>>0] = 0;
    $630 = (($10) + 1|0);
    HEAP8[$630>>0] = 0;
    $631 = (($10) + 2|0);
    HEAP8[$631>>0] = 0;
    $632 = (($10) + 3|0);
    HEAP8[$632>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$10+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$10+3>>0]|0;
    _DrawRectangle($626,$628,$629,16,$$byval_copy262);
    $633 = HEAP32[1136>>2]|0;
    $634 = HEAP32[1144>>2]|0;
    $635 = (($634) + -60)|0;
    $636 = HEAP32[632>>2]|0;
    HEAP8[$11>>0] = 0;
    $637 = (($11) + 1|0);
    HEAP8[$637>>0] = 0;
    $638 = (($11) + 2|0);
    HEAP8[$638>>0] = 0;
    $639 = (($11) + 3|0);
    HEAP8[$639>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$11+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$11+3>>0]|0;
    _DrawRectangle($633,$635,16,$636,$$byval_copy262);
    $640 = HEAP32[1136>>2]|0;
    $641 = (($640) + 240)|0;
    $642 = HEAP32[1144>>2]|0;
    $643 = (($642) + -60)|0;
    $644 = HEAP32[648>>2]|0;
    HEAP8[$12>>0] = 0;
    $645 = (($12) + 1|0);
    HEAP8[$645>>0] = 0;
    $646 = (($12) + 2|0);
    HEAP8[$646>>0] = 0;
    $647 = (($12) + 3|0);
    HEAP8[$647>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$12+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$12+3>>0]|0;
    _DrawRectangle($641,$643,16,$644,$$byval_copy262);
    $648 = HEAP32[1136>>2]|0;
    $649 = HEAP32[1144>>2]|0;
    $650 = (($649) + 180)|0;
    $651 = HEAP32[640>>2]|0;
    HEAP8[$13>>0] = 0;
    $652 = (($13) + 1|0);
    HEAP8[$652>>0] = 0;
    $653 = (($13) + 2|0);
    HEAP8[$653>>0] = 0;
    $654 = (($13) + 3|0);
    HEAP8[$654>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$13+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$13+3>>0]|0;
    _DrawRectangle($648,$650,$651,16,$$byval_copy262);
    label = 206;
    break L210;
   } else if ((($601|0) == 3)) {
    $655 = HEAP32[1136>>2]|0;
    $656 = HEAP32[1144>>2]|0;
    $657 = (($656) + -60)|0;
    $658 = HEAP32[624>>2]|0;
    HEAP8[$14>>0] = 0;
    $659 = (($14) + 1|0);
    HEAP8[$659>>0] = 0;
    $660 = (($14) + 2|0);
    HEAP8[$660>>0] = 0;
    $661 = (($14) + 3|0);
    HEAP8[$661>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$14+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$14+3>>0]|0;
    _DrawRectangle($655,$657,$658,16,$$byval_copy262);
    $662 = HEAP32[1136>>2]|0;
    $663 = HEAP32[1144>>2]|0;
    $664 = (($663) + -44)|0;
    $665 = HEAP32[632>>2]|0;
    $666 = (($665) + -32)|0;
    HEAP8[$15>>0] = 0;
    $667 = (($15) + 1|0);
    HEAP8[$667>>0] = 0;
    $668 = (($15) + 2|0);
    HEAP8[$668>>0] = 0;
    $669 = (($15) + 3|0);
    HEAP8[$669>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$15+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$15+3>>0]|0;
    _DrawRectangle($662,$664,16,$666,$$byval_copy262);
    $670 = HEAP32[1136>>2]|0;
    $671 = (($670) + 240)|0;
    $672 = HEAP32[1144>>2]|0;
    $673 = (($672) + -44)|0;
    $674 = HEAP32[648>>2]|0;
    $675 = (($674) + -32)|0;
    HEAP8[$16>>0] = 0;
    $676 = (($16) + 1|0);
    HEAP8[$676>>0] = 0;
    $677 = (($16) + 2|0);
    HEAP8[$677>>0] = 0;
    $678 = (($16) + 3|0);
    HEAP8[$678>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$16+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$16+3>>0]|0;
    _DrawRectangle($671,$673,16,$675,$$byval_copy262);
    $679 = HEAP32[1136>>2]|0;
    $680 = HEAP32[1144>>2]|0;
    $681 = (($680) + 180)|0;
    $682 = HEAP32[640>>2]|0;
    HEAP8[$17>>0] = 0;
    $683 = (($17) + 1|0);
    HEAP8[$683>>0] = 0;
    $684 = (($17) + 2|0);
    HEAP8[$684>>0] = 0;
    $685 = (($17) + 3|0);
    HEAP8[$685>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$17+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$17+3>>0]|0;
    _DrawRectangle($679,$681,$682,16,$$byval_copy262);
    $686 = HEAP32[8>>2]|0;
    $687 = (($686|0) / 2)&-1;
    $688 = (($687) + -112)|0;
    $689 = HEAP32[16>>2]|0;
    $690 = (($689|0) / 2)&-1;
    $691 = (($690) + -172)|0;
    HEAP8[$18>>0] = -11;
    $692 = (($18) + 1|0);
    HEAP8[$692>>0] = -11;
    $693 = (($18) + 2|0);
    HEAP8[$693>>0] = -11;
    $694 = (($18) + 3|0);
    HEAP8[$694>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$18+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$18+3>>0]|0;
    _DrawRectangle($688,$691,224,224,$$byval_copy262);
    $695 = HEAP32[8>>2]|0;
    $696 = (($695|0) / 2)&-1;
    $697 = (($696) + -44)|0;
    $698 = HEAP32[16>>2]|0;
    $699 = (($698|0) / 2)&-1;
    $700 = (($699) + -12)|0;
    HEAP8[$19>>0] = 0;
    $701 = (($19) + 1|0);
    HEAP8[$701>>0] = 0;
    $702 = (($19) + 2|0);
    HEAP8[$702>>0] = 0;
    $703 = (($19) + 3|0);
    HEAP8[$703>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$19+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$19+3>>0]|0;
    _DrawText(656,$697,$700,50,$$byval_copy262);
    $704 = HEAP32[672>>2]|0;
    $705 = ($704|0)==(0);
    $706 = HEAP32[8>>2]|0;
    $707 = (($706|0) / 2)&-1;
    $708 = (_MeasureText(160,30)|0);
    $709 = (($708|0) / 2)&-1;
    $710 = (($707) - ($709))|0;
    if ($705) {
     HEAP8[$20>>0] = -126;
     $711 = (($20) + 1|0);
     HEAP8[$711>>0] = -126;
     $712 = (($20) + 2|0);
     HEAP8[$712>>0] = -126;
     $713 = (($20) + 3|0);
     HEAP8[$713>>0] = -1;
     ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$20+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$20+3>>0]|0;
     _DrawText(496,$710,460,30,$$byval_copy262);
     label = 206;
     break L210;
    }
    HEAP8[$21>>0] = -126;
    $714 = (($21) + 1|0);
    HEAP8[$714>>0] = -126;
    $715 = (($21) + 2|0);
    HEAP8[$715>>0] = -126;
    $716 = (($21) + 3|0);
    HEAP8[$716>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$21+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$21+3>>0]|0;
    _DrawText(160,$710,460,30,$$byval_copy262);
    $717 = HEAP32[680>>2]|0;
    $718 = ($717|0)==(0);
    $719 = HEAP32[8>>2]|0;
    $720 = (($719|0) / 2)&-1;
    if ($718) {
     $721 = (_MeasureText(200,30)|0);
     $722 = (($721|0) / 2)&-1;
     $723 = (($720) - ($722))|0;
     HEAP8[$22>>0] = -126;
     $724 = (($22) + 1|0);
     HEAP8[$724>>0] = -126;
     $725 = (($22) + 2|0);
     HEAP8[$725>>0] = -126;
     $726 = (($22) + 3|0);
     HEAP8[$726>>0] = -1;
     ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$22+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$22+3>>0]|0;
     _DrawText(496,$723,510,30,$$byval_copy262);
     label = 206;
     break L210;
    }
    $727 = (_MeasureText(160,30)|0);
    $728 = (($727|0) / 2)&-1;
    $729 = (($720) - ($728))|0;
    HEAP8[$23>>0] = -126;
    $730 = (($23) + 1|0);
    HEAP8[$730>>0] = -126;
    $731 = (($23) + 2|0);
    HEAP8[$731>>0] = -126;
    $732 = (($23) + 3|0);
    HEAP8[$732>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$23+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$23+3>>0]|0;
    _DrawText(200,$729,510,30,$$byval_copy262);
    $733 = HEAP32[768>>2]|0;
    $734 = ($733|0)>(90);
    if (!($734)) {
     label = 206;
     break L210;
    }
    $735 = (($733|0) / 30)&-1;
    $736 = $735 & 1;
    $737 = ($736|0)==(0);
    if ($737) {
     label = 206;
     break L210;
    }
    HEAP8[$24>>0] = -126;
    $738 = (($24) + 1|0);
    HEAP8[$738>>0] = -126;
    $739 = (($24) + 2|0);
    HEAP8[$739>>0] = -126;
    $740 = (($24) + 3|0);
    HEAP8[$740>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$24+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$24+3>>0]|0;
    _DrawText(2488,930,650,20,$$byval_copy262);
    label = 206;
    break L210;
   } else {
    label = 206;
    break L210;
   }
   break;
  }
  case 2:  {
   HEAP32[$25>>2] = -1;
   ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[1384+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[1384+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[1384+8>>2]|0;
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$25+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$25+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$25+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$25+3>>0]|0;
   _DrawTexture($pongEnemyRec$byval_copy257,40,40,$$byval_copy262);
   HEAP8[$26>>0] = -126;
   $741 = (($26) + 1|0);
   HEAP8[$741>>0] = -126;
   $742 = (($26) + 2|0);
   HEAP8[$742>>0] = -126;
   $743 = (($26) + 3|0);
   HEAP8[$743>>0] = -1;
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$26+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$26+3>>0]|0;
   _DrawText(2512,198,50,20,$$byval_copy262);
   $744 = HEAP32[768>>2]|0;
   $745 = ($744|0)<(120);
   if ($745) {
    $746 = (($744|0) / 30)&-1;
    $747 = $746 & 1;
    $748 = ($747|0)==(0);
    if ($748) {
     $749 = HEAP32[688>>2]|0;
     $750 = ($749*175)|0;
     $751 = (($750) + 194)|0;
     HEAP8[$27>>0] = -26;
     $752 = (($27) + 1|0);
     HEAP8[$752>>0] = 41;
     $753 = (($27) + 2|0);
     HEAP8[$753>>0] = 55;
     $754 = (($27) + 3|0);
     HEAP8[$754>>0] = -1;
     ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$27+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$27+3>>0]|0;
     _DrawRectangle($751,86,158,78,$$byval_copy262);
    }
   } else {
    $755 = HEAP32[688>>2]|0;
    $756 = ($755*175)|0;
    $757 = (($756) + 194)|0;
    HEAP8[$28>>0] = -26;
    $758 = (($28) + 1|0);
    HEAP8[$758>>0] = 41;
    $759 = (($28) + 2|0);
    HEAP8[$759>>0] = 55;
    $760 = (($28) + 3|0);
    HEAP8[$760>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$28+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$28+3>>0]|0;
    _DrawRectangle($757,86,158,78,$$byval_copy262);
   }
   $761 = HEAP32[688>>2]|0;
   $762 = ($761|0)==(5);
   L241: do {
    if ($762) {
     label = 191;
    } else {
     HEAPF32[$29>>2] = 910.0;
     $763 = (($29) + 4|0);
     HEAPF32[$763>>2] = 675.0;
     HEAPF32[$30>>2] = 890.0;
     $764 = (($30) + 4|0);
     HEAPF32[$764>>2] = 685.0;
     HEAPF32[$31>>2] = 910.0;
     $765 = (($31) + 4|0);
     HEAPF32[$765>>2] = 695.0;
     HEAP8[$32>>0] = -126;
     $766 = (($32) + 1|0);
     HEAP8[$766>>0] = -126;
     $767 = (($32) + 2|0);
     HEAP8[$767>>0] = -126;
     $768 = (($32) + 3|0);
     HEAP8[$768>>0] = -1;
     ;HEAP32[$$byval_copy204+0>>2]=HEAP32[$29+0>>2]|0;HEAP32[$$byval_copy204+4>>2]=HEAP32[$29+4>>2]|0;
     ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[$30+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[$30+4>>2]|0;
     ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$31+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$31+4>>2]|0;
     ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$32+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$32+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$32+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$32+3>>0]|0;
     _DrawTriangle($$byval_copy204,$fontAlagard$byval_copy247,$pongEnemyRec$byval_copy257,$$byval_copy262);
     HEAPF32[$33>>2] = 920.0;
     $769 = (($33) + 4|0);
     HEAPF32[$769>>2] = 675.0;
     HEAPF32[$34>>2] = 920.0;
     $770 = (($34) + 4|0);
     HEAPF32[$770>>2] = 695.0;
     HEAPF32[$35>>2] = 940.0;
     $771 = (($35) + 4|0);
     HEAPF32[$771>>2] = 685.0;
     HEAP8[$36>>0] = -126;
     $772 = (($36) + 1|0);
     HEAP8[$772>>0] = -126;
     $773 = (($36) + 2|0);
     HEAP8[$773>>0] = -126;
     $774 = (($36) + 3|0);
     HEAP8[$774>>0] = -1;
     ;HEAP32[$$byval_copy204+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$$byval_copy204+4>>2]=HEAP32[$33+4>>2]|0;
     ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[$34+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[$34+4>>2]|0;
     ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$35+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$35+4>>2]|0;
     ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$36+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$36+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$36+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$36+3>>0]|0;
     _DrawTriangle($$byval_copy204,$fontAlagard$byval_copy247,$pongEnemyRec$byval_copy257,$$byval_copy262);
     HEAP8[$37>>0] = -126;
     $775 = (($37) + 1|0);
     HEAP8[$775>>0] = -126;
     $776 = (($37) + 2|0);
     HEAP8[$776>>0] = -126;
     $777 = (($37) + 3|0);
     HEAP8[$777>>0] = -1;
     ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$37+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$37+3>>0]|0;
     _DrawText(2552,960,680,10,$$byval_copy262);
     $$pr32 = HEAP32[688>>2]|0;
     switch ($$pr32|0) {
     case 0:  {
      _GetColor($38,1549425407);
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$38+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$38+3>>0]|0;
      _DrawText(2592,48,200,10,$$byval_copy262);
      HEAPF32[$39>>2] = 48.0;
      $778 = (($39) + 4|0);
      HEAPF32[$778>>2] = 230.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $779 = (_GetFontBaseSize($$byval_copy262)|0);
      $780 = $779 << 1;
      _GetColor($40,1549425407);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$39+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$39+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$40+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$40+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,2632,$pongEnemyRec$byval_copy257,$780,4,$$byval_copy262);
      HEAPF32[$41>>2] = 48.0;
      $781 = (($41) + 4|0);
      HEAPF32[$781>>2] = 260.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $782 = (_GetFontBaseSize($$byval_copy262)|0);
      $783 = $782 << 1;
      _GetColor($42,1549425407);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$41+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$41+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$42+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$42+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,2656,$pongEnemyRec$byval_copy257,$783,4,$$byval_copy262);
      HEAPF32[$43>>2] = 48.0;
      $784 = (($43) + 4|0);
      HEAPF32[$784>>2] = 290.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $785 = (_GetFontBaseSize($$byval_copy262)|0);
      $786 = $785 << 1;
      _GetColor($44,1549425407);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$43+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$43+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$44+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$44+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$44+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$44+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,2680,$pongEnemyRec$byval_copy257,$786,4,$$byval_copy262);
      HEAPF32[$45>>2] = 48.0;
      $787 = (($45) + 4|0);
      HEAPF32[$787>>2] = 320.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $788 = (_GetFontBaseSize($$byval_copy262)|0);
      $789 = $788 << 1;
      _GetColor($46,1549425407);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$45+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$45+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$46+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$46+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$46+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$46+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,2696,$pongEnemyRec$byval_copy257,$789,4,$$byval_copy262);
      HEAPF32[$47>>2] = 48.0;
      $790 = (($47) + 4|0);
      HEAPF32[$790>>2] = 350.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $791 = (_GetFontBaseSize($$byval_copy262)|0);
      $792 = $791 << 1;
      _GetColor($48,1549425407);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$47+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$47+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$48+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$48+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,2712,$pongEnemyRec$byval_copy257,$792,4,$$byval_copy262);
      $793 = HEAP32[696>>2]|0;
      if ((($793|0) == 2)) {
       HEAPF32[$50>>2] = 450.0;
       $794 = (($50) + 4|0);
       HEAPF32[$794>>2] = 175.0;
       HEAP32[$51>>2] = -1;
       ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1200+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1200+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1200+8>>2]|0;
       ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$50+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$50+4>>2]|0;
       ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$51+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$51+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$51+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$51+3>>0]|0;
       _DrawTextureEx($fontAlagard$byval_copy247,$pongEnemyRec$byval_copy257,0.0,4.0,$$byval_copy262);
      } else if ((($793|0) == 4)) {
       HEAPF32[$54>>2] = 470.0;
       $796 = (($54) + 4|0);
       HEAPF32[$796>>2] = 155.0;
       HEAP32[$55>>2] = -1;
       ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1296+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1296+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1296+8>>2]|0;
       ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$54+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$54+4>>2]|0;
       ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$55+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$55+3>>0]|0;
       _DrawTextureEx($fontAlagard$byval_copy247,$pongEnemyRec$byval_copy257,0.0,4.0,$$byval_copy262);
      } else if ((($793|0) == 3)) {
       HEAPF32[$52>>2] = 430.0;
       $795 = (($52) + 4|0);
       HEAPF32[$795>>2] = 180.0;
       HEAP32[$53>>2] = -1;
       ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1248+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1248+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1248+8>>2]|0;
       ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$52+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$52+4>>2]|0;
       ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$53+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$53+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$53+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$53+3>>0]|0;
       _DrawTextureEx($fontAlagard$byval_copy247,$pongEnemyRec$byval_copy257,0.0,4.0,$$byval_copy262);
      } else if ((($793|0) == 1)) {
       HEAP32[$49>>2] = -1;
       ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[1152+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[1152+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[1152+8>>2]|0;
       ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$49+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$49+3>>0]|0;
       _DrawTexture($pongEnemyRec$byval_copy257,520,220,$$byval_copy262);
      } else {
       HEAP32[$56>>2] = -1;
       ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[1152+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[1152+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[1152+8>>2]|0;
       ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$56+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$56+3>>0]|0;
       _DrawTexture($pongEnemyRec$byval_copy257,520,220,$$byval_copy262);
      }
      $797 = HEAP32[768>>2]|0;
      $798 = ($797|0)>(140);
      if ($798) {
       $799 = HEAP32[704>>2]|0;
       $800 = (($799) + 688)|0;
       $801 = (($799) + 230)|0;
       HEAP8[$57>>0] = -56;
       $802 = (($57) + 1|0);
       HEAP8[$802>>0] = -56;
       $803 = (($57) + 2|0);
       HEAP8[$803>>0] = -56;
       $804 = (($57) + 3|0);
       HEAP8[$804>>0] = -1;
       ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$57+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$57+3>>0]|0;
       _DrawText(2736,$800,$801,10,$$byval_copy262);
      }
      HEAP8[$58>>0] = -66;
      $805 = (($58) + 1|0);
      HEAP8[$805>>0] = 33;
      $806 = (($58) + 2|0);
      HEAP8[$806>>0] = 55;
      $807 = (($58) + 3|0);
      HEAP8[$807>>0] = -1;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$58+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$58+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$58+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$58+3>>0]|0;
      _DrawText(2808,48,400,10,$$byval_copy262);
      HEAP32[$59>>2] = 0;
      $808 = (($59) + 4|0);
      HEAP32[$808>>2] = 0;
      $809 = (($59) + 8|0);
      $810 = HEAP32[((1344 + 4|0))>>2]|0;
      HEAP32[$809>>2] = $810;
      $811 = (($59) + 12|0);
      $812 = HEAP32[((1344 + 8|0))>>2]|0;
      HEAP32[$811>>2] = $812;
      HEAPF32[$60>>2] = 75.0;
      $813 = (($60) + 4|0);
      HEAPF32[$813>>2] = 420.0;
      HEAP32[$61>>2] = -1;
      ;HEAP32[$$byval_copy204+0>>2]=HEAP32[1344+0>>2]|0;HEAP32[$$byval_copy204+4>>2]=HEAP32[1344+4>>2]|0;HEAP32[$$byval_copy204+8>>2]=HEAP32[1344+8>>2]|0;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[$59+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[$59+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[$59+12>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$60+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$60+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$61+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$61+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$61+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$61+3>>0]|0;
      _DrawTextureRec($$byval_copy204,$fontAlagard$byval_copy247,$pongEnemyRec$byval_copy257,$$byval_copy262);
      $814 = HEAP32[704>>2]|0;
      $815 = (($814) + 528)|0;
      $816 = (($814) + 251)|0;
      HEAP8[$62>>0] = -11;
      $817 = (($62) + 1|0);
      HEAP8[$817>>0] = -11;
      $818 = (($62) + 2|0);
      HEAP8[$818>>0] = -11;
      $819 = (($62) + 3|0);
      HEAP8[$819>>0] = -1;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$62+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$62+3>>0]|0;
      _DrawRectangle($815,$816,640,360,$$byval_copy262);
      $820 = HEAP32[704>>2]|0;
      $821 = (($820) + 527)|0;
      $822 = (($820) + 249)|0;
      HEAP8[$63>>0] = -126;
      $823 = (($63) + 1|0);
      HEAP8[$823>>0] = -126;
      $824 = (($63) + 2|0);
      HEAP8[$824>>0] = -126;
      $825 = (($63) + 3|0);
      HEAP8[$825>>0] = -1;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$63+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$63+3>>0]|0;
      _DrawRectangleLines($821,$822,642,362,$$byval_copy262);
      $826 = HEAP32[704>>2]|0;
      $827 = (($826) + 538)|0;
      $828 = (($826) + 261)|0;
      _DrawFPS($827,$828);
      $829 = +HEAPF32[1736>>2];
      $830 = $829 + -50.0;
      $831 = (~~(($830)));
      $832 = +HEAPF32[((1736 + 4|0))>>2];
      $833 = $832 + -50.0;
      $834 = (~~(($833)));
      HEAP8[$65>>0] = -66;
      $835 = (($65) + 1|0);
      HEAP8[$835>>0] = 33;
      $836 = (($65) + 2|0);
      HEAP8[$836>>0] = 55;
      $837 = (($65) + 3|0);
      HEAP8[$837>>0] = -1;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$65+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$65+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$65+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$65+3>>0]|0;
      _Fade($64,$$byval_copy262,0.5);
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$64+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$64+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$64+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$64+3>>0]|0;
      _DrawRectangle($831,$834,100,100,$$byval_copy262);
      $838 = HEAP32[704>>2]|0;
      $839 = (($838) + 527)|0;
      HEAP32[$67>>2] = $839;
      $840 = (($67) + 4|0);
      $841 = HEAP32[704>>2]|0;
      $842 = (($841) + 250)|0;
      HEAP32[$840>>2] = $842;
      $843 = (($67) + 8|0);
      HEAP32[$843>>2] = 642;
      $844 = (($67) + 12|0);
      HEAP32[$844>>2] = 362;
      $845 = +HEAPF32[1736>>2];
      $846 = (~~(($845)));
      $847 = (($846) + -50)|0;
      HEAP32[$68>>2] = $847;
      $848 = (($68) + 4|0);
      $849 = +HEAPF32[((1736 + 4|0))>>2];
      $850 = (~~(($849)));
      $851 = (($850) + -50)|0;
      HEAP32[$848>>2] = $851;
      $852 = (($68) + 8|0);
      HEAP32[$852>>2] = 100;
      $853 = (($68) + 12|0);
      HEAP32[$853>>2] = 100;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$67+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$67+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[$67+8>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+12>>2]=HEAP32[$67+12>>2]|0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[$68+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[$68+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[$68+12>>2]|0;
      _GetCollisionRec($66,$pongEnemyRec$byval_copy257,$$byval_copy262);
      HEAP8[$69>>0] = -66;
      $854 = (($69) + 1|0);
      HEAP8[$854>>0] = 33;
      $855 = (($69) + 2|0);
      HEAP8[$855>>0] = 55;
      $856 = (($69) + 3|0);
      HEAP8[$856>>0] = -1;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$66+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$66+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[$66+8>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+12>>2]=HEAP32[$66+12>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$69+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$69+3>>0]|0;
      _DrawRectangleRec($pongEnemyRec$byval_copy257,$$byval_copy262);
      $857 = HEAP32[768>>2]|0;
      $858 = ($857|0)>(140);
      if (!($858)) {
       break L241;
      }
      $859 = +HEAPF32[1736>>2];
      $860 = $859 + -26.0;
      HEAPF32[$70>>2] = $860;
      $861 = (($70) + 4|0);
      $862 = +HEAPF32[((1736 + 4|0))>>2];
      $863 = $862 + -20.0;
      HEAPF32[$861>>2] = $863;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[920+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[920+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[920+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[920+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[920+16>>2]|0;
      $864 = (_GetFontBaseSize($$byval_copy262)|0);
      HEAP8[$71>>0] = 0;
      $865 = (($71) + 1|0);
      HEAP8[$865>>0] = 0;
      $866 = (($71) + 2|0);
      HEAP8[$866>>0] = 0;
      $867 = (($71) + 3|0);
      HEAP8[$867>>0] = -1;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[920+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[920+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[920+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[920+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[920+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$70+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$70+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$71+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$71+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$71+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$71+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,2864,$pongEnemyRec$byval_copy257,$864,2,$$byval_copy262);
      $868 = +HEAPF32[1736>>2];
      $869 = $868 + -36.0;
      HEAPF32[$72>>2] = $869;
      $870 = (($72) + 4|0);
      $871 = +HEAPF32[((1736 + 4|0))>>2];
      HEAPF32[$870>>2] = $871;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[920+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[920+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[920+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[920+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[920+16>>2]|0;
      $872 = (_GetFontBaseSize($$byval_copy262)|0);
      HEAP8[$73>>0] = 0;
      $873 = (($73) + 1|0);
      HEAP8[$873>>0] = 0;
      $874 = (($73) + 2|0);
      HEAP8[$874>>0] = 0;
      $875 = (($73) + 3|0);
      HEAP8[$875>>0] = -1;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[920+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[920+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[920+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[920+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[920+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$72+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$72+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$73+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$73+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,2872,$pongEnemyRec$byval_copy257,$872,2,$$byval_copy262);
      break L241;
      break;
     }
     case 1:  {
      _GetColor($74,-849913857);
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$74+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$74+3>>0]|0;
      _DrawText(2592,48,200,10,$$byval_copy262);
      HEAPF32[$75>>2] = 48.0;
      $876 = (($75) + 4|0);
      HEAPF32[$876>>2] = 230.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $877 = (_GetFontBaseSize($$byval_copy262)|0);
      $878 = $877 << 1;
      _GetColor($76,-849913857);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$75+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$75+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$76+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$76+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$76+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$76+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,2888,$pongEnemyRec$byval_copy257,$878,4,$$byval_copy262);
      HEAPF32[$77>>2] = 48.0;
      $879 = (($77) + 4|0);
      HEAPF32[$879>>2] = 260.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $880 = (_GetFontBaseSize($$byval_copy262)|0);
      $881 = $880 << 1;
      _GetColor($78,-849913857);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$77+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$77+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$78+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$78+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$78+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$78+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,2912,$pongEnemyRec$byval_copy257,$881,4,$$byval_copy262);
      $882 = HEAP32[8>>2]|0;
      $883 = (($882|0) / 4)&-1;
      HEAP8[$79>>0] = 0;
      $884 = (($79) + 1|0);
      HEAP8[$884>>0] = 82;
      $885 = (($79) + 2|0);
      HEAP8[$885>>0] = -84;
      $886 = (($79) + 3|0);
      HEAP8[$886>>0] = -1;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$79+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$79+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$79+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$79+3>>0]|0;
      _DrawCircle($883,360,35.0,$$byval_copy262);
      $887 = HEAP32[8>>2]|0;
      $888 = (($887|0) / 4)&-1;
      HEAP8[$80>>0] = 0;
      $889 = (($80) + 1|0);
      HEAP8[$889>>0] = -28;
      $890 = (($80) + 2|0);
      HEAP8[$890>>0] = 48;
      $891 = (($80) + 3|0);
      HEAP8[$891>>0] = -1;
      HEAP8[$81>>0] = 102;
      $892 = (($81) + 1|0);
      HEAP8[$892>>0] = -65;
      $893 = (($81) + 2|0);
      HEAP8[$893>>0] = -1;
      $894 = (($81) + 3|0);
      HEAP8[$894>>0] = -1;
      ;HEAP8[$pongEnemyRec$byval_copy257+0>>0]=HEAP8[$80+0>>0]|0;HEAP8[$pongEnemyRec$byval_copy257+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$pongEnemyRec$byval_copy257+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$pongEnemyRec$byval_copy257+3>>0]=HEAP8[$80+3>>0]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$81+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$81+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$81+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$81+3>>0]|0;
      _DrawCircleGradient($888,460,60.0,$pongEnemyRec$byval_copy257,$$byval_copy262);
      $895 = HEAP32[8>>2]|0;
      $896 = (($895|0) / 4)&-1;
      HEAP8[$82>>0] = 0;
      $897 = (($82) + 1|0);
      HEAP8[$897>>0] = 82;
      $898 = (($82) + 2|0);
      HEAP8[$898>>0] = -84;
      $899 = (($82) + 3|0);
      HEAP8[$899>>0] = -1;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$82+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$82+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$82+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$82+3>>0]|0;
      _DrawCircleLines($896,580,80.0,$$byval_copy262);
      $900 = HEAP32[8>>2]|0;
      $901 = (($900|0) / 4)&-1;
      $902 = $901 << 1;
      $903 = (($902) + -110)|0;
      HEAP8[$83>>0] = 0;
      $904 = (($83) + 1|0);
      HEAP8[$904>>0] = -98;
      $905 = (($83) + 2|0);
      HEAP8[$905>>0] = 47;
      $906 = (($83) + 3|0);
      HEAP8[$906>>0] = -1;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$83+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$83+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$83+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$83+3>>0]|0;
      _DrawRectangle($903,280,220,100,$$byval_copy262);
      $907 = HEAP32[8>>2]|0;
      $908 = (($907|0) / 4)&-1;
      $909 = $908 << 1;
      $910 = (($909) + -90)|0;
      HEAP8[$84>>0] = -66;
      $911 = (($84) + 1|0);
      HEAP8[$911>>0] = 33;
      $912 = (($84) + 2|0);
      HEAP8[$912>>0] = 55;
      $913 = (($84) + 3|0);
      HEAP8[$913>>0] = -1;
      HEAP8[$85>>0] = -1;
      $914 = (($85) + 1|0);
      HEAP8[$914>>0] = -53;
      $915 = (($85) + 2|0);
      HEAP8[$915>>0] = 0;
      $916 = (($85) + 3|0);
      HEAP8[$916>>0] = -1;
      ;HEAP8[$pongEnemyRec$byval_copy257+0>>0]=HEAP8[$84+0>>0]|0;HEAP8[$pongEnemyRec$byval_copy257+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$pongEnemyRec$byval_copy257+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$pongEnemyRec$byval_copy257+3>>0]=HEAP8[$84+3>>0]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$85+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$85+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$85+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$85+3>>0]|0;
      _DrawRectangleGradient($910,410,180,130,$pongEnemyRec$byval_copy257,$$byval_copy262);
      $917 = HEAP32[8>>2]|0;
      $918 = (($917|0) / 4)&-1;
      $919 = $918 << 1;
      $920 = (($919) + -80)|0;
      HEAP8[$86>>0] = -1;
      $921 = (($86) + 1|0);
      HEAP8[$921>>0] = -95;
      $922 = (($86) + 2|0);
      HEAP8[$922>>0] = 0;
      $923 = (($86) + 3|0);
      HEAP8[$923>>0] = -1;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$86+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$86+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$86+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$86+3>>0]|0;
      _DrawRectangleLines($920,560,160,80,$$byval_copy262);
      $924 = HEAP32[8>>2]|0;
      $925 = (($924|0) / 4)&-1;
      $926 = ($925*3)|0;
      $927 = (+($926|0));
      HEAPF32[$87>>2] = $927;
      $928 = (($87) + 4|0);
      HEAPF32[$928>>2] = 280.0;
      $929 = HEAP32[8>>2]|0;
      $930 = (($929|0) / 4)&-1;
      $931 = ($930*3)|0;
      $932 = (($931) + -60)|0;
      $933 = (+($932|0));
      HEAPF32[$88>>2] = $933;
      $934 = (($88) + 4|0);
      HEAPF32[$934>>2] = 380.0;
      $935 = HEAP32[8>>2]|0;
      $936 = (($935|0) / 4)&-1;
      $937 = ($936*3)|0;
      $938 = (($937) + 60)|0;
      $939 = (+($938|0));
      HEAPF32[$89>>2] = $939;
      $940 = (($89) + 4|0);
      HEAPF32[$940>>2] = 380.0;
      HEAP8[$90>>0] = -121;
      $941 = (($90) + 1|0);
      HEAP8[$941>>0] = 60;
      $942 = (($90) + 2|0);
      HEAP8[$942>>0] = -66;
      $943 = (($90) + 3|0);
      HEAP8[$943>>0] = -1;
      ;HEAP32[$$byval_copy204+0>>2]=HEAP32[$87+0>>2]|0;HEAP32[$$byval_copy204+4>>2]=HEAP32[$87+4>>2]|0;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[$88+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[$88+4>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$89+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$89+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$90+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$90+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$90+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$90+3>>0]|0;
      _DrawTriangle($$byval_copy204,$fontAlagard$byval_copy247,$pongEnemyRec$byval_copy257,$$byval_copy262);
      $944 = HEAP32[8>>2]|0;
      $945 = (($944|0) / 4)&-1;
      $946 = ($945*3)|0;
      $947 = (+($946|0));
      HEAPF32[$91>>2] = $947;
      $948 = (($91) + 4|0);
      HEAPF32[$948>>2] = 360.0;
      $949 = HEAP32[8>>2]|0;
      $950 = (($949|0) / 4)&-1;
      $951 = ($950*3)|0;
      $952 = (($951) + -60)|0;
      $953 = (+($952|0));
      HEAPF32[$92>>2] = $953;
      $954 = (($92) + 4|0);
      HEAPF32[$954>>2] = 470.0;
      $955 = HEAP32[8>>2]|0;
      $956 = (($955|0) / 4)&-1;
      $957 = ($956*3)|0;
      $958 = (($957) + 60)|0;
      $959 = (+($958|0));
      HEAPF32[$93>>2] = $959;
      $960 = (($93) + 4|0);
      HEAPF32[$960>>2] = 470.0;
      HEAP8[$94>>0] = 102;
      $961 = (($94) + 1|0);
      HEAP8[$961>>0] = -65;
      $962 = (($94) + 2|0);
      HEAP8[$962>>0] = -1;
      $963 = (($94) + 3|0);
      HEAP8[$963>>0] = -1;
      ;HEAP32[$$byval_copy204+0>>2]=HEAP32[$91+0>>2]|0;HEAP32[$$byval_copy204+4>>2]=HEAP32[$91+4>>2]|0;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[$92+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[$92+4>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$93+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$93+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$94+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$94+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$94+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$94+3>>0]|0;
      _DrawTriangleLines($$byval_copy204,$fontAlagard$byval_copy247,$pongEnemyRec$byval_copy257,$$byval_copy262);
      $964 = HEAP32[8>>2]|0;
      $965 = (($964|0) / 4)&-1;
      $966 = ($965*3)|0;
      $967 = (+($966|0));
      HEAPF32[$95>>2] = $967;
      $968 = (($95) + 4|0);
      HEAPF32[$968>>2] = 560.0;
      HEAP8[$96>>0] = 127;
      $969 = (($96) + 1|0);
      HEAP8[$969>>0] = 106;
      $970 = (($96) + 2|0);
      HEAP8[$970>>0] = 79;
      $971 = (($96) + 3|0);
      HEAP8[$971>>0] = -1;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$95+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$95+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$96+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$96+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$96+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$96+3>>0]|0;
      _DrawPoly($pongEnemyRec$byval_copy257,6,80.0,0.0,$$byval_copy262);
      break L241;
      break;
     }
     case 2:  {
      _GetColor($97,1619090175);
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$97+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$97+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$97+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$97+3>>0]|0;
      _DrawText(2592,48,200,10,$$byval_copy262);
      HEAPF32[$98>>2] = 48.0;
      $972 = (($98) + 4|0);
      HEAPF32[$972>>2] = 230.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $973 = (_GetFontBaseSize($$byval_copy262)|0);
      $974 = $973 << 1;
      _GetColor($99,1619090175);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$98+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$98+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$99+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$99+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$99+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$99+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,2944,$pongEnemyRec$byval_copy257,$974,4,$$byval_copy262);
      HEAPF32[$100>>2] = 48.0;
      $975 = (($100) + 4|0);
      HEAPF32[$975>>2] = 260.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $976 = (_GetFontBaseSize($$byval_copy262)|0);
      $977 = $976 << 1;
      _GetColor($101,1619090175);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$100+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$100+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$101+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$101+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$101+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$101+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,2976,$pongEnemyRec$byval_copy257,$977,4,$$byval_copy262);
      HEAP8[$102>>0] = -126;
      $978 = (($102) + 1|0);
      HEAP8[$978>>0] = -126;
      $979 = (($102) + 2|0);
      HEAP8[$979>>0] = -126;
      $980 = (($102) + 3|0);
      HEAP8[$980>>0] = -1;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$102+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$102+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$102+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$102+3>>0]|0;
      _DrawRectangle(138,348,260,260,$$byval_copy262);
      HEAP32[$103>>2] = 0;
      $981 = (($103) + 4|0);
      HEAP32[$981>>2] = 0;
      $982 = (($103) + 8|0);
      $983 = HEAP32[((1440 + 4|0))>>2]|0;
      HEAP32[$982>>2] = $983;
      $984 = (($103) + 12|0);
      $985 = HEAP32[((1440 + 8|0))>>2]|0;
      HEAP32[$984>>2] = $985;
      HEAP32[$104>>2] = 268;
      $986 = (($104) + 4|0);
      HEAP32[$986>>2] = 478;
      $987 = (($104) + 8|0);
      $988 = HEAP32[((1440 + 4|0))>>2]|0;
      $989 = (($988|0) / 2)&-1;
      $990 = (+($989|0));
      $991 = +HEAPF32[712>>2];
      $992 = $990 * $991;
      $993 = (~~(($992)));
      HEAP32[$987>>2] = $993;
      $994 = (($104) + 12|0);
      $995 = HEAP32[((1440 + 8|0))>>2]|0;
      $996 = (($995|0) / 2)&-1;
      $997 = (+($996|0));
      $998 = +HEAPF32[712>>2];
      $999 = $997 * $998;
      $1000 = (~~(($999)));
      HEAP32[$994>>2] = $1000;
      $1001 = HEAP32[((1440 + 4|0))>>2]|0;
      $1002 = (($1001|0) / 4)&-1;
      $1003 = (+($1002|0));
      $1004 = +HEAPF32[712>>2];
      $1005 = $1003 * $1004;
      HEAPF32[$105>>2] = $1005;
      $1006 = (($105) + 4|0);
      $1007 = HEAP32[((1440 + 8|0))>>2]|0;
      $1008 = (($1007|0) / 4)&-1;
      $1009 = (+($1008|0));
      $1010 = +HEAPF32[712>>2];
      $1011 = $1009 * $1010;
      HEAPF32[$1006>>2] = $1011;
      HEAP32[$106>>2] = -1;
      ;HEAP32[$cat$byval_copy+0>>2]=HEAP32[1440+0>>2]|0;HEAP32[$cat$byval_copy+4>>2]=HEAP32[1440+4>>2]|0;HEAP32[$cat$byval_copy+8>>2]=HEAP32[1440+8>>2]|0;
      ;HEAP32[$$byval_copy204+0>>2]=HEAP32[$103+0>>2]|0;HEAP32[$$byval_copy204+4>>2]=HEAP32[$103+4>>2]|0;HEAP32[$$byval_copy204+8>>2]=HEAP32[$103+8>>2]|0;HEAP32[$$byval_copy204+12>>2]=HEAP32[$103+12>>2]|0;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[$104+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[$104+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[$104+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[$104+12>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$105+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$105+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$106+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$106+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$106+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$106+3>>0]|0;
      _DrawTexturePro($cat$byval_copy,$$byval_copy204,$fontAlagard$byval_copy247,$pongEnemyRec$byval_copy257,0.0,$$byval_copy262);
      HEAP32[$108>>2] = -1;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$108+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$108+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$108+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$108+3>>0]|0;
      _Fade($107,$$byval_copy262,0.300000011920928955078);
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[1440+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[1440+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[1440+8>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$107+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$107+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$107+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$107+3>>0]|0;
      _DrawTexture($pongEnemyRec$byval_copy257,600,180,$$byval_copy262);
      HEAP32[$109>>2] = 225;
      $1012 = (($109) + 4|0);
      HEAP32[$1012>>2] = 240;
      $1013 = (($109) + 8|0);
      HEAP32[$1013>>2] = 155;
      $1014 = (($109) + 12|0);
      HEAP32[$1014>>2] = 50;
      HEAPF32[$110>>2] = 824.0;
      $1015 = (($110) + 4|0);
      HEAPF32[$1015>>2] = 421.0;
      HEAP8[$111>>0] = -1;
      $1016 = (($111) + 1|0);
      HEAP8[$1016>>0] = 109;
      $1017 = (($111) + 2|0);
      HEAP8[$1017>>0] = -62;
      $1018 = (($111) + 3|0);
      HEAP8[$1018>>0] = -1;
      ;HEAP32[$$byval_copy204+0>>2]=HEAP32[1440+0>>2]|0;HEAP32[$$byval_copy204+4>>2]=HEAP32[1440+4>>2]|0;HEAP32[$$byval_copy204+8>>2]=HEAP32[1440+8>>2]|0;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[$109+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[$109+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[$109+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[$109+12>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$110+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$110+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$111+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$111+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$111+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$111+3>>0]|0;
      _DrawTextureRec($$byval_copy204,$fontAlagard$byval_copy247,$pongEnemyRec$byval_copy257,$$byval_copy262);
      HEAP32[$112>>2] = 0;
      $1019 = (($112) + 4|0);
      HEAP32[$1019>>2] = 0;
      $1020 = (($112) + 8|0);
      $1021 = HEAP32[((1480 + 4|0))>>2]|0;
      HEAP32[$1020>>2] = $1021;
      $1022 = (($112) + 12|0);
      $1023 = HEAP32[((1480 + 8|0))>>2]|0;
      HEAP32[$1022>>2] = $1023;
      $1024 = HEAP32[8>>2]|0;
      $1025 = (($1024|0) / 2)&-1;
      $1026 = (($1025) + -40)|0;
      HEAP32[$113>>2] = $1026;
      $1027 = (($113) + 4|0);
      HEAP32[$1027>>2] = 478;
      $1028 = (($113) + 8|0);
      $1029 = HEAP32[((1480 + 4|0))>>2]|0;
      $1030 = (($1029|0) / 2)&-1;
      HEAP32[$1028>>2] = $1030;
      $1031 = (($113) + 12|0);
      $1032 = HEAP32[((1480 + 8|0))>>2]|0;
      $1033 = (($1032|0) / 2)&-1;
      HEAP32[$1031>>2] = $1033;
      $1034 = HEAP32[((1480 + 4|0))>>2]|0;
      $1035 = (($1034|0) / 4)&-1;
      $1036 = (+($1035|0));
      HEAPF32[$114>>2] = $1036;
      $1037 = (($114) + 4|0);
      $1038 = HEAP32[((1480 + 8|0))>>2]|0;
      $1039 = (($1038|0) / 4)&-1;
      $1040 = (+($1039|0));
      HEAPF32[$1037>>2] = $1040;
      $1041 = HEAP32[768>>2]|0;
      $1042 = (+($1041|0));
      HEAP8[$115>>0] = -1;
      $1043 = (($115) + 1|0);
      HEAP8[$1043>>0] = -53;
      $1044 = (($115) + 2|0);
      HEAP8[$1044>>0] = 0;
      $1045 = (($115) + 3|0);
      HEAP8[$1045>>0] = -1;
      ;HEAP32[$cat$byval_copy+0>>2]=HEAP32[1480+0>>2]|0;HEAP32[$cat$byval_copy+4>>2]=HEAP32[1480+4>>2]|0;HEAP32[$cat$byval_copy+8>>2]=HEAP32[1480+8>>2]|0;
      ;HEAP32[$$byval_copy204+0>>2]=HEAP32[$112+0>>2]|0;HEAP32[$$byval_copy204+4>>2]=HEAP32[$112+4>>2]|0;HEAP32[$$byval_copy204+8>>2]=HEAP32[$112+8>>2]|0;HEAP32[$$byval_copy204+12>>2]=HEAP32[$112+12>>2]|0;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[$113+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[$113+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[$113+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[$113+12>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$114+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$114+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$115+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$115+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$115+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$115+3>>0]|0;
      _DrawTexturePro($cat$byval_copy,$$byval_copy204,$fontAlagard$byval_copy247,$pongEnemyRec$byval_copy257,$1042,$$byval_copy262);
      break L241;
      break;
     }
     case 3:  {
      _GetColor($116,930571519);
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$116+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$116+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$116+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$116+3>>0]|0;
      _DrawText(2592,48,200,10,$$byval_copy262);
      HEAPF32[$117>>2] = 48.0;
      $1046 = (($117) + 4|0);
      HEAPF32[$1046>>2] = 230.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $1047 = (_GetFontBaseSize($$byval_copy262)|0);
      $1048 = $1047 << 1;
      _GetColor($118,930571519);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$117+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$117+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$118+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$118+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$118+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$118+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,2992,$pongEnemyRec$byval_copy257,$1048,4,$$byval_copy262);
      HEAPF32[$119>>2] = 48.0;
      $1049 = (($119) + 4|0);
      HEAPF32[$1049>>2] = 260.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $1050 = (_GetFontBaseSize($$byval_copy262)|0);
      $1051 = $1050 << 1;
      _GetColor($120,930571519);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$119+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$119+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$120+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$120+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$120+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$120+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,3016,$pongEnemyRec$byval_copy257,$1051,4,$$byval_copy262);
      HEAPF32[$121>>2] = 48.0;
      $1052 = (($121) + 4|0);
      HEAPF32[$1052>>2] = 290.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $1053 = (_GetFontBaseSize($$byval_copy262)|0);
      $1054 = $1053 << 1;
      _GetColor($122,930571519);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$121+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$121+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$122+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$122+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$122+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$122+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,3032,$pongEnemyRec$byval_copy257,$1054,4,$$byval_copy262);
      HEAP32[$123>>2] = -1;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[1520+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[1520+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[1520+8>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$123+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$123+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$123+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$123+3>>0]|0;
      _DrawTexture($pongEnemyRec$byval_copy257,60,360,$$byval_copy262);
      HEAPF32[$124>>2] = 708.0;
      $1055 = (($124) + 4|0);
      HEAPF32[$1055>>2] = 210.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1576+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1576+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1576+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1576+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1576+16>>2]|0;
      $1056 = (_GetFontBaseSize($$byval_copy262)|0);
      HEAP32[$125>>2] = -1;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1576+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1576+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1576+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1576+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1576+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$124+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$124+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$125+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$125+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$125+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$125+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,240,$pongEnemyRec$byval_copy257,$1056,-3,$$byval_copy262);
      HEAPF32[$126>>2] = 600.0;
      $1057 = (($126) + 4|0);
      HEAPF32[$1057>>2] = 260.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1640+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1640+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1640+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1640+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1640+16>>2]|0;
      $1058 = (_GetFontBaseSize($$byval_copy262)|0);
      HEAP32[$127>>2] = -1;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1640+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1640+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1640+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1640+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1640+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$126+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$126+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$127+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$127+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$127+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$127+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,296,$pongEnemyRec$byval_copy257,$1058,-2,$$byval_copy262);
      HEAPF32[$128>>2] = 710.0;
      $1059 = (($128) + 4|0);
      HEAPF32[$1059>>2] = 300.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1664+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1664+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1664+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1664+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1664+16>>2]|0;
      $1060 = (_GetFontBaseSize($$byval_copy262)|0);
      HEAP32[$129>>2] = -1;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1664+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1664+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1664+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1664+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1664+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$128+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$128+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$129+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$129+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$129+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$129+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,352,$pongEnemyRec$byval_copy257,$1060,2,$$byval_copy262);
      HEAPF32[$130>>2] = 720.0;
      $1061 = (($130) + 4|0);
      HEAPF32[$1061>>2] = 400.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[808+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[808+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[808+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[808+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[808+16>>2]|0;
      $1062 = (_GetFontBaseSize($$byval_copy262)|0);
      $1063 = $1062 << 1;
      HEAP8[$131>>0] = -66;
      $1064 = (($131) + 1|0);
      HEAP8[$1064>>0] = 33;
      $1065 = (($131) + 2|0);
      HEAP8[$1065>>0] = 55;
      $1066 = (($131) + 3|0);
      HEAP8[$1066>>0] = -1;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[808+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[808+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[808+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[808+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[808+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$130+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$130+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$131+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$131+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$131+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$131+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,3048,$pongEnemyRec$byval_copy257,$1063,2,$$byval_copy262);
      HEAPF32[$132>>2] = 679.0;
      $1067 = (($132) + 4|0);
      HEAPF32[$1067>>2] = 450.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[864+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[864+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[864+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[864+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[864+16>>2]|0;
      $1068 = (_GetFontBaseSize($$byval_copy262)|0);
      $1069 = $1068 << 1;
      HEAP8[$133>>0] = -1;
      $1070 = (($133) + 1|0);
      HEAP8[$1070>>0] = -95;
      $1071 = (($133) + 2|0);
      HEAP8[$1071>>0] = 0;
      $1072 = (($133) + 3|0);
      HEAP8[$1072>>0] = -1;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[864+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[864+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[864+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[864+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[864+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$132+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$132+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$133+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$133+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$133+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$133+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,3080,$pongEnemyRec$byval_copy257,$1069,4,$$byval_copy262);
      HEAPF32[$134>>2] = 740.0;
      $1073 = (($134) + 4|0);
      HEAPF32[$1073>>2] = 500.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[920+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[920+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[920+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[920+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[920+16>>2]|0;
      $1074 = (_GetFontBaseSize($$byval_copy262)|0);
      $1075 = $1074 << 1;
      HEAP8[$135>>0] = 0;
      $1076 = (($135) + 1|0);
      HEAP8[$1076>>0] = 117;
      $1077 = (($135) + 2|0);
      HEAP8[$1077>>0] = 44;
      $1078 = (($135) + 3|0);
      HEAP8[$1078>>0] = -1;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[920+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[920+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[920+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[920+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[920+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$134+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$134+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$135+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$135+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$135+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$135+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,3112,$pongEnemyRec$byval_copy257,$1075,4,$$byval_copy262);
      HEAPF32[$136>>2] = 710.0;
      $1079 = (($136) + 4|0);
      HEAPF32[$1079>>2] = 550.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[976+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[976+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[976+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[976+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[976+16>>2]|0;
      $1080 = (_GetFontBaseSize($$byval_copy262)|0);
      $1081 = $1080 << 1;
      HEAP8[$137>>0] = 0;
      $1082 = (($137) + 1|0);
      HEAP8[$1082>>0] = 82;
      $1083 = (($137) + 2|0);
      HEAP8[$1083>>0] = -84;
      $1084 = (($137) + 3|0);
      HEAP8[$1084>>0] = -1;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[976+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[976+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[976+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[976+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[976+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$136+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$136+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$137+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$137+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$137+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$137+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,3144,$pongEnemyRec$byval_copy257,$1081,4,$$byval_copy262);
      HEAPF32[$138>>2] = 727.0;
      $1085 = (($138) + 4|0);
      HEAPF32[$1085>>2] = 600.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $1086 = (_GetFontBaseSize($$byval_copy262)|0);
      $1087 = $1086 << 1;
      HEAP8[$139>>0] = 112;
      $1088 = (($139) + 1|0);
      HEAP8[$1088>>0] = 31;
      $1089 = (($139) + 2|0);
      HEAP8[$1089>>0] = 126;
      $1090 = (($139) + 3|0);
      HEAP8[$1090>>0] = -1;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$138+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$138+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$139+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$139+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$139+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$139+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,3176,$pongEnemyRec$byval_copy257,$1087,3,$$byval_copy262);
      HEAP8[$140>>0] = -126;
      $1091 = (($140) + 1|0);
      HEAP8[$1091>>0] = -126;
      $1092 = (($140) + 2|0);
      HEAP8[$1092>>0] = -126;
      $1093 = (($140) + 3|0);
      HEAP8[$1093>>0] = -1;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$140+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$140+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$140+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$140+3>>0]|0;
      _DrawText(3200,228,655,10,$$byval_copy262);
      break L241;
      break;
     }
     case 5:  {
      label = 191;
      break L241;
      break;
     }
     case 4:  {
      _GetColor($141,1098355967);
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$141+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$141+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$141+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$141+3>>0]|0;
      _DrawText(2592,48,200,10,$$byval_copy262);
      HEAPF32[$142>>2] = 48.0;
      $1094 = (($142) + 4|0);
      HEAPF32[$1094>>2] = 230.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $1095 = (_GetFontBaseSize($$byval_copy262)|0);
      $1096 = $1095 << 1;
      _GetColor($143,1098355967);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$142+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$142+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$143+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$143+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$143+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$143+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,3272,$pongEnemyRec$byval_copy257,$1096,4,$$byval_copy262);
      HEAPF32[$144>>2] = 48.0;
      $1097 = (($144) + 4|0);
      HEAPF32[$1097>>2] = 260.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $1098 = (_GetFontBaseSize($$byval_copy262)|0);
      $1099 = $1098 << 1;
      _GetColor($145,1098355967);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$144+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$144+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$145+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$145+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$145+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$145+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,3296,$pongEnemyRec$byval_copy257,$1099,4,$$byval_copy262);
      HEAPF32[$146>>2] = 48.0;
      $1100 = (($146) + 4|0);
      HEAPF32[$1100>>2] = 290.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
      $1101 = (_GetFontBaseSize($$byval_copy262)|0);
      $1102 = $1101 << 1;
      _GetColor($147,1098355967);
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$146+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$146+4>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$147+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$147+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$147+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$147+3>>0]|0;
      _DrawTextEx($fontAlagard$byval_copy247,3312,$pongEnemyRec$byval_copy257,$1102,4,$$byval_copy262);
      dest=$$byval_copy262+0|0; src=1744+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      _Begin3dMode($$byval_copy262);
      HEAPF32[$148>>2] = -4.0;
      $1103 = (($148) + 4|0);
      HEAPF32[$1103>>2] = 0.0;
      $1104 = (($148) + 8|0);
      HEAPF32[$1104>>2] = 2.0;
      HEAP8[$149>>0] = -26;
      $1105 = (($149) + 1|0);
      HEAP8[$1105>>0] = 41;
      $1106 = (($149) + 2|0);
      HEAP8[$1106>>0] = 55;
      $1107 = (($149) + 3|0);
      HEAP8[$1107>>0] = -1;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$148+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$148+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[$148+8>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$149+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$149+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$149+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$149+3>>0]|0;
      _DrawCube($pongEnemyRec$byval_copy257,2.0,5.0,2.0,$$byval_copy262);
      HEAPF32[$150>>2] = -4.0;
      $1108 = (($150) + 4|0);
      HEAPF32[$1108>>2] = 0.0;
      $1109 = (($150) + 8|0);
      HEAPF32[$1109>>2] = 2.0;
      HEAP8[$151>>0] = -1;
      $1110 = (($151) + 1|0);
      HEAP8[$1110>>0] = -53;
      $1111 = (($151) + 2|0);
      HEAP8[$1111>>0] = 0;
      $1112 = (($151) + 3|0);
      HEAP8[$1112>>0] = -1;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$150+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$150+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[$150+8>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$151+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$151+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$151+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$151+3>>0]|0;
      _DrawCubeWires($pongEnemyRec$byval_copy257,2.0,5.0,2.0,$$byval_copy262);
      HEAPF32[$152>>2] = -4.0;
      $1113 = (($152) + 4|0);
      HEAPF32[$1113>>2] = 0.0;
      $1114 = (($152) + 8|0);
      HEAPF32[$1114>>2] = -2.0;
      HEAP8[$153>>0] = -66;
      $1115 = (($153) + 1|0);
      HEAP8[$1115>>0] = 33;
      $1116 = (($153) + 2|0);
      HEAP8[$1116>>0] = 55;
      $1117 = (($153) + 3|0);
      HEAP8[$1117>>0] = -1;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$152+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$152+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[$152+8>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$153+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$153+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$153+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$153+3>>0]|0;
      _DrawCubeWires($pongEnemyRec$byval_copy257,3.0,6.0,2.0,$$byval_copy262);
      HEAPF32[$154>>2] = -1.0;
      $1118 = (($154) + 4|0);
      HEAPF32[$1118>>2] = 0.0;
      $1119 = (($154) + 8|0);
      HEAPF32[$1119>>2] = -2.0;
      HEAP8[$155>>0] = 0;
      $1120 = (($155) + 1|0);
      HEAP8[$1120>>0] = -28;
      $1121 = (($155) + 2|0);
      HEAP8[$1121>>0] = 48;
      $1122 = (($155) + 3|0);
      HEAP8[$1122>>0] = -1;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$154+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$154+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[$154+8>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$155+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$155+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$155+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$155+3>>0]|0;
      _DrawSphere($pongEnemyRec$byval_copy257,1.0,$$byval_copy262);
      HEAPF32[$156>>2] = 1.0;
      $1123 = (($156) + 4|0);
      HEAPF32[$1123>>2] = 0.0;
      $1124 = (($156) + 8|0);
      HEAPF32[$1124>>2] = 2.0;
      HEAP8[$157>>0] = 0;
      $1125 = (($157) + 1|0);
      HEAP8[$1125>>0] = -98;
      $1126 = (($157) + 2|0);
      HEAP8[$1126>>0] = 47;
      $1127 = (($157) + 3|0);
      HEAP8[$1127>>0] = -1;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$156+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$156+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[$156+8>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$157+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$157+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$157+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$157+3>>0]|0;
      _DrawSphereWires($pongEnemyRec$byval_copy257,2.0,16,16,$$byval_copy262);
      HEAPF32[$158>>2] = 4.0;
      $1128 = (($158) + 4|0);
      HEAPF32[$1128>>2] = 0.0;
      $1129 = (($158) + 8|0);
      HEAPF32[$1129>>2] = -2.0;
      HEAP8[$159>>0] = 102;
      $1130 = (($159) + 1|0);
      HEAP8[$1130>>0] = -65;
      $1131 = (($159) + 2|0);
      HEAP8[$1131>>0] = -1;
      $1132 = (($159) + 3|0);
      HEAP8[$1132>>0] = -1;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$158+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$158+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[$158+8>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$159+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$159+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$159+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$159+3>>0]|0;
      _DrawCylinder($pongEnemyRec$byval_copy257,1.0,2.0,3.0,4,$$byval_copy262);
      HEAPF32[$160>>2] = 4.0;
      $1133 = (($160) + 4|0);
      HEAPF32[$1133>>2] = 0.0;
      $1134 = (($160) + 8|0);
      HEAPF32[$1134>>2] = -2.0;
      HEAP8[$161>>0] = 0;
      $1135 = (($161) + 1|0);
      HEAP8[$1135>>0] = 82;
      $1136 = (($161) + 2|0);
      HEAP8[$1136>>0] = -84;
      $1137 = (($161) + 3|0);
      HEAP8[$1137>>0] = -1;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$160+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$160+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[$160+8>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$161+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$161+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$161+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$161+3>>0]|0;
      _DrawCylinderWires($pongEnemyRec$byval_copy257,1.0,2.0,3.0,4,$$byval_copy262);
      HEAPF32[$162>>2] = 4.5;
      $1138 = (($162) + 4|0);
      HEAPF32[$1138>>2] = -1.0;
      $1139 = (($162) + 8|0);
      HEAPF32[$1139>>2] = 2.0;
      HEAP8[$163>>0] = 127;
      $1140 = (($163) + 1|0);
      HEAP8[$1140>>0] = 106;
      $1141 = (($163) + 2|0);
      HEAP8[$1141>>0] = 79;
      $1142 = (($163) + 3|0);
      HEAP8[$1142>>0] = -1;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$162+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$162+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[$162+8>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$163+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$163+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$163+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$163+3>>0]|0;
      _DrawCylinderWires($pongEnemyRec$byval_copy257,1.0,1.0,2.0,6,$$byval_copy262);
      HEAPF32[$164>>2] = 1.0;
      $1143 = (($164) + 4|0);
      HEAPF32[$1143>>2] = 0.0;
      $1144 = (($164) + 8|0);
      HEAPF32[$1144>>2] = -4.0;
      HEAP8[$165>>0] = -1;
      $1145 = (($165) + 1|0);
      HEAP8[$1145>>0] = -53;
      $1146 = (($165) + 2|0);
      HEAP8[$1146>>0] = 0;
      $1147 = (($165) + 3|0);
      HEAP8[$1147>>0] = -1;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$164+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$164+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[$164+8>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$165+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$165+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$165+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$165+3>>0]|0;
      _DrawCylinder($pongEnemyRec$byval_copy257,0.0,1.5,3.0,8,$$byval_copy262);
      HEAPF32[$166>>2] = 1.0;
      $1148 = (($166) + 4|0);
      HEAPF32[$1148>>2] = 0.0;
      $1149 = (($166) + 8|0);
      HEAPF32[$1149>>2] = -4.0;
      HEAP8[$167>>0] = -1;
      $1150 = (($167) + 1|0);
      HEAP8[$1150>>0] = 109;
      $1151 = (($167) + 2|0);
      HEAP8[$1151>>0] = -62;
      $1152 = (($167) + 3|0);
      HEAP8[$1152>>0] = -1;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$166+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$166+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[$166+8>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$167+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$167+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$167+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$167+3>>0]|0;
      _DrawCylinderWires($pongEnemyRec$byval_copy257,0.0,1.5,3.0,8,$$byval_copy262);
      HEAPF32[$168>>2] = 8.0;
      $1153 = (($168) + 4|0);
      HEAPF32[$1153>>2] = 0.0;
      $1154 = (($168) + 8|0);
      HEAPF32[$1154>>2] = 2.0;
      HEAPF32[$169>>2] = 0.0;
      $1155 = (($169) + 4|0);
      $1156 = HEAP32[768>>2]|0;
      $1157 = (+($1156|0));
      $1158 = $1157 * 0.5;
      HEAPF32[$1155>>2] = $1158;
      $1159 = (($169) + 8|0);
      HEAPF32[$1159>>2] = 0.0;
      HEAPF32[$170>>2] = 0.100000001490116119385;
      $1160 = (($170) + 4|0);
      HEAPF32[$1160>>2] = 0.100000001490116119385;
      $1161 = (($170) + 8|0);
      HEAPF32[$1161>>2] = 0.100000001490116119385;
      HEAP32[$171>>2] = -1;
      dest=$cat$byval_copy+0|0; src=1824+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      ;HEAP32[$$byval_copy204+0>>2]=HEAP32[$168+0>>2]|0;HEAP32[$$byval_copy204+4>>2]=HEAP32[$168+4>>2]|0;HEAP32[$$byval_copy204+8>>2]=HEAP32[$168+8>>2]|0;
      ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[$169+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[$169+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[$169+8>>2]|0;
      ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$170+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$170+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[$170+8>>2]|0;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$171+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$171+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$171+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$171+3>>0]|0;
      _DrawModelEx($cat$byval_copy,$$byval_copy204,$fontAlagard$byval_copy247,$pongEnemyRec$byval_copy257,$$byval_copy262);
      HEAPF32[$172>>2] = 8.0;
      $1162 = (($172) + 4|0);
      HEAPF32[$1162>>2] = 0.0;
      $1163 = (($172) + 8|0);
      HEAPF32[$1163>>2] = 2.0;
      ;HEAP32[$$byval_copy262+0>>2]=HEAP32[$172+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[$172+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[$172+8>>2]|0;
      _DrawGizmo($$byval_copy262);
      _DrawGrid(10,1.0);
      _End3dMode();
      _DrawFPS(900,220);
      break L241;
      break;
     }
     default: {
      break L241;
     }
     }
    }
   } while(0);
   if ((label|0) == 191) {
    _GetColor($173,-1938474497);
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$173+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$173+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$173+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$173+3>>0]|0;
    _DrawText(2592,48,200,10,$$byval_copy262);
    HEAPF32[$174>>2] = 48.0;
    $1164 = (($174) + 4|0);
    HEAPF32[$1164>>2] = 230.0;
    ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
    $1165 = (_GetFontBaseSize($$byval_copy262)|0);
    $1166 = $1165 << 1;
    _GetColor($175,-1938474497);
    ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
    ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$174+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$174+4>>2]|0;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$175+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$175+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$175+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$175+3>>0]|0;
    _DrawTextEx($fontAlagard$byval_copy247,3328,$pongEnemyRec$byval_copy257,$1166,4,$$byval_copy262);
    HEAPF32[$176>>2] = 48.0;
    $1167 = (($176) + 4|0);
    HEAPF32[$1167>>2] = 260.0;
    ;HEAP32[$$byval_copy262+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[1032+16>>2]|0;
    $1168 = (_GetFontBaseSize($$byval_copy262)|0);
    $1169 = $1168 << 1;
    _GetColor($177,-1938474497);
    ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[1032+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[1032+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[1032+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[1032+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[1032+16>>2]|0;
    ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$176+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$176+4>>2]|0;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$177+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$177+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$177+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$177+3>>0]|0;
    _DrawTextEx($fontAlagard$byval_copy247,3352,$pongEnemyRec$byval_copy257,$1169,4,$$byval_copy262);
    HEAP8[$178>>0] = -126;
    $1170 = (($178) + 1|0);
    HEAP8[$1170>>0] = -126;
    $1171 = (($178) + 2|0);
    HEAP8[$1171>>0] = -126;
    $1172 = (($178) + 3|0);
    HEAP8[$1172>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$178+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$178+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$178+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$178+3>>0]|0;
    _DrawText(3376,135,350,20,$$byval_copy262);
    HEAP8[$179>>0] = -56;
    $1173 = (($179) + 1|0);
    HEAP8[$1173>>0] = -56;
    $1174 = (($179) + 2|0);
    HEAP8[$1174>>0] = -56;
    $1175 = (($179) + 3|0);
    HEAP8[$1175>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$179+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$179+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$179+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$179+3>>0]|0;
    _DrawRectangle(150,390,400,12,$$byval_copy262);
    $1176 = +HEAPF32[720>>2];
    $1177 = (~~(($1176)));
    HEAP8[$180>>0] = -66;
    $1178 = (($180) + 1|0);
    HEAP8[$1178>>0] = 33;
    $1179 = (($180) + 2|0);
    HEAP8[$1179>>0] = 55;
    $1180 = (($180) + 3|0);
    HEAP8[$1180>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$180+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$180+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$180+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$180+3>>0]|0;
    _DrawRectangle(150,390,$1177,12,$$byval_copy262);
    $1181 = (_MusicIsPlaying()|0);
    $1182 = ($1181|0)==(0);
    if (!($1182)) {
     HEAP8[$181>>0] = -126;
     $1183 = (($181) + 1|0);
     HEAP8[$1183>>0] = -126;
     $1184 = (($181) + 2|0);
     HEAP8[$1184>>0] = -126;
     $1185 = (($181) + 3|0);
     HEAP8[$1185>>0] = -1;
     ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$181+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$181+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$181+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$181+3>>0]|0;
     _DrawText(3416,165,425,20,$$byval_copy262);
     $i5$040 = 0;
     while(1) {
      $1186 = (2296 + ($i5$040<<2)|0);
      $1187 = HEAP32[$1186>>2]|0;
      $1188 = ($1187|0)==(0);
      if (!($1188)) {
       $1189 = (1976 + ($i5$040<<3)|0);
       $1190 = (2168 + ($i5$040<<2)|0);
       $1191 = HEAP32[$1190>>2]|0;
       $1192 = (+($1191|0));
       $1193 = (2104 + ($i5$040<<2)|0);
       $1194 = (2232 + ($i5$040<<2)|0);
       $1195 = +HEAPF32[$1194>>2];
       ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$1193+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$1193+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$1193+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$1193+3>>0]|0;
       _Fade($182,$$byval_copy262,$1195);
       ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$1189+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$1189+4>>2]|0;
       ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$182+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$182+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$182+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$182+3>>0]|0;
       _DrawPoly($pongEnemyRec$byval_copy257,18,$1192,0.0,$$byval_copy262);
      }
      $1196 = (($i5$040) + 1)|0;
      $exitcond = ($1196|0)==(16);
      if ($exitcond) {
       break;
      } else {
       $i5$040 = $1196;
      }
     }
    }
    HEAP8[$183>>0] = -121;
    $1197 = (($183) + 1|0);
    HEAP8[$1197>>0] = 60;
    $1198 = (($183) + 2|0);
    HEAP8[$1198>>0] = -66;
    $1199 = (($183) + 3|0);
    HEAP8[$1199>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$183+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$183+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$183+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$183+3>>0]|0;
    _DrawText(3448,200,540,20,$$byval_copy262);
    $1200 = HEAP32[768>>2]|0;
    $1201 = (($1200|0) / 30)&-1;
    $1202 = $1201 & 1;
    $1203 = ($1202|0)==(0);
    if (!($1203)) {
     HEAP8[$184>>0] = -126;
     $1204 = (($184) + 1|0);
     HEAP8[$1204>>0] = -126;
     $1205 = (($184) + 2|0);
     HEAP8[$1205>>0] = -126;
     $1206 = (($184) + 3|0);
     HEAP8[$1206>>0] = -1;
     ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$184+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$184+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$184+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$184+3>>0]|0;
     _DrawText(2488,930,650,20,$$byval_copy262);
    }
   }
   _GetColor($185,-1987540737);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$185+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$185+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$185+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$185+3>>0]|0;
   _DrawRectangle(198,90,150,70,$$byval_copy262);
   _GetColor($186,-505290241);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$186+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$186+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$186+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$186+3>>0]|0;
   _DrawRectangle(206,98,134,54,$$byval_copy262);
   _GetColor($187,1549425407);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$187+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$187+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$187+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$187+3>>0]|0;
   _DrawText(3480,244,118,20,$$byval_copy262);
   _GetColor($188,-429496577);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$188+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$188+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$188+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$188+3>>0]|0;
   _DrawRectangle(373,90,150,70,$$byval_copy262);
   _GetColor($189,-254355713);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$189+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$189+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$189+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$189+3>>0]|0;
   _DrawRectangle(381,98,134,54,$$byval_copy262);
   _GetColor($190,-849913857);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$190+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$190+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$190+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$190+3>>0]|0;
   _DrawText(3488,409,118,20,$$byval_copy262);
   _GetColor($191,1973448191);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$191+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$191+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$191+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$191+3>>0]|0;
   _DrawRectangle(548,90,150,70,$$byval_copy262);
   _GetColor($192,-924139521);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$192+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$192+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$192+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$192+3>>0]|0;
   _DrawRectangle(556,98,134,54,$$byval_copy262);
   _GetColor($193,1619090175);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$193+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$193+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$193+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$193+3>>0]|0;
   _DrawText(3496,565,118,20,$$byval_copy262);
   _GetColor($194,1387435775);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$194+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$194+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$194+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$194+3>>0]|0;
   _DrawRectangle(723,90,150,70,$$byval_copy262);
   _GetColor($195,-1091510785);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$195+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$195+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$195+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$195+3>>0]|0;
   _DrawRectangle(731,98,134,54,$$byval_copy262);
   _GetColor($196,930571519);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$196+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$196+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$196+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$196+3>>0]|0;
   _DrawText(3512,769,118,20,$$byval_copy262);
   _GetColor($197,1570553343);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$197+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$197+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$197+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$197+3>>0]|0;
   _DrawRectangle(898,90,150,70,$$byval_copy262);
   _GetColor($198,-1092818689);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$198+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$198+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$198+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$198+3>>0]|0;
   _DrawRectangle(906,98,134,54,$$byval_copy262);
   _GetColor($199,1098355967);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$199+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$199+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$199+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$199+3>>0]|0;
   _DrawText(3520,934,118,20,$$byval_copy262);
   _GetColor($200,-743352321);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$200+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$200+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$200+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$200+3>>0]|0;
   _DrawRectangle(1073,90,150,70,$$byval_copy262);
   _GetColor($201,-337793281);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$201+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$201+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$201+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$201+3>>0]|0;
   _DrawRectangle(1081,98,134,54,$$byval_copy262);
   _GetColor($202,-1938474497);
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$202+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$202+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$202+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$202+3>>0]|0;
   _DrawText(3528,1117,118,20,$$byval_copy262);
   label = 206;
   break;
  }
  case 3:  {
   $1207 = HEAP32[8>>2]|0;
   $1208 = (($1207|0) / 2)&-1;
   $1209 = (+($1208|0));
   ;HEAP32[$$byval_copy262+0>>2]=HEAP32[808+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[808+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[808+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[808+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[808+16>>2]|0;
   $1210 = (_GetFontBaseSize($$byval_copy262)|0);
   $1211 = $1210 << 2;
   ;HEAP32[$$byval_copy262+0>>2]=HEAP32[808+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[808+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[808+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[808+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[808+16>>2]|0;
   _MeasureTextEx($204,$$byval_copy262,3536,$1211,4);
   $1212 = +HEAPF32[$204>>2];
   $1213 = $1212 * 0.5;
   $1214 = $1209 - $1213;
   HEAPF32[$203>>2] = $1214;
   $1215 = (($203) + 4|0);
   HEAPF32[$1215>>2] = 80.0;
   ;HEAP32[$$byval_copy262+0>>2]=HEAP32[808+0>>2]|0;HEAP32[$$byval_copy262+4>>2]=HEAP32[808+4>>2]|0;HEAP32[$$byval_copy262+8>>2]=HEAP32[808+8>>2]|0;HEAP32[$$byval_copy262+12>>2]=HEAP32[808+12>>2]|0;HEAP32[$$byval_copy262+16>>2]=HEAP32[808+16>>2]|0;
   $1216 = (_GetFontBaseSize($$byval_copy262)|0);
   $1217 = $1216 << 2;
   HEAP8[$205>>0] = -66;
   $1218 = (($205) + 1|0);
   HEAP8[$1218>>0] = 33;
   $1219 = (($205) + 2|0);
   HEAP8[$1219>>0] = 55;
   $1220 = (($205) + 3|0);
   HEAP8[$1220>>0] = -1;
   ;HEAP32[$fontAlagard$byval_copy247+0>>2]=HEAP32[808+0>>2]|0;HEAP32[$fontAlagard$byval_copy247+4>>2]=HEAP32[808+4>>2]|0;HEAP32[$fontAlagard$byval_copy247+8>>2]=HEAP32[808+8>>2]|0;HEAP32[$fontAlagard$byval_copy247+12>>2]=HEAP32[808+12>>2]|0;HEAP32[$fontAlagard$byval_copy247+16>>2]=HEAP32[808+16>>2]|0;
   ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[$203+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[$203+4>>2]|0;
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$205+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$205+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$205+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$205+3>>0]|0;
   _DrawTextEx($fontAlagard$byval_copy247,3536,$pongEnemyRec$byval_copy257,$1217,4,$$byval_copy262);
   $1221 = HEAP32[1136>>2]|0;
   $1222 = HEAP32[1144>>2]|0;
   $1223 = (($1222) + -40)|0;
   HEAP32[$206>>2] = -1;
   ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[2360+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[2360+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[2360+8>>2]|0;
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$206+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$206+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$206+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$206+3>>0]|0;
   _DrawTexture($pongEnemyRec$byval_copy257,$1221,$1223,$$byval_copy262);
   $1224 = HEAP32[8>>2]|0;
   $1225 = (($1224|0) / 2)&-1;
   $1226 = (_MeasureText(128,40)|0);
   $1227 = (($1226|0) / 2)&-1;
   $1228 = (($1225) - ($1227))|0;
   HEAP8[$207>>0] = 80;
   $1229 = (($207) + 1|0);
   HEAP8[$1229>>0] = 80;
   $1230 = (($207) + 2|0);
   HEAP8[$1230>>0] = 80;
   $1231 = (($207) + 3|0);
   HEAP8[$1231>>0] = -1;
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$207+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$207+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$207+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$207+3>>0]|0;
   _DrawText(128,$1228,470,40,$$byval_copy262);
   $1232 = HEAP32[768>>2]|0;
   $1233 = ($1232|0)>(60);
   if ($1233) {
    $1234 = HEAP32[8>>2]|0;
    $1235 = (($1234|0) / 2)&-1;
    $1236 = (_MeasureText(88,30)|0);
    $1237 = (($1236|0) / 2)&-1;
    $1238 = (($1235) - ($1237))|0;
    HEAP8[$208>>0] = -126;
    $1239 = (($208) + 1|0);
    HEAP8[$1239>>0] = -126;
    $1240 = (($208) + 2|0);
    HEAP8[$1240>>0] = -126;
    $1241 = (($208) + 3|0);
    HEAP8[$1241>>0] = -1;
    ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$208+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$208+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$208+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$208+3>>0]|0;
    _DrawText(88,$1238,550,30,$$byval_copy262);
    $$pr34 = HEAP32[768>>2]|0;
    $1242 = ($$pr34|0)>(120);
    if ($1242) {
     $1243 = (($$pr34|0) / 30)&-1;
     $1244 = $1243 & 1;
     $1245 = ($1244|0)==(0);
     if ($1245) {
      label = 206;
     } else {
      $1246 = HEAP32[8>>2]|0;
      $1247 = (($1246|0) / 2)&-1;
      $1248 = (_MeasureText(2488,20)|0);
      $1249 = (($1248|0) / 2)&-1;
      $1250 = (($1247) - ($1249))|0;
      HEAP8[$209>>0] = -56;
      $1251 = (($209) + 1|0);
      HEAP8[$1251>>0] = -56;
      $1252 = (($209) + 2|0);
      HEAP8[$1252>>0] = -56;
      $1253 = (($209) + 3|0);
      HEAP8[$1253>>0] = -1;
      ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$209+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$209+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$209+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$209+3>>0]|0;
      _DrawText(2488,$1250,640,20,$$byval_copy262);
      label = 206;
     }
    } else {
     label = 206;
    }
   } else {
    label = 206;
   }
   break;
  }
  case 4:  {
   HEAP8[$210>>0] = -56;
   $1254 = (($210) + 1|0);
   HEAP8[$1254>>0] = -56;
   $1255 = (($210) + 2|0);
   HEAP8[$1255>>0] = -56;
   $1256 = (($210) + 3|0);
   HEAP8[$1256>>0] = -1;
   ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[1088+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[1088+4>>2]|0;
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$210+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$210+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$210+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$210+3>>0]|0;
   _DrawCircleV($pongEnemyRec$byval_copy257,10.0,$$byval_copy262);
   HEAP8[$211>>0] = -126;
   $1257 = (($211) + 1|0);
   HEAP8[$1257>>0] = -126;
   $1258 = (($211) + 2|0);
   HEAP8[$1258>>0] = -126;
   $1259 = (($211) + 3|0);
   HEAP8[$1259>>0] = -1;
   ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[1104+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[1104+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[1104+8>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+12>>2]=HEAP32[1104+12>>2]|0;
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$211+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$211+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$211+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$211+3>>0]|0;
   _DrawRectangleRec($pongEnemyRec$byval_copy257,$$byval_copy262);
   HEAP8[$212>>0] = -126;
   $1260 = (($212) + 1|0);
   HEAP8[$1260>>0] = -126;
   $1261 = (($212) + 2|0);
   HEAP8[$1261>>0] = -126;
   $1262 = (($212) + 3|0);
   HEAP8[$1262>>0] = -1;
   ;HEAP32[$pongEnemyRec$byval_copy257+0>>2]=HEAP32[1120+0>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+4>>2]=HEAP32[1120+4>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+8>>2]=HEAP32[1120+8>>2]|0;HEAP32[$pongEnemyRec$byval_copy257+12>>2]=HEAP32[1120+12>>2]|0;
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$212+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$212+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$212+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$212+3>>0]|0;
   _DrawRectangleRec($pongEnemyRec$byval_copy257,$$byval_copy262);
   $1263 = HEAP32[448>>2]|0;
   HEAP32[$$byval_copy262>>2] = $1263;
   $1264 = (_FormatText(3568,$$byval_copy262)|0);
   HEAP8[$213>>0] = -56;
   $1265 = (($213) + 1|0);
   HEAP8[$1265>>0] = -56;
   $1266 = (($213) + 2|0);
   HEAP8[$1266>>0] = -56;
   $1267 = (($213) + 3|0);
   HEAP8[$1267>>0] = -1;
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$213+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$213+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$213+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$213+3>>0]|0;
   _DrawText($1264,150,10,80,$$byval_copy262);
   $1268 = HEAP32[456>>2]|0;
   HEAP32[$$byval_copy262>>2] = $1268;
   $1269 = (_FormatText(3568,$$byval_copy262)|0);
   $1270 = HEAP32[8>>2]|0;
   $1271 = (_MeasureText(3576,80)|0);
   $1272 = (($1270) + -150)|0;
   $1273 = (($1272) - ($1271))|0;
   HEAP8[$214>>0] = -56;
   $1274 = (($214) + 1|0);
   HEAP8[$1274>>0] = -56;
   $1275 = (($214) + 2|0);
   HEAP8[$1275>>0] = -56;
   $1276 = (($214) + 3|0);
   HEAP8[$1276>>0] = -1;
   ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$214+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$214+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$214+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$214+3>>0]|0;
   _DrawText($1269,$1273,10,80,$$byval_copy262);
   $1277 = HEAP32[480>>2]|0;
   $1278 = ($1277|0)==(0);
   if ($1278) {
    label = 206;
   } else {
    $1279 = HEAP32[768>>2]|0;
    $1280 = (($1279|0) / 30)&-1;
    $1281 = $1280 & 1;
    $1282 = ($1281|0)==(0);
    if ($1282) {
     label = 206;
    } else {
     $1283 = HEAP32[8>>2]|0;
     $1284 = (($1283|0) / 2)&-1;
     $1285 = (($1284) + -100)|0;
     HEAP8[$215>>0] = -66;
     $1286 = (($215) + 1|0);
     HEAP8[$1286>>0] = 33;
     $1287 = (($215) + 2|0);
     HEAP8[$1287>>0] = 55;
     $1288 = (($215) + 3|0);
     HEAP8[$1288>>0] = -1;
     ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$215+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$215+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$215+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$215+3>>0]|0;
     _DrawText(3584,$1285,40,20,$$byval_copy262);
     label = 206;
    }
   }
   break;
  }
  default: {
   label = 207;
  }
  }
 } while(0);
 if ((label|0) == 206) {
  $$pr37 = HEAP32[424>>2]|0;
  $1289 = ($$pr37|0)==(0);
  if (!($1289)) {
   label = 207;
  }
 }
 if ((label|0) == 207) {
  $1290 = HEAP32[16>>2]|0;
  $1291 = (($1290) + -10)|0;
  $1292 = HEAP32[416>>2]|0;
  $1293 = (+($1292|0));
  $1294 = HEAP32[408>>2]|0;
  $1295 = (+($1294|0));
  $1296 = $1293 / $1295;
  $1297 = HEAP32[8>>2]|0;
  $1298 = (+($1297|0));
  $1299 = $1296 * $1298;
  $1300 = (~~(($1299)));
  HEAP8[$216>>0] = -56;
  $1301 = (($216) + 1|0);
  HEAP8[$1301>>0] = -56;
  $1302 = (($216) + 2|0);
  HEAP8[$1302>>0] = -56;
  $1303 = (($216) + 3|0);
  HEAP8[$1303>>0] = -1;
  ;HEAP8[$$byval_copy262+0>>0]=HEAP8[$216+0>>0]|0;HEAP8[$$byval_copy262+1>>0]=HEAP8[$216+1>>0]|0;HEAP8[$$byval_copy262+2>>0]=HEAP8[$216+2>>0]|0;HEAP8[$$byval_copy262+3>>0]=HEAP8[$216+3>>0]|0;
  _DrawRectangle(0,$1291,$1300,10,$$byval_copy262);
 }
 $1304 = HEAP32[736>>2]|0;
 $1305 = ($1304|0)==(0);
 if ($1305) {
  _EndDrawing();
  STACKTOP = sp;return;
 }
 _DrawTransition();
 _EndDrawing();
 STACKTOP = sp;return;
}
function _TransitionToScreen($screen) {
 $screen = $screen|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[736>>2] = 1;
 $0 = HEAP32[424>>2]|0;
 HEAP32[752>>2] = $0;
 HEAP32[760>>2] = $screen;
 STACKTOP = sp;return;
}
function _UpdateTransition() {
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[744>>2]|0;
 $1 = ($0|0)==(0);
 $2 = +HEAPF32[728>>2];
 if ($1) {
  $3 = $2 + 0.0199999995529651641846;
  HEAPF32[728>>2] = $3;
  $4 = !($3 >= 1.0);
  if ($4) {
   STACKTOP = sp;return;
  }
  HEAPF32[728>>2] = 1.0;
  $5 = HEAP32[760>>2]|0;
  HEAP32[424>>2] = $5;
  HEAP32[744>>2] = 1;
  HEAP32[768>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $6 = $2 + -0.0199999995529651641846;
  HEAPF32[728>>2] = $6;
  $7 = !($6 <= 0.0);
  if ($7) {
   STACKTOP = sp;return;
  }
  HEAPF32[728>>2] = 0.0;
  HEAP32[744>>2] = 0;
  HEAP32[736>>2] = 0;
  HEAP32[752>>2] = -1;
  HEAP32[760>>2] = -1;
  STACKTOP = sp;return;
 }
}
function _DrawTransition() {
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 8|0;
 $0 = sp;
 $1 = sp + 4|0;
 $2 = (_GetScreenWidth()|0);
 $3 = (_GetScreenHeight()|0);
 HEAP8[$1>>0] = -11;
 $4 = (($1) + 1|0);
 HEAP8[$4>>0] = -11;
 $5 = (($1) + 2|0);
 HEAP8[$5>>0] = -11;
 $6 = (($1) + 3|0);
 HEAP8[$6>>0] = -1;
 $7 = +HEAPF32[728>>2];
 ;HEAP8[$$byval_copy1+0>>0]=HEAP8[$1+0>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$1+3>>0]|0;
 _Fade($0,$$byval_copy1,$7);
 ;HEAP8[$$byval_copy1+0>>0]=HEAP8[$0+0>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawRectangle(0,0,$2,$3,$$byval_copy1);
 STACKTOP = sp;return;
}
function _InitWindow($width,$height,$title) {
 $width = $width|0;
 $height = $height|0;
 $title = $title|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[3600>>2] = $title;
 _InitDisplay($width,$height);
 _InitGraphics();
 _LoadDefaultFont();
 _InitTimer();
 $0 = HEAP32[3608>>2]|0;
 $1 = (($0|0) / 2)&-1;
 $2 = (+($1|0));
 HEAPF32[3616>>2] = $2;
 $3 = HEAP32[3624>>2]|0;
 $4 = (($3|0) / 2)&-1;
 $5 = (+($4|0));
 HEAPF32[((3616 + 4|0))>>2] = $5;
 $6 = HEAP32[3632>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 _SetTargetFPS(60);
 _LogoAnimation();
 STACKTOP = sp;return;
}
function _InitDisplay($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer12 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0;
 var $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp;
 $0 = sp + 8|0;
 HEAP32[3608>>2] = $width;
 HEAP32[3624>>2] = $height;
 _MatrixIdentity($0);
 dest=3720+0|0; src=$0+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 (_glfwSetErrorCallback((2|0))|0);
 $1 = (_glfwInit()|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _TraceLog(1,4944,$vararg_buffer12);
 }
 $3 = HEAP32[3608>>2]|0;
 HEAP32[4976>>2] = $3;
 $4 = HEAP32[3624>>2]|0;
 HEAP32[4984>>2] = $4;
 _glfwDefaultWindowHints();
 _glfwWindowHint(131075,0);
 $5 = (_rlGetVersion()|0);
 $6 = ($5|0)==(2);
 if ($6) {
  _glfwWindowHint(139266,3);
  _glfwWindowHint(139267,3);
  _glfwWindowHint(139272,204801);
  _glfwWindowHint(139270,0);
 }
 $7 = HEAP32[3856>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $16 = HEAP32[3608>>2]|0;
  $17 = HEAP32[3624>>2]|0;
  $18 = HEAP32[3600>>2]|0;
  $19 = (_glfwCreateWindow(($16|0),($17|0),($18|0),(0|0),(0|0))|0);
  HEAP32[3640>>2] = $19;
  $20 = HEAP32[3608>>2]|0;
  HEAP32[4928>>2] = $20;
  $21 = HEAP32[3624>>2]|0;
  HEAP32[4936>>2] = $21;
  $23 = $19;
 } else {
  $9 = HEAP32[4976>>2]|0;
  $10 = HEAP32[4984>>2]|0;
  _SetupFramebufferSize($9,$10);
  $11 = HEAP32[4928>>2]|0;
  $12 = HEAP32[4936>>2]|0;
  $13 = HEAP32[3600>>2]|0;
  $14 = (_glfwGetPrimaryMonitor()|0);
  $15 = (_glfwCreateWindow(($11|0),($12|0),($13|0),($14|0),(0|0))|0);
  HEAP32[3640>>2] = $15;
  $23 = $15;
 }
 $22 = ($23|0)==(0|0);
 if ($22) {
  _glfwTerminate();
  _TraceLog(1,4992,$vararg_buffer12);
 } else {
  _TraceLog(0,5032,$vararg_buffer12);
  $24 = HEAP32[4928>>2]|0;
  $25 = HEAP32[4936>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $24;
  $vararg_ptr7 = (($vararg_buffer12) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $25;
  _TraceLog(0,5072,$vararg_buffer12);
  $26 = HEAP32[3608>>2]|0;
  $27 = HEAP32[3624>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $26;
  $vararg_ptr11 = (($vararg_buffer12) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $27;
  _TraceLog(0,5096,$vararg_buffer12);
  $28 = HEAP32[4912>>2]|0;
  $29 = HEAP32[4920>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $28;
  $vararg_ptr15 = (($vararg_buffer12) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $29;
  _TraceLog(0,5120,$vararg_buffer12);
 }
 $30 = HEAP32[3640>>2]|0;
 (_glfwSetWindowSizeCallback(($30|0),(1|0))|0);
 $31 = HEAP32[3640>>2]|0;
 (_glfwSetCursorEnterCallback(($31|0),(3|0))|0);
 $32 = HEAP32[3640>>2]|0;
 (_glfwSetKeyCallback(($32|0),(1|0))|0);
 $33 = HEAP32[3640>>2]|0;
 (_glfwSetMouseButtonCallback(($33|0),(1|0))|0);
 $34 = HEAP32[3640>>2]|0;
 (_glfwSetCharCallback(($34|0),(4|0))|0);
 $35 = HEAP32[3640>>2]|0;
 (_glfwSetScrollCallback(($35|0),(1|0))|0);
 $36 = HEAP32[3640>>2]|0;
 _glfwMakeContextCurrent(($36|0));
 STACKTOP = sp;return;
}
function _InitGraphics() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 _rlglInit();
 $1 = HEAP32[4912>>2]|0;
 $2 = HEAP32[4920>>2]|0;
 $3 = HEAP32[4928>>2]|0;
 $4 = HEAP32[4936>>2]|0;
 _rlglInitGraphics($1,$2,$3,$4);
 HEAP8[$0>>0] = -11;
 $5 = (($0) + 1|0);
 HEAP8[$5>>0] = -11;
 $6 = (($0) + 2|0);
 HEAP8[$6>>0] = -11;
 $7 = (($0) + 3|0);
 HEAP8[$7>>0] = -1;
 ;HEAP8[$$byval_copy+0>>0]=HEAP8[$0+0>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$0+3>>0]|0;
 _ClearBackground($$byval_copy);
 STACKTOP = sp;return;
}
function _InitTimer() {
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_time((0|0))|0);
 _srand($0);
 $1 = (+_GetTime());
 HEAPF64[3704>>3] = $1;
 STACKTOP = sp;return;
}
function _SetTargetFPS($fps) {
 $fps = $fps|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (+($fps|0));
 $1 = 1.0 / $0;
 $2 = $1;
 HEAPF64[3800>>3] = $2;
 $3 = $1 * 1000.0;
 $4 = $3;
 HEAPF64[tempDoublePtr>>3]=$4;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _TraceLog(0,3808,$vararg_buffer);
 STACKTOP = sp;return;
}
function _LogoAnimation() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[3632>>2] = 0;
 STACKTOP = sp;return;
}
function _CloseWindow() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _UnloadDefaultFont();
 _rlglClose();
 $0 = HEAP32[3640>>2]|0;
 _glfwDestroyWindow(($0|0));
 _glfwTerminate();
 _TraceLog(0,3648,$vararg_buffer);
 STACKTOP = sp;return;
}
function _GetScreenWidth() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3608>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _GetScreenHeight() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3624>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _ClearBackground($color) {
 $color = $color|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$color>>0]|0;
 $1 = (($color) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (($color) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($color) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 _rlClearColor($0,$2,$4,$6);
 STACKTOP = sp;return;
}
function _BeginDrawing() {
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0, $downscaleView$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $downscaleView$byval_copy = sp;
 $0 = (+_GetTime());
 HEAPF64[3696>>3] = $0;
 $1 = +HEAPF64[3704>>3];
 $2 = $0 - $1;
 HEAPF64[3712>>3] = $2;
 HEAPF64[3704>>3] = $0;
 _rlClearScreenBuffers();
 _rlLoadIdentity();
 dest=$downscaleView$byval_copy+0|0; src=3720+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $3 = (_GetMatrixVector($downscaleView$byval_copy)|0);
 _rlMultMatrixf($3);
 STACKTOP = sp;return;
}
function _GetTime() {
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_glfwGetTime());
 STACKTOP = sp;return (+$0);
}
function _EndDrawing() {
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlglDraw();
 _SwapBuffers();
 _PollInputEvents();
 _UpdateMusicStream();
 $0 = (+_GetTime());
 HEAPF64[3696>>3] = $0;
 $1 = +HEAPF64[3704>>3];
 $2 = $0 - $1;
 HEAPF64[3784>>3] = $2;
 HEAPF64[3704>>3] = $0;
 $3 = +HEAPF64[3712>>3];
 $4 = $3 + $2;
 HEAPF64[3792>>3] = $4;
 $5 = +HEAPF64[3800>>3];
 $6 = $4 < $5;
 if (!($6)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $7 = (+_GetTime());
  HEAPF64[3696>>3] = $7;
  $8 = +HEAPF64[3704>>3];
  $9 = $7 - $8;
  HEAPF64[3704>>3] = $7;
  $10 = +HEAPF64[3792>>3];
  $11 = $10 + $9;
  HEAPF64[3792>>3] = $11;
  $12 = +HEAPF64[3800>>3];
  $13 = $11 < $12;
  if (!($13)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _SwapBuffers() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3640>>2]|0;
 _glfwSwapBuffers(($0|0));
 STACKTOP = sp;return;
}
function _PollInputEvents() {
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $mouseX = 0, $mouseY = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mouseX = sp + 8|0;
 $mouseY = sp;
 $0 = HEAP32[3640>>2]|0;
 _glfwGetCursorPos(($0|0),($mouseX|0),($mouseY|0));
 $1 = +HEAPF64[$mouseX>>3];
 $2 = $1;
 HEAPF32[3616>>2] = $2;
 $3 = +HEAPF64[$mouseY>>3];
 $4 = $3;
 HEAPF32[((3616 + 4|0))>>2] = $4;
 HEAP32[3688>>2] = -1;
 _memcpy((4376|0),(3864|0),512)|0;
 ;HEAP8[4896+0>>0]=HEAP8[4888+0>>0]|0;HEAP8[4896+1>>0]=HEAP8[4888+1>>0]|0;HEAP8[4896+2>>0]=HEAP8[4888+2>>0]|0;
 _glfwPollEvents();
 STACKTOP = sp;return;
}
function _Begin3dMode($camera) {
 $camera = $camera|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $matLookAt = 0, $matLookAt$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $matLookAt$byval_copy = sp + 88|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 12|0;
 $matLookAt = sp + 24|0;
 _rlglDraw();
 _rlMatrixMode(0);
 _rlPushMatrix();
 _rlLoadIdentity();
 $0 = HEAP32[3608>>2]|0;
 $1 = (+($0|0));
 $2 = HEAP32[3624>>2]|0;
 $3 = (+($2|0));
 $4 = $1 / $3;
 $5 = $4;
 $6 = $5 * 0.0414213568545358096218;
 $7 = -$6;
 _rlFrustum($7,$6,-0.0414213568545358096218,0.0414213568545358096218,0.100000001490116119385,1000.0);
 _rlMatrixMode(1);
 _rlLoadIdentity();
 $8 = (($camera) + 12|0);
 $9 = (($camera) + 24|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$camera+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$camera+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$camera+8>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$8+8>>2]|0;
 ;HEAP32[$matLookAt$byval_copy+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$matLookAt$byval_copy+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$matLookAt$byval_copy+8>>2]=HEAP32[$9+8>>2]|0;
 _MatrixLookAt($matLookAt,$$byval_copy,$$byval_copy1,$matLookAt$byval_copy);
 dest=$matLookAt$byval_copy+0|0; src=$matLookAt+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $10 = (_GetMatrixVector($matLookAt$byval_copy)|0);
 _rlMultMatrixf($10);
 STACKTOP = sp;return;
}
function _End3dMode() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _rlglDraw();
 _rlMatrixMode(0);
 _rlPopMatrix();
 _rlMatrixMode(1);
 _rlLoadIdentity();
 STACKTOP = sp;return;
}
function _GetFPS() {
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[3792>>3];
 $1 = $0;
 $2 = 1.0 / $1;
 STACKTOP = sp;return (+$2);
}
function _GetColor($agg$result,$hexValue) {
 $agg$result = $agg$result|0;
 $hexValue = $hexValue|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $hexValue >>> 24;
 $1 = $0&255;
 $2 = $hexValue >>> 16;
 $3 = $2&255;
 $4 = $hexValue >>> 8;
 $5 = $4&255;
 $6 = $hexValue&255;
 HEAP8[$agg$result>>0] = $1;
 $7 = (($agg$result) + 1|0);
 HEAP8[$7>>0] = $3;
 $8 = (($agg$result) + 2|0);
 HEAP8[$8>>0] = $5;
 $9 = (($agg$result) + 3|0);
 HEAP8[$9>>0] = $6;
 STACKTOP = sp;return;
}
function _GetRandomValue($min,$max) {
 $min = $min|0;
 $max = $max|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ispos = 0, $max$min = 0, $min$max = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($min|0)>($max|0);
 $min$max = $0 ? $min : $max;
 $max$min = $0 ? $max : $min;
 $1 = (_rand()|0);
 $2 = (($min$max) - ($max$min))|0;
 $ispos = ($2|0)>(-1);
 $neg = (0 - ($2))|0;
 $3 = $ispos ? $2 : $neg;
 $4 = (($3) + 1)|0;
 $5 = (($1|0) % ($4|0))&-1;
 $6 = (($5) + ($max$min))|0;
 STACKTOP = sp;return ($6|0);
}
function _Fade($agg$result,$color,$alpha) {
 $agg$result = $agg$result|0;
 $color = $color|0;
 $alpha = +$alpha;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $alpha < 0.0;
 if ($0) {
  $$0 = 0.0;
 } else {
  $1 = $alpha > 1.0;
  if ($1) {
   $$0 = 1.0;
  } else {
   $$0 = $alpha;
  }
 }
 $2 = HEAP8[$color>>0]|0;
 HEAP8[$agg$result>>0] = $2;
 $3 = (($agg$result) + 1|0);
 $4 = (($color) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 HEAP8[$3>>0] = $5;
 $6 = (($agg$result) + 2|0);
 $7 = (($color) + 2|0);
 $8 = HEAP8[$7>>0]|0;
 HEAP8[$6>>0] = $8;
 $9 = (($agg$result) + 3|0);
 $10 = (($color) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (+($12|0));
 $14 = $$0 * $13;
 $15 = (~~(($14))&255);
 HEAP8[$9>>0] = $15;
 STACKTOP = sp;return;
}
function _IsKeyPressed($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, $pressed$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (3864 + ($key)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = (4376 + ($key)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($1<<24>>24)!=($3<<24>>24);
 $5 = ($1<<24>>24)==(1);
 $or$cond = $4 & $5;
 $pressed$0 = $or$cond&1;
 STACKTOP = sp;return ($pressed$0|0);
}
function _IsKeyDown($key) {
 $key = $key|0;
 var $$ = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_GetKeyStatus($key)|0);
 $1 = ($0|0)==(1);
 $$ = $1&1;
 STACKTOP = sp;return ($$|0);
}
function _GetKeyStatus($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3640>>2]|0;
 $1 = (_glfwGetKey(($0|0),($key|0))|0);
 STACKTOP = sp;return ($1|0);
}
function _ErrorCallback($error,$description) {
 $error = $error|0;
 $description = $description|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $error;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $description;
 _TraceLog(2,5376,$vararg_buffer);
 STACKTOP = sp;return;
}
function _SetupFramebufferSize($displayWidth,$displayHeight) {
 $displayWidth = $displayWidth|0;
 $displayHeight = $displayHeight|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $or$cond = 0, $storemerge = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer8 = sp;
 $0 = sp + 16|0;
 $1 = HEAP32[3608>>2]|0;
 $2 = ($1|0)>($displayWidth|0);
 if (!($2)) {
  $3 = HEAP32[3624>>2]|0;
  $4 = ($3|0)>($displayHeight|0);
  if (!($4)) {
   $29 = ($1|0)<($displayWidth|0);
   $30 = ($3|0)<($displayHeight|0);
   $or$cond = $29 | $30;
   if (!($or$cond)) {
    HEAP32[4928>>2] = $1;
    $51 = HEAP32[3624>>2]|0;
    HEAP32[4936>>2] = $51;
    HEAP32[4912>>2] = 0;
    HEAP32[4920>>2] = 0;
    STACKTOP = sp;return;
   }
   HEAP32[$vararg_buffer8>>2] = $1;
   $vararg_ptr11 = (($vararg_buffer8) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $3;
   $vararg_ptr12 = (($vararg_buffer8) + 8|0);
   HEAP32[$vararg_ptr12>>2] = $displayWidth;
   $vararg_ptr13 = (($vararg_buffer8) + 12|0);
   HEAP32[$vararg_ptr13>>2] = $displayHeight;
   _TraceLog(0,5304,$vararg_buffer8);
   $31 = (+($displayWidth|0));
   $32 = (+($displayHeight|0));
   $33 = $31 / $32;
   $34 = HEAP32[3608>>2]|0;
   $35 = (+($34|0));
   $36 = HEAP32[3624>>2]|0;
   $37 = (+($36|0));
   $38 = $35 / $37;
   $39 = !($33 <= $38);
   if ($39) {
    $46 = $33 * $37;
    $47 = (~~(($46)));
    HEAP32[4928>>2] = $47;
    $48 = HEAP32[3624>>2]|0;
    HEAP32[4936>>2] = $48;
    $49 = HEAP32[3608>>2]|0;
    $50 = (($47) - ($49))|0;
    HEAP32[4912>>2] = $50;
    HEAP32[4920>>2] = 0;
    STACKTOP = sp;return;
   } else {
    HEAP32[4928>>2] = $34;
    $40 = HEAP32[3608>>2]|0;
    $41 = (+($40|0));
    $42 = $41 / $33;
    $43 = (~~(($42)));
    HEAP32[4936>>2] = $43;
    HEAP32[4912>>2] = 0;
    $44 = HEAP32[3624>>2]|0;
    $45 = (($43) - ($44))|0;
    HEAP32[4920>>2] = $45;
    STACKTOP = sp;return;
   }
  }
 }
 $5 = HEAP32[3608>>2]|0;
 $6 = HEAP32[3624>>2]|0;
 HEAP32[$vararg_buffer8>>2] = $5;
 $vararg_ptr1 = (($vararg_buffer8) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $vararg_ptr2 = (($vararg_buffer8) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $displayWidth;
 $vararg_ptr3 = (($vararg_buffer8) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $displayHeight;
 _TraceLog(2,5152,$vararg_buffer8);
 $7 = (+($displayWidth|0));
 $8 = HEAP32[3608>>2]|0;
 $9 = (+($8|0));
 $10 = $7 / $9;
 $11 = (+($displayHeight|0));
 $12 = HEAP32[3624>>2]|0;
 $13 = (+($12|0));
 $14 = $11 / $13;
 $15 = !($10 <= $14);
 if ($15) {
  $21 = $9 * $14;
  $22 = (~~(($21)));
  HEAP32[4928>>2] = $22;
  HEAP32[4936>>2] = $displayHeight;
  $23 = (($displayWidth) - ($22))|0;
  HEAP32[4912>>2] = $23;
  $storemerge = 0;
 } else {
  HEAP32[4928>>2] = $displayWidth;
  $16 = HEAP32[3624>>2]|0;
  $17 = (+($16|0));
  $18 = $10 * $17;
  $19 = (~~(($18)));
  HEAP32[4936>>2] = $19;
  HEAP32[4912>>2] = 0;
  $20 = (($displayHeight) - ($19))|0;
  $storemerge = $20;
 }
 HEAP32[4920>>2] = $storemerge;
 $24 = HEAP32[4928>>2]|0;
 $25 = (+($24|0));
 $26 = HEAP32[3608>>2]|0;
 $27 = (+($26|0));
 $28 = $25 / $27;
 _MatrixScale($0,$28,$28,$28);
 dest=3720+0|0; src=$0+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[4928>>2] = $displayWidth;
 HEAP32[4936>>2] = $displayHeight;
 HEAP32[$vararg_buffer8>>2] = $displayWidth;
 $vararg_ptr7 = (($vararg_buffer8) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $displayHeight;
 _TraceLog(2,5232,$vararg_buffer8);
 STACKTOP = sp;return;
}
function _WindowSizeCallback($window,$width,$height) {
 $window = $window|0;
 $width = $width|0;
 $height = $height|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[4912>>2]|0;
 $2 = HEAP32[4920>>2]|0;
 $3 = HEAP32[4928>>2]|0;
 $4 = HEAP32[4936>>2]|0;
 _rlglInitGraphics($1,$2,$3,$4);
 HEAP8[$0>>0] = -11;
 $5 = (($0) + 1|0);
 HEAP8[$5>>0] = -11;
 $6 = (($0) + 2|0);
 HEAP8[$6>>0] = -11;
 $7 = (($0) + 3|0);
 HEAP8[$7>>0] = -1;
 ;HEAP8[$$byval_copy+0>>0]=HEAP8[$0+0>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$0+3>>0]|0;
 _ClearBackground($$byval_copy);
 STACKTOP = sp;return;
}
function _CursorEnterCallback($window,$enter) {
 $window = $window|0;
 $enter = $enter|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function _KeyCallback($window,$key,$scancode,$action,$mods) {
 $window = $window|0;
 $key = $key|0;
 $scancode = $scancode|0;
 $action = $action|0;
 $mods = $mods|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3680>>2]|0;
 $1 = ($0|0)==($key|0);
 $2 = ($action|0)==(1);
 $or$cond = $1 & $2;
 if ($or$cond) {
  _glfwSetWindowShouldClose(($window|0),1);
 } else {
  $3 = $action&255;
  $4 = (3864 + ($key)|0);
  HEAP8[$4>>0] = $3;
 }
 $5 = ($key|0)==(259);
 $or$cond1 = $5 & $2;
 if (!($or$cond1)) {
  STACKTOP = sp;return;
 }
 HEAP32[3688>>2] = 3;
 STACKTOP = sp;return;
}
function _MouseButtonCallback($window,$button,$action,$mods) {
 $window = $window|0;
 $button = $button|0;
 $action = $action|0;
 $mods = $mods|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $action&255;
 $1 = (4888 + ($button)|0);
 HEAP8[$1>>0] = $0;
 STACKTOP = sp;return;
}
function _CharCallback($window,$key) {
 $window = $window|0;
 $key = $key|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[3688>>2] = $key;
 STACKTOP = sp;return;
}
function _ScrollCallback($window,$xoffset,$yoffset) {
 $window = $window|0;
 $xoffset = +$xoffset;
 $yoffset = +$yoffset;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (~~(($yoffset)));
 HEAP32[4904>>2] = $0;
 STACKTOP = sp;return;
}
function _rlMatrixMode($mode) {
 $mode = $mode|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 if ((($mode|0) == 1)) {
  HEAP32[5480>>2] = 5488;
 } else if ((($mode|0) == 0)) {
  HEAP32[5480>>2] = 5416;
 }
 HEAP32[5552>>2] = $mode;
 STACKTOP = sp;return;
}
function _rlPushMatrix() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[5560>>2]|0;
 $1 = ($0|0)==(15);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = 16;
  _TraceLog(1,5568,$vararg_buffer);
 }
 $2 = HEAP32[5560>>2]|0;
 $3 = (5608 + ($2<<6)|0);
 $4 = HEAP32[5480>>2]|0;
 dest=$3+0|0; src=$4+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _rlLoadIdentity();
 $5 = HEAP32[5560>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[5560>>2] = $6;
 $7 = HEAP32[5552>>2]|0;
 $8 = ($7|0)==(1);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[6632>>2] = 1;
 STACKTOP = sp;return;
}
function _rlLoadIdentity() {
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[5480>>2]|0;
 _MatrixIdentity($0);
 dest=$1+0|0; src=$0+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlPopMatrix() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5560>>2]|0;
 $1 = ($0|0)>(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[5560>>2]|0;
 $3 = (($2) + -1)|0;
 $4 = (5608 + ($3<<6)|0);
 $5 = HEAP32[5480>>2]|0;
 _memmove(($5|0),($4|0),64)|0;
 $6 = HEAP32[5560>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[5560>>2] = $7;
 STACKTOP = sp;return;
}
function _rlTranslatef($x,$y,$z) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $mat = 0, $mat$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mat$byval_copy = sp + 192|0;
 $$byval_copy = sp;
 $mat = sp + 64|0;
 $0 = sp + 128|0;
 _MatrixTranslate($mat,$x,$y,$z);
 _MatrixTranspose($mat);
 $1 = HEAP32[5480>>2]|0;
 dest=$$byval_copy+0|0; src=$1+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$mat$byval_copy+0|0; src=$mat+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($0,$$byval_copy,$mat$byval_copy);
 dest=$1+0|0; src=$0+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlRotatef($angleDeg,$x,$y,$z) {
 $angleDeg = +$angleDeg;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $rot = 0, $rot$byval_copy = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rot$byval_copy = sp + 384|0;
 $$byval_copy = sp;
 $rot = sp + 64|0;
 $0 = sp + 128|0;
 $1 = sp + 192|0;
 $2 = sp + 256|0;
 $3 = sp + 320|0;
 _MatrixIdentity($rot);
 $4 = $x == 1.0;
 do {
  if ($4) {
   $5 = $angleDeg;
   $6 = $5 * 0.0174532925199432954744;
   $7 = $6;
   _MatrixRotateX($0,$7);
   dest=$rot+0|0; src=$0+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  } else {
   $8 = $y == 1.0;
   if ($8) {
    $9 = $angleDeg;
    $10 = $9 * 0.0174532925199432954744;
    $11 = $10;
    _MatrixRotateY($1,$11);
    dest=$rot+0|0; src=$1+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    break;
   }
   $12 = $z == 1.0;
   if ($12) {
    $13 = $angleDeg;
    $14 = $13 * 0.0174532925199432954744;
    $15 = $14;
    _MatrixRotateZ($2,$15);
    dest=$rot+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   }
  }
 } while(0);
 _MatrixTranspose($rot);
 $16 = HEAP32[5480>>2]|0;
 dest=$$byval_copy+0|0; src=$16+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$rot$byval_copy+0|0; src=$rot+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($3,$$byval_copy,$rot$byval_copy);
 dest=$16+0|0; src=$3+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlScalef($x,$y,$z) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $mat = 0, $mat$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mat$byval_copy = sp + 192|0;
 $$byval_copy = sp;
 $mat = sp + 64|0;
 $0 = sp + 128|0;
 _MatrixScale($mat,$x,$y,$z);
 _MatrixTranspose($mat);
 $1 = HEAP32[5480>>2]|0;
 dest=$$byval_copy+0|0; src=$1+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$mat$byval_copy+0|0; src=$mat+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($0,$$byval_copy,$mat$byval_copy);
 dest=$1+0|0; src=$0+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlMultMatrixf($m) {
 $m = $m|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $mat = 0, $mat$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mat$byval_copy = sp + 192|0;
 $$byval_copy = sp;
 $mat = sp + 64|0;
 $0 = sp + 128|0;
 $1 = +HEAPF32[$m>>2];
 HEAPF32[$mat>>2] = $1;
 $2 = (($mat) + 4|0);
 $3 = (($m) + 4|0);
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = (($mat) + 8|0);
 $6 = (($m) + 8|0);
 $7 = +HEAPF32[$6>>2];
 HEAPF32[$5>>2] = $7;
 $8 = (($mat) + 12|0);
 $9 = (($m) + 12|0);
 $10 = +HEAPF32[$9>>2];
 HEAPF32[$8>>2] = $10;
 $11 = (($mat) + 16|0);
 $12 = (($m) + 16|0);
 $13 = +HEAPF32[$12>>2];
 HEAPF32[$11>>2] = $13;
 $14 = (($mat) + 20|0);
 $15 = (($m) + 20|0);
 $16 = +HEAPF32[$15>>2];
 HEAPF32[$14>>2] = $16;
 $17 = (($mat) + 24|0);
 $18 = (($m) + 24|0);
 $19 = +HEAPF32[$18>>2];
 HEAPF32[$17>>2] = $19;
 $20 = (($mat) + 28|0);
 $21 = (($m) + 28|0);
 $22 = +HEAPF32[$21>>2];
 HEAPF32[$20>>2] = $22;
 $23 = (($mat) + 32|0);
 $24 = (($m) + 32|0);
 $25 = +HEAPF32[$24>>2];
 HEAPF32[$23>>2] = $25;
 $26 = (($mat) + 36|0);
 $27 = (($m) + 36|0);
 $28 = +HEAPF32[$27>>2];
 HEAPF32[$26>>2] = $28;
 $29 = (($mat) + 40|0);
 $30 = (($m) + 40|0);
 $31 = +HEAPF32[$30>>2];
 HEAPF32[$29>>2] = $31;
 $32 = (($mat) + 44|0);
 $33 = (($m) + 44|0);
 $34 = +HEAPF32[$33>>2];
 HEAPF32[$32>>2] = $34;
 $35 = (($mat) + 48|0);
 $36 = (($m) + 48|0);
 $37 = +HEAPF32[$36>>2];
 HEAPF32[$35>>2] = $37;
 $38 = (($mat) + 52|0);
 $39 = (($m) + 52|0);
 $40 = +HEAPF32[$39>>2];
 HEAPF32[$38>>2] = $40;
 $41 = (($mat) + 56|0);
 $42 = (($m) + 56|0);
 $43 = +HEAPF32[$42>>2];
 HEAPF32[$41>>2] = $43;
 $44 = (($mat) + 60|0);
 $45 = (($m) + 60|0);
 $46 = +HEAPF32[$45>>2];
 HEAPF32[$44>>2] = $46;
 $47 = HEAP32[5480>>2]|0;
 dest=$$byval_copy+0|0; src=$47+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$mat$byval_copy+0|0; src=$mat+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($0,$$byval_copy,$mat$byval_copy);
 dest=$47+0|0; src=$0+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlFrustum($left,$right,$bottom,$top,$near,$far) {
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $near = +$near;
 $far = +$far;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $matPerps = 0, $matPerps$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $matPerps$byval_copy = sp + 192|0;
 $$byval_copy = sp;
 $matPerps = sp + 64|0;
 $0 = sp + 128|0;
 _MatrixFrustum($matPerps,$left,$right,$bottom,$top,$near,$far);
 _MatrixTranspose($matPerps);
 $1 = HEAP32[5480>>2]|0;
 dest=$$byval_copy+0|0; src=$1+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$matPerps$byval_copy+0|0; src=$matPerps+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($0,$$byval_copy,$matPerps$byval_copy);
 dest=$1+0|0; src=$0+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlOrtho($left,$right,$bottom,$top,$near,$far) {
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $near = +$near;
 $far = +$far;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $matOrtho = 0, $matOrtho$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $matOrtho$byval_copy = sp + 192|0;
 $$byval_copy = sp;
 $matOrtho = sp + 64|0;
 $0 = sp + 128|0;
 _MatrixOrtho($matOrtho,$left,$right,$bottom,$top,$near,$far);
 _MatrixTranspose($matOrtho);
 $1 = HEAP32[5480>>2]|0;
 dest=$$byval_copy+0|0; src=$1+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$matOrtho$byval_copy+0|0; src=$matOrtho+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($0,$$byval_copy,$matOrtho$byval_copy);
 dest=$1+0|0; src=$0+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlBegin($mode) {
 $mode = $mode|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[6640>>2] = $mode;
 STACKTOP = sp;return;
}
function _rlEnd() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond = 0, $exitcond16 = 0, $exitcond17 = 0, $exitcond18 = 0, $i$013 = 0, $i1$011 = 0, $i2$01 = 0, $i4$03 = 0, $i6$09 = 0, $i7$06 = 0, $or$cond = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $quads$1$promoted = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp;
 $0 = HEAP32[6632>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[6648>>2]|0;
  $3 = ($2|0)>(0);
  if ($3) {
   $i$013 = 0;
   while(1) {
    $4 = HEAP32[6656>>2]|0;
    $5 = (($4) + (($i$013*12)|0)|0);
    $6 = HEAP32[5480>>2]|0;
    dest=$$byval_copy+0|0; src=$6+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    _VectorTransform($5,$$byval_copy);
    $7 = (($i$013) + 1)|0;
    $8 = HEAP32[6648>>2]|0;
    $9 = ($7|0)<($8|0);
    if ($9) {
     $i$013 = $7;
    } else {
     break;
    }
   }
   HEAP32[6632>>2] = 0;
   $10 = ($8|0)>(0);
   if ($10) {
    $i1$011 = 0;
    while(1) {
     $11 = HEAP32[6656>>2]|0;
     $12 = (($11) + (($i1$011*12)|0)|0);
     $13 = +HEAPF32[$12>>2];
     $14 = ((($11) + (($i1$011*12)|0)|0) + 4|0);
     $15 = +HEAPF32[$14>>2];
     $16 = ((($11) + (($i1$011*12)|0)|0) + 8|0);
     $17 = +HEAPF32[$16>>2];
     _rlVertex3f($13,$15,$17);
     $18 = (($i1$011) + 1)|0;
     $19 = HEAP32[6648>>2]|0;
     $20 = ($18|0)<($19|0);
     if ($20) {
      $i1$011 = $18;
     } else {
      break;
     }
    }
   }
  } else {
   HEAP32[6632>>2] = 0;
  }
  HEAP32[6648>>2] = 0;
 }
 $21 = HEAP32[6640>>2]|0;
 if ((($21|0) == 0)) {
  $22 = HEAP32[6664>>2]|0;
  $23 = HEAP32[6672>>2]|0;
  $24 = ($22|0)!=($23|0);
  $25 = (($22) - ($23))|0;
  $26 = ($25|0)>(0);
  $or$cond = $24 & $26;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $27 = (($22) - ($23))|0;
  $i2$01 = 0;
  while(1) {
   $28 = HEAP32[6672>>2]|0;
   $29 = $28 << 2;
   $30 = (($29) + -4)|0;
   $31 = HEAP32[6688>>2]|0;
   $32 = (($31) + ($30)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = (($31) + ($29)|0);
   HEAP8[$34>>0] = $33;
   $35 = HEAP32[6672>>2]|0;
   $36 = $35 << 2;
   $37 = (($36) + -3)|0;
   $38 = HEAP32[6688>>2]|0;
   $39 = (($38) + ($37)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $36 | 1;
   $42 = (($38) + ($41)|0);
   HEAP8[$42>>0] = $40;
   $43 = HEAP32[6672>>2]|0;
   $44 = $43 << 2;
   $45 = (($44) + -2)|0;
   $46 = HEAP32[6688>>2]|0;
   $47 = (($46) + ($45)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $44 | 2;
   $50 = (($46) + ($49)|0);
   HEAP8[$50>>0] = $48;
   $51 = HEAP32[6672>>2]|0;
   $52 = $51 << 2;
   $53 = (($52) + -1)|0;
   $54 = HEAP32[6688>>2]|0;
   $55 = (($54) + ($53)|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $52 | 3;
   $58 = (($54) + ($57)|0);
   HEAP8[$58>>0] = $56;
   $59 = HEAP32[6672>>2]|0;
   $60 = (($59) + 1)|0;
   HEAP32[6672>>2] = $60;
   $61 = (($i2$01) + 1)|0;
   $exitcond = ($61|0)==($27|0);
   if ($exitcond) {
    break;
   } else {
    $i2$01 = $61;
   }
  }
  STACKTOP = sp;return;
 } else if ((($21|0) == 1)) {
  $62 = HEAP32[6696>>2]|0;
  $63 = HEAP32[6704>>2]|0;
  $64 = ($62|0)!=($63|0);
  $65 = (($62) - ($63))|0;
  $66 = ($65|0)>(0);
  $or$cond21 = $64 & $66;
  if (!($or$cond21)) {
   STACKTOP = sp;return;
  }
  $67 = (($62) - ($63))|0;
  $i4$03 = 0;
  while(1) {
   $68 = HEAP32[6704>>2]|0;
   $69 = $68 << 2;
   $70 = (($69) + -4)|0;
   $71 = HEAP32[6720>>2]|0;
   $72 = (($71) + ($70)|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = (($71) + ($69)|0);
   HEAP8[$74>>0] = $73;
   $75 = HEAP32[6704>>2]|0;
   $76 = $75 << 2;
   $77 = (($76) + -3)|0;
   $78 = HEAP32[6720>>2]|0;
   $79 = (($78) + ($77)|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $76 | 1;
   $82 = (($78) + ($81)|0);
   HEAP8[$82>>0] = $80;
   $83 = HEAP32[6704>>2]|0;
   $84 = $83 << 2;
   $85 = (($84) + -2)|0;
   $86 = HEAP32[6720>>2]|0;
   $87 = (($86) + ($85)|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $84 | 2;
   $90 = (($86) + ($89)|0);
   HEAP8[$90>>0] = $88;
   $91 = HEAP32[6704>>2]|0;
   $92 = $91 << 2;
   $93 = (($92) + -1)|0;
   $94 = HEAP32[6720>>2]|0;
   $95 = (($94) + ($93)|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $92 | 3;
   $98 = (($94) + ($97)|0);
   HEAP8[$98>>0] = $96;
   $99 = HEAP32[6704>>2]|0;
   $100 = (($99) + 1)|0;
   HEAP32[6704>>2] = $100;
   $101 = (($i4$03) + 1)|0;
   $exitcond16 = ($101|0)==($67|0);
   if ($exitcond16) {
    break;
   } else {
    $i4$03 = $101;
   }
  }
  STACKTOP = sp;return;
 } else if ((($21|0) == 2)) {
  $102 = HEAP32[6728>>2]|0;
  $103 = HEAP32[6744>>2]|0;
  $104 = ($102|0)!=($103|0);
  $105 = (($102) - ($103))|0;
  $106 = ($105|0)>(0);
  $or$cond23 = $104 & $106;
  if ($or$cond23) {
   $107 = (($102) - ($103))|0;
   $i6$09 = 0;
   while(1) {
    $108 = HEAP32[6744>>2]|0;
    $109 = $108 << 2;
    $110 = (($109) + -4)|0;
    $111 = HEAP32[6768>>2]|0;
    $112 = (($111) + ($110)|0);
    $113 = HEAP8[$112>>0]|0;
    $114 = (($111) + ($109)|0);
    HEAP8[$114>>0] = $113;
    $115 = HEAP32[6744>>2]|0;
    $116 = $115 << 2;
    $117 = (($116) + -3)|0;
    $118 = HEAP32[6768>>2]|0;
    $119 = (($118) + ($117)|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $116 | 1;
    $122 = (($118) + ($121)|0);
    HEAP8[$122>>0] = $120;
    $123 = HEAP32[6744>>2]|0;
    $124 = $123 << 2;
    $125 = (($124) + -2)|0;
    $126 = HEAP32[6768>>2]|0;
    $127 = (($126) + ($125)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $124 | 2;
    $130 = (($126) + ($129)|0);
    HEAP8[$130>>0] = $128;
    $131 = HEAP32[6744>>2]|0;
    $132 = $131 << 2;
    $133 = (($132) + -1)|0;
    $134 = HEAP32[6768>>2]|0;
    $135 = (($134) + ($133)|0);
    $136 = HEAP8[$135>>0]|0;
    $137 = $132 | 3;
    $138 = (($134) + ($137)|0);
    HEAP8[$138>>0] = $136;
    $139 = HEAP32[6744>>2]|0;
    $140 = (($139) + 1)|0;
    HEAP32[6744>>2] = $140;
    $141 = (($i6$09) + 1)|0;
    $exitcond18 = ($141|0)==($107|0);
    if ($exitcond18) {
     break;
    } else {
     $i6$09 = $141;
    }
   }
  }
  $142 = HEAP32[6728>>2]|0;
  $143 = HEAP32[6736>>2]|0;
  $144 = ($142|0)!=($143|0);
  $145 = (($142) - ($143))|0;
  $146 = ($145|0)>(0);
  $or$cond25 = $144 & $146;
  if (!($or$cond25)) {
   STACKTOP = sp;return;
  }
  $147 = HEAP32[6760>>2]|0;
  $quads$1$promoted = HEAP32[6736>>2]|0;
  $148 = (($142) + ($quads$1$promoted))|0;
  $149 = (($142) - ($143))|0;
  $151 = $quads$1$promoted;$i7$06 = 0;
  while(1) {
   $150 = $151 << 1;
   $152 = (($147) + ($150<<2)|0);
   HEAPF32[$152>>2] = 0.0;
   $153 = $151 << 1;
   $154 = $153 | 1;
   $155 = (($147) + ($154<<2)|0);
   HEAPF32[$155>>2] = 0.0;
   $156 = (($151) + 1)|0;
   $157 = (($i7$06) + 1)|0;
   $exitcond17 = ($157|0)==($149|0);
   if ($exitcond17) {
    break;
   } else {
    $151 = $156;$i7$06 = $157;
   }
  }
  $158 = (($148) - ($143))|0;
  HEAP32[6736>>2] = $158;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _rlVertex3f($x,$y,$z) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp;
 $0 = HEAP32[6632>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[6648>>2]|0;
  $3 = HEAP32[6656>>2]|0;
  $4 = (($3) + (($2*12)|0)|0);
  HEAPF32[$4>>2] = $x;
  $5 = HEAP32[6648>>2]|0;
  $6 = HEAP32[6656>>2]|0;
  $7 = ((($6) + (($5*12)|0)|0) + 4|0);
  HEAPF32[$7>>2] = $y;
  $8 = HEAP32[6648>>2]|0;
  $9 = HEAP32[6656>>2]|0;
  $10 = ((($9) + (($8*12)|0)|0) + 8|0);
  HEAPF32[$10>>2] = $z;
  $11 = HEAP32[6648>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[6648>>2] = $12;
  STACKTOP = sp;return;
 }
 $13 = HEAP32[6640>>2]|0;
 if ((($13|0) == 2)) {
  $48 = HEAP32[6728>>2]|0;
  $49 = ($48|0)<(4096);
  if ($49) {
   $50 = ($48*3)|0;
   $51 = HEAP32[6752>>2]|0;
   $52 = (($51) + ($50<<2)|0);
   HEAPF32[$52>>2] = $x;
   $53 = HEAP32[6728>>2]|0;
   $54 = ($53*3)|0;
   $55 = (($54) + 1)|0;
   $56 = HEAP32[6752>>2]|0;
   $57 = (($56) + ($55<<2)|0);
   HEAPF32[$57>>2] = $y;
   $58 = HEAP32[6728>>2]|0;
   $59 = ($58*3)|0;
   $60 = (($59) + 2)|0;
   $61 = HEAP32[6752>>2]|0;
   $62 = (($61) + ($60<<2)|0);
   HEAPF32[$62>>2] = $z;
   $63 = HEAP32[6728>>2]|0;
   $64 = (($63) + 1)|0;
   HEAP32[6728>>2] = $64;
   $65 = HEAP32[6848>>2]|0;
   $66 = (($65) + -1)|0;
   $67 = HEAP32[6856>>2]|0;
   $68 = ((($67) + ($66<<3)|0) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + 1)|0;
   HEAP32[$68>>2] = $70;
   STACKTOP = sp;return;
  } else {
   _TraceLog(1,6864,$vararg_buffer3);
   STACKTOP = sp;return;
  }
 } else if ((($13|0) == 1)) {
  $31 = HEAP32[6696>>2]|0;
  $32 = ($31|0)<(6144);
  if ($32) {
   $33 = ($31*3)|0;
   $34 = HEAP32[6712>>2]|0;
   $35 = (($34) + ($33<<2)|0);
   HEAPF32[$35>>2] = $x;
   $36 = HEAP32[6696>>2]|0;
   $37 = ($36*3)|0;
   $38 = (($37) + 1)|0;
   $39 = HEAP32[6712>>2]|0;
   $40 = (($39) + ($38<<2)|0);
   HEAPF32[$40>>2] = $y;
   $41 = HEAP32[6696>>2]|0;
   $42 = ($41*3)|0;
   $43 = (($42) + 2)|0;
   $44 = HEAP32[6712>>2]|0;
   $45 = (($44) + ($43<<2)|0);
   HEAPF32[$45>>2] = $z;
   $46 = HEAP32[6696>>2]|0;
   $47 = (($46) + 1)|0;
   HEAP32[6696>>2] = $47;
   STACKTOP = sp;return;
  } else {
   _TraceLog(1,6816,$vararg_buffer3);
   STACKTOP = sp;return;
  }
 } else if ((($13|0) == 0)) {
  $14 = HEAP32[6664>>2]|0;
  $15 = ($14|0)<(2048);
  if ($15) {
   $16 = ($14*3)|0;
   $17 = HEAP32[6680>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAPF32[$18>>2] = $x;
   $19 = HEAP32[6664>>2]|0;
   $20 = ($19*3)|0;
   $21 = (($20) + 1)|0;
   $22 = HEAP32[6680>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAPF32[$23>>2] = $y;
   $24 = HEAP32[6664>>2]|0;
   $25 = ($24*3)|0;
   $26 = (($25) + 2)|0;
   $27 = HEAP32[6680>>2]|0;
   $28 = (($27) + ($26<<2)|0);
   HEAPF32[$28>>2] = $z;
   $29 = HEAP32[6664>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[6664>>2] = $30;
   STACKTOP = sp;return;
  } else {
   _TraceLog(1,6784,$vararg_buffer3);
   STACKTOP = sp;return;
  }
 } else {
  STACKTOP = sp;return;
 }
}
function _rlVertex2f($x,$y) {
 $x = +$x;
 $y = +$y;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _rlVertex3f($x,$y,0.0);
 STACKTOP = sp;return;
}
function _rlVertex2i($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($x|0));
 $1 = (+($y|0));
 _rlVertex3f($0,$1,0.0);
 STACKTOP = sp;return;
}
function _rlTexCoord2f($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6640>>2]|0;
 $1 = ($0|0)==(2);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[6736>>2]|0;
 $3 = $2 << 1;
 $4 = HEAP32[6760>>2]|0;
 $5 = (($4) + ($3<<2)|0);
 HEAPF32[$5>>2] = $x;
 $6 = HEAP32[6736>>2]|0;
 $7 = $6 << 1;
 $8 = $7 | 1;
 $9 = HEAP32[6760>>2]|0;
 $10 = (($9) + ($8<<2)|0);
 HEAPF32[$10>>2] = $y;
 $11 = HEAP32[6736>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[6736>>2] = $12;
 STACKTOP = sp;return;
}
function _rlNormal3f($x,$y,$z) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function _rlColor4ub($x,$y,$z,$w) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6640>>2]|0;
 if ((($0|0) == 2)) {
  $43 = HEAP32[6744>>2]|0;
  $44 = $43 << 2;
  $45 = HEAP32[6768>>2]|0;
  $46 = (($45) + ($44)|0);
  HEAP8[$46>>0] = $x;
  $47 = HEAP32[6744>>2]|0;
  $48 = $47 << 2;
  $49 = $48 | 1;
  $50 = HEAP32[6768>>2]|0;
  $51 = (($50) + ($49)|0);
  HEAP8[$51>>0] = $y;
  $52 = HEAP32[6744>>2]|0;
  $53 = $52 << 2;
  $54 = $53 | 2;
  $55 = HEAP32[6768>>2]|0;
  $56 = (($55) + ($54)|0);
  HEAP8[$56>>0] = $z;
  $57 = HEAP32[6744>>2]|0;
  $58 = $57 << 2;
  $59 = $58 | 3;
  $60 = HEAP32[6768>>2]|0;
  $61 = (($60) + ($59)|0);
  HEAP8[$61>>0] = $w;
  $62 = HEAP32[6744>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[6744>>2] = $63;
  STACKTOP = sp;return;
 } else if ((($0|0) == 0)) {
  $1 = HEAP32[6672>>2]|0;
  $2 = $1 << 2;
  $3 = HEAP32[6688>>2]|0;
  $4 = (($3) + ($2)|0);
  HEAP8[$4>>0] = $x;
  $5 = HEAP32[6672>>2]|0;
  $6 = $5 << 2;
  $7 = $6 | 1;
  $8 = HEAP32[6688>>2]|0;
  $9 = (($8) + ($7)|0);
  HEAP8[$9>>0] = $y;
  $10 = HEAP32[6672>>2]|0;
  $11 = $10 << 2;
  $12 = $11 | 2;
  $13 = HEAP32[6688>>2]|0;
  $14 = (($13) + ($12)|0);
  HEAP8[$14>>0] = $z;
  $15 = HEAP32[6672>>2]|0;
  $16 = $15 << 2;
  $17 = $16 | 3;
  $18 = HEAP32[6688>>2]|0;
  $19 = (($18) + ($17)|0);
  HEAP8[$19>>0] = $w;
  $20 = HEAP32[6672>>2]|0;
  $21 = (($20) + 1)|0;
  HEAP32[6672>>2] = $21;
  STACKTOP = sp;return;
 } else if ((($0|0) == 1)) {
  $22 = HEAP32[6704>>2]|0;
  $23 = $22 << 2;
  $24 = HEAP32[6720>>2]|0;
  $25 = (($24) + ($23)|0);
  HEAP8[$25>>0] = $x;
  $26 = HEAP32[6704>>2]|0;
  $27 = $26 << 2;
  $28 = $27 | 1;
  $29 = HEAP32[6720>>2]|0;
  $30 = (($29) + ($28)|0);
  HEAP8[$30>>0] = $y;
  $31 = HEAP32[6704>>2]|0;
  $32 = $31 << 2;
  $33 = $32 | 2;
  $34 = HEAP32[6720>>2]|0;
  $35 = (($34) + ($33)|0);
  HEAP8[$35>>0] = $z;
  $36 = HEAP32[6704>>2]|0;
  $37 = $36 << 2;
  $38 = $37 | 3;
  $39 = HEAP32[6720>>2]|0;
  $40 = (($39) + ($38)|0);
  HEAP8[$40>>0] = $w;
  $41 = HEAP32[6704>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[6704>>2] = $42;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _rlColor3f($x,$y,$z) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * 255.0;
 $1 = (~~(($0))&255);
 $2 = $y * 255.0;
 $3 = (~~(($2))&255);
 $4 = $z * 255.0;
 $5 = (~~(($4))&255);
 _rlColor4ub($1,$3,$5,-1);
 STACKTOP = sp;return;
}
function _rlEnableTexture($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6848>>2]|0;
 $1 = (($0) + -1)|0;
 $2 = HEAP32[6856>>2]|0;
 $3 = (($2) + ($1<<3)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($id|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ((($2) + ($1<<3)|0) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  $9 = (($0) + 1)|0;
  HEAP32[6848>>2] = $9;
 }
 $10 = HEAP32[6848>>2]|0;
 $11 = (($10) + -1)|0;
 $12 = HEAP32[6856>>2]|0;
 $13 = (($12) + ($11<<3)|0);
 HEAP32[$13>>2] = $id;
 $14 = HEAP32[6848>>2]|0;
 $15 = (($14) + -1)|0;
 $16 = HEAP32[6856>>2]|0;
 $17 = ((($16) + ($15<<3)|0) + 4|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function _rlDisableTexture() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function _rlDeleteTextures($id) {
 $id = $id|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $id;
 _glDeleteTextures(1,($0|0));
 STACKTOP = sp;return;
}
function _rlDeleteVertexArrays($id) {
 $id = $id|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function _rlDeleteBuffers($id) {
 $id = $id|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $id;
 _glDeleteBuffers(1,($0|0));
 STACKTOP = sp;return;
}
function _rlClearColor($r,$g,$b,$a) {
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 $a = $a|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($r&255));
 $1 = $0 / 255.0;
 $2 = (+($g&255));
 $3 = $2 / 255.0;
 $4 = (+($b&255));
 $5 = $4 / 255.0;
 $6 = (+($a&255));
 $7 = $6 / 255.0;
 _glClearColor((+$1),(+$3),(+$5),(+$7));
 STACKTOP = sp;return;
}
function _rlClearScreenBuffers() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _glClear(16640);
 STACKTOP = sp;return;
}
function _rlGetVersion() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 3;
}
function _rlglInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond4 = 0, $i1$02 = 0, $i2$01 = 0, $pixels = 0, $vararg_buffer15 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp;
 $0 = sp + 152|0;
 $1 = sp + 8|0;
 $2 = sp + 72|0;
 $3 = sp + 136|0;
 $pixels = sp + 148|0;
 _TraceLog(2,6896,$vararg_buffer15);
 $4 = (_glGetString(7936)|0);
 HEAP32[$vararg_buffer15>>2] = $4;
 _TraceLog(0,6952,$vararg_buffer15);
 $5 = (_glGetString(7937)|0);
 HEAP32[$vararg_buffer15>>2] = $5;
 _TraceLog(0,6976,$vararg_buffer15);
 $6 = (_glGetString(7938)|0);
 HEAP32[$vararg_buffer15>>2] = $6;
 _TraceLog(0,7000,$vararg_buffer15);
 $7 = (_glGetString(35724)|0);
 HEAP32[$vararg_buffer15>>2] = $7;
 _TraceLog(0,7024,$vararg_buffer15);
 HEAP32[6640>>2] = 1;
 _MatrixIdentity($0);
 dest=5416+0|0; src=$0+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($1);
 dest=5488+0|0; src=$1+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[5480>>2] = 5488;
 _MatrixIdentity($2);
 dest=5608+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 64|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 128|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 192|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 256|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 320|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 384|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 448|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 512|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 576|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 640|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 704|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 768|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 832|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 896|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=((5608 + 960|0))+0|0; src=$2+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $8 = (_LoadDefaultShaders()|0);
 HEAP32[7048>>2] = $8;
 $9 = (_glGetAttribLocation(($8|0),(7056|0))|0);
 HEAP32[7072>>2] = $9;
 $10 = HEAP32[7048>>2]|0;
 $11 = (_glGetAttribLocation(($10|0),(7080|0))|0);
 HEAP32[7096>>2] = $11;
 $12 = HEAP32[7048>>2]|0;
 $13 = (_glGetAttribLocation(($12|0),(7104|0))|0);
 HEAP32[7120>>2] = $13;
 $14 = HEAP32[7048>>2]|0;
 $15 = (_glGetUniformLocation(($14|0),(7128|0))|0);
 HEAP32[7144>>2] = $15;
 $16 = HEAP32[7048>>2]|0;
 $17 = (_glGetUniformLocation(($16|0),(7152|0))|0);
 HEAP32[7176>>2] = $17;
 $18 = HEAP32[7048>>2]|0;
 $19 = (_glGetUniformLocation(($18|0),(7184|0))|0);
 HEAP32[7200>>2] = $19;
 _InitializeBuffers();
 _InitializeBuffersGPU();
 $20 = (_malloc(49152)|0);
 HEAP32[6656>>2] = $20;
 $i1$02 = 0;
 while(1) {
  $21 = HEAP32[6656>>2]|0;
  $22 = (($21) + (($i1$02*12)|0)|0);
  _VectorZero($3);
  ;HEAP32[$22+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$22+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$3+8>>2]|0;
  $23 = (($i1$02) + 1)|0;
  $exitcond4 = ($23|0)==(4096);
  if ($exitcond4) {
   break;
  } else {
   $i1$02 = $23;
  }
 }
 HEAP32[$pixels>>2] = -1;
 $24 = (_rlglLoadTexture($pixels,1,1,0)|0);
 HEAP32[_whiteTexture>>2] = $24;
 $25 = ($24|0)==(0);
 if ($25) {
  _TraceLog(2,7264,$vararg_buffer15);
 } else {
  HEAP32[$vararg_buffer15>>2] = $24;
  _TraceLog(0,7208,$vararg_buffer15);
 }
 $26 = (_malloc(2048)|0);
 HEAP32[6856>>2] = $26;
 $i2$01 = 0;
 while(1) {
  $27 = (($26) + ($i2$01<<3)|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($26) + ($i2$01<<3)|0) + 4|0);
  HEAP32[$28>>2] = 0;
  $29 = (($i2$01) + 1)|0;
  $exitcond = ($29|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $i2$01 = $29;
  }
 }
 HEAP32[6848>>2] = 1;
 $30 = HEAP32[_whiteTexture>>2]|0;
 $31 = HEAP32[6856>>2]|0;
 HEAP32[$31>>2] = $30;
 STACKTOP = sp;return;
}
function _LoadDefaultShaders() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fShaderStr = 0, $length = 0, $maxLength = 0, $pfs = 0, $pvs = 0, $success = 0, $vShaderStr = 0;
 var $vararg_buffer13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 912|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp;
 $vShaderStr = sp + 368|0;
 $fShaderStr = sp + 24|0;
 $pvs = sp + 8|0;
 $pfs = sp + 12|0;
 $success = sp + 16|0;
 $maxLength = sp + 4|0;
 $length = sp + 20|0;
 _memcpy(($vShaderStr|0),(8120|0),536)|0;
 _memcpy(($fShaderStr|0),(8656|0),340)|0;
 $0 = (_glCreateShader(35633)|0);
 $1 = (_glCreateShader(35632)|0);
 HEAP32[$pvs>>2] = $vShaderStr;
 HEAP32[$pfs>>2] = $fShaderStr;
 _glShaderSource(($0|0),1,($pvs|0),(0|0));
 _glShaderSource(($1|0),1,($pfs|0),(0|0));
 HEAP32[$success>>2] = 0;
 _glCompileShader(($0|0));
 _glGetShaderiv(($0|0),35713,($success|0));
 $2 = HEAP32[$success>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  HEAP32[$vararg_buffer13>>2] = $0;
  _TraceLog(0,9064,$vararg_buffer13);
 } else {
  HEAP32[$vararg_buffer13>>2] = $0;
  _TraceLog(2,9000,$vararg_buffer13);
 }
 _glCompileShader(($1|0));
 _glGetShaderiv(($1|0),35713,($success|0));
 $4 = HEAP32[$success>>2]|0;
 $5 = ($4|0)==(1);
 if ($5) {
  HEAP32[$vararg_buffer13>>2] = $1;
  _TraceLog(0,9192,$vararg_buffer13);
 } else {
  HEAP32[$vararg_buffer13>>2] = $1;
  _TraceLog(2,9128,$vararg_buffer13);
 }
 $6 = (_glCreateProgram()|0);
 _glAttachShader(($6|0),($0|0));
 _glAttachShader(($6|0),($1|0));
 _glLinkProgram(($6|0));
 _glGetProgramiv(($6|0),35714,($success|0));
 $7 = HEAP32[$success>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  _glGetProgramiv(($6|0),35716,($maxLength|0));
  $9 = HEAP32[$maxLength>>2]|0;
  $10 = (_llvm_stacksave()|0);
  $11 = STACKTOP; STACKTOP = STACKTOP + ((((1*$9)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
  $12 = HEAP32[$maxLength>>2]|0;
  _glGetProgramInfoLog(($6|0),($12|0),($length|0),($11|0));
  HEAP32[$vararg_buffer13>>2] = $11;
  _TraceLog(0,9256,$vararg_buffer13);
  _llvm_stackrestore(($10|0));
  _glDeleteShader(($0|0));
  _glDeleteShader(($1|0));
  STACKTOP = sp;return ($6|0);
 } else {
  HEAP32[$vararg_buffer13>>2] = $6;
  _TraceLog(0,9288,$vararg_buffer13);
  _glDeleteShader(($0|0));
  _glDeleteShader(($1|0));
  STACKTOP = sp;return ($6|0);
 }
 return 0|0;
}
function _InitializeBuffers() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond14 = 0, $exitcond17 = 0, $exitcond19 = 0, $i1$012 = 0, $i3$09 = 0, $i6$04 = 0, $i7$02 = 0, $k$01 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_malloc(24576)|0);
 HEAP32[6680>>2] = $0;
 $1 = (_malloc(8192)|0);
 HEAP32[6688>>2] = $1;
 $2 = HEAP32[6680>>2]|0;
 _memset(($2|0),0,24576)|0;
 $i1$012 = 0;
 while(1) {
  $3 = HEAP32[6688>>2]|0;
  $4 = (($3) + ($i1$012)|0);
  HEAP8[$4>>0] = 0;
  $5 = (($i1$012) + 1)|0;
  $exitcond19 = ($5|0)==(8192);
  if ($exitcond19) {
   break;
  } else {
   $i1$012 = $5;
  }
 }
 HEAP32[6664>>2] = 0;
 HEAP32[6672>>2] = 0;
 $6 = (_malloc(73728)|0);
 HEAP32[6712>>2] = $6;
 $7 = (_malloc(24576)|0);
 HEAP32[6720>>2] = $7;
 $8 = HEAP32[6712>>2]|0;
 _memset(($8|0),0,73728)|0;
 $i3$09 = 0;
 while(1) {
  $9 = HEAP32[6720>>2]|0;
  $10 = (($9) + ($i3$09)|0);
  HEAP8[$10>>0] = 0;
  $11 = (($i3$09) + 1)|0;
  $exitcond17 = ($11|0)==(24576);
  if ($exitcond17) {
   break;
  } else {
   $i3$09 = $11;
  }
 }
 HEAP32[6696>>2] = 0;
 HEAP32[6704>>2] = 0;
 $12 = (_malloc(49152)|0);
 HEAP32[6752>>2] = $12;
 $13 = (_malloc(32768)|0);
 HEAP32[6760>>2] = $13;
 $14 = (_malloc(16384)|0);
 HEAP32[6768>>2] = $14;
 $15 = (_malloc(12288)|0);
 HEAP32[6776>>2] = $15;
 $16 = HEAP32[6752>>2]|0;
 _memset(($16|0),0,49152)|0;
 $17 = HEAP32[6760>>2]|0;
 _memset(($17|0),0,32768)|0;
 $i6$04 = 0;
 while(1) {
  $19 = HEAP32[6768>>2]|0;
  $20 = (($19) + ($i6$04)|0);
  HEAP8[$20>>0] = 0;
  $21 = (($i6$04) + 1)|0;
  $exitcond14 = ($21|0)==(16384);
  if ($exitcond14) {
   break;
  } else {
   $i6$04 = $21;
  }
 }
 $18 = HEAP32[6776>>2]|0;
 $i7$02 = 0;$k$01 = 0;
 while(1) {
  $22 = $k$01 << 2;
  $23 = $22&65535;
  $24 = (($18) + ($i7$02<<1)|0);
  HEAP16[$24>>1] = $23;
  $25 = $22 | 1;
  $26 = $25&65535;
  $27 = $i7$02 | 1;
  $28 = (($18) + ($27<<1)|0);
  HEAP16[$28>>1] = $26;
  $29 = $22 | 2;
  $30 = $29&65535;
  $31 = (($i7$02) + 2)|0;
  $32 = (($18) + ($31<<1)|0);
  HEAP16[$32>>1] = $30;
  $33 = (($i7$02) + 3)|0;
  $34 = (($18) + ($33<<1)|0);
  HEAP16[$34>>1] = $23;
  $35 = (($i7$02) + 4)|0;
  $36 = (($18) + ($35<<1)|0);
  HEAP16[$36>>1] = $30;
  $37 = $22 | 3;
  $38 = $37&65535;
  $39 = (($i7$02) + 5)|0;
  $40 = (($18) + ($39<<1)|0);
  HEAP16[$40>>1] = $38;
  $41 = (($k$01) + 1)|0;
  $42 = (($i7$02) + 6)|0;
  $exitcond = ($41|0)==(1024);
  if ($exitcond) {
   break;
  } else {
   $i7$02 = $42;$k$01 = $41;
  }
 }
 HEAP32[6728>>2] = 0;
 HEAP32[6736>>2] = 0;
 HEAP32[6744>>2] = 0;
 _TraceLog(0,8056,$vararg_buffer);
 STACKTOP = sp;return;
}
function _InitializeBuffersGPU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer6 = sp;
 _glGenBuffers(2,(7304|0));
 $0 = HEAP32[7304>>2]|0;
 _glBindBuffer(34962,($0|0));
 $1 = HEAP32[6680>>2]|0;
 _glBufferData(34962,24576,($1|0),35048);
 $2 = HEAP32[7072>>2]|0;
 _glEnableVertexAttribArray(($2|0));
 $3 = HEAP32[7072>>2]|0;
 _glVertexAttribPointer(($3|0),3,5126,0,0,(0|0));
 $4 = HEAP32[((7304 + 4|0))>>2]|0;
 _glBindBuffer(34962,($4|0));
 $5 = HEAP32[6688>>2]|0;
 _glBufferData(34962,8192,($5|0),35048);
 $6 = HEAP32[7120>>2]|0;
 _glEnableVertexAttribArray(($6|0));
 $7 = HEAP32[7120>>2]|0;
 _glVertexAttribPointer(($7|0),4,5121,1,0,(0|0));
 $8 = HEAP32[7304>>2]|0;
 $9 = HEAP32[((7304 + 4|0))>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $8;
 $vararg_ptr1 = (($vararg_buffer6) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $9;
 _TraceLog(0,7840,$vararg_buffer6);
 _glGenBuffers(2,(7312|0));
 $10 = HEAP32[7312>>2]|0;
 _glBindBuffer(34962,($10|0));
 $11 = HEAP32[6712>>2]|0;
 _glBufferData(34962,73728,($11|0),35048);
 $12 = HEAP32[7072>>2]|0;
 _glEnableVertexAttribArray(($12|0));
 $13 = HEAP32[7072>>2]|0;
 _glVertexAttribPointer(($13|0),3,5126,0,0,(0|0));
 $14 = HEAP32[((7312 + 4|0))>>2]|0;
 _glBindBuffer(34962,($14|0));
 $15 = HEAP32[6720>>2]|0;
 _glBufferData(34962,24576,($15|0),35048);
 $16 = HEAP32[7120>>2]|0;
 _glEnableVertexAttribArray(($16|0));
 $17 = HEAP32[7120>>2]|0;
 _glVertexAttribPointer(($17|0),4,5121,1,0,(0|0));
 $18 = HEAP32[7312>>2]|0;
 $19 = HEAP32[((7312 + 4|0))>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $18;
 $vararg_ptr5 = (($vararg_buffer6) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $19;
 _TraceLog(0,7904,$vararg_buffer6);
 _glGenBuffers(4,(7320|0));
 $20 = HEAP32[7320>>2]|0;
 _glBindBuffer(34962,($20|0));
 $21 = HEAP32[6752>>2]|0;
 _glBufferData(34962,49152,($21|0),35048);
 $22 = HEAP32[7072>>2]|0;
 _glEnableVertexAttribArray(($22|0));
 $23 = HEAP32[7072>>2]|0;
 _glVertexAttribPointer(($23|0),3,5126,0,0,(0|0));
 $24 = HEAP32[((7320 + 4|0))>>2]|0;
 _glBindBuffer(34962,($24|0));
 $25 = HEAP32[6760>>2]|0;
 _glBufferData(34962,32768,($25|0),35048);
 $26 = HEAP32[7096>>2]|0;
 _glEnableVertexAttribArray(($26|0));
 $27 = HEAP32[7096>>2]|0;
 _glVertexAttribPointer(($27|0),2,5126,0,0,(0|0));
 $28 = HEAP32[((7320 + 8|0))>>2]|0;
 _glBindBuffer(34962,($28|0));
 $29 = HEAP32[6768>>2]|0;
 _glBufferData(34962,16384,($29|0),35048);
 $30 = HEAP32[7120>>2]|0;
 _glEnableVertexAttribArray(($30|0));
 $31 = HEAP32[7120>>2]|0;
 _glVertexAttribPointer(($31|0),4,5121,1,0,(0|0));
 $32 = HEAP32[((7320 + 12|0))>>2]|0;
 _glBindBuffer(34963,($32|0));
 $33 = HEAP32[6776>>2]|0;
 _glBufferData(34963,12288,($33|0),35044);
 $34 = HEAP32[7320>>2]|0;
 $35 = HEAP32[((7320 + 4|0))>>2]|0;
 $36 = HEAP32[((7320 + 8|0))>>2]|0;
 $37 = HEAP32[((7320 + 12|0))>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $34;
 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $35;
 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
 HEAP32[$vararg_ptr10>>2] = $36;
 $vararg_ptr11 = (($vararg_buffer6) + 12|0);
 HEAP32[$vararg_ptr11>>2] = $37;
 _TraceLog(0,7968,$vararg_buffer6);
 STACKTOP = sp;return;
}
function _rlglLoadTexture($data,$width,$height,$genMipmaps) {
 $data = $data|0;
 $width = $width|0;
 $height = $height|0;
 $genMipmaps = $genMipmaps|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $not$ = 0, $or$cond = 0, $or$cond1 = 0, $texIsPOT$0 = 0, $vararg_buffer4 = 0;
 var $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp;
 $id = sp + 12|0;
 _glBindTexture(3553,0);
 _glGenTextures(1,($id|0));
 $0 = HEAP32[$id>>2]|0;
 _glBindTexture(3553,($0|0));
 _glTexParameteri(3553,10242,10497);
 _glTexParameteri(3553,10243,10497);
 $1 = ($width|0)>(0);
 if ($1) {
  $2 = (($width) + -1)|0;
  $3 = $2 & $width;
  $4 = ($3|0)==(0);
  $5 = ($height|0)>(0);
  $or$cond = $4 & $5;
  if ($or$cond) {
   $6 = (($height) + -1)|0;
   $7 = $6 & $height;
   $not$ = ($7|0)!=(0);
   $texIsPOT$0 = $not$;
  } else {
   $texIsPOT$0 = 1;
  }
 } else {
  $texIsPOT$0 = 1;
 }
 $8 = ($genMipmaps|0)!=(0);
 $or$cond1 = $8 & $texIsPOT$0;
 if ($or$cond1) {
  $9 = HEAP32[$id>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $9;
  _TraceLog(2,7384,$vararg_buffer4);
  label = 8;
 } else {
  $10 = ($genMipmaps|0)==(0);
  if ($10) {
   label = 8;
  } else {
   _glTexParameteri(3553,10240,9729);
   _glTexParameteri(3553,10241,9987);
   _glTexImage2D(3553,0,6408,($width|0),($height|0),0,6408,5121,($data|0));
   _glGenerateMipmap(3553);
   $11 = HEAP32[$id>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $11;
   _TraceLog(0,7456,$vararg_buffer4);
  }
 }
 if ((label|0) == 8) {
  _glTexParameteri(3553,10240,9728);
  _glTexParameteri(3553,10241,9728);
  _glTexImage2D(3553,0,6408,($width|0),($height|0),0,6408,5121,($data|0));
 }
 _glBindTexture(3553,0);
 $12 = HEAP32[$id>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $12;
 $vararg_ptr7 = (($vararg_buffer4) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $width;
 $vararg_ptr8 = (($vararg_buffer4) + 8|0);
 HEAP32[$vararg_ptr8>>2] = $height;
 _TraceLog(0,7520,$vararg_buffer4);
 $13 = HEAP32[$id>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _rlglClose() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _glDisableVertexAttribArray(0);
 _glDisableVertexAttribArray(1);
 _glDisableVertexAttribArray(2);
 _glDisableVertexAttribArray(3);
 _glBindBuffer(34962,0);
 _glBindBuffer(34963,0);
 _glUseProgram(0);
 _glDeleteBuffers(1,(7304|0));
 _glDeleteBuffers(1,(((7304 + 4|0))|0));
 _glDeleteBuffers(1,(7312|0));
 _glDeleteBuffers(1,(((7312 + 4|0))|0));
 _glDeleteBuffers(1,(7320|0));
 _glDeleteBuffers(1,(((7320 + 4|0))|0));
 _glDeleteBuffers(1,(((7320 + 8|0))|0));
 _glDeleteBuffers(1,(((7320 + 12|0))|0));
 $0 = HEAP32[7048>>2]|0;
 _glDeleteProgram(($0|0));
 $1 = HEAP32[6680>>2]|0;
 _free($1);
 $2 = HEAP32[6688>>2]|0;
 _free($2);
 $3 = HEAP32[6712>>2]|0;
 _free($3);
 $4 = HEAP32[6720>>2]|0;
 _free($4);
 $5 = HEAP32[6752>>2]|0;
 _free($5);
 $6 = HEAP32[6760>>2]|0;
 _free($6);
 $7 = HEAP32[6768>>2]|0;
 _free($7);
 $8 = HEAP32[6776>>2]|0;
 _free($8);
 _glDeleteTextures(1,(_whiteTexture|0));
 $9 = HEAP32[6856>>2]|0;
 _free($9);
 STACKTOP = sp;return;
}
function _rlglDraw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$02 = 0, $indicesOffset$01 = 0, $modelview$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $modelview$byval_copy = sp;
 _UpdateBuffers();
 $0 = HEAP32[7048>>2]|0;
 _glUseProgram(($0|0));
 $1 = HEAP32[7176>>2]|0;
 dest=$modelview$byval_copy+0|0; src=5416+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $2 = (_GetMatrixVector($modelview$byval_copy)|0);
 _glUniformMatrix4fv(($1|0),1,0,($2|0));
 $3 = HEAP32[7144>>2]|0;
 dest=$modelview$byval_copy+0|0; src=5488+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = (_GetMatrixVector($modelview$byval_copy)|0);
 _glUniformMatrix4fv(($3|0),1,0,($4|0));
 $5 = HEAP32[7200>>2]|0;
 _glUniform1i(($5|0),0);
 $6 = HEAP32[6696>>2]|0;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = HEAP32[_whiteTexture>>2]|0;
  _glBindTexture(3553,($8|0));
  $9 = HEAP32[7312>>2]|0;
  _glBindBuffer(34962,($9|0));
  $10 = HEAP32[7072>>2]|0;
  _glVertexAttribPointer(($10|0),3,5126,0,0,(0|0));
  $11 = HEAP32[7072>>2]|0;
  _glEnableVertexAttribArray(($11|0));
  $12 = HEAP32[((7312 + 4|0))>>2]|0;
  _glBindBuffer(34962,($12|0));
  $13 = HEAP32[7120>>2]|0;
  _glVertexAttribPointer(($13|0),4,5121,1,0,(0|0));
  $14 = HEAP32[7120>>2]|0;
  _glEnableVertexAttribArray(($14|0));
  $15 = HEAP32[6696>>2]|0;
  _glDrawArrays(4,0,($15|0));
  _glBindBuffer(34962,0);
  _glBindTexture(3553,0);
 }
 $16 = HEAP32[6728>>2]|0;
 $17 = ($16|0)>(0);
 if ($17) {
  $18 = HEAP32[7320>>2]|0;
  _glBindBuffer(34962,($18|0));
  $19 = HEAP32[7072>>2]|0;
  _glVertexAttribPointer(($19|0),3,5126,0,0,(0|0));
  $20 = HEAP32[7072>>2]|0;
  _glEnableVertexAttribArray(($20|0));
  $21 = HEAP32[((7320 + 4|0))>>2]|0;
  _glBindBuffer(34962,($21|0));
  $22 = HEAP32[7096>>2]|0;
  _glVertexAttribPointer(($22|0),2,5126,0,0,(0|0));
  $23 = HEAP32[7096>>2]|0;
  _glEnableVertexAttribArray(($23|0));
  $24 = HEAP32[((7320 + 8|0))>>2]|0;
  _glBindBuffer(34962,($24|0));
  $25 = HEAP32[7120>>2]|0;
  _glVertexAttribPointer(($25|0),4,5121,1,0,(0|0));
  $26 = HEAP32[7120>>2]|0;
  _glEnableVertexAttribArray(($26|0));
  $27 = HEAP32[((7320 + 12|0))>>2]|0;
  _glBindBuffer(34963,($27|0));
  $28 = HEAP32[6848>>2]|0;
  $29 = ($28|0)>(0);
  if ($29) {
   $i$02 = 0;$indicesOffset$01 = 0;
   while(1) {
    $30 = HEAP32[6856>>2]|0;
    $31 = ((($30) + ($i$02<<3)|0) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32|0) / 4)&-1;
    $34 = ($33*6)|0;
    $35 = (($30) + ($i$02<<3)|0);
    $36 = HEAP32[$35>>2]|0;
    _glBindTexture(3553,($36|0));
    $37 = $indicesOffset$01 << 1;
    $38 = $37;
    _glDrawElements(4,($34|0),5123,($38|0));
    $39 = HEAP32[6856>>2]|0;
    $40 = ((($39) + ($i$02<<3)|0) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41|0) / 4)&-1;
    $43 = ($42*6)|0;
    $44 = (($43) + ($indicesOffset$01))|0;
    $45 = (($i$02) + 1)|0;
    $46 = HEAP32[6848>>2]|0;
    $47 = ($45|0)<($46|0);
    if ($47) {
     $i$02 = $45;$indicesOffset$01 = $44;
    } else {
     break;
    }
   }
  }
  _glBindBuffer(34962,0);
  _glBindBuffer(34963,0);
  _glBindTexture(3553,0);
 }
 $48 = HEAP32[6664>>2]|0;
 $49 = ($48|0)>(0);
 if (!($49)) {
  HEAP32[6848>>2] = 1;
  $58 = HEAP32[_whiteTexture>>2]|0;
  $59 = HEAP32[6856>>2]|0;
  HEAP32[$59>>2] = $58;
  $60 = HEAP32[6856>>2]|0;
  $61 = (($60) + 4|0);
  HEAP32[$61>>2] = 0;
  HEAP32[6664>>2] = 0;
  HEAP32[6672>>2] = 0;
  HEAP32[6696>>2] = 0;
  HEAP32[6704>>2] = 0;
  HEAP32[6728>>2] = 0;
  HEAP32[6736>>2] = 0;
  HEAP32[6744>>2] = 0;
  STACKTOP = sp;return;
 }
 $50 = HEAP32[_whiteTexture>>2]|0;
 _glBindTexture(3553,($50|0));
 $51 = HEAP32[7304>>2]|0;
 _glBindBuffer(34962,($51|0));
 $52 = HEAP32[7072>>2]|0;
 _glVertexAttribPointer(($52|0),3,5126,0,0,(0|0));
 $53 = HEAP32[7072>>2]|0;
 _glEnableVertexAttribArray(($53|0));
 $54 = HEAP32[((7304 + 4|0))>>2]|0;
 _glBindBuffer(34962,($54|0));
 $55 = HEAP32[7120>>2]|0;
 _glVertexAttribPointer(($55|0),4,5121,1,0,(0|0));
 $56 = HEAP32[7120>>2]|0;
 _glEnableVertexAttribArray(($56|0));
 $57 = HEAP32[6664>>2]|0;
 _glDrawArrays(1,0,($57|0));
 _glBindBuffer(34962,0);
 _glBindTexture(3553,0);
 HEAP32[6848>>2] = 1;
 $58 = HEAP32[_whiteTexture>>2]|0;
 $59 = HEAP32[6856>>2]|0;
 HEAP32[$59>>2] = $58;
 $60 = HEAP32[6856>>2]|0;
 $61 = (($60) + 4|0);
 HEAP32[$61>>2] = 0;
 HEAP32[6664>>2] = 0;
 HEAP32[6672>>2] = 0;
 HEAP32[6696>>2] = 0;
 HEAP32[6704>>2] = 0;
 HEAP32[6728>>2] = 0;
 HEAP32[6736>>2] = 0;
 HEAP32[6744>>2] = 0;
 STACKTOP = sp;return;
}
function _UpdateBuffers() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7304>>2]|0;
 _glBindBuffer(34962,($0|0));
 $1 = HEAP32[6664>>2]|0;
 $2 = ($1*12)|0;
 $3 = HEAP32[6680>>2]|0;
 _glBufferSubData(34962,0,($2|0),($3|0));
 $4 = HEAP32[((7304 + 4|0))>>2]|0;
 _glBindBuffer(34962,($4|0));
 $5 = HEAP32[6672>>2]|0;
 $6 = $5 << 2;
 $7 = HEAP32[6688>>2]|0;
 _glBufferSubData(34962,0,($6|0),($7|0));
 $8 = HEAP32[7312>>2]|0;
 _glBindBuffer(34962,($8|0));
 $9 = HEAP32[6696>>2]|0;
 $10 = ($9*12)|0;
 $11 = HEAP32[6712>>2]|0;
 _glBufferSubData(34962,0,($10|0),($11|0));
 $12 = HEAP32[((7312 + 4|0))>>2]|0;
 _glBindBuffer(34962,($12|0));
 $13 = HEAP32[6704>>2]|0;
 $14 = $13 << 2;
 $15 = HEAP32[6720>>2]|0;
 _glBufferSubData(34962,0,($14|0),($15|0));
 $16 = HEAP32[7320>>2]|0;
 _glBindBuffer(34962,($16|0));
 $17 = HEAP32[6728>>2]|0;
 $18 = ($17*12)|0;
 $19 = HEAP32[6752>>2]|0;
 _glBufferSubData(34962,0,($18|0),($19|0));
 $20 = HEAP32[((7320 + 4|0))>>2]|0;
 _glBindBuffer(34962,($20|0));
 $21 = HEAP32[6728>>2]|0;
 $22 = $21 << 3;
 $23 = HEAP32[6760>>2]|0;
 _glBufferSubData(34962,0,($22|0),($23|0));
 $24 = HEAP32[((7320 + 8|0))>>2]|0;
 _glBindBuffer(34962,($24|0));
 $25 = HEAP32[6728>>2]|0;
 $26 = $25 << 2;
 $27 = HEAP32[6768>>2]|0;
 _glBufferSubData(34962,0,($26|0),($27|0));
 STACKTOP = sp;return;
}
function _rlglDrawModel($model,$position,$rotation,$scale,$color,$wires) {
 $model = $model|0;
 $position = $position|0;
 $rotation = $rotation|0;
 $scale = $scale|0;
 $color = $color|0;
 $wires = $wires|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $modelviewworld$byval_copy = 0, $position$byval_copy = 0, $transform = 0, $transform$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $modelviewworld$byval_copy = sp + 192|0;
 $transform$byval_copy = sp;
 $position$byval_copy = sp + 64|0;
 $transform = sp + 128|0;
 $0 = HEAP32[7048>>2]|0;
 _glUseProgram(($0|0));
 _VectorScale($rotation,0.0174532923847436904907);
 ;HEAP32[$position$byval_copy+0>>2]=HEAP32[$position+0>>2]|0;HEAP32[$position$byval_copy+4>>2]=HEAP32[$position+4>>2]|0;HEAP32[$position$byval_copy+8>>2]=HEAP32[$position+8>>2]|0;
 ;HEAP32[$transform$byval_copy+0>>2]=HEAP32[$rotation+0>>2]|0;HEAP32[$transform$byval_copy+4>>2]=HEAP32[$rotation+4>>2]|0;HEAP32[$transform$byval_copy+8>>2]=HEAP32[$rotation+8>>2]|0;
 ;HEAP32[$modelviewworld$byval_copy+0>>2]=HEAP32[$scale+0>>2]|0;HEAP32[$modelviewworld$byval_copy+4>>2]=HEAP32[$scale+4>>2]|0;HEAP32[$modelviewworld$byval_copy+8>>2]=HEAP32[$scale+8>>2]|0;
 _MatrixTransform($transform,$position$byval_copy,$transform$byval_copy,$modelviewworld$byval_copy);
 dest=$transform$byval_copy+0|0; src=$transform+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$modelviewworld$byval_copy+0|0; src=5488+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($position$byval_copy,$transform$byval_copy,$modelviewworld$byval_copy);
 $1 = HEAP32[7176>>2]|0;
 dest=$modelviewworld$byval_copy+0|0; src=5416+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $2 = (_GetMatrixVector($modelviewworld$byval_copy)|0);
 _glUniformMatrix4fv(($1|0),1,0,($2|0));
 $3 = HEAP32[7144>>2]|0;
 dest=$modelviewworld$byval_copy+0|0; src=$position$byval_copy+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = (_GetMatrixVector($modelviewworld$byval_copy)|0);
 _glUniformMatrix4fv(($3|0),1,0,($4|0));
 $5 = HEAP32[7200>>2]|0;
 _glUniform1i(($5|0),0);
 $6 = (($model) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 _glBindBuffer(34962,($7|0));
 $8 = HEAP32[7072>>2]|0;
 _glVertexAttribPointer(($8|0),3,5126,0,0,(0|0));
 $9 = HEAP32[7072>>2]|0;
 _glEnableVertexAttribArray(($9|0));
 $10 = (($model) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 _glBindBuffer(34962,($11|0));
 $12 = HEAP32[7096>>2]|0;
 _glVertexAttribPointer(($12|0),2,5126,0,0,(0|0));
 $13 = HEAP32[7096>>2]|0;
 _glEnableVertexAttribArray(($13|0));
 $14 = (($model) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 _glBindBuffer(34962,($15|0));
 $16 = HEAP32[7120>>2]|0;
 _glVertexAttribPointer(($16|0),4,5121,1,0,(0|0));
 $17 = HEAP32[7120>>2]|0;
 _glEnableVertexAttribArray(($17|0));
 $18 = (($model) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 _glBindTexture(3553,($19|0));
 $20 = HEAP32[$model>>2]|0;
 _glDrawArrays(4,0,($20|0));
 _glBindTexture(3553,0);
 _glBindBuffer(34962,0);
 STACKTOP = sp;return;
}
function _rlglInitGraphics($offsetX,$offsetY,$width,$height) {
 $offsetX = $offsetX|0;
 $offsetY = $offsetY|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($offsetX|0) / 2)&-1;
 $1 = (($offsetY|0) / 2)&-1;
 $2 = (($width) - ($offsetX))|0;
 $3 = (($height) - ($offsetY))|0;
 _glViewport(($0|0),($1|0),($2|0),($3|0));
 _glClear(16640);
 _glClearColor(0.0,0.0,0.0,1.0);
 _glEnable(2929);
 _glDepthFunc(515);
 _glEnable(3042);
 _glBlendFunc(770,771);
 _rlMatrixMode(0);
 _rlLoadIdentity();
 $4 = (+($2|0));
 $5 = (+($3|0));
 _rlOrtho(0.0,$4,$5,0.0,0.0,1.0);
 _rlMatrixMode(1);
 _rlLoadIdentity();
 _glEnable(2884);
 _TraceLog(0,7336,$vararg_buffer);
 STACKTOP = sp;return;
}
function _rlglLoadModel($agg$result,$mesh) {
 $agg$result = $agg$result|0;
 $mesh = $mesh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $model$sroa$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vertexBuffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 24|0;
 $model$sroa$0 = sp;
 $vertexBuffer = sp + 36|0;
 ;HEAP32[$model$sroa$0+0>>2]=HEAP32[$mesh+0>>2]|0;HEAP32[$model$sroa$0+4>>2]=HEAP32[$mesh+4>>2]|0;HEAP32[$model$sroa$0+8>>2]=HEAP32[$mesh+8>>2]|0;HEAP32[$model$sroa$0+12>>2]=HEAP32[$mesh+12>>2]|0;HEAP32[$model$sroa$0+16>>2]=HEAP32[$mesh+16>>2]|0;
 _glGenBuffers(3,($vertexBuffer|0));
 $0 = HEAP32[$vertexBuffer>>2]|0;
 _glBindBuffer(34962,($0|0));
 $1 = HEAP32[$mesh>>2]|0;
 $2 = ($1*12)|0;
 $3 = (($mesh) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _glBufferData(34962,($2|0),($4|0),35044);
 $5 = HEAP32[7072>>2]|0;
 _glEnableVertexAttribArray(($5|0));
 $6 = HEAP32[7072>>2]|0;
 _glVertexAttribPointer(($6|0),3,5126,0,0,(0|0));
 $7 = (($vertexBuffer) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 _glBindBuffer(34962,($8|0));
 $9 = HEAP32[$mesh>>2]|0;
 $10 = $9 << 3;
 $11 = (($mesh) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 _glBufferData(34962,($10|0),($12|0),35044);
 $13 = HEAP32[7096>>2]|0;
 _glEnableVertexAttribArray(($13|0));
 $14 = HEAP32[7096>>2]|0;
 _glVertexAttribPointer(($14|0),2,5126,0,0,(0|0));
 $15 = (($vertexBuffer) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 _glBindBuffer(34962,($16|0));
 $17 = HEAP32[$mesh>>2]|0;
 $18 = $17 << 2;
 $19 = (($mesh) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 _glBufferData(34962,($18|0),($20|0),35044);
 $21 = HEAP32[7120>>2]|0;
 _glEnableVertexAttribArray(($21|0));
 $22 = HEAP32[7120>>2]|0;
 _glVertexAttribPointer(($22|0),4,5121,1,0,(0|0));
 $23 = HEAP32[$vertexBuffer>>2]|0;
 $24 = HEAP32[$7>>2]|0;
 $25 = HEAP32[$15>>2]|0;
 HEAP32[$vararg_buffer>>2] = $23;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $24;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $25;
 _TraceLog(0,7576,$vararg_buffer);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$model$sroa$0+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$model$sroa$0+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$model$sroa$0+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$model$sroa$0+12>>2]|0;HEAP32[$agg$result+16>>2]=HEAP32[$model$sroa$0+16>>2]|0;
 $26 = (($agg$result) + 24|0);
 HEAP32[$26>>2] = $23;
 $27 = (($agg$result) + 28|0);
 HEAP32[$27>>2] = $24;
 $28 = (($agg$result) + 32|0);
 HEAP32[$28>>2] = $25;
 $29 = (($agg$result) + 40|0);
 HEAP32[$29>>2] = 1;
 STACKTOP = sp;return;
}
function _rlglLoadCompressedTexture($data,$width,$height,$mipmapCount,$compFormat) {
 $data = $data|0;
 $width = $width|0;
 $height = $height|0;
 $mipmapCount = $mipmapCount|0;
 $compFormat = $compFormat|0;
 var $$ = 0, $$025 = 0, $$06 = 0, $$10 = 0, $$13 = 0, $$4 = 0, $$9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $id = 0, $level$08 = 0;
 var $offset$07 = 0, $size$0 = 0, $vararg_buffer10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp;
 $id = sp + 4|0;
 HEAP32[$vararg_buffer10>>2] = $width;
 _TraceLog(3,7656,$vararg_buffer10);
 HEAP32[$vararg_buffer10>>2] = $height;
 _TraceLog(3,7688,$vararg_buffer10);
 HEAP32[$vararg_buffer10>>2] = $mipmapCount;
 _TraceLog(3,7720,$vararg_buffer10);
 HEAP32[$vararg_buffer10>>2] = $compFormat;
 _TraceLog(3,7760,$vararg_buffer10);
 $0 = ($compFormat|0)==(0);
 if ($0) {
  HEAP32[$id>>2] = 0;
  HEAP32[$vararg_buffer10>>2] = 0;
  _TraceLog(2,7792,$vararg_buffer10);
  $29 = HEAP32[$id>>2]|0;
  STACKTOP = sp;return ($29|0);
 }
 _glGenTextures(1,($id|0));
 $1 = HEAP32[$id>>2]|0;
 _glBindTexture(3553,($1|0));
 _glPixelStorei(3317,1);
 _glTexParameteri(3553,10242,33071);
 _glTexParameteri(3553,10243,33071);
 $2 = ($mipmapCount|0)>(1);
 if ($2) {
  _glTexParameteri(3553,10240,9729);
  _glTexParameteri(3553,10241,9987);
  $3 = ($compFormat|0)==(33777);
  $$9 = $3 ? 8 : 16;
  $$10 = $$9;$30 = $3;
 } else {
  _glTexParameteri(3553,10240,9728);
  _glTexParameteri(3553,10241,9728);
  $4 = ($compFormat|0)==(33777);
  $$ = $4 ? 8 : 16;
  $5 = ($mipmapCount|0)>(0);
  if ($5) {
   $$10 = $$;$30 = $4;
  } else {
   $29 = HEAP32[$id>>2]|0;
   STACKTOP = sp;return ($29|0);
  }
 }
 $6 = ($compFormat|0)==(36196);
 $$025 = $height;$$06 = $width;$level$08 = 0;$offset$07 = 0;
 while(1) {
  $7 = $$06 | $$025;
  $8 = ($7|0)==(0);
  if ($8) {
   label = 13;
   break;
  }
  if ($30) {
   $9 = (($$06) + 3)|0;
   $10 = (($9|0) / 4)&-1;
   $11 = (($$025) + 3)|0;
   $12 = (($11|0) / 4)&-1;
   $13 = Math_imul($10, $$10)|0;
   $14 = Math_imul($13, $12)|0;
   $size$0 = $14;
  } else {
   if ($6) {
    $15 = (($$06) + 3)|0;
    $16 = $15 >> 2;
    $17 = (($$025) + 3)|0;
    $18 = $17 >>> 2;
    $19 = $18 << 3;
    $20 = Math_imul($19, $16)|0;
    $size$0 = $20;
   } else {
    $size$0 = 0;
   }
  }
  $21 = (($data) + ($offset$07)|0);
  _glCompressedTexImage2D(3553,($level$08|0),($compFormat|0),($$06|0),($$025|0),0,($size$0|0),($21|0));
  $22 = (($size$0) + ($offset$07))|0;
  $23 = (($$06|0) / 2)&-1;
  $24 = (($$025|0) / 2)&-1;
  $25 = ($$06|0)<(2);
  $$4 = $25 ? 1 : $23;
  $26 = ($$025|0)<(2);
  $$13 = $26 ? 1 : $24;
  $27 = (($level$08) + 1)|0;
  $28 = ($27|0)<($mipmapCount|0);
  if ($28) {
   $$025 = $$13;$$06 = $$4;$level$08 = $27;$offset$07 = $22;
  } else {
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  $29 = HEAP32[$id>>2]|0;
  STACKTOP = sp;return ($29|0);
 }
 return 0|0;
}
function _VectorSubtract($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$v1>>2];
 $1 = +HEAPF32[$v2>>2];
 $2 = $0 - $1;
 $3 = (($v1) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = (($v2) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $4 - $6;
 $8 = (($v1) + 8|0);
 $9 = +HEAPF32[$8>>2];
 $10 = (($v2) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $9 - $11;
 HEAPF32[$agg$result>>2] = $2;
 $13 = (($agg$result) + 4|0);
 HEAPF32[$13>>2] = $7;
 $14 = (($agg$result) + 8|0);
 HEAPF32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _VectorCrossProduct($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($v1) + 4|0);
 $1 = +HEAPF32[$0>>2];
 $2 = (($v2) + 8|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $1 * $3;
 $5 = (($v1) + 8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (($v2) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 $10 = $4 - $9;
 $11 = +HEAPF32[$v2>>2];
 $12 = $6 * $11;
 $13 = +HEAPF32[$v1>>2];
 $14 = $3 * $13;
 $15 = $12 - $14;
 $16 = $8 * $13;
 $17 = $1 * $11;
 $18 = $16 - $17;
 HEAPF32[$agg$result>>2] = $10;
 $19 = (($agg$result) + 4|0);
 HEAPF32[$19>>2] = $15;
 $20 = (($agg$result) + 8|0);
 HEAPF32[$20>>2] = $18;
 STACKTOP = sp;return;
}
function _VectorLength($v) {
 $v = $v|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$v>>2];
 $1 = $0 * $0;
 $2 = (($v) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3 * $3;
 $5 = $1 + $4;
 $6 = (($v) + 8|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7 * $7;
 $9 = $5 + $8;
 $10 = (+Math_sqrt((+$9)));
 STACKTOP = sp;return (+$10);
}
function _VectorScale($v,$scale) {
 $v = $v|0;
 $scale = +$scale;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$v>>2];
 $1 = $0 * $scale;
 HEAPF32[$v>>2] = $1;
 $2 = (($v) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3 * $scale;
 HEAPF32[$2>>2] = $4;
 $5 = (($v) + 8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $6 * $scale;
 HEAPF32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function _VectorNormalize($v) {
 $v = $v|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $length$0 = 0.0, $v$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v$byval_copy = sp;
 ;HEAP32[$v$byval_copy+0>>2]=HEAP32[$v+0>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;HEAP32[$v$byval_copy+8>>2]=HEAP32[$v+8>>2]|0;
 $0 = (+_VectorLength($v$byval_copy));
 $1 = $0 == 0.0;
 $length$0 = $1 ? 1.0 : $0;
 $2 = 1.0 / $length$0;
 $3 = +HEAPF32[$v>>2];
 $4 = $2 * $3;
 HEAPF32[$v>>2] = $4;
 $5 = (($v) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $2 * $6;
 HEAPF32[$5>>2] = $7;
 $8 = (($v) + 8|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $2 * $9;
 HEAPF32[$8>>2] = $10;
 STACKTOP = sp;return;
}
function _VectorTransform($v,$mat) {
 $v = $v|0;
 $mat = $mat|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$v>>2];
 $1 = (($v) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (($v) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$mat>>2];
 $6 = $0 * $5;
 $7 = (($mat) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $2 * $8;
 $10 = $6 + $9;
 $11 = (($mat) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $4 * $12;
 $14 = $10 + $13;
 $15 = (($mat) + 12|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $16 + $14;
 HEAPF32[$v>>2] = $17;
 $18 = (($mat) + 16|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $0 * $19;
 $21 = (($mat) + 20|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $2 * $22;
 $24 = $20 + $23;
 $25 = (($mat) + 24|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $4 * $26;
 $28 = $24 + $27;
 $29 = (($mat) + 28|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $30 + $28;
 HEAPF32[$1>>2] = $31;
 $32 = (($mat) + 32|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $0 * $33;
 $35 = (($mat) + 36|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $2 * $36;
 $38 = $34 + $37;
 $39 = (($mat) + 40|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $4 * $40;
 $42 = $38 + $41;
 $43 = (($mat) + 44|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $44 + $42;
 HEAPF32[$3>>2] = $45;
 STACKTOP = sp;return;
}
function _VectorZero($agg$result) {
 $agg$result = $agg$result|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function _GetMatrixVector($mat) {
 $mat = $mat|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$mat>>2];
 HEAPF32[9344>>2] = $0;
 $1 = (($mat) + 4|0);
 $2 = +HEAPF32[$1>>2];
 HEAPF32[((9344 + 4|0))>>2] = $2;
 $3 = (($mat) + 8|0);
 $4 = +HEAPF32[$3>>2];
 HEAPF32[((9344 + 8|0))>>2] = $4;
 $5 = (($mat) + 12|0);
 $6 = +HEAPF32[$5>>2];
 HEAPF32[((9344 + 12|0))>>2] = $6;
 $7 = (($mat) + 16|0);
 $8 = +HEAPF32[$7>>2];
 HEAPF32[((9344 + 16|0))>>2] = $8;
 $9 = (($mat) + 20|0);
 $10 = +HEAPF32[$9>>2];
 HEAPF32[((9344 + 20|0))>>2] = $10;
 $11 = (($mat) + 24|0);
 $12 = +HEAPF32[$11>>2];
 HEAPF32[((9344 + 24|0))>>2] = $12;
 $13 = (($mat) + 28|0);
 $14 = +HEAPF32[$13>>2];
 HEAPF32[((9344 + 28|0))>>2] = $14;
 $15 = (($mat) + 32|0);
 $16 = +HEAPF32[$15>>2];
 HEAPF32[((9344 + 32|0))>>2] = $16;
 $17 = (($mat) + 36|0);
 $18 = +HEAPF32[$17>>2];
 HEAPF32[((9344 + 36|0))>>2] = $18;
 $19 = (($mat) + 40|0);
 $20 = +HEAPF32[$19>>2];
 HEAPF32[((9344 + 40|0))>>2] = $20;
 $21 = (($mat) + 44|0);
 $22 = +HEAPF32[$21>>2];
 HEAPF32[((9344 + 44|0))>>2] = $22;
 $23 = (($mat) + 48|0);
 $24 = +HEAPF32[$23>>2];
 HEAPF32[((9344 + 48|0))>>2] = $24;
 $25 = (($mat) + 52|0);
 $26 = +HEAPF32[$25>>2];
 HEAPF32[((9344 + 52|0))>>2] = $26;
 $27 = (($mat) + 56|0);
 $28 = +HEAPF32[$27>>2];
 HEAPF32[((9344 + 56|0))>>2] = $28;
 $29 = (($mat) + 60|0);
 $30 = +HEAPF32[$29>>2];
 HEAPF32[((9344 + 60|0))>>2] = $30;
 STACKTOP = sp;return (9344|0);
}
function _MatrixTranspose($mat) {
 $mat = $mat|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0;
 var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($mat) + 4|0);
 $1 = +HEAPF32[$0>>2];
 $2 = (($mat) + 8|0);
 $3 = +HEAPF32[$2>>2];
 $4 = (($mat) + 12|0);
 $5 = +HEAPF32[$4>>2];
 $6 = (($mat) + 16|0);
 $7 = +HEAPF32[$6>>2];
 $8 = (($mat) + 24|0);
 $9 = +HEAPF32[$8>>2];
 $10 = (($mat) + 28|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (($mat) + 32|0);
 $13 = +HEAPF32[$12>>2];
 $14 = (($mat) + 36|0);
 $15 = +HEAPF32[$14>>2];
 $16 = (($mat) + 44|0);
 $17 = +HEAPF32[$16>>2];
 $18 = (($mat) + 48|0);
 $19 = +HEAPF32[$18>>2];
 $20 = (($mat) + 52|0);
 $21 = +HEAPF32[$20>>2];
 $22 = (($mat) + 56|0);
 $23 = +HEAPF32[$22>>2];
 HEAPF32[$0>>2] = $7;
 HEAPF32[$2>>2] = $13;
 HEAPF32[$4>>2] = $19;
 HEAPF32[$6>>2] = $1;
 HEAPF32[$8>>2] = $15;
 HEAPF32[$10>>2] = $21;
 HEAPF32[$12>>2] = $3;
 HEAPF32[$14>>2] = $9;
 HEAPF32[$16>>2] = $23;
 HEAPF32[$18>>2] = $5;
 HEAPF32[$20>>2] = $11;
 HEAPF32[$22>>2] = $17;
 STACKTOP = sp;return;
}
function _MatrixIdentity($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $result$sroa$1 = 0, $result$sroa$3 = 0, $result$sroa$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $result$sroa$1 = sp + 32|0;
 $result$sroa$3 = sp;
 $result$sroa$5 = sp + 16|0;
 ;HEAP32[$result$sroa$1+0>>2]=0|0;HEAP32[$result$sroa$1+4>>2]=0|0;HEAP32[$result$sroa$1+8>>2]=0|0;HEAP32[$result$sroa$1+12>>2]=0|0;
 ;HEAP32[$result$sroa$3+0>>2]=0|0;HEAP32[$result$sroa$3+4>>2]=0|0;HEAP32[$result$sroa$3+8>>2]=0|0;HEAP32[$result$sroa$3+12>>2]=0|0;
 ;HEAP32[$result$sroa$5+0>>2]=0|0;HEAP32[$result$sroa$5+4>>2]=0|0;HEAP32[$result$sroa$5+8>>2]=0|0;HEAP32[$result$sroa$5+12>>2]=0|0;
 HEAPF32[$agg$result>>2] = 1.0;
 $0 = (($agg$result) + 4|0);
 ;HEAP32[$0+0>>2]=HEAP32[$result$sroa$1+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$result$sroa$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$result$sroa$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$result$sroa$1+12>>2]|0;
 $1 = (($agg$result) + 20|0);
 HEAPF32[$1>>2] = 1.0;
 $2 = (($agg$result) + 24|0);
 ;HEAP32[$2+0>>2]=HEAP32[$result$sroa$3+0>>2]|0;HEAP32[$2+4>>2]=HEAP32[$result$sroa$3+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$result$sroa$3+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$result$sroa$3+12>>2]|0;
 $3 = (($agg$result) + 40|0);
 HEAPF32[$3>>2] = 1.0;
 $4 = (($agg$result) + 44|0);
 ;HEAP32[$4+0>>2]=HEAP32[$result$sroa$5+0>>2]|0;HEAP32[$4+4>>2]=HEAP32[$result$sroa$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$result$sroa$5+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$result$sroa$5+12>>2]|0;
 $5 = (($agg$result) + 60|0);
 HEAPF32[$5>>2] = 1.0;
 STACKTOP = sp;return;
}
function _MatrixTranslate($agg$result,$x,$y,$z) {
 $agg$result = $agg$result|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$agg$result>>2] = 1.0;
 $0 = (($agg$result) + 4|0);
 $1 = (($agg$result) + 20|0);
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 HEAPF32[$1>>2] = 1.0;
 $2 = (($agg$result) + 24|0);
 $3 = (($agg$result) + 40|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 HEAPF32[$3>>2] = 1.0;
 $4 = (($agg$result) + 44|0);
 HEAPF32[$4>>2] = 0.0;
 $5 = (($agg$result) + 48|0);
 HEAPF32[$5>>2] = $x;
 $6 = (($agg$result) + 52|0);
 HEAPF32[$6>>2] = $y;
 $7 = (($agg$result) + 56|0);
 HEAPF32[$7>>2] = $z;
 $8 = (($agg$result) + 60|0);
 HEAPF32[$8>>2] = 1.0;
 STACKTOP = sp;return;
}
function _MatrixRotate($agg$result,$angleX,$angleY,$angleZ) {
 $agg$result = $agg$result|0;
 $angleX = +$angleX;
 $angleY = +$angleY;
 $angleZ = +$angleZ;
 var $$byval_copy = 0, $0 = 0, $result = 0, $rotX = 0, $rotY = 0, $rotZ = 0, $rotZ$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rotZ$byval_copy = sp + 384|0;
 $$byval_copy = sp;
 $result = sp + 64|0;
 $rotX = sp + 128|0;
 $rotY = sp + 192|0;
 $rotZ = sp + 256|0;
 $0 = sp + 320|0;
 _MatrixRotateX($rotX,$angleX);
 _MatrixRotateY($rotY,$angleY);
 _MatrixRotateZ($rotZ,$angleZ);
 dest=$$byval_copy+0|0; src=$rotX+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$rotZ$byval_copy+0|0; src=$rotY+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($0,$$byval_copy,$rotZ$byval_copy);
 dest=$$byval_copy+0|0; src=$0+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$rotZ$byval_copy+0|0; src=$rotZ+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($result,$$byval_copy,$rotZ$byval_copy);
 dest=$agg$result+0|0; src=$result+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixRotateX($agg$result,$angle) {
 $agg$result = $agg$result|0;
 $angle = +$angle;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $result = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $result = sp;
 _MatrixIdentity($result);
 $0 = $angle;
 $1 = (+Math_cos((+$0)));
 $2 = $1;
 $3 = (+Math_sin((+$0)));
 $4 = $3;
 $5 = (($result) + 20|0);
 HEAPF32[$5>>2] = $2;
 $6 = -$4;
 $7 = (($result) + 36|0);
 HEAPF32[$7>>2] = $6;
 $8 = (($result) + 24|0);
 HEAPF32[$8>>2] = $4;
 $9 = (($result) + 40|0);
 HEAPF32[$9>>2] = $2;
 dest=$agg$result+0|0; src=$result+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixRotateY($agg$result,$angle) {
 $agg$result = $agg$result|0;
 $angle = +$angle;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $result = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $result = sp;
 _MatrixIdentity($result);
 $0 = $angle;
 $1 = (+Math_cos((+$0)));
 $2 = $1;
 $3 = (+Math_sin((+$0)));
 $4 = $3;
 HEAPF32[$result>>2] = $2;
 $5 = (($result) + 32|0);
 HEAPF32[$5>>2] = $4;
 $6 = -$4;
 $7 = (($result) + 8|0);
 HEAPF32[$7>>2] = $6;
 $8 = (($result) + 40|0);
 HEAPF32[$8>>2] = $2;
 dest=$agg$result+0|0; src=$result+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixRotateZ($agg$result,$angle) {
 $agg$result = $agg$result|0;
 $angle = +$angle;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $result = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $result = sp;
 _MatrixIdentity($result);
 $0 = $angle;
 $1 = (+Math_cos((+$0)));
 $2 = $1;
 $3 = (+Math_sin((+$0)));
 $4 = $3;
 HEAPF32[$result>>2] = $2;
 $5 = -$4;
 $6 = (($result) + 16|0);
 HEAPF32[$6>>2] = $5;
 $7 = (($result) + 4|0);
 HEAPF32[$7>>2] = $4;
 $8 = (($result) + 20|0);
 HEAPF32[$8>>2] = $2;
 dest=$agg$result+0|0; src=$result+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixMultiply($agg$result,$left,$right) {
 $agg$result = $agg$result|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0;
 var $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0;
 var $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$left>>2];
 $1 = (($left) + 16|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (($left) + 32|0);
 $4 = +HEAPF32[$3>>2];
 $5 = (($left) + 48|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (($left) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = (($left) + 20|0);
 $10 = +HEAPF32[$9>>2];
 $11 = (($left) + 36|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (($left) + 52|0);
 $14 = +HEAPF32[$13>>2];
 $15 = (($left) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = (($left) + 24|0);
 $18 = +HEAPF32[$17>>2];
 $19 = (($left) + 40|0);
 $20 = +HEAPF32[$19>>2];
 $21 = (($left) + 56|0);
 $22 = +HEAPF32[$21>>2];
 $23 = (($left) + 12|0);
 $24 = +HEAPF32[$23>>2];
 $25 = (($left) + 28|0);
 $26 = +HEAPF32[$25>>2];
 $27 = (($left) + 44|0);
 $28 = +HEAPF32[$27>>2];
 $29 = (($left) + 60|0);
 $30 = +HEAPF32[$29>>2];
 $31 = +HEAPF32[$right>>2];
 $32 = (($right) + 16|0);
 $33 = +HEAPF32[$32>>2];
 $34 = (($right) + 32|0);
 $35 = +HEAPF32[$34>>2];
 $36 = (($right) + 48|0);
 $37 = +HEAPF32[$36>>2];
 $38 = (($right) + 4|0);
 $39 = +HEAPF32[$38>>2];
 $40 = (($right) + 20|0);
 $41 = +HEAPF32[$40>>2];
 $42 = (($right) + 36|0);
 $43 = +HEAPF32[$42>>2];
 $44 = (($right) + 52|0);
 $45 = +HEAPF32[$44>>2];
 $46 = (($right) + 8|0);
 $47 = +HEAPF32[$46>>2];
 $48 = (($right) + 24|0);
 $49 = +HEAPF32[$48>>2];
 $50 = (($right) + 40|0);
 $51 = +HEAPF32[$50>>2];
 $52 = (($right) + 56|0);
 $53 = +HEAPF32[$52>>2];
 $54 = (($right) + 12|0);
 $55 = +HEAPF32[$54>>2];
 $56 = (($right) + 28|0);
 $57 = +HEAPF32[$56>>2];
 $58 = (($right) + 44|0);
 $59 = +HEAPF32[$58>>2];
 $60 = (($right) + 60|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $0 * $31;
 $63 = $8 * $33;
 $64 = $62 + $63;
 $65 = $16 * $35;
 $66 = $64 + $65;
 $67 = $24 * $37;
 $68 = $66 + $67;
 $69 = $2 * $31;
 $70 = $10 * $33;
 $71 = $69 + $70;
 $72 = $18 * $35;
 $73 = $71 + $72;
 $74 = $26 * $37;
 $75 = $73 + $74;
 $76 = $4 * $31;
 $77 = $12 * $33;
 $78 = $76 + $77;
 $79 = $20 * $35;
 $80 = $78 + $79;
 $81 = $28 * $37;
 $82 = $80 + $81;
 $83 = $6 * $31;
 $84 = $14 * $33;
 $85 = $83 + $84;
 $86 = $22 * $35;
 $87 = $85 + $86;
 $88 = $30 * $37;
 $89 = $87 + $88;
 $90 = $0 * $39;
 $91 = $8 * $41;
 $92 = $90 + $91;
 $93 = $16 * $43;
 $94 = $92 + $93;
 $95 = $24 * $45;
 $96 = $94 + $95;
 $97 = $2 * $39;
 $98 = $10 * $41;
 $99 = $97 + $98;
 $100 = $18 * $43;
 $101 = $99 + $100;
 $102 = $26 * $45;
 $103 = $101 + $102;
 $104 = $4 * $39;
 $105 = $12 * $41;
 $106 = $104 + $105;
 $107 = $20 * $43;
 $108 = $106 + $107;
 $109 = $28 * $45;
 $110 = $108 + $109;
 $111 = $6 * $39;
 $112 = $14 * $41;
 $113 = $111 + $112;
 $114 = $22 * $43;
 $115 = $113 + $114;
 $116 = $30 * $45;
 $117 = $115 + $116;
 $118 = $0 * $47;
 $119 = $8 * $49;
 $120 = $118 + $119;
 $121 = $16 * $51;
 $122 = $120 + $121;
 $123 = $24 * $53;
 $124 = $122 + $123;
 $125 = $2 * $47;
 $126 = $10 * $49;
 $127 = $125 + $126;
 $128 = $18 * $51;
 $129 = $127 + $128;
 $130 = $26 * $53;
 $131 = $129 + $130;
 $132 = $4 * $47;
 $133 = $12 * $49;
 $134 = $132 + $133;
 $135 = $20 * $51;
 $136 = $134 + $135;
 $137 = $28 * $53;
 $138 = $136 + $137;
 $139 = $6 * $47;
 $140 = $14 * $49;
 $141 = $139 + $140;
 $142 = $22 * $51;
 $143 = $141 + $142;
 $144 = $30 * $53;
 $145 = $143 + $144;
 $146 = $0 * $55;
 $147 = $8 * $57;
 $148 = $146 + $147;
 $149 = $16 * $59;
 $150 = $148 + $149;
 $151 = $24 * $61;
 $152 = $150 + $151;
 $153 = $2 * $55;
 $154 = $10 * $57;
 $155 = $153 + $154;
 $156 = $18 * $59;
 $157 = $155 + $156;
 $158 = $26 * $61;
 $159 = $157 + $158;
 $160 = $4 * $55;
 $161 = $12 * $57;
 $162 = $160 + $161;
 $163 = $20 * $59;
 $164 = $162 + $163;
 $165 = $28 * $61;
 $166 = $164 + $165;
 $167 = $6 * $55;
 $168 = $14 * $57;
 $169 = $167 + $168;
 $170 = $22 * $59;
 $171 = $169 + $170;
 $172 = $30 * $61;
 $173 = $171 + $172;
 HEAPF32[$agg$result>>2] = $68;
 $174 = (($agg$result) + 4|0);
 HEAPF32[$174>>2] = $96;
 $175 = (($agg$result) + 8|0);
 HEAPF32[$175>>2] = $124;
 $176 = (($agg$result) + 12|0);
 HEAPF32[$176>>2] = $152;
 $177 = (($agg$result) + 16|0);
 HEAPF32[$177>>2] = $75;
 $178 = (($agg$result) + 20|0);
 HEAPF32[$178>>2] = $103;
 $179 = (($agg$result) + 24|0);
 HEAPF32[$179>>2] = $131;
 $180 = (($agg$result) + 28|0);
 HEAPF32[$180>>2] = $159;
 $181 = (($agg$result) + 32|0);
 HEAPF32[$181>>2] = $82;
 $182 = (($agg$result) + 36|0);
 HEAPF32[$182>>2] = $110;
 $183 = (($agg$result) + 40|0);
 HEAPF32[$183>>2] = $138;
 $184 = (($agg$result) + 44|0);
 HEAPF32[$184>>2] = $166;
 $185 = (($agg$result) + 48|0);
 HEAPF32[$185>>2] = $89;
 $186 = (($agg$result) + 52|0);
 HEAPF32[$186>>2] = $117;
 $187 = (($agg$result) + 56|0);
 HEAPF32[$187>>2] = $145;
 $188 = (($agg$result) + 60|0);
 HEAPF32[$188>>2] = $173;
 STACKTOP = sp;return;
}
function _MatrixScale($agg$result,$x,$y,$z) {
 $agg$result = $agg$result|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$agg$result>>2] = $x;
 $0 = (($agg$result) + 4|0);
 $1 = (($agg$result) + 20|0);
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 HEAPF32[$1>>2] = $y;
 $2 = (($agg$result) + 24|0);
 $3 = (($agg$result) + 40|0);
 ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 HEAPF32[$3>>2] = $z;
 $4 = (($agg$result) + 44|0);
 $5 = (($agg$result) + 60|0);
 ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 HEAPF32[$5>>2] = 1.0;
 STACKTOP = sp;return;
}
function _MatrixTransform($agg$result,$translation,$rotation,$scale) {
 $agg$result = $agg$result|0;
 $translation = $translation|0;
 $rotation = $rotation|0;
 $scale = $scale|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $mRotation = 0, $mScale = 0, $mTranslate = 0;
 var $mTranslate$byval_copy = 0, $result = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mTranslate$byval_copy = sp + 384|0;
 $$byval_copy = sp;
 $result = sp + 64|0;
 $mRotation = sp + 128|0;
 $mScale = sp + 192|0;
 $mTranslate = sp + 256|0;
 $0 = sp + 320|0;
 _MatrixIdentity($result);
 $1 = +HEAPF32[$rotation>>2];
 $2 = (($rotation) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = (($rotation) + 8|0);
 $5 = +HEAPF32[$4>>2];
 _MatrixRotate($mRotation,$1,$3,$5);
 $6 = +HEAPF32[$scale>>2];
 $7 = (($scale) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = (($scale) + 8|0);
 $10 = +HEAPF32[$9>>2];
 _MatrixScale($mScale,$6,$8,$10);
 $11 = +HEAPF32[$translation>>2];
 $12 = (($translation) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = (($translation) + 8|0);
 $15 = +HEAPF32[$14>>2];
 _MatrixTranslate($mTranslate,$11,$13,$15);
 dest=$$byval_copy+0|0; src=$mRotation+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$mTranslate$byval_copy+0|0; src=$mScale+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($0,$$byval_copy,$mTranslate$byval_copy);
 dest=$$byval_copy+0|0; src=$0+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$mTranslate$byval_copy+0|0; src=$mTranslate+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($result,$$byval_copy,$mTranslate$byval_copy);
 dest=$agg$result+0|0; src=$result+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _MatrixFrustum($agg$result,$left,$right,$bottom,$top,$near,$far) {
 $agg$result = $agg$result|0;
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $near = +$near;
 $far = +$far;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0.0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $right - $left;
 $1 = $0;
 $2 = $top - $bottom;
 $3 = $2;
 $4 = $far - $near;
 $5 = $4;
 $6 = $near * 2.0;
 $7 = $1;
 $8 = $6 / $7;
 $9 = $8;
 $10 = $3;
 $11 = $6 / $10;
 $12 = $11;
 $13 = $left + $right;
 $14 = $13 / $7;
 $15 = $14;
 $16 = $bottom + $top;
 $17 = $16 / $10;
 $18 = $17;
 $19 = $near + $far;
 $20 = -$19;
 $21 = $5;
 $22 = $20 / $21;
 $23 = $22;
 $24 = $near * $far;
 $25 = $24 * 2.0;
 $26 = -$25;
 $27 = $26 / $21;
 $28 = $27;
 HEAPF32[$agg$result>>2] = $9;
 $29 = (($agg$result) + 4|0);
 HEAPF32[$29>>2] = 0.0;
 $30 = (($agg$result) + 8|0);
 HEAPF32[$30>>2] = $15;
 $31 = (($agg$result) + 12|0);
 HEAPF32[$31>>2] = 0.0;
 $32 = (($agg$result) + 16|0);
 HEAPF32[$32>>2] = 0.0;
 $33 = (($agg$result) + 20|0);
 HEAPF32[$33>>2] = $12;
 $34 = (($agg$result) + 24|0);
 HEAPF32[$34>>2] = $18;
 $35 = (($agg$result) + 28|0);
 HEAPF32[$35>>2] = 0.0;
 $36 = (($agg$result) + 32|0);
 HEAPF32[$36>>2] = 0.0;
 $37 = (($agg$result) + 36|0);
 HEAPF32[$37>>2] = 0.0;
 $38 = (($agg$result) + 40|0);
 HEAPF32[$38>>2] = $23;
 $39 = (($agg$result) + 44|0);
 HEAPF32[$39>>2] = $28;
 $40 = (($agg$result) + 48|0);
 HEAPF32[$40>>2] = 0.0;
 $41 = (($agg$result) + 52|0);
 HEAPF32[$41>>2] = 0.0;
 $42 = (($agg$result) + 56|0);
 HEAPF32[$42>>2] = -1.0;
 $43 = (($agg$result) + 60|0);
 HEAPF32[$43>>2] = 0.0;
 STACKTOP = sp;return;
}
function _MatrixOrtho($agg$result,$left,$right,$bottom,$top,$near,$far) {
 $agg$result = $agg$result|0;
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $near = +$near;
 $far = +$far;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $right - $left;
 $1 = $0;
 $2 = $top - $bottom;
 $3 = $2;
 $4 = $far - $near;
 $5 = $4;
 $6 = 2.0 / $1;
 $7 = 2.0 / $3;
 $8 = -2.0 / $5;
 $9 = $left + $right;
 $10 = -$9;
 $11 = $1;
 $12 = $10 / $11;
 $13 = $12;
 $14 = $bottom + $top;
 $15 = -$14;
 $16 = $3;
 $17 = $15 / $16;
 $18 = $17;
 $19 = $near + $far;
 $20 = -$19;
 $21 = $5;
 $22 = $20 / $21;
 $23 = $22;
 HEAPF32[$agg$result>>2] = $6;
 $24 = (($agg$result) + 4|0);
 HEAPF32[$24>>2] = 0.0;
 $25 = (($agg$result) + 8|0);
 HEAPF32[$25>>2] = 0.0;
 $26 = (($agg$result) + 12|0);
 HEAPF32[$26>>2] = $13;
 $27 = (($agg$result) + 16|0);
 HEAPF32[$27>>2] = 0.0;
 $28 = (($agg$result) + 20|0);
 HEAPF32[$28>>2] = $7;
 $29 = (($agg$result) + 24|0);
 HEAPF32[$29>>2] = 0.0;
 $30 = (($agg$result) + 28|0);
 HEAPF32[$30>>2] = $18;
 $31 = (($agg$result) + 32|0);
 HEAPF32[$31>>2] = 0.0;
 $32 = (($agg$result) + 36|0);
 HEAPF32[$32>>2] = 0.0;
 $33 = (($agg$result) + 40|0);
 HEAPF32[$33>>2] = $8;
 $34 = (($agg$result) + 44|0);
 HEAPF32[$34>>2] = $23;
 $35 = (($agg$result) + 48|0);
 HEAPF32[$35>>2] = 0.0;
 $36 = (($agg$result) + 52|0);
 HEAPF32[$36>>2] = 0.0;
 $37 = (($agg$result) + 56|0);
 HEAPF32[$37>>2] = 0.0;
 $38 = (($agg$result) + 60|0);
 HEAPF32[$38>>2] = 1.0;
 STACKTOP = sp;return;
}
function _MatrixLookAt($agg$result,$eye,$target,$up) {
 $agg$result = $agg$result|0;
 $eye = $eye|0;
 $target = $target|0;
 $up = $up|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $x = 0, $x$byval_copy = 0, $y = 0, $z = 0, $z$byval_copy1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$byval_copy = sp + 48|0;
 $z$byval_copy1 = sp;
 $z = sp + 12|0;
 $x = sp + 24|0;
 $y = sp + 36|0;
 ;HEAP32[$z$byval_copy1+0>>2]=HEAP32[$eye+0>>2]|0;HEAP32[$z$byval_copy1+4>>2]=HEAP32[$eye+4>>2]|0;HEAP32[$z$byval_copy1+8>>2]=HEAP32[$eye+8>>2]|0;
 ;HEAP32[$x$byval_copy+0>>2]=HEAP32[$target+0>>2]|0;HEAP32[$x$byval_copy+4>>2]=HEAP32[$target+4>>2]|0;HEAP32[$x$byval_copy+8>>2]=HEAP32[$target+8>>2]|0;
 _VectorSubtract($z,$z$byval_copy1,$x$byval_copy);
 _VectorNormalize($z);
 ;HEAP32[$z$byval_copy1+0>>2]=HEAP32[$up+0>>2]|0;HEAP32[$z$byval_copy1+4>>2]=HEAP32[$up+4>>2]|0;HEAP32[$z$byval_copy1+8>>2]=HEAP32[$up+8>>2]|0;
 ;HEAP32[$x$byval_copy+0>>2]=HEAP32[$z+0>>2]|0;HEAP32[$x$byval_copy+4>>2]=HEAP32[$z+4>>2]|0;HEAP32[$x$byval_copy+8>>2]=HEAP32[$z+8>>2]|0;
 _VectorCrossProduct($x,$z$byval_copy1,$x$byval_copy);
 _VectorNormalize($x);
 ;HEAP32[$z$byval_copy1+0>>2]=HEAP32[$z+0>>2]|0;HEAP32[$z$byval_copy1+4>>2]=HEAP32[$z+4>>2]|0;HEAP32[$z$byval_copy1+8>>2]=HEAP32[$z+8>>2]|0;
 ;HEAP32[$x$byval_copy+0>>2]=HEAP32[$x+0>>2]|0;HEAP32[$x$byval_copy+4>>2]=HEAP32[$x+4>>2]|0;HEAP32[$x$byval_copy+8>>2]=HEAP32[$x+8>>2]|0;
 _VectorCrossProduct($y,$z$byval_copy1,$x$byval_copy);
 _VectorNormalize($y);
 $0 = +HEAPF32[$x>>2];
 $1 = (($x) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (($x) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$eye>>2];
 $6 = $0 * $5;
 $7 = (($eye) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $2 * $8;
 $10 = $6 + $9;
 $11 = (($eye) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $4 * $12;
 $14 = $10 + $13;
 $15 = -$14;
 $16 = +HEAPF32[$y>>2];
 $17 = (($y) + 4|0);
 $18 = +HEAPF32[$17>>2];
 $19 = (($y) + 8|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $5 * $16;
 $22 = $8 * $18;
 $23 = $21 + $22;
 $24 = $12 * $20;
 $25 = $23 + $24;
 $26 = -$25;
 $27 = +HEAPF32[$z>>2];
 $28 = (($z) + 4|0);
 $29 = +HEAPF32[$28>>2];
 $30 = (($z) + 8|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $5 * $27;
 $33 = $8 * $29;
 $34 = $32 + $33;
 $35 = $12 * $31;
 $36 = $34 + $35;
 $37 = -$36;
 HEAPF32[$agg$result>>2] = $0;
 $38 = (($agg$result) + 4|0);
 HEAPF32[$38>>2] = $16;
 $39 = (($agg$result) + 8|0);
 HEAPF32[$39>>2] = $27;
 $40 = (($agg$result) + 12|0);
 HEAPF32[$40>>2] = 0.0;
 $41 = (($agg$result) + 16|0);
 HEAPF32[$41>>2] = $2;
 $42 = (($agg$result) + 20|0);
 HEAPF32[$42>>2] = $18;
 $43 = (($agg$result) + 24|0);
 HEAPF32[$43>>2] = $29;
 $44 = (($agg$result) + 28|0);
 HEAPF32[$44>>2] = 0.0;
 $45 = (($agg$result) + 32|0);
 HEAPF32[$45>>2] = $4;
 $46 = (($agg$result) + 36|0);
 HEAPF32[$46>>2] = $20;
 $47 = (($agg$result) + 40|0);
 HEAPF32[$47>>2] = $31;
 $48 = (($agg$result) + 44|0);
 HEAPF32[$48>>2] = 0.0;
 $49 = (($agg$result) + 48|0);
 HEAPF32[$49>>2] = $15;
 $50 = (($agg$result) + 52|0);
 HEAPF32[$50>>2] = $26;
 $51 = (($agg$result) + 56|0);
 HEAPF32[$51>>2] = $37;
 $52 = (($agg$result) + 60|0);
 HEAPF32[$52>>2] = 1.0;
 STACKTOP = sp;return;
}
function _DrawCircle($centerX,$centerY,$radius,$color) {
 $centerX = $centerX|0;
 $centerY = $centerY|0;
 $radius = +$radius;
 $color = $color|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $color$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $color$byval_copy = sp + 16|0;
 $$byval_copy = sp;
 $0 = sp + 8|0;
 $1 = (+($centerX|0));
 HEAPF32[$0>>2] = $1;
 $2 = (($0) + 4|0);
 $3 = (+($centerY|0));
 HEAPF32[$2>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 ;HEAP8[$color$byval_copy+0>>0]=HEAP8[$color+0>>0]|0;HEAP8[$color$byval_copy+1>>0]=HEAP8[$color+1>>0]|0;HEAP8[$color$byval_copy+2>>0]=HEAP8[$color+2>>0]|0;HEAP8[$color$byval_copy+3>>0]=HEAP8[$color+3>>0]|0;
 _DrawPoly($$byval_copy,360,$radius,0.0,$color$byval_copy);
 STACKTOP = sp;return;
}
function _DrawPoly($center,$sides,$radius,$rotation,$color) {
 $center = $center|0;
 $sides = $sides|0;
 $radius = +$radius;
 $rotation = +$rotation;
 $color = $color|0;
 var $$sides = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sides|0)<(3);
 $$sides = $0 ? 3 : $sides;
 _rlPushMatrix();
 $1 = +HEAPF32[$center>>2];
 $2 = (($center) + 4|0);
 $3 = +HEAPF32[$2>>2];
 _rlTranslatef($1,$3,0.0);
 _rlRotatef($rotation,0.0,0.0,1.0);
 _rlBegin(1);
 $4 = HEAP8[$color>>0]|0;
 $5 = (($color) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($color) + 2|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = (($color) + 3|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $radius;
 $12 = (360 / ($$sides|0))&-1;
 $i$01 = 0;
 while(1) {
  _rlColor4ub($4,$6,$8,$10);
  _rlVertex2i(0,0);
  $13 = (+($i$01|0));
  $14 = $13 * 0.0174532925199432954744;
  $15 = (+Math_sin((+$14)));
  $16 = $11 * $15;
  $17 = $16;
  $18 = (+Math_cos((+$14)));
  $19 = $11 * $18;
  $20 = $19;
  _rlVertex2f($17,$20);
  $21 = (($12) + ($i$01))|0;
  $22 = (+($21|0));
  $23 = $22 * 0.0174532925199432954744;
  $24 = (+Math_sin((+$23)));
  $25 = $11 * $24;
  $26 = $25;
  $27 = (+Math_cos((+$23)));
  $28 = $11 * $27;
  $29 = $28;
  _rlVertex2f($26,$29);
  $30 = ($21|0)<(360);
  if ($30) {
   $i$01 = $21;
  } else {
   break;
  }
 }
 _rlEnd();
 _rlPopMatrix();
 STACKTOP = sp;return;
}
function _DrawCircleGradient($centerX,$centerY,$radius,$color1,$color2) {
 $centerX = $centerX|0;
 $centerY = $centerY|0;
 $radius = +$radius;
 $color1 = $color1|0;
 $color2 = $color2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlBegin(1);
 $0 = HEAP8[$color1>>0]|0;
 $1 = (($color1) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (($color1) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($color1) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = HEAP8[$color2>>0]|0;
 $8 = (($color2) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($color2) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = (($color2) + 3|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (+($centerX|0));
 $15 = $radius;
 $16 = (+($centerY|0));
 $17 = HEAP8[$color2>>0]|0;
 $18 = HEAP8[$8>>0]|0;
 $19 = HEAP8[$10>>0]|0;
 $20 = HEAP8[$12>>0]|0;
 $i$01 = 0;
 while(1) {
  _rlColor4ub($0,$2,$4,$6);
  _rlVertex2i($centerX,$centerY);
  _rlColor4ub($7,$9,$11,$13);
  $21 = (+($i$01|0));
  $22 = $21 * 0.0174532925199432954744;
  $23 = (+Math_sin((+$22)));
  $24 = $15 * $23;
  $25 = $14 + $24;
  $26 = $25;
  $27 = (+Math_cos((+$22)));
  $28 = $15 * $27;
  $29 = $16 + $28;
  $30 = $29;
  _rlVertex2f($26,$30);
  _rlColor4ub($17,$18,$19,$20);
  $31 = (($i$01) + 2)|0;
  $32 = (+($31|0));
  $33 = $32 * 0.0174532925199432954744;
  $34 = (+Math_sin((+$33)));
  $35 = $15 * $34;
  $36 = $14 + $35;
  $37 = $36;
  $38 = (+Math_cos((+$33)));
  $39 = $15 * $38;
  $40 = $16 + $39;
  $41 = $40;
  _rlVertex2f($37,$41);
  $42 = ($31|0)<(360);
  if ($42) {
   $i$01 = $31;
  } else {
   break;
  }
 }
 _rlEnd();
 STACKTOP = sp;return;
}
function _DrawCircleV($center,$radius,$color) {
 $center = $center|0;
 $radius = +$radius;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlBegin(1);
 $0 = HEAP8[$color>>0]|0;
 $1 = (($color) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (($color) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($color) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = +HEAPF32[$center>>2];
 $8 = (~~(($7)));
 $9 = (($center) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = (~~(($10)));
 $12 = $7;
 $13 = $radius;
 $14 = $10;
 $15 = +HEAPF32[$center>>2];
 $16 = $15;
 $17 = +HEAPF32[$9>>2];
 $18 = $17;
 $i$01 = 0;
 while(1) {
  _rlColor4ub($0,$2,$4,$6);
  _rlVertex2i($8,$11);
  $19 = (+($i$01|0));
  $20 = $19 * 0.0174532925199432954744;
  $21 = (+Math_sin((+$20)));
  $22 = $13 * $21;
  $23 = $12 + $22;
  $24 = $23;
  $25 = (+Math_cos((+$20)));
  $26 = $13 * $25;
  $27 = $14 + $26;
  $28 = $27;
  _rlVertex2f($24,$28);
  $29 = (($i$01) + 2)|0;
  $30 = (+($29|0));
  $31 = $30 * 0.0174532925199432954744;
  $32 = (+Math_sin((+$31)));
  $33 = $13 * $32;
  $34 = $16 + $33;
  $35 = $34;
  $36 = (+Math_cos((+$31)));
  $37 = $13 * $36;
  $38 = $18 + $37;
  $39 = $38;
  _rlVertex2f($35,$39);
  $40 = ($29|0)<(360);
  if ($40) {
   $i$01 = $29;
  } else {
   break;
  }
 }
 _rlEnd();
 STACKTOP = sp;return;
}
function _DrawCircleLines($centerX,$centerY,$radius,$color) {
 $centerX = $centerX|0;
 $centerY = $centerY|0;
 $radius = +$radius;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlBegin(0);
 $0 = HEAP8[$color>>0]|0;
 $1 = (($color) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (($color) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($color) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 _rlColor4ub($0,$2,$4,$6);
 $7 = (+($centerX|0));
 $8 = $radius;
 $9 = (+($centerY|0));
 $i$01 = 0;
 while(1) {
  $10 = (+($i$01|0));
  $11 = $10 * 0.0174532925199432954744;
  $12 = (+Math_sin((+$11)));
  $13 = $8 * $12;
  $14 = $7 + $13;
  $15 = $14;
  $16 = (+Math_cos((+$11)));
  $17 = $8 * $16;
  $18 = $9 + $17;
  $19 = $18;
  _rlVertex2f($15,$19);
  $20 = (($i$01) + 1)|0;
  $21 = (+($20|0));
  $22 = $21 * 0.0174532925199432954744;
  $23 = (+Math_sin((+$22)));
  $24 = $8 * $23;
  $25 = $7 + $24;
  $26 = $25;
  $27 = (+Math_cos((+$22)));
  $28 = $8 * $27;
  $29 = $9 + $28;
  $30 = $29;
  _rlVertex2f($26,$30);
  $exitcond = ($20|0)==(360);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $20;
  }
 }
 _rlEnd();
 STACKTOP = sp;return;
}
function _DrawRectangle($posX,$posY,$width,$height,$color) {
 $posX = $posX|0;
 $posY = $posY|0;
 $width = $width|0;
 $height = $height|0;
 $color = $color|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $color$byval_copy = 0, $position = 0, $position$byval_copy = 0, $size = 0, $size$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $color$byval_copy = sp + 32|0;
 $size$byval_copy = sp;
 $position$byval_copy = sp + 8|0;
 $position = sp + 16|0;
 $size = sp + 24|0;
 $0 = (+($posX|0));
 HEAPF32[$position>>2] = $0;
 $1 = (($position) + 4|0);
 $2 = (+($posY|0));
 HEAPF32[$1>>2] = $2;
 $3 = (+($width|0));
 HEAPF32[$size>>2] = $3;
 $4 = (($size) + 4|0);
 $5 = (+($height|0));
 HEAPF32[$4>>2] = $5;
 ;HEAP32[$position$byval_copy+0>>2]=HEAP32[$position+0>>2]|0;HEAP32[$position$byval_copy+4>>2]=HEAP32[$position+4>>2]|0;
 ;HEAP32[$size$byval_copy+0>>2]=HEAP32[$size+0>>2]|0;HEAP32[$size$byval_copy+4>>2]=HEAP32[$size+4>>2]|0;
 ;HEAP8[$color$byval_copy+0>>0]=HEAP8[$color+0>>0]|0;HEAP8[$color$byval_copy+1>>0]=HEAP8[$color+1>>0]|0;HEAP8[$color$byval_copy+2>>0]=HEAP8[$color+2>>0]|0;HEAP8[$color$byval_copy+3>>0]=HEAP8[$color+3>>0]|0;
 _DrawRectangleV($position$byval_copy,$size$byval_copy,$color$byval_copy);
 STACKTOP = sp;return;
}
function _DrawRectangleV($position,$size,$color) {
 $position = $position|0;
 $size = $size|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_rlGetVersion()|0);
 $1 = ($0|0)==(1);
 if ($1) {
  _rlBegin(1);
  $2 = HEAP8[$color>>0]|0;
  $3 = (($color) + 1|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = (($color) + 2|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = (($color) + 3|0);
  $8 = HEAP8[$7>>0]|0;
  _rlColor4ub($2,$4,$6,$8);
  $9 = +HEAPF32[$position>>2];
  $10 = (~~(($9)));
  $11 = (($position) + 4|0);
  $12 = +HEAPF32[$11>>2];
  $13 = (~~(($12)));
  _rlVertex2i($10,$13);
  $14 = +HEAPF32[$position>>2];
  $15 = (~~(($14)));
  $16 = +HEAPF32[$11>>2];
  $17 = (($size) + 4|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $16 + $18;
  $20 = (~~(($19)));
  _rlVertex2i($15,$20);
  $21 = +HEAPF32[$position>>2];
  $22 = +HEAPF32[$size>>2];
  $23 = $21 + $22;
  $24 = (~~(($23)));
  $25 = +HEAPF32[$11>>2];
  $26 = +HEAPF32[$17>>2];
  $27 = $25 + $26;
  $28 = (~~(($27)));
  _rlVertex2i($24,$28);
  $29 = +HEAPF32[$position>>2];
  $30 = (~~(($29)));
  $31 = +HEAPF32[$11>>2];
  $32 = (~~(($31)));
  _rlVertex2i($30,$32);
  $33 = +HEAPF32[$position>>2];
  $34 = +HEAPF32[$size>>2];
  $35 = $33 + $34;
  $36 = (~~(($35)));
  $37 = +HEAPF32[$11>>2];
  $38 = +HEAPF32[$17>>2];
  $39 = $37 + $38;
  $40 = (~~(($39)));
  _rlVertex2i($36,$40);
  $41 = +HEAPF32[$position>>2];
  $42 = +HEAPF32[$size>>2];
  $43 = $41 + $42;
  $44 = (~~(($43)));
  $45 = +HEAPF32[$11>>2];
  $46 = (~~(($45)));
  _rlVertex2i($44,$46);
  _rlEnd();
  STACKTOP = sp;return;
 }
 $47 = (_rlGetVersion()|0);
 $48 = ($47|0)==(2);
 if (!($48)) {
  $49 = (_rlGetVersion()|0);
  $50 = ($49|0)==(3);
  if (!($50)) {
   STACKTOP = sp;return;
  }
 }
 $51 = HEAP32[_whiteTexture>>2]|0;
 _rlEnableTexture($51);
 _rlBegin(2);
 $52 = HEAP8[$color>>0]|0;
 $53 = (($color) + 1|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = (($color) + 2|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = (($color) + 3|0);
 $58 = HEAP8[$57>>0]|0;
 _rlColor4ub($52,$54,$56,$58);
 _rlTexCoord2f(0.0,0.0);
 $59 = +HEAPF32[$position>>2];
 $60 = (($position) + 4|0);
 $61 = +HEAPF32[$60>>2];
 _rlVertex2f($59,$61);
 _rlTexCoord2f(0.0,1.0);
 $62 = +HEAPF32[$position>>2];
 $63 = +HEAPF32[$60>>2];
 $64 = (($size) + 4|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $63 + $65;
 _rlVertex2f($62,$66);
 _rlTexCoord2f(1.0,1.0);
 $67 = +HEAPF32[$position>>2];
 $68 = +HEAPF32[$size>>2];
 $69 = $67 + $68;
 $70 = +HEAPF32[$60>>2];
 $71 = +HEAPF32[$64>>2];
 $72 = $70 + $71;
 _rlVertex2f($69,$72);
 _rlTexCoord2f(1.0,0.0);
 $73 = +HEAPF32[$position>>2];
 $74 = +HEAPF32[$size>>2];
 $75 = $73 + $74;
 $76 = +HEAPF32[$60>>2];
 _rlVertex2f($75,$76);
 _rlEnd();
 STACKTOP = sp;return;
}
function _DrawRectangleRec($rec,$color) {
 $rec = $rec|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $color$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $color$byval_copy = sp;
 $0 = HEAP32[$rec>>2]|0;
 $1 = (($rec) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($rec) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($rec) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP8[$color$byval_copy+0>>0]=HEAP8[$color+0>>0]|0;HEAP8[$color$byval_copy+1>>0]=HEAP8[$color+1>>0]|0;HEAP8[$color$byval_copy+2>>0]=HEAP8[$color+2>>0]|0;HEAP8[$color$byval_copy+3>>0]=HEAP8[$color+3>>0]|0;
 _DrawRectangle($0,$2,$4,$6,$color$byval_copy);
 STACKTOP = sp;return;
}
function _DrawRectangleGradient($posX,$posY,$width,$height,$color1,$color2) {
 $posX = $posX|0;
 $posY = $posY|0;
 $width = $width|0;
 $height = $height|0;
 $color1 = $color1|0;
 $color2 = $color2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlBegin(1);
 $0 = HEAP8[$color1>>0]|0;
 $1 = (($color1) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (($color1) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($color1) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 _rlColor4ub($0,$2,$4,$6);
 _rlVertex2i($posX,$posY);
 $7 = HEAP8[$color2>>0]|0;
 $8 = (($color2) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($color2) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = (($color2) + 3|0);
 $13 = HEAP8[$12>>0]|0;
 _rlColor4ub($7,$9,$11,$13);
 $14 = (($height) + ($posY))|0;
 _rlVertex2i($posX,$14);
 $15 = HEAP8[$color2>>0]|0;
 $16 = HEAP8[$8>>0]|0;
 $17 = HEAP8[$10>>0]|0;
 $18 = HEAP8[$12>>0]|0;
 _rlColor4ub($15,$16,$17,$18);
 $19 = (($width) + ($posX))|0;
 _rlVertex2i($19,$14);
 $20 = HEAP8[$color1>>0]|0;
 $21 = HEAP8[$1>>0]|0;
 $22 = HEAP8[$3>>0]|0;
 $23 = HEAP8[$5>>0]|0;
 _rlColor4ub($20,$21,$22,$23);
 _rlVertex2i($posX,$posY);
 $24 = HEAP8[$color2>>0]|0;
 $25 = HEAP8[$8>>0]|0;
 $26 = HEAP8[$10>>0]|0;
 $27 = HEAP8[$12>>0]|0;
 _rlColor4ub($24,$25,$26,$27);
 _rlVertex2i($19,$14);
 $28 = HEAP8[$color1>>0]|0;
 $29 = HEAP8[$1>>0]|0;
 $30 = HEAP8[$3>>0]|0;
 $31 = HEAP8[$5>>0]|0;
 _rlColor4ub($28,$29,$30,$31);
 _rlVertex2i($19,$posY);
 _rlEnd();
 STACKTOP = sp;return;
}
function _DrawRectangleLines($posX,$posY,$width,$height,$color) {
 $posX = $posX|0;
 $posY = $posY|0;
 $width = $width|0;
 $height = $height|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlBegin(0);
 $0 = HEAP8[$color>>0]|0;
 $1 = (($color) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (($color) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($color) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 _rlColor4ub($0,$2,$4,$6);
 $7 = (($posX) + 1)|0;
 $8 = (($posY) + 1)|0;
 _rlVertex2i($7,$8);
 $9 = (($width) + ($posX))|0;
 _rlVertex2i($9,$8);
 _rlVertex2i($9,$8);
 $10 = (($height) + ($posY))|0;
 _rlVertex2i($9,$10);
 _rlVertex2i($9,$10);
 _rlVertex2i($7,$10);
 _rlVertex2i($7,$10);
 _rlVertex2i($7,$8);
 _rlEnd();
 STACKTOP = sp;return;
}
function _DrawTriangle($v1,$v2,$v3,$color) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 $v3 = $v3|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlBegin(1);
 $0 = HEAP8[$color>>0]|0;
 $1 = (($color) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (($color) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($color) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 _rlColor4ub($0,$2,$4,$6);
 $7 = +HEAPF32[$v1>>2];
 $8 = (($v1) + 4|0);
 $9 = +HEAPF32[$8>>2];
 _rlVertex2f($7,$9);
 $10 = +HEAPF32[$v2>>2];
 $11 = (($v2) + 4|0);
 $12 = +HEAPF32[$11>>2];
 _rlVertex2f($10,$12);
 $13 = +HEAPF32[$v3>>2];
 $14 = (($v3) + 4|0);
 $15 = +HEAPF32[$14>>2];
 _rlVertex2f($13,$15);
 _rlEnd();
 STACKTOP = sp;return;
}
function _DrawTriangleLines($v1,$v2,$v3,$color) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 $v3 = $v3|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0;
 var $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlBegin(0);
 $0 = HEAP8[$color>>0]|0;
 $1 = (($color) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (($color) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($color) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 _rlColor4ub($0,$2,$4,$6);
 $7 = +HEAPF32[$v1>>2];
 $8 = (($v1) + 4|0);
 $9 = +HEAPF32[$8>>2];
 _rlVertex2f($7,$9);
 $10 = +HEAPF32[$v2>>2];
 $11 = (($v2) + 4|0);
 $12 = +HEAPF32[$11>>2];
 _rlVertex2f($10,$12);
 $13 = +HEAPF32[$v2>>2];
 $14 = +HEAPF32[$11>>2];
 _rlVertex2f($13,$14);
 $15 = +HEAPF32[$v3>>2];
 $16 = (($v3) + 4|0);
 $17 = +HEAPF32[$16>>2];
 _rlVertex2f($15,$17);
 $18 = +HEAPF32[$v3>>2];
 $19 = +HEAPF32[$16>>2];
 _rlVertex2f($18,$19);
 $20 = +HEAPF32[$v1>>2];
 $21 = +HEAPF32[$8>>2];
 _rlVertex2f($20,$21);
 _rlEnd();
 STACKTOP = sp;return;
}
function _CheckCollisionRecs($rec1,$rec2) {
 $rec1 = $rec1|0;
 $rec2 = $rec2|0;
 var $$ = 0, $$neg4 = 0, $$neg7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos1 = 0, $neg = 0, $neg2 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$rec1>>2]|0;
 $1 = (($rec1) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2|0) / 2)&-1;
 $4 = HEAP32[$rec2>>2]|0;
 $5 = (($rec2) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6|0) / 2)&-1;
 $$neg4 = (($3) + ($0))|0;
 $8 = (($$neg4) - ($4))|0;
 $9 = (($8) - ($7))|0;
 $ispos = ($9|0)>(-1);
 $neg = (0 - ($9))|0;
 $10 = $ispos ? $9 : $neg;
 $11 = (($rec1) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($rec1) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14|0) / 2)&-1;
 $16 = (($rec2) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($rec2) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19|0) / 2)&-1;
 $$neg7 = (($15) + ($12))|0;
 $21 = (($$neg7) - ($17))|0;
 $22 = (($21) - ($20))|0;
 $23 = (($7) + ($3))|0;
 $24 = ($10|0)>($23|0);
 if ($24) {
  STACKTOP = sp;return 0;
 } else {
  $neg2 = (0 - ($22))|0;
  $ispos1 = ($22|0)>(-1);
  $25 = $ispos1 ? $22 : $neg2;
  $26 = (($20) + ($15))|0;
  $not$ = ($25|0)<=($26|0);
  $$ = $not$&1;
  STACKTOP = sp;return ($$|0);
 }
 return 0|0;
}
function _CheckCollisionCircleRec($center,$radius,$rec) {
 $center = $center|0;
 $radius = +$radius;
 $rec = $rec|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $collision$0 = 0, $ispos = 0, $ispos1 = 0, $neg = 0, $neg2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$rec>>2]|0;
 $1 = (($rec) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2|0) / 2)&-1;
 $4 = (($3) + ($0))|0;
 $5 = (+($4|0));
 $6 = +HEAPF32[$center>>2];
 $7 = $5 - $6;
 $8 = (~~(($7)));
 $ispos = ($8|0)>(-1);
 $neg = (0 - ($8))|0;
 $9 = $ispos ? $8 : $neg;
 $10 = (+($9|0));
 $11 = (($rec) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($rec) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14|0) / 2)&-1;
 $16 = (($15) + ($12))|0;
 $17 = (+($16|0));
 $18 = (($center) + 4|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $17 - $19;
 $21 = (~~(($20)));
 $22 = (+($3|0));
 $23 = $22 + $radius;
 $24 = !($10 <= $23);
 if ($24) {
  $collision$0 = 0;
  STACKTOP = sp;return ($collision$0|0);
 }
 $neg2 = (0 - ($21))|0;
 $ispos1 = ($21|0)>(-1);
 $25 = $ispos1 ? $21 : $neg2;
 $26 = (+($25|0));
 $27 = (+($15|0));
 $28 = $27 + $radius;
 $29 = !($26 <= $28);
 if ($29) {
  $collision$0 = 0;
  STACKTOP = sp;return ($collision$0|0);
 }
 $collision$0 = 1;
 STACKTOP = sp;return ($collision$0|0);
}
function _GetCollisionRec($agg$result,$rec1,$rec2) {
 $agg$result = $agg$result|0;
 $rec1 = $rec1|0;
 $rec2 = $rec2|0;
 var $$pn = 0, $$pn$in = 0, $$pn3 = 0, $$pn3$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos1 = 0, $neg = 0, $neg2 = 0, $rec1$byval_copy = 0, $rec2$byval_copy = 0, $retRec$sroa$0$0 = 0;
 var $retRec$sroa$0$1 = 0, $retRec$sroa$1$0 = 0, $retRec$sroa$1$1 = 0, $retRec$sroa$2$0 = 0, $retRec$sroa$2$0$ = 0, $retRec$sroa$2$2 = 0, $retRec$sroa$3$0 = 0, $retRec$sroa$3$0$ = 0, $retRec$sroa$3$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $rec2$byval_copy = sp + 16|0;
 $rec1$byval_copy = sp;
 ;HEAP32[$rec1$byval_copy+0>>2]=HEAP32[$rec1+0>>2]|0;HEAP32[$rec1$byval_copy+4>>2]=HEAP32[$rec1+4>>2]|0;HEAP32[$rec1$byval_copy+8>>2]=HEAP32[$rec1+8>>2]|0;HEAP32[$rec1$byval_copy+12>>2]=HEAP32[$rec1+12>>2]|0;
 ;HEAP32[$rec2$byval_copy+0>>2]=HEAP32[$rec2+0>>2]|0;HEAP32[$rec2$byval_copy+4>>2]=HEAP32[$rec2+4>>2]|0;HEAP32[$rec2$byval_copy+8>>2]=HEAP32[$rec2+8>>2]|0;HEAP32[$rec2$byval_copy+12>>2]=HEAP32[$rec2+12>>2]|0;
 $0 = (_CheckCollisionRecs($rec1$byval_copy,$rec2$byval_copy)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $retRec$sroa$0$1 = 0;$retRec$sroa$1$1 = 0;$retRec$sroa$2$2 = 0;$retRec$sroa$3$1 = 0;
  HEAP32[$agg$result>>2] = $retRec$sroa$0$1;
  $26 = (($agg$result) + 4|0);
  HEAP32[$26>>2] = $retRec$sroa$1$1;
  $27 = (($agg$result) + 8|0);
  HEAP32[$27>>2] = $retRec$sroa$2$2;
  $28 = (($agg$result) + 12|0);
  HEAP32[$28>>2] = $retRec$sroa$3$1;
  STACKTOP = sp;return;
 }
 $2 = HEAP32[$rec1>>2]|0;
 $3 = HEAP32[$rec2>>2]|0;
 $4 = (($2) - ($3))|0;
 $ispos = ($4|0)>(-1);
 $neg = (0 - ($4))|0;
 $5 = $ispos ? $4 : $neg;
 $6 = (($rec1) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($rec2) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 $ispos1 = ($10|0)>(-1);
 $neg2 = (0 - ($10))|0;
 $11 = $ispos1 ? $10 : $neg2;
 $12 = ($2|0)>($3|0);
 $13 = ($7|0)<=($9|0);
 do {
  if ($12) {
   $17 = (($rec2) + 8|0);
   if ($13) {
    $18 = (($rec1) + 12|0);
    $$pn$in = $17;$$pn3$in = $18;$retRec$sroa$0$0 = $2;$retRec$sroa$1$0 = $9;
    break;
   } else {
    $19 = (($rec2) + 12|0);
    $$pn$in = $17;$$pn3$in = $19;$retRec$sroa$0$0 = $2;$retRec$sroa$1$0 = $7;
    break;
   }
  } else {
   $14 = (($rec1) + 8|0);
   if ($13) {
    $15 = (($rec1) + 12|0);
    $$pn$in = $14;$$pn3$in = $15;$retRec$sroa$0$0 = $3;$retRec$sroa$1$0 = $9;
    break;
   } else {
    $16 = (($rec2) + 12|0);
    $$pn$in = $14;$$pn3$in = $16;$retRec$sroa$0$0 = $3;$retRec$sroa$1$0 = $7;
    break;
   }
  }
 } while(0);
 $$pn3 = HEAP32[$$pn3$in>>2]|0;
 $$pn = HEAP32[$$pn$in>>2]|0;
 $retRec$sroa$3$0 = (($$pn3) - ($11))|0;
 $retRec$sroa$2$0 = (($$pn) - ($5))|0;
 $20 = (($rec2) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($retRec$sroa$2$0|0)<($21|0);
 $retRec$sroa$2$0$ = $22 ? $retRec$sroa$2$0 : $21;
 $23 = (($rec2) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($retRec$sroa$3$0|0)<($24|0);
 $retRec$sroa$3$0$ = $25 ? $retRec$sroa$3$0 : $24;
 $retRec$sroa$0$1 = $retRec$sroa$0$0;$retRec$sroa$1$1 = $retRec$sroa$1$0;$retRec$sroa$2$2 = $retRec$sroa$2$0$;$retRec$sroa$3$1 = $retRec$sroa$3$0$;
 HEAP32[$agg$result>>2] = $retRec$sroa$0$1;
 $26 = (($agg$result) + 4|0);
 HEAP32[$26>>2] = $retRec$sroa$1$1;
 $27 = (($agg$result) + 8|0);
 HEAP32[$27>>2] = $retRec$sroa$2$2;
 $28 = (($agg$result) + 12|0);
 HEAP32[$28>>2] = $retRec$sroa$3$1;
 STACKTOP = sp;return;
}
function _LoadDefaultFont() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $counter$011 = 0, $currentLine$05 = 0, $currentLine$1 = 0, $currentPosX$06 = 0, $currentPosX$1 = 0, $i$013 = 0, $i1$010 = 0, $i2$07 = 0;
 var $image = 0, $image$byval_copy1 = 0, $j$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $image$byval_copy1 = sp;
 $image = sp + 24|0;
 $0 = sp + 12|0;
 HEAP32[((9408 + 12|0))>>2] = 96;
 $1 = (($image) + 4|0);
 HEAP32[$1>>2] = 128;
 $2 = (($image) + 8|0);
 HEAP32[$2>>2] = 64;
 $3 = HEAP32[$1>>2]|0;
 $4 = $3 << 8;
 $5 = (_malloc($4)|0);
 HEAP32[$image>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = Math_imul($7, $6)|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $i$013 = 0;
  while(1) {
   $14 = HEAP32[$image>>2]|0;
   $15 = (($14) + ($i$013<<2)|0);
   $16 = (($i$013) + 1)|0;
   HEAP8[$15>>0]=0&255;HEAP8[$15+1>>0]=(0>>8)&255;HEAP8[$15+2>>0]=(0>>16)&255;HEAP8[$15+3>>0]=0>>24;
   $17 = HEAP32[$1>>2]|0;
   $18 = HEAP32[$2>>2]|0;
   $19 = Math_imul($18, $17)|0;
   $20 = ($16|0)<($19|0);
   if ($20) {
    $i$013 = $16;
   } else {
    break;
   }
  }
 }
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = Math_imul($11, $10)|0;
 $13 = ($12|0)>(0);
 if ($13) {
  $counter$011 = 0;$i1$010 = 0;
  while(1) {
   $21 = (9432 + ($counter$011<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $j$08 = 31;
   while(1) {
    $23 = 1 << $j$08;
    $24 = $22 & $23;
    $25 = ($24|0)==(0);
    if (!($25)) {
     $26 = (($j$08) + ($i1$010))|0;
     $27 = HEAP32[$image>>2]|0;
     $28 = (($27) + ($26<<2)|0);
     HEAP8[$28>>0]=-1&255;HEAP8[$28+1>>0]=(-1>>8)&255;HEAP8[$28+2>>0]=(-1>>16)&255;HEAP8[$28+3>>0]=-1>>24;
    }
    $29 = (($j$08) + -1)|0;
    $30 = ($j$08|0)>(0);
    if ($30) {
     $j$08 = $29;
    } else {
     break;
    }
   }
   $31 = (($counter$011) + 1)|0;
   $32 = ($counter$011|0)>(255);
   $$ = $32 ? 0 : $31;
   $33 = (($i1$010) + 32)|0;
   $34 = HEAP32[$1>>2]|0;
   $35 = HEAP32[$2>>2]|0;
   $36 = Math_imul($35, $34)|0;
   $37 = ($33|0)<($36|0);
   if ($37) {
    $counter$011 = $$;$i1$010 = $33;
   } else {
    break;
   }
  }
 }
 ;HEAP32[$image$byval_copy1+0>>2]=HEAP32[$image+0>>2]|0;HEAP32[$image$byval_copy1+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy1+8>>2]=HEAP32[$image+8>>2]|0;
 _LoadTextureFromImage($0,$image$byval_copy1,0);
 ;HEAP32[9408+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[9408+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[9408+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$image$byval_copy1+0>>2]=HEAP32[$image+0>>2]|0;HEAP32[$image$byval_copy1+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy1+8>>2]=HEAP32[$image+8>>2]|0;
 _UnloadImage($image$byval_copy1);
 $38 = HEAP32[((9408 + 12|0))>>2]|0;
 $39 = ($38*20)|0;
 $40 = (_malloc($39)|0);
 HEAP32[((9408 + 16|0))>>2] = $40;
 $41 = HEAP32[((9408 + 12|0))>>2]|0;
 $42 = ($41|0)>(0);
 if (!($42)) {
  $70 = HEAP32[9408>>2]|0;
  HEAP32[$image$byval_copy1>>2] = $70;
  _TraceLog(0,10840,$image$byval_copy1);
  STACKTOP = sp;return;
 }
 $43 = HEAP32[((9408 + 16|0))>>2]|0;
 $currentLine$05 = 0;$currentPosX$06 = 1;$i2$07 = 0;
 while(1) {
  $44 = (($i2$07) + 32)|0;
  $45 = (($43) + (($i2$07*20)|0)|0);
  HEAP32[$45>>2] = $44;
  $46 = ((($43) + (($i2$07*20)|0)|0) + 4|0);
  HEAP32[$46>>2] = $currentPosX$06;
  $47 = ($currentLine$05*11)|0;
  $48 = (($47) + 1)|0;
  $49 = ((($43) + (($i2$07*20)|0)|0) + 8|0);
  HEAP32[$49>>2] = $48;
  $50 = (10456 + ($i2$07<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($43) + (($i2$07*20)|0)|0) + 12|0);
  HEAP32[$52>>2] = $51;
  $53 = ((($43) + (($i2$07*20)|0)|0) + 16|0);
  HEAP32[$53>>2] = 10;
  $54 = ((($43) + (($i2$07*20)|0)|0) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($currentPosX$06) + 1)|0;
  $57 = (($56) + ($55))|0;
  $58 = HEAP32[((9408 + 4|0))>>2]|0;
  $59 = ($57|0)<($58|0);
  if ($59) {
   $currentLine$1 = $currentLine$05;$currentPosX$1 = $57;
  } else {
   $60 = (($currentLine$05) + 1)|0;
   $61 = HEAP32[$50>>2]|0;
   $62 = (($61) + 2)|0;
   $63 = ((($43) + (($i2$07*20)|0)|0) + 4|0);
   HEAP32[$63>>2] = 1;
   $64 = ($60*11)|0;
   $65 = (($64) + 1)|0;
   $66 = ((($43) + (($i2$07*20)|0)|0) + 8|0);
   HEAP32[$66>>2] = $65;
   $currentLine$1 = $60;$currentPosX$1 = $62;
  }
  $67 = (($i2$07) + 1)|0;
  $68 = HEAP32[((9408 + 12|0))>>2]|0;
  $69 = ($67|0)<($68|0);
  if ($69) {
   $currentLine$05 = $currentLine$1;$currentPosX$06 = $currentPosX$1;$i2$07 = $67;
  } else {
   break;
  }
 }
 $70 = HEAP32[9408>>2]|0;
 HEAP32[$image$byval_copy1>>2] = $70;
 _TraceLog(0,10840,$image$byval_copy1);
 STACKTOP = sp;return;
}
function _UnloadDefaultFont() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9408>>2]|0;
 _rlDeleteTextures($0);
 $1 = HEAP32[((9408 + 16|0))>>2]|0;
 _free($1);
 STACKTOP = sp;return;
}
function _LoadSpriteFont($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $image = 0, $image$byval_copy5 = 0, $spriteFont = 0, $vararg_ptr4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $image$byval_copy5 = sp;
 $spriteFont = sp + 24|0;
 $image = sp + 12|0;
 $0 = sp + 44|0;
 $1 = (_GetExtension($fileName)|0);
 $2 = (_strcmp($1,10888)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _LoadRBMF($spriteFont,$fileName);
  ;HEAP32[$agg$result+0>>2]=HEAP32[$spriteFont+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$spriteFont+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$spriteFont+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$spriteFont+12>>2]|0;HEAP32[$agg$result+16>>2]=HEAP32[$spriteFont+16>>2]|0;
  STACKTOP = sp;return;
 } else {
  _LoadImage($image,$fileName);
  HEAP8[$0>>0] = -1;
  $4 = (($0) + 1|0);
  HEAP8[$4>>0] = 0;
  $5 = (($0) + 2|0);
  HEAP8[$5>>0] = -1;
  $6 = (($0) + 3|0);
  HEAP8[$6>>0] = -1;
  ;HEAP8[$image$byval_copy5+0>>0]=HEAP8[$0+0>>0]|0;HEAP8[$image$byval_copy5+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$image$byval_copy5+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$image$byval_copy5+3>>0]=HEAP8[$0+3>>0]|0;
  _ConvertToPOT($image,$image$byval_copy5);
  $7 = HEAP32[$image>>2]|0;
  $8 = (($image) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($image) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($spriteFont) + 16|0);
  $13 = (_ParseImageData($7,$9,$11,$12)|0);
  HEAP32[$image$byval_copy5>>2] = $fileName;
  _TraceLog(0,10896,$image$byval_copy5);
  HEAP32[$image$byval_copy5>>2] = $fileName;
  $vararg_ptr4 = (($image$byval_copy5) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $13;
  _TraceLog(0,10936,$image$byval_copy5);
  $14 = (($spriteFont) + 12|0);
  HEAP32[$14>>2] = $13;
  ;HEAP32[$image$byval_copy5+0>>2]=HEAP32[$image+0>>2]|0;HEAP32[$image$byval_copy5+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy5+8>>2]=HEAP32[$image+8>>2]|0;
  _LoadTextureFromImage($spriteFont,$image$byval_copy5,0);
  ;HEAP32[$image$byval_copy5+0>>2]=HEAP32[$image+0>>2]|0;HEAP32[$image$byval_copy5+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy5+8>>2]=HEAP32[$image+8>>2]|0;
  _UnloadImage($image$byval_copy5);
  ;HEAP32[$agg$result+0>>2]=HEAP32[$spriteFont+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$spriteFont+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$spriteFont+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$spriteFont+12>>2]|0;HEAP32[$agg$result+16>>2]=HEAP32[$spriteFont+16>>2]|0;
  STACKTOP = sp;return;
 }
}
function _LoadRBMF($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $counter$010 = 0, $currentLine$05 = 0, $currentLine$1 = 0, $currentPosX$06 = 0, $currentPosX$1 = 0, $exitcond = 0, $exitcond24 = 0, $i$020 = 0, $i1$016 = 0, $i2$013 = 0, $i3$011 = 0, $i4$07 = 0, $image = 0, $image$byval_copy14 = 0, $j$08 = 0, $rbmfCharWidthData$0 = 0, $rbmfFileData$0 = 0, $rbmfHeader = 0, $spriteFont$sroa$0$0 = 0, $spriteFont$sroa$1$0 = 0;
 var $spriteFont$sroa$2$0 = 0, $spriteFont$sroa$3$0 = 0, $spriteFont$sroa$4$0 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $image$byval_copy14 = sp;
 $image = sp + 32|0;
 $rbmfHeader = sp + 48|0;
 $0 = sp + 20|0;
 $1 = (_fopen(($fileName|0),(11072|0))|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$image$byval_copy14>>2] = $fileName;
  _TraceLog(2,11080,$image$byval_copy14);
  $rbmfCharWidthData$0 = 0;$rbmfFileData$0 = 0;$spriteFont$sroa$0$0 = 0;$spriteFont$sroa$1$0 = 0;$spriteFont$sroa$2$0 = 0;$spriteFont$sroa$3$0 = 0;$spriteFont$sroa$4$0 = 0;
  (_fclose(($1|0))|0);
  _free($rbmfFileData$0);
  _free($rbmfCharWidthData$0);
  HEAP32[$agg$result>>2] = $spriteFont$sroa$0$0;
  $116 = (($agg$result) + 4|0);
  HEAP32[$116>>2] = $spriteFont$sroa$1$0;
  $117 = (($agg$result) + 8|0);
  HEAP32[$117>>2] = $spriteFont$sroa$2$0;
  $118 = (($agg$result) + 12|0);
  HEAP32[$118>>2] = $spriteFont$sroa$3$0;
  $119 = (($agg$result) + 16|0);
  HEAP32[$119>>2] = $spriteFont$sroa$4$0;
  STACKTOP = sp;return;
 }
 (_fread(($rbmfHeader|0),16,1,($1|0))|0);
 $3 = (($rbmfHeader) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = (($rbmfHeader) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($rbmfHeader) + 10|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = (($rbmfHeader) + 12|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 HEAP32[$image$byval_copy14>>2] = $fileName;
 $vararg_ptr4 = (($image$byval_copy14) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $5;
 $vararg_ptr5 = (($image$byval_copy14) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $8;
 $vararg_ptr6 = (($image$byval_copy14) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $11;
 $vararg_ptr7 = (($image$byval_copy14) + 16|0);
 HEAP32[$vararg_ptr7>>2] = $14;
 _TraceLog(0,11120,$image$byval_copy14);
 $15 = HEAP16[$9>>1]|0;
 $16 = $15 << 16 >> 16;
 $17 = HEAP16[$3>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = (($image) + 4|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP16[$6>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = (($image) + 8|0);
 HEAP32[$22>>2] = $21;
 $23 = HEAP16[$3>>1]|0;
 $24 = $23 << 16 >> 16;
 $25 = HEAP16[$6>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = Math_imul($26, $24)|0;
 $28 = (($27|0) / 32)&-1;
 $29 = $28 << 2;
 $30 = (_malloc($29)|0);
 $31 = ($27|0)>(31);
 if ($31) {
  $i$020 = 0;
  while(1) {
   $32 = (($30) + ($i$020<<2)|0);
   (_fread(($32|0),4,1,($1|0))|0);
   $33 = (($i$020) + 1)|0;
   $34 = ($33|0)<($28|0);
   if ($34) {
    $i$020 = $33;
   } else {
    break;
   }
  }
 }
 $35 = (_malloc($16)|0);
 $36 = ($15<<16>>16)>(0);
 if ($36) {
  $37 = $15 << 16 >> 16;
  $i1$016 = 0;
  while(1) {
   $38 = (($35) + ($i1$016)|0);
   (_fread(($38|0),1,1,($1|0))|0);
   $39 = (($i1$016) + 1)|0;
   $exitcond24 = ($39|0)==($37|0);
   if ($exitcond24) {
    break;
   } else {
    $i1$016 = $39;
   }
  }
 }
 $40 = HEAP32[$19>>2]|0;
 $41 = HEAP32[$22>>2]|0;
 $42 = $40 << 2;
 $43 = Math_imul($42, $41)|0;
 $44 = (_malloc($43)|0);
 HEAP32[$image>>2] = $44;
 $45 = HEAP32[$19>>2]|0;
 $46 = HEAP32[$22>>2]|0;
 $47 = Math_imul($46, $45)|0;
 $48 = ($47|0)>(0);
 if ($48) {
  $i2$013 = 0;
  while(1) {
   $53 = HEAP32[$image>>2]|0;
   $54 = (($53) + ($i2$013<<2)|0);
   $55 = (($i2$013) + 1)|0;
   HEAP8[$54>>0]=0&255;HEAP8[$54+1>>0]=(0>>8)&255;HEAP8[$54+2>>0]=(0>>16)&255;HEAP8[$54+3>>0]=0>>24;
   $56 = HEAP32[$19>>2]|0;
   $57 = HEAP32[$22>>2]|0;
   $58 = Math_imul($57, $56)|0;
   $59 = ($55|0)<($58|0);
   if ($59) {
    $i2$013 = $55;
   } else {
    break;
   }
  }
 }
 $49 = HEAP32[$19>>2]|0;
 $50 = HEAP32[$22>>2]|0;
 $51 = Math_imul($50, $49)|0;
 $52 = ($51|0)>(0);
 if ($52) {
  $counter$010 = 0;$i3$011 = 0;
  while(1) {
   $60 = (($30) + ($counter$010<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   $j$08 = 31;
   while(1) {
    $62 = 1 << $j$08;
    $63 = $61 & $62;
    $64 = ($63|0)==(0);
    if (!($64)) {
     $65 = (($j$08) + ($i3$011))|0;
     $66 = HEAP32[$image>>2]|0;
     $67 = (($66) + ($65<<2)|0);
     HEAP8[$67>>0]=-1&255;HEAP8[$67+1>>0]=(-1>>8)&255;HEAP8[$67+2>>0]=(-1>>16)&255;HEAP8[$67+3>>0]=-1>>24;
    }
    $68 = (($j$08) + -1)|0;
    $69 = ($j$08|0)>(0);
    if ($69) {
     $j$08 = $68;
    } else {
     break;
    }
   }
   $70 = (($counter$010) + 1)|0;
   $71 = (($i3$011) + 32)|0;
   $72 = HEAP32[$19>>2]|0;
   $73 = HEAP32[$22>>2]|0;
   $74 = Math_imul($73, $72)|0;
   $75 = ($71|0)<($74|0);
   if ($75) {
    $counter$010 = $70;$i3$011 = $71;
   } else {
    break;
   }
  }
 }
 HEAP32[$image$byval_copy14>>2] = $fileName;
 _TraceLog(0,11192,$image$byval_copy14);
 ;HEAP32[$image$byval_copy14+0>>2]=HEAP32[$image+0>>2]|0;HEAP32[$image$byval_copy14+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy14+8>>2]=HEAP32[$image+8>>2]|0;
 _LoadTextureFromImage($0,$image$byval_copy14,0);
 $76 = HEAP32[$0>>2]|0;
 $77 = (($0) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($0) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 ;HEAP32[$image$byval_copy14+0>>2]=HEAP32[$image+0>>2]|0;HEAP32[$image$byval_copy14+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy14+8>>2]=HEAP32[$image+8>>2]|0;
 _UnloadImage($image$byval_copy14);
 $81 = ($16*20)|0;
 $82 = (_malloc($81)|0);
 $83 = ($15<<16>>16)>(0);
 if ($83) {
  $84 = (($rbmfHeader) + 5|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85 << 24 >> 24;
  $87 = HEAP16[$12>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = (($88) + 1)|0;
  $90 = $87 << 16 >> 16;
  $91 = $87 << 16 >> 16;
  $92 = (($91) + 1)|0;
  $93 = $15 << 16 >> 16;
  $currentLine$05 = 0;$currentPosX$06 = 1;$i4$07 = 0;
  while(1) {
   $94 = (($86) + ($i4$07))|0;
   $95 = (($82) + (($i4$07*20)|0)|0);
   HEAP32[$95>>2] = $94;
   $96 = ((($82) + (($i4$07*20)|0)|0) + 4|0);
   HEAP32[$96>>2] = $currentPosX$06;
   $97 = Math_imul($89, $currentLine$05)|0;
   $98 = (($97) + 1)|0;
   $99 = ((($82) + (($i4$07*20)|0)|0) + 8|0);
   HEAP32[$99>>2] = $98;
   $100 = (($35) + ($i4$07)|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101&255;
   $103 = ((($82) + (($i4$07*20)|0)|0) + 12|0);
   HEAP32[$103>>2] = $102;
   $104 = ((($82) + (($i4$07*20)|0)|0) + 16|0);
   HEAP32[$104>>2] = $90;
   $105 = HEAP32[$103>>2]|0;
   $106 = (($currentPosX$06) + 1)|0;
   $107 = (($106) + ($105))|0;
   $108 = ($107|0)>($78|0);
   if ($108) {
    $109 = (($currentLine$05) + 1)|0;
    $110 = HEAP8[$100>>0]|0;
    $111 = $110&255;
    $112 = (($111) + 2)|0;
    HEAP32[$96>>2] = 1;
    $113 = Math_imul($92, $109)|0;
    $114 = (($113) + 1)|0;
    HEAP32[$99>>2] = $114;
    $currentLine$1 = $109;$currentPosX$1 = $112;
   } else {
    $currentLine$1 = $currentLine$05;$currentPosX$1 = $107;
   }
   $115 = (($i4$07) + 1)|0;
   $exitcond = ($115|0)==($93|0);
   if ($exitcond) {
    break;
   } else {
    $currentLine$05 = $currentLine$1;$currentPosX$06 = $currentPosX$1;$i4$07 = $115;
   }
  }
 }
 HEAP32[$image$byval_copy14>>2] = $fileName;
 _TraceLog(0,11264,$image$byval_copy14);
 $rbmfCharWidthData$0 = $35;$rbmfFileData$0 = $30;$spriteFont$sroa$0$0 = $76;$spriteFont$sroa$1$0 = $78;$spriteFont$sroa$2$0 = $80;$spriteFont$sroa$3$0 = $16;$spriteFont$sroa$4$0 = $82;
 (_fclose(($1|0))|0);
 _free($rbmfFileData$0);
 _free($rbmfCharWidthData$0);
 HEAP32[$agg$result>>2] = $spriteFont$sroa$0$0;
 $116 = (($agg$result) + 4|0);
 HEAP32[$116>>2] = $spriteFont$sroa$1$0;
 $117 = (($agg$result) + 8|0);
 HEAP32[$117>>2] = $spriteFont$sroa$2$0;
 $118 = (($agg$result) + 12|0);
 HEAP32[$118>>2] = $spriteFont$sroa$3$0;
 $119 = (($agg$result) + 16|0);
 HEAP32[$119>>2] = $spriteFont$sroa$4$0;
 STACKTOP = sp;return;
}
function _ParseImageData($imgDataPixel,$imgWidth,$imgHeight,$charSet) {
 $imgDataPixel = $imgDataPixel|0;
 $imgWidth = $imgWidth|0;
 $imgHeight = $imgHeight|0;
 $charSet = $charSet|0;
 var $$byval_copy4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $charWidth$0 = 0, $exitcond = 0;
 var $i$01 = 0, $index$0$lcssa = 0, $index$06 = 0, $index$1$lcssa = 0, $index$12 = 0, $j$0 = 0, $lineToRead$07 = 0, $tempCharSet = 0, $x$1$lcssa = 0, $x$111 = 0, $x$2 = 0, $xPosToRead$13 = 0, $y$0$lcssa = 0, $y$016 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy4 = sp + 2560|0;
 $tempCharSet = sp;
 $0 = ($imgHeight|0)>(0);
 L1: do {
  if ($0) {
   $1 = ($imgWidth|0)>(0);
   $y$016 = 0;
   while(1) {
    $4 = Math_imul($y$016, $imgWidth)|0;
    L5: do {
     if ($1) {
      $x$111 = 0;
      while(1) {
       $7 = (($x$111) + ($4))|0;
       $8 = (($imgDataPixel) + ($7<<2)|0);
       ;HEAP8[$$byval_copy4+0>>0]=HEAP8[$8+0>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$8+3>>0]|0;
       $9 = (_PixelIsMagenta($$byval_copy4)|0);
       $10 = ($9|0)==(0);
       $6 = (($x$111) + 1)|0;
       if ($10) {
        $x$1$lcssa = $x$111;
        break L5;
       }
       $5 = ($6|0)<($imgWidth|0);
       if ($5) {
        $x$111 = $6;
       } else {
        $x$1$lcssa = $6;
        break;
       }
      }
     } else {
      $x$1$lcssa = 0;
     }
    } while(0);
    $11 = Math_imul($y$016, $imgWidth)|0;
    $12 = (($x$1$lcssa) + ($11))|0;
    $13 = (($imgDataPixel) + ($12<<2)|0);
    ;HEAP8[$$byval_copy4+0>>0]=HEAP8[$13+0>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$13+3>>0]|0;
    $14 = (_PixelIsMagenta($$byval_copy4)|0);
    $15 = ($14|0)==(0);
    $3 = (($y$016) + 1)|0;
    if ($15) {
     $x$2 = $x$1$lcssa;$y$0$lcssa = $y$016;
     break L1;
    }
    $2 = ($3|0)<($imgHeight|0);
    if ($2) {
     $y$016 = $3;
    } else {
     $x$2 = $x$1$lcssa;$y$0$lcssa = $3;
     break;
    }
   }
  } else {
   $x$2 = 0;$y$0$lcssa = 0;
  }
 } while(0);
 $j$0 = 0;
 while(1) {
  $16 = (($j$0) + ($y$0$lcssa))|0;
  $17 = Math_imul($16, $imgWidth)|0;
  $18 = (($17) + ($x$2))|0;
  $19 = (($imgDataPixel) + ($18<<2)|0);
  ;HEAP8[$$byval_copy4+0>>0]=HEAP8[$19+0>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$19+3>>0]|0;
  $20 = (_PixelIsMagenta($$byval_copy4)|0);
  $21 = ($20|0)==(0);
  $22 = (($j$0) + 1)|0;
  if ($21) {
   $j$0 = $22;
  } else {
   break;
  }
 }
 $23 = ($y$0$lcssa|0)<($imgHeight|0);
 if ($23) {
  $24 = ($x$2|0)<($imgWidth|0);
  $26 = $y$0$lcssa;$index$06 = 0;$lineToRead$07 = 0;
  while(1) {
   $25 = Math_imul($26, $imgWidth)|0;
   L19: do {
    if ($24) {
     $index$12 = $index$06;$xPosToRead$13 = $x$2;
     while(1) {
      $27 = (($xPosToRead$13) + ($25))|0;
      $28 = (($imgDataPixel) + ($27<<2)|0);
      ;HEAP8[$$byval_copy4+0>>0]=HEAP8[$28+0>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$28+3>>0]|0;
      $29 = (_PixelIsMagenta($$byval_copy4)|0);
      $30 = ($29|0)==(0);
      if (!($30)) {
       $index$1$lcssa = $index$12;
       break L19;
      }
      $31 = (($index$12) + 32)|0;
      $32 = (($tempCharSet) + (($index$12*20)|0)|0);
      HEAP32[$32>>2] = $31;
      $33 = ((($tempCharSet) + (($index$12*20)|0)|0) + 4|0);
      HEAP32[$33>>2] = $xPosToRead$13;
      $34 = ((($tempCharSet) + (($index$12*20)|0)|0) + 8|0);
      HEAP32[$34>>2] = $26;
      $35 = ((($tempCharSet) + (($index$12*20)|0)|0) + 16|0);
      HEAP32[$35>>2] = $j$0;
      $charWidth$0 = 0;
      while(1) {
       $36 = (($charWidth$0) + ($27))|0;
       $37 = (($imgDataPixel) + ($36<<2)|0);
       ;HEAP8[$$byval_copy4+0>>0]=HEAP8[$37+0>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$37+3>>0]|0;
       $38 = (_PixelIsMagenta($$byval_copy4)|0);
       $39 = ($38|0)==(0);
       $40 = (($charWidth$0) + 1)|0;
       if ($39) {
        $charWidth$0 = $40;
       } else {
        break;
       }
      }
      $41 = ((($tempCharSet) + (($index$12*20)|0)|0) + 12|0);
      HEAP32[$41>>2] = $charWidth$0;
      $42 = (($index$12) + 1)|0;
      $43 = (($xPosToRead$13) + ($x$2))|0;
      $44 = (($43) + ($charWidth$0))|0;
      $45 = ($44|0)<($imgWidth|0);
      if ($45) {
       $index$12 = $42;$xPosToRead$13 = $44;
      } else {
       $index$1$lcssa = $42;
       break;
      }
     }
    } else {
     $index$1$lcssa = $index$06;
    }
   } while(0);
   $46 = (($lineToRead$07) + 1)|0;
   $47 = Math_imul($46, $16)|0;
   $48 = (($47) + ($y$0$lcssa))|0;
   $49 = ($48|0)<($imgHeight|0);
   if ($49) {
    $26 = $48;$index$06 = $index$1$lcssa;$lineToRead$07 = $46;
   } else {
    $index$0$lcssa = $index$1$lcssa;
    break;
   }
  }
 } else {
  $index$0$lcssa = 0;
 }
 $50 = ($index$0$lcssa*20)|0;
 $51 = (_malloc($50)|0);
 HEAP32[$charSet>>2] = $51;
 $52 = ($index$0$lcssa|0)>(0);
 if ($52) {
  $i$01 = 0;
 } else {
  STACKTOP = sp;return ($index$0$lcssa|0);
 }
 while(1) {
  $53 = HEAP32[$charSet>>2]|0;
  $54 = (($53) + (($i$01*20)|0)|0);
  $55 = (($tempCharSet) + (($i$01*20)|0)|0);
  ;HEAP32[$54+0>>2]=HEAP32[$55+0>>2]|0;HEAP32[$54+4>>2]=HEAP32[$55+4>>2]|0;HEAP32[$54+8>>2]=HEAP32[$55+8>>2]|0;HEAP32[$54+12>>2]=HEAP32[$55+12>>2]|0;HEAP32[$54+16>>2]=HEAP32[$55+16>>2]|0;
  $56 = (($i$01) + 1)|0;
  $exitcond = ($56|0)==($index$0$lcssa|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $56;
  }
 }
 STACKTOP = sp;return ($index$0$lcssa|0);
}
function _UnloadSpriteFont($spriteFont) {
 $spriteFont = $spriteFont|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$spriteFont>>2]|0;
 _rlDeleteTextures($0);
 $1 = (($spriteFont) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 STACKTOP = sp;return;
}
function _DrawText($text,$posX,$posY,$fontSize,$color) {
 $text = $text|0;
 $posX = $posX|0;
 $posY = $posY|0;
 $fontSize = $fontSize|0;
 $color = $color|0;
 var $$fontSize = 0, $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $color$byval_copy = 0, $defaultFont$byval_copy = 0, $position = 0, $position$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $color$byval_copy = sp + 40|0;
 $position$byval_copy = sp;
 $defaultFont$byval_copy = sp + 8|0;
 $position = sp + 32|0;
 $0 = (+($posX|0));
 HEAPF32[$position>>2] = $0;
 $1 = (($position) + 4|0);
 $2 = (+($posY|0));
 HEAPF32[$1>>2] = $2;
 $3 = ($fontSize|0)<(10);
 $$fontSize = $3 ? 10 : $fontSize;
 $4 = (($$fontSize|0) / 10)&-1;
 ;HEAP32[$defaultFont$byval_copy+0>>2]=HEAP32[9408+0>>2]|0;HEAP32[$defaultFont$byval_copy+4>>2]=HEAP32[9408+4>>2]|0;HEAP32[$defaultFont$byval_copy+8>>2]=HEAP32[9408+8>>2]|0;HEAP32[$defaultFont$byval_copy+12>>2]=HEAP32[9408+12>>2]|0;HEAP32[$defaultFont$byval_copy+16>>2]=HEAP32[9408+16>>2]|0;
 ;HEAP32[$position$byval_copy+0>>2]=HEAP32[$position+0>>2]|0;HEAP32[$position$byval_copy+4>>2]=HEAP32[$position+4>>2]|0;
 ;HEAP8[$color$byval_copy+0>>0]=HEAP8[$color+0>>0]|0;HEAP8[$color$byval_copy+1>>0]=HEAP8[$color+1>>0]|0;HEAP8[$color$byval_copy+2>>0]=HEAP8[$color+2>>0]|0;HEAP8[$color$byval_copy+3>>0]=HEAP8[$color+3>>0]|0;
 _DrawTextEx($defaultFont$byval_copy,$text,$position$byval_copy,$$fontSize,$4,$color$byval_copy);
 STACKTOP = sp;return;
}
function _DrawTextEx($spriteFont,$text,$position,$fontSize,$spacing,$tint) {
 $spriteFont = $spriteFont|0;
 $text = $text|0;
 $position = $position|0;
 $fontSize = $fontSize|0;
 $spacing = $spacing|0;
 $tint = $tint|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0, $9 = 0.0, $exitcond = 0, $i$02 = 0, $positionX$0 = 0, $positionX$0$in1 = 0.0, $scaleFactor$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($text|0))|0);
 $1 = +HEAPF32[$position>>2];
 $2 = (($spriteFont) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<($fontSize|0);
 if ($6) {
  $7 = (+($fontSize|0));
  $8 = (+($5|0));
  $9 = $7 / $8;
  $scaleFactor$0 = $9;
 } else {
  $scaleFactor$0 = 1.0;
 }
 $10 = HEAP32[$spriteFont>>2]|0;
 _rlEnableTexture($10);
 _rlBegin(2);
 $11 = ($0|0)>(0);
 if (!($11)) {
  _rlEnd();
  STACKTOP = sp;return;
 }
 $12 = HEAP32[$2>>2]|0;
 $13 = HEAP8[$tint>>0]|0;
 $14 = (($tint) + 1|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = (($tint) + 2|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = (($tint) + 3|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = (($spriteFont) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (+($21|0));
 $23 = (($spriteFont) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (+($24|0));
 $26 = (($position) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = HEAP32[$20>>2]|0;
 $29 = (+($28|0));
 $30 = (+($24|0));
 $31 = (+($28|0));
 $32 = HEAP32[$23>>2]|0;
 $33 = (+($32|0));
 $34 = +HEAPF32[$26>>2];
 $35 = HEAP32[$20>>2]|0;
 $36 = (+($35|0));
 $37 = (+($32|0));
 $38 = HEAP32[$2>>2]|0;
 $39 = (+($spacing|0));
 $i$02 = 0;$positionX$0$in1 = $1;
 while(1) {
  $positionX$0 = (~~(($positionX$0$in1)));
  $40 = (($text) + ($i$02)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $43 = (($42) + -32)|0;
  $44 = ((($12) + (($43*20)|0)|0) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($12) + (($43*20)|0)|0) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($12) + (($43*20)|0)|0) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($12) + (($43*20)|0)|0) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  _rlColor4ub($13,$15,$17,$19);
  $52 = (+($45|0));
  $53 = $52 / $22;
  $54 = (+($47|0));
  $55 = $54 / $25;
  _rlTexCoord2f($53,$55);
  $56 = (+($positionX$0|0));
  _rlVertex2f($56,$27);
  $57 = $52 / $29;
  $58 = (($51) + ($47))|0;
  $59 = (+($58|0));
  $60 = $59 / $30;
  _rlTexCoord2f($57,$60);
  $61 = (+($51|0));
  $62 = $scaleFactor$0 * $61;
  $63 = $62 + $27;
  _rlVertex2f($56,$63);
  $64 = (($49) + ($45))|0;
  $65 = (+($64|0));
  $66 = $65 / $31;
  $67 = $59 / $33;
  _rlTexCoord2f($66,$67);
  $68 = (+($49|0));
  $69 = $scaleFactor$0 * $68;
  $70 = $56 + $69;
  $71 = $62 + $34;
  _rlVertex2f($70,$71);
  $72 = $65 / $36;
  $73 = $54 / $37;
  _rlTexCoord2f($72,$73);
  _rlVertex2f($70,$34);
  $74 = HEAP8[$40>>0]|0;
  $75 = $74 << 24 >> 24;
  $76 = (($75) + -32)|0;
  $77 = ((($38) + (($76*20)|0)|0) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (+($78|0));
  $80 = $scaleFactor$0 * $79;
  $81 = $39 + $80;
  $82 = $56 + $81;
  $83 = (($i$02) + 1)|0;
  $exitcond = ($83|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $83;$positionX$0$in1 = $82;
  }
 }
 _rlEnd();
 STACKTOP = sp;return;
}
function _FormatText($text,$varargs) {
 $text = $text|0;
 $varargs = $varargs|0;
 var $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 HEAP32[$args>>2] = $varargs;
 (_vsprintf(10976,$text,$args)|0);
 STACKTOP = sp;return (10976|0);
}
function _MeasureText($text,$fontSize) {
 $text = $text|0;
 $fontSize = $fontSize|0;
 var $$fontSize = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $defaultFont$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $defaultFont$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = ($fontSize|0)<(10);
 $$fontSize = $1 ? 10 : $fontSize;
 $2 = (($$fontSize|0) / 10)&-1;
 ;HEAP32[$defaultFont$byval_copy+0>>2]=HEAP32[9408+0>>2]|0;HEAP32[$defaultFont$byval_copy+4>>2]=HEAP32[9408+4>>2]|0;HEAP32[$defaultFont$byval_copy+8>>2]=HEAP32[9408+8>>2]|0;HEAP32[$defaultFont$byval_copy+12>>2]=HEAP32[9408+12>>2]|0;HEAP32[$defaultFont$byval_copy+16>>2]=HEAP32[9408+16>>2]|0;
 _MeasureTextEx($0,$defaultFont$byval_copy,$text,$$fontSize,$2);
 $3 = +HEAPF32[$0>>2];
 $4 = (~~(($3)));
 STACKTOP = sp;return ($4|0);
}
function _MeasureTextEx($agg$result,$spriteFont,$text,$fontSize,$spacing) {
 $agg$result = $agg$result|0;
 $spriteFont = $spriteFont|0;
 $text = $text|0;
 $fontSize = $fontSize|0;
 $spacing = $spacing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $phitmp = 0.0, $scaleFactor$0 = 0.0, $textWidth$0$lcssa = 0.0, $textWidth$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($text|0))|0);
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = (($spriteFont) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $i$01 = 0;$textWidth$02 = 0;
  while(1) {
   $4 = (($text) + ($i$01)|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = $5 << 24 >> 24;
   $7 = (($6) + -32)|0;
   $8 = ((($3) + (($7*20)|0)|0) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + ($textWidth$02))|0;
   $11 = (($i$01) + 1)|0;
   $exitcond = ($11|0)==($0|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $11;$textWidth$02 = $10;
   }
  }
  $phitmp = (+($10|0));
  $textWidth$0$lcssa = $phitmp;
 } else {
  $textWidth$0$lcssa = 0.0;
 }
 $12 = (($spriteFont) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)<($fontSize|0);
 if ($16) {
  $17 = (+($fontSize|0));
  $18 = (+($15|0));
  $19 = $17 / $18;
  $scaleFactor$0 = $19;
 } else {
  $scaleFactor$0 = 1.0;
 }
 $20 = $textWidth$0$lcssa * $scaleFactor$0;
 $21 = (($0) + -1)|0;
 $22 = Math_imul($21, $spacing)|0;
 $23 = (+($22|0));
 $24 = $23 + $20;
 $25 = HEAP32[$12>>2]|0;
 $26 = (($25) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (+($27|0));
 $29 = $scaleFactor$0 * $28;
 HEAPF32[$agg$result>>2] = $24;
 $30 = (($agg$result) + 4|0);
 HEAPF32[$30>>2] = $29;
 STACKTOP = sp;return;
}
function _GetFontBaseSize($spriteFont) {
 $spriteFont = $spriteFont|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($spriteFont) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _DrawFPS($posX,$posY) {
 $posX = $posX|0;
 $posY = $posY|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $buffer = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp;
 $buffer = sp + 12|0;
 $0 = sp + 8|0;
 $1 = HEAP32[11040>>2]|0;
 $2 = HEAP32[11048>>2]|0;
 $3 = ($1|0)<($2|0);
 if ($3) {
  $4 = (($1) + 1)|0;
  $storemerge = $4;
 } else {
  $5 = (+_GetFPS());
  HEAPF32[11032>>2] = $5;
  $6 = (~~(($5)));
  HEAP32[11048>>2] = $6;
  $storemerge = 0;
 }
 HEAP32[11040>>2] = $storemerge;
 $7 = +HEAPF32[11032>>2];
 $8 = $7;
 HEAPF64[tempDoublePtr>>3]=$8;HEAP32[$$byval_copy>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$$byval_copy+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_sprintf($buffer,11056,$$byval_copy)|0);
 HEAP8[$0>>0] = 0;
 $9 = (($0) + 1|0);
 HEAP8[$9>>0] = -98;
 $10 = (($0) + 2|0);
 HEAP8[$10>>0] = 47;
 $11 = (($0) + 3|0);
 HEAP8[$11>>0] = -1;
 ;HEAP8[$$byval_copy+0>>0]=HEAP8[$0+0>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawText($buffer,$posX,$posY,20,$$byval_copy);
 STACKTOP = sp;return;
}
function _PixelIsMagenta($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = ($0<<24>>24)==(-1);
 if ($1) {
  $2 = (($p) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   $5 = (($p) + 2|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(-1);
   if ($7) {
    $8 = (($p) + 3|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-1);
    $12 = $10;
   } else {
    $12 = 0;
   }
  } else {
   $12 = 0;
  }
 } else {
  $12 = 0;
 }
 $11 = $12&1;
 STACKTOP = sp;return ($11|0);
}
function _stbi_image_free($retval_from_stbi_load) {
 $retval_from_stbi_load = $retval_from_stbi_load|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($retval_from_stbi_load);
 STACKTOP = sp;return;
}
function _stbi_load($filename,$x,$y,$comp,$req_comp) {
 $filename = $filename|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__fopen($filename)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _stbi__err(11328);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $2 = (_stbi_load_from_file($0,$x,$y,$comp,$req_comp)|0);
  (_fclose(($0|0))|0);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stbi__fopen($filename) {
 $filename = $filename|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fopen(($filename|0),(11320|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _stbi__err($str) {
 $str = $str|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[11312>>2] = $str;
 STACKTOP = sp;return;
}
function _stbi_load_from_file($f,$x,$y,$comp,$req_comp) {
 $f = $f|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp;
 _stbi__start_file($s,$f);
 $0 = (_stbi_load_main($s,$x,$y,$comp,$req_comp)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return ($0|0);
 }
 $2 = (($s) + 172|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($s) + 168|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($7) - ($6))|0;
 (_fseek(($f|0),($8|0),1)|0);
 STACKTOP = sp;return ($0|0);
}
function _stbi__start_file($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _stbi__start_callbacks($s,15912,$f);
 STACKTOP = sp;return;
}
function _stbi_load_main($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__jpeg_test($s)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $3 = (_stbi__png_test($s)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    $5 = (_stbi__png_load($s,$x,$y,$comp,$req_comp)|0);
    $$0 = $5;
    break;
   }
   $6 = (_stbi__bmp_test($s)|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    $8 = (_stbi__bmp_load($s,$x,$y,$comp,$req_comp)|0);
    $$0 = $8;
    break;
   }
   $9 = (_stbi__gif_test($s)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    $11 = (_stbi__gif_load($s,$x,$y,$comp,$req_comp)|0);
    $$0 = $11;
    break;
   }
   $12 = (_stbi__psd_test($s)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    $14 = (_stbi__psd_load($s,$x,$y,$comp,$req_comp)|0);
    $$0 = $14;
    break;
   }
   $15 = (_stbi__pic_test($s)|0);
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = (_stbi__pic_load($s,$x,$y,$comp,$req_comp)|0);
    $$0 = $17;
    break;
   }
   $18 = (_stbi__pnm_test($s)|0);
   $19 = ($18|0)==(0);
   if (!($19)) {
    $20 = (_stbi__pnm_load($s,$x,$y,$comp,$req_comp)|0);
    $$0 = $20;
    break;
   }
   $21 = (_stbi__tga_test($s)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    _stbi__err(12480);
    $$0 = 0;
    break;
   } else {
    $23 = (_stbi__tga_load($s,$x,$y,$comp,$req_comp)|0);
    $$0 = $23;
    break;
   }
  } else {
   $2 = (_stbi__jpeg_load($s,$x,$y,$comp,$req_comp)|0);
   $$0 = $2;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _stbi__start_callbacks($s,$c,$user) {
 $s = $s|0;
 $c = $c|0;
 $user = $user|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + 16|0);
 ;HEAP32[$0+0>>2]=HEAP32[$c+0>>2]|0;HEAP32[$0+4>>2]=HEAP32[$c+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$c+8>>2]|0;
 $1 = (($s) + 28|0);
 HEAP32[$1>>2] = $user;
 $2 = (($s) + 36|0);
 HEAP32[$2>>2] = 128;
 $3 = (($s) + 32|0);
 HEAP32[$3>>2] = 1;
 $4 = (($s) + 40|0);
 $5 = (($s) + 176|0);
 HEAP32[$5>>2] = $4;
 _stbi__refill_buffer($s);
 STACKTOP = sp;return;
}
function _stbi__malloc($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($size)|0);
 STACKTOP = sp;return ($0|0);
}
function _stbi__do_zlib($a,$obuf,$olen,$exp,$parse_header) {
 $a = $a|0;
 $obuf = $obuf|0;
 $olen = $olen|0;
 $exp = $exp|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($a) + 20|0);
 HEAP32[$0>>2] = $obuf;
 $1 = (($a) + 16|0);
 HEAP32[$1>>2] = $obuf;
 $2 = (($obuf) + ($olen)|0);
 $3 = (($a) + 24|0);
 HEAP32[$3>>2] = $2;
 $4 = (($a) + 28|0);
 HEAP32[$4>>2] = $exp;
 $5 = (_stbi__parse_zlib($a,$parse_header)|0);
 STACKTOP = sp;return ($5|0);
}
function _stbi_zlib_decode_malloc_guesssize_headerflag($buffer,$len,$initial_size,$outlen,$parse_header) {
 $buffer = $buffer|0;
 $len = $len|0;
 $initial_size = $initial_size|0;
 $outlen = $outlen|0;
 $parse_header = $parse_header|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4080|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a = sp;
 $0 = (_stbi__malloc($initial_size)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$a>>2] = $buffer;
 $2 = (($buffer) + ($len)|0);
 $3 = (($a) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = (_stbi__do_zlib($a,$0,$initial_size,1,$parse_header)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $16 = (($a) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  _free($17);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($outlen|0)==(0|0);
 if (!($6)) {
  $7 = (($a) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($a) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $8;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  HEAP32[$outlen>>2] = $13;
 }
 $14 = (($a) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function _LoadImage($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i$02 = 0, $i2$04 = 0, $image$sroa$0$0 = 0, $image$sroa$1$0 = 0, $image$sroa$2$0 = 0, $imageDDS = 0, $imgBpp = 0, $imgHeight = 0, $imgWidth = 0, $pix$01 = 0, $pix1$03 = 0, $vararg_buffer15 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer15 = sp;
 $imgWidth = sp + 40|0;
 $imgHeight = sp + 12|0;
 $imgBpp = sp + 16|0;
 $imageDDS = sp + 20|0;
 $0 = (_GetExtension($fileName)|0);
 $1 = (_strcmp($0,11360)|0);
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   label = 8;
  } else {
   $3 = (_GetExtension($fileName)|0);
   $4 = (_strcmp($3,11368)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    label = 8;
   } else {
    $6 = (_GetExtension($fileName)|0);
    $7 = (_strcmp($6,11376)|0);
    $8 = ($7|0)==(0);
    if ($8) {
     label = 8;
    } else {
     $9 = (_GetExtension($fileName)|0);
     $10 = (_strcmp($9,11384)|0);
     $11 = ($10|0)==(0);
     if ($11) {
      label = 8;
     } else {
      $12 = (_GetExtension($fileName)|0);
      $13 = (_strcmp($12,11392)|0);
      $14 = ($13|0)==(0);
      if ($14) {
       label = 8;
      } else {
       $15 = (_GetExtension($fileName)|0);
       $16 = (_strcmp($15,11400)|0);
       $17 = ($16|0)==(0);
       if ($17) {
        label = 8;
       } else {
        $18 = (_GetExtension($fileName)|0);
        $19 = (_strcmp($18,11408)|0);
        $20 = ($19|0)==(0);
        if ($20) {
         label = 8;
        } else {
         $57 = (_GetExtension($fileName)|0);
         $58 = (_strcmp($57,11512)|0);
         $59 = ($58|0)==(0);
         if (!($59)) {
          $96 = (_GetExtension($fileName)|0);
          $97 = (_strcmp($96,11640)|0);
          $98 = ($97|0)==(0);
          if ($98) {
           HEAP32[$vararg_buffer15>>2] = $fileName;
           _TraceLog(0,11648,$vararg_buffer15);
           $image$sroa$0$0 = 0;$image$sroa$1$0 = 0;$image$sroa$2$0 = 0;
           break;
          } else {
           HEAP32[$vararg_buffer15>>2] = $fileName;
           _TraceLog(2,11704,$vararg_buffer15);
           $image$sroa$0$0 = 0;$image$sroa$1$0 = 0;$image$sroa$2$0 = 0;
           break;
          }
         }
         _LoadDDS($imageDDS,$fileName);
         $60 = (($imageDDS) + 16|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = ($61|0)==(0);
         if (!($62)) {
          HEAP32[$vararg_buffer15>>2] = $fileName;
          _TraceLog(2,11584,$vararg_buffer15);
          $image$sroa$0$0 = 0;$image$sroa$1$0 = 0;$image$sroa$2$0 = 0;
          break;
         }
         $63 = (($imageDDS) + 4|0);
         $64 = HEAP32[$63>>2]|0;
         $65 = (($imageDDS) + 8|0);
         $66 = HEAP32[$65>>2]|0;
         $67 = $64 << 2;
         $68 = Math_imul($67, $66)|0;
         $69 = (_malloc($68)|0);
         $70 = HEAP32[$63>>2]|0;
         $71 = HEAP32[$65>>2]|0;
         $72 = $70 << 2;
         $73 = Math_imul($72, $71)|0;
         $74 = ($73|0)>(0);
         $75 = HEAP32[$imageDDS>>2]|0;
         if ($74) {
          $76 = HEAP32[$imageDDS>>2]|0;
          $78 = $75;$i2$04 = 0;$pix1$03 = 0;
          while(1) {
           $77 = (($78) + ($i2$04)|0);
           $79 = HEAP8[$77>>0]|0;
           $80 = (($69) + ($pix1$03<<2)|0);
           HEAP8[$80>>0] = $79;
           $81 = $i2$04 | 1;
           $82 = (($76) + ($81)|0);
           $83 = HEAP8[$82>>0]|0;
           $84 = ((($69) + ($pix1$03<<2)|0) + 1|0);
           HEAP8[$84>>0] = $83;
           $85 = $i2$04 | 2;
           $86 = (($76) + ($85)|0);
           $87 = HEAP8[$86>>0]|0;
           $88 = ((($69) + ($pix1$03<<2)|0) + 2|0);
           HEAP8[$88>>0] = $87;
           $89 = $i2$04 | 3;
           $90 = (($76) + ($89)|0);
           $91 = HEAP8[$90>>0]|0;
           $92 = ((($69) + ($pix1$03<<2)|0) + 3|0);
           HEAP8[$92>>0] = $91;
           $93 = (($pix1$03) + 1)|0;
           $94 = (($i2$04) + 4)|0;
           $95 = ($94|0)<($73|0);
           if ($95) {
            $78 = $76;$i2$04 = $94;$pix1$03 = $93;
           } else {
            $$lcssa = $76;
            break;
           }
          }
         } else {
          $$lcssa = $75;
         }
         _free($$lcssa);
         HEAP32[$vararg_buffer15>>2] = $fileName;
         _TraceLog(0,11520,$vararg_buffer15);
         $image$sroa$0$0 = $69;$image$sroa$1$0 = $70;$image$sroa$2$0 = $71;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 8) {
   $21 = (_stbi_load($fileName,$imgWidth,$imgHeight,$imgBpp,4)|0);
   $22 = ($21|0)==(0|0);
   if ($22) {
    HEAP32[$vararg_buffer15>>2] = $fileName;
    _TraceLog(2,11456,$vararg_buffer15);
    $image$sroa$0$0 = 0;$image$sroa$1$0 = 0;$image$sroa$2$0 = 0;
    break;
   }
   $23 = HEAP32[$imgWidth>>2]|0;
   $24 = HEAP32[$imgHeight>>2]|0;
   $25 = $23 << 2;
   $26 = Math_imul($25, $24)|0;
   $27 = (_malloc($26)|0);
   $28 = HEAP32[$imgWidth>>2]|0;
   $29 = HEAP32[$imgHeight>>2]|0;
   $30 = $28 << 2;
   $31 = Math_imul($30, $29)|0;
   $32 = ($31|0)>(0);
   if ($32) {
    $33 = HEAP32[$imgWidth>>2]|0;
    $34 = HEAP32[$imgHeight>>2]|0;
    $35 = $33 << 2;
    $36 = Math_imul($35, $34)|0;
    $i$02 = 0;$pix$01 = 0;
    while(1) {
     $37 = (($21) + ($i$02)|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = (($27) + ($pix$01<<2)|0);
     HEAP8[$39>>0] = $38;
     $40 = $i$02 | 1;
     $41 = (($21) + ($40)|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = ((($27) + ($pix$01<<2)|0) + 1|0);
     HEAP8[$43>>0] = $42;
     $44 = $i$02 | 2;
     $45 = (($21) + ($44)|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = ((($27) + ($pix$01<<2)|0) + 2|0);
     HEAP8[$47>>0] = $46;
     $48 = $i$02 | 3;
     $49 = (($21) + ($48)|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = ((($27) + ($pix$01<<2)|0) + 3|0);
     HEAP8[$51>>0] = $50;
     $52 = (($pix$01) + 1)|0;
     $53 = (($i$02) + 4)|0;
     $54 = ($53|0)<($36|0);
     if ($54) {
      $i$02 = $53;$pix$01 = $52;
     } else {
      break;
     }
    }
   }
   _stbi_image_free($21);
   $55 = HEAP32[$imgWidth>>2]|0;
   $56 = HEAP32[$imgHeight>>2]|0;
   HEAP32[$vararg_buffer15>>2] = $fileName;
   $vararg_ptr1 = (($vararg_buffer15) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $55;
   $vararg_ptr2 = (($vararg_buffer15) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $56;
   _TraceLog(0,11416,$vararg_buffer15);
   $image$sroa$0$0 = $27;$image$sroa$1$0 = $55;$image$sroa$2$0 = $56;
  }
 } while(0);
 HEAP32[$agg$result>>2] = $image$sroa$0$0;
 $99 = (($agg$result) + 4|0);
 HEAP32[$99>>2] = $image$sroa$1$0;
 $100 = (($agg$result) + 8|0);
 HEAP32[$100>>2] = $image$sroa$2$0;
 STACKTOP = sp;return;
}
function _LoadDDS($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $bufsize$0 = 0, $dest$06 = 0, $dest$1$lcssa = 0, $dest$12 = 0, $exitcond = 0;
 var $exitcond11 = 0, $filecode = 0, $header = 0, $image$sroa$0$0 = 0, $image$sroa$1$0 = 0, $image$sroa$2$0 = 0, $image$sroa$3$0 = 0, $image$sroa$4$0 = 0, $scevgep = 0, $scevgep10 = 0, $src$05 = 0, $src$1$lcssa = 0, $src$11 = 0, $vararg_buffer23 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr7 = 0, $x$03 = 0, $y$07 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer23 = sp;
 $header = sp + 8|0;
 $filecode = sp + 132|0;
 $0 = (_fopen(($fileName|0),(11320|0))|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   HEAP32[$vararg_buffer23>>2] = $fileName;
   _TraceLog(2,12120,$vararg_buffer23);
   $image$sroa$0$0 = 0;$image$sroa$1$0 = 0;$image$sroa$2$0 = 0;$image$sroa$3$0 = 0;$image$sroa$4$0 = 0;
  } else {
   (_fread(($filecode|0),1,4,($0|0))|0);
   $2 = (_strncmp($filecode,12160,4)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    HEAP32[$vararg_buffer23>>2] = $fileName;
    _TraceLog(2,12168,$vararg_buffer23);
    (_fclose(($0|0))|0);
    $image$sroa$0$0 = 0;$image$sroa$1$0 = 0;$image$sroa$2$0 = 0;$image$sroa$3$0 = 0;$image$sroa$4$0 = 0;
    break;
   }
   (_fread(($header|0),124,1,($0|0))|0);
   HEAP32[$vararg_buffer23>>2] = $fileName;
   $vararg_ptr7 = (($vararg_buffer23) + 4|0);
   HEAP32[$vararg_ptr7>>2] = 124;
   _TraceLog(3,12216,$vararg_buffer23);
   $4 = (($header) + 72|0);
   $5 = HEAP32[$4>>2]|0;
   HEAP32[$vararg_buffer23>>2] = $fileName;
   $vararg_ptr11 = (($vararg_buffer23) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $5;
   _TraceLog(3,12248,$vararg_buffer23);
   $6 = (($header) + 76|0);
   $7 = HEAP32[$6>>2]|0;
   HEAP32[$vararg_buffer23>>2] = $fileName;
   $vararg_ptr15 = (($vararg_buffer23) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $7;
   _TraceLog(3,12288,$vararg_buffer23);
   $8 = (($header) + 80|0);
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$vararg_buffer23>>2] = $fileName;
   $vararg_ptr19 = (($vararg_buffer23) + 4|0);
   HEAP32[$vararg_ptr19>>2] = $9;
   _TraceLog(3,12328,$vararg_buffer23);
   $10 = (($header) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($header) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$6>>2]|0;
   $15 = ($14|0)==(64);
   do {
    if ($15) {
     $16 = (($header) + 84|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(24);
     if (!($18)) {
      $$pr = HEAP32[$6>>2]|0;
      $46 = $$pr;
      break;
     }
     $19 = $11 << 2;
     $20 = Math_imul($19, $13)|0;
     $21 = (_malloc($20)|0);
     $22 = HEAP32[$10>>2]|0;
     $23 = HEAP32[$12>>2]|0;
     $24 = ($22*3)|0;
     $25 = Math_imul($24, $23)|0;
     $26 = (_malloc($25)|0);
     $27 = ($11*3)|0;
     $28 = Math_imul($27, $13)|0;
     (_fread(($26|0),($28|0),1,($0|0))|0);
     $29 = ($13|0)>(0);
     if ($29) {
      $30 = ($11|0)>(0);
      $31 = $11 << 2;
      $32 = ($11*3)|0;
      $dest$06 = $21;$src$05 = $26;$y$07 = 0;
      while(1) {
       if ($30) {
        $scevgep = (($dest$06) + ($31)|0);
        $dest$12 = $dest$06;$src$11 = $src$05;$x$03 = 0;
        while(1) {
         $33 = (($src$11) + 1|0);
         $34 = HEAP8[$src$11>>0]|0;
         $35 = (($dest$12) + 1|0);
         HEAP8[$dest$12>>0] = $34;
         $36 = (($src$11) + 2|0);
         $37 = HEAP8[$33>>0]|0;
         $38 = (($dest$12) + 2|0);
         HEAP8[$35>>0] = $37;
         $39 = (($src$11) + 3|0);
         $40 = HEAP8[$36>>0]|0;
         $41 = (($dest$12) + 3|0);
         HEAP8[$38>>0] = $40;
         $42 = (($dest$12) + 4|0);
         HEAP8[$41>>0] = -1;
         $43 = (($x$03) + 1)|0;
         $exitcond = ($43|0)==($11|0);
         if ($exitcond) {
          break;
         } else {
          $dest$12 = $42;$src$11 = $39;$x$03 = $43;
         }
        }
        $scevgep10 = (($src$05) + ($32)|0);
        $dest$1$lcssa = $scevgep;$src$1$lcssa = $scevgep10;
       } else {
        $dest$1$lcssa = $dest$06;$src$1$lcssa = $src$05;
       }
       $44 = (($y$07) + 1)|0;
       $exitcond11 = ($44|0)==($13|0);
       if ($exitcond11) {
        break;
       } else {
        $dest$06 = $dest$1$lcssa;$src$05 = $src$1$lcssa;$y$07 = $44;
       }
      }
     }
     _free($26);
     $image$sroa$0$0 = $21;$image$sroa$1$0 = $11;$image$sroa$2$0 = $13;$image$sroa$3$0 = 1;$image$sroa$4$0 = 0;
     break L1;
    } else {
     $46 = $14;
    }
   } while(0);
   $45 = ($46|0)==(65);
   if ($45) {
    $47 = (($header) + 84|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==(32);
    if ($49) {
     $50 = HEAP32[$10>>2]|0;
     $51 = HEAP32[$12>>2]|0;
     $52 = $50 << 2;
     $53 = Math_imul($52, $51)|0;
     $54 = (_malloc($53)|0);
     $55 = $11 << 2;
     $56 = Math_imul($55, $13)|0;
     (_fread(($54|0),($56|0),1,($0|0))|0);
     $image$sroa$0$0 = $54;$image$sroa$1$0 = $11;$image$sroa$2$0 = $13;$image$sroa$3$0 = 1;$image$sroa$4$0 = 0;
     break;
    }
   }
   $57 = HEAP32[$6>>2]|0;
   $58 = ($57|0)==(4);
   if ($58) {
    $59 = HEAP32[$8>>2]|0;
    $60 = ($59|0)==(0);
    if ($60) {
     $image$sroa$0$0 = 0;$image$sroa$1$0 = $11;$image$sroa$2$0 = $13;$image$sroa$3$0 = 1;$image$sroa$4$0 = 0;
    } else {
     HEAP32[$vararg_buffer23>>2] = $fileName;
     _TraceLog(2,12360,$vararg_buffer23);
     HEAP32[$vararg_buffer23>>2] = $fileName;
     _TraceLog(2,12424,$vararg_buffer23);
     $61 = (($header) + 24|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62>>>0)>(1);
     $64 = (($header) + 16|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $63&1;
     $bufsize$0 = $65 << $66;
     $67 = (_malloc($bufsize$0)|0);
     (_fread(($67|0),1,($bufsize$0|0),($0|0))|0);
     (_fclose(($0|0))|0);
     $68 = HEAP32[$61>>2]|0;
     $69 = HEAP32[$8>>2]|0;
     if ((($69|0) == 894720068)) {
      $image$sroa$0$0 = $67;$image$sroa$1$0 = $11;$image$sroa$2$0 = $13;$image$sroa$3$0 = $68;$image$sroa$4$0 = 33779;
      break;
     } else if ((($69|0) == 827611204)) {
      $image$sroa$0$0 = $67;$image$sroa$1$0 = $11;$image$sroa$2$0 = $13;$image$sroa$3$0 = $68;$image$sroa$4$0 = 33777;
      break;
     } else if ((($69|0) == 861165636)) {
      $image$sroa$0$0 = $67;$image$sroa$1$0 = $11;$image$sroa$2$0 = $13;$image$sroa$3$0 = $68;$image$sroa$4$0 = 33778;
      break;
     } else {
      $image$sroa$0$0 = $67;$image$sroa$1$0 = $11;$image$sroa$2$0 = $13;$image$sroa$3$0 = $68;$image$sroa$4$0 = 0;
      break;
     }
    }
   } else {
    $image$sroa$0$0 = 0;$image$sroa$1$0 = $11;$image$sroa$2$0 = $13;$image$sroa$3$0 = 1;$image$sroa$4$0 = 0;
   }
  }
 } while(0);
 HEAP32[$agg$result>>2] = $image$sroa$0$0;
 $70 = (($agg$result) + 4|0);
 HEAP32[$70>>2] = $image$sroa$1$0;
 $71 = (($agg$result) + 8|0);
 HEAP32[$71>>2] = $image$sroa$2$0;
 $72 = (($agg$result) + 12|0);
 HEAP32[$72>>2] = $image$sroa$3$0;
 $73 = (($agg$result) + 16|0);
 HEAP32[$73>>2] = $image$sroa$4$0;
 STACKTOP = sp;return;
}
function _LoadTexture($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $image = 0, $image1 = 0, $image2 = 0, $image2$byval_copy10 = 0, $texture$sroa$0$0 = 0, $texture$sroa$0$1 = 0, $texture$sroa$1$0 = 0, $texture$sroa$2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $image2$byval_copy10 = sp;
 $image = sp + 60|0;
 $image1 = sp + 12|0;
 $image2 = sp + 32|0;
 $0 = sp + 44|0;
 $1 = sp + 48|0;
 $2 = (_GetExtension($fileName)|0);
 $3 = (_strcmp($2,11512)|0);
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   _LoadDDS($image,$fileName);
   $5 = (($image) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0);
   $8 = HEAP32[$image>>2]|0;
   $9 = (($image) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($image) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   if ($7) {
    $13 = (_rlglLoadTexture($8,$10,$12,0)|0);
    $texture$sroa$0$0 = $13;
   } else {
    $14 = (($image) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (_rlglLoadCompressedTexture($8,$10,$12,$15,$6)|0);
    $texture$sroa$0$0 = $16;
   }
   $17 = HEAP32[$9>>2]|0;
   $18 = HEAP32[$11>>2]|0;
   $19 = ($texture$sroa$0$0|0)==(0);
   if ($19) {
    HEAP32[$image2$byval_copy10>>2] = $fileName;
    _TraceLog(2,11760,$image2$byval_copy10);
   } else {
    HEAP32[$image2$byval_copy10>>2] = $fileName;
    _TraceLog(0,11800,$image2$byval_copy10);
   }
   $20 = HEAP32[$image>>2]|0;
   _free($20);
   $texture$sroa$0$1 = $texture$sroa$0$0;$texture$sroa$1$0 = $17;$texture$sroa$2$0 = $18;
  } else {
   $21 = (_GetExtension($fileName)|0);
   $22 = (_strcmp($21,11640)|0);
   $23 = ($22|0)==(0);
   if (!($23)) {
    _LoadImage($image2,$fileName);
    $38 = HEAP32[$image2>>2]|0;
    $39 = ($38|0)==(0|0);
    if ($39) {
     $texture$sroa$0$1 = 0;$texture$sroa$1$0 = 0;$texture$sroa$2$0 = 0;
     break;
    }
    HEAP32[$0>>2] = 0;
    ;HEAP8[$image2$byval_copy10+0>>0]=HEAP8[$0+0>>0]|0;HEAP8[$image2$byval_copy10+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$image2$byval_copy10+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$image2$byval_copy10+3>>0]=HEAP8[$0+3>>0]|0;
    _ConvertToPOT($image2,$image2$byval_copy10);
    ;HEAP32[$image2$byval_copy10+0>>2]=HEAP32[$image2+0>>2]|0;HEAP32[$image2$byval_copy10+4>>2]=HEAP32[$image2+4>>2]|0;HEAP32[$image2$byval_copy10+8>>2]=HEAP32[$image2+8>>2]|0;
    _LoadTextureFromImage($1,$image2$byval_copy10,0);
    $40 = HEAP32[$1>>2]|0;
    $41 = (($1) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($1) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    ;HEAP32[$image2$byval_copy10+0>>2]=HEAP32[$image2+0>>2]|0;HEAP32[$image2$byval_copy10+4>>2]=HEAP32[$image2+4>>2]|0;HEAP32[$image2$byval_copy10+8>>2]=HEAP32[$image2+8>>2]|0;
    _UnloadImage($image2$byval_copy10);
    $texture$sroa$0$1 = $40;$texture$sroa$1$0 = $42;$texture$sroa$2$0 = $44;
    break;
   }
   _LoadPKM($image1,$fileName);
   $24 = HEAP32[$image1>>2]|0;
   $25 = (($image1) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($image1) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($image1) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($image1) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (_rlglLoadCompressedTexture($24,$26,$28,$30,$32)|0);
   $34 = HEAP32[$25>>2]|0;
   $35 = HEAP32[$27>>2]|0;
   $36 = ($33|0)==(0);
   if ($36) {
    HEAP32[$image2$byval_copy10>>2] = $fileName;
    _TraceLog(2,11840,$image2$byval_copy10);
   } else {
    HEAP32[$image2$byval_copy10>>2] = $fileName;
    _TraceLog(0,11880,$image2$byval_copy10);
   }
   $37 = HEAP32[$image1>>2]|0;
   _free($37);
   $texture$sroa$0$1 = $33;$texture$sroa$1$0 = $34;$texture$sroa$2$0 = $35;
  }
 } while(0);
 HEAP32[$agg$result>>2] = $texture$sroa$0$1;
 $45 = (($agg$result) + 4|0);
 HEAP32[$45>>2] = $texture$sroa$1$0;
 $46 = (($agg$result) + 8|0);
 HEAP32[$46>>2] = $texture$sroa$2$0;
 STACKTOP = sp;return;
}
function _LoadPKM($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $filecode = 0, $height = 0, $image$sroa$0$0 = 0, $image$sroa$1$0 = 0, $image$sroa$2$0 = 0, $useless = 0, $vararg_buffer1 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $width = sp + 8|0;
 $height = sp + 4|0;
 $useless = sp + 6|0;
 $filecode = sp + 12|0;
 $0 = (_fopen(($fileName|0),(11320|0))|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   HEAP32[$vararg_buffer1>>2] = $fileName;
   _TraceLog(2,12024,$vararg_buffer1);
   $image$sroa$0$0 = 0;$image$sroa$1$0 = 0;$image$sroa$2$0 = 0;
  } else {
   (_fread(($filecode|0),1,4,($0|0))|0);
   $2 = (_strncmp($filecode,12064,4)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    (_fread(($useless|0),2,1,($0|0))|0);
    (_fread(($useless|0),2,1,($0|0))|0);
    (_fread(($width|0),2,1,($0|0))|0);
    (_fread(($height|0),2,1,($0|0))|0);
    $4 = HEAP16[$width>>1]|0;
    $5 = $4&65535;
    $6 = $5 >>> 2;
    $7 = HEAP16[$height>>1]|0;
    $8 = $7&65535;
    $9 = $8 >>> 2;
    $10 = $6 << 3;
    $11 = Math_imul($10, $9)|0;
    $12 = (_malloc($11)|0);
    (_fread(($12|0),1,($11|0),($0|0))|0);
    (_fclose(($0|0))|0);
    $13 = HEAP16[$width>>1]|0;
    $14 = $13&65535;
    $15 = HEAP16[$height>>1]|0;
    $16 = $15&65535;
    $image$sroa$0$0 = $12;$image$sroa$1$0 = $14;$image$sroa$2$0 = $16;
    break;
   } else {
    HEAP32[$vararg_buffer1>>2] = $fileName;
    _TraceLog(2,12072,$vararg_buffer1);
    (_fclose(($0|0))|0);
    $image$sroa$0$0 = 0;$image$sroa$1$0 = 0;$image$sroa$2$0 = 0;
    break;
   }
  }
 } while(0);
 HEAP32[$agg$result>>2] = $image$sroa$0$0;
 $17 = (($agg$result) + 4|0);
 HEAP32[$17>>2] = $image$sroa$1$0;
 $18 = (($agg$result) + 8|0);
 HEAP32[$18>>2] = $image$sroa$2$0;
 $19 = (($agg$result) + 12|0);
 HEAP32[$19>>2] = 1;
 $20 = (($agg$result) + 16|0);
 HEAP32[$20>>2] = 36196;
 STACKTOP = sp;return;
}
function _ConvertToPOT($image,$fillColor) {
 $image = $image|0;
 $fillColor = $fillColor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0, $i$01 = 0, $j$03 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (($image) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_GetNextPOT($1)|0);
 $3 = (($image) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_GetNextPOT($4)|0);
 $6 = HEAP32[$0>>2]|0;
 $7 = ($2|0)==($6|0);
 if ($7) {
  $8 = HEAP32[$3>>2]|0;
  $9 = ($5|0)==($8|0);
  if ($9) {
   STACKTOP = sp;return;
  }
 }
 $10 = $2 << 2;
 $11 = Math_imul($10, $5)|0;
 $12 = (_malloc($11)|0);
 $13 = ($5|0)>(0);
 if ($13) {
  $14 = ($2|0)>(0);
  $j$03 = 0;
  while(1) {
   if ($14) {
    $15 = Math_imul($j$03, $2)|0;
    $16 = Math_imul($j$03, $2)|0;
    $i$01 = 0;
    while(1) {
     $17 = HEAP32[$3>>2]|0;
     $18 = ($j$03|0)<($17|0);
     if ($18) {
      $19 = HEAP32[$0>>2]|0;
      $20 = ($i$01|0)<($19|0);
      if ($20) {
       $21 = (($i$01) + ($15))|0;
       $22 = Math_imul($19, $j$03)|0;
       $23 = (($22) + ($i$01))|0;
       $24 = HEAP32[$image>>2]|0;
       $25 = (($12) + ($21<<2)|0);
       $26 = (($24) + ($23<<2)|0);
       $27 = HEAPU8[$26>>0]|(HEAPU8[$26+1>>0]<<8)|(HEAPU8[$26+2>>0]<<16)|(HEAPU8[$26+3>>0]<<24);
       HEAP8[$25>>0]=$27&255;HEAP8[$25+1>>0]=($27>>8)&255;HEAP8[$25+2>>0]=($27>>16)&255;HEAP8[$25+3>>0]=$27>>24;
      } else {
       label = 10;
      }
     } else {
      label = 10;
     }
     if ((label|0) == 10) {
      label = 0;
      $28 = (($i$01) + ($16))|0;
      $29 = (($12) + ($28<<2)|0);
      $30 = HEAPU8[$fillColor>>0]|(HEAPU8[$fillColor+1>>0]<<8)|(HEAPU8[$fillColor+2>>0]<<16)|(HEAPU8[$fillColor+3>>0]<<24);
      HEAP8[$29>>0]=$30&255;HEAP8[$29+1>>0]=($30>>8)&255;HEAP8[$29+2>>0]=($30>>16)&255;HEAP8[$29+3>>0]=$30>>24;
     }
     $31 = (($i$01) + 1)|0;
     $exitcond = ($31|0)==($2|0);
     if ($exitcond) {
      break;
     } else {
      $i$01 = $31;
     }
    }
   }
   $32 = (($j$03) + 1)|0;
   $exitcond6 = ($32|0)==($5|0);
   if ($exitcond6) {
    break;
   } else {
    $j$03 = $32;
   }
  }
 }
 $33 = HEAP32[$0>>2]|0;
 $34 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $33;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $34;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $5;
 _TraceLog(2,11976,$vararg_buffer);
 $35 = HEAP32[$image>>2]|0;
 _free($35);
 HEAP32[$image>>2] = $12;
 HEAP32[$0>>2] = $2;
 HEAP32[$3>>2] = $5;
 STACKTOP = sp;return;
}
function _LoadTextureFromImage($agg$result,$image,$genMipmaps) {
 $agg$result = $agg$result|0;
 $image = $image|0;
 $genMipmaps = $genMipmaps|0;
 var $$lcssa = 0, $$lcssa1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $j$02 = 0, $texture$sroa$0$0 = 0, $texture$sroa$1$0 = 0, $texture$sroa$2$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = HEAP32[$image>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (($image) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(0);
  if ($4) {
   $5 = (($image) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>(0);
   if ($7) {
    $8 = $3 << 2;
    $9 = Math_imul($8, $6)|0;
    $10 = (_malloc($9)|0);
    $11 = HEAP32[$2>>2]|0;
    $12 = HEAP32[$5>>2]|0;
    $13 = $11 << 2;
    $14 = Math_imul($13, $12)|0;
    $15 = ($14|0)>(0);
    if ($15) {
     $16 = HEAP32[$image>>2]|0;
     $17 = HEAP32[$2>>2]|0;
     $18 = HEAP32[$5>>2]|0;
     $19 = $17 << 2;
     $20 = Math_imul($19, $18)|0;
     $i$03 = 0;$j$02 = 0;
     while(1) {
      $21 = (($16) + ($j$02<<2)|0);
      $22 = HEAP8[$21>>0]|0;
      $23 = (($10) + ($i$03)|0);
      HEAP8[$23>>0] = $22;
      $24 = ((($16) + ($j$02<<2)|0) + 1|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = $i$03 | 1;
      $27 = (($10) + ($26)|0);
      HEAP8[$27>>0] = $25;
      $28 = ((($16) + ($j$02<<2)|0) + 2|0);
      $29 = HEAP8[$28>>0]|0;
      $30 = $i$03 | 2;
      $31 = (($10) + ($30)|0);
      HEAP8[$31>>0] = $29;
      $32 = ((($16) + ($j$02<<2)|0) + 3|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = $i$03 | 3;
      $35 = (($10) + ($34)|0);
      HEAP8[$35>>0] = $33;
      $36 = (($j$02) + 1)|0;
      $37 = (($i$03) + 4)|0;
      $38 = ($37|0)<($20|0);
      if ($38) {
       $i$03 = $37;$j$02 = $36;
      } else {
       $$lcssa = $17;$$lcssa1 = $18;
       break;
      }
     }
    } else {
     $$lcssa = $11;$$lcssa1 = $12;
    }
    $39 = (_rlglLoadTexture($10,$$lcssa,$$lcssa1,$genMipmaps)|0);
    $40 = HEAP32[$2>>2]|0;
    $41 = HEAP32[$5>>2]|0;
    _free($10);
    $texture$sroa$0$0 = $39;$texture$sroa$1$0 = $40;$texture$sroa$2$0 = $41;
    HEAP32[$agg$result>>2] = $texture$sroa$0$0;
    $42 = (($agg$result) + 4|0);
    HEAP32[$42>>2] = $texture$sroa$1$0;
    $43 = (($agg$result) + 8|0);
    HEAP32[$43>>2] = $texture$sroa$2$0;
    STACKTOP = sp;return;
   }
  }
 }
 _TraceLog(2,11920,$vararg_buffer);
 $texture$sroa$0$0 = 0;$texture$sroa$1$0 = 0;$texture$sroa$2$0 = 0;
 HEAP32[$agg$result>>2] = $texture$sroa$0$0;
 $42 = (($agg$result) + 4|0);
 HEAP32[$42>>2] = $texture$sroa$1$0;
 $43 = (($agg$result) + 8|0);
 HEAP32[$43>>2] = $texture$sroa$2$0;
 STACKTOP = sp;return;
}
function _UnloadImage($image) {
 $image = $image|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$image>>2]|0;
 _free($0);
 STACKTOP = sp;return;
}
function _UnloadTexture($texture) {
 $texture = $texture|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$texture>>2]|0;
 _rlDeleteTextures($0);
 STACKTOP = sp;return;
}
function _DrawTexture($texture,$posX,$posY,$tint) {
 $texture = $texture|0;
 $posX = $posX|0;
 $posY = $posY|0;
 $tint = $tint|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $texture$byval_copy = 0, $tint$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tint$byval_copy = sp + 32|0;
 $$byval_copy = sp;
 $texture$byval_copy = sp + 8|0;
 $0 = sp + 24|0;
 $1 = (+($posX|0));
 HEAPF32[$0>>2] = $1;
 $2 = (($0) + 4|0);
 $3 = (+($posY|0));
 HEAPF32[$2>>2] = $3;
 ;HEAP32[$texture$byval_copy+0>>2]=HEAP32[$texture+0>>2]|0;HEAP32[$texture$byval_copy+4>>2]=HEAP32[$texture+4>>2]|0;HEAP32[$texture$byval_copy+8>>2]=HEAP32[$texture+8>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 ;HEAP8[$tint$byval_copy+0>>0]=HEAP8[$tint+0>>0]|0;HEAP8[$tint$byval_copy+1>>0]=HEAP8[$tint+1>>0]|0;HEAP8[$tint$byval_copy+2>>0]=HEAP8[$tint+2>>0]|0;HEAP8[$tint$byval_copy+3>>0]=HEAP8[$tint+3>>0]|0;
 _DrawTextureEx($texture$byval_copy,$$byval_copy,0.0,1.0,$tint$byval_copy);
 STACKTOP = sp;return;
}
function _DrawTextureEx($texture,$position,$rotation,$scale,$tint) {
 $texture = $texture|0;
 $position = $position|0;
 $rotation = +$rotation;
 $scale = +$scale;
 $tint = $tint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $destRec = 0, $destRec$byval_copy = 0, $origin = 0, $sourceRec = 0, $sourceRec$byval_copy = 0, $texture$byval_copy = 0, $tint$byval_copy = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tint$byval_copy = sp + 96|0;
 $tmpcast$byval_copy = sp + 88|0;
 $destRec$byval_copy = sp + 8|0;
 $sourceRec$byval_copy = sp + 24|0;
 $texture$byval_copy = sp + 40|0;
 $sourceRec = sp + 56|0;
 $destRec = sp + 72|0;
 $origin = sp;
 HEAP32[$sourceRec>>2] = 0;
 $0 = (($sourceRec) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($sourceRec) + 8|0);
 $2 = (($texture) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 $4 = (($sourceRec) + 12|0);
 $5 = (($texture) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = +HEAPF32[$position>>2];
 $8 = (~~(($7)));
 HEAP32[$destRec>>2] = $8;
 $9 = (($destRec) + 4|0);
 $10 = (($position) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (~~(($11)));
 HEAP32[$9>>2] = $12;
 $13 = (($destRec) + 8|0);
 $14 = HEAP32[$2>>2]|0;
 $15 = (+($14|0));
 $16 = $15 * $scale;
 $17 = (~~(($16)));
 HEAP32[$13>>2] = $17;
 $18 = (($destRec) + 12|0);
 $19 = HEAP32[$5>>2]|0;
 $20 = (+($19|0));
 $21 = $20 * $scale;
 $22 = (~~(($21)));
 HEAP32[$18>>2] = $22;
 $23 = $origin;
 $24 = $23;
 HEAP32[$24>>2] = 0;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = 0;
 ;HEAP32[$texture$byval_copy+0>>2]=HEAP32[$texture+0>>2]|0;HEAP32[$texture$byval_copy+4>>2]=HEAP32[$texture+4>>2]|0;HEAP32[$texture$byval_copy+8>>2]=HEAP32[$texture+8>>2]|0;
 ;HEAP32[$sourceRec$byval_copy+0>>2]=HEAP32[$sourceRec+0>>2]|0;HEAP32[$sourceRec$byval_copy+4>>2]=HEAP32[$sourceRec+4>>2]|0;HEAP32[$sourceRec$byval_copy+8>>2]=HEAP32[$sourceRec+8>>2]|0;HEAP32[$sourceRec$byval_copy+12>>2]=HEAP32[$sourceRec+12>>2]|0;
 ;HEAP32[$destRec$byval_copy+0>>2]=HEAP32[$destRec+0>>2]|0;HEAP32[$destRec$byval_copy+4>>2]=HEAP32[$destRec+4>>2]|0;HEAP32[$destRec$byval_copy+8>>2]=HEAP32[$destRec+8>>2]|0;HEAP32[$destRec$byval_copy+12>>2]=HEAP32[$destRec+12>>2]|0;
 ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$origin+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$origin+4>>2]|0;
 ;HEAP8[$tint$byval_copy+0>>0]=HEAP8[$tint+0>>0]|0;HEAP8[$tint$byval_copy+1>>0]=HEAP8[$tint+1>>0]|0;HEAP8[$tint$byval_copy+2>>0]=HEAP8[$tint+2>>0]|0;HEAP8[$tint$byval_copy+3>>0]=HEAP8[$tint+3>>0]|0;
 _DrawTexturePro($texture$byval_copy,$sourceRec$byval_copy,$destRec$byval_copy,$tmpcast$byval_copy,$rotation,$tint$byval_copy);
 STACKTOP = sp;return;
}
function _DrawTexturePro($texture,$sourceRec,$destRec,$origin,$rotation,$tint) {
 $texture = $texture|0;
 $sourceRec = $sourceRec|0;
 $destRec = $destRec|0;
 $origin = $origin|0;
 $rotation = +$rotation;
 $tint = $tint|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$texture>>2]|0;
 _rlEnableTexture($0);
 _rlPushMatrix();
 $1 = HEAP32[$destRec>>2]|0;
 $2 = (+($1|0));
 $3 = (($destRec) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+($4|0));
 _rlTranslatef($2,$5,0.0);
 _rlRotatef($rotation,0.0,0.0,1.0);
 $6 = +HEAPF32[$origin>>2];
 $7 = -$6;
 $8 = (($origin) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = -$9;
 _rlTranslatef($7,$10,0.0);
 _rlBegin(2);
 $11 = HEAP8[$tint>>0]|0;
 $12 = (($tint) + 1|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (($tint) + 2|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = (($tint) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 _rlColor4ub($11,$13,$15,$17);
 $18 = HEAP32[$sourceRec>>2]|0;
 $19 = (+($18|0));
 $20 = (($texture) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (+($21|0));
 $23 = $19 / $22;
 $24 = (($sourceRec) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (+($25|0));
 $27 = (($texture) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (+($28|0));
 $30 = $26 / $29;
 _rlTexCoord2f($23,$30);
 _rlVertex2f(0.0,0.0);
 $31 = HEAP32[$sourceRec>>2]|0;
 $32 = (+($31|0));
 $33 = HEAP32[$20>>2]|0;
 $34 = (+($33|0));
 $35 = $32 / $34;
 $36 = HEAP32[$24>>2]|0;
 $37 = (($sourceRec) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($36))|0;
 $40 = (+($39|0));
 $41 = HEAP32[$27>>2]|0;
 $42 = (+($41|0));
 $43 = $40 / $42;
 _rlTexCoord2f($35,$43);
 $44 = (($destRec) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (+($45|0));
 _rlVertex2f(0.0,$46);
 $47 = HEAP32[$sourceRec>>2]|0;
 $48 = (($sourceRec) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + ($47))|0;
 $51 = (+($50|0));
 $52 = HEAP32[$20>>2]|0;
 $53 = (+($52|0));
 $54 = $51 / $53;
 $55 = HEAP32[$24>>2]|0;
 $56 = HEAP32[$37>>2]|0;
 $57 = (($56) + ($55))|0;
 $58 = (+($57|0));
 $59 = HEAP32[$27>>2]|0;
 $60 = (+($59|0));
 $61 = $58 / $60;
 _rlTexCoord2f($54,$61);
 $62 = (($destRec) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (+($63|0));
 $65 = HEAP32[$44>>2]|0;
 $66 = (+($65|0));
 _rlVertex2f($64,$66);
 $67 = HEAP32[$sourceRec>>2]|0;
 $68 = HEAP32[$48>>2]|0;
 $69 = (($68) + ($67))|0;
 $70 = (+($69|0));
 $71 = HEAP32[$20>>2]|0;
 $72 = (+($71|0));
 $73 = $70 / $72;
 $74 = HEAP32[$24>>2]|0;
 $75 = (+($74|0));
 $76 = HEAP32[$27>>2]|0;
 $77 = (+($76|0));
 $78 = $75 / $77;
 _rlTexCoord2f($73,$78);
 $79 = HEAP32[$62>>2]|0;
 $80 = (+($79|0));
 _rlVertex2f($80,0.0);
 _rlEnd();
 _rlPopMatrix();
 STACKTOP = sp;return;
}
function _DrawTextureRec($texture,$sourceRec,$position,$tint) {
 $texture = $texture|0;
 $sourceRec = $sourceRec|0;
 $position = $position|0;
 $tint = $tint|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $destRec = 0, $destRec$byval_copy = 0, $origin = 0, $sourceRec$byval_copy = 0;
 var $texture$byval_copy = 0, $tint$byval_copy = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tint$byval_copy = sp + 80|0;
 $tmpcast$byval_copy = sp + 72|0;
 $destRec$byval_copy = sp + 8|0;
 $sourceRec$byval_copy = sp + 24|0;
 $texture$byval_copy = sp + 40|0;
 $destRec = sp + 56|0;
 $origin = sp;
 $0 = +HEAPF32[$position>>2];
 $1 = (~~(($0)));
 HEAP32[$destRec>>2] = $1;
 $2 = (($destRec) + 4|0);
 $3 = (($position) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = (~~(($4)));
 HEAP32[$2>>2] = $5;
 $6 = (($destRec) + 8|0);
 $7 = (($sourceRec) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = (($destRec) + 12|0);
 $10 = (($sourceRec) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$9>>2] = $11;
 $12 = $origin;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 ;HEAP32[$texture$byval_copy+0>>2]=HEAP32[$texture+0>>2]|0;HEAP32[$texture$byval_copy+4>>2]=HEAP32[$texture+4>>2]|0;HEAP32[$texture$byval_copy+8>>2]=HEAP32[$texture+8>>2]|0;
 ;HEAP32[$sourceRec$byval_copy+0>>2]=HEAP32[$sourceRec+0>>2]|0;HEAP32[$sourceRec$byval_copy+4>>2]=HEAP32[$sourceRec+4>>2]|0;HEAP32[$sourceRec$byval_copy+8>>2]=HEAP32[$sourceRec+8>>2]|0;HEAP32[$sourceRec$byval_copy+12>>2]=HEAP32[$sourceRec+12>>2]|0;
 ;HEAP32[$destRec$byval_copy+0>>2]=HEAP32[$destRec+0>>2]|0;HEAP32[$destRec$byval_copy+4>>2]=HEAP32[$destRec+4>>2]|0;HEAP32[$destRec$byval_copy+8>>2]=HEAP32[$destRec+8>>2]|0;HEAP32[$destRec$byval_copy+12>>2]=HEAP32[$destRec+12>>2]|0;
 ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$origin+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$origin+4>>2]|0;
 ;HEAP8[$tint$byval_copy+0>>0]=HEAP8[$tint+0>>0]|0;HEAP8[$tint$byval_copy+1>>0]=HEAP8[$tint+1>>0]|0;HEAP8[$tint$byval_copy+2>>0]=HEAP8[$tint+2>>0]|0;HEAP8[$tint$byval_copy+3>>0]=HEAP8[$tint+3>>0]|0;
 _DrawTexturePro($texture$byval_copy,$sourceRec$byval_copy,$destRec$byval_copy,$tmpcast$byval_copy,0.0,$tint$byval_copy);
 STACKTOP = sp;return;
}
function _stbi__pnm_info($s,$x,$y,$comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 _stbi__rewind($s);
 $0 = (_stbi__get8($s)|0);
 $1 = (_stbi__get8($s)|0);
 $2 = ($0<<24>>24)==(80);
 if ($2) {
  $$off = (($1) + -53)<<24>>24;
  $switch = ($$off&255)<(2);
  if ($switch) {
   $3 = ($1<<24>>24)==(54);
   $4 = $3 ? 3 : 1;
   HEAP32[$comp>>2] = $4;
   $5 = (_stbi__get8($s)|0);
   HEAP8[$c>>0] = $5;
   _stbi__pnm_skip_whitespace($s,$c);
   $6 = (_stbi__pnm_getinteger($s,$c)|0);
   HEAP32[$x>>2] = $6;
   _stbi__pnm_skip_whitespace($s,$c);
   $7 = (_stbi__pnm_getinteger($s,$c)|0);
   HEAP32[$y>>2] = $7;
   _stbi__pnm_skip_whitespace($s,$c);
   $8 = (_stbi__pnm_getinteger($s,$c)|0);
   $9 = ($8|0)>(255);
   if (!($9)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   _stbi__err(12504);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _stbi__rewind($s);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__get8($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + 168|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($s) + 172|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($s) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _stbi__refill_buffer($s);
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 1|0);
 HEAP32[$0>>2] = $11;
 $12 = HEAP8[$10>>0]|0;
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__rewind($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + 176|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($s) + 168|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function _stbi__skip($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($s) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($s) + 172|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($s) + 168|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $4;
  $8 = $6;
  $9 = (($7) - ($8))|0;
  $10 = ($9|0)<($n|0);
  if ($10) {
   HEAP32[$5>>2] = $4;
   $11 = (($s) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($s) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($n) - ($9))|0;
   FUNCTION_TABLE_vii[$12 & 7]($14,$15);
   STACKTOP = sp;return;
  }
 }
 $16 = (($s) + 168|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($n)|0);
 HEAP32[$16>>2] = $18;
 STACKTOP = sp;return;
}
function _stbi__get16le($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = $0&255;
 $2 = (_stbi__get8($s)|0);
 $3 = $2&255;
 $4 = $3 << 8;
 $5 = $4 | $1;
 STACKTOP = sp;return ($5|0);
}
function _stbi__refill_buffer($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($s) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($s) + 40|0);
 $5 = (($s) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iiii[$1 & 3]($3,$4,$6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = (($s) + 32|0);
  HEAP32[$9>>2] = 0;
  $10 = (($s) + 168|0);
  HEAP32[$10>>2] = $4;
  $11 = (($s) + 41|0);
  $12 = (($s) + 172|0);
  HEAP32[$12>>2] = $11;
  $13 = HEAP32[$10>>2]|0;
  HEAP8[$13>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $14 = (($s) + 168|0);
  HEAP32[$14>>2] = $4;
  $15 = ((($s) + ($7)|0) + 40|0);
  $16 = (($s) + 172|0);
  HEAP32[$16>>2] = $15;
  STACKTOP = sp;return;
 }
}
function _stbi__pnm_skip_whitespace($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__at_eof($s)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $2 = HEAP8[$c>>0]|0;
  $3 = (_stbi__pnm_isspace($2)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 4;
   break;
  }
  $5 = (_stbi__get8($s)|0);
  HEAP8[$c>>0] = $5;
  $6 = (_stbi__at_eof($s)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
}
function _stbi__pnm_getinteger($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value$0$lcssa = 0, $value$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__at_eof($s)|0);
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $value$01 = 0;
   while(1) {
    $2 = HEAP8[$c>>0]|0;
    $3 = (_stbi__pnm_isdigit($2)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     $value$0$lcssa = $value$01;
     break L1;
    }
    $5 = ($value$01*10)|0;
    $6 = $2 << 24 >> 24;
    $7 = (($5) + -48)|0;
    $8 = (($7) + ($6))|0;
    $9 = (_stbi__get8($s)|0);
    HEAP8[$c>>0] = $9;
    $10 = (_stbi__at_eof($s)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $value$01 = $8;
    } else {
     $value$0$lcssa = $8;
     break;
    }
   }
  } else {
   $value$0$lcssa = 0;
  }
 } while(0);
 STACKTOP = sp;return ($value$0$lcssa|0);
}
function _stbi__at_eof($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($s) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($s) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($s) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_ii[$4 & 1]($6)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $9 = (($s) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $12 = (($s) + 168|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($s) + 172|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13>>>0)>=($15>>>0);
 $17 = $16&1;
 $$0 = $17;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__pnm_isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $c$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $c$off = (($c) + -48)<<24>>24;
 $0 = ($c$off&255)<(10);
 $1 = $0&1;
 STACKTOP = sp;return ($1|0);
}
function _stbi__pnm_isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $phitmp = 0, $switch$cast = 0, $switch$cast$clear = 0, $switch$downshift = 0, $switch$masked = 0, $switch$tableidx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $switch$tableidx = (($c) + -9)<<24>>24;
 $0 = ($switch$tableidx&255)<(24);
 if (!($0)) {
  $1 = 0;
  STACKTOP = sp;return ($1|0);
 }
 $switch$cast = $switch$tableidx&255;
 $switch$cast$clear = $switch$cast & 16777215;
 $switch$downshift = 8388639 >>> $switch$cast$clear;
 $switch$masked = $switch$downshift & 16777215;
 $phitmp = $switch$masked & 1;
 $1 = $phitmp;
 STACKTOP = sp;return ($1|0);
}
function _stbi__get16be($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = $0&255;
 $2 = $1 << 8;
 $3 = (_stbi__get8($s)|0);
 $4 = $3&255;
 $5 = $2 | $4;
 STACKTOP = sp;return ($5|0);
}
function _stbi__get32be($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get16be($s)|0);
 $1 = $0 << 16;
 $2 = (_stbi__get16be($s)|0);
 $3 = (($1) + ($2))|0;
 STACKTOP = sp;return ($3|0);
}
function _stbi__get32le($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get16le($s)|0);
 $1 = (_stbi__get16le($s)|0);
 $2 = $1 << 16;
 $3 = (($2) + ($0))|0;
 STACKTOP = sp;return ($3|0);
}
function _stbi__gif_header($s,$g,$comp,$is_info) {
 $s = $s|0;
 $g = $g|0;
 $comp = $comp|0;
 $is_info = $is_info|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = ($0<<24>>24)==(71);
 if ($1) {
  $2 = (_stbi__get8($s)|0);
  $3 = ($2<<24>>24)==(73);
  if ($3) {
   $4 = (_stbi__get8($s)|0);
   $5 = ($4<<24>>24)==(70);
   if ($5) {
    $6 = (_stbi__get8($s)|0);
    $7 = ($6<<24>>24)==(56);
    if ($7) {
     $8 = (_stbi__get8($s)|0);
     if (!((($8<<24>>24) == 57) | (($8<<24>>24) == 55))) {
      _stbi__err(12520);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $9 = (_stbi__get8($s)|0);
     $10 = ($9<<24>>24)==(97);
     if (!($10)) {
      _stbi__err(12520);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     HEAP32[11312>>2] = 12528;
     $11 = (_stbi__get16le($s)|0);
     HEAP32[$g>>2] = $11;
     $12 = (_stbi__get16le($s)|0);
     $13 = (($g) + 4|0);
     HEAP32[$13>>2] = $12;
     $14 = (_stbi__get8($s)|0);
     $15 = $14&255;
     $16 = (($g) + 12|0);
     HEAP32[$16>>2] = $15;
     $17 = (_stbi__get8($s)|0);
     $18 = $17&255;
     $19 = (($g) + 16|0);
     HEAP32[$19>>2] = $18;
     $20 = (_stbi__get8($s)|0);
     $21 = $20&255;
     $22 = (($g) + 20|0);
     HEAP32[$22>>2] = $21;
     $23 = (($g) + 24|0);
     HEAP32[$23>>2] = -1;
     $24 = ($comp|0)==(0|0);
     if (!($24)) {
      HEAP32[$comp>>2] = 4;
     }
     $25 = ($is_info|0)==(0);
     if (!($25)) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
     $26 = HEAP32[$16>>2]|0;
     $27 = $26 & 128;
     $28 = ($27|0)==(0);
     if ($28) {
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
     $29 = (($g) + 32|0);
     $30 = $26 & 7;
     $31 = 2 << $30;
     _stbi__gif_parse_colortable($s,$29,$31,-1);
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 _stbi__err(12520);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__gif_parse_colortable($s,$pal,$num_entries,$transp) {
 $s = $s|0;
 $pal = $pal|0;
 $num_entries = $num_entries|0;
 $transp = $transp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num_entries|0)>(0);
 if ($0) {
  $i$01 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $1 = (_stbi__get8($s)|0);
  $2 = ((($pal) + ($i$01<<2)|0) + 2|0);
  HEAP8[$2>>0] = $1;
  $3 = (_stbi__get8($s)|0);
  $4 = ((($pal) + ($i$01<<2)|0) + 1|0);
  HEAP8[$4>>0] = $3;
  $5 = (_stbi__get8($s)|0);
  $6 = (($pal) + ($i$01<<2)|0);
  HEAP8[$6>>0] = $5;
  $not$ = ($i$01|0)!=($transp|0);
  $7 = $not$ << 31 >> 31;
  $8 = ((($pal) + ($i$01<<2)|0) + 3|0);
  HEAP8[$8>>0] = $7;
  $9 = (($i$01) + 1)|0;
  $exitcond = ($9|0)==($num_entries|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $9;
  }
 }
 STACKTOP = sp;return;
}
function _stbi__parse_png_file($z,$scan,$req_comp) {
 $z = $z|0;
 $scan = $scan|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $$0 = 0, $$12 = 0, $$lobit = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $color$0 = 0, $color$1 = 0, $depth$0 = 0, $depth$1 = 0, $first$0 = 0, $first$1 = 0, $has_trans$0 = 0, $has_trans$1 = 0, $i$021 = 0, $i$114 = 0, $idata_limit$0 = 0, $idata_limit$1 = 0, $idata_limit$1$ph = 0, $idata_limit$2 = 0, $idata_limit$3 = 0;
 var $interlace$0 = 0, $interlace$1 = 0, $ioff$0 = 0, $ioff$1 = 0, $is_iphone$0 = 0, $is_iphone$1 = 0, $k$017 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond10$not = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pal_img_n$0 = 0, $pal_img_n$1 = 0, $pal_img_n$2 = 0, $pal_len$0 = 0, $pal_len$1 = 0;
 var $palette = 0, $raw_len = 0, $req_comp$ = 0, $tc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $palette = sp + 16|0;
 $tc = sp + 12|0;
 $c = sp;
 $raw_len = sp + 8|0;
 $0 = HEAP32[$z>>2]|0;
 $1 = (($z) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($z) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($z) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = (_stbi__check_png_header($0)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($scan|0)==(1);
 if ($6) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($c) + 4|0);
 $8 = (($0) + 4|0);
 $9 = (($0) + 8|0);
 $10 = ($scan|0)==(2);
 $11 = (($0) + 8|0);
 $12 = (($0) + 8|0);
 $13 = ($scan|0)==(2);
 $14 = ($scan|0)==(2);
 $color$0 = 0;$depth$0 = 0;$first$0 = 1;$has_trans$0 = 0;$idata_limit$0 = 0;$interlace$0 = 0;$ioff$0 = 0;$is_iphone$0 = 0;$pal_img_n$0 = 0;$pal_len$0 = 0;
 L7: while(1) {
  _stbi__get_chunk_header($c,$0);
  $15 = HEAP32[$7>>2]|0;
  L9: do {
   if ((($15|0) == 1951551059)) {
    $81 = ($first$0|0)==(0);
    if (!($81)) {
     label = 45;
     break L7;
    }
    $82 = HEAP32[$2>>2]|0;
    $83 = ($82|0)==(0|0);
    if (!($83)) {
     label = 47;
     break L7;
    }
    $84 = ($pal_img_n$0<<24>>24)==(0);
    if ($84) {
     $98 = HEAP32[$12>>2]|0;
     $99 = $98 & 1;
     $100 = ($99|0)==(0);
     if ($100) {
      label = 59;
      break L7;
     }
     $101 = HEAP32[$c>>2]|0;
     $102 = $98 << 1;
     $103 = ($101|0)==($102|0);
     if (!($103)) {
      label = 63;
      break L7;
     }
     $104 = HEAP32[$12>>2]|0;
     $105 = ($104|0)>(0);
     if (!($105)) {
      $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = 1;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$0;$pal_len$1 = $pal_len$0;
      break;
     }
     $106 = (12808 + ($depth$0)|0);
     $107 = HEAP8[$106>>0]|0;
     $108 = $107&255;
     $k$017 = 0;
     while(1) {
      $109 = (_stbi__get16be($0)|0);
      $110 = $109 & 255;
      $111 = Math_imul($108, $110)|0;
      $112 = $111&255;
      $113 = (($tc) + ($k$017)|0);
      HEAP8[$113>>0] = $112;
      $114 = (($k$017) + 1)|0;
      $115 = HEAP32[$12>>2]|0;
      $116 = ($114|0)<($115|0);
      if ($116) {
       $k$017 = $114;
      } else {
       $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = 1;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$0;$pal_len$1 = $pal_len$0;
       break L9;
      }
     }
    }
    if ($13) {
     label = 50;
     break L7;
    }
    $86 = ($pal_len$0|0)==(0);
    if ($86) {
     label = 52;
     break L7;
    }
    $87 = HEAP32[$c>>2]|0;
    $88 = ($87>>>0)>($pal_len$0>>>0);
    if ($88) {
     label = 56;
     break L7;
    }
    $89 = HEAP32[$c>>2]|0;
    $90 = ($89|0)==(0);
    if ($90) {
     $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = 4;$pal_len$1 = $pal_len$0;
    } else {
     $91 = HEAP32[$c>>2]|0;
     $i$114 = 0;
     while(1) {
      $92 = (_stbi__get8($0)|0);
      $93 = $i$114 << 2;
      $94 = $93 | 3;
      $95 = (($palette) + ($94)|0);
      HEAP8[$95>>0] = $92;
      $96 = (($i$114) + 1)|0;
      $97 = ($96>>>0)<($91>>>0);
      if ($97) {
       $i$114 = $96;
      } else {
       $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = 4;$pal_len$1 = $pal_len$0;
       break;
      }
     }
    }
   } else if ((($15|0) == 1130840649)) {
    $16 = HEAP32[$c>>2]|0;
    _stbi__skip($0,$16);
    $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = 1;$pal_img_n$2 = $pal_img_n$0;$pal_len$1 = $pal_len$0;
   } else if ((($15|0) == 1347179589)) {
    $61 = ($first$0|0)==(0);
    if (!($61)) {
     label = 37;
     break L7;
    }
    $62 = HEAP32[$c>>2]|0;
    $63 = ($62>>>0)>(768);
    if ($63) {
     label = 39;
     break L7;
    }
    $64 = (($62>>>0) / 3)&-1;
    $65 = ($64*3)|0;
    $66 = ($65|0)==($62|0);
    if (!($66)) {
     label = 42;
     break L7;
    }
    $67 = ($62>>>0)>(2);
    if ($67) {
     $i$021 = 0;
     while(1) {
      $68 = (_stbi__get8($0)|0);
      $69 = $i$021 << 2;
      $70 = (($palette) + ($69)|0);
      HEAP8[$70>>0] = $68;
      $71 = (_stbi__get8($0)|0);
      $72 = $69 | 1;
      $73 = (($palette) + ($72)|0);
      HEAP8[$73>>0] = $71;
      $74 = (_stbi__get8($0)|0);
      $75 = $69 | 2;
      $76 = (($palette) + ($75)|0);
      HEAP8[$76>>0] = $74;
      $77 = $69 | 3;
      $78 = (($palette) + ($77)|0);
      HEAP8[$78>>0] = -1;
      $79 = (($i$021) + 1)|0;
      $80 = ($79>>>0)<($64>>>0);
      if ($80) {
       $i$021 = $79;
      } else {
       $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$0;$pal_len$1 = $64;
       break;
      }
     }
    } else {
     $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$0;$pal_len$1 = $64;
    }
   } else if ((($15|0) == 1229472850)) {
    $17 = ($first$0|0)==(0);
    if ($17) {
     label = 7;
     break L7;
    }
    $18 = HEAP32[$c>>2]|0;
    $19 = ($18|0)==(13);
    if (!($19)) {
     label = 9;
     break L7;
    }
    $20 = (_stbi__get32be($0)|0);
    HEAP32[$0>>2] = $20;
    $21 = ($20>>>0)>(16777216);
    if ($21) {
     label = 11;
     break L7;
    }
    $22 = (_stbi__get32be($0)|0);
    HEAP32[$8>>2] = $22;
    $23 = ($22>>>0)>(16777216);
    if ($23) {
     label = 13;
     break L7;
    }
    $24 = (_stbi__get8($0)|0);
    $25 = $24&255;
    $$off = (($24) + -1)<<24>>24;
    $26 = ($$off&255)>(1);
    $27 = ($24<<24>>24)!=(4);
    $or$cond3 = $26 & $27;
    $28 = ($24<<24>>24)!=(8);
    $or$cond5 = $or$cond3 & $28;
    if ($or$cond5) {
     label = 15;
     break L7;
    }
    $29 = (_stbi__get8($0)|0);
    $30 = $29&255;
    $31 = ($29&255)>(6);
    if ($31) {
     label = 17;
     break L7;
    }
    $32 = ($29<<24>>24)==(3);
    if ($32) {
     $pal_img_n$1 = 3;
    } else {
     $33 = $30 & 1;
     $34 = ($33|0)==(0);
     if ($34) {
      $pal_img_n$1 = $pal_img_n$0;
     } else {
      label = 20;
      break L7;
     }
    }
    $35 = (_stbi__get8($0)|0);
    $36 = ($35<<24>>24)==(0);
    if (!($36)) {
     label = 22;
     break L7;
    }
    $37 = (_stbi__get8($0)|0);
    $38 = ($37<<24>>24)==(0);
    if (!($38)) {
     label = 24;
     break L7;
    }
    $39 = (_stbi__get8($0)|0);
    $40 = $39&255;
    $41 = ($39&255)>(1);
    if ($41) {
     label = 26;
     break L7;
    }
    $42 = HEAP32[$0>>2]|0;
    $43 = ($42|0)==(0);
    if ($43) {
     label = 29;
     break L7;
    }
    $44 = HEAP32[$8>>2]|0;
    $45 = ($44|0)==(0);
    if ($45) {
     label = 29;
     break L7;
    }
    $46 = ($pal_img_n$1<<24>>24)==(0);
    if (!($46)) {
     HEAP32[$11>>2] = 1;
     $56 = HEAP32[$0>>2]|0;
     $57 = (1073741824 / ($56>>>0))&-1;
     $58 = $57 >>> 2;
     $59 = HEAP32[$8>>2]|0;
     $60 = ($58>>>0)<($59>>>0);
     if ($60) {
      label = 35;
      break L7;
     } else {
      $color$1 = $30;$depth$1 = $25;$first$1 = 0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $40;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$1;$pal_len$1 = $pal_len$0;
      break;
     }
    }
    $47 = $30 & 2;
    $48 = $47 | 1;
    $49 = $30 >>> 2;
    $$lobit = $49 & 1;
    $50 = (($48) + ($$lobit))|0;
    HEAP32[$9>>2] = $50;
    $51 = HEAP32[$0>>2]|0;
    $52 = (1073741824 / ($51>>>0))&-1;
    $53 = (($52>>>0) / ($50>>>0))&-1;
    $54 = HEAP32[$8>>2]|0;
    $55 = ($53>>>0)<($54>>>0);
    if ($55) {
     label = 32;
     break L7;
    }
    if ($10) {
     $$0 = 1;
     label = 103;
     break L7;
    } else {
     $color$1 = $30;$depth$1 = $25;$first$1 = 0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $40;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$1;$pal_len$1 = $pal_len$0;
    }
   } else if ((($15|0) == 1229278788)) {
    label = 82;
    break L7;
   } else if ((($15|0) == 1229209940)) {
    $117 = ($first$0|0)==(0);
    if (!($117)) {
     label = 66;
     break L7;
    }
    $118 = ($pal_img_n$0<<24>>24)!=(0);
    $119 = ($pal_len$0|0)==(0);
    $or$cond = $118 & $119;
    if ($or$cond) {
     label = 68;
     break L7;
    }
    if ($14) {
     label = 70;
     break L7;
    }
    $122 = HEAP32[$c>>2]|0;
    $123 = (($122) + ($ioff$0))|0;
    $124 = ($123>>>0)>($idata_limit$0>>>0);
    if ($124) {
     $125 = ($idata_limit$0|0)==(0);
     if ($125) {
      $126 = ($122>>>0)>(4096);
      $$ = $126 ? $122 : 4096;
      $idata_limit$1$ph = $$;
     } else {
      $idata_limit$1$ph = $idata_limit$0;
     }
     $127 = HEAP32[$c>>2]|0;
     $128 = (($127) + ($ioff$0))|0;
     $idata_limit$1 = $idata_limit$1$ph;
     while(1) {
      $129 = ($128>>>0)>($idata_limit$1>>>0);
      $130 = $idata_limit$1 << 1;
      if ($129) {
       $idata_limit$1 = $130;
      } else {
       break;
      }
     }
     $131 = HEAP32[$2>>2]|0;
     $132 = (_realloc($131,$idata_limit$1)|0);
     $133 = ($132|0)==(0|0);
     if ($133) {
      label = 77;
      break L7;
     }
     HEAP32[$2>>2] = $132;
     $idata_limit$2 = $idata_limit$1;
    } else {
     $idata_limit$2 = $idata_limit$0;
    }
    $134 = HEAP32[$2>>2]|0;
    $135 = (($134) + ($ioff$0)|0);
    $136 = HEAP32[$c>>2]|0;
    $137 = (_stbi__getn($0,$135,$136)|0);
    $138 = ($137|0)==(0);
    if ($138) {
     label = 80;
     break L7;
    }
    $139 = HEAP32[$c>>2]|0;
    $140 = (($139) + ($ioff$0))|0;
    $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$2;$interlace$1 = $interlace$0;$ioff$1 = $140;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$0;$pal_len$1 = $pal_len$0;
   } else {
    $185 = ($first$0|0)==(0);
    if (!($185)) {
     label = 98;
     break L7;
    }
    $186 = $15 & 536870912;
    $187 = ($186|0)==(0);
    if ($187) {
     label = 100;
     break L7;
    }
    $198 = HEAP32[$c>>2]|0;
    _stbi__skip($0,$198);
    $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$0;$pal_len$1 = $pal_len$0;
   }
  } while(0);
  (_stbi__get32be($0)|0);
  $color$0 = $color$1;$depth$0 = $depth$1;$first$0 = $first$1;$has_trans$0 = $has_trans$1;$idata_limit$0 = $idata_limit$3;$interlace$0 = $interlace$1;$ioff$0 = $ioff$1;$is_iphone$0 = $is_iphone$1;$pal_img_n$0 = $pal_img_n$2;$pal_len$0 = $pal_len$1;
 }
 switch (label|0) {
  case 7: {
   _stbi__err(12536);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 9: {
   _stbi__err(12552);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 11: {
   _stbi__err(12568);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 13: {
   _stbi__err(12568);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 15: {
   _stbi__err(12584);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 17: {
   _stbi__err(12608);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 20: {
   _stbi__err(12608);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 22: {
   _stbi__err(12624);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 24: {
   _stbi__err(12640);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 26: {
   _stbi__err(12664);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 29: {
   _stbi__err(12688);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 32: {
   _stbi__err(12568);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 35: {
   _stbi__err(12568);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 37: {
   _stbi__err(12704);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 39: {
   _stbi__err(12720);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 42: {
   _stbi__err(12720);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 45: {
   _stbi__err(12704);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 47: {
   _stbi__err(12736);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 50: {
   $85 = (($0) + 8|0);
   HEAP32[$85>>2] = 4;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 52: {
   _stbi__err(12752);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 56: {
   _stbi__err(12776);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 59: {
   _stbi__err(12792);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 63: {
   _stbi__err(12776);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 66: {
   _stbi__err(12704);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 68: {
   _stbi__err(12824);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 70: {
   $120 = $pal_img_n$0&255;
   $121 = (($0) + 8|0);
   HEAP32[$121>>2] = $120;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 77: {
   _stbi__err(12832);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 80: {
   _stbi__err(12848);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 82: {
   $141 = ($first$0|0)==(0);
   if (!($141)) {
    _stbi__err(12704);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $142 = ($scan|0)==(0);
   if (!($142)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $143 = HEAP32[$2>>2]|0;
   $144 = ($143|0)==(0|0);
   if ($144) {
    _stbi__err(12864);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $145 = HEAP32[$0>>2]|0;
   $146 = Math_imul($145, $depth$0)|0;
   $147 = (($146) + 7)|0;
   $148 = $147 >>> 3;
   $149 = (($0) + 4|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = (($0) + 8|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = Math_imul($152, $150)|0;
   $154 = Math_imul($153, $148)|0;
   $155 = (($154) + ($150))|0;
   HEAP32[$raw_len>>2] = $155;
   $156 = HEAP32[$2>>2]|0;
   $157 = ($is_iphone$0|0)!=(0);
   $158 = $157&1;
   $159 = $158 ^ 1;
   $160 = (_stbi_zlib_decode_malloc_guesssize_headerflag($156,$ioff$0,$155,$raw_len,$159)|0);
   HEAP32[$1>>2] = $160;
   $161 = ($160|0)==(0|0);
   if ($161) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $162 = HEAP32[$2>>2]|0;
   _free($162);
   HEAP32[$2>>2] = 0;
   $163 = HEAP32[$151>>2]|0;
   $164 = (($163) + 1)|0;
   $165 = ($164|0)==($req_comp|0);
   $166 = ($req_comp|0)!=(3);
   $or$cond7 = $165 & $166;
   $167 = ($pal_img_n$0<<24>>24)==(0);
   $or$cond10 = $or$cond7 & $167;
   $or$cond10$not = $or$cond10 ^ 1;
   $168 = ($has_trans$0<<24>>24)==(0);
   $or$cond11 = $168 & $or$cond10$not;
   $169 = (($0) + 12|0);
   $$12 = $or$cond11 ? $163 : $164;
   HEAP32[$169>>2] = $$12;
   $170 = HEAP32[$1>>2]|0;
   $171 = HEAP32[$raw_len>>2]|0;
   $172 = (($0) + 12|0);
   $173 = (_stbi__create_png_image($z,$170,$171,$$12,$depth$0,$color$0,$interlace$0)|0);
   $174 = ($173|0)==(0);
   if ($174) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   if (!($168)) {
    $175 = HEAP32[$172>>2]|0;
    _stbi__compute_transparency($z,$tc,$175);
   }
   $176 = HEAP32[11352>>2]|0;
   $177 = ($176|0)!=(0);
   $or$cond9 = $157 & $177;
   if ($or$cond9) {
    $178 = HEAP32[$172>>2]|0;
    $179 = ($178|0)>(2);
    if ($179) {
     _stbi__de_iphone($z);
    }
   }
   if (!($167)) {
    $180 = $pal_img_n$0&255;
    HEAP32[$151>>2] = $180;
    $181 = ($req_comp|0)>(2);
    $req_comp$ = $181 ? $req_comp : $180;
    HEAP32[$172>>2] = $req_comp$;
    $182 = (_stbi__expand_png_palette($z,$palette,$req_comp$)|0);
    $183 = ($182|0)==(0);
    if ($183) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $184 = HEAP32[$1>>2]|0;
   _free($184);
   HEAP32[$1>>2] = 0;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 98: {
   _stbi__err(12704);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 100: {
   $188 = $15 >>> 24;
   $189 = $188&255;
   HEAP8[12872>>0] = $189;
   $190 = HEAP32[$7>>2]|0;
   $191 = $190 >>> 16;
   $192 = $191&255;
   HEAP8[((12872 + 1|0))>>0] = $192;
   $193 = HEAP32[$7>>2]|0;
   $194 = $193 >>> 8;
   $195 = $194&255;
   HEAP8[((12872 + 2|0))>>0] = $195;
   $196 = HEAP32[$7>>2]|0;
   $197 = $196&255;
   HEAP8[((12872 + 3|0))>>0] = $197;
   _stbi__err(12872);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 103: {
   STACKTOP = sp;return ($$0|0);
   break;
  }
 }
 return 0|0;
}
function _stbi__check_png_header($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $2 = (_stbi__get8($s)|0);
  $3 = (13344 + ($i$01)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($2<<24>>24)==($4<<24>>24);
  $1 = (($i$01) + 1)|0;
  if (!($5)) {
   break;
  }
  $0 = ($1|0)<(8);
  if ($0) {
   $i$01 = $1;
  } else {
   $$0 = 1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 _stbi__err(13352);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__get_chunk_header($agg$result,$s) {
 $agg$result = $agg$result|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get32be($s)|0);
 $1 = (_stbi__get32be($s)|0);
 HEAP32[$agg$result>>2] = $0;
 $2 = (($agg$result) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function _stbi__getn($s,$buffer,$n) {
 $s = $s|0;
 $buffer = $buffer|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($s) + 172|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($s) + 168|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $4;
  $8 = $6;
  $9 = (($7) - ($8))|0;
  $10 = ($9|0)<($n|0);
  if ($10) {
   _memcpy(($buffer|0),($6|0),($9|0))|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = (($s) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($buffer) + ($9)|0);
   $15 = (($n) - ($9))|0;
   $16 = (FUNCTION_TABLE_iiii[$11 & 3]($13,$14,$15)|0);
   $17 = ($16|0)==($15|0);
   $18 = $17&1;
   $19 = HEAP32[$3>>2]|0;
   HEAP32[$5>>2] = $19;
   $$0 = $18;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $20 = (($s) + 168|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($n)|0);
 $23 = (($s) + 172|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($22>>>0)>($24>>>0);
 if ($25) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy(($buffer|0),($21|0),($n|0))|0;
 $26 = HEAP32[$20>>2]|0;
 $27 = (($26) + ($n)|0);
 HEAP32[$20>>2] = $27;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__create_png_image($a,$image_data,$image_data_len,$out_n,$depth,$color,$interlaced) {
 $a = $a|0;
 $image_data = $image_data|0;
 $image_data_len = $image_data_len|0;
 $out_n = $out_n|0;
 $depth = $depth|0;
 $color = $color|0;
 $interlaced = $interlaced|0;
 var $$0 = 0, $$0111 = 0, $$0210 = 0, $$1 = 0, $$13 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $i$05 = 0;
 var $j$07 = 0, $or$cond = 0, $p$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($interlaced|0)==(0);
 $1 = HEAP32[$a>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($1) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 if ($0) {
  $5 = (_stbi__create_png_image_raw($a,$image_data,$image_data_len,$out_n,$2,$4,$depth,$color)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = Math_imul($2, $out_n)|0;
 $7 = Math_imul($6, $4)|0;
 $8 = (_stbi__malloc($7)|0);
 $9 = (($a) + 12|0);
 $10 = (($a) + 12|0);
 $$0111 = $image_data;$$0210 = $image_data_len;$p$09 = 0;
 while(1) {
  $11 = HEAP32[$a>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = (13024 + ($p$09<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (13088 + ($p$09<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($12) + -1)|0;
  $18 = (($17) - ($14))|0;
  $19 = (($18) + ($16))|0;
  $20 = (($19>>>0) / ($16>>>0))&-1;
  $21 = (($11) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (13056 + ($p$09<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (13120 + ($p$09<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($22) + -1)|0;
  $28 = (($27) - ($24))|0;
  $29 = (($28) + ($26))|0;
  $30 = (($29>>>0) / ($26>>>0))&-1;
  $31 = ($20|0)==(0);
  $32 = ($30|0)==(0);
  $or$cond = $31 | $32;
  if ($or$cond) {
   $$1 = $$0111;$$13 = $$0210;
  } else {
   $33 = (($11) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = Math_imul($20, $depth)|0;
   $36 = Math_imul($35, $34)|0;
   $37 = (($36) + 7)|0;
   $38 = $37 >> 3;
   $39 = (($38) + 1)|0;
   $40 = Math_imul($39, $30)|0;
   $41 = (_stbi__create_png_image_raw($a,$$0111,$$0210,$out_n,$20,$30,$depth,$color)|0);
   $42 = ($41|0)==(0);
   if ($42) {
    label = 8;
    break;
   }
   $43 = ($30|0)>(0);
   if ($43) {
    $44 = ($20|0)>(0);
    $j$07 = 0;
    while(1) {
     if ($44) {
      $45 = HEAP32[$25>>2]|0;
      $46 = Math_imul($45, $j$07)|0;
      $47 = HEAP32[$23>>2]|0;
      $48 = (($46) + ($47))|0;
      $49 = HEAP32[$15>>2]|0;
      $50 = HEAP32[$13>>2]|0;
      $51 = Math_imul($j$07, $20)|0;
      $i$05 = 0;
      while(1) {
       $52 = Math_imul($49, $i$05)|0;
       $53 = (($52) + ($50))|0;
       $54 = HEAP32[$a>>2]|0;
       $55 = HEAP32[$54>>2]|0;
       $56 = Math_imul($55, $48)|0;
       $57 = (($53) + ($56))|0;
       $$sum = Math_imul($57, $out_n)|0;
       $58 = (($8) + ($$sum)|0);
       $59 = HEAP32[$10>>2]|0;
       $60 = (($i$05) + ($51))|0;
       $61 = Math_imul($60, $out_n)|0;
       $62 = (($59) + ($61)|0);
       _memcpy(($58|0),($62|0),($out_n|0))|0;
       $63 = (($i$05) + 1)|0;
       $64 = ($63|0)<($20|0);
       if ($64) {
        $i$05 = $63;
       } else {
        break;
       }
      }
     }
     $65 = (($j$07) + 1)|0;
     $66 = ($65|0)<($30|0);
     if ($66) {
      $j$07 = $65;
     } else {
      break;
     }
    }
   }
   $67 = HEAP32[$9>>2]|0;
   _free($67);
   $68 = (($$0111) + ($40)|0);
   $69 = (($$0210) - ($40))|0;
   $$1 = $68;$$13 = $69;
  }
  $70 = (($p$09) + 1)|0;
  $71 = ($70|0)<(7);
  if ($71) {
   $$0111 = $$1;$$0210 = $$13;$p$09 = $70;
  } else {
   label = 15;
   break;
  }
 }
 if ((label|0) == 8) {
  _free($8);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 15) {
  $72 = (($a) + 12|0);
  HEAP32[$72>>2] = $8;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stbi__compute_transparency($z,$tc,$out_n) {
 $z = $z|0;
 $tc = $tc|0;
 $out_n = $out_n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond8 = 0, $i$01 = 0, $i$15 = 0, $not$ = 0, $p$02 = 0, $p$16 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$z>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($0) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = (($z) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 if ((($out_n|0) == 4)) {
  $7 = ($4|0)==(0);
  if ($7) {
   STACKTOP = sp;return;
  }
  $8 = (($tc) + 1|0);
  $9 = (($tc) + 2|0);
  $10 = Math_imul($3, $1)|0;
  $i$15 = 0;$p$16 = $6;
  while(1) {
   $19 = HEAP8[$p$16>>0]|0;
   $20 = HEAP8[$tc>>0]|0;
   $21 = ($19<<24>>24)==($20<<24>>24);
   if ($21) {
    $22 = (($p$16) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = HEAP8[$8>>0]|0;
    $25 = ($23<<24>>24)==($24<<24>>24);
    if ($25) {
     $26 = (($p$16) + 2|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = HEAP8[$9>>0]|0;
     $29 = ($27<<24>>24)==($28<<24>>24);
     if ($29) {
      $30 = (($p$16) + 3|0);
      HEAP8[$30>>0] = 0;
     }
    }
   }
   $31 = (($p$16) + 4|0);
   $32 = (($i$15) + 1)|0;
   $exitcond8 = ($32|0)==($10|0);
   if ($exitcond8) {
    break;
   } else {
    $i$15 = $32;$p$16 = $31;
   }
  }
  STACKTOP = sp;return;
 } else if ((($out_n|0) == 2)) {
  $11 = ($4|0)==(0);
  if ($11) {
   STACKTOP = sp;return;
  }
  $12 = Math_imul($3, $1)|0;
  $i$01 = 0;$p$02 = $6;
  while(1) {
   $13 = HEAP8[$p$02>>0]|0;
   $14 = HEAP8[$tc>>0]|0;
   $not$ = ($13<<24>>24)!=($14<<24>>24);
   $15 = $not$ << 31 >> 31;
   $16 = (($p$02) + 1|0);
   HEAP8[$16>>0] = $15;
   $17 = (($p$02) + 2|0);
   $18 = (($i$01) + 1)|0;
   $exitcond = ($18|0)==($12|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $18;$p$02 = $17;
   }
  }
  STACKTOP = sp;return;
 } else {
  ___assert_fail((12960|0),(12928|0),4087,(12992|0));
  // unreachable;
 }
}
function _stbi__de_iphone($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond13 = 0, $exitcond14 = 0, $i$02 = 0, $i$111 = 0, $i$26 = 0, $p$01 = 0, $p$110 = 0, $p$25 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$z>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($0) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = (($z) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($0) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 if ((($8|0) == 3)) {
  $9 = ($4|0)==(0);
  if ($9) {
   STACKTOP = sp;return;
  }
  $10 = Math_imul($3, $1)|0;
  $i$02 = 0;$p$01 = $6;
  while(1) {
   $11 = HEAP8[$p$01>>0]|0;
   $12 = (($p$01) + 2|0);
   $13 = HEAP8[$12>>0]|0;
   HEAP8[$p$01>>0] = $13;
   HEAP8[$12>>0] = $11;
   $14 = (($p$01) + 3|0);
   $15 = (($i$02) + 1)|0;
   $exitcond = ($15|0)==($10|0);
   if ($exitcond) {
    break;
   } else {
    $i$02 = $15;$p$01 = $14;
   }
  }
  STACKTOP = sp;return;
 } else if ((($8|0) == 4)) {
  $16 = HEAP32[11344>>2]|0;
  $17 = ($16|0)==(0);
  $18 = ($4|0)==(0);
  if ($17) {
   if ($18) {
    STACKTOP = sp;return;
   }
   $20 = Math_imul($3, $1)|0;
   $i$26 = 0;$p$25 = $6;
   while(1) {
    $44 = HEAP8[$p$25>>0]|0;
    $45 = (($p$25) + 2|0);
    $46 = HEAP8[$45>>0]|0;
    HEAP8[$p$25>>0] = $46;
    HEAP8[$45>>0] = $44;
    $47 = (($p$25) + 4|0);
    $48 = (($i$26) + 1)|0;
    $exitcond13 = ($48|0)==($20|0);
    if ($exitcond13) {
     break;
    } else {
     $i$26 = $48;$p$25 = $47;
    }
   }
   STACKTOP = sp;return;
  }
  if ($18) {
   STACKTOP = sp;return;
  }
  $19 = Math_imul($3, $1)|0;
  $i$111 = 0;$p$110 = $6;
  while(1) {
   $21 = (($p$110) + 3|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = HEAP8[$p$110>>0]|0;
   $24 = ($22<<24>>24)==(0);
   $25 = (($p$110) + 2|0);
   $26 = HEAP8[$25>>0]|0;
   if ($24) {
    HEAP8[$p$110>>0] = $26;
    $storemerge = $23;
   } else {
    $27 = $26&255;
    $28 = ($27*255)|0;
    $29 = $22&255;
    $30 = (($28>>>0) / ($29>>>0))&-1;
    $31 = $30&255;
    HEAP8[$p$110>>0] = $31;
    $32 = (($p$110) + 1|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = ($34*255)|0;
    $36 = (($35>>>0) / ($29>>>0))&-1;
    $37 = $36&255;
    HEAP8[$32>>0] = $37;
    $38 = $23&255;
    $39 = ($38*255)|0;
    $40 = (($39>>>0) / ($29>>>0))&-1;
    $41 = $40&255;
    $storemerge = $41;
   }
   HEAP8[$25>>0] = $storemerge;
   $42 = (($p$110) + 4|0);
   $43 = (($i$111) + 1)|0;
   $exitcond14 = ($43|0)==($19|0);
   if ($exitcond14) {
    break;
   } else {
    $i$111 = $43;$p$110 = $42;
   }
  }
  STACKTOP = sp;return;
 } else {
  ___assert_fail((12904|0),(12928|0),4168,(12944|0));
  // unreachable;
 }
}
function _stbi__expand_png_palette($a,$palette,$pal_img_n) {
 $a = $a|0;
 $palette = $palette|0;
 $pal_img_n = $pal_img_n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond8 = 0, $i$02 = 0, $i$16 = 0, $p$01 = 0, $p$15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($0) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = (($a) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($4, $pal_img_n)|0;
 $8 = (_stbi__malloc($7)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  _stbi__err(12832);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($pal_img_n|0)==(3);
 $11 = ($4|0)==(0);
 if ($10) {
  if (!($11)) {
   $13 = Math_imul($3, $1)|0;
   $i$02 = 0;$p$01 = $8;
   while(1) {
    $14 = (($6) + ($i$02)|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = $16 << 2;
    $18 = (($palette) + ($17)|0);
    $19 = HEAP8[$18>>0]|0;
    HEAP8[$p$01>>0] = $19;
    $20 = $17 | 1;
    $21 = (($palette) + ($20)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = (($p$01) + 1|0);
    HEAP8[$23>>0] = $22;
    $24 = $17 | 2;
    $25 = (($palette) + ($24)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = (($p$01) + 2|0);
    HEAP8[$27>>0] = $26;
    $28 = (($p$01) + 3|0);
    $29 = (($i$02) + 1)|0;
    $exitcond = ($29|0)==($13|0);
    if ($exitcond) {
     break;
    } else {
     $i$02 = $29;$p$01 = $28;
    }
   }
  }
 } else {
  if (!($11)) {
   $12 = Math_imul($3, $1)|0;
   $i$16 = 0;$p$15 = $8;
   while(1) {
    $30 = (($6) + ($i$16)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = $32 << 2;
    $34 = (($palette) + ($33)|0);
    $35 = HEAP8[$34>>0]|0;
    HEAP8[$p$15>>0] = $35;
    $36 = $33 | 1;
    $37 = (($palette) + ($36)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = (($p$15) + 1|0);
    HEAP8[$39>>0] = $38;
    $40 = $33 | 2;
    $41 = (($palette) + ($40)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = (($p$15) + 2|0);
    HEAP8[$43>>0] = $42;
    $44 = $33 | 3;
    $45 = (($palette) + ($44)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = (($p$15) + 3|0);
    HEAP8[$47>>0] = $46;
    $48 = (($p$15) + 4|0);
    $49 = (($i$16) + 1)|0;
    $exitcond8 = ($49|0)==($12|0);
    if ($exitcond8) {
     break;
    } else {
     $i$16 = $49;$p$15 = $48;
    }
   }
  }
 }
 $50 = HEAP32[$5>>2]|0;
 _free($50);
 HEAP32[$5>>2] = $8;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__create_png_image_raw($a,$raw,$raw_len,$out_n,$x,$y,$depth,$color) {
 $a = $a|0;
 $raw = $raw|0;
 $raw_len = $raw_len|0;
 $out_n = $out_n|0;
 $x = $x|0;
 $y = $y|0;
 $depth = $depth|0;
 $color = $color|0;
 var $$0 = 0, $$01208 = 0, $$1 = 0, $$2179 = 0, $$3168 = 0, $$4157 = 0, $$5145 = 0, $$6133 = 0, $$7121 = 0, $$8110 = 0, $$9 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum15 = 0, $$sum16$pn = 0, $$sum2 = 0, $$sum20 = 0;
 var $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum30$pn = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $cur$0$sum31$pn = 0, $cur$0$sum42 = 0, $cur$0$sum43 = 0, $cur$0$sum44 = 0, $cur$0$sum45 = 0;
 var $cur$0$sum46 = 0, $cur$0$sum47 = 0, $cur$0$sum48 = 0, $cur$0$sum49 = 0, $cur$1 = 0, $cur$1$sum = 0, $cur$1$sum32 = 0, $cur$1$sum33 = 0, $cur$1$sum34 = 0, $cur$1$sum35 = 0, $cur$1$sum36 = 0, $cur$1$sum37 = 0, $cur$1$sum38 = 0, $cur$1$sum39 = 0, $cur$1$sum40 = 0, $cur$1$sum41 = 0, $cur$2178 = 0, $cur$3167 = 0, $cur$4155 = 0, $cur$5143 = 0;
 var $cur$6131 = 0, $cur$7120 = 0, $cur$8109 = 0, $cur1$0$lcssa = 0, $cur1$078 = 0, $cur1$1$lcssa = 0, $cur1$169 = 0, $cur1$4$lcssa = 0, $cur1$463 = 0, $exitcond = 0, $exitcond233 = 0, $exitcond235 = 0, $exitcond237 = 0, $exitcond239 = 0, $exitcond241 = 0, $exitcond243 = 0, $exitcond245 = 0, $exitcond248 = 0, $exitcond249 = 0, $exitcond250 = 0;
 var $exitcond251 = 0, $exitcond252 = 0, $exitcond253 = 0, $filter$0 = 0, $filter_bytes$0 = 0, $i$0 = 0, $i$0177 = 0, $i$0180 = 0, $i$1 = 0, $i$1166 = 0, $i$1169 = 0, $i$2 = 0, $i$2154 = 0, $i$2158 = 0, $i$3 = 0, $i$3142 = 0, $i$3146 = 0, $i$4 = 0, $i$4130 = 0, $i$4134 = 0;
 var $i$5 = 0, $i$5119 = 0, $i$5122 = 0, $i$6 = 0, $i$6108 = 0, $i$6111 = 0, $i3$0 = 0, $i3$091 = 0, $i3$092 = 0, $i3$1 = 0, $i3$186 = 0, $i3$187 = 0, $in$0$lcssa = 0, $in$079 = 0, $in$1$lcssa = 0, $in$170 = 0, $in$2$lcssa = 0, $in$264 = 0, $indvars$iv = 0, $indvars$iv$next = 0;
 var $indvars$iv$next215 = 0, $indvars$iv$next220 = 0, $indvars$iv$next223 = 0, $indvars$iv$next228 = 0, $indvars$iv$next231 = 0, $indvars$iv214 = 0, $indvars$iv219 = 0, $indvars$iv222 = 0, $indvars$iv227 = 0, $indvars$iv230 = 0, $j$0207 = 0, $j$196 = 0, $k$098 = 0, $k$10137 = 0, $k$11125 = 0, $k$1204 = 0, $k$12114 = 0, $k$13103 = 0, $k$14$lcssa = 0, $k$1477 = 0;
 var $k$15$lcssa = 0, $k$1568 = 0, $k$16$lcssa = 0, $k$1662 = 0, $k$2200 = 0, $k$3196 = 0, $k$4192 = 0, $k$5188 = 0, $k$6184 = 0, $k$7172 = 0, $k$8161 = 0, $k$9149 = 0, $or$cond = 0, $or$cond254 = 0, $out_n$pn = 0, $prior$0 = 0, $prior$0$sum = 0, $prior$0$sum17 = 0, $prior$0$sum18 = 0, $prior$0$sum19 = 0;
 var $prior$3156 = 0, $prior$4144 = 0, $prior$5132 = 0, $scevgep = 0, $scevgep216 = 0, $scevgep221 = 0, $scevgep224 = 0, $scevgep229 = 0, $scevgep232 = 0, $scevgep234 = 0, $scevgep236 = 0, $scevgep238 = 0, $scevgep240 = 0, $scevgep242 = 0, $scevgep244 = 0, $scevgep247 = 0, $width$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = Math_imul($x, $out_n)|0;
 $2 = (($0) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($out_n|0);
 $5 = (($3) + 1)|0;
 $6 = ($5|0)==($out_n|0);
 $or$cond = $4 | $6;
 if (!($or$cond)) {
  ___assert_fail((13152|0),(12928|0),3867,(13200|0));
  // unreachable;
 }
 $7 = Math_imul($x, $out_n)|0;
 $8 = Math_imul($7, $y)|0;
 $9 = (_stbi__malloc($8)|0);
 $10 = (($a) + 12|0);
 HEAP32[$10>>2] = $9;
 $11 = ($9|0)==(0|0);
 if ($11) {
  _stbi__err(12832);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = Math_imul($3, $x)|0;
 $13 = Math_imul($12, $depth)|0;
 $14 = (($13) + 7)|0;
 $15 = $14 >>> 3;
 $16 = (($15) + 1)|0;
 $17 = Math_imul($16, $y)|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = ($18|0)==($x|0);
 if ($19) {
  $20 = (($0) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==($y|0);
  if ($22) {
   $23 = ($17|0)==($raw_len|0);
   if (!($23)) {
    _stbi__err(13232);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   label = 9;
  }
 } else {
  label = 9;
 }
 if ((label|0) == 9) {
  $24 = ($17>>>0)>($raw_len>>>0);
  if ($24) {
   _stbi__err(13232);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $25 = ($y|0)==(0);
 L18: do {
  if (!($25)) {
   $26 = ($depth|0)<(8);
   $27 = ($15>>>0)>($x>>>0);
   $28 = (($1) - ($15))|0;
   $29 = ($depth|0)==(8);
   $$sum15 = (($3) + 1)|0;
   $brmerge = $26 | $4;
   $i$6108 = (($x) + -1)|0;
   $30 = ($i$6108|0)==(0);
   $31 = ($3|0)>(0);
   $i$5119 = (($x) + -1)|0;
   $32 = ($i$5119|0)==(0);
   $33 = ($3|0)>(0);
   $i$4130 = (($x) + -1)|0;
   $34 = ($i$4130|0)==(0);
   $35 = ($3|0)>(0);
   $i$3142 = (($x) + -1)|0;
   $36 = ($i$3142|0)==(0);
   $37 = ($3|0)>(0);
   $i$2154 = (($x) + -1)|0;
   $38 = ($i$2154|0)==(0);
   $39 = ($3|0)>(0);
   $i$1166 = (($x) + -1)|0;
   $40 = ($i$1166|0)==(0);
   $41 = ($3|0)>(0);
   $i$0177 = (($x) + -1)|0;
   $42 = ($i$0177|0)==(0);
   $43 = ($3|0)>(0);
   $44 = Math_imul($3, $i$0177)|0;
   $$01208 = $raw;$j$0207 = 0;
   L20: while(1) {
    $45 = HEAP32[$10>>2]|0;
    $46 = Math_imul($j$0207, $1)|0;
    $$sum13 = (($46) - ($1))|0;
    $47 = HEAP8[$$01208>>0]|0;
    $48 = $47&255;
    $49 = ($47&255)>(4);
    if ($49) {
     label = 14;
     break;
    }
    if ($26) {
     if ($27) {
      label = 17;
      break;
     }
     $$sum30 = (($28) + ($46))|0;
     $$sum30$pn = $$sum30;$filter_bytes$0 = 1;$width$0 = $15;
    } else {
     $$sum30$pn = $46;$filter_bytes$0 = $3;$width$0 = $x;
    }
    $50 = ($j$0207|0)==(0);
    if ($50) {
     $51 = (13296 + ($48)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $filter$0 = $53;
    } else {
     $filter$0 = $48;
    }
    $54 = ($filter_bytes$0|0)>(0);
    L30: do {
     if ($54) {
      $k$098 = 0;
      while(1) {
       switch ($filter$0|0) {
       case 1:  {
        $$sum28 = (($k$098) + 1)|0;
        $58 = (($$01208) + ($$sum28)|0);
        $59 = HEAP8[$58>>0]|0;
        $cur$0$sum44 = (($k$098) + ($$sum30$pn))|0;
        $60 = (($45) + ($cur$0$sum44)|0);
        HEAP8[$60>>0] = $59;
        break;
       }
       case 4:  {
        $$sum22 = (($k$098) + 1)|0;
        $80 = (($$01208) + ($$sum22)|0);
        $81 = HEAP8[$80>>0]|0;
        $82 = $81&255;
        $$sum23 = (($k$098) + ($$sum13))|0;
        $83 = (($45) + ($$sum23)|0);
        $84 = HEAP8[$83>>0]|0;
        $85 = $84&255;
        $86 = (_stbi__paeth(0,$85,0)|0);
        $87 = (($86) + ($82))|0;
        $88 = $87&255;
        $cur$0$sum47 = (($k$098) + ($$sum30$pn))|0;
        $89 = (($45) + ($cur$0$sum47)|0);
        HEAP8[$89>>0] = $88;
        break;
       }
       case 2:  {
        $$sum26 = (($k$098) + 1)|0;
        $61 = (($$01208) + ($$sum26)|0);
        $62 = HEAP8[$61>>0]|0;
        $63 = $62&255;
        $$sum27 = (($k$098) + ($$sum13))|0;
        $64 = (($45) + ($$sum27)|0);
        $65 = HEAP8[$64>>0]|0;
        $66 = $65&255;
        $67 = (($66) + ($63))|0;
        $68 = $67&255;
        $cur$0$sum45 = (($k$098) + ($$sum30$pn))|0;
        $69 = (($45) + ($cur$0$sum45)|0);
        HEAP8[$69>>0] = $68;
        break;
       }
       case 6:  {
        $$sum20 = (($k$098) + 1)|0;
        $93 = (($$01208) + ($$sum20)|0);
        $94 = HEAP8[$93>>0]|0;
        $cur$0$sum49 = (($k$098) + ($$sum30$pn))|0;
        $95 = (($45) + ($cur$0$sum49)|0);
        HEAP8[$95>>0] = $94;
        break;
       }
       case 0:  {
        $$sum29 = (($k$098) + 1)|0;
        $55 = (($$01208) + ($$sum29)|0);
        $56 = HEAP8[$55>>0]|0;
        $cur$0$sum43 = (($k$098) + ($$sum30$pn))|0;
        $57 = (($45) + ($cur$0$sum43)|0);
        HEAP8[$57>>0] = $56;
        break;
       }
       case 5:  {
        $$sum21 = (($k$098) + 1)|0;
        $90 = (($$01208) + ($$sum21)|0);
        $91 = HEAP8[$90>>0]|0;
        $cur$0$sum48 = (($k$098) + ($$sum30$pn))|0;
        $92 = (($45) + ($cur$0$sum48)|0);
        HEAP8[$92>>0] = $91;
        break;
       }
       case 3:  {
        $$sum24 = (($k$098) + 1)|0;
        $70 = (($$01208) + ($$sum24)|0);
        $71 = HEAP8[$70>>0]|0;
        $72 = $71&255;
        $$sum25 = (($k$098) + ($$sum13))|0;
        $73 = (($45) + ($$sum25)|0);
        $74 = HEAP8[$73>>0]|0;
        $75 = $74&255;
        $76 = $75 >>> 1;
        $77 = (($76) + ($72))|0;
        $78 = $77&255;
        $cur$0$sum46 = (($k$098) + ($$sum30$pn))|0;
        $79 = (($45) + ($cur$0$sum46)|0);
        HEAP8[$79>>0] = $78;
        break;
       }
       default: {
       }
       }
       $96 = (($k$098) + 1)|0;
       $exitcond = ($96|0)==($filter_bytes$0|0);
       if ($exitcond) {
        break L30;
       } else {
        $k$098 = $96;
       }
      }
     }
    } while(0);
    if ($29) {
     if (!($4)) {
      $cur$0$sum42 = (($$sum30$pn) + ($3))|0;
      $97 = (($45) + ($cur$0$sum42)|0);
      HEAP8[$97>>0] = -1;
     }
     $98 = (($$01208) + ($$sum15)|0);
     $$1 = $98;$out_n$pn = $out_n;
    } else {
     $99 = (($$01208) + 2|0);
     $$1 = $99;$out_n$pn = 1;
    }
    $$sum16$pn = (($out_n$pn) + ($$sum13))|0;
    $cur$0$sum31$pn = (($out_n$pn) + ($$sum30$pn))|0;
    $cur$1 = (($45) + ($cur$0$sum31$pn)|0);
    $prior$0 = (($45) + ($$sum16$pn)|0);
    L50: do {
     if ($brmerge) {
      $100 = (($width$0) + -1)|0;
      $101 = Math_imul($100, $3)|0;
      switch ($filter$0|0) {
      case 2:  {
       $106 = ($101|0)>(0);
       if ($106) {
        $107 = (($width$0) + -1)|0;
        $108 = Math_imul($3, $107)|0;
        $k$2200 = 0;
        while(1) {
         $134 = (($$1) + ($k$2200)|0);
         $135 = HEAP8[$134>>0]|0;
         $136 = $135&255;
         $prior$0$sum = (($k$2200) + ($$sum16$pn))|0;
         $137 = (($45) + ($prior$0$sum)|0);
         $138 = HEAP8[$137>>0]|0;
         $139 = $138&255;
         $140 = (($139) + ($136))|0;
         $141 = $140&255;
         $cur$1$sum33 = (($k$2200) + ($cur$0$sum31$pn))|0;
         $142 = (($45) + ($cur$1$sum33)|0);
         HEAP8[$142>>0] = $141;
         $143 = (($k$2200) + 1)|0;
         $exitcond252 = ($143|0)==($108|0);
         if ($exitcond252) {
          break;
         } else {
          $k$2200 = $143;
         }
        }
       }
       break;
      }
      case 5:  {
       $116 = ($101|0)>(0);
       if ($116) {
        $117 = (($cur$0$sum31$pn) - ($filter_bytes$0))|0;
        $118 = (($width$0) + -1)|0;
        $119 = Math_imul($3, $118)|0;
        $k$5188 = 0;
        while(1) {
         $177 = (($$1) + ($k$5188)|0);
         $178 = HEAP8[$177>>0]|0;
         $179 = $178&255;
         $cur$1$sum39 = (($117) + ($k$5188))|0;
         $180 = (($45) + ($cur$1$sum39)|0);
         $181 = HEAP8[$180>>0]|0;
         $182 = $181&255;
         $183 = $182 >>> 1;
         $184 = (($183) + ($179))|0;
         $185 = $184&255;
         $cur$1$sum38 = (($k$5188) + ($cur$0$sum31$pn))|0;
         $186 = (($45) + ($cur$1$sum38)|0);
         HEAP8[$186>>0] = $185;
         $187 = (($k$5188) + 1)|0;
         $exitcond249 = ($187|0)==($119|0);
         if ($exitcond249) {
          break;
         } else {
          $k$5188 = $187;
         }
        }
       }
       break;
      }
      case 6:  {
       $120 = ($101|0)>(0);
       if ($120) {
        $121 = (($cur$0$sum31$pn) - ($filter_bytes$0))|0;
        $122 = (($width$0) + -1)|0;
        $123 = Math_imul($3, $122)|0;
        $k$6184 = 0;
        while(1) {
         $188 = (($$1) + ($k$6184)|0);
         $189 = HEAP8[$188>>0]|0;
         $190 = $189&255;
         $cur$1$sum41 = (($121) + ($k$6184))|0;
         $191 = (($45) + ($cur$1$sum41)|0);
         $192 = HEAP8[$191>>0]|0;
         $193 = $192&255;
         $194 = (_stbi__paeth($193,0,0)|0);
         $195 = (($194) + ($190))|0;
         $196 = $195&255;
         $cur$1$sum40 = (($k$6184) + ($cur$0$sum31$pn))|0;
         $197 = (($45) + ($cur$1$sum40)|0);
         HEAP8[$197>>0] = $196;
         $198 = (($k$6184) + 1)|0;
         $exitcond248 = ($198|0)==($123|0);
         if ($exitcond248) {
          break;
         } else {
          $k$6184 = $198;
         }
        }
       }
       break;
      }
      case 3:  {
       $109 = ($101|0)>(0);
       if ($109) {
        $110 = (($cur$0$sum31$pn) - ($filter_bytes$0))|0;
        $111 = (($width$0) + -1)|0;
        $112 = Math_imul($3, $111)|0;
        $k$3196 = 0;
        while(1) {
         $144 = (($$1) + ($k$3196)|0);
         $145 = HEAP8[$144>>0]|0;
         $146 = $145&255;
         $prior$0$sum17 = (($k$3196) + ($$sum16$pn))|0;
         $147 = (($45) + ($prior$0$sum17)|0);
         $148 = HEAP8[$147>>0]|0;
         $149 = $148&255;
         $cur$1$sum35 = (($110) + ($k$3196))|0;
         $150 = (($45) + ($cur$1$sum35)|0);
         $151 = HEAP8[$150>>0]|0;
         $152 = $151&255;
         $153 = (($152) + ($149))|0;
         $154 = $153 >>> 1;
         $155 = (($154) + ($146))|0;
         $156 = $155&255;
         $cur$1$sum34 = (($k$3196) + ($cur$0$sum31$pn))|0;
         $157 = (($45) + ($cur$1$sum34)|0);
         HEAP8[$157>>0] = $156;
         $158 = (($k$3196) + 1)|0;
         $exitcond251 = ($158|0)==($112|0);
         if ($exitcond251) {
          break;
         } else {
          $k$3196 = $158;
         }
        }
       }
       break;
      }
      case 0:  {
       _memcpy(($cur$1|0),($$1|0),($101|0))|0;
       break;
      }
      case 1:  {
       $102 = ($101|0)>(0);
       if ($102) {
        $103 = (($cur$0$sum31$pn) - ($filter_bytes$0))|0;
        $104 = (($width$0) + -1)|0;
        $105 = Math_imul($3, $104)|0;
        $k$1204 = 0;
        while(1) {
         $124 = (($$1) + ($k$1204)|0);
         $125 = HEAP8[$124>>0]|0;
         $126 = $125&255;
         $cur$1$sum32 = (($103) + ($k$1204))|0;
         $127 = (($45) + ($cur$1$sum32)|0);
         $128 = HEAP8[$127>>0]|0;
         $129 = $128&255;
         $130 = (($129) + ($126))|0;
         $131 = $130&255;
         $cur$1$sum = (($k$1204) + ($cur$0$sum31$pn))|0;
         $132 = (($45) + ($cur$1$sum)|0);
         HEAP8[$132>>0] = $131;
         $133 = (($k$1204) + 1)|0;
         $exitcond253 = ($133|0)==($105|0);
         if ($exitcond253) {
          break;
         } else {
          $k$1204 = $133;
         }
        }
       }
       break;
      }
      case 4:  {
       $113 = ($101|0)>(0);
       if ($113) {
        $114 = (($width$0) + -1)|0;
        $115 = Math_imul($3, $114)|0;
        $k$4192 = 0;
        while(1) {
         $159 = (($$1) + ($k$4192)|0);
         $160 = HEAP8[$159>>0]|0;
         $161 = $160&255;
         $162 = (($k$4192) - ($filter_bytes$0))|0;
         $cur$1$sum37 = (($162) + ($cur$0$sum31$pn))|0;
         $163 = (($45) + ($cur$1$sum37)|0);
         $164 = HEAP8[$163>>0]|0;
         $165 = $164&255;
         $prior$0$sum19 = (($k$4192) + ($$sum16$pn))|0;
         $166 = (($45) + ($prior$0$sum19)|0);
         $167 = HEAP8[$166>>0]|0;
         $168 = $167&255;
         $prior$0$sum18 = (($162) + ($$sum16$pn))|0;
         $169 = (($45) + ($prior$0$sum18)|0);
         $170 = HEAP8[$169>>0]|0;
         $171 = $170&255;
         $172 = (_stbi__paeth($165,$168,$171)|0);
         $173 = (($172) + ($161))|0;
         $174 = $173&255;
         $cur$1$sum36 = (($k$4192) + ($cur$0$sum31$pn))|0;
         $175 = (($45) + ($cur$1$sum36)|0);
         HEAP8[$175>>0] = $174;
         $176 = (($k$4192) + 1)|0;
         $exitcond250 = ($176|0)==($115|0);
         if ($exitcond250) {
          break;
         } else {
          $k$4192 = $176;
         }
        }
       }
       break;
      }
      default: {
      }
      }
      $199 = (($$1) + ($101)|0);
      $$9 = $199;
     } else {
      if (!($6)) {
       label = 59;
       break L20;
      }
      switch ($filter$0|0) {
      case 0:  {
       if ($42) {
        $$9 = $$1;
        break L50;
       } else {
        $$2179 = $$1;$cur$2178 = $cur$1;$i$0180 = $i$0177;
       }
       while(1) {
        if ($43) {
         $k$7172 = 0;
         while(1) {
          $200 = (($$2179) + ($k$7172)|0);
          $201 = HEAP8[$200>>0]|0;
          $202 = (($cur$2178) + ($k$7172)|0);
          HEAP8[$202>>0] = $201;
          $203 = (($k$7172) + 1)|0;
          $exitcond245 = ($203|0)==($3|0);
          if ($exitcond245) {
           break;
          } else {
           $k$7172 = $203;
          }
         }
        }
        $204 = (($cur$2178) + ($3)|0);
        HEAP8[$204>>0] = -1;
        $205 = (($$2179) + ($3)|0);
        $206 = (($cur$2178) + ($out_n)|0);
        $i$0 = (($i$0180) + -1)|0;
        $207 = ($i$0|0)==(0);
        if ($207) {
         break;
        } else {
         $$2179 = $205;$cur$2178 = $206;$i$0180 = $i$0;
        }
       }
       $scevgep247 = (($$1) + ($44)|0);
       $$9 = $scevgep247;
       break L50;
       break;
      }
      case 1:  {
       if ($40) {
        $$9 = $$1;
        break L50;
       } else {
        $$3168 = $$1;$cur$3167 = $cur$1;$i$1169 = $i$1166;
       }
       while(1) {
        if ($41) {
         $k$8161 = 0;
         while(1) {
          $208 = (($$3168) + ($k$8161)|0);
          $209 = HEAP8[$208>>0]|0;
          $210 = $209&255;
          $211 = (($k$8161) - ($out_n))|0;
          $212 = (($cur$3167) + ($211)|0);
          $213 = HEAP8[$212>>0]|0;
          $214 = $213&255;
          $215 = (($214) + ($210))|0;
          $216 = $215&255;
          $217 = (($cur$3167) + ($k$8161)|0);
          HEAP8[$217>>0] = $216;
          $218 = (($k$8161) + 1)|0;
          $exitcond243 = ($218|0)==($3|0);
          if ($exitcond243) {
           break;
          } else {
           $k$8161 = $218;
          }
         }
        }
        $219 = (($cur$3167) + ($3)|0);
        HEAP8[$219>>0] = -1;
        $220 = (($$3168) + ($3)|0);
        $221 = (($cur$3167) + ($out_n)|0);
        $i$1 = (($i$1169) + -1)|0;
        $222 = ($i$1|0)==(0);
        if ($222) {
         break;
        } else {
         $$3168 = $220;$cur$3167 = $221;$i$1169 = $i$1;
        }
       }
       $scevgep244 = (($$1) + ($44)|0);
       $$9 = $scevgep244;
       break L50;
       break;
      }
      case 2:  {
       if ($38) {
        $$9 = $$1;
        break L50;
       } else {
        $$4157 = $$1;$cur$4155 = $cur$1;$i$2158 = $i$2154;$prior$3156 = $prior$0;
       }
       while(1) {
        if ($39) {
         $k$9149 = 0;
         while(1) {
          $223 = (($$4157) + ($k$9149)|0);
          $224 = HEAP8[$223>>0]|0;
          $225 = $224&255;
          $226 = (($prior$3156) + ($k$9149)|0);
          $227 = HEAP8[$226>>0]|0;
          $228 = $227&255;
          $229 = (($228) + ($225))|0;
          $230 = $229&255;
          $231 = (($cur$4155) + ($k$9149)|0);
          HEAP8[$231>>0] = $230;
          $232 = (($k$9149) + 1)|0;
          $exitcond241 = ($232|0)==($3|0);
          if ($exitcond241) {
           break;
          } else {
           $k$9149 = $232;
          }
         }
        }
        $233 = (($cur$4155) + ($3)|0);
        HEAP8[$233>>0] = -1;
        $234 = (($$4157) + ($3)|0);
        $235 = (($cur$4155) + ($out_n)|0);
        $236 = (($prior$3156) + ($out_n)|0);
        $i$2 = (($i$2158) + -1)|0;
        $237 = ($i$2|0)==(0);
        if ($237) {
         break;
        } else {
         $$4157 = $234;$cur$4155 = $235;$i$2158 = $i$2;$prior$3156 = $236;
        }
       }
       $scevgep242 = (($$1) + ($44)|0);
       $$9 = $scevgep242;
       break L50;
       break;
      }
      case 3:  {
       if ($36) {
        $$9 = $$1;
        break L50;
       } else {
        $$5145 = $$1;$cur$5143 = $cur$1;$i$3146 = $i$3142;$prior$4144 = $prior$0;
       }
       while(1) {
        if ($37) {
         $k$10137 = 0;
         while(1) {
          $238 = (($$5145) + ($k$10137)|0);
          $239 = HEAP8[$238>>0]|0;
          $240 = $239&255;
          $241 = (($prior$4144) + ($k$10137)|0);
          $242 = HEAP8[$241>>0]|0;
          $243 = $242&255;
          $244 = (($k$10137) - ($out_n))|0;
          $245 = (($cur$5143) + ($244)|0);
          $246 = HEAP8[$245>>0]|0;
          $247 = $246&255;
          $248 = (($247) + ($243))|0;
          $249 = $248 >>> 1;
          $250 = (($249) + ($240))|0;
          $251 = $250&255;
          $252 = (($cur$5143) + ($k$10137)|0);
          HEAP8[$252>>0] = $251;
          $253 = (($k$10137) + 1)|0;
          $exitcond239 = ($253|0)==($3|0);
          if ($exitcond239) {
           break;
          } else {
           $k$10137 = $253;
          }
         }
        }
        $254 = (($cur$5143) + ($3)|0);
        HEAP8[$254>>0] = -1;
        $255 = (($$5145) + ($3)|0);
        $256 = (($cur$5143) + ($out_n)|0);
        $257 = (($prior$4144) + ($out_n)|0);
        $i$3 = (($i$3146) + -1)|0;
        $258 = ($i$3|0)==(0);
        if ($258) {
         break;
        } else {
         $$5145 = $255;$cur$5143 = $256;$i$3146 = $i$3;$prior$4144 = $257;
        }
       }
       $scevgep240 = (($$1) + ($44)|0);
       $$9 = $scevgep240;
       break L50;
       break;
      }
      case 5:  {
       if ($32) {
        $$9 = $$1;
        break L50;
       } else {
        $$7121 = $$1;$cur$7120 = $cur$1;$i$5122 = $i$5119;
       }
       while(1) {
        if ($33) {
         $k$12114 = 0;
         while(1) {
          $282 = (($$7121) + ($k$12114)|0);
          $283 = HEAP8[$282>>0]|0;
          $284 = $283&255;
          $285 = (($k$12114) - ($out_n))|0;
          $286 = (($cur$7120) + ($285)|0);
          $287 = HEAP8[$286>>0]|0;
          $288 = $287&255;
          $289 = $288 >>> 1;
          $290 = (($289) + ($284))|0;
          $291 = $290&255;
          $292 = (($cur$7120) + ($k$12114)|0);
          HEAP8[$292>>0] = $291;
          $293 = (($k$12114) + 1)|0;
          $exitcond235 = ($293|0)==($3|0);
          if ($exitcond235) {
           break;
          } else {
           $k$12114 = $293;
          }
         }
        }
        $294 = (($cur$7120) + ($3)|0);
        HEAP8[$294>>0] = -1;
        $295 = (($$7121) + ($3)|0);
        $296 = (($cur$7120) + ($out_n)|0);
        $i$5 = (($i$5122) + -1)|0;
        $297 = ($i$5|0)==(0);
        if ($297) {
         break;
        } else {
         $$7121 = $295;$cur$7120 = $296;$i$5122 = $i$5;
        }
       }
       $scevgep236 = (($$1) + ($44)|0);
       $$9 = $scevgep236;
       break L50;
       break;
      }
      case 6:  {
       if ($30) {
        $$9 = $$1;
        break L50;
       } else {
        $$8110 = $$1;$cur$8109 = $cur$1;$i$6111 = $i$6108;
       }
       while(1) {
        if ($31) {
         $k$13103 = 0;
         while(1) {
          $298 = (($$8110) + ($k$13103)|0);
          $299 = HEAP8[$298>>0]|0;
          $300 = $299&255;
          $301 = (($k$13103) - ($out_n))|0;
          $302 = (($cur$8109) + ($301)|0);
          $303 = HEAP8[$302>>0]|0;
          $304 = $303&255;
          $305 = (_stbi__paeth($304,0,0)|0);
          $306 = (($305) + ($300))|0;
          $307 = $306&255;
          $308 = (($cur$8109) + ($k$13103)|0);
          HEAP8[$308>>0] = $307;
          $309 = (($k$13103) + 1)|0;
          $exitcond233 = ($309|0)==($3|0);
          if ($exitcond233) {
           break;
          } else {
           $k$13103 = $309;
          }
         }
        }
        $310 = (($cur$8109) + ($3)|0);
        HEAP8[$310>>0] = -1;
        $311 = (($$8110) + ($3)|0);
        $312 = (($cur$8109) + ($out_n)|0);
        $i$6 = (($i$6111) + -1)|0;
        $313 = ($i$6|0)==(0);
        if ($313) {
         break;
        } else {
         $$8110 = $311;$cur$8109 = $312;$i$6111 = $i$6;
        }
       }
       $scevgep234 = (($$1) + ($44)|0);
       $$9 = $scevgep234;
       break L50;
       break;
      }
      case 4:  {
       if ($34) {
        $$9 = $$1;
        break L50;
       } else {
        $$6133 = $$1;$cur$6131 = $cur$1;$i$4134 = $i$4130;$prior$5132 = $prior$0;
       }
       while(1) {
        if ($35) {
         $k$11125 = 0;
         while(1) {
          $259 = (($$6133) + ($k$11125)|0);
          $260 = HEAP8[$259>>0]|0;
          $261 = $260&255;
          $262 = (($k$11125) - ($out_n))|0;
          $263 = (($cur$6131) + ($262)|0);
          $264 = HEAP8[$263>>0]|0;
          $265 = $264&255;
          $266 = (($prior$5132) + ($k$11125)|0);
          $267 = HEAP8[$266>>0]|0;
          $268 = $267&255;
          $269 = (($prior$5132) + ($262)|0);
          $270 = HEAP8[$269>>0]|0;
          $271 = $270&255;
          $272 = (_stbi__paeth($265,$268,$271)|0);
          $273 = (($272) + ($261))|0;
          $274 = $273&255;
          $275 = (($cur$6131) + ($k$11125)|0);
          HEAP8[$275>>0] = $274;
          $276 = (($k$11125) + 1)|0;
          $exitcond237 = ($276|0)==($3|0);
          if ($exitcond237) {
           break;
          } else {
           $k$11125 = $276;
          }
         }
        }
        $277 = (($cur$6131) + ($3)|0);
        HEAP8[$277>>0] = -1;
        $278 = (($$6133) + ($3)|0);
        $279 = (($cur$6131) + ($out_n)|0);
        $280 = (($prior$5132) + ($out_n)|0);
        $i$4 = (($i$4134) + -1)|0;
        $281 = ($i$4|0)==(0);
        if ($281) {
         break;
        } else {
         $$6133 = $278;$cur$6131 = $279;$i$4134 = $i$4;$prior$5132 = $280;
        }
       }
       $scevgep238 = (($$1) + ($44)|0);
       $$9 = $scevgep238;
       break L50;
       break;
      }
      default: {
       $$9 = $$1;
       break L50;
      }
      }
     }
    } while(0);
    $314 = (($j$0207) + 1)|0;
    $315 = ($314>>>0)<($y>>>0);
    if ($315) {
     $$01208 = $$9;$j$0207 = $314;
    } else {
     break L18;
    }
   }
   if ((label|0) == 14) {
    _stbi__err(13256);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 17) {
    ___assert_fail((13272|0),(12928|0),3889,(13200|0));
    // unreachable;
   }
   else if ((label|0) == 59) {
    ___assert_fail((13304|0),(12928|0),3942,(13200|0));
    // unreachable;
   }
  }
 } while(0);
 $316 = ($depth|0)>(7);
 $317 = ($y|0)==(0);
 $or$cond254 = $316 | $317;
 if ($or$cond254) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $$sum = (($1) - ($15))|0;
 $318 = ($color|0)==(0);
 $319 = (12808 + ($depth)|0);
 $i3$186 = (($x) + -1)|0;
 $320 = ($i3$186|0)>(-1);
 $i3$091 = (($x) + -1)|0;
 $321 = ($i3$091|0)>(-1);
 $322 = ($12|0)>(7);
 $323 = ($12|0)>(3);
 $324 = ($12|0)>(1);
 $325 = Math_imul($3, $x)|0;
 $326 = (($325) + -8)|0;
 $327 = $326 >>> 3;
 $328 = Math_imul($x, $out_n)|0;
 $329 = (($327) + ($328))|0;
 $330 = (($329) + 1)|0;
 $331 = Math_imul($3, $depth)|0;
 $332 = Math_imul($331, $x)|0;
 $333 = (($332) + 7)|0;
 $334 = $333 >>> 3;
 $335 = (($330) - ($334))|0;
 $336 = (($325) + -8)|0;
 $337 = $327 << 3;
 $338 = (($336) - ($337))|0;
 $339 = (($337) + 8)|0;
 $340 = Math_imul($3, $x)|0;
 $341 = (($340) + -4)|0;
 $342 = $341 >>> 2;
 $343 = Math_imul($x, $out_n)|0;
 $344 = (($342) + ($343))|0;
 $345 = (($344) + 1)|0;
 $346 = Math_imul($3, $depth)|0;
 $347 = Math_imul($346, $x)|0;
 $348 = (($347) + 7)|0;
 $349 = $348 >>> 3;
 $350 = (($345) - ($349))|0;
 $351 = (($340) + -4)|0;
 $352 = $342 << 2;
 $353 = (($351) - ($352))|0;
 $354 = (($352) + 4)|0;
 $355 = Math_imul($3, $x)|0;
 $356 = (($355) + -2)|0;
 $357 = $356 >>> 1;
 $358 = Math_imul($x, $out_n)|0;
 $359 = (($357) + ($358))|0;
 $360 = (($359) + 1)|0;
 $361 = Math_imul($3, $depth)|0;
 $362 = Math_imul($361, $x)|0;
 $363 = (($362) + 7)|0;
 $364 = $363 >>> 3;
 $365 = (($360) - ($364))|0;
 $366 = (($355) + -2)|0;
 $367 = $357 << 1;
 $368 = (($366) - ($367))|0;
 $369 = (($367) + 2)|0;
 $indvars$iv = $335;$indvars$iv214 = $339;$indvars$iv219 = $350;$indvars$iv222 = $354;$indvars$iv227 = $365;$indvars$iv230 = $369;$j$196 = 0;
 L148: while(1) {
  $370 = HEAP32[$10>>2]|0;
  $371 = Math_imul($j$196, $1)|0;
  $372 = (($370) + ($371)|0);
  $$sum2 = (($$sum) + ($371))|0;
  $373 = (($370) + ($$sum2)|0);
  if ($318) {
   $374 = HEAP8[$319>>0]|0;
   $376 = $374;
  } else {
   $376 = 1;
  }
  if ((($depth|0) == 1)) {
   if ($322) {
    $378 = $376&255;
    $scevgep = (($370) + ($indvars$iv)|0);
    $cur1$463 = $372;$in$264 = $373;$k$1662 = $12;
    while(1) {
     $455 = HEAP8[$in$264>>0]|0;
     $456 = $455&255;
     $457 = $456 >>> 7;
     $458 = (0 - ($457))|0;
     $459 = $378 & $458;
     $460 = $459&255;
     $461 = (($cur1$463) + 1|0);
     HEAP8[$cur1$463>>0] = $460;
     $462 = HEAP8[$in$264>>0]|0;
     $463 = $462&255;
     $464 = $463 >>> 6;
     $465 = $464 & 1;
     $466 = (0 - ($465))|0;
     $467 = $378 & $466;
     $468 = $467&255;
     $469 = (($cur1$463) + 2|0);
     HEAP8[$461>>0] = $468;
     $470 = HEAP8[$in$264>>0]|0;
     $471 = $470&255;
     $472 = $471 >>> 5;
     $473 = $472 & 1;
     $474 = (0 - ($473))|0;
     $475 = $378 & $474;
     $476 = $475&255;
     $477 = (($cur1$463) + 3|0);
     HEAP8[$469>>0] = $476;
     $478 = HEAP8[$in$264>>0]|0;
     $479 = $478&255;
     $480 = $479 >>> 4;
     $481 = $480 & 1;
     $482 = (0 - ($481))|0;
     $483 = $378 & $482;
     $484 = $483&255;
     $485 = (($cur1$463) + 4|0);
     HEAP8[$477>>0] = $484;
     $486 = HEAP8[$in$264>>0]|0;
     $487 = $486&255;
     $488 = $487 >>> 3;
     $489 = $488 & 1;
     $490 = (0 - ($489))|0;
     $491 = $378 & $490;
     $492 = $491&255;
     $493 = (($cur1$463) + 5|0);
     HEAP8[$485>>0] = $492;
     $494 = HEAP8[$in$264>>0]|0;
     $495 = $494&255;
     $496 = $495 >>> 2;
     $497 = $496 & 1;
     $498 = (0 - ($497))|0;
     $499 = $378 & $498;
     $500 = $499&255;
     $501 = (($cur1$463) + 6|0);
     HEAP8[$493>>0] = $500;
     $502 = HEAP8[$in$264>>0]|0;
     $503 = $502&255;
     $504 = $503 >>> 1;
     $505 = $504 & 1;
     $506 = (0 - ($505))|0;
     $507 = $378 & $506;
     $508 = $507&255;
     $509 = (($cur1$463) + 7|0);
     HEAP8[$501>>0] = $508;
     $510 = HEAP8[$in$264>>0]|0;
     $511 = $510&255;
     $512 = $511 & 1;
     $513 = (0 - ($512))|0;
     $514 = $378 & $513;
     $515 = $514&255;
     $516 = (($cur1$463) + 8|0);
     HEAP8[$509>>0] = $515;
     $517 = (($k$1662) + -8)|0;
     $518 = (($in$264) + 1|0);
     $519 = ($517|0)>(7);
     if ($519) {
      $cur1$463 = $516;$in$264 = $518;$k$1662 = $517;
     } else {
      break;
     }
    }
    $scevgep216 = (($370) + ($indvars$iv214)|0);
    $cur1$4$lcssa = $scevgep216;$in$2$lcssa = $scevgep;$k$16$lcssa = $338;
   } else {
    $cur1$4$lcssa = $372;$in$2$lcssa = $373;$k$16$lcssa = $12;
   }
   $520 = ($k$16$lcssa|0)>(0);
   if ($520) {
    $521 = $376&255;
    $522 = HEAP8[$in$2$lcssa>>0]|0;
    $523 = $522&255;
    $524 = $523 >>> 7;
    $525 = (0 - ($524))|0;
    $526 = $521 & $525;
    $527 = $526&255;
    HEAP8[$cur1$4$lcssa>>0] = $527;
    $528 = ($k$16$lcssa|0)>(1);
    if ($528) {
     $529 = (($cur1$4$lcssa) + 1|0);
     $530 = $376&255;
     $531 = HEAP8[$in$2$lcssa>>0]|0;
     $532 = $531&255;
     $533 = $532 >>> 6;
     $534 = $533 & 1;
     $535 = (0 - ($534))|0;
     $536 = $530 & $535;
     $537 = $536&255;
     HEAP8[$529>>0] = $537;
     $538 = ($k$16$lcssa|0)>(2);
     if ($538) {
      $539 = (($cur1$4$lcssa) + 2|0);
      $540 = $376&255;
      $541 = HEAP8[$in$2$lcssa>>0]|0;
      $542 = $541&255;
      $543 = $542 >>> 5;
      $544 = $543 & 1;
      $545 = (0 - ($544))|0;
      $546 = $540 & $545;
      $547 = $546&255;
      HEAP8[$539>>0] = $547;
      $548 = ($k$16$lcssa|0)>(3);
      if ($548) {
       $549 = (($cur1$4$lcssa) + 3|0);
       $550 = $376&255;
       $551 = HEAP8[$in$2$lcssa>>0]|0;
       $552 = $551&255;
       $553 = $552 >>> 4;
       $554 = $553 & 1;
       $555 = (0 - ($554))|0;
       $556 = $550 & $555;
       $557 = $556&255;
       HEAP8[$549>>0] = $557;
       $558 = ($k$16$lcssa|0)>(4);
       if ($558) {
        $559 = (($cur1$4$lcssa) + 4|0);
        $560 = $376&255;
        $561 = HEAP8[$in$2$lcssa>>0]|0;
        $562 = $561&255;
        $563 = $562 >>> 3;
        $564 = $563 & 1;
        $565 = (0 - ($564))|0;
        $566 = $560 & $565;
        $567 = $566&255;
        HEAP8[$559>>0] = $567;
        $568 = ($k$16$lcssa|0)>(5);
        if ($568) {
         $569 = (($cur1$4$lcssa) + 5|0);
         $570 = $376&255;
         $571 = HEAP8[$in$2$lcssa>>0]|0;
         $572 = $571&255;
         $573 = $572 >>> 2;
         $574 = $573 & 1;
         $575 = (0 - ($574))|0;
         $576 = $570 & $575;
         $577 = $576&255;
         HEAP8[$569>>0] = $577;
         $578 = ($k$16$lcssa|0)>(6);
         if ($578) {
          $579 = (($cur1$4$lcssa) + 6|0);
          $580 = $376&255;
          $581 = HEAP8[$in$2$lcssa>>0]|0;
          $582 = $581&255;
          $583 = $582 >>> 1;
          $584 = $583 & 1;
          $585 = (0 - ($584))|0;
          $586 = $580 & $585;
          $587 = $586&255;
          HEAP8[$579>>0] = $587;
         }
        }
       }
      }
     }
    }
   }
  } else if ((($depth|0) == 4)) {
   if ($324) {
    $375 = $376&255;
    $scevgep229 = (($370) + ($indvars$iv227)|0);
    $cur1$078 = $372;$in$079 = $373;$k$1477 = $12;
    while(1) {
     $379 = HEAP8[$in$079>>0]|0;
     $380 = $379&255;
     $381 = $380 >>> 4;
     $382 = Math_imul($381, $375)|0;
     $383 = $382&255;
     $384 = (($cur1$078) + 1|0);
     HEAP8[$cur1$078>>0] = $383;
     $385 = HEAP8[$in$079>>0]|0;
     $386 = $385&255;
     $387 = $386 & 15;
     $388 = Math_imul($387, $375)|0;
     $389 = $388&255;
     $390 = (($cur1$078) + 2|0);
     HEAP8[$384>>0] = $389;
     $391 = (($k$1477) + -2)|0;
     $392 = (($in$079) + 1|0);
     $393 = ($391|0)>(1);
     if ($393) {
      $cur1$078 = $390;$in$079 = $392;$k$1477 = $391;
     } else {
      break;
     }
    }
    $scevgep232 = (($370) + ($indvars$iv230)|0);
    $cur1$0$lcssa = $scevgep232;$in$0$lcssa = $scevgep229;$k$14$lcssa = $368;
   } else {
    $cur1$0$lcssa = $372;$in$0$lcssa = $373;$k$14$lcssa = $12;
   }
   $394 = ($k$14$lcssa|0)>(0);
   if ($394) {
    $395 = $376&255;
    $396 = HEAP8[$in$0$lcssa>>0]|0;
    $397 = $396&255;
    $398 = $397 >>> 4;
    $399 = Math_imul($398, $395)|0;
    $400 = $399&255;
    HEAP8[$cur1$0$lcssa>>0] = $400;
   }
  } else if ((($depth|0) == 2)) {
   if ($323) {
    $377 = $376&255;
    $scevgep221 = (($370) + ($indvars$iv219)|0);
    $cur1$169 = $372;$in$170 = $373;$k$1568 = $12;
    while(1) {
     $401 = HEAP8[$in$170>>0]|0;
     $402 = $401&255;
     $403 = $402 >>> 6;
     $404 = Math_imul($403, $377)|0;
     $405 = $404&255;
     $406 = (($cur1$169) + 1|0);
     HEAP8[$cur1$169>>0] = $405;
     $407 = HEAP8[$in$170>>0]|0;
     $408 = $407&255;
     $409 = $408 >>> 4;
     $410 = $409 & 3;
     $411 = Math_imul($410, $377)|0;
     $412 = $411&255;
     $413 = (($cur1$169) + 2|0);
     HEAP8[$406>>0] = $412;
     $414 = HEAP8[$in$170>>0]|0;
     $415 = $414&255;
     $416 = $415 >>> 2;
     $417 = $416 & 3;
     $418 = Math_imul($417, $377)|0;
     $419 = $418&255;
     $420 = (($cur1$169) + 3|0);
     HEAP8[$413>>0] = $419;
     $421 = HEAP8[$in$170>>0]|0;
     $422 = $421&255;
     $423 = $422 & 3;
     $424 = Math_imul($423, $377)|0;
     $425 = $424&255;
     $426 = (($cur1$169) + 4|0);
     HEAP8[$420>>0] = $425;
     $427 = (($k$1568) + -4)|0;
     $428 = (($in$170) + 1|0);
     $429 = ($427|0)>(3);
     if ($429) {
      $cur1$169 = $426;$in$170 = $428;$k$1568 = $427;
     } else {
      break;
     }
    }
    $scevgep224 = (($370) + ($indvars$iv222)|0);
    $cur1$1$lcssa = $scevgep224;$in$1$lcssa = $scevgep221;$k$15$lcssa = $353;
   } else {
    $cur1$1$lcssa = $372;$in$1$lcssa = $373;$k$15$lcssa = $12;
   }
   $430 = ($k$15$lcssa|0)>(0);
   if ($430) {
    $431 = $376&255;
    $432 = HEAP8[$in$1$lcssa>>0]|0;
    $433 = $432&255;
    $434 = $433 >>> 6;
    $435 = Math_imul($434, $431)|0;
    $436 = $435&255;
    HEAP8[$cur1$1$lcssa>>0] = $436;
    $437 = ($k$15$lcssa|0)>(1);
    if ($437) {
     $438 = (($cur1$1$lcssa) + 1|0);
     $439 = $376&255;
     $440 = HEAP8[$in$1$lcssa>>0]|0;
     $441 = $440&255;
     $442 = $441 >>> 4;
     $443 = $442 & 3;
     $444 = Math_imul($443, $439)|0;
     $445 = $444&255;
     HEAP8[$438>>0] = $445;
     $446 = ($k$15$lcssa|0)>(2);
     if ($446) {
      $447 = (($cur1$1$lcssa) + 2|0);
      $448 = $376&255;
      $449 = HEAP8[$in$1$lcssa>>0]|0;
      $450 = $449&255;
      $451 = $450 >>> 2;
      $452 = $451 & 3;
      $453 = Math_imul($452, $448)|0;
      $454 = $453&255;
      HEAP8[$447>>0] = $454;
     }
    }
   }
  }
  L187: do {
   if (!($4)) {
    $588 = HEAP32[$10>>2]|0;
    if ((($3|0) == 1)) {
     if ($321) {
      $i3$092 = $i3$091;
     } else {
      break;
     }
     while(1) {
      $591 = $i3$092 << 1;
      $592 = $591 | 1;
      $$sum10 = (($592) + ($371))|0;
      $593 = (($588) + ($$sum10)|0);
      HEAP8[$593>>0] = -1;
      $$sum11 = (($i3$092) + ($371))|0;
      $594 = (($588) + ($$sum11)|0);
      $595 = HEAP8[$594>>0]|0;
      $$sum12 = (($591) + ($371))|0;
      $596 = (($588) + ($$sum12)|0);
      HEAP8[$596>>0] = $595;
      $i3$0 = (($i3$092) + -1)|0;
      $597 = ($i3$0|0)>(-1);
      if ($597) {
       $i3$092 = $i3$0;
      } else {
       break L187;
      }
     }
    } else if (!((($3|0) == 3))) {
     label = 134;
     break L148;
    }
    if ($320) {
     $589 = (($371) + 2)|0;
     $590 = (($371) + 1)|0;
     $i3$187 = $i3$186;
     while(1) {
      $598 = $i3$187 << 2;
      $599 = $598 | 3;
      $$sum3 = (($599) + ($371))|0;
      $600 = (($588) + ($$sum3)|0);
      HEAP8[$600>>0] = -1;
      $601 = ($i3$187*3)|0;
      $$sum4 = (($589) + ($601))|0;
      $602 = (($588) + ($$sum4)|0);
      $603 = HEAP8[$602>>0]|0;
      $604 = $598 | 2;
      $$sum5 = (($604) + ($371))|0;
      $605 = (($588) + ($$sum5)|0);
      HEAP8[$605>>0] = $603;
      $$sum6 = (($590) + ($601))|0;
      $606 = (($588) + ($$sum6)|0);
      $607 = HEAP8[$606>>0]|0;
      $608 = $598 | 1;
      $$sum7 = (($608) + ($371))|0;
      $609 = (($588) + ($$sum7)|0);
      HEAP8[$609>>0] = $607;
      $$sum8 = (($601) + ($371))|0;
      $610 = (($588) + ($$sum8)|0);
      $611 = HEAP8[$610>>0]|0;
      $$sum9 = (($598) + ($371))|0;
      $612 = (($588) + ($$sum9)|0);
      HEAP8[$612>>0] = $611;
      $i3$1 = (($i3$187) + -1)|0;
      $613 = ($i3$1|0)>(-1);
      if ($613) {
       $i3$187 = $i3$1;
      } else {
       break;
      }
     }
    }
   }
  } while(0);
  $614 = (($j$196) + 1)|0;
  $615 = ($614>>>0)<($y>>>0);
  $indvars$iv$next = (($indvars$iv) + ($328))|0;
  $indvars$iv$next215 = (($indvars$iv214) + ($328))|0;
  $indvars$iv$next220 = (($indvars$iv219) + ($343))|0;
  $indvars$iv$next223 = (($indvars$iv222) + ($343))|0;
  $indvars$iv$next228 = (($indvars$iv227) + ($358))|0;
  $indvars$iv$next231 = (($indvars$iv230) + ($358))|0;
  if ($615) {
   $indvars$iv = $indvars$iv$next;$indvars$iv214 = $indvars$iv$next215;$indvars$iv219 = $indvars$iv$next220;$indvars$iv222 = $indvars$iv$next223;$indvars$iv227 = $indvars$iv$next228;$indvars$iv230 = $indvars$iv$next231;$j$196 = $614;
  } else {
   $$0 = 1;
   label = 137;
   break;
  }
 }
 if ((label|0) == 134) {
  ___assert_fail((13328|0),(12928|0),4022,(13200|0));
  // unreachable;
 }
 else if ((label|0) == 137) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stbi__paeth($a,$b,$c) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$b = 0, $ispos = 0, $ispos1 = 0, $ispos3 = 0, $neg = 0, $neg2 = 0, $neg4 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($b) + ($a))|0;
 $1 = (($0) - ($c))|0;
 $2 = (($1) - ($a))|0;
 $ispos = ($2|0)>(-1);
 $neg = (0 - ($2))|0;
 $3 = $ispos ? $2 : $neg;
 $4 = (($1) - ($b))|0;
 $ispos1 = ($4|0)>(-1);
 $neg2 = (0 - ($4))|0;
 $5 = $ispos1 ? $4 : $neg2;
 $6 = (($1) - ($c))|0;
 $ispos3 = ($6|0)>(-1);
 $neg4 = (0 - ($6))|0;
 $7 = $ispos3 ? $6 : $neg4;
 $8 = ($3|0)>($5|0);
 $9 = ($3|0)>($7|0);
 $or$cond = $8 | $9;
 if (!($or$cond)) {
  $$0 = $a;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($5|0)>($7|0);
 $c$b = $10 ? $c : $b;
 $$0 = $c$b;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__decode_jpeg_header($z,$scan) {
 $z = $z|0;
 $scan = $scan|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$phitmp = 0, $$phitmp9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m$0$lcssa = 0, $m$010 = 0, $not$ = 0, $not$2 = 0, $not$8 = 0, $phitmp = 0, $phitmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($z) + 18116|0);
 HEAP8[$0>>0] = -1;
 $1 = (_stbi__get_marker($z)|0);
 $2 = ($1<<24>>24)==(-40);
 if (!($2)) {
  _stbi__err(13368);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($scan|0)==(1);
 if ($3) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_stbi__get_marker($z)|0);
 $5 = $4&255;
 $6 = $5 & 254;
 $phitmp7 = ($4<<24>>24)!=(-62);
 $not$8 = ($6|0)!=(192);
 $$phitmp9 = $phitmp7 & $not$8;
 L8: do {
  if ($$phitmp9) {
   $m$010 = $5;
   L10: while(1) {
    $10 = (_stbi__process_marker($z,$m$010)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$0 = 0;
     label = 14;
     break;
    }
    $12 = (_stbi__get_marker($z)|0);
    $13 = $12&255;
    $14 = ($12<<24>>24)==(-1);
    if ($14) {
     while(1) {
      $15 = HEAP32[$z>>2]|0;
      $16 = (_stbi__at_eof($15)|0);
      $17 = ($16|0)==(0);
      if (!($17)) {
       break L10;
      }
      $8 = (_stbi__get_marker($z)|0);
      $18 = ($8<<24>>24)==(-1);
      if (!($18)) {
       break;
      }
     }
     $7 = $8&255;
     $$lcssa = $7;
    } else {
     $$lcssa = $13;
    }
    $9 = $$lcssa & 254;
    $phitmp = ($$lcssa|0)!=(194);
    $not$ = ($9|0)!=(192);
    $$phitmp = $phitmp & $not$;
    if ($$phitmp) {
     $m$010 = $$lcssa;
    } else {
     $m$0$lcssa = $$lcssa;
     break L8;
    }
   }
   if ((label|0) == 14) {
    STACKTOP = sp;return ($$0|0);
   }
   _stbi__err(13376);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $m$0$lcssa = $5;
  }
 } while(0);
 $19 = ($m$0$lcssa|0)==(194);
 $20 = $19&1;
 $21 = (($z) + 18124|0);
 HEAP32[$21>>2] = $20;
 $22 = (_stbi__process_frame_header($z,$scan)|0);
 $not$2 = ($22|0)!=(0);
 $$ = $not$2&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__get_marker($j) {
 $j = $j|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($j) + 18116|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(-1);
 if ($2) {
  $3 = HEAP32[$j>>2]|0;
  $4 = (_stbi__get8($3)|0);
  $5 = ($4<<24>>24)==(-1);
  if ($5) {
   while(1) {
    $6 = HEAP32[$j>>2]|0;
    $7 = (_stbi__get8($6)|0);
    $8 = ($7<<24>>24)==(-1);
    if (!($8)) {
     $$0 = $7;
     break;
    }
   }
  } else {
   $$0 = -1;
  }
 } else {
  HEAP8[$0>>0] = -1;
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _stbi__process_marker($z,$m) {
 $z = $z|0;
 $m = $m|0;
 var $$2 = 0, $$mask = 0, $$mask5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $L$0$lcssa = 0, $L$09 = 0, $L$1$lcssa = 0, $L$119 = 0, $exitcond = 0, $exitcond25 = 0, $exitcond26 = 0, $i$06 = 0;
 var $i1$011 = 0, $i1$113 = 0, $m$off = 0, $n$012 = 0, $or$cond = 0, $or$cond3 = 0, $sizes = 0, $v$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sizes = sp;
 if ((($m|0) == 196)) {
  $27 = HEAP32[$z>>2]|0;
  $28 = (_stbi__get16be($27)|0);
  $29 = (($28) + -2)|0;
  $30 = ($29|0)>(0);
  L3: do {
   if ($30) {
    $L$119 = $29;
    while(1) {
     $31 = HEAP32[$z>>2]|0;
     $32 = (_stbi__get8($31)|0);
     $33 = $32&255;
     $34 = $33 & 15;
     $35 = ($32&255)>(31);
     $36 = ($34>>>0)>(3);
     $or$cond = $35 | $36;
     if ($or$cond) {
      label = 17;
      break;
     } else {
      $i1$011 = 0;$n$012 = 0;
     }
     while(1) {
      $37 = HEAP32[$z>>2]|0;
      $38 = (_stbi__get8($37)|0);
      $39 = $38&255;
      $40 = (($sizes) + ($i1$011<<2)|0);
      HEAP32[$40>>2] = $39;
      $41 = (($39) + ($n$012))|0;
      $42 = (($i1$011) + 1)|0;
      $exitcond25 = ($42|0)==(16);
      if ($exitcond25) {
       break;
      } else {
       $i1$011 = $42;$n$012 = $41;
      }
     }
     $43 = (($L$119) + -17)|0;
     $$mask5 = $33 & 240;
     $44 = ($$mask5|0)==(0);
     if ($44) {
      $45 = ((($z) + (($34*1680)|0)|0) + 4|0);
      $46 = (_stbi__build_huffman($45,$sizes)|0);
      $47 = ($46|0)==(0);
      if ($47) {
       $$2 = 0;
       label = 32;
       break;
      }
      $48 = ((($z) + (($34*1680)|0)|0) + 1028|0);
      $v$0 = $48;
     } else {
      $49 = ((($z) + (($34*1680)|0)|0) + 6724|0);
      $50 = (_stbi__build_huffman($49,$sizes)|0);
      $51 = ($50|0)==(0);
      if ($51) {
       $$2 = 0;
       label = 32;
       break;
      }
      $52 = ((($z) + (($34*1680)|0)|0) + 7748|0);
      $v$0 = $52;
     }
     $53 = ($41|0)>(0);
     if ($53) {
      $i1$113 = 0;
      while(1) {
       $54 = HEAP32[$z>>2]|0;
       $55 = (_stbi__get8($54)|0);
       $56 = (($v$0) + ($i1$113)|0);
       HEAP8[$56>>0] = $55;
       $57 = (($i1$113) + 1)|0;
       $exitcond26 = ($57|0)==($41|0);
       if ($exitcond26) {
        break;
       } else {
        $i1$113 = $57;
       }
      }
     }
     if (!($44)) {
      $58 = ((($z) + ($34<<10)|0) + 13700|0);
      $59 = ((($z) + (($34*1680)|0)|0) + 6724|0);
      _stbi__build_fast_ac($58,$59);
     }
     $60 = (($43) - ($41))|0;
     $61 = ($60|0)>(0);
     if ($61) {
      $L$119 = $60;
     } else {
      $L$1$lcssa = $60;
      break L3;
     }
    }
    if ((label|0) == 17) {
     _stbi__err(13664);
     $$2 = 0;
     STACKTOP = sp;return ($$2|0);
    }
    else if ((label|0) == 32) {
     STACKTOP = sp;return ($$2|0);
    }
   } else {
    $L$1$lcssa = $29;
   }
  } while(0);
  $62 = ($L$1$lcssa|0)==(0);
  $63 = $62&1;
  $$2 = $63;
  STACKTOP = sp;return ($$2|0);
 } else if ((($m|0) == 221)) {
  $0 = HEAP32[$z>>2]|0;
  $1 = (_stbi__get16be($0)|0);
  $2 = ($1|0)==(4);
  if ($2) {
   $3 = HEAP32[$z>>2]|0;
   $4 = (_stbi__get16be($3)|0);
   $5 = (($z) + 18168|0);
   HEAP32[$5>>2] = $4;
   $$2 = 1;
   STACKTOP = sp;return ($$2|0);
  } else {
   _stbi__err(13536);
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
 } else if ((($m|0) == 255)) {
  _stbi__err(13520);
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 } else if ((($m|0) == 219)) {
  $6 = HEAP32[$z>>2]|0;
  $7 = (_stbi__get16be($6)|0);
  $8 = (($7) + -2)|0;
  $9 = ($8|0)>(0);
  L44: do {
   if ($9) {
    $L$09 = $8;
    while(1) {
     $10 = HEAP32[$z>>2]|0;
     $11 = (_stbi__get8($10)|0);
     $12 = $11&255;
     $13 = $12 & 15;
     $$mask = $12 & 240;
     $14 = ($$mask|0)==(0);
     if (!($14)) {
      label = 8;
      break;
     }
     $15 = ($13>>>0)>(3);
     if ($15) {
      label = 10;
      break;
     } else {
      $i$06 = 0;
     }
     while(1) {
      $16 = HEAP32[$z>>2]|0;
      $17 = (_stbi__get8($16)|0);
      $18 = (13584 + ($i$06)|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = $19&255;
      $21 = (((($z) + ($13<<6)|0) + ($20)|0) + 13444|0);
      HEAP8[$21>>0] = $17;
      $22 = (($i$06) + 1)|0;
      $exitcond = ($22|0)==(64);
      if ($exitcond) {
       break;
      } else {
       $i$06 = $22;
      }
     }
     $23 = (($L$09) + -65)|0;
     $24 = ($23|0)>(0);
     if ($24) {
      $L$09 = $23;
     } else {
      $L$0$lcssa = $23;
      break L44;
     }
    }
    if ((label|0) == 8) {
     _stbi__err(13552);
     $$2 = 0;
     STACKTOP = sp;return ($$2|0);
    }
    else if ((label|0) == 10) {
     _stbi__err(13568);
     $$2 = 0;
     STACKTOP = sp;return ($$2|0);
    }
   } else {
    $L$0$lcssa = $8;
   }
  } while(0);
  $25 = ($L$0$lcssa|0)==(0);
  $26 = $25&1;
  $$2 = $26;
  STACKTOP = sp;return ($$2|0);
 } else {
  $m$off = (($m) + -224)|0;
  $64 = ($m$off>>>0)<(16);
  $65 = ($m|0)==(254);
  $or$cond3 = $64 | $65;
  if (!($or$cond3)) {
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $66 = HEAP32[$z>>2]|0;
  $67 = (_stbi__get16be($66)|0);
  $68 = (($67) + -2)|0;
  _stbi__skip($66,$68);
  $$2 = 1;
  STACKTOP = sp;return ($$2|0);
 }
 return 0|0;
}
function _stbi__process_frame_header($z,$scan) {
 $z = $z|0;
 $scan = $scan|0;
 var $$0 = 0, $$h_max$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h_max$0$lcssa = 0, $h_max$012 = 0, $i$022 = 0, $i$1 = 0, $i$211 = 0, $i$37 = 0, $i$45 = 0, $i$45$in = 0;
 var $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $v_max$0$lcssa = 0, $v_max$013 = 0, $v_max$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$z>>2]|0;
 $1 = (_stbi__get16be($0)|0);
 $2 = ($1|0)<(11);
 if ($2) {
  _stbi__err(13384);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_stbi__get8($0)|0);
 $4 = ($3<<24>>24)==(8);
 if (!($4)) {
  _stbi__err(13400);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_stbi__get16be($0)|0);
 $6 = (($0) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0);
 if ($7) {
  _stbi__err(13416);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_stbi__get16be($0)|0);
 HEAP32[$0>>2] = $8;
 $9 = ($8|0)==(0);
 if ($9) {
  _stbi__err(13440);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_stbi__get8($0)|0);
 $11 = $10&255;
 if (!((($10<<24>>24) == 1) | (($10<<24>>24) == 3))) {
  _stbi__err(13448);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($0) + 8|0);
 HEAP32[$12>>2] = $11;
 $i$022 = 0;
 while(1) {
  $13 = ((($z) + (($i$022*72)|0)|0) + 17864|0);
  HEAP32[$13>>2] = 0;
  $14 = ((($z) + (($i$022*72)|0)|0) + 17876|0);
  HEAP32[$14>>2] = 0;
  $15 = (($i$022) + 1)|0;
  $16 = ($15|0)<($11|0);
  if ($16) {
   $i$022 = $15;
  } else {
   break;
  }
 }
 $17 = HEAP32[$12>>2]|0;
 $18 = ($17*3)|0;
 $19 = (($18) + 8)|0;
 $20 = ($1|0)==($19|0);
 if ($20) {
  $i$1 = 0;
 } else {
  _stbi__err(13384);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $21 = HEAP32[$12>>2]|0;
  $22 = ($i$1|0)<($21|0);
  if (!($22)) {
   label = 24;
   break;
  }
  $23 = (_stbi__get8($0)|0);
  $24 = $23&255;
  $25 = ((($z) + (($i$1*72)|0)|0) + 17820|0);
  HEAP32[$25>>2] = $24;
  $26 = (($i$1) + 1)|0;
  $27 = ($24|0)==($26|0);
  $28 = ($24|0)==($i$1|0);
  $or$cond = $27 | $28;
  if (!($or$cond)) {
   label = 17;
   break;
  }
  $29 = (_stbi__get8($0)|0);
  $30 = $29&255;
  $31 = $30 >>> 4;
  $32 = ((($z) + (($i$1*72)|0)|0) + 17824|0);
  HEAP32[$32>>2] = $31;
  $33 = ($31|0)==(0);
  $34 = ($29&255)>(79);
  $or$cond2 = $33 | $34;
  if ($or$cond2) {
   label = 19;
   break;
  }
  $35 = $30 & 15;
  $36 = ((($z) + (($i$1*72)|0)|0) + 17828|0);
  HEAP32[$36>>2] = $35;
  $37 = ($35|0)==(0);
  $38 = ($35>>>0)>(4);
  $or$cond3 = $37 | $38;
  if ($or$cond3) {
   label = 21;
   break;
  }
  $39 = (_stbi__get8($0)|0);
  $40 = $39&255;
  $41 = ((($z) + (($i$1*72)|0)|0) + 17832|0);
  HEAP32[$41>>2] = $40;
  $42 = ($39&255)>(3);
  if ($42) {
   label = 23;
   break;
  } else {
   $i$1 = $26;
  }
 }
 if ((label|0) == 17) {
  _stbi__err(13472);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 19) {
  _stbi__err(13496);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 21) {
  _stbi__err(13504);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 23) {
  _stbi__err(13512);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 24) {
  $43 = ($scan|0)==(0);
  if (!($43)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $44 = HEAP32[$0>>2]|0;
  $45 = (1073741824 / ($44>>>0))&-1;
  $46 = (($45>>>0) / ($21>>>0))&-1;
  $47 = HEAP32[$6>>2]|0;
  $48 = ($46>>>0)<($47>>>0);
  if ($48) {
   _stbi__err(12568);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $49 = HEAP32[$12>>2]|0;
  $50 = ($49|0)>(0);
  if ($50) {
   $51 = HEAP32[$12>>2]|0;
   $h_max$012 = 1;$i$211 = 0;$v_max$013 = 1;
   while(1) {
    $52 = ((($z) + (($i$211*72)|0)|0) + 17824|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)>($h_max$012|0);
    $$h_max$0 = $54 ? $53 : $h_max$012;
    $55 = ((($z) + (($i$211*72)|0)|0) + 17828|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)>($v_max$013|0);
    $v_max$1 = $57 ? $56 : $v_max$013;
    $58 = (($i$211) + 1)|0;
    $59 = ($58|0)<($51|0);
    if ($59) {
     $h_max$012 = $$h_max$0;$i$211 = $58;$v_max$013 = $v_max$1;
    } else {
     $h_max$0$lcssa = $$h_max$0;$v_max$0$lcssa = $v_max$1;
     break;
    }
   }
  } else {
   $h_max$0$lcssa = 1;$v_max$0$lcssa = 1;
  }
  $60 = (($z) + 17796|0);
  HEAP32[$60>>2] = $h_max$0$lcssa;
  $61 = (($z) + 17800|0);
  HEAP32[$61>>2] = $v_max$0$lcssa;
  $62 = $h_max$0$lcssa << 3;
  $63 = (($z) + 17812|0);
  HEAP32[$63>>2] = $62;
  $64 = $v_max$0$lcssa << 3;
  $65 = (($z) + 17816|0);
  HEAP32[$65>>2] = $64;
  $66 = HEAP32[$0>>2]|0;
  $67 = HEAP32[$63>>2]|0;
  $68 = (($66) + -1)|0;
  $69 = (($68) + ($67))|0;
  $70 = (($69>>>0) / ($67>>>0))&-1;
  $71 = (($z) + 17804|0);
  HEAP32[$71>>2] = $70;
  $72 = HEAP32[$6>>2]|0;
  $73 = HEAP32[$65>>2]|0;
  $74 = (($72) + -1)|0;
  $75 = (($74) + ($73))|0;
  $76 = (($75>>>0) / ($73>>>0))&-1;
  $77 = (($z) + 17808|0);
  HEAP32[$77>>2] = $76;
  $78 = HEAP32[$12>>2]|0;
  $79 = ($78|0)>(0);
  if (!($79)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $80 = (($h_max$0$lcssa) + -1)|0;
  $81 = (($v_max$0$lcssa) + -1)|0;
  $82 = (($z) + 18124|0);
  $i$37 = 0;
  while(1) {
   $83 = HEAP32[$0>>2]|0;
   $84 = ((($z) + (($i$37*72)|0)|0) + 17824|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = Math_imul($85, $83)|0;
   $87 = (($80) + ($86))|0;
   $88 = (($87>>>0) / ($h_max$0$lcssa>>>0))&-1;
   $89 = ((($z) + (($i$37*72)|0)|0) + 17848|0);
   HEAP32[$89>>2] = $88;
   $90 = HEAP32[$6>>2]|0;
   $91 = ((($z) + (($i$37*72)|0)|0) + 17828|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = Math_imul($92, $90)|0;
   $94 = (($81) + ($93))|0;
   $95 = (($94>>>0) / ($v_max$0$lcssa>>>0))&-1;
   $96 = ((($z) + (($i$37*72)|0)|0) + 17852|0);
   HEAP32[$96>>2] = $95;
   $97 = HEAP32[$71>>2]|0;
   $98 = HEAP32[$84>>2]|0;
   $99 = $97 << 3;
   $100 = Math_imul($99, $98)|0;
   $101 = ((($z) + (($i$37*72)|0)|0) + 17856|0);
   HEAP32[$101>>2] = $100;
   $102 = HEAP32[$77>>2]|0;
   $103 = HEAP32[$91>>2]|0;
   $104 = $102 << 3;
   $105 = Math_imul($104, $103)|0;
   $106 = ((($z) + (($i$37*72)|0)|0) + 17860|0);
   HEAP32[$106>>2] = $105;
   $107 = HEAP32[$101>>2]|0;
   $108 = Math_imul($107, $105)|0;
   $109 = (($108) + 15)|0;
   $110 = (_stbi__malloc($109)|0);
   $111 = ((($z) + (($i$37*72)|0)|0) + 17868|0);
   HEAP32[$111>>2] = $110;
   $112 = ($110|0)==(0|0);
   if ($112) {
    break;
   }
   $118 = $110;
   $119 = (($118) + 15)|0;
   $120 = $119 & -16;
   $121 = $120;
   $122 = ((($z) + (($i$37*72)|0)|0) + 17864|0);
   HEAP32[$122>>2] = $121;
   $123 = ((($z) + (($i$37*72)|0)|0) + 17876|0);
   HEAP32[$123>>2] = 0;
   $124 = HEAP32[$82>>2]|0;
   $125 = ($124|0)==(0);
   if ($125) {
    $145 = ((($z) + (($i$37*72)|0)|0) + 17880|0);
    HEAP32[$145>>2] = 0;
    $146 = ((($z) + (($i$37*72)|0)|0) + 17872|0);
    HEAP32[$146>>2] = 0;
   } else {
    $126 = HEAP32[$101>>2]|0;
    $127 = (($126) + 7)|0;
    $128 = $127 >> 3;
    $129 = ((($z) + (($i$37*72)|0)|0) + 17884|0);
    HEAP32[$129>>2] = $128;
    $130 = HEAP32[$106>>2]|0;
    $131 = (($130) + 7)|0;
    $132 = $131 >> 3;
    $133 = ((($z) + (($i$37*72)|0)|0) + 17888|0);
    HEAP32[$133>>2] = $132;
    $134 = HEAP32[$129>>2]|0;
    $135 = $134 << 7;
    $136 = Math_imul($135, $132)|0;
    $137 = $136 | 15;
    $138 = (_malloc($137)|0);
    $139 = ((($z) + (($i$37*72)|0)|0) + 17872|0);
    HEAP32[$139>>2] = $138;
    $140 = $138;
    $141 = (($140) + 15)|0;
    $142 = $141 & -16;
    $143 = $142;
    $144 = ((($z) + (($i$37*72)|0)|0) + 17880|0);
    HEAP32[$144>>2] = $143;
   }
   $147 = (($i$37) + 1)|0;
   $148 = HEAP32[$12>>2]|0;
   $149 = ($147|0)<($148|0);
   if ($149) {
    $i$37 = $147;
   } else {
    $$0 = 1;
    label = 40;
    break;
   }
  }
  if ((label|0) == 40) {
   STACKTOP = sp;return ($$0|0);
  }
  $113 = ($i$37|0)>(0);
  if ($113) {
   $i$45$in = $i$37;
   while(1) {
    $i$45 = (($i$45$in) + -1)|0;
    $114 = ((($z) + (($i$45*72)|0)|0) + 17868|0);
    $115 = HEAP32[$114>>2]|0;
    _free($115);
    $116 = ((($z) + (($i$45*72)|0)|0) + 17864|0);
    HEAP32[$116>>2] = 0;
    $117 = ($i$45|0)>(0);
    if ($117) {
     $i$45$in = $i$45;
    } else {
     break;
    }
   }
  }
  _stbi__err(12832);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stbi__build_huffman($h,$count) {
 $h = $h|0;
 $count = $count|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code$012 = 0, $code$1$lcssa = 0, $code$16 = 0, $code$2 = 0, $exitcond = 0, $exitcond26 = 0, $i$022 = 0;
 var $i$13 = 0, $j$017 = 0, $j$113 = 0, $k$021 = 0, $k$1$lcssa = 0, $k$116 = 0, $k$211 = 0, $k$3$lcssa = 0, $k$35 = 0, $k$4 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$022 = 0;$k$021 = 0;
 while(1) {
  $1 = (($count) + ($i$022<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)>(0);
  $0 = (($i$022) + 1)|0;
  if ($3) {
   $4 = $0&255;
   $j$017 = 0;$k$116 = $k$021;
   while(1) {
    $5 = (($k$116) + 1)|0;
    $6 = ((($h) + ($k$116)|0) + 1280|0);
    HEAP8[$6>>0] = $4;
    $7 = (($j$017) + 1)|0;
    $8 = HEAP32[$1>>2]|0;
    $9 = ($7|0)<($8|0);
    if ($9) {
     $j$017 = $7;$k$116 = $5;
    } else {
     $k$1$lcssa = $5;
     break;
    }
   }
  } else {
   $k$1$lcssa = $k$021;
  }
  $exitcond26 = ($0|0)==(16);
  if ($exitcond26) {
   break;
  } else {
   $i$022 = $0;$k$021 = $k$1$lcssa;
  }
 }
 $10 = ((($h) + ($k$1$lcssa)|0) + 1280|0);
 HEAP8[$10>>0] = 0;
 $code$012 = 0;$j$113 = 1;$k$211 = 0;
 while(1) {
  $11 = (($k$211) - ($code$012))|0;
  $12 = ((($h) + ($j$113<<2)|0) + 1612|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($h) + ($k$211)|0) + 1280|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==($j$113|0);
  if ($16) {
   $17 = ((($h) + ($k$211)|0) + 1280|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = ($19|0)==($j$113|0);
   if ($20) {
    $code$16 = $code$012;$k$35 = $k$211;
    while(1) {
     $21 = (($code$16) + 1)|0;
     $22 = $code$16&65535;
     $23 = (($k$35) + 1)|0;
     $24 = ((($h) + ($k$35<<1)|0) + 512|0);
     HEAP16[$24>>1] = $22;
     $25 = ((($h) + ($23)|0) + 1280|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = ($27|0)==($j$113|0);
     if ($28) {
      $code$16 = $21;$k$35 = $23;
     } else {
      $code$1$lcssa = $21;$k$3$lcssa = $23;
      break;
     }
    }
   } else {
    $code$1$lcssa = $code$012;$k$3$lcssa = $k$211;
   }
   $29 = 1 << $j$113;
   $30 = ($code$1$lcssa|0)>($29|0);
   if ($30) {
    label = 11;
    break;
   } else {
    $code$2 = $code$1$lcssa;$k$4 = $k$3$lcssa;
   }
  } else {
   $code$2 = $code$012;$k$4 = $k$211;
  }
  $31 = (16 - ($j$113))|0;
  $32 = $code$2 << $31;
  $33 = ((($h) + ($j$113<<2)|0) + 1540|0);
  HEAP32[$33>>2] = $32;
  $34 = $code$2 << 1;
  $35 = (($j$113) + 1)|0;
  $36 = ($35|0)<(17);
  if ($36) {
   $code$012 = $34;$j$113 = $35;$k$211 = $k$4;
  } else {
   break;
  }
 }
 if ((label|0) == 11) {
  _stbi__err(13680);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = ((($h) + ($35<<2)|0) + 1540|0);
 HEAP32[$37>>2] = -1;
 _memset(($h|0),-1,512)|0;
 $38 = ($k$4|0)>(0);
 if ($38) {
  $i$13 = 0;
 } else {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $39 = ((($h) + ($i$13)|0) + 1280|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40&255)<(10);
  if ($41) {
   $42 = $40&255;
   $43 = (9 - ($42))|0;
   $44 = 1 << $43;
   $45 = ($44|0)>(0);
   if ($45) {
    $46 = ((($h) + ($i$13<<1)|0) + 512|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47&65535;
    $49 = $48 << $43;
    $50 = $i$13&255;
    $scevgep = (($h) + ($49)|0);
    _memset(($scevgep|0),($50|0),($44|0))|0;
   }
  }
  $51 = (($i$13) + 1)|0;
  $exitcond = ($51|0)==($k$4|0);
  if ($exitcond) {
   $$0 = 1;
   break;
  } else {
   $i$13 = $51;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _stbi__build_fast_ac($fast_ac,$h) {
 $fast_ac = $fast_ac|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $k$0 = 0, $k$0$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$02 = 0;
 while(1) {
  $0 = (($h) + ($i$02)|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = (($fast_ac) + ($i$02<<1)|0);
  HEAP16[$2>>1] = 0;
  $3 = $1&255;
  $4 = ($1<<24>>24)==(-1);
  if (!($4)) {
   $5 = ((($h) + ($3)|0) + 1024|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $8 = $7 & 240;
   $9 = $7 & 15;
   $10 = ((($h) + ($3)|0) + 1280|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = ($9|0)==(0);
   if (!($13)) {
    $14 = (($12) + ($9))|0;
    $15 = ($14|0)<(10);
    if ($15) {
     $16 = $i$02 << $12;
     $17 = $16 & 511;
     $18 = (9 - ($9))|0;
     $19 = $17 >>> $18;
     $20 = (($9) + -1)|0;
     $21 = 1 << $20;
     $22 = ($19|0)<($21|0);
     if ($22) {
      $23 = -1 << $9;
      $24 = (($23) + 1)|0;
      $25 = (($24) + ($19))|0;
      $k$0 = $25;
     } else {
      $k$0 = $19;
     }
     $k$0$off = (($k$0) + 128)|0;
     $26 = ($k$0$off>>>0)<(256);
     if ($26) {
      $27 = $k$0 << 8;
      $28 = $27 | $8;
      $29 = (($28) + ($14))|0;
      $30 = $29&65535;
      HEAP16[$2>>1] = $30;
     }
    }
   }
  }
  $31 = (($i$02) + 1)|0;
  $exitcond = ($31|0)==(512);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $31;
  }
 }
 STACKTOP = sp;return;
}
function _stbi__parse_zlib($a,$parse_header) {
 $a = $a|0;
 $parse_header = $parse_header|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($parse_header|0)==(0);
 if ($0) {
  label = 3;
 } else {
  $1 = (_stbi__parse_zlib_header($a)|0);
  $2 = ($1|0)==(0);
  if ($2) {
   $$0 = 0;
  } else {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $3 = (($a) + 8|0);
   HEAP32[$3>>2] = 0;
   $4 = (($a) + 12|0);
   HEAP32[$4>>2] = 0;
   $5 = (($a) + 2052|0);
   $6 = (($a) + 32|0);
   while(1) {
    $7 = (_stbi__zreceive($a,1)|0);
    $8 = (_stbi__zreceive($a,2)|0);
    if ((($8|0) == 3)) {
     $$0 = 0;
     break L3;
    } else if ((($8|0) == 1)) {
     $11 = HEAP8[((13704 + 31|0))>>0]|0;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      _stbi__init_zdefaults();
     }
     $13 = (_stbi__zbuild_huffman($6,13736,288)|0);
     $14 = ($13|0)==(0);
     if ($14) {
      $$0 = 0;
      break L3;
     }
     $15 = (_stbi__zbuild_huffman($5,13704,32)|0);
     $16 = ($15|0)==(0);
     if ($16) {
      $$0 = 0;
      break L3;
     } else {
      label = 11;
     }
    } else if ((($8|0) == 0)) {
     $9 = (_stbi__parse_uncomperssed_block($a)|0);
     $10 = ($9|0)==(0);
     if ($10) {
      $$0 = 0;
      break L3;
     }
    } else {
     $17 = (_stbi__compute_huffman_codes($a)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      $$0 = 0;
      break L3;
     } else {
      label = 11;
     }
    }
    if ((label|0) == 11) {
     label = 0;
     $19 = (_stbi__parse_huffman_block($a)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $$0 = 0;
      break L3;
     }
    }
    $21 = ($7|0)==(0);
    if (!($21)) {
     $$0 = 1;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _stbi__parse_zlib_header($a) {
 $a = $a|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__zget8($a)|0);
 $1 = $0&255;
 $2 = $1 & 15;
 $3 = (_stbi__zget8($a)|0);
 $4 = $3&255;
 $5 = $1 << 8;
 $6 = $5 | $4;
 $7 = (($6>>>0) % 31)&-1;
 $8 = ($7|0)==(0);
 do {
  if ($8) {
   $9 = $4 & 32;
   $10 = ($9|0)==(0);
   if (!($10)) {
    _stbi__err(15008);
    $$0 = 0;
    break;
   }
   $11 = ($2|0)==(8);
   if ($11) {
    $$0 = 1;
   } else {
    _stbi__err(15024);
    $$0 = 0;
   }
  } else {
   _stbi__err(14992);
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _stbi__zreceive($z,$n) {
 $z = $z|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($z) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($n|0);
 if ($2) {
  _stbi__fill_bits($z);
 }
 $3 = (($z) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = 1 << $n;
 $6 = (($5) + -1)|0;
 $7 = $4 & $6;
 $8 = $4 >>> $n;
 HEAP32[$3>>2] = $8;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) - ($n))|0;
 HEAP32[$0>>2] = $10;
 STACKTOP = sp;return ($7|0);
}
function _stbi__parse_uncomperssed_block($a) {
 $a = $a|0;
 var $$0 = 0, $$lcssa = 0, $$ph = 0, $$pr = 0, $$promoted = 0, $$promoted7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $header = 0, $k$0$lcssa = 0, $k$03 = 0, $k$11 = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $header = sp;
 $0 = (($a) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 7;
 $3 = ($2|0)==(0);
 if ($3) {
  $$ph = $1;
 } else {
  (_stbi__zreceive($a,$2)|0);
  $$pr = HEAP32[$0>>2]|0;
  $$ph = $$pr;
 }
 $4 = ($$ph|0)>(0);
 if ($4) {
  $5 = (($a) + 12|0);
  $$promoted = HEAP32[$5>>2]|0;
  $$promoted7 = HEAP32[$0>>2]|0;
  $6 = (($$promoted7) + -8)|0;
  $7 = (7 - ($$promoted7))|0;
  $8 = ($7|0)>(-1);
  $smax = $8 ? $7 : -1;
  $9 = (($$promoted7) + ($smax))|0;
  $10 = $9 >>> 3;
  $11 = $10 << 3;
  $12 = (($6) - ($11))|0;
  $14 = $$promoted;$19 = $$promoted7;$k$03 = 0;
  while(1) {
   $13 = $14&255;
   $15 = (($k$03) + 1)|0;
   $16 = (($header) + ($k$03)|0);
   HEAP8[$16>>0] = $13;
   $17 = $14 >>> 8;
   $18 = (($19) + -8)|0;
   $20 = ($18|0)>(0);
   if ($20) {
    $14 = $17;$19 = $18;$k$03 = $15;
   } else {
    break;
   }
  }
  $21 = (($10) + 1)|0;
  HEAP32[$5>>2] = $17;
  HEAP32[$0>>2] = $12;
  $$lcssa = $12;$k$0$lcssa = $21;
 } else {
  $$lcssa = $$ph;$k$0$lcssa = 0;
 }
 $22 = ($$lcssa|0)==(0);
 if (!($22)) {
  ___assert_fail((14896|0),(12928|0),3627,(14920|0));
  // unreachable;
 }
 $23 = ($k$0$lcssa|0)<(4);
 if ($23) {
  $k$11 = $k$0$lcssa;
  while(1) {
   $24 = (_stbi__zget8($a)|0);
   $25 = (($k$11) + 1)|0;
   $26 = (($header) + ($k$11)|0);
   HEAP8[$26>>0] = $24;
   $exitcond = ($25|0)==(4);
   if ($exitcond) {
    break;
   } else {
    $k$11 = $25;
   }
  }
 }
 $27 = (($header) + 1|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 8;
 $31 = HEAP8[$header>>0]|0;
 $32 = $31&255;
 $33 = $30 | $32;
 $34 = (($header) + 3|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 << 8;
 $38 = (($header) + 2|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $37 | $40;
 $42 = $33 ^ 65535;
 $43 = ($41|0)==($42|0);
 if (!($43)) {
  _stbi__err(14952);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = HEAP32[$a>>2]|0;
 $45 = (($44) + ($33)|0);
 $46 = (($a) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($45>>>0)>($47>>>0);
 if ($48) {
  _stbi__err(14968);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (($a) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + ($33)|0);
 $52 = (($a) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($51>>>0)>($53>>>0);
 if ($54) {
  $55 = (_stbi__zexpand($a,$50,$33)|0);
  $56 = ($55|0)==(0);
  if ($56) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $57 = HEAP32[$49>>2]|0;
 $58 = HEAP32[$a>>2]|0;
 _memcpy(($57|0),($58|0),($33|0))|0;
 $59 = HEAP32[$a>>2]|0;
 $60 = (($59) + ($33)|0);
 HEAP32[$a>>2] = $60;
 $61 = HEAP32[$49>>2]|0;
 $62 = (($61) + ($33)|0);
 HEAP32[$49>>2] = $62;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__init_zdefaults() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 _memset((13736|0),8,144)|0;
 dest=((13736 + 144|0))+0|0; stop=dest+112|0; do { HEAP8[dest>>0]=9|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=((13736 + 256|0))+0|0; stop=dest+24|0; do { HEAP8[dest>>0]=7|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $0 = ((13736 + 280|0));
 $1 = $0;
 HEAP8[$1>>0]=134744072&255;HEAP8[$1+1>>0]=(134744072>>8)&255;HEAP8[$1+2>>0]=(134744072>>16)&255;HEAP8[$1+3>>0]=134744072>>24;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP8[$3>>0]=134744072&255;HEAP8[$3+1>>0]=(134744072>>8)&255;HEAP8[$3+2>>0]=(134744072>>16)&255;HEAP8[$3+3>>0]=134744072>>24;
 dest=13704+0|0; stop=dest+32|0; do { HEAP8[dest>>0]=5|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _stbi__zbuild_huffman($z,$sizelist,$num) {
 $z = $z|0;
 $sizelist = $sizelist|0;
 $num = $num|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $code$06 = 0, $exitcond = 0, $exitcond12 = 0, $i$010 = 0, $i$19 = 0, $i$28 = 0, $i$34 = 0, $k$07 = 0, $k1$02 = 0, $next_code = 0, $or$cond = 0, $sizes = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $next_code = sp + 72|0;
 $sizes = sp;
 dest=$sizes+0|0; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _memset(($z|0),0,1024)|0;
 $0 = ($num|0)>(0);
 if ($0) {
  $i$010 = 0;
  while(1) {
   $1 = (($sizelist) + ($i$010)|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = $2&255;
   $4 = (($sizes) + ($3<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + 1)|0;
   HEAP32[$4>>2] = $6;
   $7 = (($i$010) + 1)|0;
   $exitcond12 = ($7|0)==($num|0);
   if ($exitcond12) {
    break;
   } else {
    $i$010 = $7;
   }
  }
 }
 HEAP32[$sizes>>2] = 0;
 $i$19 = 1;
 while(1) {
  $10 = (($sizes) + ($i$19<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = 1 << $i$19;
  $13 = ($11|0)>($12|0);
  $9 = (($i$19) + 1)|0;
  if ($13) {
   label = 6;
   break;
  }
  $8 = ($9|0)<(16);
  if ($8) {
   $i$19 = $9;
  } else {
   $code$06 = 0;$i$28 = 1;$k$07 = 0;
   break;
  }
 }
 if ((label|0) == 6) {
  ___assert_fail((14848|0),(12928|0),3383,(14872|0));
  // unreachable;
 }
 while(1) {
  $14 = (($next_code) + ($i$28<<2)|0);
  HEAP32[$14>>2] = $code$06;
  $15 = $code$06&65535;
  $16 = ((($z) + ($i$28<<1)|0) + 1024|0);
  HEAP16[$16>>1] = $15;
  $17 = $k$07&65535;
  $18 = ((($z) + ($i$28<<1)|0) + 1124|0);
  HEAP16[$18>>1] = $17;
  $19 = (($sizes) + ($i$28<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($code$06))|0;
  $22 = ($20|0)!=(0);
  $23 = 1 << $i$28;
  $24 = ($21|0)>($23|0);
  $or$cond = $22 & $24;
  if ($or$cond) {
   label = 8;
   break;
  }
  $25 = (16 - ($i$28))|0;
  $26 = $21 << $25;
  $27 = ((($z) + ($i$28<<2)|0) + 1056|0);
  HEAP32[$27>>2] = $26;
  $28 = $21 << 1;
  $29 = HEAP32[$19>>2]|0;
  $30 = (($29) + ($k$07))|0;
  $31 = (($i$28) + 1)|0;
  $32 = ($31|0)<(16);
  if ($32) {
   $code$06 = $28;$i$28 = $31;$k$07 = $30;
  } else {
   break;
  }
 }
 if ((label|0) == 8) {
  _stbi__err(14832);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = (($z) + 1120|0);
 HEAP32[$33>>2] = 65536;
 $34 = ($num|0)>(0);
 if ($34) {
  $i$34 = 0;
 } else {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $35 = (($sizelist) + ($i$34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = ($36<<24>>24)==(0);
  if (!($38)) {
   $39 = (($next_code) + ($37<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($z) + ($37<<1)|0) + 1024|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $42&65535;
   $44 = (($40) - ($43))|0;
   $45 = ((($z) + ($37<<1)|0) + 1124|0);
   $46 = HEAP16[$45>>1]|0;
   $47 = $46&65535;
   $48 = (($44) + ($47))|0;
   $49 = $37 << 9;
   $50 = $49 | $i$34;
   $51 = $50&65535;
   $52 = ((($z) + ($48)|0) + 1156|0);
   HEAP8[$52>>0] = $36;
   $53 = $i$34&65535;
   $54 = ((($z) + ($48<<1)|0) + 1444|0);
   HEAP16[$54>>1] = $53;
   $55 = ($36&255)<(10);
   if ($55) {
    $56 = HEAP32[$39>>2]|0;
    $57 = (_stbi__bit_reverse($56,$37)|0);
    $58 = ($57|0)<(512);
    if ($58) {
     $59 = 1 << $37;
     $k1$02 = $57;
     while(1) {
      $60 = (($z) + ($k1$02<<1)|0);
      HEAP16[$60>>1] = $51;
      $61 = (($k1$02) + ($59))|0;
      $62 = ($61|0)<(512);
      if ($62) {
       $k1$02 = $61;
      } else {
       break;
      }
     }
    }
   }
   $63 = HEAP32[$39>>2]|0;
   $64 = (($63) + 1)|0;
   HEAP32[$39>>2] = $64;
  }
  $65 = (($i$34) + 1)|0;
  $exitcond = ($65|0)==($num|0);
  if ($exitcond) {
   $$0 = 1;
   break;
  } else {
   $i$34 = $65;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _stbi__compute_huffman_codes($a) {
 $a = $a|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $codelength_sizes = 0, $exitcond = 0, $i$08 = 0, $lencodes = 0, $n$0$be = 0, $n$0$lcssa = 0, $n$06 = 0, $not$ = 0, $z_codelength = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $z_codelength = sp;
 $lencodes = sp + 2039|0;
 $codelength_sizes = sp + 2020|0;
 $0 = (_stbi__zreceive($a,5)|0);
 $1 = (($0) + 257)|0;
 $2 = (_stbi__zreceive($a,5)|0);
 $3 = (($2) + 1)|0;
 $4 = (_stbi__zreceive($a,4)|0);
 $5 = (($4) + 4)|0;
 dest=$codelength_sizes+0|0; stop=dest+19|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $6 = ($5|0)>(0);
 if ($6) {
  $i$08 = 0;
  while(1) {
   $7 = (_stbi__zreceive($a,3)|0);
   $8 = $7&255;
   $9 = (14744 + ($i$08)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = (($codelength_sizes) + ($11)|0);
   HEAP8[$12>>0] = $8;
   $13 = (($i$08) + 1)|0;
   $14 = (($4) + 3)|0;
   $exitcond = ($i$08|0)==($14|0);
   if ($exitcond) {
    break;
   } else {
    $i$08 = $13;
   }
  }
 }
 $15 = (_stbi__zbuild_huffman($z_codelength,$codelength_sizes,19)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (($3) + ($1))|0;
 $18 = ($17|0)>(0);
 L8: do {
  if ($18) {
   $n$06 = 0;
   L9: while(1) {
    $19 = (_stbi__zhuffman_decode($a,$z_codelength)|0);
    $20 = ($19>>>0)<(19);
    if (!($20)) {
     label = 6;
     break;
    }
    $21 = ($19|0)<(16);
    do {
     if ($21) {
      $22 = $19&255;
      $23 = (($n$06) + 1)|0;
      $24 = (($lencodes) + ($n$06)|0);
      HEAP8[$24>>0] = $22;
      $n$0$be = $23;
     } else {
      if ((($19|0) == 17)) {
       $33 = (_stbi__zreceive($a,3)|0);
       $34 = (($33) + 3)|0;
       $35 = (($lencodes) + ($n$06)|0);
       _memset(($35|0),0,($34|0))|0;
       $36 = (($34) + ($n$06))|0;
       $n$0$be = $36;
       break;
      } else if ((($19|0) == 18)) {
       $37 = (_stbi__zreceive($a,7)|0);
       $38 = (($37) + 11)|0;
       $39 = (($lencodes) + ($n$06)|0);
       _memset(($39|0),0,($38|0))|0;
       $40 = (($38) + ($n$06))|0;
       $n$0$be = $40;
       break;
      } else if ((($19|0) == 16)) {
       $25 = (_stbi__zreceive($a,2)|0);
       $26 = (($25) + 3)|0;
       $27 = (($lencodes) + ($n$06)|0);
       $28 = (($n$06) + -1)|0;
       $29 = (($lencodes) + ($28)|0);
       $30 = HEAP8[$29>>0]|0;
       _memset(($27|0),($30|0),($26|0))|0;
       $31 = (($26) + ($n$06))|0;
       $n$0$be = $31;
       break;
      } else {
       label = 13;
       break L9;
      }
     }
    } while(0);
    $32 = ($n$0$be|0)<($17|0);
    if ($32) {
     $n$06 = $n$0$be;
    } else {
     $n$0$lcssa = $n$0$be;
     break L8;
    }
   }
   if ((label|0) == 6) {
    ___assert_fail((14768|0),(12928|0),3590,(14792|0));
    // unreachable;
   }
   else if ((label|0) == 13) {
    ___assert_fail((14824|0),(12928|0),3602,(14792|0));
    // unreachable;
   }
  } else {
   $n$0$lcssa = 0;
  }
 } while(0);
 $41 = ($n$0$lcssa|0)==($17|0);
 if (!($41)) {
  _stbi__err(14832);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = (($a) + 32|0);
 $43 = (_stbi__zbuild_huffman($42,$lencodes,$1)|0);
 $44 = ($43|0)==(0);
 if ($44) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = (($a) + 2052|0);
 $46 = (($lencodes) + ($1)|0);
 $47 = (_stbi__zbuild_huffman($45,$46,$3)|0);
 $not$ = ($47|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__parse_huffman_block($a) {
 $a = $a|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dist$0 = 0, $len$0 = 0;
 var $len$2 = 0, $p$0 = 0, $scevgep = 0, $scevgep8 = 0, $zout$0 = 0, $zout$1 = 0, $zout$2 = 0, $zout$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($a) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($a) + 32|0);
 $3 = (($a) + 24|0);
 $4 = (($a) + 2052|0);
 $5 = (($a) + 20|0);
 $6 = (($a) + 24|0);
 $zout$0 = $1;
 while(1) {
  $9 = (_stbi__zhuffman_decode($a,$2)|0);
  $10 = ($9|0)<(256);
  if ($10) {
   $11 = ($9|0)<(0);
   if ($11) {
    label = 6;
    break;
   }
   $12 = HEAP32[$3>>2]|0;
   $13 = ($zout$0>>>0)<($12>>>0);
   if ($13) {
    $zout$1 = $zout$0;
   } else {
    $14 = (_stbi__zexpand($a,$zout$0,1)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$0 = 0;
     label = 26;
     break;
    }
    $16 = HEAP32[$0>>2]|0;
    $zout$1 = $16;
   }
   $17 = $9&255;
   $18 = (($zout$1) + 1|0);
   HEAP8[$zout$1>>0] = $17;
   $zout$0 = $18;
   continue;
  }
  $19 = ($9|0)==(256);
  if ($19) {
   label = 12;
   break;
  }
  $20 = (($9) + -257)|0;
  $21 = (14048 + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($9) + -265)|0;
  $24 = ($23>>>0)<(20);
  if ($24) {
   $25 = (14176 + ($20<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_stbi__zreceive($a,$26)|0);
   $28 = (($27) + ($22))|0;
   $len$0 = $28;
  } else {
   $len$0 = $22;
  }
  $29 = (_stbi__zhuffman_decode($a,$4)|0);
  $30 = ($29|0)<(0);
  if ($30) {
   label = 16;
   break;
  }
  $31 = (14304 + ($29<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + -4)|0;
  $34 = ($33>>>0)<(26);
  if ($34) {
   $35 = (14432 + ($29<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_stbi__zreceive($a,$36)|0);
   $38 = (($37) + ($32))|0;
   $dist$0 = $38;
  } else {
   $dist$0 = $32;
  }
  $39 = HEAP32[$5>>2]|0;
  $40 = $zout$0;
  $41 = $39;
  $42 = (($40) - ($41))|0;
  $43 = ($42|0)<($dist$0|0);
  if ($43) {
   label = 20;
   break;
  }
  $44 = (($zout$0) + ($len$0)|0);
  $45 = HEAP32[$6>>2]|0;
  $46 = ($44>>>0)>($45>>>0);
  if ($46) {
   $47 = (_stbi__zexpand($a,$zout$0,$len$0)|0);
   $48 = ($47|0)==(0);
   if ($48) {
    $$0 = 0;
    label = 26;
    break;
   }
   $49 = HEAP32[$0>>2]|0;
   $zout$2 = $49;
  } else {
   $zout$2 = $zout$0;
  }
  $50 = (0 - ($dist$0))|0;
  $8 = (($zout$2) + ($50)|0);
  $51 = ($dist$0|0)==(1);
  if ($51) {
   $7 = HEAP8[$8>>0]|0;
   _memset(($zout$2|0),($7|0),($len$0|0))|0;
   $scevgep8 = (($zout$2) + ($len$0)|0);
   $zout$0 = $scevgep8;
   continue;
  } else {
   $len$2 = $len$0;$p$0 = $8;$zout$4 = $zout$2;
  }
  while(1) {
   $52 = (($p$0) + 1|0);
   $53 = HEAP8[$p$0>>0]|0;
   $54 = (($zout$4) + 1|0);
   HEAP8[$zout$4>>0] = $53;
   $55 = (($len$2) + -1)|0;
   $56 = ($55|0)==(0);
   if ($56) {
    break;
   } else {
    $len$2 = $55;$p$0 = $52;$zout$4 = $54;
   }
  }
  $scevgep = (($zout$2) + ($len$0)|0);
  $zout$0 = $scevgep;
 }
 if ((label|0) == 6) {
  _stbi__err(14024);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 12) {
  HEAP32[$0>>2] = $zout$0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 16) {
  _stbi__err(14024);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 20) {
  _stbi__err(14560);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stbi__zhuffman_decode($a,$z) {
 $a = $a|0;
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($a) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(16);
 if ($2) {
  _stbi__fill_bits($a);
 }
 $3 = (($a) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 511;
 $6 = (($z) + ($5<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ($7<<16>>16)==(0);
 if ($9) {
  $15 = (_stbi__zhuffman_decode_slowpath($a,$z)|0);
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 } else {
  $10 = $8 >>> 9;
  $11 = $4 >>> $10;
  HEAP32[$3>>2] = $11;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) - ($10))|0;
  HEAP32[$0>>2] = $13;
  $14 = $8 & 511;
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stbi__zexpand($z,$zout,$n) {
 $z = $z|0;
 $zout = $zout|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $limit$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($z) + 16|0);
 HEAP32[$0>>2] = $zout;
 $1 = (($z) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  _stbi__err(14576);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($z) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $zout;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = (($z) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10;
 $12 = (($11) - ($7))|0;
 $13 = (($8) + ($n))|0;
 $limit$0 = $12;
 while(1) {
  $14 = ($13|0)>($limit$0|0);
  $15 = $limit$0 << 1;
  if ($14) {
   $limit$0 = $15;
  } else {
   break;
  }
 }
 $16 = HEAP32[$4>>2]|0;
 $17 = (_realloc($16,$limit$0)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  _stbi__err(12832);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$4>>2] = $17;
  $19 = (($17) + ($8)|0);
  HEAP32[$0>>2] = $19;
  $20 = (($17) + ($limit$0)|0);
  HEAP32[$9>>2] = $20;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stbi__fill_bits($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($z) + 12|0);
 $1 = (($z) + 8|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = 1 << $3;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   label = 3;
   break;
  }
  $6 = (_stbi__zget8($z)|0);
  $7 = $6&255;
  $8 = HEAP32[$1>>2]|0;
  $9 = $7 << $8;
  $10 = HEAP32[$0>>2]|0;
  $11 = $10 | $9;
  HEAP32[$0>>2] = $11;
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + 8)|0;
  HEAP32[$1>>2] = $13;
  $14 = ($13|0)<(25);
  if (!($14)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  ___assert_fail((14688|0),(12928|0),3446,(14728|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function _stbi__zhuffman_decode_slowpath($a,$z) {
 $a = $a|0;
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($a) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_stbi__bit_reverse($1,16)|0);
 $s$0 = 10;
 while(1) {
  $3 = ((($z) + ($s$0<<2)|0) + 1056|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  $6 = (($s$0) + 1)|0;
  if ($5) {
   break;
  } else {
   $s$0 = $6;
  }
 }
 $7 = ($s$0|0)==(16);
 if ($7) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (16 - ($s$0))|0;
 $9 = $2 >> $8;
 $10 = ((($z) + ($s$0<<1)|0) + 1024|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($9) - ($12))|0;
 $14 = ((($z) + ($s$0<<1)|0) + 1124|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = (($13) + ($16))|0;
 $18 = ((($z) + ($17)|0) + 1156|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($20|0)==($s$0|0);
 if (!($21)) {
  ___assert_fail((14600|0),(12928|0),3474,(14616|0));
  // unreachable;
 }
 $22 = HEAP32[$0>>2]|0;
 $23 = $22 >>> $s$0;
 HEAP32[$0>>2] = $23;
 $24 = (($a) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) - ($s$0))|0;
 HEAP32[$24>>2] = $26;
 $27 = ((($z) + ($17<<1)|0) + 1444|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $$0 = $29;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__bit_reverse($v,$bits) {
 $v = $v|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits|0)<(17);
 if ($0) {
  $1 = (_stbi__bitreverse16($v)|0);
  $2 = (16 - ($bits))|0;
  $3 = $1 >> $2;
  STACKTOP = sp;return ($3|0);
 } else {
  ___assert_fail((14648|0),(12928|0),3365,(14664|0));
  // unreachable;
 }
 return 0|0;
}
function _stbi__bitreverse16($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $n >>> 1;
 $1 = $0 & 21845;
 $2 = $n << 1;
 $3 = $2 & 43690;
 $4 = $1 | $3;
 $5 = $4 >>> 2;
 $6 = $5 & 13107;
 $7 = $4 << 2;
 $8 = $7 & 52428;
 $9 = $6 | $8;
 $10 = $9 >>> 4;
 $11 = $10 & 3855;
 $12 = $9 << 4;
 $13 = $12 & 61680;
 $14 = $11 | $13;
 $15 = $14 >>> 8;
 $16 = $14 << 8;
 $17 = $16 & 65280;
 $18 = $17 | $15;
 STACKTOP = sp;return ($18|0);
}
function _stbi__zget8($z) {
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$z>>2]|0;
 $1 = (($z) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)<($2>>>0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($0) + 1|0);
 HEAP32[$z>>2] = $4;
 $5 = HEAP8[$0>>0]|0;
 $$0 = $5;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__jpeg_test($s) {
 $s = $s|0;
 var $0 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $j = sp;
 HEAP32[$j>>2] = $s;
 _stbi__setup_jpeg($j);
 $0 = (_stbi__decode_jpeg_header($j,1)|0);
 _stbi__rewind($s);
 STACKTOP = sp;return ($0|0);
}
function _stbi__jpeg_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $j = sp;
 HEAP32[$j>>2] = $s;
 _stbi__setup_jpeg($j);
 $0 = (_load_jpeg_image($j,$x,$y,$comp,$req_comp)|0);
 STACKTOP = sp;return ($0|0);
}
function _stbi__png_test($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__check_png_header($s)|0);
 _stbi__rewind($s);
 STACKTOP = sp;return ($0|0);
}
function _stbi__png_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 HEAP32[$p>>2] = $s;
 $0 = (_stbi__do_png($p,$x,$y,$comp,$req_comp)|0);
 STACKTOP = sp;return ($0|0);
}
function _stbi__bmp_test($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__bmp_test_raw($s)|0);
 _stbi__rewind($s);
 STACKTOP = sp;return ($0|0);
}
function _stbi__bmp_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $$0 = 0, $$23 = 0, $$24 = 0, $$25 = 0, $$33 = 0, $$off = 0, $$sum = 0, $$sum20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $acount$0 = 0, $ashift$0 = 0, $bcount$0 = 0;
 var $bshift$0 = 0, $easy$034 = 0, $exitcond = 0, $gcount$0 = 0, $gshift$0 = 0, $i$149 = 0, $i$240 = 0, $i$360 = 0, $i$454 = 0, $i$536 = 0, $ispos = 0, $j$046 = 0, $j$165 = 0, $j$237 = 0, $ma$0 = 0, $ma$1 = 0, $mb$0 = 0, $mb$1 = 0, $mg$0 = 0, $mg$1 = 0;
 var $mr$0 = 0, $mr$1 = 0, $neg = 0, $or$cond = 0, $or$cond19 = 0, $or$cond26 = 0, $or$cond27 = 0, $or$cond28 = 0, $or$cond29 = 0, $or$cond30 = 0, $or$cond31 = 0, $or$cond32 = 0, $out$0 = 0, $pal = 0, $phitmp21 = 0, $psize$0 = 0, $rcount$0 = 0, $req_comp$ = 0, $rshift$0 = 0, $v$0 = 0;
 var $v2$0 = 0, $width$0 = 0, $width$1$ph = 0, $z$047 = 0, $z$141 = 0, $z$2 = 0, $z$3 = 0, $z$4 = 0, $z1$066 = 0, $z1$161 = 0, $z1$2 = 0, $z1$355 = 0, $z1$4 = 0, $z1$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pal = sp;
 $0 = (_stbi__get8($s)|0);
 $1 = ($0<<24>>24)==(66);
 if ($1) {
  $2 = (_stbi__get8($s)|0);
  $3 = ($2<<24>>24)==(77);
  if ($3) {
   (_stbi__get32le($s)|0);
   (_stbi__get16le($s)|0);
   (_stbi__get16le($s)|0);
   $4 = (_stbi__get32le($s)|0);
   $5 = (_stbi__get32le($s)|0);
   $6 = ($5|0)==(12);
   switch ($5|0) {
   case 12: case 40: case 56: case 108: case 124:  {
    break;
   }
   default: {
    _stbi__err(15392);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   }
   $7 = ($5|0)==(12);
   if ($7) {
    $8 = (_stbi__get16le($s)|0);
    HEAP32[$s>>2] = $8;
    $9 = (_stbi__get16le($s)|0);
    $10 = (($s) + 4|0);
    HEAP32[$10>>2] = $9;
   } else {
    $11 = (_stbi__get32le($s)|0);
    HEAP32[$s>>2] = $11;
    $12 = (_stbi__get32le($s)|0);
    $13 = (($s) + 4|0);
    HEAP32[$13>>2] = $12;
   }
   $14 = (_stbi__get16le($s)|0);
   $15 = ($14|0)==(1);
   if (!($15)) {
    _stbi__err(15408);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $16 = (_stbi__get16le($s)|0);
   $17 = ($16|0)==(1);
   if ($17) {
    _stbi__err(15416);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $18 = (($s) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)>(0);
   $ispos = ($19|0)>(-1);
   $neg = (0 - ($19))|0;
   $21 = $ispos ? $19 : $neg;
   HEAP32[$18>>2] = $21;
   if ($7) {
    $22 = ($16|0)<(24);
    if ($22) {
     $23 = (($4) + -38)|0;
     $24 = (($23|0) / 3)&-1;
     $ma$1 = 0;$mb$1 = 0;$mg$1 = 0;$mr$1 = 0;$psize$0 = $24;
    } else {
     $ma$1 = 0;$mb$1 = 0;$mg$1 = 0;$mr$1 = 0;$psize$0 = 0;
    }
   } else {
    $25 = (_stbi__get32le($s)|0);
    $$off = (($25) + -1)|0;
    $26 = ($$off>>>0)<(2);
    if ($26) {
     _stbi__err(15432);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    (_stbi__get32le($s)|0);
    (_stbi__get32le($s)|0);
    (_stbi__get32le($s)|0);
    (_stbi__get32le($s)|0);
    (_stbi__get32le($s)|0);
    $27 = $5 & -17;
    do {
     if ((($27|0) == 40)) {
      $28 = ($5|0)==(56);
      if ($28) {
       (_stbi__get32le($s)|0);
       (_stbi__get32le($s)|0);
       (_stbi__get32le($s)|0);
       (_stbi__get32le($s)|0);
      }
      $29 = ($16|0)==(32);
      if ((($16|0) == 16) | (($16|0) == 32)) {
       if ((($25|0) == 3)) {
        $30 = (_stbi__get32le($s)|0);
        $31 = (_stbi__get32le($s)|0);
        $32 = (_stbi__get32le($s)|0);
        $33 = ($30|0)==($31|0);
        $34 = ($31|0)==($32|0);
        $or$cond = $33 & $34;
        if (!($or$cond)) {
         $ma$0 = 0;$mb$0 = $32;$mg$0 = $31;$mr$0 = $30;
         break;
        }
        _stbi__err(15408);
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       } else if ((($25|0) == 0)) {
        $$ = $29 ? -16777216 : 0;
        $$23 = $29 ? 255 : 31;
        $$24 = $29 ? 65280 : 992;
        $$25 = $29 ? 16711680 : 31744;
        $ma$0 = $$;$mb$0 = $$23;$mg$0 = $$24;$mr$0 = $$25;
        break;
       } else {
        _stbi__err(15408);
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
      } else {
       $ma$0 = 0;$mb$0 = 0;$mg$0 = 0;$mr$0 = 0;
      }
     } else if ((($27|0) == 108)) {
      $35 = ($5|0)==(124);
      $36 = (_stbi__get32le($s)|0);
      $37 = (_stbi__get32le($s)|0);
      $38 = (_stbi__get32le($s)|0);
      $39 = (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      if ($35) {
       (_stbi__get32le($s)|0);
       (_stbi__get32le($s)|0);
       (_stbi__get32le($s)|0);
       (_stbi__get32le($s)|0);
       $ma$0 = $39;$mb$0 = $38;$mg$0 = $37;$mr$0 = $36;
      } else {
       $ma$0 = $39;$mb$0 = $38;$mg$0 = $37;$mr$0 = $36;
      }
     } else {
      ___assert_fail((15440|0),(12928|0),4550,(15472|0));
      // unreachable;
     }
    } while(0);
    $40 = ($16|0)<(16);
    if ($40) {
     $41 = (($4) + -14)|0;
     $42 = (($41) - ($5))|0;
     $43 = $42 >> 2;
     $ma$1 = $ma$0;$mb$1 = $mb$0;$mg$1 = $mg$0;$mr$1 = $mr$0;$psize$0 = $43;
    } else {
     $ma$1 = $ma$0;$mb$1 = $mb$0;$mg$1 = $mg$0;$mr$1 = $mr$0;$psize$0 = 0;
    }
   }
   $44 = ($ma$1|0)!=(0);
   $45 = $44 ? 4 : 3;
   $46 = (($s) + 8|0);
   HEAP32[$46>>2] = $45;
   $47 = ($req_comp|0)==(0);
   $48 = ($req_comp|0)>(2);
   $req_comp$ = $48 ? $req_comp : $45;
   $49 = HEAP32[$s>>2]|0;
   $50 = Math_imul($49, $req_comp$)|0;
   $51 = HEAP32[$18>>2]|0;
   $52 = Math_imul($50, $51)|0;
   $53 = (_stbi__malloc($52)|0);
   $54 = ($53|0)==(0|0);
   if ($54) {
    _stbi__err(12832);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $55 = ($16|0)<(16);
   if ($55) {
    $56 = ($psize$0|0)==(0);
    $57 = ($psize$0|0)>(256);
    $or$cond19 = $56 | $57;
    if ($or$cond19) {
     _free($53);
     _stbi__err(15488);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $58 = ($psize$0|0)>(0);
    if ($58) {
     $i$149 = 0;
     while(1) {
      $59 = (_stbi__get8($s)|0);
      $60 = ((($pal) + ($i$149<<2)|0) + 2|0);
      HEAP8[$60>>0] = $59;
      $61 = (_stbi__get8($s)|0);
      $62 = ((($pal) + ($i$149<<2)|0) + 1|0);
      HEAP8[$62>>0] = $61;
      $63 = (_stbi__get8($s)|0);
      $64 = (($pal) + ($i$149<<2)|0);
      HEAP8[$64>>0] = $63;
      if (!($6)) {
       (_stbi__get8($s)|0);
      }
      $65 = ((($pal) + ($i$149<<2)|0) + 3|0);
      HEAP8[$65>>0] = -1;
      $66 = (($i$149) + 1)|0;
      $exitcond = ($66|0)==($psize$0|0);
      if ($exitcond) {
       break;
      } else {
       $i$149 = $66;
      }
     }
    }
    $67 = (($4) + -14)|0;
    $68 = (($67) - ($5))|0;
    $69 = $7 ? 3 : 4;
    $70 = Math_imul($psize$0, $69)|0;
    $71 = (($68) - ($70))|0;
    _stbi__skip($s,$71);
    $72 = ($16|0)==(4);
    do {
     if ($72) {
      $73 = HEAP32[$s>>2]|0;
      $74 = (($73) + 1)|0;
      $75 = $74 >>> 1;
      $width$0 = $75;
     } else {
      $76 = ($16|0)==(8);
      if ($76) {
       $77 = HEAP32[$s>>2]|0;
       $width$0 = $77;
       break;
      }
      _free($53);
      _stbi__err(15496);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $78 = (0 - ($width$0))|0;
    $79 = $78 & 3;
    $80 = HEAP32[$18>>2]|0;
    $81 = ($80|0)>(0);
    if ($81) {
     $82 = ($req_comp$|0)==(4);
     $83 = ($16|0)==(8);
     $j$046 = 0;$z$047 = 0;
     while(1) {
      $84 = HEAP32[$s>>2]|0;
      $85 = ($84|0)>(0);
      L75: do {
       if ($85) {
        $i$240 = 0;$z$141 = $z$047;
        while(1) {
         $86 = (_stbi__get8($s)|0);
         $87 = $86&255;
         if ($72) {
          $88 = $87 & 15;
          $89 = $87 >>> 4;
          $v$0 = $89;$v2$0 = $88;
         } else {
          $v$0 = $87;$v2$0 = 0;
         }
         $90 = (($pal) + ($v$0<<2)|0);
         $91 = HEAP8[$90>>0]|0;
         $92 = (($z$141) + 1)|0;
         $93 = (($53) + ($z$141)|0);
         HEAP8[$93>>0] = $91;
         $94 = ((($pal) + ($v$0<<2)|0) + 1|0);
         $95 = HEAP8[$94>>0]|0;
         $96 = (($z$141) + 2)|0;
         $97 = (($53) + ($92)|0);
         HEAP8[$97>>0] = $95;
         $98 = ((($pal) + ($v$0<<2)|0) + 2|0);
         $99 = HEAP8[$98>>0]|0;
         $100 = (($z$141) + 3)|0;
         $101 = (($53) + ($96)|0);
         HEAP8[$101>>0] = $99;
         if ($82) {
          $102 = (($z$141) + 4)|0;
          $103 = (($53) + ($100)|0);
          HEAP8[$103>>0] = -1;
          $z$2 = $102;
         } else {
          $z$2 = $100;
         }
         $104 = $i$240 | 1;
         $105 = HEAP32[$s>>2]|0;
         $106 = ($104|0)==($105|0);
         if ($106) {
          $z$4 = $z$2;
          break L75;
         }
         if ($83) {
          $107 = (_stbi__get8($s)|0);
          $108 = $107&255;
          $110 = $108;
         } else {
          $110 = $v2$0;
         }
         $109 = (($pal) + ($110<<2)|0);
         $111 = HEAP8[$109>>0]|0;
         $112 = (($z$2) + 1)|0;
         $113 = (($53) + ($z$2)|0);
         HEAP8[$113>>0] = $111;
         $114 = ((($pal) + ($110<<2)|0) + 1|0);
         $115 = HEAP8[$114>>0]|0;
         $116 = (($z$2) + 2)|0;
         $117 = (($53) + ($112)|0);
         HEAP8[$117>>0] = $115;
         $118 = ((($pal) + ($110<<2)|0) + 2|0);
         $119 = HEAP8[$118>>0]|0;
         $120 = (($z$2) + 3)|0;
         $121 = (($53) + ($116)|0);
         HEAP8[$121>>0] = $119;
         if ($82) {
          $122 = (($z$2) + 4)|0;
          $123 = (($53) + ($120)|0);
          HEAP8[$123>>0] = -1;
          $z$3 = $122;
         } else {
          $z$3 = $120;
         }
         $124 = (($i$240) + 2)|0;
         $125 = HEAP32[$s>>2]|0;
         $126 = ($124|0)<($125|0);
         if ($126) {
          $i$240 = $124;$z$141 = $z$3;
         } else {
          $z$4 = $z$3;
          break;
         }
        }
       } else {
        $z$4 = $z$047;
       }
      } while(0);
      _stbi__skip($s,$79);
      $127 = (($j$046) + 1)|0;
      $128 = HEAP32[$18>>2]|0;
      $129 = ($127|0)<($128|0);
      if ($129) {
       $j$046 = $127;$z$047 = $z$4;
      } else {
       break;
      }
     }
    }
   } else {
    $130 = (($4) + -14)|0;
    $131 = (($130) - ($5))|0;
    _stbi__skip($s,$131);
    if ((($16|0) == 16)) {
     $132 = HEAP32[$s>>2]|0;
     $133 = $132 << 1;
     $width$1$ph = $133;
     label = 63;
    } else if ((($16|0) == 24)) {
     $134 = HEAP32[$s>>2]|0;
     $135 = Math_imul($134, -3)|0;
     $136 = $135 & 3;
     $209 = $136;$247 = 1;$acount$0 = 0;$ashift$0 = 0;$bcount$0 = 0;$bshift$0 = 0;$easy$034 = 1;$gcount$0 = 0;$gshift$0 = 0;$rcount$0 = 0;$rshift$0 = 0;
    } else {
     $width$1$ph = 0;
     label = 63;
    }
    do {
     if ((label|0) == 63) {
      $137 = (0 - ($width$1$ph))|0;
      $138 = $137 & 2;
      $139 = ($16|0)==(32);
      $140 = ($mb$1|0)==(255);
      $or$cond26 = $139 & $140;
      $141 = ($mg$1|0)==(65280);
      $or$cond27 = $or$cond26 & $141;
      $142 = ($mr$1|0)==(16711680);
      $or$cond28 = $or$cond27 & $142;
      $143 = ($ma$1|0)==(-16777216);
      $or$cond29 = $or$cond28 & $143;
      $$33 = $or$cond29 ? 2 : 0;
      if ($or$cond29) {
       $209 = $138;$247 = 1;$acount$0 = 0;$ashift$0 = 0;$bcount$0 = 0;$bshift$0 = 0;$easy$034 = 2;$gcount$0 = 0;$gshift$0 = 0;$rcount$0 = 0;$rshift$0 = 0;
      } else {
       $144 = ($mr$1|0)==(0);
       $145 = ($mg$1|0)==(0);
       $or$cond30 = $144 | $145;
       $146 = ($mb$1|0)==(0);
       $or$cond31 = $or$cond30 | $146;
       if (!($or$cond31)) {
        $147 = (_stbi__high_bit($mr$1)|0);
        $148 = (($147) + -7)|0;
        $149 = (_stbi__bitcount($mr$1)|0);
        $150 = (_stbi__high_bit($mg$1)|0);
        $151 = (($150) + -7)|0;
        $152 = (_stbi__bitcount($mg$1)|0);
        $153 = (_stbi__high_bit($mb$1)|0);
        $154 = (($153) + -7)|0;
        $155 = (_stbi__bitcount($mb$1)|0);
        $156 = (_stbi__high_bit($ma$1)|0);
        $157 = (($156) + -7)|0;
        $158 = (_stbi__bitcount($ma$1)|0);
        $209 = $138;$247 = $or$cond29;$acount$0 = $158;$ashift$0 = $157;$bcount$0 = $155;$bshift$0 = $154;$easy$034 = $$33;$gcount$0 = $152;$gshift$0 = $151;$rcount$0 = $149;$rshift$0 = $148;
        break;
       }
       _free($53);
       _stbi__err(15504);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
     }
    } while(0);
    $159 = HEAP32[$18>>2]|0;
    $160 = ($159|0)>(0);
    if ($160) {
     $161 = ($16|0)==(16);
     $162 = ($req_comp$|0)==(4);
     $163 = ($easy$034|0)==(2);
     $164 = ($req_comp$|0)==(4);
     $j$165 = 0;$z1$066 = 0;
     while(1) {
      $165 = HEAP32[$s>>2]|0;
      $166 = ($165|0)>(0);
      if ($247) {
       if ($166) {
        $i$360 = 0;$z1$161 = $z1$066;
        while(1) {
         $167 = (_stbi__get8($s)|0);
         $168 = (($z1$161) + 2)|0;
         $169 = (($53) + ($168)|0);
         HEAP8[$169>>0] = $167;
         $170 = (_stbi__get8($s)|0);
         $171 = (($z1$161) + 1)|0;
         $172 = (($53) + ($171)|0);
         HEAP8[$172>>0] = $170;
         $173 = (_stbi__get8($s)|0);
         $174 = (($53) + ($z1$161)|0);
         HEAP8[$174>>0] = $173;
         $175 = (($z1$161) + 3)|0;
         if ($163) {
          $176 = (_stbi__get8($s)|0);
          $179 = $176;
         } else {
          $179 = -1;
         }
         if ($164) {
          $177 = (($z1$161) + 4)|0;
          $178 = (($53) + ($175)|0);
          HEAP8[$178>>0] = $179;
          $z1$2 = $177;
         } else {
          $z1$2 = $175;
         }
         $180 = (($i$360) + 1)|0;
         $181 = HEAP32[$s>>2]|0;
         $182 = ($180|0)<($181|0);
         if ($182) {
          $i$360 = $180;$z1$161 = $z1$2;
         } else {
          $z1$5 = $z1$2;
          break;
         }
        }
       } else {
        $z1$5 = $z1$066;
       }
      } else {
       if ($166) {
        $i$454 = 0;$z1$355 = $z1$066;
        while(1) {
         if ($161) {
          $183 = (_stbi__get16le($s)|0);
          $186 = $183;
         } else {
          $184 = (_stbi__get32le($s)|0);
          $186 = $184;
         }
         $185 = $186 & $mr$1;
         $187 = (_stbi__shiftsigned($185,$rshift$0,$rcount$0)|0);
         $188 = $187&255;
         $189 = (($z1$355) + 1)|0;
         $190 = (($53) + ($z1$355)|0);
         HEAP8[$190>>0] = $188;
         $191 = $186 & $mg$1;
         $192 = (_stbi__shiftsigned($191,$gshift$0,$gcount$0)|0);
         $193 = $192&255;
         $194 = (($z1$355) + 2)|0;
         $195 = (($53) + ($189)|0);
         HEAP8[$195>>0] = $193;
         $196 = $186 & $mb$1;
         $197 = (_stbi__shiftsigned($196,$bshift$0,$bcount$0)|0);
         $198 = $197&255;
         $199 = (($z1$355) + 3)|0;
         $200 = (($53) + ($194)|0);
         HEAP8[$200>>0] = $198;
         if ($44) {
          $201 = $186 & $ma$1;
          $202 = (_stbi__shiftsigned($201,$ashift$0,$acount$0)|0);
          $phitmp21 = $202&255;
          $205 = $phitmp21;
         } else {
          $205 = -1;
         }
         if ($162) {
          $203 = (($z1$355) + 4)|0;
          $204 = (($53) + ($199)|0);
          HEAP8[$204>>0] = $205;
          $z1$4 = $203;
         } else {
          $z1$4 = $199;
         }
         $206 = (($i$454) + 1)|0;
         $207 = HEAP32[$s>>2]|0;
         $208 = ($206|0)<($207|0);
         if ($208) {
          $i$454 = $206;$z1$355 = $z1$4;
         } else {
          $z1$5 = $z1$4;
          break;
         }
        }
       } else {
        $z1$5 = $z1$066;
       }
      }
      _stbi__skip($s,$209);
      $210 = (($j$165) + 1)|0;
      $211 = HEAP32[$18>>2]|0;
      $212 = ($210|0)<($211|0);
      if ($212) {
       $j$165 = $210;$z1$066 = $z1$5;
      } else {
       break;
      }
     }
    }
   }
   if ($20) {
    $213 = HEAP32[$18>>2]|0;
    $214 = $213 >> 1;
    $215 = ($214|0)>(0);
    if ($215) {
     $216 = HEAP32[$s>>2]|0;
     $217 = Math_imul($216, $req_comp$)|0;
     $218 = ($217|0)>(0);
     $219 = HEAP32[$18>>2]|0;
     $220 = $219 >> 1;
     $225 = $213;$j$237 = 0;
     while(1) {
      $221 = Math_imul($j$237, $req_comp$)|0;
      $222 = Math_imul($221, $216)|0;
      $223 = $j$237 ^ -1;
      $224 = (($225) + ($223))|0;
      $226 = Math_imul($224, $req_comp$)|0;
      $227 = Math_imul($226, $216)|0;
      if ($218) {
       $228 = HEAP32[$s>>2]|0;
       $229 = Math_imul($228, $req_comp$)|0;
       $i$536 = 0;
       while(1) {
        $$sum = (($i$536) + ($222))|0;
        $230 = (($53) + ($$sum)|0);
        $231 = HEAP8[$230>>0]|0;
        $$sum20 = (($i$536) + ($227))|0;
        $232 = (($53) + ($$sum20)|0);
        $233 = HEAP8[$232>>0]|0;
        HEAP8[$230>>0] = $233;
        HEAP8[$232>>0] = $231;
        $234 = (($i$536) + 1)|0;
        $235 = ($234|0)<($229|0);
        if ($235) {
         $i$536 = $234;
        } else {
         break;
        }
       }
      }
      $236 = (($j$237) + 1)|0;
      $237 = ($236|0)<($220|0);
      if ($237) {
       $225 = $219;$j$237 = $236;
      } else {
       break;
      }
     }
    }
   }
   $238 = ($req_comp$|0)==($req_comp|0);
   $or$cond32 = $47 | $238;
   if ($or$cond32) {
    $out$0 = $53;
   } else {
    $239 = HEAP32[$s>>2]|0;
    $240 = HEAP32[$18>>2]|0;
    $241 = (_stbi__convert_format($53,$req_comp$,$req_comp,$239,$240)|0);
    $242 = ($241|0)==(0|0);
    if ($242) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $out$0 = $241;
    }
   }
   $243 = HEAP32[$s>>2]|0;
   HEAP32[$x>>2] = $243;
   $244 = HEAP32[$18>>2]|0;
   HEAP32[$y>>2] = $244;
   $245 = ($comp|0)==(0|0);
   if ($245) {
    $$0 = $out$0;
    STACKTOP = sp;return ($$0|0);
   }
   $246 = HEAP32[$46>>2]|0;
   HEAP32[$comp>>2] = $246;
   $$0 = $out$0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _stbi__err(15384);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__gif_test($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__gif_test_raw($s)|0);
 _stbi__rewind($s);
 STACKTOP = sp;return ($0|0);
}
function _stbi__gif_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $g = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $g = sp;
 _memset(($g|0),0,18508)|0;
 $0 = (_stbi__gif_load_next($s,$g,$comp,$req_comp)|0);
 $1 = ($0|0)==($s|0);
 $$ = $1 ? 0 : $0;
 $2 = ($$|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($$|0);
 }
 $3 = HEAP32[$g>>2]|0;
 HEAP32[$x>>2] = $3;
 $4 = (($g) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$y>>2] = $5;
 STACKTOP = sp;return ($$|0);
}
function _stbi__psd_test($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get32be($s)|0);
 $1 = ($0|0)==(943870035);
 $2 = $1&1;
 _stbi__rewind($s);
 STACKTOP = sp;return ($2|0);
}
function _stbi__psd_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $channel$032 = 0, $count$0$ph$be = 0, $count$0$ph29 = 0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $exitcond$3 = 0, $exitcond33 = 0, $exitcond33$1 = 0, $exitcond33$2 = 0, $exitcond33$3 = 0, $exitcond35 = 0, $exitcond42 = 0;
 var $i$016 = 0, $i$18 = 0, $i$18$1 = 0, $i$18$2 = 0, $i$18$3 = 0, $i$24 = 0, $i$24$1 = 0, $i$24$2 = 0, $i$24$3 = 0, $len$024 = 0, $len$120 = 0, $out$0 = 0, $p$017 = 0, $p$1$ph30 = 0, $p$225 = 0, $p$321 = 0, $p1$09 = 0, $p1$09$1 = 0, $p1$09$2 = 0, $p1$09$3 = 0;
 var $p1$15 = 0, $p1$15$1 = 0, $p1$15$2 = 0, $p1$15$3 = 0, $scevgep$sum = 0, $scevgep$sum$sink = 0, $scevgep38 = 0, $scevgep40$sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get32be($s)|0);
 $1 = ($0|0)==(943870035);
 if (!($1)) {
  _stbi__err(15168);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_stbi__get16be($s)|0);
 $3 = ($2|0)==(1);
 if (!($3)) {
  _stbi__err(15176);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _stbi__skip($s,6);
 $4 = (_stbi__get16be($s)|0);
 $5 = ($4>>>0)>(16);
 if ($5) {
  _stbi__err(15192);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_stbi__get32be($s)|0);
 $7 = (_stbi__get32be($s)|0);
 $8 = (_stbi__get16be($s)|0);
 $9 = ($8|0)==(8);
 if (!($9)) {
  _stbi__err(15216);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_stbi__get16be($s)|0);
 $11 = ($10|0)==(3);
 if (!($11)) {
  _stbi__err(15240);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (_stbi__get32be($s)|0);
 _stbi__skip($s,$12);
 $13 = (_stbi__get32be($s)|0);
 _stbi__skip($s,$13);
 $14 = (_stbi__get32be($s)|0);
 _stbi__skip($s,$14);
 $15 = (_stbi__get16be($s)|0);
 $16 = ($15|0)>(1);
 if ($16) {
  _stbi__err(15024);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = $6 << 2;
 $18 = Math_imul($17, $7)|0;
 $19 = (_stbi__malloc($18)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  _stbi__err(12832);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = Math_imul($7, $6)|0;
 $22 = ($15|0)==(0);
 do {
  if ($22) {
   $52 = ($21|0)>(0);
   $53 = ($21|0)>(0);
   $54 = Math_imul($7, $6)|0;
   $55 = ($4|0)<(0);
   if ($55) {
    if ($53) {
     $i$18 = 0;$p1$09 = $19;
     while(1) {
      HEAP8[$p1$09>>0] = 0;
      $56 = (($p1$09) + 4|0);
      $57 = (($i$18) + 1)|0;
      $exitcond33 = ($57|0)==($54|0);
      if ($exitcond33) {
       break;
      } else {
       $i$18 = $57;$p1$09 = $56;
      }
     }
    }
   } else {
    if ($52) {
     $i$24 = 0;$p1$15 = $19;
     while(1) {
      $58 = (_stbi__get8($s)|0);
      HEAP8[$p1$15>>0] = $58;
      $59 = (($p1$15) + 4|0);
      $60 = (($i$24) + 1)|0;
      $exitcond = ($60|0)==($54|0);
      if ($exitcond) {
       break;
      } else {
       $i$24 = $60;$p1$15 = $59;
      }
     }
    }
   }
   $61 = (($19) + 1|0);
   $62 = ($4|0)<(1);
   if ($62) {
    if ($53) {
     $i$18$1 = 0;$p1$09$1 = $61;
     while(1) {
      HEAP8[$p1$09$1>>0] = 0;
      $69 = (($p1$09$1) + 4|0);
      $70 = (($i$18$1) + 1)|0;
      $exitcond33$1 = ($70|0)==($54|0);
      if ($exitcond33$1) {
       break;
      } else {
       $i$18$1 = $70;$p1$09$1 = $69;
      }
     }
    }
   } else {
    if ($52) {
     $i$24$1 = 0;$p1$15$1 = $61;
     while(1) {
      $66 = (_stbi__get8($s)|0);
      HEAP8[$p1$15$1>>0] = $66;
      $67 = (($p1$15$1) + 4|0);
      $68 = (($i$24$1) + 1)|0;
      $exitcond$1 = ($68|0)==($54|0);
      if ($exitcond$1) {
       break;
      } else {
       $i$24$1 = $68;$p1$15$1 = $67;
      }
     }
    }
   }
   $71 = (($19) + 2|0);
   $72 = ($4|0)<(2);
   if ($72) {
    if ($53) {
     $i$18$2 = 0;$p1$09$2 = $71;
     while(1) {
      HEAP8[$p1$09$2>>0] = 0;
      $76 = (($p1$09$2) + 4|0);
      $77 = (($i$18$2) + 1)|0;
      $exitcond33$2 = ($77|0)==($54|0);
      if ($exitcond33$2) {
       break;
      } else {
       $i$18$2 = $77;$p1$09$2 = $76;
      }
     }
    }
   } else {
    if ($52) {
     $i$24$2 = 0;$p1$15$2 = $71;
     while(1) {
      $73 = (_stbi__get8($s)|0);
      HEAP8[$p1$15$2>>0] = $73;
      $74 = (($p1$15$2) + 4|0);
      $75 = (($i$24$2) + 1)|0;
      $exitcond$2 = ($75|0)==($54|0);
      if ($exitcond$2) {
       break;
      } else {
       $i$24$2 = $75;$p1$15$2 = $74;
      }
     }
    }
   }
   $78 = (($19) + 3|0);
   $79 = ($4|0)<(3);
   if ($79) {
    if ($53) {
     $i$18$3 = 0;$p1$09$3 = $78;
    } else {
     break;
    }
    while(1) {
     HEAP8[$p1$09$3>>0] = -1;
     $83 = (($p1$09$3) + 4|0);
     $84 = (($i$18$3) + 1)|0;
     $exitcond33$3 = ($84|0)==($54|0);
     if ($exitcond33$3) {
      break;
     } else {
      $i$18$3 = $84;$p1$09$3 = $83;
     }
    }
   } else {
    if ($52) {
     $i$24$3 = 0;$p1$15$3 = $78;
    } else {
     break;
    }
    while(1) {
     $80 = (_stbi__get8($s)|0);
     HEAP8[$p1$15$3>>0] = $80;
     $81 = (($p1$15$3) + 4|0);
     $82 = (($i$24$3) + 1)|0;
     $exitcond$3 = ($82|0)==($54|0);
     if ($exitcond$3) {
      break;
     } else {
      $i$24$3 = $82;$p1$15$3 = $81;
     }
    }
   }
  } else {
   $23 = $4 << 1;
   $24 = Math_imul($23, $6)|0;
   _stbi__skip($s,$24);
   $25 = ($21|0)>(0);
   $26 = ($21|0)>(0);
   $27 = Math_imul($7, $6)|0;
   $channel$032 = 0;
   while(1) {
    $28 = (($19) + ($channel$032)|0);
    $29 = ($channel$032|0)<($4|0);
    if ($29) {
     if ($25) {
      $count$0$ph29 = 0;$p$1$ph30 = $28;
      while(1) {
       while(1) {
        $37 = (_stbi__get8($s)|0);
        $38 = $37&255;
        $39 = ($37<<24>>24)==(-128);
        if (!($39)) {
         break;
        }
       }
       $40 = ($37<<24>>24)>(-1);
       if ($40) {
        $41 = (($38) + 1)|0;
        $36 = $38 << 2;
        $len$024 = $41;$p$225 = $p$1$ph30;
        while(1) {
         $42 = (_stbi__get8($s)|0);
         HEAP8[$p$225>>0] = $42;
         $43 = (($p$225) + 4|0);
         $44 = (($len$024) + -1)|0;
         $45 = ($44|0)==(0);
         if ($45) {
          break;
         } else {
          $len$024 = $44;$p$225 = $43;
         }
        }
        $scevgep40$sum = (($36) + 4)|0;
        $$pn = $41;$scevgep$sum$sink = $scevgep40$sum;
       } else {
        $46 = (257 - ($38))|0;
        $47 = (_stbi__get8($s)|0);
        $34 = Math_imul($38, -4)|0;
        $len$120 = $46;$p$321 = $p$1$ph30;
        while(1) {
         HEAP8[$p$321>>0] = $47;
         $48 = (($p$321) + 4|0);
         $49 = (($len$120) + -1)|0;
         $50 = ($49|0)==(0);
         if ($50) {
          break;
         } else {
          $len$120 = $49;$p$321 = $48;
         }
        }
        $scevgep$sum = (($34) + 1028)|0;
        $$pn = $46;$scevgep$sum$sink = $scevgep$sum;
       }
       $scevgep38 = (($p$1$ph30) + ($scevgep$sum$sink)|0);
       $count$0$ph$be = (($$pn) + ($count$0$ph29))|0;
       $35 = ($count$0$ph$be|0)<($21|0);
       if ($35) {
        $count$0$ph29 = $count$0$ph$be;$p$1$ph30 = $scevgep38;
       } else {
        break;
       }
      }
     }
    } else {
     if ($26) {
      $30 = ($channel$032|0)==(3);
      $31 = $30 << 31 >> 31;
      $i$016 = 0;$p$017 = $28;
      while(1) {
       HEAP8[$p$017>>0] = $31;
       $32 = (($p$017) + 4|0);
       $33 = (($i$016) + 1)|0;
       $exitcond35 = ($33|0)==($27|0);
       if ($exitcond35) {
        break;
       } else {
        $i$016 = $33;$p$017 = $32;
       }
      }
     }
    }
    $51 = (($channel$032) + 1)|0;
    $exitcond42 = ($51|0)==(4);
    if ($exitcond42) {
     break;
    } else {
     $channel$032 = $51;
    }
   }
  }
 } while(0);
 if ((($req_comp|0) == 0) | (($req_comp|0) == 4)) {
  $out$0 = $19;
 } else {
  $63 = (_stbi__convert_format($19,4,$req_comp,$7,$6)|0);
  $64 = ($63|0)==(0|0);
  if ($64) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $out$0 = $63;
  }
 }
 $65 = ($comp|0)==(0|0);
 if (!($65)) {
  HEAP32[$comp>>2] = $4;
 }
 HEAP32[$y>>2] = $6;
 HEAP32[$x>>2] = $7;
 $$0 = $out$0;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__pic_test($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__pic_test_core($s)|0);
 _stbi__rewind($s);
 STACKTOP = sp;return ($0|0);
}
function _stbi__pic_load($s,$px,$py,$comp,$req_comp) {
 $s = $s|0;
 $px = $px|0;
 $py = $py|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $result$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $i$02 = 0;
 while(1) {
  (_stbi__get8($s)|0);
  $0 = (($i$02) + 1)|0;
  $exitcond = ($0|0)==(92);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $0;
  }
 }
 $1 = (_stbi__get16be($s)|0);
 $2 = (_stbi__get16be($s)|0);
 $3 = (_stbi__at_eof($s)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _stbi__err(15120);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (268435456 / ($1|0))&-1;
 $6 = ($5|0)<($2|0);
 if ($6) {
  _stbi__err(12568);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (_stbi__get32be($s)|0);
 (_stbi__get16be($s)|0);
 (_stbi__get16be($s)|0);
 $7 = $1 << 2;
 $8 = Math_imul($7, $2)|0;
 $9 = (_stbi__malloc($8)|0);
 _memset(($9|0),-1,($8|0))|0;
 $10 = (_stbi__pic_load_core($s,$1,$2,$comp,$9)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  _free($9);
  $result$0 = 0;
 } else {
  $result$0 = $9;
 }
 HEAP32[$px>>2] = $1;
 HEAP32[$py>>2] = $2;
 $12 = ($req_comp|0)==(0);
 if ($12) {
  $13 = HEAP32[$comp>>2]|0;
  $$01 = $13;
 } else {
  $$01 = $req_comp;
 }
 $14 = (_stbi__convert_format($result$0,4,$$01,$1,$2)|0);
 $$0 = $14;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__pnm_test($s) {
 $s = $s|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = (_stbi__get8($s)|0);
 $2 = ($0<<24>>24)==(80);
 if ($2) {
  $$off = (($1) + -53)<<24>>24;
  $switch = ($$off&255)<(2);
  if ($switch) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _stbi__rewind($s);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__pnm_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + 4|0);
 $1 = (($s) + 8|0);
 $2 = (_stbi__pnm_info($s,$s,$0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$s>>2]|0;
 HEAP32[$x>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 HEAP32[$y>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 HEAP32[$comp>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$s>>2]|0;
 $9 = Math_imul($8, $7)|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = Math_imul($9, $10)|0;
 $12 = (_stbi__malloc($11)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  _stbi__err(12832);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$s>>2]|0;
 $16 = Math_imul($15, $14)|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = Math_imul($16, $17)|0;
 (_stbi__getn($s,$12,$18)|0);
 $19 = ($req_comp|0)==(0);
 if ($19) {
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==($req_comp|0);
 if ($21) {
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 } else {
  $22 = HEAP32[$s>>2]|0;
  $23 = HEAP32[$0>>2]|0;
  $24 = (_stbi__convert_format($12,$20,$req_comp,$22,$23)|0);
  STACKTOP = sp;return ($24|0);
 }
 return 0|0;
}
function _stbi__tga_test($s) {
 $s = $s|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $res$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_stbi__get8($s)|0);
 $0 = (_stbi__get8($s)|0);
 $1 = ($0&255)>(1);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_stbi__get8($s)|0);
 $$off = (($2) + -1)<<24>>24;
 $3 = ($$off&255)>(1);
 $4 = ($2<<24>>24)!=(3);
 $or$cond3 = $3 & $4;
 $5 = ($2<<24>>24)!=(9);
 $or$cond5 = $or$cond3 & $5;
 $6 = ($2<<24>>24)!=(10);
 $or$cond7 = $or$cond5 & $6;
 $7 = ($2<<24>>24)!=(11);
 $or$cond9 = $or$cond7 & $7;
 if ($or$cond9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (_stbi__get16be($s)|0);
 (_stbi__get16be($s)|0);
 (_stbi__get8($s)|0);
 (_stbi__get16be($s)|0);
 (_stbi__get16be($s)|0);
 $8 = (_stbi__get16be($s)|0);
 $9 = ($8|0)<(1);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_stbi__get16be($s)|0);
 $11 = ($10|0)<(1);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (_stbi__get8($s)|0);
 if ((($12<<24>>24) == 8) | (($12<<24>>24) == 16) | (($12<<24>>24) == 24) | (($12<<24>>24) == 32)) {
  $res$0 = 1;
 } else {
  $res$0 = 0;
 }
 _stbi__rewind($s);
 $$0 = $res$0;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__tga_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $$0 = 0, $$10 = 0, $$9 = 0, $$i$048 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $RLE_count$040 = 0, $RLE_count$113 = 0, $RLE_count$114 = 0, $RLE_repeating$041 = 0;
 var $RLE_repeating$115 = 0, $RLE_repeating$116 = 0, $exitcond = 0, $exitcond51 = 0, $exitcond52 = 0, $i$048 = 0, $i$139 = 0, $i$219 = 0, $i$317 = 0, $index1$020 = 0, $index2$021 = 0, $j$032 = 0, $j$129 = 0, $j$325 = 0, $not$ = 0, $or$cond = 0, $or$cond11$demorgan = 0, $or$cond12 = 0, $or$cond53 = 0, $or$cond54 = 0;
 var $raw_data = 0, $read_next_pixel$042 = 0, $scevgep = 0, $smax = 0, $tga_image_type$0$off = 0, $tga_palette$0 = 0, $tga_pixel$018 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $raw_data = sp;
 $0 = (_stbi__get8($s)|0);
 $1 = $0&255;
 $2 = (_stbi__get8($s)|0);
 $3 = (_stbi__get8($s)|0);
 $4 = $3&255;
 $5 = (_stbi__get16le($s)|0);
 $6 = (_stbi__get16le($s)|0);
 $7 = (_stbi__get8($s)|0);
 $8 = $7&255;
 (_stbi__get16le($s)|0);
 (_stbi__get16le($s)|0);
 $9 = (_stbi__get16le($s)|0);
 $10 = (_stbi__get16le($s)|0);
 $11 = (_stbi__get8($s)|0);
 $12 = $11&255;
 $13 = $12 >>> 3;
 $14 = (_stbi__get8($s)|0);
 $15 = $14&255;
 $16 = ($3&255)>(7);
 $17 = $15 >>> 5;
 $18 = $17 & 1;
 $19 = ($9|0)<(1);
 $20 = ($10|0)<(1);
 $or$cond = $19 | $20;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (($4) + -8)|0;
 $$9 = $16 ? $21 : $4;
 $tga_image_type$0$off = (($$9) + -1)|0;
 $22 = ($tga_image_type$0$off>>>0)>(2);
 if ($22) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 if (!((($11<<24>>24) == 8) | (($11<<24>>24) == 16) | (($11<<24>>24) == 24) | (($11<<24>>24) == 32))) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = ($2<<24>>24)!=(0);
 $24 = $8 >>> 3;
 $$10 = $23 ? $24 : $13;
 HEAP32[$x>>2] = $9;
 HEAP32[$y>>2] = $10;
 $25 = ($comp|0)==(0|0);
 if (!($25)) {
  HEAP32[$comp>>2] = $$10;
 }
 $26 = Math_imul($10, $9)|0;
 $27 = Math_imul($$10, $26)|0;
 $28 = (_stbi__malloc($27)|0);
 $29 = ($28|0)==(0|0);
 if ($29) {
  _stbi__err(12832);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _stbi__skip($s,$1);
 $or$cond11$demorgan = $23 | $16;
 if ($or$cond11$demorgan) {
  if ($23) {
   _stbi__skip($s,$5);
   $39 = Math_imul($8, $6)|0;
   $40 = (($39|0) / 8)&-1;
   $41 = (_stbi__malloc($40)|0);
   $42 = ($41|0)==(0|0);
   if ($42) {
    _free($28);
    _stbi__err(12832);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (_stbi__getn($s,$41,$40)|0);
   $44 = ($43|0)==(0);
   if ($44) {
    _free($28);
    _free($41);
    _stbi__err(15040);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $tga_palette$0 = $41;
   }
  } else {
   $tga_palette$0 = 0;
  }
  $45 = ($26|0)>(0);
  if ($45) {
   $46 = ($11<<24>>24)==(0);
   $47 = ($11<<24>>24)==(0);
   $48 = ($$10|0)==(0);
   $49 = ($$10>>>0)>(1);
   $smax = $49 ? $$10 : 1;
   $50 = Math_imul($10, $9)|0;
   $RLE_count$040 = 0;$RLE_repeating$041 = 0;$i$139 = 0;$read_next_pixel$042 = 1;
   while(1) {
    $51 = Math_imul($$10, $i$139)|0;
    $scevgep = (($28) + ($51)|0);
    do {
     if ($16) {
      $52 = ($RLE_count$040|0)==(0);
      if ($52) {
       $53 = (_stbi__get8($s)|0);
       $54 = $53&255;
       $55 = $54 & 127;
       $56 = (($55) + 1)|0;
       $57 = $54 >>> 7;
       $RLE_count$113 = $56;$RLE_repeating$115 = $57;
       label = 23;
       break;
      } else {
       $58 = ($read_next_pixel$042|0)==(0);
       $not$ = ($RLE_repeating$041|0)!=(0);
       $59 = $58 & $not$;
       if ($59) {
        $RLE_count$114 = $RLE_count$040;$RLE_repeating$116 = $RLE_repeating$041;
        break;
       } else {
        $RLE_count$113 = $RLE_count$040;$RLE_repeating$115 = $RLE_repeating$041;
        label = 23;
        break;
       }
      }
     } else {
      $RLE_count$113 = $RLE_count$040;$RLE_repeating$115 = $RLE_repeating$041;
      label = 23;
     }
    } while(0);
    do {
     if ((label|0) == 23) {
      label = 0;
      if ($23) {
       $60 = (_stbi__get8($s)|0);
       $61 = $60&255;
       $62 = ($61|0)>=($6|0);
       $$ = $62 ? 0 : $61;
       $63 = Math_imul($$, $13)|0;
       if ($46) {
        $RLE_count$114 = $RLE_count$113;$RLE_repeating$116 = $RLE_repeating$115;
        break;
       } else {
        $j$032 = 0;
       }
       while(1) {
        $64 = (($j$032) + ($63))|0;
        $65 = (($tga_palette$0) + ($64)|0);
        $66 = HEAP8[$65>>0]|0;
        $67 = (($raw_data) + ($j$032)|0);
        HEAP8[$67>>0] = $66;
        $68 = (($j$032) + 1)|0;
        $69 = $68 << 3;
        $70 = ($69|0)<($12|0);
        if ($70) {
         $j$032 = $68;
        } else {
         $RLE_count$114 = $RLE_count$113;$RLE_repeating$116 = $RLE_repeating$115;
         break;
        }
       }
      } else {
       if ($47) {
        $RLE_count$114 = $RLE_count$113;$RLE_repeating$116 = $RLE_repeating$115;
        break;
       } else {
        $j$129 = 0;
       }
       while(1) {
        $71 = (_stbi__get8($s)|0);
        $72 = (($raw_data) + ($j$129)|0);
        HEAP8[$72>>0] = $71;
        $73 = (($j$129) + 1)|0;
        $74 = $73 << 3;
        $75 = ($74|0)<($12|0);
        if ($75) {
         $j$129 = $73;
        } else {
         $RLE_count$114 = $RLE_count$113;$RLE_repeating$116 = $RLE_repeating$115;
         break;
        }
       }
      }
     }
    } while(0);
    if (!($48)) {
     _memcpy(($scevgep|0),($raw_data|0),($smax|0))|0;
    }
    $76 = (($RLE_count$114) + -1)|0;
    $77 = (($i$139) + 1)|0;
    $exitcond51 = ($77|0)==($50|0);
    if ($exitcond51) {
     break;
    } else {
     $RLE_count$040 = $76;$RLE_repeating$041 = $RLE_repeating$116;$i$139 = $77;$read_next_pixel$042 = 0;
    }
   }
  }
  $78 = ($18|0)==(0);
  $79 = ($10|0)>(0);
  $or$cond53 = $78 & $79;
  if ($or$cond53) {
   $80 = Math_imul($$10, $9)|0;
   $81 = (($10) + -1)|0;
   $82 = Math_imul($$10, $9)|0;
   $83 = Math_imul($$10, $9)|0;
   $84 = ($83|0)>(0);
   $j$325 = 0;
   while(1) {
    if ($84) {
     $85 = (($81) - ($j$325))|0;
     $86 = Math_imul($82, $85)|0;
     $87 = Math_imul($80, $j$325)|0;
     $i$219 = $83;$index1$020 = $87;$index2$021 = $86;
     while(1) {
      $88 = (($28) + ($index1$020)|0);
      $89 = HEAP8[$88>>0]|0;
      $90 = (($28) + ($index2$021)|0);
      $91 = HEAP8[$90>>0]|0;
      HEAP8[$88>>0] = $91;
      HEAP8[$90>>0] = $89;
      $92 = (($index1$020) + 1)|0;
      $93 = (($index2$021) + 1)|0;
      $94 = (($i$219) + -1)|0;
      $95 = ($94|0)>(0);
      if ($95) {
       $i$219 = $94;$index1$020 = $92;$index2$021 = $93;
      } else {
       break;
      }
     }
    }
    $96 = (($j$325) + 1)|0;
    $97 = $96 << 1;
    $98 = ($97|0)<($10|0);
    if ($98) {
     $j$325 = $96;
    } else {
     break;
    }
   }
  }
  $99 = ($tga_palette$0|0)==(0|0);
  if (!($99)) {
   _free($tga_palette$0);
  }
 } else {
  $30 = ($10|0)>(0);
  if ($30) {
   $31 = ($18|0)==(0);
   $32 = (($10) + -1)|0;
   $33 = Math_imul($$10, $9)|0;
   $34 = Math_imul($$10, $9)|0;
   $i$048 = 0;
   while(1) {
    $35 = (($32) - ($i$048))|0;
    $$i$048 = $31 ? $35 : $i$048;
    $36 = Math_imul($33, $$i$048)|0;
    $37 = (($28) + ($36)|0);
    (_stbi__getn($s,$37,$34)|0);
    $38 = (($i$048) + 1)|0;
    $exitcond52 = ($38|0)==($10|0);
    if ($exitcond52) {
     break;
    } else {
     $i$048 = $38;
    }
   }
  }
 }
 $100 = ($$10>>>0)>(2);
 $101 = ($26|0)>(0);
 $or$cond54 = $100 & $101;
 if ($or$cond54) {
  $102 = Math_imul($10, $9)|0;
  $i$317 = 0;$tga_pixel$018 = $28;
  while(1) {
   $103 = HEAP8[$tga_pixel$018>>0]|0;
   $104 = (($tga_pixel$018) + 2|0);
   $105 = HEAP8[$104>>0]|0;
   HEAP8[$tga_pixel$018>>0] = $105;
   HEAP8[$104>>0] = $103;
   $106 = (($tga_pixel$018) + ($$10)|0);
   $107 = (($i$317) + 1)|0;
   $exitcond = ($107|0)==($102|0);
   if ($exitcond) {
    break;
   } else {
    $i$317 = $107;$tga_pixel$018 = $106;
   }
  }
 }
 $108 = ($req_comp|0)==(0);
 $109 = ($$10|0)==($req_comp|0);
 $or$cond12 = $108 | $109;
 if ($or$cond12) {
  $$0 = $28;
  STACKTOP = sp;return ($$0|0);
 }
 $110 = (_stbi__convert_format($28,$$10,$req_comp,$9,$10)|0);
 $$0 = $110;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__convert_format($data,$img_n,$req_comp,$x,$y) {
 $data = $data|0;
 $img_n = $img_n|0;
 $req_comp = $req_comp|0;
 $x = $x|0;
 $y = $y|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dest$080 = 0;
 var $dest$1010 = 0, $dest$114 = 0, $dest$173 = 0, $dest$266 = 0, $dest$359 = 0, $dest$452 = 0, $dest$545 = 0, $dest$638 = 0, $dest$731 = 0, $dest$824 = 0, $dest$917 = 0, $i$0 = 0, $i$078 = 0, $i$081 = 0, $i$1 = 0, $i$10 = 0, $i$1011 = 0, $i$108 = 0, $i$11 = 0, $i$112 = 0;
 var $i$115 = 0, $i$171 = 0, $i$174 = 0, $i$2 = 0, $i$264 = 0, $i$267 = 0, $i$3 = 0, $i$357 = 0, $i$360 = 0, $i$4 = 0, $i$450 = 0, $i$453 = 0, $i$5 = 0, $i$543 = 0, $i$546 = 0, $i$6 = 0, $i$636 = 0, $i$639 = 0, $i$7 = 0, $i$729 = 0;
 var $i$732 = 0, $i$8 = 0, $i$822 = 0, $i$825 = 0, $i$9 = 0, $i$915 = 0, $i$918 = 0, $j$084 = 0, $req_comp$off = 0, $src$079 = 0, $src$109 = 0, $src$113 = 0, $src$172 = 0, $src$265 = 0, $src$358 = 0, $src$451 = 0, $src$544 = 0, $src$637 = 0, $src$730 = 0, $src$823 = 0;
 var $src$916 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($req_comp|0)==($img_n|0);
 if ($0) {
  $$0 = $data;
  STACKTOP = sp;return ($$0|0);
 }
 $req_comp$off = (($req_comp) + -1)|0;
 $1 = ($req_comp$off>>>0)<(4);
 if (!($1)) {
  ___assert_fail((15056|0),(12928|0),1225,(15088|0));
  // unreachable;
 }
 $2 = Math_imul($x, $req_comp)|0;
 $3 = Math_imul($2, $y)|0;
 $4 = (_stbi__malloc($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  _free($data);
  _stbi__err(12832);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($y|0)>(0);
 L11: do {
  if ($6) {
   $7 = $img_n << 3;
   $8 = (($7) + ($req_comp))|0;
   $i$112 = (($x) + -1)|0;
   $9 = ($i$112|0)>(-1);
   $i$108 = (($x) + -1)|0;
   $10 = ($i$108|0)>(-1);
   $i$915 = (($x) + -1)|0;
   $11 = ($i$915|0)>(-1);
   $i$822 = (($x) + -1)|0;
   $12 = ($i$822|0)>(-1);
   $i$729 = (($x) + -1)|0;
   $13 = ($i$729|0)>(-1);
   $i$636 = (($x) + -1)|0;
   $14 = ($i$636|0)>(-1);
   $i$543 = (($x) + -1)|0;
   $15 = ($i$543|0)>(-1);
   $i$450 = (($x) + -1)|0;
   $16 = ($i$450|0)>(-1);
   $i$357 = (($x) + -1)|0;
   $17 = ($i$357|0)>(-1);
   $i$264 = (($x) + -1)|0;
   $18 = ($i$264|0)>(-1);
   $i$171 = (($x) + -1)|0;
   $19 = ($i$171|0)>(-1);
   $i$078 = (($x) + -1)|0;
   $20 = ($i$078|0)>(-1);
   $j$084 = 0;
   L13: while(1) {
    $21 = Math_imul($j$084, $x)|0;
    $22 = Math_imul($21, $img_n)|0;
    $23 = (($data) + ($22)|0);
    $24 = Math_imul($21, $req_comp)|0;
    $25 = (($4) + ($24)|0);
    do {
     switch ($8|0) {
     case 20:  {
      if ($15) {
       $dest$545 = $25;$i$546 = $i$543;$src$544 = $23;
       while(1) {
        $54 = HEAP8[$src$544>>0]|0;
        $55 = (($dest$545) + 2|0);
        HEAP8[$55>>0] = $54;
        $56 = (($dest$545) + 1|0);
        HEAP8[$56>>0] = $54;
        HEAP8[$dest$545>>0] = $54;
        $57 = (($src$544) + 1|0);
        $58 = HEAP8[$57>>0]|0;
        $59 = (($dest$545) + 3|0);
        HEAP8[$59>>0] = $58;
        $60 = (($src$544) + 2|0);
        $61 = (($dest$545) + 4|0);
        $i$5 = (($i$546) + -1)|0;
        $62 = ($i$5|0)>(-1);
        if ($62) {
         $dest$545 = $61;$i$546 = $i$5;$src$544 = $60;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 26:  {
      if ($12) {
       $dest$824 = $25;$i$825 = $i$822;$src$823 = $23;
       while(1) {
        $86 = HEAP8[$src$823>>0]|0;
        $87 = $86&255;
        $88 = (($src$823) + 1|0);
        $89 = HEAP8[$88>>0]|0;
        $90 = $89&255;
        $91 = (($src$823) + 2|0);
        $92 = HEAP8[$91>>0]|0;
        $93 = $92&255;
        $94 = (_stbi__compute_y($87,$90,$93)|0);
        HEAP8[$dest$824>>0] = $94;
        $95 = (($dest$824) + 1|0);
        HEAP8[$95>>0] = -1;
        $96 = (($src$823) + 3|0);
        $97 = (($dest$824) + 2|0);
        $i$8 = (($i$825) + -1)|0;
        $98 = ($i$8|0)>(-1);
        if ($98) {
         $dest$824 = $97;$i$825 = $i$8;$src$823 = $96;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 17:  {
      if ($17) {
       $dest$359 = $25;$i$360 = $i$357;$src$358 = $23;
       while(1) {
        $44 = HEAP8[$src$358>>0]|0;
        HEAP8[$dest$359>>0] = $44;
        $45 = (($src$358) + 2|0);
        $46 = (($dest$359) + 1|0);
        $i$3 = (($i$360) + -1)|0;
        $47 = ($i$3|0)>(-1);
        if ($47) {
         $dest$359 = $46;$i$360 = $i$3;$src$358 = $45;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 25:  {
      if ($13) {
       $dest$731 = $25;$i$732 = $i$729;$src$730 = $23;
       while(1) {
        $74 = HEAP8[$src$730>>0]|0;
        $75 = $74&255;
        $76 = (($src$730) + 1|0);
        $77 = HEAP8[$76>>0]|0;
        $78 = $77&255;
        $79 = (($src$730) + 2|0);
        $80 = HEAP8[$79>>0]|0;
        $81 = $80&255;
        $82 = (_stbi__compute_y($75,$78,$81)|0);
        HEAP8[$dest$731>>0] = $82;
        $83 = (($src$730) + 3|0);
        $84 = (($dest$731) + 1|0);
        $i$7 = (($i$732) + -1)|0;
        $85 = ($i$7|0)>(-1);
        if ($85) {
         $dest$731 = $84;$i$732 = $i$7;$src$730 = $83;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 12:  {
      if ($18) {
       $dest$266 = $25;$i$267 = $i$264;$src$265 = $23;
       while(1) {
        $37 = HEAP8[$src$265>>0]|0;
        $38 = (($dest$266) + 2|0);
        HEAP8[$38>>0] = $37;
        $39 = (($dest$266) + 1|0);
        HEAP8[$39>>0] = $37;
        HEAP8[$dest$266>>0] = $37;
        $40 = (($dest$266) + 3|0);
        HEAP8[$40>>0] = -1;
        $41 = (($src$265) + 1|0);
        $42 = (($dest$266) + 4|0);
        $i$2 = (($i$267) + -1)|0;
        $43 = ($i$2|0)>(-1);
        if ($43) {
         $dest$266 = $42;$i$267 = $i$2;$src$265 = $41;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 28:  {
      if ($14) {
       $dest$638 = $25;$i$639 = $i$636;$src$637 = $23;
       while(1) {
        $63 = HEAP8[$src$637>>0]|0;
        HEAP8[$dest$638>>0] = $63;
        $64 = (($src$637) + 1|0);
        $65 = HEAP8[$64>>0]|0;
        $66 = (($dest$638) + 1|0);
        HEAP8[$66>>0] = $65;
        $67 = (($src$637) + 2|0);
        $68 = HEAP8[$67>>0]|0;
        $69 = (($dest$638) + 2|0);
        HEAP8[$69>>0] = $68;
        $70 = (($dest$638) + 3|0);
        HEAP8[$70>>0] = -1;
        $71 = (($src$637) + 3|0);
        $72 = (($dest$638) + 4|0);
        $i$6 = (($i$639) + -1)|0;
        $73 = ($i$6|0)>(-1);
        if ($73) {
         $dest$638 = $72;$i$639 = $i$6;$src$637 = $71;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 19:  {
      if ($16) {
       $dest$452 = $25;$i$453 = $i$450;$src$451 = $23;
       while(1) {
        $48 = HEAP8[$src$451>>0]|0;
        $49 = (($dest$452) + 2|0);
        HEAP8[$49>>0] = $48;
        $50 = (($dest$452) + 1|0);
        HEAP8[$50>>0] = $48;
        HEAP8[$dest$452>>0] = $48;
        $51 = (($src$451) + 2|0);
        $52 = (($dest$452) + 3|0);
        $i$4 = (($i$453) + -1)|0;
        $53 = ($i$4|0)>(-1);
        if ($53) {
         $dest$452 = $52;$i$453 = $i$4;$src$451 = $51;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 33:  {
      if ($11) {
       $dest$917 = $25;$i$918 = $i$915;$src$916 = $23;
       while(1) {
        $99 = HEAP8[$src$916>>0]|0;
        $100 = $99&255;
        $101 = (($src$916) + 1|0);
        $102 = HEAP8[$101>>0]|0;
        $103 = $102&255;
        $104 = (($src$916) + 2|0);
        $105 = HEAP8[$104>>0]|0;
        $106 = $105&255;
        $107 = (_stbi__compute_y($100,$103,$106)|0);
        HEAP8[$dest$917>>0] = $107;
        $108 = (($src$916) + 4|0);
        $109 = (($dest$917) + 1|0);
        $i$9 = (($i$918) + -1)|0;
        $110 = ($i$9|0)>(-1);
        if ($110) {
         $dest$917 = $109;$i$918 = $i$9;$src$916 = $108;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 11:  {
      if ($19) {
       $dest$173 = $25;$i$174 = $i$171;$src$172 = $23;
       while(1) {
        $31 = HEAP8[$src$172>>0]|0;
        $32 = (($dest$173) + 2|0);
        HEAP8[$32>>0] = $31;
        $33 = (($dest$173) + 1|0);
        HEAP8[$33>>0] = $31;
        HEAP8[$dest$173>>0] = $31;
        $34 = (($src$172) + 1|0);
        $35 = (($dest$173) + 3|0);
        $i$1 = (($i$174) + -1)|0;
        $36 = ($i$1|0)>(-1);
        if ($36) {
         $dest$173 = $35;$i$174 = $i$1;$src$172 = $34;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 35:  {
      if ($9) {
       $dest$114 = $25;$i$115 = $i$112;$src$113 = $23;
       while(1) {
        $126 = HEAP8[$src$113>>0]|0;
        HEAP8[$dest$114>>0] = $126;
        $127 = (($src$113) + 1|0);
        $128 = HEAP8[$127>>0]|0;
        $129 = (($dest$114) + 1|0);
        HEAP8[$129>>0] = $128;
        $130 = (($src$113) + 2|0);
        $131 = HEAP8[$130>>0]|0;
        $132 = (($dest$114) + 2|0);
        HEAP8[$132>>0] = $131;
        $133 = (($src$113) + 4|0);
        $134 = (($dest$114) + 3|0);
        $i$11 = (($i$115) + -1)|0;
        $135 = ($i$11|0)>(-1);
        if ($135) {
         $dest$114 = $134;$i$115 = $i$11;$src$113 = $133;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 10:  {
      if ($20) {
       $dest$080 = $25;$i$081 = $i$078;$src$079 = $23;
       while(1) {
        $26 = HEAP8[$src$079>>0]|0;
        HEAP8[$dest$080>>0] = $26;
        $27 = (($dest$080) + 1|0);
        HEAP8[$27>>0] = -1;
        $28 = (($src$079) + 1|0);
        $29 = (($dest$080) + 2|0);
        $i$0 = (($i$081) + -1)|0;
        $30 = ($i$0|0)>(-1);
        if ($30) {
         $dest$080 = $29;$i$081 = $i$0;$src$079 = $28;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 34:  {
      if ($10) {
       $dest$1010 = $25;$i$1011 = $i$108;$src$109 = $23;
       while(1) {
        $111 = HEAP8[$src$109>>0]|0;
        $112 = $111&255;
        $113 = (($src$109) + 1|0);
        $114 = HEAP8[$113>>0]|0;
        $115 = $114&255;
        $116 = (($src$109) + 2|0);
        $117 = HEAP8[$116>>0]|0;
        $118 = $117&255;
        $119 = (_stbi__compute_y($112,$115,$118)|0);
        HEAP8[$dest$1010>>0] = $119;
        $120 = (($src$109) + 3|0);
        $121 = HEAP8[$120>>0]|0;
        $122 = (($dest$1010) + 1|0);
        HEAP8[$122>>0] = $121;
        $123 = (($src$109) + 4|0);
        $124 = (($dest$1010) + 2|0);
        $i$10 = (($i$1011) + -1)|0;
        $125 = ($i$10|0)>(-1);
        if ($125) {
         $dest$1010 = $124;$i$1011 = $i$10;$src$109 = $123;
        } else {
         break;
        }
       }
      }
      break;
     }
     default: {
      break L13;
     }
     }
    } while(0);
    $136 = (($j$084) + 1)|0;
    $137 = ($136|0)<($y|0);
    if ($137) {
     $j$084 = $136;
    } else {
     break L11;
    }
   }
   ___assert_fail((15112|0),(12928|0),1254,(15088|0));
   // unreachable;
  }
 } while(0);
 _free($data);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__compute_y($r,$g,$b) {
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r*77)|0;
 $1 = ($g*150)|0;
 $2 = (($1) + ($0))|0;
 $3 = ($b*29)|0;
 $4 = (($2) + ($3))|0;
 $5 = $4 >>> 8;
 $6 = $5&255;
 STACKTOP = sp;return ($6|0);
}
function _stbi__pic_load_core($s,$width,$height,$comp,$result) {
 $s = $s|0;
 $width = $width|0;
 $height = $height|0;
 $comp = $comp|0;
 $result = $result|0;
 var $$ = 0, $$0 = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $act_comp$0 = 0, $count3$0 = 0, $count3$1 = 0, $dest$030 = 0, $dest$124 = 0, $dest$2$lcssa = 0, $dest$216 = 0, $dest$312 = 0, $dest$47 = 0, $dest$53 = 0, $dest$6 = 0, $exitcond = 0, $i$017 = 0, $i4$04 = 0, $i6$08 = 0, $left$025 = 0, $left2$013 = 0, $num_packets$0 = 0, $packet_idx$034 = 0, $packets = 0;
 var $scevgep = 0, $scevgep47 = 0, $value = 0, $value5 = 0, $x$031 = 0, $y$038 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $packets = sp + 8|0;
 $value = sp;
 $value5 = sp + 4|0;
 $act_comp$0 = 0;$num_packets$0 = 0;
 while(1) {
  $0 = ($num_packets$0|0)==(10);
  if ($0) {
   label = 3;
   break;
  }
  $1 = (($num_packets$0) + 1)|0;
  $2 = (_stbi__get8($s)|0);
  $3 = (_stbi__get8($s)|0);
  $4 = (($packets) + (($num_packets$0*3)|0)|0);
  HEAP8[$4>>0] = $3;
  $5 = (_stbi__get8($s)|0);
  $6 = ((($packets) + (($num_packets$0*3)|0)|0) + 1|0);
  HEAP8[$6>>0] = $5;
  $7 = (_stbi__get8($s)|0);
  $8 = ((($packets) + (($num_packets$0*3)|0)|0) + 2|0);
  HEAP8[$8>>0] = $7;
  $9 = $7&255;
  $10 = $9 | $act_comp$0;
  $11 = (_stbi__at_eof($s)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   label = 5;
   break;
  }
  $13 = HEAP8[$4>>0]|0;
  $14 = ($13<<24>>24)==(8);
  if (!($14)) {
   label = 7;
   break;
  }
  $15 = ($2<<24>>24)==(0);
  if ($15) {
   label = 9;
   break;
  } else {
   $act_comp$0 = $10;$num_packets$0 = $1;
  }
 }
 if ((label|0) == 3) {
  _stbi__err(15136);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  _stbi__err(15120);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 7) {
  _stbi__err(15136);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 9) {
  $16 = $10 >>> 4;
  $17 = $16 & 1;
  $18 = (($17) + 3)|0;
  HEAP32[$comp>>2] = $18;
  $19 = ($height|0)>(0);
  if (!($19)) {
   $$0 = $result;
   STACKTOP = sp;return ($$0|0);
  }
  $20 = ($num_packets$0|0)>(-1);
  $21 = $width << 2;
  $22 = ($width|0)>(0);
  $23 = ($width|0)>(0);
  $24 = ($width|0)>(0);
  $y$038 = 0;
  L11: while(1) {
   if ($20) {
    $25 = Math_imul($21, $y$038)|0;
    $26 = (($result) + ($25)|0);
    $packet_idx$034 = 0;
    while(1) {
     $27 = ((($packets) + (($packet_idx$034*3)|0)|0) + 1|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = $28&255;
     if ((($29|0) == 1)) {
      if ($23) {
       $33 = ((($packets) + (($packet_idx$034*3)|0)|0) + 2|0);
       $dest$124 = $26;$left$025 = $width;
       while(1) {
        $41 = (_stbi__get8($s)|0);
        $42 = (_stbi__at_eof($s)|0);
        $43 = ($42|0)==(0);
        if (!($43)) {
         label = 24;
         break L11;
        }
        $44 = HEAP8[$33>>0]|0;
        $45 = $44&255;
        $46 = (_stbi__readval($s,$45,$value)|0);
        $47 = ($46|0)==(0|0);
        if ($47) {
         $$0 = 0;
         label = 52;
         break L11;
        }
        $48 = $41&255;
        $49 = $left$025&255;
        $50 = ($48|0)>($left$025|0);
        $$ = $50 ? $49 : $41;
        $51 = $$&255;
        $52 = ($$<<24>>24)==(0);
        if ($52) {
         $dest$2$lcssa = $dest$124;
        } else {
         $53 = $$&255;
         $54 = ($$&255)>(1);
         $$op = $53 << 2;
         $55 = $54 ? $$op : 4;
         $dest$216 = $dest$124;$i$017 = 0;
         while(1) {
          $56 = HEAP8[$33>>0]|0;
          $57 = $56&255;
          _stbi__copyval($57,$dest$216,$value);
          $58 = (($i$017) + 1)|0;
          $59 = (($dest$216) + 4|0);
          $60 = ($58|0)<($51|0);
          if ($60) {
           $dest$216 = $59;$i$017 = $58;
          } else {
           break;
          }
         }
         $scevgep47 = (($dest$124) + ($55)|0);
         $dest$2$lcssa = $scevgep47;
        }
        $61 = (($left$025) - ($51))|0;
        $62 = ($61|0)>(0);
        if ($62) {
         $dest$124 = $dest$2$lcssa;$left$025 = $61;
        } else {
         break;
        }
       }
      }
     } else if ((($29|0) == 2)) {
      if ($22) {
       $34 = ((($packets) + (($packet_idx$034*3)|0)|0) + 2|0);
       $35 = ((($packets) + (($packet_idx$034*3)|0)|0) + 2|0);
       $dest$312 = $26;$left2$013 = $width;
       while(1) {
        $63 = (_stbi__get8($s)|0);
        $64 = $63&255;
        $65 = (_stbi__at_eof($s)|0);
        $66 = ($65|0)==(0);
        if (!($66)) {
         label = 32;
         break L11;
        }
        $67 = ($63<<24>>24)<(0);
        if ($67) {
         $68 = ($63<<24>>24)==(-128);
         if ($68) {
          $69 = (_stbi__get16be($s)|0);
          $count3$0 = $69;
         } else {
          $70 = (($64) + -127)|0;
          $count3$0 = $70;
         }
         $71 = ($count3$0|0)>($left2$013|0);
         if ($71) {
          label = 38;
          break L11;
         }
         $72 = HEAP8[$34>>0]|0;
         $73 = $72&255;
         $74 = (_stbi__readval($s,$73,$value5)|0);
         $75 = ($74|0)==(0|0);
         if ($75) {
          $$0 = 0;
          label = 52;
          break L11;
         }
         $76 = ($count3$0|0)>(0);
         if ($76) {
          $77 = $count3$0 << 2;
          $dest$47 = $dest$312;$i6$08 = 0;
          while(1) {
           $78 = HEAP8[$34>>0]|0;
           $79 = $78&255;
           _stbi__copyval($79,$dest$47,$value5);
           $80 = (($i6$08) + 1)|0;
           $81 = (($dest$47) + 4|0);
           $exitcond = ($80|0)==($count3$0|0);
           if ($exitcond) {
            break;
           } else {
            $dest$47 = $81;$i6$08 = $80;
           }
          }
          $scevgep = (($dest$312) + ($77)|0);
          $count3$1 = $count3$0;$dest$6 = $scevgep;
         } else {
          $count3$1 = $count3$0;$dest$6 = $dest$312;
         }
        } else {
         $82 = (($64) + 1)|0;
         $83 = ($64|0)<($left2$013|0);
         if (!($83)) {
          label = 45;
          break L11;
         }
         $84 = HEAP8[$35>>0]|0;
         $85 = $84&255;
         $dest$53 = $dest$312;$i4$04 = 0;
         while(1) {
          $86 = (_stbi__readval($s,$85,$dest$53)|0);
          $87 = ($86|0)==(0|0);
          if ($87) {
           $$0 = 0;
           label = 52;
           break L11;
          }
          $88 = (($i4$04) + 1)|0;
          $89 = (($dest$53) + 4|0);
          $90 = ($88|0)<($82|0);
          if ($90) {
           $dest$53 = $89;$i4$04 = $88;
          } else {
           $count3$1 = $82;$dest$6 = $89;
           break;
          }
         }
        }
        $91 = (($left2$013) - ($count3$1))|0;
        $92 = ($91|0)>(0);
        if ($92) {
         $dest$312 = $dest$6;$left2$013 = $91;
        } else {
         break;
        }
       }
      }
     } else if ((($29|0) == 0)) {
      if ($24) {
       $30 = ((($packets) + (($packet_idx$034*3)|0)|0) + 2|0);
       $31 = HEAP8[$30>>0]|0;
       $32 = $31&255;
       $dest$030 = $26;$x$031 = 0;
       while(1) {
        $36 = (_stbi__readval($s,$32,$dest$030)|0);
        $37 = ($36|0)==(0|0);
        if ($37) {
         $$0 = 0;
         label = 52;
         break L11;
        }
        $38 = (($x$031) + 1)|0;
        $39 = (($dest$030) + 4|0);
        $40 = ($38|0)<($width|0);
        if ($40) {
         $dest$030 = $39;$x$031 = $38;
        } else {
         break;
        }
       }
      }
     } else {
      label = 20;
      break L11;
     }
     $93 = (($packet_idx$034) + 1)|0;
     $94 = ($93|0)<($1|0);
     if ($94) {
      $packet_idx$034 = $93;
     } else {
      break;
     }
    }
   }
   $95 = (($y$038) + 1)|0;
   $96 = ($95|0)<($height|0);
   if ($96) {
    $y$038 = $95;
   } else {
    $$0 = $result;
    label = 52;
    break;
   }
  }
  if ((label|0) == 20) {
   _stbi__err(15136);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 24) {
   _stbi__err(15120);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 32) {
   _stbi__err(15120);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 38) {
   _stbi__err(15120);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 45) {
   _stbi__err(15120);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 52) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 return 0|0;
}
function _stbi__readval($s,$channel,$dest) {
 $s = $s|0;
 $channel = $channel|0;
 $dest = $dest|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$02 = 0, $mask$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$02 = 0;$mask$01 = 128;
 while(1) {
  $0 = $mask$01 & $channel;
  $1 = ($0|0)==(0);
  if (!($1)) {
   $2 = (_stbi__at_eof($s)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    break;
   }
   $4 = (_stbi__get8($s)|0);
   $5 = (($dest) + ($i$02)|0);
   HEAP8[$5>>0] = $4;
  }
  $6 = (($i$02) + 1)|0;
  $7 = $mask$01 >> 1;
  $8 = ($6|0)<(4);
  if ($8) {
   $i$02 = $6;$mask$01 = $7;
  } else {
   $$0 = $dest;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($$0|0);
 }
 _stbi__err(15120);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__copyval($channel,$dest,$src) {
 $channel = $channel|0;
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $channel & 128;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP8[$src>>0]|0;
  HEAP8[$dest>>0] = $2;
 }
 $3 = $channel & 64;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (($src) + 1|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = (($dest) + 1|0);
  HEAP8[$7>>0] = $6;
 }
 $8 = $channel & 32;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = (($src) + 2|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = (($dest) + 2|0);
  HEAP8[$12>>0] = $11;
 }
 $13 = $channel & 16;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (($src) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = (($dest) + 3|0);
 HEAP8[$17>>0] = $16;
 STACKTOP = sp;return;
}
function _stbi__pic_test_core($s) {
 $s = $s|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond = 0, $i$01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__pic_is4($s,15152)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  (_stbi__get8($s)|0);
  $2 = (($i$01) + 1)|0;
  $exitcond = ($2|0)==(84);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $2;
  }
 }
 $3 = (_stbi__pic_is4($s,15160)|0);
 $not$ = ($3|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__pic_is4($s,$str) {
 $s = $s|0;
 $str = $str|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $2 = (_stbi__get8($s)|0);
  $3 = (($str) + ($i$01)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($2<<24>>24)==($4<<24>>24);
  $1 = (($i$01) + 1)|0;
  if (!($5)) {
   $$0 = 0;
   label = 4;
   break;
  }
  $0 = ($1|0)<(4);
  if ($0) {
   $i$01 = $1;
  } else {
   $$0 = 1;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stbi__gif_load_next($s,$g,$comp,$req_comp) {
 $s = $s|0;
 $g = $g|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (_stbi__gif_header($s,$g,$comp,0)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $5 = HEAP32[$g>>2]|0;
   $6 = $5 << 2;
   $7 = (($g) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = Math_imul($6, $8)|0;
   $10 = (_stbi__malloc($9)|0);
   HEAP32[$0>>2] = $10;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    _stbi__fill_gif_background($g);
    break;
   }
   _stbi__err(12832);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $12 = (($g) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 28;
   $15 = ($14|0)==(12);
   if ($15) {
    $16 = HEAP32[$g>>2]|0;
    $17 = $16 << 2;
    $18 = (($g) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = Math_imul($17, $19)|0;
    $21 = (_stbi__malloc($20)|0);
    HEAP32[$0>>2] = $21;
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     $23 = HEAP32[$g>>2]|0;
     $24 = HEAP32[$18>>2]|0;
     $25 = $23 << 2;
     $26 = Math_imul($25, $24)|0;
     _memcpy(($21|0),($1|0),($26|0))|0;
     break;
    }
    _stbi__err(12832);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $27 = (($g) + 28|0);
 $28 = (($g) + 24|0);
 L17: while(1) {
  $29 = (_stbi__get8($s)|0);
  $30 = $29&255;
  if ((($30|0) == 44)) {
   label = 12;
   break;
  } else if ((($30|0) == 59)) {
   label = 38;
   break;
  } else if (!((($30|0) == 33))) {
   label = 39;
   break;
  }
  $108 = (_stbi__get8($s)|0);
  $109 = ($108<<24>>24)==(-7);
  do {
   if ($109) {
    $112 = (_stbi__get8($s)|0);
    $113 = ($112<<24>>24)==(4);
    if ($113) {
     $114 = (_stbi__get8($s)|0);
     $115 = $114&255;
     HEAP32[$27>>2] = $115;
     (_stbi__get16le($s)|0);
     $116 = (_stbi__get8($s)|0);
     $117 = $116&255;
     HEAP32[$28>>2] = $117;
     break;
    } else {
     $118 = $112&255;
     _stbi__skip($s,$118);
     continue L17;
    }
   }
  } while(0);
  $110 = (_stbi__get8($s)|0);
  $111 = ($110<<24>>24)==(0);
  if ($111) {
   continue;
  } else {
   $120 = $110;
  }
  while(1) {
   $119 = $120&255;
   _stbi__skip($s,$119);
   $121 = (_stbi__get8($s)|0);
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    continue L17;
   } else {
    $120 = $121;
   }
  }
 }
 if ((label|0) == 12) {
  $31 = (_stbi__get16le($s)|0);
  $32 = (_stbi__get16le($s)|0);
  $33 = (_stbi__get16le($s)|0);
  $34 = (_stbi__get16le($s)|0);
  $35 = (($33) + ($31))|0;
  $36 = HEAP32[$g>>2]|0;
  $37 = ($35|0)>($36|0);
  if (!($37)) {
   $38 = (($34) + ($32))|0;
   $39 = (($g) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($38|0)>($40|0);
   if (!($41)) {
    $42 = $36 << 2;
    $43 = (($g) + 18504|0);
    HEAP32[$43>>2] = $42;
    $44 = $31 << 2;
    $45 = (($g) + 18480|0);
    HEAP32[$45>>2] = $44;
    $46 = HEAP32[$43>>2]|0;
    $47 = Math_imul($46, $32)|0;
    $48 = (($g) + 18484|0);
    HEAP32[$48>>2] = $47;
    $49 = HEAP32[$45>>2]|0;
    $50 = $33 << 2;
    $51 = (($49) + ($50))|0;
    $52 = (($g) + 18488|0);
    HEAP32[$52>>2] = $51;
    $53 = HEAP32[$48>>2]|0;
    $54 = HEAP32[$43>>2]|0;
    $55 = Math_imul($54, $34)|0;
    $56 = (($55) + ($53))|0;
    $57 = (($g) + 18492|0);
    HEAP32[$57>>2] = $56;
    $58 = HEAP32[$45>>2]|0;
    $59 = (($g) + 18496|0);
    HEAP32[$59>>2] = $58;
    $60 = HEAP32[$48>>2]|0;
    $61 = (($g) + 18500|0);
    HEAP32[$61>>2] = $60;
    $62 = (_stbi__get8($s)|0);
    $63 = $62&255;
    $64 = (($g) + 18476|0);
    HEAP32[$64>>2] = $63;
    $65 = $63 & 64;
    $66 = ($65|0)==(0);
    $67 = HEAP32[$43>>2]|0;
    if ($66) {
     $71 = (($g) + 18472|0);
     HEAP32[$71>>2] = $67;
     $72 = (($g) + 18468|0);
     HEAP32[$72>>2] = 0;
    } else {
     $68 = $67 << 3;
     $69 = (($g) + 18472|0);
     HEAP32[$69>>2] = $68;
     $70 = (($g) + 18468|0);
     HEAP32[$70>>2] = 3;
    }
    $73 = HEAP32[$64>>2]|0;
    $74 = $73 & 128;
    $75 = ($74|0)==(0);
    if ($75) {
     $87 = (($g) + 12|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $88 & 128;
     $90 = ($89|0)==(0);
     if ($90) {
      _stbi__err(15288);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      $i$02 = 0;
     }
     while(1) {
      $91 = ((($g) + ($i$02<<2)|0) + 35|0);
      HEAP8[$91>>0] = -1;
      $92 = (($i$02) + 1)|0;
      $exitcond = ($92|0)==(256);
      if ($exitcond) {
       break;
      } else {
       $i$02 = $92;
      }
     }
     $93 = (($g) + 24|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($94|0)>(-1);
     if ($95) {
      $96 = (($g) + 28|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = $97 & 1;
      $99 = ($98|0)==(0);
      if (!($99)) {
       $100 = ((($g) + ($94<<2)|0) + 35|0);
       HEAP8[$100>>0] = 0;
      }
     }
     $101 = (($g) + 32|0);
     $102 = (($g) + 18464|0);
     HEAP32[$102>>2] = $101;
    } else {
     $76 = (($g) + 1056|0);
     $77 = $73 & 7;
     $78 = 2 << $77;
     $79 = (($g) + 28|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $80 & 1;
     $82 = ($81|0)==(0);
     if ($82) {
      $85 = -1;
     } else {
      $83 = (($g) + 24|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $84;
     }
     _stbi__gif_parse_colortable($s,$76,$78,$85);
     $86 = (($g) + 18464|0);
     HEAP32[$86>>2] = $76;
    }
    $103 = (_stbi__process_gif_raster($s,$g)|0);
    $104 = ($103|0)==(0|0);
    if ($104) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    if ((($req_comp|0) == 0) | (($req_comp|0) == 4)) {
     $$0 = $103;
     STACKTOP = sp;return ($$0|0);
    }
    $105 = HEAP32[$g>>2]|0;
    $106 = HEAP32[$39>>2]|0;
    $107 = (_stbi__convert_format($103,4,$req_comp,$105,$106)|0);
    $$0 = $107;
    STACKTOP = sp;return ($$0|0);
   }
  }
  _stbi__err(15264);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 38) {
  $$0 = $s;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 39) {
  _stbi__err(15312);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stbi__fill_gif_background($g) {
 $g = $g|0;
 var $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($g) + ($1<<2)|0) + 32|0);
 $3 = HEAP32[$g>>2]|0;
 $4 = (($g) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3 << 2;
 $7 = Math_imul($6, $5)|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = (($g) + 8|0);
 $10 = ((($g) + ($1<<2)|0) + 34|0);
 $11 = ((($g) + ($1<<2)|0) + 33|0);
 $12 = ((($g) + ($1<<2)|0) + 35|0);
 $i$04 = 0;
 while(1) {
  $13 = HEAP32[$9>>2]|0;
  $14 = (($13) + ($i$04)|0);
  $15 = HEAP8[$10>>0]|0;
  HEAP8[$14>>0] = $15;
  $16 = HEAP8[$11>>0]|0;
  $$sum1 = $i$04 | 1;
  $17 = (($13) + ($$sum1)|0);
  HEAP8[$17>>0] = $16;
  $18 = HEAP8[$2>>0]|0;
  $$sum2 = $i$04 | 2;
  $19 = (($13) + ($$sum2)|0);
  HEAP8[$19>>0] = $18;
  $20 = HEAP8[$12>>0]|0;
  $$sum3 = $i$04 | 3;
  $21 = (($13) + ($$sum3)|0);
  HEAP8[$21>>0] = $20;
  $22 = (($i$04) + 4)|0;
  $23 = HEAP32[$g>>2]|0;
  $24 = HEAP32[$4>>2]|0;
  $25 = $23 << 2;
  $26 = Math_imul($25, $24)|0;
  $27 = ($22|0)<($26|0);
  if ($27) {
   $i$04 = $22;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _stbi__process_gif_raster($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $$0 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $avail$0$ph = 0, $avail$0$ph7 = 0;
 var $avail$1 = 0, $bits$0$lcssa = 0, $bits$0$ph = 0, $bits$0$ph3 = 0, $bits$0$ph9 = 0, $bits$015 = 0, $code$022 = 0, $codemask$0$ph = 0, $codemask$0$ph$in = 0, $codesize$0$ph = 0, $codesize$0$ph$in = 0, $exitcond = 0, $first$0$ph = 0, $len$0$lcssa = 0, $len$0$ph = 0, $len$0$ph11 = 0, $len$0$ph5 = 0, $len$017 = 0, $len$1 = 0, $oldcode$0$ph = 0;
 var $oldcode$0$ph8 = 0, $or$cond = 0, $valid_bits$0$lcssa = 0, $valid_bits$0$ph = 0, $valid_bits$0$ph10 = 0, $valid_bits$0$ph4 = 0, $valid_bits$016 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = $0&255;
 $2 = 1 << $1;
 $3 = ($2|0)>(0);
 if ($3) {
  $code$022 = 0;
  while(1) {
   $4 = ((($g) + ($code$022<<2)|0) + 2080|0);
   HEAP16[$4>>1] = -1;
   $5 = $code$022&255;
   $6 = ((($g) + ($code$022<<2)|0) + 2082|0);
   HEAP8[$6>>0] = $5;
   $7 = ((($g) + ($code$022<<2)|0) + 2083|0);
   HEAP8[$7>>0] = $5;
   $8 = (($code$022) + 1)|0;
   $exitcond = ($8|0)==($2|0);
   if ($exitcond) {
    break;
   } else {
    $code$022 = $8;
   }
  }
 }
 $9 = (($2) + 2)|0;
 $10 = (($2) + 1)|0;
 $bits$0$ph = 0;$first$0$ph = 0;$len$0$ph = 0;$valid_bits$0$ph = 0;
 L5: while(1) {
  $avail$0$ph = $9;$bits$0$ph3 = $bits$0$ph;$codesize$0$ph$in = $1;$len$0$ph5 = $len$0$ph;$oldcode$0$ph = -1;$valid_bits$0$ph4 = $valid_bits$0$ph;
  L7: while(1) {
   $codesize$0$ph = (($codesize$0$ph$in) + 1)|0;
   $codemask$0$ph$in = 1 << $codesize$0$ph;
   $codemask$0$ph = (($codemask$0$ph$in) + -1)|0;
   $avail$0$ph7 = $avail$0$ph;$bits$0$ph9 = $bits$0$ph3;$len$0$ph11 = $len$0$ph5;$oldcode$0$ph8 = $oldcode$0$ph;$valid_bits$0$ph10 = $valid_bits$0$ph4;
   while(1) {
    $11 = ($valid_bits$0$ph10|0)<($codesize$0$ph|0);
    if ($11) {
     $bits$015 = $bits$0$ph9;$len$017 = $len$0$ph11;$valid_bits$016 = $valid_bits$0$ph10;
     while(1) {
      $12 = ($len$017|0)==(0);
      if ($12) {
       $13 = (_stbi__get8($s)|0);
       $14 = $13&255;
       $15 = ($13<<24>>24)==(0);
       if ($15) {
        label = 9;
        break L5;
       } else {
        $len$1 = $14;
       }
      } else {
       $len$1 = $len$017;
      }
      $18 = (($len$1) + -1)|0;
      $19 = (_stbi__get8($s)|0);
      $20 = $19&255;
      $21 = $20 << $valid_bits$016;
      $22 = $21 | $bits$015;
      $23 = (($valid_bits$016) + 8)|0;
      $24 = ($23|0)<($codesize$0$ph|0);
      if ($24) {
       $bits$015 = $22;$len$017 = $18;$valid_bits$016 = $23;
      } else {
       $bits$0$lcssa = $22;$len$0$lcssa = $18;$valid_bits$0$lcssa = $23;
       break;
      }
     }
    } else {
     $bits$0$lcssa = $bits$0$ph9;$len$0$lcssa = $len$0$ph11;$valid_bits$0$lcssa = $valid_bits$0$ph10;
    }
    $25 = $bits$0$lcssa & $codemask$0$ph;
    $26 = $bits$0$lcssa >> $codesize$0$ph;
    $27 = (($valid_bits$0$lcssa) - ($codesize$0$ph))|0;
    $28 = ($25|0)==($2|0);
    if ($28) {
     $bits$0$ph = $26;$first$0$ph = 1;$len$0$ph = $len$0$lcssa;$valid_bits$0$ph = $27;
     continue L5;
    }
    $29 = ($25|0)==($10|0);
    if ($29) {
     label = 13;
     break L5;
    }
    $38 = ($25|0)>($avail$0$ph7|0);
    if ($38) {
     label = 28;
     break L5;
    }
    if (!($first$0$ph)) {
     label = 18;
     break L5;
    }
    $39 = ($oldcode$0$ph8|0)>(-1);
    if ($39) {
     $40 = (($avail$0$ph7) + 1)|0;
     $41 = ($avail$0$ph7|0)>(4095);
     if ($41) {
      label = 21;
      break L5;
     }
     $42 = $oldcode$0$ph8&65535;
     $43 = ((($g) + ($avail$0$ph7<<2)|0) + 2080|0);
     HEAP16[$43>>1] = $42;
     $44 = ((($g) + ($oldcode$0$ph8<<2)|0) + 2082|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = ((($g) + ($avail$0$ph7<<2)|0) + 2082|0);
     HEAP8[$46>>0] = $45;
     $47 = ($25|0)==($40|0);
     if ($47) {
      $$sink = $45;
     } else {
      $48 = ((($g) + ($25<<2)|0) + 2082|0);
      $49 = HEAP8[$48>>0]|0;
      $$sink = $49;
     }
     $50 = ((($g) + ($avail$0$ph7<<2)|0) + 2083|0);
     HEAP8[$50>>0] = $$sink;
     $avail$1 = $40;
    } else {
     $51 = ($25|0)==($avail$0$ph7|0);
     if ($51) {
      label = 26;
      break L5;
     } else {
      $avail$1 = $avail$0$ph7;
     }
    }
    $52 = $25&65535;
    _stbi__out_gif_code($g,$52);
    $53 = $avail$1 & $codemask$0$ph;
    $54 = ($53|0)==(0);
    $55 = ($avail$1|0)<(4096);
    $or$cond = $54 & $55;
    if ($or$cond) {
     $avail$0$ph = $avail$1;$bits$0$ph3 = $26;$codesize$0$ph$in = $codesize$0$ph;$len$0$ph5 = $len$0$lcssa;$oldcode$0$ph = $25;$valid_bits$0$ph4 = $27;
     continue L7;
    } else {
     $avail$0$ph7 = $avail$1;$bits$0$ph9 = $26;$len$0$ph11 = $len$0$lcssa;$oldcode$0$ph8 = $25;$valid_bits$0$ph10 = $27;
    }
   }
  }
 }
 if ((label|0) == 9) {
  $16 = (($g) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 13) {
  _stbi__skip($s,$len$0$lcssa);
  $30 = (_stbi__get8($s)|0);
  $31 = ($30<<24>>24)==(0);
  if (!($31)) {
   $33 = $30;
   while(1) {
    $32 = $33&255;
    _stbi__skip($s,$32);
    $34 = (_stbi__get8($s)|0);
    $35 = ($34<<24>>24)==(0);
    if ($35) {
     break;
    } else {
     $33 = $34;
    }
   }
  }
  $36 = (($g) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $$0 = $37;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 18) {
  _stbi__err(15328);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 21) {
  _stbi__err(15344);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  _stbi__err(15360);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 28) {
  _stbi__err(15360);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stbi__out_gif_code($g,$code) {
 $g = $g|0;
 $code = $code|0;
 var $$pr = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $code&65535;
 $1 = ((($g) + ($0<<2)|0) + 2080|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)>(-1);
 if ($3) {
  _stbi__out_gif_code($g,$2);
 }
 $4 = (($g) + 18500|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($g) + 18492|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = (($g) + 18496|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($5))|0;
 $12 = (($g) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($g) + ($0<<2)|0) + 2083|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 2;
 $18 = (($g) + 18464|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum1 = $17 | 3;
 $20 = (($19) + ($$sum1)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)<(0);
 if ($22) {
  $23 = (($19) + ($17)|0);
  $24 = (($13) + ($11)|0);
  $$sum2 = $17 | 2;
  $25 = (($19) + ($$sum2)|0);
  $26 = HEAP8[$25>>0]|0;
  HEAP8[$24>>0] = $26;
  $$sum3 = $17 | 1;
  $27 = (($19) + ($$sum3)|0);
  $28 = HEAP8[$27>>0]|0;
  $$sum = (($11) + 1)|0;
  $29 = (($13) + ($$sum)|0);
  HEAP8[$29>>0] = $28;
  $30 = HEAP8[$23>>0]|0;
  $$sum4 = (($11) + 2)|0;
  $31 = (($13) + ($$sum4)|0);
  HEAP8[$31>>0] = $30;
  $32 = HEAP8[$20>>0]|0;
  $$sum5 = (($11) + 3)|0;
  $33 = (($13) + ($$sum5)|0);
  HEAP8[$33>>0] = $32;
 }
 $34 = HEAP32[$9>>2]|0;
 $35 = (($34) + 4)|0;
 HEAP32[$9>>2] = $35;
 $36 = (($g) + 18488|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35|0)<($37|0);
 if ($38) {
  STACKTOP = sp;return;
 }
 $39 = (($g) + 18480|0);
 $40 = HEAP32[$39>>2]|0;
 HEAP32[$9>>2] = $40;
 $41 = (($g) + 18472|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$4>>2]|0;
 $44 = (($43) + ($42))|0;
 HEAP32[$4>>2] = $44;
 $45 = (($g) + 18468|0);
 $46 = HEAP32[$6>>2]|0;
 $47 = ($44|0)<($46|0);
 if ($47) {
  STACKTOP = sp;return;
 }
 $48 = (($g) + 18504|0);
 $49 = (($g) + 18484|0);
 $$pr = HEAP32[$45>>2]|0;
 $51 = $$pr;
 while(1) {
  $50 = ($51|0)>(0);
  if (!($50)) {
   label = 11;
   break;
  }
  $52 = HEAP32[$48>>2]|0;
  $53 = $52 << $51;
  HEAP32[$41>>2] = $53;
  $54 = HEAP32[$49>>2]|0;
  $55 = $53 >> 1;
  $56 = (($55) + ($54))|0;
  HEAP32[$4>>2] = $56;
  $57 = HEAP32[$45>>2]|0;
  $58 = (($57) + -1)|0;
  HEAP32[$45>>2] = $58;
  $59 = HEAP32[$4>>2]|0;
  $60 = HEAP32[$6>>2]|0;
  $61 = ($59|0)<($60|0);
  if ($61) {
   label = 11;
   break;
  } else {
   $51 = $58;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _stbi__gif_test_raw($s) {
 $s = $s|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = ($0<<24>>24)==(71);
 if ($1) {
  $2 = (_stbi__get8($s)|0);
  $3 = ($2<<24>>24)==(73);
  if ($3) {
   $4 = (_stbi__get8($s)|0);
   $5 = ($4<<24>>24)==(70);
   if ($5) {
    $6 = (_stbi__get8($s)|0);
    $7 = ($6<<24>>24)==(56);
    if ($7) {
     $8 = (_stbi__get8($s)|0);
     if ((($8<<24>>24) == 55) | (($8<<24>>24) == 57)) {
      $9 = (_stbi__get8($s)|0);
      $10 = ($9<<24>>24)==(97);
      $$ = $10&1;
      $$0 = $$;
     } else {
      $$0 = 0;
     }
    } else {
     $$0 = 0;
    }
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _stbi__high_bit($z) {
 $z = $z|0;
 var $$ = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$n$3 = 0, $$z = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $n$1 = 0, $n$2 = 0, $n$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)==(0);
 if ($0) {
  $$01 = -1;
  STACKTOP = sp;return ($$01|0);
 }
 $1 = ($z>>>0)>(65535);
 $2 = $z >>> 16;
 $$z = $1 ? $2 : $z;
 $$ = $1 ? 16 : 0;
 $3 = ($$z>>>0)>(255);
 if ($3) {
  $4 = $$ | 8;
  $5 = $$z >>> 8;
  $$1 = $5;$n$1 = $4;
 } else {
  $$1 = $$z;$n$1 = $$;
 }
 $6 = ($$1>>>0)>(15);
 if ($6) {
  $7 = (($n$1) + 4)|0;
  $8 = $$1 >>> 4;
  $$2 = $8;$n$2 = $7;
 } else {
  $$2 = $$1;$n$2 = $n$1;
 }
 $9 = ($$2>>>0)>(3);
 if ($9) {
  $10 = (($n$2) + 2)|0;
  $11 = $$2 >>> 2;
  $$3 = $11;$n$3 = $10;
 } else {
  $$3 = $$2;$n$3 = $n$2;
 }
 $12 = ($$3>>>0)>(1);
 $13 = $12&1;
 $$n$3 = (($13) + ($n$3))|0;
 $$01 = $$n$3;
 STACKTOP = sp;return ($$01|0);
}
function _stbi__bitcount($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a & 1431655765;
 $1 = $a >>> 1;
 $2 = $1 & 1431655765;
 $3 = (($2) + ($0))|0;
 $4 = $3 & 858993459;
 $5 = $3 >>> 2;
 $6 = $5 & 858993459;
 $7 = (($6) + ($4))|0;
 $8 = $7 >>> 4;
 $9 = (($8) + ($7))|0;
 $10 = $9 & 252645135;
 $11 = $10 >>> 8;
 $12 = (($11) + ($10))|0;
 $13 = $12 >>> 16;
 $14 = (($13) + ($12))|0;
 $15 = $14 & 255;
 STACKTOP = sp;return ($15|0);
}
function _stbi__shiftsigned($v,$shift,$bits) {
 $v = $v|0;
 $shift = $shift|0;
 $bits = $bits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $result$0$lcssa = 0, $result$01 = 0, $z$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($shift|0)<(0);
 if ($0) {
  $1 = (0 - ($shift))|0;
  $2 = $v << $1;
  $$0 = $2;
 } else {
  $3 = $v >> $shift;
  $$0 = $3;
 }
 $4 = ($bits|0)<(8);
 if ($4) {
  $result$01 = $$0;$z$02 = $bits;
 } else {
  $result$0$lcssa = $$0;
  STACKTOP = sp;return ($result$0$lcssa|0);
 }
 while(1) {
  $5 = $$0 >> $z$02;
  $6 = (($5) + ($result$01))|0;
  $7 = (($z$02) + ($bits))|0;
  $8 = ($7|0)<(8);
  if ($8) {
   $result$01 = $6;$z$02 = $7;
  } else {
   $result$0$lcssa = $6;
   break;
  }
 }
 STACKTOP = sp;return ($result$0$lcssa|0);
}
function _stbi__bmp_test_raw($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = ($0<<24>>24)==(66);
 L1: do {
  if ($1) {
   $2 = (_stbi__get8($s)|0);
   $3 = ($2<<24>>24)==(77);
   if ($3) {
    (_stbi__get32le($s)|0);
    (_stbi__get16le($s)|0);
    (_stbi__get16le($s)|0);
    (_stbi__get32le($s)|0);
    $4 = (_stbi__get32le($s)|0);
    switch ($4|0) {
    case 124: case 12: case 40: case 56: case 108:  {
     $$0 = 1;
     break L1;
     break;
    }
    default: {
    }
    }
    $$0 = 0;
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _stbi__do_png($p,$x,$y,$n,$req_comp) {
 $p = $p|0;
 $x = $x|0;
 $y = $y|0;
 $n = $n|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, $result$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($req_comp>>>0)>(4);
 if ($0) {
  _stbi__err(15520);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_stbi__parse_png_file($p,0,$req_comp)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $result$1 = 0;
 } else {
  $3 = (($p) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$3>>2] = 0;
  $5 = ($req_comp|0)==(0);
  if ($5) {
   $result$0 = $4;
  } else {
   $6 = HEAP32[$p>>2]|0;
   $7 = (($6) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==($req_comp|0);
   if ($9) {
    $result$0 = $4;
   } else {
    $10 = HEAP32[$6>>2]|0;
    $11 = (($6) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (_stbi__convert_format($4,$8,$req_comp,$10,$12)|0);
    $14 = HEAP32[$p>>2]|0;
    $15 = (($14) + 12|0);
    HEAP32[$15>>2] = $req_comp;
    $16 = ($13|0)==(0|0);
    if ($16) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $result$0 = $13;
    }
   }
  }
  $17 = HEAP32[$p>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$x>>2] = $18;
  $19 = HEAP32[$p>>2]|0;
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$y>>2] = $21;
  $22 = ($n|0)==(0|0);
  if ($22) {
   $result$1 = $result$0;
  } else {
   $23 = HEAP32[$p>>2]|0;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$n>>2] = $25;
   $result$1 = $result$0;
  }
 }
 $26 = (($p) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 _free($27);
 HEAP32[$26>>2] = 0;
 $28 = (($p) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 _free($29);
 HEAP32[$28>>2] = 0;
 $30 = (($p) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 _free($31);
 HEAP32[$30>>2] = 0;
 $$0 = $result$1;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__setup_jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($j) + 18176|0);
 HEAP32[$0>>2] = 2;
 $1 = (($j) + 18180|0);
 HEAP32[$1>>2] = 1;
 $2 = (($j) + 18184|0);
 HEAP32[$2>>2] = 1;
 STACKTOP = sp;return;
}
function _load_jpeg_image($z,$out_x,$out_y,$comp,$req_comp) {
 $z = $z|0;
 $out_x = $out_x|0;
 $out_y = $out_y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $$1 = 0, $$in = 0, $$in2 = 0, $$pr = 0, $$pr3 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $coutput = 0, $exitcond = 0, $i$017 = 0, $i$112 = 0, $i$28 = 0, $j$020 = 0, $k$023 = 0, $k$16 = 0;
 var $or$cond = 0, $out$016 = 0, $out$17 = 0, $res_comp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $coutput = sp + 128|0;
 $res_comp = sp;
 $0 = HEAP32[$z>>2]|0;
 $1 = (($0) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ($req_comp>>>0)>(4);
 if ($2) {
  _stbi__err(15520);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $3 = (_stbi__decode_jpeg_image($z)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  _stbi__cleanup_jpeg($z);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $5 = ($req_comp|0)==(0);
 if ($5) {
  $6 = HEAP32[$z>>2]|0;
  $7 = (($6) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $14 = $8;
 } else {
  $14 = $req_comp;
 }
 $9 = HEAP32[$z>>2]|0;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(3);
 $13 = ($14|0)<(3);
 $or$cond = $12 & $13;
 $$ = $or$cond ? 1 : $11;
 $15 = ($$|0)>(0);
 L12: do {
  if ($15) {
   $16 = (($z) + 17796|0);
   $17 = (($z) + 17800|0);
   $18 = (($z) + 18184|0);
   $k$023 = 0;
   while(1) {
    $19 = (($res_comp) + ($k$023<<5)|0);
    $20 = HEAP32[$z>>2]|0;
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + 3)|0;
    $23 = (_stbi__malloc($22)|0);
    $24 = ((($z) + (($k$023*72)|0)|0) + 17876|0);
    HEAP32[$24>>2] = $23;
    $25 = ($23|0)==(0|0);
    if ($25) {
     break;
    }
    $26 = HEAP32[$16>>2]|0;
    $27 = ((($z) + (($k$023*72)|0)|0) + 17824|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($26|0) / ($28|0))&-1;
    $30 = ((($res_comp) + ($k$023<<5)|0) + 12|0);
    HEAP32[$30>>2] = $29;
    $31 = HEAP32[$17>>2]|0;
    $32 = ((($z) + (($k$023*72)|0)|0) + 17828|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($31|0) / ($33|0))&-1;
    $35 = ((($res_comp) + ($k$023<<5)|0) + 16|0);
    HEAP32[$35>>2] = $34;
    $36 = $34 >> 1;
    $37 = ((($res_comp) + ($k$023<<5)|0) + 24|0);
    HEAP32[$37>>2] = $36;
    $38 = HEAP32[$z>>2]|0;
    $39 = HEAP32[$38>>2]|0;
    $40 = HEAP32[$30>>2]|0;
    $41 = (($39) + -1)|0;
    $42 = (($41) + ($40))|0;
    $43 = (($42>>>0) / ($40>>>0))&-1;
    $44 = ((($res_comp) + ($k$023<<5)|0) + 20|0);
    HEAP32[$44>>2] = $43;
    $45 = ((($res_comp) + ($k$023<<5)|0) + 28|0);
    HEAP32[$45>>2] = 0;
    $46 = ((($z) + (($k$023*72)|0)|0) + 17864|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($res_comp) + ($k$023<<5)|0) + 8|0);
    HEAP32[$48>>2] = $47;
    $49 = ((($res_comp) + ($k$023<<5)|0) + 4|0);
    HEAP32[$49>>2] = $47;
    $50 = HEAP32[$30>>2]|0;
    $51 = ($50|0)==(1);
    do {
     if ($51) {
      $52 = HEAP32[$35>>2]|0;
      $53 = ($52|0)==(1);
      if ($53) {
       HEAP32[$19>>2] = 2;
       break;
      }
      $$pr = HEAP32[$30>>2]|0;
      $54 = ($$pr|0)==(1);
      if ($54) {
       $55 = HEAP32[$35>>2]|0;
       $56 = ($55|0)==(2);
       if ($56) {
        HEAP32[$19>>2] = 3;
       } else {
        label = 17;
       }
      } else {
       $58 = $$pr;
       label = 18;
      }
     } else {
      label = 17;
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     $$pr3 = HEAP32[$30>>2]|0;
     $58 = $$pr3;
     label = 18;
    }
    do {
     if ((label|0) == 18) {
      label = 0;
      $57 = ($58|0)==(2);
      if ($57) {
       $59 = HEAP32[$35>>2]|0;
       $60 = ($59|0)==(1);
       if ($60) {
        HEAP32[$19>>2] = 4;
        break;
       }
      }
      $61 = HEAP32[$30>>2]|0;
      $62 = ($61|0)==(2);
      if ($62) {
       $63 = HEAP32[$35>>2]|0;
       $64 = ($63|0)==(2);
       if ($64) {
        $65 = HEAP32[$18>>2]|0;
        HEAP32[$19>>2] = $65;
        break;
       }
      }
      HEAP32[$19>>2] = 5;
     }
    } while(0);
    $66 = (($k$023) + 1)|0;
    $67 = ($66|0)<($$|0);
    if ($67) {
     $k$023 = $66;
    } else {
     break L12;
    }
   }
   _stbi__cleanup_jpeg($z);
   _stbi__err(12832);
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 $68 = HEAP32[$z>>2]|0;
 $69 = HEAP32[$68>>2]|0;
 $70 = Math_imul($69, $14)|0;
 $71 = (($68) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = Math_imul($70, $72)|0;
 $74 = (($73) + 1)|0;
 $75 = (_stbi__malloc($74)|0);
 $76 = ($75|0)==(0|0);
 if ($76) {
  _stbi__cleanup_jpeg($z);
  _stbi__err(12832);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $77 = HEAP32[$z>>2]|0;
 $78 = (($77) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)==(0);
 if (!($80)) {
  $81 = ($$|0)>(0);
  $82 = ($14|0)>(2);
  $83 = (($z) + 18180|0);
  $84 = (($coutput) + 4|0);
  $85 = (($coutput) + 8|0);
  $86 = ($14|0)==(1);
  $88 = $77;$j$020 = 0;
  while(1) {
   $87 = HEAP32[$88>>2]|0;
   $89 = Math_imul($j$020, $14)|0;
   $90 = Math_imul($89, $87)|0;
   $91 = (($75) + ($90)|0);
   if ($81) {
    $k$16 = 0;
    while(1) {
     $92 = ((($res_comp) + ($k$16<<5)|0) + 24|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ((($res_comp) + ($k$16<<5)|0) + 16|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = $95 >> 1;
     $97 = ($93|0)<($96|0);
     $98 = (($res_comp) + ($k$16<<5)|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = ((($z) + (($k$16*72)|0)|0) + 17876|0);
     $101 = HEAP32[$100>>2]|0;
     if ($97) {
      $104 = ((($res_comp) + ($k$16<<5)|0) + 4|0);
      $105 = ((($res_comp) + ($k$16<<5)|0) + 8|0);
      $$in = $104;$$in2 = $105;
     } else {
      $102 = ((($res_comp) + ($k$16<<5)|0) + 8|0);
      $103 = ((($res_comp) + ($k$16<<5)|0) + 4|0);
      $$in = $102;$$in2 = $103;
     }
     $106 = HEAP32[$$in>>2]|0;
     $107 = HEAP32[$$in2>>2]|0;
     $108 = ((($res_comp) + ($k$16<<5)|0) + 20|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ((($res_comp) + ($k$16<<5)|0) + 12|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = (FUNCTION_TABLE_iiiiii[$99 & 7]($101,$106,$107,$109,$111)|0);
     $113 = (($coutput) + ($k$16<<2)|0);
     HEAP32[$113>>2] = $112;
     $114 = HEAP32[$92>>2]|0;
     $115 = (($114) + 1)|0;
     HEAP32[$92>>2] = $115;
     $116 = HEAP32[$94>>2]|0;
     $117 = ($115|0)<($116|0);
     if (!($117)) {
      HEAP32[$92>>2] = 0;
      $118 = ((($res_comp) + ($k$16<<5)|0) + 8|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ((($res_comp) + ($k$16<<5)|0) + 4|0);
      HEAP32[$120>>2] = $119;
      $121 = ((($res_comp) + ($k$16<<5)|0) + 28|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (($122) + 1)|0;
      HEAP32[$121>>2] = $123;
      $124 = ((($z) + (($k$16*72)|0)|0) + 17852|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ($123|0)<($125|0);
      if ($126) {
       $127 = ((($z) + (($k$16*72)|0)|0) + 17856|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = HEAP32[$118>>2]|0;
       $130 = (($129) + ($128)|0);
       HEAP32[$118>>2] = $130;
      }
     }
     $131 = (($k$16) + 1)|0;
     $exitcond = ($131|0)==($$|0);
     if ($exitcond) {
      break;
     } else {
      $k$16 = $131;
     }
    }
   }
   $132 = HEAP32[$coutput>>2]|0;
   $133 = HEAP32[$z>>2]|0;
   do {
    if ($82) {
     $134 = (($133) + 8|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==(3);
     if ($136) {
      $140 = HEAP32[$83>>2]|0;
      $141 = HEAP32[$84>>2]|0;
      $142 = HEAP32[$85>>2]|0;
      $143 = HEAP32[$133>>2]|0;
      FUNCTION_TABLE_viiiiii[$140 & 1]($91,$132,$141,$142,$143,$14);
      break;
     }
     $137 = HEAP32[$z>>2]|0;
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==(0);
     if (!($139)) {
      $i$017 = 0;$out$016 = $91;
      while(1) {
       $144 = (($132) + ($i$017)|0);
       $145 = HEAP8[$144>>0]|0;
       $146 = (($out$016) + 2|0);
       HEAP8[$146>>0] = $145;
       $147 = (($out$016) + 1|0);
       HEAP8[$147>>0] = $145;
       HEAP8[$out$016>>0] = $145;
       $148 = (($out$016) + 3|0);
       HEAP8[$148>>0] = -1;
       $149 = (($out$016) + ($14)|0);
       $150 = (($i$017) + 1)|0;
       $151 = HEAP32[$z>>2]|0;
       $152 = HEAP32[$151>>2]|0;
       $153 = ($150>>>0)<($152>>>0);
       if ($153) {
        $i$017 = $150;$out$016 = $149;
       } else {
        break;
       }
      }
     }
    } else {
     $154 = HEAP32[$133>>2]|0;
     $155 = ($154|0)==(0);
     if ($86) {
      if ($155) {
       break;
      } else {
       $i$112 = 0;
      }
      while(1) {
       $156 = (($132) + ($i$112)|0);
       $157 = HEAP8[$156>>0]|0;
       $$sum = (($i$112) + ($90))|0;
       $158 = (($75) + ($$sum)|0);
       HEAP8[$158>>0] = $157;
       $159 = (($i$112) + 1)|0;
       $160 = HEAP32[$z>>2]|0;
       $161 = HEAP32[$160>>2]|0;
       $162 = ($159>>>0)<($161>>>0);
       if ($162) {
        $i$112 = $159;
       } else {
        break;
       }
      }
     } else {
      if ($155) {
       break;
      } else {
       $i$28 = 0;$out$17 = $91;
      }
      while(1) {
       $163 = (($132) + ($i$28)|0);
       $164 = HEAP8[$163>>0]|0;
       $165 = (($out$17) + 1|0);
       HEAP8[$out$17>>0] = $164;
       $166 = (($out$17) + 2|0);
       HEAP8[$165>>0] = -1;
       $167 = (($i$28) + 1)|0;
       $168 = HEAP32[$z>>2]|0;
       $169 = HEAP32[$168>>2]|0;
       $170 = ($167>>>0)<($169>>>0);
       if ($170) {
        $i$28 = $167;$out$17 = $166;
       } else {
        break;
       }
      }
     }
    }
   } while(0);
   $171 = (($j$020) + 1)|0;
   $172 = HEAP32[$z>>2]|0;
   $173 = (($172) + 4|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = ($171>>>0)<($174>>>0);
   if ($175) {
    $88 = $172;$j$020 = $171;
   } else {
    break;
   }
  }
 }
 _stbi__cleanup_jpeg($z);
 $176 = HEAP32[$z>>2]|0;
 $177 = HEAP32[$176>>2]|0;
 HEAP32[$out_x>>2] = $177;
 $178 = HEAP32[$z>>2]|0;
 $179 = (($178) + 4|0);
 $180 = HEAP32[$179>>2]|0;
 HEAP32[$out_y>>2] = $180;
 $181 = ($comp|0)==(0|0);
 if ($181) {
  $$1 = $75;
  STACKTOP = sp;return ($$1|0);
 }
 $182 = HEAP32[$z>>2]|0;
 $183 = (($182) + 8|0);
 $184 = HEAP32[$183>>2]|0;
 HEAP32[$comp>>2] = $184;
 $$1 = $75;
 STACKTOP = sp;return ($$1|0);
}
function _stbi__decode_jpeg_image($j) {
 $j = $j|0;
 var $$0 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($j) + 18168|0);
 HEAP32[$0>>2] = 0;
 $1 = (_stbi__decode_jpeg_header($j,0)|0);
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (_stbi__get_marker($j)|0);
   $4 = (($j) + 18116|0);
   $$sink = $3;
   L3: while(1) {
    $5 = $$sink&255;
    L5: do {
     if ((($5|0) == 218)) {
      $6 = (_stbi__process_scan_header($j)|0);
      $7 = ($6|0)==(0);
      if ($7) {
       $$0 = 0;
       break L1;
      }
      $8 = (_stbi__parse_entropy_coded_data($j)|0);
      $9 = ($8|0)==(0);
      if ($9) {
       $$0 = 0;
       break L1;
      }
      $10 = HEAP8[$4>>0]|0;
      $11 = ($10<<24>>24)==(-1);
      if ($11) {
       while(1) {
        $12 = HEAP32[$j>>2]|0;
        $13 = (_stbi__at_eof($12)|0);
        $14 = ($13|0)==(0);
        if (!($14)) {
         break L5;
        }
        $15 = HEAP32[$j>>2]|0;
        $16 = (_stbi__get8($15)|0);
        if ((($16<<24>>24) == -1)) {
         break;
        } else if (!((($16<<24>>24) == 0))) {
         label = 10;
         break L3;
        }
       }
       $17 = HEAP32[$j>>2]|0;
       $18 = (_stbi__get8($17)|0);
       HEAP8[$4>>0] = $18;
      }
     } else if ((($5|0) == 217)) {
      break L3;
     } else {
      $19 = (_stbi__process_marker($j,$5)|0);
      $20 = ($19|0)==(0);
      if ($20) {
       $$0 = 0;
       break L1;
      }
     }
    } while(0);
    $21 = (_stbi__get_marker($j)|0);
    $$sink = $21;
   }
   if ((label|0) == 10) {
    _stbi__err(15536);
    $$0 = 0;
    break;
   }
   $22 = (($j) + 18124|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0);
   if ($24) {
    $$0 = 1;
   } else {
    _stbi__jpeg_finish($j);
    $$0 = 1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _stbi__cleanup_jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$j>>2]|0;
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if ($3) {
  $i$01 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $4 = ((($j) + (($i$01*72)|0)|0) + 17868|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _free($5);
   HEAP32[$4>>2] = 0;
   $7 = ((($j) + (($i$01*72)|0)|0) + 17864|0);
   HEAP32[$7>>2] = 0;
  }
  $8 = ((($j) + (($i$01*72)|0)|0) + 17872|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   _free($9);
   HEAP32[$8>>2] = 0;
   $11 = ((($j) + (($i$01*72)|0)|0) + 17880|0);
   HEAP32[$11>>2] = 0;
  }
  $12 = ((($j) + (($i$01*72)|0)|0) + 17876|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   _free($13);
   HEAP32[$12>>2] = 0;
  }
  $15 = (($i$01) + 1)|0;
  $16 = HEAP32[$j>>2]|0;
  $17 = (($16) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  if ($19) {
   $i$01 = $15;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _resample_row_1($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($in_near|0);
}
function _stbi__resample_row_v_2($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)>(0);
 if ($0) {
  $i$01 = 0;
 } else {
  STACKTOP = sp;return ($out|0);
 }
 while(1) {
  $1 = (($in_near) + ($i$01)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3*3)|0;
  $5 = (($in_far) + ($i$01)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (($7) + 2)|0;
  $9 = (($8) + ($4))|0;
  $10 = $9 >>> 2;
  $11 = $10&255;
  $12 = (($out) + ($i$01)|0);
  HEAP8[$12>>0] = $11;
  $13 = (($i$01) + 1)|0;
  $exitcond = ($13|0)==($w|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $13;
  }
 }
 STACKTOP = sp;return ($out|0);
}
function _stbi__resample_row_h_2($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$0$lcssa = 0, $i$01 = 0, $phitmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)==(1);
 $1 = HEAP8[$in_near>>0]|0;
 if ($0) {
  $2 = (($out) + 1|0);
  HEAP8[$2>>0] = $1;
  HEAP8[$out>>0] = $1;
  STACKTOP = sp;return ($out|0);
 }
 HEAP8[$out>>0] = $1;
 $3 = HEAP8[$in_near>>0]|0;
 $4 = $3&255;
 $5 = ($4*3)|0;
 $6 = (($in_near) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (($8) + 2)|0;
 $10 = (($9) + ($5))|0;
 $11 = $10 >>> 2;
 $12 = $11&255;
 $13 = (($out) + 1|0);
 HEAP8[$13>>0] = $12;
 $14 = (($w) + -1)|0;
 $15 = ($14|0)>(1);
 if ($15) {
  $16 = (($w) + -1)|0;
  $i$01 = 1;
  while(1) {
   $17 = (($in_near) + ($i$01)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = ($19*3)|0;
   $21 = (($20) + 2)|0;
   $22 = (($i$01) + -1)|0;
   $23 = (($in_near) + ($22)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = (($21) + ($25))|0;
   $27 = $26 >>> 2;
   $28 = $27&255;
   $29 = $i$01 << 1;
   $30 = (($out) + ($29)|0);
   HEAP8[$30>>0] = $28;
   $31 = (($i$01) + 1)|0;
   $32 = (($in_near) + ($31)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = (($21) + ($34))|0;
   $36 = $35 >>> 2;
   $37 = $36&255;
   $38 = $29 | 1;
   $39 = (($out) + ($38)|0);
   HEAP8[$39>>0] = $37;
   $exitcond = ($31|0)==($16|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $31;
   }
  }
  $phitmp = $16 << 1;
  $i$0$lcssa = $phitmp;
 } else {
  $i$0$lcssa = 2;
 }
 $40 = (($w) + -2)|0;
 $41 = (($in_near) + ($40)|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ($43*3)|0;
 $45 = (($in_near) + ($14)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = (($47) + 2)|0;
 $49 = (($48) + ($44))|0;
 $50 = $49 >>> 2;
 $51 = $50&255;
 $52 = (($out) + ($i$0$lcssa)|0);
 HEAP8[$52>>0] = $51;
 $53 = HEAP8[$45>>0]|0;
 $54 = $i$0$lcssa | 1;
 $55 = (($out) + ($54)|0);
 HEAP8[$55>>0] = $53;
 STACKTOP = sp;return ($out|0);
}
function _stbi__resample_row_generic($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $exitcond4 = 0, $i$02 = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return ($out|0);
 }
 $1 = ($hs|0)>(0);
 $i$02 = 0;
 while(1) {
  if ($1) {
   $2 = (($in_near) + ($i$02)|0);
   $3 = Math_imul($i$02, $hs)|0;
   $j$01 = 0;
   while(1) {
    $4 = HEAP8[$2>>0]|0;
    $5 = (($j$01) + ($3))|0;
    $6 = (($out) + ($5)|0);
    HEAP8[$6>>0] = $4;
    $7 = (($j$01) + 1)|0;
    $exitcond = ($7|0)==($hs|0);
    if ($exitcond) {
     break;
    } else {
     $j$01 = $7;
    }
   }
  }
  $8 = (($i$02) + 1)|0;
  $exitcond4 = ($8|0)==($w|0);
  if ($exitcond4) {
   break;
  } else {
   $i$02 = $8;
  }
 }
 STACKTOP = sp;return ($out|0);
}
function _stbi__process_scan_header($z) {
 $z = $z|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $9 = 0, $i$09 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $which$0$lcssa = 0, $which$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$z>>2]|0;
 $1 = (_stbi__get16be($0)|0);
 $2 = HEAP32[$z>>2]|0;
 $3 = (_stbi__get8($2)|0);
 $4 = $3&255;
 $5 = (($z) + 18148|0);
 HEAP32[$5>>2] = $4;
 $6 = ($3<<24>>24)==(0);
 $7 = ($3&255)>(4);
 $or$cond = $6 | $7;
 if (!($or$cond)) {
  $8 = HEAP32[$z>>2]|0;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($4|0)>($10|0);
  if (!($11)) {
   $12 = $4 << 1;
   $13 = (($12) + 6)|0;
   $14 = ($1|0)==($13|0);
   if (!($14)) {
    _stbi__err(15856);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $15 = HEAP32[$5>>2]|0;
   $16 = ($15|0)>(0);
   $17 = HEAP32[$z>>2]|0;
   $18 = (_stbi__get8($17)|0);
   $19 = $18&255;
   L8: do {
    if ($16) {
     $35 = $19;$i$09 = 0;
     while(1) {
      $20 = HEAP32[$z>>2]|0;
      $21 = (_stbi__get8($20)|0);
      $22 = $21&255;
      $23 = HEAP32[$z>>2]|0;
      $24 = (($23) + 8|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)>(0);
      L11: do {
       if ($26) {
        $which$04 = 0;
        while(1) {
         $32 = ((($z) + (($which$04*72)|0)|0) + 17820|0);
         $33 = HEAP32[$32>>2]|0;
         $34 = ($33|0)==($35|0);
         $31 = (($which$04) + 1)|0;
         if ($34) {
          $which$0$lcssa = $which$04;
          break L11;
         }
         $27 = HEAP32[$z>>2]|0;
         $28 = (($27) + 8|0);
         $29 = HEAP32[$28>>2]|0;
         $30 = ($31|0)<($29|0);
         if ($30) {
          $which$04 = $31;
         } else {
          $which$0$lcssa = $31;
          break;
         }
        }
       } else {
        $which$0$lcssa = 0;
       }
      } while(0);
      $36 = HEAP32[$z>>2]|0;
      $37 = (($36) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($which$0$lcssa|0)==($38|0);
      if ($39) {
       $$0 = 0;
       label = 26;
       break;
      }
      $40 = $22 >>> 4;
      $41 = ((($z) + (($which$0$lcssa*72)|0)|0) + 17836|0);
      HEAP32[$41>>2] = $40;
      $42 = ($21&255)>(63);
      if ($42) {
       label = 12;
       break;
      }
      $43 = $22 & 15;
      $44 = ((($z) + (($which$0$lcssa*72)|0)|0) + 17840|0);
      HEAP32[$44>>2] = $43;
      $45 = ($43>>>0)>(3);
      if ($45) {
       label = 14;
       break;
      }
      $46 = ((($z) + ($i$09<<2)|0) + 18152|0);
      HEAP32[$46>>2] = $which$0$lcssa;
      $47 = (($i$09) + 1)|0;
      $48 = HEAP32[$5>>2]|0;
      $49 = ($47|0)<($48|0);
      $50 = HEAP32[$z>>2]|0;
      $51 = (_stbi__get8($50)|0);
      $52 = $51&255;
      if ($49) {
       $35 = $52;$i$09 = $47;
      } else {
       $$lcssa = $52;
       break L8;
      }
     }
     if ((label|0) == 12) {
      _stbi__err(15872);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     else if ((label|0) == 14) {
      _stbi__err(15888);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     else if ((label|0) == 26) {
      STACKTOP = sp;return ($$0|0);
     }
    } else {
     $$lcssa = $19;
    }
   } while(0);
   $53 = (($z) + 18128|0);
   HEAP32[$53>>2] = $$lcssa;
   $54 = HEAP32[$z>>2]|0;
   $55 = (_stbi__get8($54)|0);
   $56 = $55&255;
   $57 = (($z) + 18132|0);
   HEAP32[$57>>2] = $56;
   $58 = HEAP32[$z>>2]|0;
   $59 = (_stbi__get8($58)|0);
   $60 = $59&255;
   $61 = $60 >>> 4;
   $62 = (($z) + 18136|0);
   HEAP32[$62>>2] = $61;
   $63 = $60 & 15;
   $64 = (($z) + 18140|0);
   HEAP32[$64>>2] = $63;
   $65 = (($z) + 18124|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(0);
   $68 = HEAP32[$53>>2]|0;
   if (!($67)) {
    $69 = ($68|0)>(63);
    if (!($69)) {
     $70 = HEAP32[$57>>2]|0;
     $71 = ($70|0)>(63);
     $72 = ($68|0)>($70|0);
     $or$cond1 = $71 | $72;
     if (!($or$cond1)) {
      $73 = HEAP32[$62>>2]|0;
      $74 = ($73|0)>(13);
      $75 = ($63>>>0)>(13);
      $or$cond2 = $74 | $75;
      if (!($or$cond2)) {
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
    _stbi__err(15904);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $76 = ($68|0)==(0);
   if (!($76)) {
    _stbi__err(15904);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $77 = HEAP32[$62>>2]|0;
   $78 = $77 | $63;
   $79 = ($78|0)==(0);
   if ($79) {
    HEAP32[$57>>2] = 63;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    _stbi__err(15904);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 _stbi__err(15832);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__parse_entropy_coded_data($z) {
 $z = $z|0;
 var $$2 = 0, $$off = 0, $$off5 = 0, $$off6 = 0, $$off7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $data3 = 0, $i$011 = 0, $i1$028 = 0, $i13$056 = 0, $i6$037 = 0, $j$013 = 0, $j14$061 = 0;
 var $j2$032 = 0, $j7$041 = 0, $k$023 = 0, $k15$051 = 0, $tmp = 0, $tmp10 = 0, $tmp8 = 0, $tmp9 = 0, $x$017 = 0, $x16$045 = 0, $y$020 = 0, $y17$048 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 128|0;
 $data3 = sp;
 _stbi__jpeg_reset($z);
 $0 = (($z) + 18124|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = (($z) + 18148|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if ($2) {
  if ($5) {
   $6 = (($z) + 18152|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($z) + (($7*72)|0)|0) + 17848|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + 7)|0;
   $11 = $10 >> 3;
   $12 = ((($z) + (($7*72)|0)|0) + 17852|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 7)|0;
   $15 = $14 >> 3;
   $16 = ($15|0)>(0);
   if (!($16)) {
    $$2 = 1;
    STACKTOP = sp;return ($$2|0);
   }
   $17 = ($11|0)>(0);
   $18 = ((($z) + (($7*72)|0)|0) + 17840|0);
   $19 = ((($z) + (($7*72)|0)|0) + 17836|0);
   $20 = ((($z) + (($7*72)|0)|0) + 17832|0);
   $21 = (($z) + 18176|0);
   $22 = ((($z) + (($7*72)|0)|0) + 17864|0);
   $23 = ((($z) + (($7*72)|0)|0) + 17856|0);
   $24 = (($z) + 18172|0);
   $25 = (($z) + 18112|0);
   $26 = (($z) + 18116|0);
   $j$013 = 0;
   L8: while(1) {
    if ($17) {
     $i$011 = 0;
     while(1) {
      $27 = HEAP32[$18>>2]|0;
      $28 = HEAP32[$19>>2]|0;
      $29 = ((($z) + (($28*1680)|0)|0) + 4|0);
      $30 = ((($z) + (($27*1680)|0)|0) + 6724|0);
      $31 = ((($z) + ($27<<10)|0) + 13700|0);
      $32 = HEAP32[$20>>2]|0;
      $33 = ((($z) + ($32<<6)|0) + 13444|0);
      $34 = (_stbi__jpeg_decode_block($z,$data,$29,$30,$31,$7,$33)|0);
      $35 = ($34|0)==(0);
      if ($35) {
       $$2 = 0;
       label = 64;
       break L8;
      }
      $36 = HEAP32[$21>>2]|0;
      $37 = HEAP32[$22>>2]|0;
      $38 = HEAP32[$23>>2]|0;
      $39 = Math_imul($38, $j$013)|0;
      $tmp = (($39) + ($i$011))|0;
      $tmp8 = $tmp << 3;
      $40 = (($37) + ($tmp8)|0);
      FUNCTION_TABLE_viii[$36 & 3]($40,$38,$data);
      $41 = HEAP32[$24>>2]|0;
      $42 = (($41) + -1)|0;
      HEAP32[$24>>2] = $42;
      $43 = ($41|0)<(2);
      if ($43) {
       $44 = HEAP32[$25>>2]|0;
       $45 = ($44|0)<(24);
       if ($45) {
        _stbi__grow_buffer_unsafe($z);
       }
       $46 = HEAP8[$26>>0]|0;
       $$off7 = (($46) + 48)<<24>>24;
       $47 = ($$off7&255)<(8);
       if (!($47)) {
        $$2 = 1;
        label = 64;
        break L8;
       }
       _stbi__jpeg_reset($z);
      }
      $48 = (($i$011) + 1)|0;
      $49 = ($48|0)<($11|0);
      if ($49) {
       $i$011 = $48;
      } else {
       break;
      }
     }
    }
    $50 = (($j$013) + 1)|0;
    $51 = ($50|0)<($15|0);
    if ($51) {
     $j$013 = $50;
    } else {
     $$2 = 1;
     label = 64;
     break;
    }
   }
   if ((label|0) == 64) {
    STACKTOP = sp;return ($$2|0);
   }
  }
  $52 = (($z) + 17808|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)>(0);
  if (!($54)) {
   $$2 = 1;
   STACKTOP = sp;return ($$2|0);
  }
  $55 = (($z) + 17804|0);
  $56 = (($z) + 18172|0);
  $57 = (($z) + 18112|0);
  $58 = (($z) + 18116|0);
  $59 = (($z) + 18176|0);
  $j2$032 = 0;
  L30: while(1) {
   $60 = HEAP32[$55>>2]|0;
   $61 = ($60|0)>(0);
   if ($61) {
    $i1$028 = 0;
    while(1) {
     $62 = HEAP32[$3>>2]|0;
     $63 = ($62|0)>(0);
     if ($63) {
      $k$023 = 0;
      while(1) {
       $64 = ((($z) + ($k$023<<2)|0) + 18152|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ((($z) + (($65*72)|0)|0) + 17828|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)>(0);
       if ($68) {
        $69 = ((($z) + (($65*72)|0)|0) + 17824|0);
        $70 = ((($z) + (($65*72)|0)|0) + 17840|0);
        $71 = ((($z) + (($65*72)|0)|0) + 17836|0);
        $72 = ((($z) + (($65*72)|0)|0) + 17832|0);
        $73 = ((($z) + (($65*72)|0)|0) + 17864|0);
        $74 = ((($z) + (($65*72)|0)|0) + 17856|0);
        $y$020 = 0;
        while(1) {
         $75 = HEAP32[$69>>2]|0;
         $76 = ($75|0)>(0);
         if ($76) {
          $89 = $75;$x$017 = 0;
          while(1) {
           $77 = HEAP32[$66>>2]|0;
           $78 = HEAP32[$70>>2]|0;
           $79 = HEAP32[$71>>2]|0;
           $80 = ((($z) + (($79*1680)|0)|0) + 4|0);
           $81 = ((($z) + (($78*1680)|0)|0) + 6724|0);
           $82 = ((($z) + ($78<<10)|0) + 13700|0);
           $83 = HEAP32[$72>>2]|0;
           $84 = ((($z) + ($83<<6)|0) + 13444|0);
           $85 = (_stbi__jpeg_decode_block($z,$data3,$80,$81,$82,$65,$84)|0);
           $86 = ($85|0)==(0);
           if ($86) {
            $$2 = 0;
            label = 64;
            break L30;
           }
           $87 = Math_imul($77, $j2$032)|0;
           $88 = Math_imul($89, $i1$028)|0;
           $90 = (($87) + ($y$020))|0;
           $91 = (($88) + ($x$017))|0;
           $92 = HEAP32[$59>>2]|0;
           $93 = HEAP32[$73>>2]|0;
           $94 = HEAP32[$74>>2]|0;
           $95 = Math_imul($94, $90)|0;
           $tmp9 = (($91) + ($95))|0;
           $tmp10 = $tmp9 << 3;
           $96 = (($93) + ($tmp10)|0);
           FUNCTION_TABLE_viii[$92 & 3]($96,$94,$data3);
           $97 = (($x$017) + 1)|0;
           $98 = HEAP32[$69>>2]|0;
           $99 = ($97|0)<($98|0);
           if ($99) {
            $89 = $98;$x$017 = $97;
           } else {
            break;
           }
          }
         }
         $100 = (($y$020) + 1)|0;
         $101 = HEAP32[$66>>2]|0;
         $102 = ($100|0)<($101|0);
         if ($102) {
          $y$020 = $100;
         } else {
          break;
         }
        }
       }
       $103 = (($k$023) + 1)|0;
       $104 = HEAP32[$3>>2]|0;
       $105 = ($103|0)<($104|0);
       if ($105) {
        $k$023 = $103;
       } else {
        break;
       }
      }
     }
     $106 = HEAP32[$56>>2]|0;
     $107 = (($106) + -1)|0;
     HEAP32[$56>>2] = $107;
     $108 = ($106|0)<(2);
     if ($108) {
      $109 = HEAP32[$57>>2]|0;
      $110 = ($109|0)<(24);
      if ($110) {
       _stbi__grow_buffer_unsafe($z);
      }
      $111 = HEAP8[$58>>0]|0;
      $$off6 = (($111) + 48)<<24>>24;
      $112 = ($$off6&255)<(8);
      if (!($112)) {
       $$2 = 1;
       label = 64;
       break L30;
      }
      _stbi__jpeg_reset($z);
     }
     $113 = (($i1$028) + 1)|0;
     $114 = HEAP32[$55>>2]|0;
     $115 = ($113|0)<($114|0);
     if ($115) {
      $i1$028 = $113;
     } else {
      break;
     }
    }
   }
   $116 = (($j2$032) + 1)|0;
   $117 = HEAP32[$52>>2]|0;
   $118 = ($116|0)<($117|0);
   if ($118) {
    $j2$032 = $116;
   } else {
    $$2 = 1;
    label = 64;
    break;
   }
  }
  if ((label|0) == 64) {
   STACKTOP = sp;return ($$2|0);
  }
 }
 if ($5) {
  $126 = (($z) + 18152|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ((($z) + (($127*72)|0)|0) + 17848|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + 7)|0;
  $131 = $130 >> 3;
  $132 = ((($z) + (($127*72)|0)|0) + 17852|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + 7)|0;
  $135 = $134 >> 3;
  $136 = ($135|0)>(0);
  if (!($136)) {
   $$2 = 1;
   STACKTOP = sp;return ($$2|0);
  }
  $137 = ($131|0)>(0);
  $138 = ((($z) + (($127*72)|0)|0) + 17880|0);
  $139 = ((($z) + (($127*72)|0)|0) + 17884|0);
  $140 = (($z) + 18128|0);
  $141 = ((($z) + (($127*72)|0)|0) + 17836|0);
  $142 = (($z) + 18172|0);
  $143 = (($z) + 18112|0);
  $144 = (($z) + 18116|0);
  $145 = ((($z) + (($127*72)|0)|0) + 17840|0);
  $j7$041 = 0;
  L67: while(1) {
   if ($137) {
    $i6$037 = 0;
    while(1) {
     $146 = HEAP32[$138>>2]|0;
     $147 = HEAP32[$139>>2]|0;
     $148 = Math_imul($147, $j7$041)|0;
     $149 = (($148) + ($i6$037))|0;
     $150 = $149 << 6;
     $151 = (($146) + ($150<<1)|0);
     $152 = HEAP32[$140>>2]|0;
     $153 = ($152|0)==(0);
     if ($153) {
      $154 = HEAP32[$141>>2]|0;
      $155 = ((($z) + (($154*1680)|0)|0) + 4|0);
      $156 = (_stbi__jpeg_decode_block_prog_dc($z,$151,$155,$127)|0);
      $157 = ($156|0)==(0);
      if ($157) {
       $$2 = 0;
       label = 64;
       break L67;
      }
     } else {
      $158 = HEAP32[$145>>2]|0;
      $159 = ((($z) + (($158*1680)|0)|0) + 6724|0);
      $160 = ((($z) + ($158<<10)|0) + 13700|0);
      $161 = (_stbi__jpeg_decode_block_prog_ac($z,$151,$159,$160)|0);
      $162 = ($161|0)==(0);
      if ($162) {
       $$2 = 0;
       label = 64;
       break L67;
      }
     }
     $163 = HEAP32[$142>>2]|0;
     $164 = (($163) + -1)|0;
     HEAP32[$142>>2] = $164;
     $165 = ($163|0)<(2);
     if ($165) {
      $166 = HEAP32[$143>>2]|0;
      $167 = ($166|0)<(24);
      if ($167) {
       _stbi__grow_buffer_unsafe($z);
      }
      $168 = HEAP8[$144>>0]|0;
      $$off5 = (($168) + 48)<<24>>24;
      $169 = ($$off5&255)<(8);
      if (!($169)) {
       $$2 = 1;
       label = 64;
       break L67;
      }
      _stbi__jpeg_reset($z);
     }
     $170 = (($i6$037) + 1)|0;
     $171 = ($170|0)<($131|0);
     if ($171) {
      $i6$037 = $170;
     } else {
      break;
     }
    }
   }
   $172 = (($j7$041) + 1)|0;
   $173 = ($172|0)<($135|0);
   if ($173) {
    $j7$041 = $172;
   } else {
    $$2 = 1;
    label = 64;
    break;
   }
  }
  if ((label|0) == 64) {
   STACKTOP = sp;return ($$2|0);
  }
 }
 $119 = (($z) + 17808|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)>(0);
 if (!($121)) {
  $$2 = 1;
  STACKTOP = sp;return ($$2|0);
 }
 $122 = (($z) + 17804|0);
 $123 = (($z) + 18172|0);
 $124 = (($z) + 18112|0);
 $125 = (($z) + 18116|0);
 $j14$061 = 0;
 L93: while(1) {
  $174 = HEAP32[$122>>2]|0;
  $175 = ($174|0)>(0);
  if ($175) {
   $i13$056 = 0;
   while(1) {
    $176 = HEAP32[$3>>2]|0;
    $177 = ($176|0)>(0);
    if ($177) {
     $k15$051 = 0;
     while(1) {
      $178 = ((($z) + ($k15$051<<2)|0) + 18152|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ((($z) + (($179*72)|0)|0) + 17828|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ($181|0)>(0);
      if ($182) {
       $183 = ((($z) + (($179*72)|0)|0) + 17824|0);
       $184 = ((($z) + (($179*72)|0)|0) + 17880|0);
       $185 = ((($z) + (($179*72)|0)|0) + 17884|0);
       $186 = ((($z) + (($179*72)|0)|0) + 17836|0);
       $y17$048 = 0;
       while(1) {
        $187 = HEAP32[$183>>2]|0;
        $188 = ($187|0)>(0);
        if ($188) {
         $193 = $187;$x16$045 = 0;
         while(1) {
          $192 = Math_imul($193, $i13$056)|0;
          $194 = (($192) + ($x16$045))|0;
          $195 = HEAP32[$180>>2]|0;
          $196 = Math_imul($195, $j14$061)|0;
          $197 = (($196) + ($y17$048))|0;
          $198 = HEAP32[$184>>2]|0;
          $199 = HEAP32[$185>>2]|0;
          $200 = Math_imul($197, $199)|0;
          $201 = (($194) + ($200))|0;
          $202 = $201 << 6;
          $203 = (($198) + ($202<<1)|0);
          $204 = HEAP32[$186>>2]|0;
          $205 = ((($z) + (($204*1680)|0)|0) + 4|0);
          $206 = (_stbi__jpeg_decode_block_prog_dc($z,$203,$205,$179)|0);
          $207 = ($206|0)==(0);
          $191 = (($x16$045) + 1)|0;
          if ($207) {
           $$2 = 0;
           label = 64;
           break L93;
          }
          $189 = HEAP32[$183>>2]|0;
          $190 = ($191|0)<($189|0);
          if ($190) {
           $193 = $189;$x16$045 = $191;
          } else {
           break;
          }
         }
        }
        $208 = (($y17$048) + 1)|0;
        $209 = HEAP32[$180>>2]|0;
        $210 = ($208|0)<($209|0);
        if ($210) {
         $y17$048 = $208;
        } else {
         break;
        }
       }
      }
      $211 = (($k15$051) + 1)|0;
      $212 = HEAP32[$3>>2]|0;
      $213 = ($211|0)<($212|0);
      if ($213) {
       $k15$051 = $211;
      } else {
       break;
      }
     }
    }
    $214 = HEAP32[$123>>2]|0;
    $215 = (($214) + -1)|0;
    HEAP32[$123>>2] = $215;
    $216 = ($214|0)<(2);
    if ($216) {
     $217 = HEAP32[$124>>2]|0;
     $218 = ($217|0)<(24);
     if ($218) {
      _stbi__grow_buffer_unsafe($z);
     }
     $219 = HEAP8[$125>>0]|0;
     $$off = (($219) + 48)<<24>>24;
     $220 = ($$off&255)<(8);
     if (!($220)) {
      $$2 = 1;
      label = 64;
      break L93;
     }
     _stbi__jpeg_reset($z);
    }
    $221 = (($i13$056) + 1)|0;
    $222 = HEAP32[$122>>2]|0;
    $223 = ($221|0)<($222|0);
    if ($223) {
     $i13$056 = $221;
    } else {
     break;
    }
   }
  }
  $224 = (($j14$061) + 1)|0;
  $225 = HEAP32[$119>>2]|0;
  $226 = ($224|0)<($225|0);
  if ($226) {
   $j14$061 = $224;
  } else {
   $$2 = 1;
   label = 64;
   break;
  }
 }
 if ((label|0) == 64) {
  STACKTOP = sp;return ($$2|0);
 }
 return 0|0;
}
function _stbi__jpeg_finish($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond9 = 0, $i$02 = 0, $j$03 = 0, $n$07 = 0, $tmp = 0, $tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($z) + 18124|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$z>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($z) + 18176|0);
 $n$07 = 0;
 while(1) {
  $8 = ((($z) + (($n$07*72)|0)|0) + 17848|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 7)|0;
  $11 = $10 >> 3;
  $12 = ((($z) + (($n$07*72)|0)|0) + 17852|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 7)|0;
  $15 = $14 >> 3;
  $16 = ($15|0)>(0);
  if ($16) {
   $17 = ($11|0)>(0);
   $18 = ((($z) + (($n$07*72)|0)|0) + 17880|0);
   $19 = ((($z) + (($n$07*72)|0)|0) + 17884|0);
   $20 = ((($z) + (($n$07*72)|0)|0) + 17832|0);
   $21 = ((($z) + (($n$07*72)|0)|0) + 17864|0);
   $22 = ((($z) + (($n$07*72)|0)|0) + 17856|0);
   $j$03 = 0;
   while(1) {
    if ($17) {
     $i$02 = 0;
     while(1) {
      $23 = HEAP32[$18>>2]|0;
      $24 = HEAP32[$19>>2]|0;
      $25 = Math_imul($24, $j$03)|0;
      $26 = (($25) + ($i$02))|0;
      $27 = $26 << 6;
      $28 = (($23) + ($27<<1)|0);
      $29 = HEAP32[$20>>2]|0;
      $30 = ((($z) + ($29<<6)|0) + 13444|0);
      _stbi__jpeg_dequantize($28,$30);
      $31 = HEAP32[$7>>2]|0;
      $32 = HEAP32[$21>>2]|0;
      $33 = HEAP32[$22>>2]|0;
      $34 = Math_imul($33, $j$03)|0;
      $tmp = (($34) + ($i$02))|0;
      $tmp1 = $tmp << 3;
      $35 = (($32) + ($tmp1)|0);
      FUNCTION_TABLE_viii[$31 & 3]($35,$33,$28);
      $36 = (($i$02) + 1)|0;
      $exitcond = ($36|0)==($11|0);
      if ($exitcond) {
       break;
      } else {
       $i$02 = $36;
      }
     }
    }
    $37 = (($j$03) + 1)|0;
    $exitcond9 = ($37|0)==($15|0);
    if ($exitcond9) {
     break;
    } else {
     $j$03 = $37;
    }
   }
  }
  $38 = (($n$07) + 1)|0;
  $39 = HEAP32[$z>>2]|0;
  $40 = (($39) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($38|0)<($41|0);
  if ($42) {
   $n$07 = $38;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _stbi__jpeg_dequantize($data,$dequant) {
 $data = $data|0;
 $dequant = $dequant|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $0 = (($dequant) + ($i$01)|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = $1&255;
  $3 = (($data) + ($i$01<<1)|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4 << 16 >> 16;
  $6 = Math_imul($5, $2)|0;
  $7 = $6&65535;
  HEAP16[$3>>1] = $7;
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==(64);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;
  }
 }
 STACKTOP = sp;return;
}
function _stbi__jpeg_reset($j) {
 $j = $j|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($j) + 18112|0);
 HEAP32[$0>>2] = 0;
 $1 = (($j) + 18108|0);
 HEAP32[$1>>2] = 0;
 $2 = (($j) + 18120|0);
 HEAP32[$2>>2] = 0;
 $3 = (($j) + 17988|0);
 HEAP32[$3>>2] = 0;
 $4 = (($j) + 17916|0);
 HEAP32[$4>>2] = 0;
 $5 = (($j) + 17844|0);
 HEAP32[$5>>2] = 0;
 $6 = (($j) + 18116|0);
 HEAP8[$6>>0] = -1;
 $7 = (($j) + 18168|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 $$ = $9 ? 2147483647 : $8;
 $10 = (($j) + 18172|0);
 HEAP32[$10>>2] = $$;
 $11 = (($j) + 18144|0);
 HEAP32[$11>>2] = 0;
 STACKTOP = sp;return;
}
function _stbi__jpeg_decode_block($j,$data,$hdc,$hac,$fac,$b,$dequant) {
 $j = $j|0;
 $data = $data|0;
 $hdc = $hdc|0;
 $hac = $hac|0;
 $fac = $fac|0;
 $b = $b|0;
 $dequant = $dequant|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($j) + 18112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(16);
 if ($2) {
  _stbi__grow_buffer_unsafe($j);
 }
 $3 = (_stbi__jpeg_huff_decode($j,$hdc)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  _stbi__err(14024);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$data+0|0; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $5 = ($3|0)==(0);
 if ($5) {
  $10 = 0;
 } else {
  $6 = (_stbi__extend_receive($j,$3)|0);
  $10 = $6;
 }
 $7 = ((($j) + (($b*72)|0)|0) + 17844|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($10))|0;
 HEAP32[$7>>2] = $9;
 $11 = HEAP8[$dequant>>0]|0;
 $12 = $11&255;
 $13 = Math_imul($12, $9)|0;
 $14 = $13&65535;
 HEAP16[$data>>1] = $14;
 $15 = (($j) + 18108|0);
 $k$0 = 1;
 L11: while(1) {
  $16 = HEAP32[$0>>2]|0;
  $17 = ($16|0)<(16);
  if ($17) {
   _stbi__grow_buffer_unsafe($j);
  }
  $18 = HEAP32[$15>>2]|0;
  $19 = $18 >>> 23;
  $20 = (($fac) + ($19<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = ($21<<16>>16)==(0);
  do {
   if ($23) {
    $42 = (_stbi__jpeg_huff_decode($j,$hac)|0);
    $43 = ($42|0)<(0);
    if ($43) {
     label = 13;
     break L11;
    }
    $44 = $42 & 15;
    $45 = ($44|0)==(0);
    if (!($45)) {
     $48 = $42 >> 4;
     $49 = (($48) + ($k$0))|0;
     $50 = (($49) + 1)|0;
     $51 = (13584 + ($49)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $54 = (_stbi__extend_receive($j,$44)|0);
     $55 = (($dequant) + ($53)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = Math_imul($57, $54)|0;
     $59 = $58&65535;
     $60 = (($data) + ($53<<1)|0);
     HEAP16[$60>>1] = $59;
     $k$1 = $50;
     break;
    }
    $46 = ($42|0)==(240);
    if (!($46)) {
     $$0 = 1;
     label = 19;
     break L11;
    }
    $47 = (($k$0) + 16)|0;
    $k$1 = $47;
   } else {
    $24 = $22 >>> 4;
    $25 = $24 & 15;
    $26 = (($25) + ($k$0))|0;
    $27 = $22 & 15;
    $28 = $18 << $27;
    HEAP32[$15>>2] = $28;
    $29 = HEAP32[$0>>2]|0;
    $30 = (($29) - ($27))|0;
    HEAP32[$0>>2] = $30;
    $31 = (($26) + 1)|0;
    $32 = (13584 + ($26)|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = $22 >> 8;
    $36 = (($dequant) + ($34)|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = Math_imul($38, $35)|0;
    $40 = $39&65535;
    $41 = (($data) + ($34<<1)|0);
    HEAP16[$41>>1] = $40;
    $k$1 = $31;
   }
  } while(0);
  $61 = ($k$1|0)<(64);
  if ($61) {
   $k$0 = $k$1;
  } else {
   $$0 = 1;
   label = 19;
   break;
  }
 }
 if ((label|0) == 13) {
  _stbi__err(14024);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 19) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stbi__grow_buffer_unsafe($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($j) + 18120|0);
 $1 = (($j) + 18112|0);
 $2 = (($j) + 18108|0);
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $5 = HEAP32[$j>>2]|0;
   $6 = (_stbi__get8($5)|0);
   $7 = $6&255;
   $8 = ($6<<24>>24)==(-1);
   if ($8) {
    $9 = HEAP32[$j>>2]|0;
    $10 = (_stbi__get8($9)|0);
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $16 = 255;
    } else {
     break;
    }
   } else {
    $16 = $7;
   }
  } else {
   $16 = 0;
  }
  $13 = HEAP32[$1>>2]|0;
  $14 = (24 - ($13))|0;
  $15 = $16 << $14;
  $17 = HEAP32[$2>>2]|0;
  $18 = $15 | $17;
  HEAP32[$2>>2] = $18;
  $19 = HEAP32[$1>>2]|0;
  $20 = (($19) + 8)|0;
  HEAP32[$1>>2] = $20;
  $21 = ($20|0)<(25);
  if (!($21)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
 $12 = (($j) + 18116|0);
 HEAP8[$12>>0] = $10;
 HEAP32[$0>>2] = 1;
 STACKTOP = sp;return;
}
function _stbi__jpeg_decode_block_prog_dc($j,$data,$hdc,$b) {
 $j = $j|0;
 $data = $data|0;
 $hdc = $hdc|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($j) + 18132|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _stbi__err(15560);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($j) + 18112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(16);
 if ($5) {
  _stbi__grow_buffer_unsafe($j);
 }
 $6 = (($j) + 18136|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  dest=$data+0|0; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
  $9 = (_stbi__jpeg_huff_decode($j,$hdc)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $15 = 0;
  } else {
   $11 = (_stbi__extend_receive($j,$9)|0);
   $15 = $11;
  }
  $12 = ((($j) + (($b*72)|0)|0) + 17844|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($15))|0;
  HEAP32[$12>>2] = $14;
  $16 = (($j) + 18140|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $14 << $17;
  $19 = $18&65535;
  HEAP16[$data>>1] = $19;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $20 = (_stbi__jpeg_get_bit($j)|0);
  $21 = ($20|0)==(0);
  if ($21) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $22 = (($j) + 18140|0);
  $23 = HEAP32[$22>>2]|0;
  $sext = 65536 << $23;
  $24 = $sext >>> 16;
  $25 = HEAP16[$data>>1]|0;
  $26 = $25&65535;
  $27 = (($26) + ($24))|0;
  $28 = $27&65535;
  HEAP16[$data>>1] = $28;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stbi__jpeg_decode_block_prog_ac($j,$data,$hac,$fac) {
 $j = $j|0;
 $data = $data|0;
 $hac = $hac|0;
 $fac = $fac|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $k$0 = 0, $k$1 = 0, $k$225 = 0, $k$3 = 0, $k$4$ph19 = 0, $k$411 = 0, $k$5 = 0, $r1$0$ph = 0, $r1$0$ph518 = 0, $s2$0$ph = 0, $sext = 0, $sext1 = 0, $sext2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($j) + 18128|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  _stbi__err(15560);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($j) + 18136|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = (($j) + 18140|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $8 = (($j) + 18144|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $14 = (($9) + -1)|0;
   HEAP32[$8>>2] = $14;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $11 = (($j) + 18112|0);
  $12 = (($j) + 18108|0);
  $13 = (($j) + 18132|0);
  $k$0 = $1;
  L11: while(1) {
   $15 = HEAP32[$11>>2]|0;
   $16 = ($15|0)<(16);
   if ($16) {
    _stbi__grow_buffer_unsafe($j);
   }
   $17 = HEAP32[$12>>2]|0;
   $18 = $17 >>> 23;
   $19 = (($fac) + ($18<<1)|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20 << 16 >> 16;
   $22 = ($20<<16>>16)==(0);
   do {
    if ($22) {
     $38 = (_stbi__jpeg_huff_decode($j,$hac)|0);
     $39 = ($38|0)<(0);
     if ($39) {
      label = 12;
      break L11;
     }
     $40 = $38 & 15;
     $41 = $38 >> 4;
     $42 = ($40|0)==(0);
     if (!($42)) {
      $52 = (($41) + ($k$0))|0;
      $53 = (($52) + 1)|0;
      $54 = (13584 + ($52)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = (_stbi__extend_receive($j,$40)|0);
      $58 = $57 << $7;
      $59 = $58&65535;
      $60 = (($data) + ($56<<1)|0);
      HEAP16[$60>>1] = $59;
      $k$1 = $53;
      break;
     }
     $43 = ($41|0)<(15);
     if ($43) {
      label = 15;
      break L11;
     }
     $51 = (($k$0) + 16)|0;
     $k$1 = $51;
    } else {
     $23 = $21 >>> 4;
     $24 = $23 & 15;
     $25 = (($24) + ($k$0))|0;
     $26 = $21 & 15;
     $27 = $17 << $26;
     HEAP32[$12>>2] = $27;
     $28 = HEAP32[$11>>2]|0;
     $29 = (($28) - ($26))|0;
     HEAP32[$11>>2] = $29;
     $30 = (($25) + 1)|0;
     $31 = (13584 + ($25)|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $21 >> 8;
     $35 = $34 << $7;
     $36 = $35&65535;
     $37 = (($data) + ($33<<1)|0);
     HEAP16[$37>>1] = $36;
     $k$1 = $30;
    }
   } while(0);
   $61 = HEAP32[$13>>2]|0;
   $62 = ($k$1|0)>($61|0);
   if ($62) {
    $$0 = 1;
    label = 54;
    break;
   } else {
    $k$0 = $k$1;
   }
  }
  if ((label|0) == 12) {
   _stbi__err(14024);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 15) {
   $44 = 1 << $41;
   HEAP32[$8>>2] = $44;
   $45 = ($41|0)==(0);
   if (!($45)) {
    $46 = (_stbi__jpeg_get_bits($j,$41)|0);
    $47 = HEAP32[$8>>2]|0;
    $48 = (($47) + ($46))|0;
    HEAP32[$8>>2] = $48;
   }
   $49 = HEAP32[$8>>2]|0;
   $50 = (($49) + -1)|0;
   HEAP32[$8>>2] = $50;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 54) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $63 = 1 << $7;
 $64 = (($j) + 18144|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $71 = (($65) + -1)|0;
  HEAP32[$64>>2] = $71;
  $72 = HEAP32[$0>>2]|0;
  $73 = (($j) + 18132|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72|0)>($74|0);
  if ($75) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $sext2 = $63 << 16;
  $76 = $sext2 >> 16;
  $k$225 = $72;
  while(1) {
   $77 = (13584 + ($k$225)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = (($data) + ($79<<1)|0);
   $81 = HEAP16[$80>>1]|0;
   $82 = ($81<<16>>16)==(0);
   do {
    if (!($82)) {
     $83 = (_stbi__jpeg_get_bit($j)|0);
     $84 = ($83|0)==(0);
     if (!($84)) {
      $85 = HEAP16[$80>>1]|0;
      $86 = $85 << 16 >> 16;
      $87 = $86 & $76;
      $88 = ($87|0)==(0);
      if ($88) {
       $89 = ($85<<16>>16)>(0);
       if ($89) {
        $90 = (($86) + ($76))|0;
        $91 = $90&65535;
        HEAP16[$80>>1] = $91;
        break;
       } else {
        $92 = (($86) - ($76))|0;
        $93 = $92&65535;
        HEAP16[$80>>1] = $93;
        break;
       }
      }
     }
    }
   } while(0);
   $94 = (($k$225) + 1)|0;
   $95 = HEAP32[$73>>2]|0;
   $96 = ($k$225|0)<($95|0);
   if ($96) {
    $k$225 = $94;
   } else {
    $$0 = 1;
    break;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 $sext = $63 << 16;
 $67 = $sext >> 16;
 $68 = (0 - ($67))|0;
 $69 = (($j) + 18132|0);
 $sext1 = $63 << 16;
 $70 = $sext1 >> 16;
 $k$3 = $1;
 while(1) {
  $97 = (_stbi__jpeg_huff_decode($j,$hac)|0);
  $98 = ($97|0)<(0);
  if ($98) {
   label = 33;
   break;
  }
  $99 = $97 & 15;
  $100 = $97 >> 4;
  if ((($99|0) == 0)) {
   $101 = ($100|0)<(15);
   if ($101) {
    $102 = 1 << $100;
    $103 = (($102) + -1)|0;
    HEAP32[$64>>2] = $103;
    $104 = ($100|0)==(0);
    if ($104) {
     $r1$0$ph = 64;$s2$0$ph = 0;
    } else {
     $105 = (_stbi__jpeg_get_bits($j,$100)|0);
     $106 = HEAP32[$64>>2]|0;
     $107 = (($106) + ($105))|0;
     HEAP32[$64>>2] = $107;
     $r1$0$ph = 64;$s2$0$ph = $99;
    }
   } else {
    $r1$0$ph = 16;$s2$0$ph = 0;
   }
  } else if ((($99|0) == 1)) {
   $108 = (_stbi__jpeg_get_bit($j)|0);
   $109 = ($108|0)==(0);
   $$ = $109 ? $68 : $67;
   $r1$0$ph = $100;$s2$0$ph = $$;
  } else {
   label = 38;
   break;
  }
  $110 = HEAP32[$69>>2]|0;
  $111 = ($k$3|0)>($110|0);
  L61: do {
   if ($111) {
    $k$5 = $k$3;
   } else {
    $k$4$ph19 = $k$3;$r1$0$ph518 = $r1$0$ph;
    while(1) {
     $k$411 = $k$4$ph19;
     while(1) {
      $112 = (13584 + ($k$411)|0);
      $113 = HEAP8[$112>>0]|0;
      $114 = $113&255;
      $115 = (($data) + ($114<<1)|0);
      $116 = HEAP16[$115>>1]|0;
      $117 = ($116<<16>>16)==(0);
      if ($117) {
       break;
      }
      $118 = (_stbi__jpeg_get_bit($j)|0);
      $119 = ($118|0)==(0);
      do {
       if (!($119)) {
        $120 = HEAP16[$115>>1]|0;
        $121 = $120 << 16 >> 16;
        $122 = $121 & $70;
        $123 = ($122|0)==(0);
        if ($123) {
         $124 = ($120<<16>>16)>(0);
         if ($124) {
          $125 = (($121) + ($70))|0;
          $126 = $125&65535;
          HEAP16[$115>>1] = $126;
          break;
         } else {
          $127 = (($121) - ($70))|0;
          $128 = $127&65535;
          HEAP16[$115>>1] = $128;
          break;
         }
        }
       }
      } while(0);
      $129 = (($k$411) + 1)|0;
      $130 = HEAP32[$69>>2]|0;
      $131 = ($k$411|0)<($130|0);
      if ($131) {
       $k$411 = $129;
      } else {
       $k$5 = $129;
       break L61;
      }
     }
     $132 = ($r1$0$ph518|0)==(0);
     if ($132) {
      break;
     }
     $136 = (($r1$0$ph518) + -1)|0;
     $137 = (($k$411) + 1)|0;
     $138 = HEAP32[$69>>2]|0;
     $139 = ($k$411|0)<($138|0);
     if ($139) {
      $k$4$ph19 = $137;$r1$0$ph518 = $136;
     } else {
      $k$5 = $137;
      break L61;
     }
    }
    $133 = ($s2$0$ph|0)==(0);
    if ($133) {
     $k$5 = $k$411;
    } else {
     $134 = $s2$0$ph&65535;
     $135 = (($k$411) + 1)|0;
     HEAP16[$115>>1] = $134;
     $k$5 = $135;
    }
   }
  } while(0);
  $140 = HEAP32[$69>>2]|0;
  $141 = ($k$5|0)>($140|0);
  if ($141) {
   $$0 = 1;
   label = 54;
   break;
  } else {
   $k$3 = $k$5;
  }
 }
 if ((label|0) == 33) {
  _stbi__err(14024);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 38) {
  _stbi__err(14024);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 54) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stbi__jpeg_huff_decode($j,$h) {
 $j = $j|0;
 $h = $h|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($j) + 18112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(16);
 if ($2) {
  _stbi__grow_buffer_unsafe($j);
 }
 $3 = (($j) + 18108|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >>> 23;
 $6 = (($h) + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($7<<24>>24)==(-1);
 if (!($9)) {
  $10 = ((($h) + ($8)|0) + 1280|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = HEAP32[$0>>2]|0;
  $14 = ($12|0)>($13|0);
  if ($14) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $15 = $4 << $12;
  HEAP32[$3>>2] = $15;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) - ($12))|0;
  HEAP32[$0>>2] = $17;
  $18 = ((($h) + ($8)|0) + 1024|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $$0 = $20;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = $4 >>> 16;
 $k$0 = 10;
 while(1) {
  $22 = ((($h) + ($k$0<<2)|0) + 1540|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($21>>>0)<($23>>>0);
  $25 = (($k$0) + 1)|0;
  if ($24) {
   break;
  } else {
   $k$0 = $25;
  }
 }
 $26 = ($k$0|0)==(17);
 $27 = HEAP32[$0>>2]|0;
 if ($26) {
  $28 = (($27) + -16)|0;
  HEAP32[$0>>2] = $28;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = ($k$0|0)>($27|0);
 if ($29) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = HEAP32[$3>>2]|0;
 $31 = (32 - ($k$0))|0;
 $32 = $30 >>> $31;
 $33 = (15584 + ($k$0<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $32 & $34;
 $36 = ((($h) + ($k$0<<2)|0) + 1612|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + ($37))|0;
 $39 = ((($h) + ($38)|0) + 1280|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = (32 - ($41))|0;
 $43 = $30 >>> $42;
 $44 = (15584 + ($41<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $43 & $45;
 $47 = ((($h) + ($38<<1)|0) + 512|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48&65535;
 $50 = ($46|0)==($49|0);
 if (!($50)) {
  ___assert_fail((15720|0),(12928|0),1528,(15808|0));
  // unreachable;
 }
 $51 = (($27) - ($k$0))|0;
 HEAP32[$0>>2] = $51;
 $52 = HEAP32[$3>>2]|0;
 $53 = $52 << $k$0;
 HEAP32[$3>>2] = $53;
 $54 = ((($h) + ($38)|0) + 1024|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $$0 = $56;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__jpeg_get_bits($j,$n) {
 $j = $j|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($j) + 18112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($n|0);
 if ($2) {
  _stbi__grow_buffer_unsafe($j);
 }
 $3 = (($j) + 18108|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << $n;
 $6 = (32 - ($n))|0;
 $7 = $4 >>> $6;
 $8 = $5 | $7;
 $9 = (15584 + ($n<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 ^ -1;
 $12 = $8 & $11;
 HEAP32[$3>>2] = $12;
 $13 = HEAP32[$9>>2]|0;
 $14 = $8 & $13;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) - ($n))|0;
 HEAP32[$0>>2] = $16;
 STACKTOP = sp;return ($14|0);
}
function _stbi__extend_receive($j,$n) {
 $j = $j|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($j) + 18112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($n|0);
 if ($2) {
  _stbi__grow_buffer_unsafe($j);
 }
 $3 = (($j) + 18108|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >> 31;
 $6 = $4 << $n;
 $7 = (32 - ($n))|0;
 $8 = $4 >>> $7;
 $9 = $6 | $8;
 $10 = (15584 + ($n<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 ^ -1;
 $13 = $9 & $12;
 HEAP32[$3>>2] = $13;
 $14 = HEAP32[$10>>2]|0;
 $15 = $9 & $14;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) - ($n))|0;
 HEAP32[$0>>2] = $17;
 $18 = (15656 + ($n<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $5 ^ -1;
 $21 = $19 & $20;
 $22 = (($21) + ($15))|0;
 STACKTOP = sp;return ($22|0);
}
function _stbi__jpeg_get_bit($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($j) + 18112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(1);
 if ($2) {
  _stbi__grow_buffer_unsafe($j);
 }
 $3 = (($j) + 18108|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << 1;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$0>>2] = $7;
 $8 = $4 & -2147483648;
 STACKTOP = sp;return ($8|0);
}
function _stbi__idct_block($out,$out_stride,$data) {
 $out = $out|0;
 $out_stride = $out_stride|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d$04 = 0, $exitcond = 0, $exitcond9 = 0, $i$08 = 0, $i$13 = 0, $o$01 = 0, $v$06 = 0, $v$12 = 0;
 var $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val = sp;
 $d$04 = $data;$i$08 = 0;$v$06 = $val;
 while(1) {
  $0 = (($d$04) + 16|0);
  $1 = HEAP16[$0>>1]|0;
  $2 = ($1<<16>>16)==(0);
  if ($2) {
   $3 = (($d$04) + 32|0);
   $4 = HEAP16[$3>>1]|0;
   $5 = ($4<<16>>16)==(0);
   if ($5) {
    $6 = (($d$04) + 48|0);
    $7 = HEAP16[$6>>1]|0;
    $8 = ($7<<16>>16)==(0);
    if ($8) {
     $9 = (($d$04) + 64|0);
     $10 = HEAP16[$9>>1]|0;
     $11 = ($10<<16>>16)==(0);
     if ($11) {
      $12 = (($d$04) + 80|0);
      $13 = HEAP16[$12>>1]|0;
      $14 = ($13<<16>>16)==(0);
      if ($14) {
       $15 = (($d$04) + 96|0);
       $16 = HEAP16[$15>>1]|0;
       $17 = ($16<<16>>16)==(0);
       if ($17) {
        $18 = (($d$04) + 112|0);
        $19 = HEAP16[$18>>1]|0;
        $20 = ($19<<16>>16)==(0);
        if ($20) {
         $21 = HEAP16[$d$04>>1]|0;
         $22 = $21 << 16 >> 16;
         $23 = $22 << 2;
         $24 = (($v$06) + 224|0);
         HEAP32[$24>>2] = $23;
         $25 = (($v$06) + 192|0);
         HEAP32[$25>>2] = $23;
         $26 = (($v$06) + 160|0);
         HEAP32[$26>>2] = $23;
         $27 = (($v$06) + 128|0);
         HEAP32[$27>>2] = $23;
         $28 = (($v$06) + 96|0);
         HEAP32[$28>>2] = $23;
         $29 = (($v$06) + 64|0);
         HEAP32[$29>>2] = $23;
         $30 = (($v$06) + 32|0);
         HEAP32[$30>>2] = $23;
         HEAP32[$v$06>>2] = $23;
        } else {
         label = 10;
        }
       } else {
        label = 10;
       }
      } else {
       label = 10;
      }
     } else {
      label = 10;
     }
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
  if ((label|0) == 10) {
   label = 0;
   $31 = (($d$04) + 32|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32 << 16 >> 16;
   $34 = (($d$04) + 96|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35 << 16 >> 16;
   $37 = (($36) + ($33))|0;
   $38 = ($37*2217)|0;
   $39 = Math_imul($36, -7567)|0;
   $40 = (($38) + ($39))|0;
   $41 = ($33*3135)|0;
   $42 = (($38) + ($41))|0;
   $43 = HEAP16[$d$04>>1]|0;
   $44 = $43 << 16 >> 16;
   $45 = (($d$04) + 64|0);
   $46 = HEAP16[$45>>1]|0;
   $47 = $46 << 16 >> 16;
   $48 = (($47) + ($44))|0;
   $49 = $48 << 12;
   $50 = (($44) - ($47))|0;
   $51 = $50 << 12;
   $52 = (($49) - ($42))|0;
   $53 = (($51) - ($40))|0;
   $54 = (($d$04) + 112|0);
   $55 = HEAP16[$54>>1]|0;
   $56 = $55 << 16 >> 16;
   $57 = (($d$04) + 80|0);
   $58 = HEAP16[$57>>1]|0;
   $59 = $58 << 16 >> 16;
   $60 = (($d$04) + 48|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61 << 16 >> 16;
   $63 = HEAP16[$0>>1]|0;
   $64 = $63 << 16 >> 16;
   $65 = (($62) + ($56))|0;
   $66 = (($64) + ($59))|0;
   $67 = (($64) + ($56))|0;
   $68 = (($62) + ($59))|0;
   $69 = (($66) + ($65))|0;
   $70 = ($69*4816)|0;
   $71 = ($56*1223)|0;
   $72 = ($59*8410)|0;
   $73 = ($62*12586)|0;
   $74 = ($64*6149)|0;
   $75 = Math_imul($67, -3685)|0;
   $76 = (($70) + ($75))|0;
   $77 = Math_imul($68, -10497)|0;
   $78 = (($70) + ($77))|0;
   $79 = Math_imul($65, -8034)|0;
   $80 = Math_imul($66, -1597)|0;
   $81 = (($80) + ($74))|0;
   $82 = (($81) + ($76))|0;
   $83 = (($79) + ($73))|0;
   $84 = (($83) + ($78))|0;
   $85 = (($80) + ($72))|0;
   $86 = (($85) + ($78))|0;
   $87 = (($79) + ($71))|0;
   $88 = (($87) + ($76))|0;
   $89 = (($42) + 512)|0;
   $90 = (($89) + ($49))|0;
   $91 = (($40) + 512)|0;
   $92 = (($91) + ($51))|0;
   $93 = (($53) + 512)|0;
   $94 = (($52) + 512)|0;
   $95 = (($82) + ($90))|0;
   $96 = $95 >> 10;
   HEAP32[$v$06>>2] = $96;
   $97 = (($90) - ($82))|0;
   $98 = $97 >> 10;
   $99 = (($v$06) + 224|0);
   HEAP32[$99>>2] = $98;
   $100 = (($84) + ($92))|0;
   $101 = $100 >> 10;
   $102 = (($v$06) + 32|0);
   HEAP32[$102>>2] = $101;
   $103 = (($92) - ($84))|0;
   $104 = $103 >> 10;
   $105 = (($v$06) + 192|0);
   HEAP32[$105>>2] = $104;
   $106 = (($86) + ($93))|0;
   $107 = $106 >> 10;
   $108 = (($v$06) + 64|0);
   HEAP32[$108>>2] = $107;
   $109 = (($93) - ($86))|0;
   $110 = $109 >> 10;
   $111 = (($v$06) + 160|0);
   HEAP32[$111>>2] = $110;
   $112 = (($88) + ($94))|0;
   $113 = $112 >> 10;
   $114 = (($v$06) + 96|0);
   HEAP32[$114>>2] = $113;
   $115 = (($94) - ($88))|0;
   $116 = $115 >> 10;
   $117 = (($v$06) + 128|0);
   HEAP32[$117>>2] = $116;
  }
  $118 = (($i$08) + 1)|0;
  $119 = (($d$04) + 2|0);
  $120 = (($v$06) + 4|0);
  $exitcond9 = ($118|0)==(8);
  if ($exitcond9) {
   $i$13 = 0;$o$01 = $out;$v$12 = $val;
   break;
  } else {
   $d$04 = $119;$i$08 = $118;$v$06 = $120;
  }
 }
 while(1) {
  $121 = (($v$12) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($v$12) + 24|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + ($122))|0;
  $126 = ($125*2217)|0;
  $127 = Math_imul($124, -7567)|0;
  $128 = (($126) + ($127))|0;
  $129 = ($122*3135)|0;
  $130 = (($126) + ($129))|0;
  $131 = HEAP32[$v$12>>2]|0;
  $132 = (($v$12) + 16|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + ($131))|0;
  $135 = $134 << 12;
  $136 = (($131) - ($133))|0;
  $137 = $136 << 12;
  $138 = (($135) - ($130))|0;
  $139 = (($137) - ($128))|0;
  $140 = (($v$12) + 28|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (($v$12) + 20|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($v$12) + 12|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($v$12) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($145) + ($141))|0;
  $149 = (($147) + ($143))|0;
  $150 = (($147) + ($141))|0;
  $151 = (($145) + ($143))|0;
  $152 = (($149) + ($148))|0;
  $153 = ($152*4816)|0;
  $154 = ($141*1223)|0;
  $155 = ($143*8410)|0;
  $156 = ($145*12586)|0;
  $157 = ($147*6149)|0;
  $158 = Math_imul($150, -3685)|0;
  $159 = (($153) + ($158))|0;
  $160 = Math_imul($151, -10497)|0;
  $161 = (($153) + ($160))|0;
  $162 = Math_imul($148, -8034)|0;
  $163 = Math_imul($149, -1597)|0;
  $164 = (($163) + ($157))|0;
  $165 = (($164) + ($159))|0;
  $166 = (($162) + ($156))|0;
  $167 = (($166) + ($161))|0;
  $168 = (($163) + ($155))|0;
  $169 = (($168) + ($161))|0;
  $170 = (($162) + ($154))|0;
  $171 = (($170) + ($159))|0;
  $172 = (($130) + 16842752)|0;
  $173 = (($172) + ($135))|0;
  $174 = (($128) + 16842752)|0;
  $175 = (($174) + ($137))|0;
  $176 = (($139) + 16842752)|0;
  $177 = (($138) + 16842752)|0;
  $178 = (($165) + ($173))|0;
  $179 = $178 >> 17;
  $180 = (_stbi__clamp($179)|0);
  HEAP8[$o$01>>0] = $180;
  $181 = (($173) - ($165))|0;
  $182 = $181 >> 17;
  $183 = (_stbi__clamp($182)|0);
  $184 = (($o$01) + 7|0);
  HEAP8[$184>>0] = $183;
  $185 = (($167) + ($175))|0;
  $186 = $185 >> 17;
  $187 = (_stbi__clamp($186)|0);
  $188 = (($o$01) + 1|0);
  HEAP8[$188>>0] = $187;
  $189 = (($175) - ($167))|0;
  $190 = $189 >> 17;
  $191 = (_stbi__clamp($190)|0);
  $192 = (($o$01) + 6|0);
  HEAP8[$192>>0] = $191;
  $193 = (($169) + ($176))|0;
  $194 = $193 >> 17;
  $195 = (_stbi__clamp($194)|0);
  $196 = (($o$01) + 2|0);
  HEAP8[$196>>0] = $195;
  $197 = (($176) - ($169))|0;
  $198 = $197 >> 17;
  $199 = (_stbi__clamp($198)|0);
  $200 = (($o$01) + 5|0);
  HEAP8[$200>>0] = $199;
  $201 = (($171) + ($177))|0;
  $202 = $201 >> 17;
  $203 = (_stbi__clamp($202)|0);
  $204 = (($o$01) + 3|0);
  HEAP8[$204>>0] = $203;
  $205 = (($177) - ($171))|0;
  $206 = $205 >> 17;
  $207 = (_stbi__clamp($206)|0);
  $208 = (($o$01) + 4|0);
  HEAP8[$208>>0] = $207;
  $209 = (($i$13) + 1)|0;
  $210 = (($v$12) + 32|0);
  $211 = (($o$01) + ($out_stride)|0);
  $exitcond = ($209|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $i$13 = $209;$o$01 = $211;$v$12 = $210;
  }
 }
 STACKTOP = sp;return;
}
function _stbi__YCbCr_to_RGB_row($out,$y,$pcb,$pcr,$count,$step) {
 $out = $out|0;
 $y = $y|0;
 $pcb = $pcb|0;
 $pcr = $pcr|0;
 $count = $count|0;
 $step = $step|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$0 = 0, $exitcond = 0, $g$0 = 0, $i$03 = 0, $r$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count|0)>(0);
 if ($0) {
  $$04 = $out;$i$03 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $1 = (($y) + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = $3 << 20;
  $5 = $4 | 524288;
  $6 = (($pcr) + ($i$03)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = (($8) + -128)|0;
  $10 = (($pcb) + ($i$03)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (($12) + -128)|0;
  $14 = Math_imul($9, 1470208)|0;
  $15 = (($14) + ($5))|0;
  $16 = Math_imul($9, -748800)|0;
  $17 = (($16) + ($5))|0;
  $18 = Math_imul($13, -360960)|0;
  $19 = $18 & -65536;
  $20 = (($17) + ($19))|0;
  $21 = Math_imul($13, 1858048)|0;
  $22 = (($21) + ($5))|0;
  $23 = $15 >> 20;
  $24 = $20 >> 20;
  $25 = $22 >> 20;
  $26 = ($23>>>0)>(255);
  if ($26) {
   $27 = $15 >> 31;
   $28 = $27 & -255;
   $29 = (($28) + 255)|0;
   $r$0 = $29;
  } else {
   $r$0 = $23;
  }
  $30 = ($24>>>0)>(255);
  if ($30) {
   $31 = $20 >> 31;
   $32 = $31 & -255;
   $33 = (($32) + 255)|0;
   $g$0 = $33;
  } else {
   $g$0 = $24;
  }
  $34 = ($25>>>0)>(255);
  if ($34) {
   $35 = $22 >> 31;
   $36 = $35 & -255;
   $37 = (($36) + 255)|0;
   $b$0 = $37;
  } else {
   $b$0 = $25;
  }
  $38 = $r$0&255;
  HEAP8[$$04>>0] = $38;
  $39 = $g$0&255;
  $40 = (($$04) + 1|0);
  HEAP8[$40>>0] = $39;
  $41 = $b$0&255;
  $42 = (($$04) + 2|0);
  HEAP8[$42>>0] = $41;
  $43 = (($$04) + 3|0);
  HEAP8[$43>>0] = -1;
  $44 = (($$04) + ($step)|0);
  $45 = (($i$03) + 1)|0;
  $exitcond = ($45|0)==($count|0);
  if ($exitcond) {
   break;
  } else {
   $$04 = $44;$i$03 = $45;
  }
 }
 STACKTOP = sp;return;
}
function _stbi__resample_row_hv_2($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $i$01 = 0, $t1$0$lcssa = 0, $t1$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)==(1);
 $1 = HEAP8[$in_near>>0]|0;
 $2 = $1&255;
 $3 = ($2*3)|0;
 $4 = HEAP8[$in_far>>0]|0;
 $5 = $4&255;
 $6 = (($3) + ($5))|0;
 $7 = (($6) + 2)|0;
 $8 = $7 >>> 2;
 $9 = $8&255;
 if ($0) {
  $10 = (($out) + 1|0);
  HEAP8[$10>>0] = $9;
  HEAP8[$out>>0] = $9;
  STACKTOP = sp;return ($out|0);
 }
 HEAP8[$out>>0] = $9;
 $11 = ($w|0)>(1);
 if ($11) {
  $i$01 = 1;$t1$02 = $6;
  while(1) {
   $12 = (($in_near) + ($i$01)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = ($14*3)|0;
   $16 = (($in_far) + ($i$01)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = (($15) + ($18))|0;
   $20 = ($t1$02*3)|0;
   $21 = (($20) + 8)|0;
   $22 = (($21) + ($19))|0;
   $23 = $22 >>> 4;
   $24 = $23&255;
   $25 = $i$01 << 1;
   $26 = (($25) + -1)|0;
   $27 = (($out) + ($26)|0);
   HEAP8[$27>>0] = $24;
   $28 = ($19*3)|0;
   $29 = (($t1$02) + 8)|0;
   $30 = (($29) + ($28))|0;
   $31 = $30 >>> 4;
   $32 = $31&255;
   $33 = (($out) + ($25)|0);
   HEAP8[$33>>0] = $32;
   $34 = (($i$01) + 1)|0;
   $exitcond = ($34|0)==($w|0);
   if ($exitcond) {
    $t1$0$lcssa = $19;
    break;
   } else {
    $i$01 = $34;$t1$02 = $19;
   }
  }
 } else {
  $t1$0$lcssa = $6;
 }
 $35 = (($t1$0$lcssa) + 2)|0;
 $36 = $35 >>> 2;
 $37 = $36&255;
 $38 = $w << 1;
 $39 = (($38) + -1)|0;
 $40 = (($out) + ($39)|0);
 HEAP8[$40>>0] = $37;
 STACKTOP = sp;return ($out|0);
}
function _stbi__clamp($x) {
 $x = $x|0;
 var $$not = 0, $0 = 0, $1 = 0, $2 = 0, $x$lobit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x>>>0)>(255);
 if ($0) {
  $x$lobit = $x >> 31;
  $1 = $x$lobit&255;
  $$not = $1 ^ -1;
  STACKTOP = sp;return ($$not|0);
 } else {
  $2 = $x&255;
  STACKTOP = sp;return ($2|0);
 }
 return 0|0;
}
function _stbi__stdio_read($user,$data,$size) {
 $user = $user|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fread(($data|0),1,($size|0),($user|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _stbi__stdio_skip($user,$n) {
 $user = $user|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_fseek(($user|0),($n|0),1)|0);
 STACKTOP = sp;return;
}
function _stbi__stdio_eof($user) {
 $user = $user|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_feof(($user|0))|0);
 STACKTOP = sp;return ($0|0);
}
function _DrawCube($position,$width,$height,$lenght,$color) {
 $position = $position|0;
 $width = +$width;
 $height = +$height;
 $lenght = +$lenght;
 $color = $color|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlPushMatrix();
 $0 = +HEAPF32[$position>>2];
 $1 = (($position) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (($position) + 8|0);
 $4 = +HEAPF32[$3>>2];
 _rlTranslatef($0,$2,$4);
 _rlBegin(1);
 $5 = HEAP8[$color>>0]|0;
 $6 = (($color) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($color) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($color) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 _rlColor4ub($5,$7,$9,$11);
 $12 = $width * 0.5;
 $13 = 0.0 - $12;
 $14 = $height * 0.5;
 $15 = 0.0 - $14;
 $16 = $lenght * 0.5;
 $17 = $16 + 0.0;
 _rlVertex3f($13,$15,$17);
 $18 = $12 + 0.0;
 _rlVertex3f($18,$15,$17);
 $19 = $14 + 0.0;
 _rlVertex3f($13,$19,$17);
 _rlVertex3f($18,$19,$17);
 _rlVertex3f($13,$19,$17);
 _rlVertex3f($18,$15,$17);
 $20 = 0.0 - $16;
 _rlVertex3f($13,$15,$20);
 _rlVertex3f($13,$19,$20);
 _rlVertex3f($18,$15,$20);
 _rlVertex3f($18,$19,$20);
 _rlVertex3f($18,$15,$20);
 _rlVertex3f($13,$19,$20);
 _rlVertex3f($13,$19,$20);
 _rlVertex3f($13,$19,$17);
 _rlVertex3f($18,$19,$17);
 _rlVertex3f($18,$19,$20);
 _rlVertex3f($13,$19,$20);
 _rlVertex3f($18,$19,$17);
 _rlVertex3f($13,$15,$20);
 _rlVertex3f($18,$15,$17);
 _rlVertex3f($13,$15,$17);
 _rlVertex3f($18,$15,$20);
 _rlVertex3f($18,$15,$17);
 _rlVertex3f($13,$15,$20);
 _rlVertex3f($18,$15,$20);
 _rlVertex3f($18,$19,$20);
 _rlVertex3f($18,$19,$17);
 _rlVertex3f($18,$15,$17);
 _rlVertex3f($18,$15,$20);
 _rlVertex3f($18,$19,$17);
 _rlVertex3f($13,$15,$20);
 _rlVertex3f($13,$19,$17);
 _rlVertex3f($13,$19,$20);
 _rlVertex3f($13,$15,$17);
 _rlVertex3f($13,$19,$17);
 _rlVertex3f($13,$15,$20);
 _rlEnd();
 _rlPopMatrix();
 STACKTOP = sp;return;
}
function _DrawCubeWires($position,$width,$height,$lenght,$color) {
 $position = $position|0;
 $width = +$width;
 $height = +$height;
 $lenght = +$lenght;
 $color = $color|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlPushMatrix();
 $0 = +HEAPF32[$position>>2];
 $1 = (($position) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (($position) + 8|0);
 $4 = +HEAPF32[$3>>2];
 _rlTranslatef($0,$2,$4);
 _rlBegin(0);
 $5 = HEAP8[$color>>0]|0;
 $6 = (($color) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($color) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($color) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 _rlColor4ub($5,$7,$9,$11);
 $12 = $width * 0.5;
 $13 = 0.0 - $12;
 $14 = $height * 0.5;
 $15 = 0.0 - $14;
 $16 = $lenght * 0.5;
 $17 = $16 + 0.0;
 _rlVertex3f($13,$15,$17);
 $18 = $12 + 0.0;
 _rlVertex3f($18,$15,$17);
 _rlVertex3f($18,$15,$17);
 $19 = $14 + 0.0;
 _rlVertex3f($18,$19,$17);
 _rlVertex3f($18,$19,$17);
 _rlVertex3f($13,$19,$17);
 _rlVertex3f($13,$19,$17);
 _rlVertex3f($13,$15,$17);
 $20 = 0.0 - $16;
 _rlVertex3f($13,$15,$20);
 _rlVertex3f($18,$15,$20);
 _rlVertex3f($18,$15,$20);
 _rlVertex3f($18,$19,$20);
 _rlVertex3f($18,$19,$20);
 _rlVertex3f($13,$19,$20);
 _rlVertex3f($13,$19,$20);
 _rlVertex3f($13,$15,$20);
 _rlVertex3f($13,$19,$17);
 _rlVertex3f($13,$19,$20);
 _rlVertex3f($18,$19,$17);
 _rlVertex3f($18,$19,$20);
 _rlVertex3f($13,$15,$17);
 _rlVertex3f($13,$15,$20);
 _rlVertex3f($18,$15,$17);
 _rlVertex3f($18,$15,$20);
 _rlEnd();
 _rlPopMatrix();
 STACKTOP = sp;return;
}
function _DrawSphere($centerPos,$radius,$color) {
 $centerPos = $centerPos|0;
 $radius = +$radius;
 $color = $color|0;
 var $centerPos$byval_copy = 0, $color$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $color$byval_copy = sp + 12|0;
 $centerPos$byval_copy = sp;
 ;HEAP32[$centerPos$byval_copy+0>>2]=HEAP32[$centerPos+0>>2]|0;HEAP32[$centerPos$byval_copy+4>>2]=HEAP32[$centerPos+4>>2]|0;HEAP32[$centerPos$byval_copy+8>>2]=HEAP32[$centerPos+8>>2]|0;
 ;HEAP8[$color$byval_copy+0>>0]=HEAP8[$color+0>>0]|0;HEAP8[$color$byval_copy+1>>0]=HEAP8[$color+1>>0]|0;HEAP8[$color$byval_copy+2>>0]=HEAP8[$color+2>>0]|0;HEAP8[$color$byval_copy+3>>0]=HEAP8[$color+3>>0]|0;
 _DrawSphereEx($centerPos$byval_copy,$radius,16,16,$color$byval_copy);
 STACKTOP = sp;return;
}
function _DrawSphereEx($centerPos,$radius,$rings,$slices,$color) {
 $centerPos = $centerPos|0;
 $radius = +$radius;
 $rings = $rings|0;
 $slices = $slices|0;
 $color = $color|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond4 = 0, $i$02 = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlPushMatrix();
 $0 = +HEAPF32[$centerPos>>2];
 $1 = (($centerPos) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (($centerPos) + 8|0);
 $4 = +HEAPF32[$3>>2];
 _rlTranslatef($0,$2,$4);
 _rlScalef($radius,$radius,$radius);
 _rlBegin(1);
 $5 = HEAP8[$color>>0]|0;
 $6 = (($color) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($color) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($color) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 _rlColor4ub($5,$7,$9,$11);
 $12 = (($rings) + 2)|0;
 $13 = ($12|0)>(0);
 if (!($13)) {
  _rlEnd();
  _rlPopMatrix();
  STACKTOP = sp;return;
 }
 $14 = ($slices|0)>(0);
 $15 = (($rings) + 1)|0;
 $i$02 = 0;
 while(1) {
  if ($14) {
   $16 = (180 / ($15|0))&-1;
   $17 = Math_imul($16, $i$02)|0;
   $18 = (($17) + 270)|0;
   $19 = (+($18|0));
   $20 = $19 * 0.0174532925199432954744;
   $21 = (+Math_cos((+$20)));
   $22 = (+Math_sin((+$20)));
   $23 = $22;
   $24 = (($i$02) + 1)|0;
   $25 = Math_imul($16, $24)|0;
   $26 = (($25) + 270)|0;
   $27 = (+($26|0));
   $28 = $27 * 0.0174532925199432954744;
   $29 = (+Math_cos((+$28)));
   $30 = (+Math_sin((+$28)));
   $31 = $30;
   $j$01 = 0;
   while(1) {
    $32 = ($j$01*360)|0;
    $33 = (($32|0) / ($slices|0))&-1;
    $34 = (+($33|0));
    $35 = $34 * 0.0174532925199432954744;
    $36 = (+Math_sin((+$35)));
    $37 = $21 * $36;
    $38 = $37;
    $39 = (+Math_cos((+$35)));
    $40 = $21 * $39;
    $41 = $40;
    _rlVertex3f($38,$23,$41);
    $42 = (($j$01) + 1)|0;
    $43 = ($42*360)|0;
    $44 = (($43|0) / ($slices|0))&-1;
    $45 = (+($44|0));
    $46 = $45 * 0.0174532925199432954744;
    $47 = (+Math_sin((+$46)));
    $48 = $29 * $47;
    $49 = $48;
    $50 = (+Math_cos((+$46)));
    $51 = $29 * $50;
    $52 = $51;
    _rlVertex3f($49,$31,$52);
    $53 = $36 * $29;
    $54 = $53;
    $55 = $39 * $29;
    $56 = $55;
    _rlVertex3f($54,$31,$56);
    _rlVertex3f($38,$23,$41);
    $57 = $21 * $47;
    $58 = $57;
    $59 = $21 * $50;
    $60 = $59;
    _rlVertex3f($58,$23,$60);
    _rlVertex3f($49,$31,$52);
    $exitcond = ($42|0)==($slices|0);
    if ($exitcond) {
     break;
    } else {
     $j$01 = $42;
    }
   }
  }
  $61 = (($i$02) + 1)|0;
  $62 = (($rings) + 1)|0;
  $exitcond4 = ($i$02|0)==($62|0);
  if ($exitcond4) {
   break;
  } else {
   $i$02 = $61;
  }
 }
 _rlEnd();
 _rlPopMatrix();
 STACKTOP = sp;return;
}
function _DrawSphereWires($centerPos,$radius,$rings,$slices,$color) {
 $centerPos = $centerPos|0;
 $radius = +$radius;
 $rings = $rings|0;
 $slices = $slices|0;
 $color = $color|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $exitcond4 = 0, $i$02 = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlPushMatrix();
 $0 = +HEAPF32[$centerPos>>2];
 $1 = (($centerPos) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (($centerPos) + 8|0);
 $4 = +HEAPF32[$3>>2];
 _rlTranslatef($0,$2,$4);
 _rlScalef($radius,$radius,$radius);
 _rlBegin(0);
 $5 = HEAP8[$color>>0]|0;
 $6 = (($color) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($color) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($color) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 _rlColor4ub($5,$7,$9,$11);
 $12 = (($rings) + 2)|0;
 $13 = ($12|0)>(0);
 if (!($13)) {
  _rlEnd();
  _rlPopMatrix();
  STACKTOP = sp;return;
 }
 $14 = ($slices|0)>(0);
 $15 = (($rings) + 1)|0;
 $i$02 = 0;
 while(1) {
  if ($14) {
   $16 = (180 / ($15|0))&-1;
   $17 = Math_imul($16, $i$02)|0;
   $18 = (($17) + 270)|0;
   $19 = (+($18|0));
   $20 = $19 * 0.0174532925199432954744;
   $21 = (+Math_cos((+$20)));
   $22 = (+Math_sin((+$20)));
   $23 = $22;
   $24 = (($i$02) + 1)|0;
   $25 = Math_imul($16, $24)|0;
   $26 = (($25) + 270)|0;
   $27 = (+($26|0));
   $28 = $27 * 0.0174532925199432954744;
   $29 = (+Math_cos((+$28)));
   $30 = (+Math_sin((+$28)));
   $31 = $30;
   $j$01 = 0;
   while(1) {
    $32 = ($j$01*360)|0;
    $33 = (($32|0) / ($slices|0))&-1;
    $34 = (+($33|0));
    $35 = $34 * 0.0174532925199432954744;
    $36 = (+Math_sin((+$35)));
    $37 = $21 * $36;
    $38 = $37;
    $39 = (+Math_cos((+$35)));
    $40 = $21 * $39;
    $41 = $40;
    _rlVertex3f($38,$23,$41);
    $42 = (($j$01) + 1)|0;
    $43 = ($42*360)|0;
    $44 = (($43|0) / ($slices|0))&-1;
    $45 = (+($44|0));
    $46 = $45 * 0.0174532925199432954744;
    $47 = (+Math_sin((+$46)));
    $48 = $29 * $47;
    $49 = $48;
    $50 = (+Math_cos((+$46)));
    $51 = $29 * $50;
    $52 = $51;
    _rlVertex3f($49,$31,$52);
    _rlVertex3f($49,$31,$52);
    $53 = $36 * $29;
    $54 = $53;
    $55 = $39 * $29;
    $56 = $55;
    _rlVertex3f($54,$31,$56);
    _rlVertex3f($54,$31,$56);
    _rlVertex3f($38,$23,$41);
    $exitcond = ($42|0)==($slices|0);
    if ($exitcond) {
     break;
    } else {
     $j$01 = $42;
    }
   }
  }
  $57 = (($i$02) + 1)|0;
  $58 = (($rings) + 1)|0;
  $exitcond4 = ($i$02|0)==($58|0);
  if ($exitcond4) {
   break;
  } else {
   $i$02 = $57;
  }
 }
 _rlEnd();
 _rlPopMatrix();
 STACKTOP = sp;return;
}
function _DrawCylinder($position,$radiusTop,$radiusBottom,$height,$sides,$color) {
 $position = $position|0;
 $radiusTop = +$radiusTop;
 $radiusBottom = +$radiusBottom;
 $height = +$height;
 $sides = $sides|0;
 $color = $color|0;
 var $$sides = 0, $0 = 0, $1 = 0.0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0;
 var $98 = 0.0, $99 = 0.0, $i$05 = 0, $i1$03 = 0, $i2$08 = 0, $i3$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sides|0)<(3);
 $$sides = $0 ? 3 : $sides;
 _rlPushMatrix();
 $1 = +HEAPF32[$position>>2];
 $2 = (($position) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = (($position) + 8|0);
 $5 = +HEAPF32[$4>>2];
 _rlTranslatef($1,$3,$5);
 _rlBegin(1);
 $6 = HEAP8[$color>>0]|0;
 $7 = (($color) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = (($color) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = (($color) + 3|0);
 $12 = HEAP8[$11>>0]|0;
 _rlColor4ub($6,$8,$10,$12);
 $13 = $radiusTop > 0.0;
 $14 = $radiusBottom;
 $15 = (360 / ($$sides|0))&-1;
 if ($13) {
  $16 = $radiusTop;
  $i$05 = 0;
  while(1) {
   $19 = (+($i$05|0));
   $20 = $19 * 0.0174532925199432954744;
   $21 = (+Math_sin((+$20)));
   $22 = $14 * $21;
   $23 = $22;
   $24 = (+Math_cos((+$20)));
   $25 = $14 * $24;
   $26 = $25;
   _rlVertex3f($23,0.0,$26);
   $27 = (($15) + ($i$05))|0;
   $28 = (+($27|0));
   $29 = $28 * 0.0174532925199432954744;
   $30 = (+Math_sin((+$29)));
   $31 = $14 * $30;
   $32 = $31;
   $33 = (+Math_cos((+$29)));
   $34 = $14 * $33;
   $35 = $34;
   _rlVertex3f($32,0.0,$35);
   $36 = $16 * $30;
   $37 = $36;
   $38 = $16 * $33;
   $39 = $38;
   _rlVertex3f($37,$height,$39);
   $40 = $16 * $21;
   $41 = $40;
   $42 = $16 * $24;
   $43 = $42;
   _rlVertex3f($41,$height,$43);
   _rlVertex3f($23,0.0,$26);
   _rlVertex3f($37,$height,$39);
   $44 = ($27|0)<(360);
   if ($44) {
    $i$05 = $27;
   } else {
    break;
   }
  }
  $17 = $radiusTop;
  $18 = (360 / ($$sides|0))&-1;
  $i1$03 = 0;
  while(1) {
   _rlVertex3f(0.0,$height,0.0);
   $47 = (+($i1$03|0));
   $48 = $47 * 0.0174532925199432954744;
   $49 = (+Math_sin((+$48)));
   $50 = $17 * $49;
   $51 = $50;
   $52 = (+Math_cos((+$48)));
   $53 = $17 * $52;
   $54 = $53;
   _rlVertex3f($51,$height,$54);
   $55 = (($18) + ($i1$03))|0;
   $56 = (+($55|0));
   $57 = $56 * 0.0174532925199432954744;
   $58 = (+Math_sin((+$57)));
   $59 = $17 * $58;
   $60 = $59;
   $61 = (+Math_cos((+$57)));
   $62 = $17 * $61;
   $63 = $62;
   _rlVertex3f($60,$height,$63);
   $64 = ($55|0)<(360);
   if ($64) {
    $i1$03 = $55;
   } else {
    break;
   }
  }
 } else {
  $i2$08 = 0;
  while(1) {
   _rlVertex3f(0.0,$height,0.0);
   $65 = (+($i2$08|0));
   $66 = $65 * 0.0174532925199432954744;
   $67 = (+Math_sin((+$66)));
   $68 = $14 * $67;
   $69 = $68;
   $70 = (+Math_cos((+$66)));
   $71 = $14 * $70;
   $72 = $71;
   _rlVertex3f($69,0.0,$72);
   $73 = (($15) + ($i2$08))|0;
   $74 = (+($73|0));
   $75 = $74 * 0.0174532925199432954744;
   $76 = (+Math_sin((+$75)));
   $77 = $14 * $76;
   $78 = $77;
   $79 = (+Math_cos((+$75)));
   $80 = $14 * $79;
   $81 = $80;
   _rlVertex3f($78,0.0,$81);
   $82 = ($73|0)<(360);
   if ($82) {
    $i2$08 = $73;
   } else {
    break;
   }
  }
 }
 $45 = (360 / ($$sides|0))&-1;
 $46 = $radiusBottom;
 $i3$01 = 0;
 while(1) {
  _rlVertex3f(0.0,0.0,0.0);
  $83 = (($45) + ($i3$01))|0;
  $84 = (+($83|0));
  $85 = $84 * 0.0174532925199432954744;
  $86 = (+Math_sin((+$85)));
  $87 = $46 * $86;
  $88 = $87;
  $89 = (+Math_cos((+$85)));
  $90 = $46 * $89;
  $91 = $90;
  _rlVertex3f($88,0.0,$91);
  $92 = (+($i3$01|0));
  $93 = $92 * 0.0174532925199432954744;
  $94 = (+Math_sin((+$93)));
  $95 = $46 * $94;
  $96 = $95;
  $97 = (+Math_cos((+$93)));
  $98 = $46 * $97;
  $99 = $98;
  _rlVertex3f($96,0.0,$99);
  $100 = ($83|0)<(360);
  if ($100) {
   $i3$01 = $83;
  } else {
   break;
  }
 }
 _rlEnd();
 _rlPopMatrix();
 STACKTOP = sp;return;
}
function _DrawCylinderWires($position,$radiusTop,$radiusBottom,$height,$sides,$color) {
 $position = $position|0;
 $radiusTop = +$radiusTop;
 $radiusBottom = +$radiusBottom;
 $height = +$height;
 $sides = $sides|0;
 $color = $color|0;
 var $$sides = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $5 = 0.0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sides|0)<(3);
 $$sides = $0 ? 3 : $sides;
 _rlPushMatrix();
 $1 = +HEAPF32[$position>>2];
 $2 = (($position) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = (($position) + 8|0);
 $5 = +HEAPF32[$4>>2];
 _rlTranslatef($1,$3,$5);
 _rlBegin(0);
 $6 = HEAP8[$color>>0]|0;
 $7 = (($color) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = (($color) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = (($color) + 3|0);
 $12 = HEAP8[$11>>0]|0;
 _rlColor4ub($6,$8,$10,$12);
 $13 = $radiusBottom;
 $14 = (360 / ($$sides|0))&-1;
 $15 = $radiusTop;
 $i$01 = 0;
 while(1) {
  $16 = (+($i$01|0));
  $17 = $16 * 0.0174532925199432954744;
  $18 = (+Math_sin((+$17)));
  $19 = $13 * $18;
  $20 = $19;
  $21 = (+Math_cos((+$17)));
  $22 = $13 * $21;
  $23 = $22;
  _rlVertex3f($20,0.0,$23);
  $24 = (($14) + ($i$01))|0;
  $25 = (+($24|0));
  $26 = $25 * 0.0174532925199432954744;
  $27 = (+Math_sin((+$26)));
  $28 = $13 * $27;
  $29 = $28;
  $30 = (+Math_cos((+$26)));
  $31 = $13 * $30;
  $32 = $31;
  _rlVertex3f($29,0.0,$32);
  _rlVertex3f($29,0.0,$32);
  $33 = $15 * $27;
  $34 = $33;
  $35 = $15 * $30;
  $36 = $35;
  _rlVertex3f($34,$height,$36);
  _rlVertex3f($34,$height,$36);
  $37 = $15 * $18;
  $38 = $37;
  $39 = $15 * $21;
  $40 = $39;
  _rlVertex3f($38,$height,$40);
  _rlVertex3f($38,$height,$40);
  _rlVertex3f($20,0.0,$23);
  $41 = ($24|0)<(360);
  if ($41) {
   $i$01 = $24;
  } else {
   break;
  }
 }
 _rlEnd();
 _rlPopMatrix();
 STACKTOP = sp;return;
}
function _DrawGrid($slices,$spacing) {
 $slices = $slices|0;
 $spacing = +$spacing;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($slices|0) / 2)&-1;
 _rlBegin(0);
 $1 = (0 - ($0))|0;
 $2 = ($0|0)<($1|0);
 if ($2) {
  _rlEnd();
  STACKTOP = sp;return;
 }
 $3 = (+($1|0));
 $4 = $3 * $spacing;
 $5 = (+($0|0));
 $6 = $5 * $spacing;
 $i$01 = $1;
 while(1) {
  $7 = ($i$01|0)==(0);
  if ($7) {
   _rlColor3f(0.5,0.5,0.5);
   _rlColor3f(0.5,0.5,0.5);
   _rlColor3f(0.5,0.5,0.5);
   _rlColor3f(0.5,0.5,0.5);
  } else {
   _rlColor3f(0.75,0.75,0.75);
   _rlColor3f(0.75,0.75,0.75);
   _rlColor3f(0.75,0.75,0.75);
   _rlColor3f(0.75,0.75,0.75);
  }
  $8 = (+($i$01|0));
  $9 = $8 * $spacing;
  _rlVertex3f($9,0.0,$4);
  _rlVertex3f($9,0.0,$6);
  _rlVertex3f($4,0.0,$9);
  _rlVertex3f($6,0.0,$9);
  $10 = (($i$01) + 1)|0;
  $11 = ($i$01|0)<($0|0);
  if ($11) {
   $i$01 = $10;
  } else {
   break;
  }
 }
 _rlEnd();
 STACKTOP = sp;return;
}
function _DrawGizmo($position) {
 $position = $position|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlPushMatrix();
 $0 = +HEAPF32[$position>>2];
 $1 = (($position) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (($position) + 8|0);
 $4 = +HEAPF32[$3>>2];
 _rlTranslatef($0,$2,$4);
 _rlScalef(1.0,1.0,1.0);
 _rlBegin(0);
 _rlColor3f(1.0,0.0,0.0);
 _rlVertex3f(0.0,0.0,0.0);
 _rlColor3f(1.0,0.0,0.0);
 _rlVertex3f(1.0,0.0,0.0);
 _rlColor3f(0.0,1.0,0.0);
 _rlVertex3f(0.0,0.0,0.0);
 _rlColor3f(0.0,1.0,0.0);
 _rlVertex3f(0.0,1.0,0.0);
 _rlColor3f(0.0,0.0,1.0);
 _rlVertex3f(0.0,0.0,0.0);
 _rlColor3f(0.0,0.0,1.0);
 _rlVertex3f(0.0,0.0,1.0);
 _rlEnd();
 _rlPopMatrix();
 STACKTOP = sp;return;
}
function _LoadModel($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $model = 0, $vData = 0, $vData$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vData$byval_copy = sp;
 $vData = sp + 84|0;
 $0 = sp + 20|0;
 $model = sp + 40|0;
 $1 = (_GetExtension($fileName)|0);
 $2 = (_strcmp($1,15928)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _LoadOBJ($0,$fileName);
  ;HEAP32[$vData+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$vData+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$vData+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$vData+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$vData+16>>2]=HEAP32[$0+16>>2]|0;
 } else {
  HEAP32[$vData$byval_copy>>2] = $fileName;
  _TraceLog(2,15936,$vData$byval_copy);
 }
 ;HEAP32[$vData$byval_copy+0>>2]=HEAP32[$vData+0>>2]|0;HEAP32[$vData$byval_copy+4>>2]=HEAP32[$vData+4>>2]|0;HEAP32[$vData$byval_copy+8>>2]=HEAP32[$vData+8>>2]|0;HEAP32[$vData$byval_copy+12>>2]=HEAP32[$vData+12>>2]|0;HEAP32[$vData$byval_copy+16>>2]=HEAP32[$vData+16>>2]|0;
 _rlglLoadModel($model,$vData$byval_copy);
 dest=$agg$result+0|0; src=$model+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _LoadOBJ($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $$byval_copy89 = 0, $$byval_copy90 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0;
 var $222 = 0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $comments = 0, $countNormals$0$ph1039 = 0, $countNormals$0$ph42 = 0, $countTexCoords$0$ph1140 = 0, $countTexCoords$0$ph1335 = 0, $countTexCoords$0$ph43 = 0, $countVertex$0$ph41 = 0, $dataType = 0, $midNormals$0 = 0, $midTexCoords$0 = 0, $nCounter$0$ph = 0, $nCounter$0$ph$ph = 0;
 var $nCounter$1 = 0, $norm = 0, $numNormals$0$ph106 = 0, $numNormals$0$ph2068 = 0, $numNormals$0$ph2079 = 0, $numTexCoords$0$ph107 = 0, $numTexCoords$0$ph2180 = 0, $numTexCoords$0$ph2453 = 0, $numTexCoords$0$ph2460 = 0, $numTriangles$0$ph108 = 0, $numTriangles$0$ph2281 = 0, $numTriangles$0$ph2561 = 0, $numTriangles$0$ph2747 = 0, $numTriangles$0$ph2748 = 0, $numVertex$0$ph105 = 0, $numVertex$0$ph89 = 0, $or$cond = 0, $tcCounter$0$ph$ph = 0, $useless = 0, $vCounter$0$ph = 0;
 var $vCounter$0$ph$ph = 0, $vNum = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr62 = 0, $vararg_ptr63 = 0, $vararg_ptr67 = 0, $vararg_ptr68 = 0, $vararg_ptr69 = 0, $vararg_ptr70 = 0, $vararg_ptr71 = 0, $vararg_ptr75 = 0;
 var $vararg_ptr76 = 0, $vararg_ptr77 = 0, $vararg_ptr78 = 0, $vararg_ptr79 = 0, $vararg_ptr80 = 0, $vararg_ptr81 = 0, $vararg_ptr82 = 0, $vnNum = 0, $vtNum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy90 = sp;
 $$byval_copy89 = sp + 100|0;
 $dataType = sp + 124|0;
 $comments = sp + 128|0;
 $useless = sp + 96|0;
 $vNum = sp + 112|0;
 $vtNum = sp + 60|0;
 $vnNum = sp + 48|0;
 $norm = sp + 36|0;
 $0 = sp + 72|0;
 $1 = sp + 84|0;
 $2 = (_fopen(($fileName|0),(15992|0))|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$$byval_copy90>>2] = $fileName;
  _TraceLog(2,16000,$$byval_copy90);
  STACKTOP = sp;return;
 }
 $4 = (_feof(($2|0))|0);
 $5 = ($4|0)==(0);
 L5: do {
  if ($5) {
   $numNormals$0$ph106 = 0;$numTexCoords$0$ph107 = 0;$numTriangles$0$ph108 = 0;$numVertex$0$ph105 = 0;
   while(1) {
    $numNormals$0$ph2079 = $numNormals$0$ph106;$numTexCoords$0$ph2180 = $numTexCoords$0$ph107;$numTriangles$0$ph2281 = $numTriangles$0$ph108;
    L8: while(1) {
     $numTexCoords$0$ph2460 = $numTexCoords$0$ph2180;$numTriangles$0$ph2561 = $numTriangles$0$ph2281;
     while(1) {
      $numTriangles$0$ph2748 = $numTriangles$0$ph2561;
      L12: while(1) {
       L14: while(1) {
        HEAP32[$$byval_copy90>>2] = $dataType;
        (_fscanf(($2|0),(16040|0),($$byval_copy90|0))|0);
        $6 = HEAP8[$dataType>>0]|0;
        $7 = $6 << 24 >> 24;
        switch ($7|0) {
        case 118:  {
         break L12;
         break;
        }
        case 117: case 109: case 115: case 103: case 111: case 35:  {
         (_fgets(($comments|0),200,($2|0))|0);
         break;
        }
        case 102:  {
         break L14;
         break;
        }
        default: {
        }
        }
        $8 = (_feof(($2|0))|0);
        $9 = ($8|0)==(0);
        if (!($9)) {
         $numNormals$0$ph2068 = $numNormals$0$ph2079;$numTexCoords$0$ph2453 = $numTexCoords$0$ph2460;$numTriangles$0$ph2747 = $numTriangles$0$ph2748;$numVertex$0$ph89 = $numVertex$0$ph105;
         break L5;
        }
       }
       $20 = (($numTriangles$0$ph2748) + 1)|0;
       (_fgets(($comments|0),200,($2|0))|0);
       $21 = (_feof(($2|0))|0);
       $22 = ($21|0)==(0);
       if ($22) {
        $numTriangles$0$ph2748 = $20;
       } else {
        $numNormals$0$ph2068 = $numNormals$0$ph2079;$numTexCoords$0$ph2453 = $numTexCoords$0$ph2460;$numTriangles$0$ph2747 = $20;$numVertex$0$ph89 = $numVertex$0$ph105;
        break L5;
       }
      }
      HEAP32[$$byval_copy90>>2] = $dataType;
      (_fscanf(($2|0),(16040|0),($$byval_copy90|0))|0);
      $10 = HEAP8[$dataType>>0]|0;
      if ((($10<<24>>24) == 110)) {
       break;
      } else if (!((($10<<24>>24) == 116))) {
       break L8;
      }
      $11 = (($numTexCoords$0$ph2460) + 1)|0;
      (_fgets(($comments|0),200,($2|0))|0);
      $12 = (_feof(($2|0))|0);
      $13 = ($12|0)==(0);
      if ($13) {
       $numTexCoords$0$ph2460 = $11;$numTriangles$0$ph2561 = $numTriangles$0$ph2748;
      } else {
       $numNormals$0$ph2068 = $numNormals$0$ph2079;$numTexCoords$0$ph2453 = $11;$numTriangles$0$ph2747 = $numTriangles$0$ph2748;$numVertex$0$ph89 = $numVertex$0$ph105;
       break L5;
      }
     }
     $14 = (($numNormals$0$ph2079) + 1)|0;
     (_fgets(($comments|0),200,($2|0))|0);
     $15 = (_feof(($2|0))|0);
     $16 = ($15|0)==(0);
     if ($16) {
      $numNormals$0$ph2079 = $14;$numTexCoords$0$ph2180 = $numTexCoords$0$ph2460;$numTriangles$0$ph2281 = $numTriangles$0$ph2748;
     } else {
      $numNormals$0$ph2068 = $14;$numTexCoords$0$ph2453 = $numTexCoords$0$ph2460;$numTriangles$0$ph2747 = $numTriangles$0$ph2748;$numVertex$0$ph89 = $numVertex$0$ph105;
      break L5;
     }
    }
    $17 = (($numVertex$0$ph105) + 1)|0;
    (_fgets(($comments|0),200,($2|0))|0);
    $18 = (_feof(($2|0))|0);
    $19 = ($18|0)==(0);
    if ($19) {
     $numNormals$0$ph106 = $numNormals$0$ph2079;$numTexCoords$0$ph107 = $numTexCoords$0$ph2460;$numTriangles$0$ph108 = $numTriangles$0$ph2748;$numVertex$0$ph105 = $17;
    } else {
     $numNormals$0$ph2068 = $numNormals$0$ph2079;$numTexCoords$0$ph2453 = $numTexCoords$0$ph2460;$numTriangles$0$ph2747 = $numTriangles$0$ph2748;$numVertex$0$ph89 = $17;
     break;
    }
   }
  } else {
   $numNormals$0$ph2068 = 0;$numTexCoords$0$ph2453 = 0;$numTriangles$0$ph2747 = 0;$numVertex$0$ph89 = 0;
  }
 } while(0);
 HEAP32[$$byval_copy90>>2] = $fileName;
 $vararg_ptr10 = (($$byval_copy90) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $numVertex$0$ph89;
 _TraceLog(3,16048,$$byval_copy90);
 HEAP32[$$byval_copy90>>2] = $fileName;
 $vararg_ptr14 = (($$byval_copy90) + 4|0);
 HEAP32[$vararg_ptr14>>2] = $numTexCoords$0$ph2453;
 _TraceLog(3,16080,$$byval_copy90);
 HEAP32[$$byval_copy90>>2] = $fileName;
 $vararg_ptr18 = (($$byval_copy90) + 4|0);
 HEAP32[$vararg_ptr18>>2] = $numNormals$0$ph2068;
 _TraceLog(3,16112,$$byval_copy90);
 HEAP32[$$byval_copy90>>2] = $fileName;
 $vararg_ptr22 = (($$byval_copy90) + 4|0);
 HEAP32[$vararg_ptr22>>2] = $numTriangles$0$ph2747;
 _TraceLog(3,16144,$$byval_copy90);
 $23 = ($numVertex$0$ph89*12)|0;
 $24 = (_malloc($23)|0);
 $25 = ($numNormals$0$ph2068|0)>(0);
 if ($25) {
  $26 = ($numNormals$0$ph2068*12)|0;
  $27 = (_malloc($26)|0);
  $midNormals$0 = $27;
 } else {
  $midNormals$0 = 0;
 }
 $28 = ($numTexCoords$0$ph2453|0)>(0);
 if ($28) {
  $29 = $numTexCoords$0$ph2453 << 3;
  $30 = (_malloc($29)|0);
  $midTexCoords$0 = $30;
 } else {
  $midTexCoords$0 = 0;
 }
 _rewind(($2|0));
 $31 = (_feof(($2|0))|0);
 $32 = ($31|0)==(0);
 L31: do {
  if ($32) {
   $countNormals$0$ph42 = 0;$countTexCoords$0$ph43 = 0;$countVertex$0$ph41 = 0;
   while(1) {
    $countNormals$0$ph1039 = $countNormals$0$ph42;$countTexCoords$0$ph1140 = $countTexCoords$0$ph43;
    L34: while(1) {
     $countTexCoords$0$ph1335 = $countTexCoords$0$ph1140;
     while(1) {
      L38: while(1) {
       HEAP32[$$byval_copy90>>2] = $dataType;
       (_fscanf(($2|0),(16040|0),($$byval_copy90|0))|0);
       $33 = HEAP8[$dataType>>0]|0;
       $34 = $33 << 24 >> 24;
       switch ($34|0) {
       case 118:  {
        break L38;
        break;
       }
       case 102: case 117: case 109: case 115: case 103: case 111: case 35:  {
        (_fgets(($comments|0),200,($2|0))|0);
        break;
       }
       default: {
       }
       }
       $35 = (_feof(($2|0))|0);
       $36 = ($35|0)==(0);
       if (!($36)) {
        break L31;
       }
      }
      HEAP32[$$byval_copy90>>2] = $dataType;
      (_fscanf(($2|0),(16040|0),($$byval_copy90|0))|0);
      $37 = HEAP8[$dataType>>0]|0;
      if ((($37<<24>>24) == 110)) {
       break;
      } else if (!((($37<<24>>24) == 116))) {
       break L34;
      }
      HEAPF32[$useless>>2] = 0.0;
      $38 = (($midTexCoords$0) + ($countTexCoords$0$ph1335<<3)|0);
      $39 = ((($midTexCoords$0) + ($countTexCoords$0$ph1335<<3)|0) + 4|0);
      HEAP32[$$byval_copy90>>2] = $38;
      $vararg_ptr32 = (($$byval_copy90) + 4|0);
      HEAP32[$vararg_ptr32>>2] = $39;
      $vararg_ptr33 = (($$byval_copy90) + 8|0);
      HEAP32[$vararg_ptr33>>2] = $useless;
      (_fscanf(($2|0),(16176|0),($$byval_copy90|0))|0);
      $40 = (($countTexCoords$0$ph1335) + 1)|0;
      HEAP32[$$byval_copy90>>2] = $dataType;
      (_fscanf(($2|0),(16040|0),($$byval_copy90|0))|0);
      $41 = (_feof(($2|0))|0);
      $42 = ($41|0)==(0);
      if ($42) {
       $countTexCoords$0$ph1335 = $40;
      } else {
       break L31;
      }
     }
     $43 = (($midNormals$0) + (($countNormals$0$ph1039*12)|0)|0);
     $44 = ((($midNormals$0) + (($countNormals$0$ph1039*12)|0)|0) + 4|0);
     $45 = ((($midNormals$0) + (($countNormals$0$ph1039*12)|0)|0) + 8|0);
     HEAP32[$$byval_copy90>>2] = $43;
     $vararg_ptr40 = (($$byval_copy90) + 4|0);
     HEAP32[$vararg_ptr40>>2] = $44;
     $vararg_ptr41 = (($$byval_copy90) + 8|0);
     HEAP32[$vararg_ptr41>>2] = $45;
     (_fscanf(($2|0),(16176|0),($$byval_copy90|0))|0);
     $46 = (($countNormals$0$ph1039) + 1)|0;
     HEAP32[$$byval_copy90>>2] = $dataType;
     (_fscanf(($2|0),(16040|0),($$byval_copy90|0))|0);
     $47 = (_feof(($2|0))|0);
     $48 = ($47|0)==(0);
     if ($48) {
      $countNormals$0$ph1039 = $46;$countTexCoords$0$ph1140 = $countTexCoords$0$ph1335;
     } else {
      break L31;
     }
    }
    $49 = (($24) + (($countVertex$0$ph41*12)|0)|0);
    $50 = ((($24) + (($countVertex$0$ph41*12)|0)|0) + 4|0);
    $51 = ((($24) + (($countVertex$0$ph41*12)|0)|0) + 8|0);
    HEAP32[$$byval_copy90>>2] = $49;
    $vararg_ptr48 = (($$byval_copy90) + 4|0);
    HEAP32[$vararg_ptr48>>2] = $50;
    $vararg_ptr49 = (($$byval_copy90) + 8|0);
    HEAP32[$vararg_ptr49>>2] = $51;
    (_fscanf(($2|0),(16176|0),($$byval_copy90|0))|0);
    $52 = (($countVertex$0$ph41) + 1)|0;
    HEAP32[$$byval_copy90>>2] = $dataType;
    (_fscanf(($2|0),(16040|0),($$byval_copy90|0))|0);
    $53 = (_feof(($2|0))|0);
    $54 = ($53|0)==(0);
    if ($54) {
     $countNormals$0$ph42 = $countNormals$0$ph1039;$countTexCoords$0$ph43 = $countTexCoords$0$ph1335;$countVertex$0$ph41 = $52;
    } else {
     break;
    }
   }
  }
 } while(0);
 $55 = ($numTriangles$0$ph2747*3)|0;
 $56 = ($numTriangles$0$ph2747*36)|0;
 $57 = (_malloc($56)|0);
 $58 = ($numTriangles$0$ph2747*6)|0;
 $59 = ($numTriangles$0$ph2747*24)|0;
 $60 = (_malloc($59)|0);
 $61 = (_malloc($56)|0);
 $62 = ($numTriangles$0$ph2747*12)|0;
 $63 = (_malloc($62)|0);
 _rewind(($2|0));
 $64 = ($numNormals$0$ph2068|0)==(0);
 if ($64) {
  HEAP32[$$byval_copy90>>2] = $fileName;
  _TraceLog(0,16192,$$byval_copy90);
 }
 $65 = $numTexCoords$0$ph2453 | $numNormals$0$ph2068;
 $66 = ($65|0)==(0);
 $67 = (($vNum) + 4|0);
 $68 = (($vNum) + 8|0);
 $69 = (($vNum) + 4|0);
 $70 = (($vNum) + 8|0);
 $71 = (($vnNum) + 4|0);
 $72 = (($vnNum) + 8|0);
 $73 = (($norm) + 4|0);
 $74 = (($norm) + 8|0);
 $75 = (($vNum) + 4|0);
 $76 = (($vtNum) + 4|0);
 $77 = (($vNum) + 8|0);
 $78 = (($vtNum) + 8|0);
 $79 = (($vNum) + 4|0);
 $80 = (($vtNum) + 4|0);
 $81 = (($vnNum) + 4|0);
 $82 = (($vNum) + 8|0);
 $83 = (($vtNum) + 8|0);
 $84 = (($vnNum) + 8|0);
 $85 = (($vtNum) + 4|0);
 $86 = (($vtNum) + 8|0);
 $nCounter$0$ph$ph = 0;$tcCounter$0$ph$ph = 0;$vCounter$0$ph$ph = 0;
 L51: while(1) {
  $nCounter$0$ph = $nCounter$0$ph$ph;$vCounter$0$ph = $vCounter$0$ph$ph;
  while(1) {
   $87 = (_feof(($2|0))|0);
   $88 = ($87|0)==(0);
   if (!($88)) {
    break L51;
   }
   L55: while(1) {
    HEAP32[$$byval_copy90>>2] = $dataType;
    (_fscanf(($2|0),(16040|0),($$byval_copy90|0))|0);
    $89 = HEAP8[$dataType>>0]|0;
    $90 = $89 << 24 >> 24;
    switch ($90|0) {
    case 118: case 117: case 109: case 115: case 103: case 111: case 35:  {
     (_fgets(($comments|0),200,($2|0))|0);
     break;
    }
    case 102:  {
     break L55;
     break;
    }
    default: {
    }
    }
    $91 = (_feof(($2|0))|0);
    $92 = ($91|0)==(0);
    if (!($92)) {
     break L51;
    }
   }
   do {
    if ($66) {
     HEAP32[$$byval_copy90>>2] = $vNum;
     $vararg_ptr62 = (($$byval_copy90) + 4|0);
     HEAP32[$vararg_ptr62>>2] = $67;
     $vararg_ptr63 = (($$byval_copy90) + 8|0);
     HEAP32[$vararg_ptr63>>2] = $68;
     (_fscanf(($2|0),(16264|0),($$byval_copy90|0))|0);
    } else {
     if ($64) {
      HEAP32[$$byval_copy90>>2] = $vNum;
      $vararg_ptr67 = (($$byval_copy90) + 4|0);
      HEAP32[$vararg_ptr67>>2] = $vtNum;
      $vararg_ptr68 = (($$byval_copy90) + 8|0);
      HEAP32[$vararg_ptr68>>2] = $75;
      $vararg_ptr69 = (($$byval_copy90) + 12|0);
      HEAP32[$vararg_ptr69>>2] = $76;
      $vararg_ptr70 = (($$byval_copy90) + 16|0);
      HEAP32[$vararg_ptr70>>2] = $77;
      $vararg_ptr71 = (($$byval_copy90) + 20|0);
      HEAP32[$vararg_ptr71>>2] = $78;
      (_fscanf(($2|0),(16280|0),($$byval_copy90|0))|0);
      break;
     } else {
      HEAP32[$$byval_copy90>>2] = $vNum;
      $vararg_ptr75 = (($$byval_copy90) + 4|0);
      HEAP32[$vararg_ptr75>>2] = $vtNum;
      $vararg_ptr76 = (($$byval_copy90) + 8|0);
      HEAP32[$vararg_ptr76>>2] = $vnNum;
      $vararg_ptr77 = (($$byval_copy90) + 12|0);
      HEAP32[$vararg_ptr77>>2] = $79;
      $vararg_ptr78 = (($$byval_copy90) + 16|0);
      HEAP32[$vararg_ptr78>>2] = $80;
      $vararg_ptr79 = (($$byval_copy90) + 20|0);
      HEAP32[$vararg_ptr79>>2] = $81;
      $vararg_ptr80 = (($$byval_copy90) + 24|0);
      HEAP32[$vararg_ptr80>>2] = $82;
      $vararg_ptr81 = (($$byval_copy90) + 28|0);
      HEAP32[$vararg_ptr81>>2] = $83;
      $vararg_ptr82 = (($$byval_copy90) + 32|0);
      HEAP32[$vararg_ptr82>>2] = $84;
      (_fscanf(($2|0),(16304|0),($$byval_copy90|0))|0);
      break;
     }
    }
   } while(0);
   $93 = HEAP32[$vNum>>2]|0;
   $94 = (($93) + -1)|0;
   $95 = (($24) + (($94*12)|0)|0);
   $96 = +HEAPF32[$95>>2];
   $97 = (($57) + ($vCounter$0$ph<<2)|0);
   HEAPF32[$97>>2] = $96;
   $98 = HEAP32[$vNum>>2]|0;
   $99 = (($98) + -1)|0;
   $100 = ((($24) + (($99*12)|0)|0) + 4|0);
   $101 = +HEAPF32[$100>>2];
   $102 = (($vCounter$0$ph) + 1)|0;
   $103 = (($57) + ($102<<2)|0);
   HEAPF32[$103>>2] = $101;
   $104 = HEAP32[$vNum>>2]|0;
   $105 = (($104) + -1)|0;
   $106 = ((($24) + (($105*12)|0)|0) + 8|0);
   $107 = +HEAPF32[$106>>2];
   $108 = (($vCounter$0$ph) + 2)|0;
   $109 = (($57) + ($108<<2)|0);
   HEAPF32[$109>>2] = $107;
   $110 = (($vCounter$0$ph) + 3)|0;
   $111 = HEAP32[$69>>2]|0;
   $112 = (($111) + -1)|0;
   $113 = (($24) + (($112*12)|0)|0);
   $114 = +HEAPF32[$113>>2];
   $115 = (($57) + ($110<<2)|0);
   HEAPF32[$115>>2] = $114;
   $116 = HEAP32[$69>>2]|0;
   $117 = (($116) + -1)|0;
   $118 = ((($24) + (($117*12)|0)|0) + 4|0);
   $119 = +HEAPF32[$118>>2];
   $120 = (($vCounter$0$ph) + 4)|0;
   $121 = (($57) + ($120<<2)|0);
   HEAPF32[$121>>2] = $119;
   $122 = HEAP32[$69>>2]|0;
   $123 = (($122) + -1)|0;
   $124 = ((($24) + (($123*12)|0)|0) + 8|0);
   $125 = +HEAPF32[$124>>2];
   $126 = (($vCounter$0$ph) + 5)|0;
   $127 = (($57) + ($126<<2)|0);
   HEAPF32[$127>>2] = $125;
   $128 = (($vCounter$0$ph) + 6)|0;
   $129 = HEAP32[$70>>2]|0;
   $130 = (($129) + -1)|0;
   $131 = (($24) + (($130*12)|0)|0);
   $132 = +HEAPF32[$131>>2];
   $133 = (($57) + ($128<<2)|0);
   HEAPF32[$133>>2] = $132;
   $134 = HEAP32[$70>>2]|0;
   $135 = (($134) + -1)|0;
   $136 = ((($24) + (($135*12)|0)|0) + 4|0);
   $137 = +HEAPF32[$136>>2];
   $138 = (($vCounter$0$ph) + 7)|0;
   $139 = (($57) + ($138<<2)|0);
   HEAPF32[$139>>2] = $137;
   $140 = HEAP32[$70>>2]|0;
   $141 = (($140) + -1)|0;
   $142 = ((($24) + (($141*12)|0)|0) + 8|0);
   $143 = +HEAPF32[$142>>2];
   $144 = (($vCounter$0$ph) + 8)|0;
   $145 = (($57) + ($144<<2)|0);
   HEAPF32[$145>>2] = $143;
   $146 = (($vCounter$0$ph) + 9)|0;
   if ($25) {
    $147 = HEAP32[$vnNum>>2]|0;
    $148 = (($147) + -1)|0;
    $149 = (($midNormals$0) + (($148*12)|0)|0);
    $150 = +HEAPF32[$149>>2];
    $151 = (($61) + ($nCounter$0$ph<<2)|0);
    HEAPF32[$151>>2] = $150;
    $152 = HEAP32[$vnNum>>2]|0;
    $153 = (($152) + -1)|0;
    $154 = ((($midNormals$0) + (($153*12)|0)|0) + 4|0);
    $155 = +HEAPF32[$154>>2];
    $156 = (($nCounter$0$ph) + 1)|0;
    $157 = (($61) + ($156<<2)|0);
    HEAPF32[$157>>2] = $155;
    $158 = HEAP32[$vnNum>>2]|0;
    $159 = (($158) + -1)|0;
    $160 = ((($midNormals$0) + (($159*12)|0)|0) + 8|0);
    $161 = +HEAPF32[$160>>2];
    $162 = (($nCounter$0$ph) + 2)|0;
    $163 = (($61) + ($162<<2)|0);
    HEAPF32[$163>>2] = $161;
    $164 = (($nCounter$0$ph) + 3)|0;
    $165 = HEAP32[$71>>2]|0;
    $166 = (($165) + -1)|0;
    $167 = (($midNormals$0) + (($166*12)|0)|0);
    $168 = +HEAPF32[$167>>2];
    $169 = (($61) + ($164<<2)|0);
    HEAPF32[$169>>2] = $168;
    $170 = HEAP32[$71>>2]|0;
    $171 = (($170) + -1)|0;
    $172 = ((($midNormals$0) + (($171*12)|0)|0) + 4|0);
    $173 = +HEAPF32[$172>>2];
    $174 = (($nCounter$0$ph) + 4)|0;
    $175 = (($61) + ($174<<2)|0);
    HEAPF32[$175>>2] = $173;
    $176 = HEAP32[$71>>2]|0;
    $177 = (($176) + -1)|0;
    $178 = ((($midNormals$0) + (($177*12)|0)|0) + 8|0);
    $179 = +HEAPF32[$178>>2];
    $180 = (($nCounter$0$ph) + 5)|0;
    $181 = (($61) + ($180<<2)|0);
    HEAPF32[$181>>2] = $179;
    $182 = (($nCounter$0$ph) + 6)|0;
    $183 = HEAP32[$72>>2]|0;
    $184 = (($183) + -1)|0;
    $185 = (($midNormals$0) + (($184*12)|0)|0);
    $186 = +HEAPF32[$185>>2];
    $187 = (($61) + ($182<<2)|0);
    HEAPF32[$187>>2] = $186;
    $188 = HEAP32[$72>>2]|0;
    $189 = (($188) + -1)|0;
    $190 = ((($midNormals$0) + (($189*12)|0)|0) + 4|0);
    $191 = +HEAPF32[$190>>2];
    $192 = (($nCounter$0$ph) + 7)|0;
    $193 = (($61) + ($192<<2)|0);
    HEAPF32[$193>>2] = $191;
    $194 = HEAP32[$72>>2]|0;
    $195 = (($194) + -1)|0;
    $196 = ((($midNormals$0) + (($195*12)|0)|0) + 8|0);
    $197 = +HEAPF32[$196>>2];
    $198 = (($nCounter$0$ph) + 8)|0;
    $199 = (($61) + ($198<<2)|0);
    HEAPF32[$199>>2] = $197;
   } else {
    $200 = HEAP32[$69>>2]|0;
    $201 = (($200) + -1)|0;
    $202 = (($24) + (($201*12)|0)|0);
    $203 = HEAP32[$vNum>>2]|0;
    $204 = (($203) + -1)|0;
    $205 = (($24) + (($204*12)|0)|0);
    ;HEAP32[$$byval_copy89+0>>2]=HEAP32[$202+0>>2]|0;HEAP32[$$byval_copy89+4>>2]=HEAP32[$202+4>>2]|0;HEAP32[$$byval_copy89+8>>2]=HEAP32[$202+8>>2]|0;
    ;HEAP32[$$byval_copy90+0>>2]=HEAP32[$205+0>>2]|0;HEAP32[$$byval_copy90+4>>2]=HEAP32[$205+4>>2]|0;HEAP32[$$byval_copy90+8>>2]=HEAP32[$205+8>>2]|0;
    _VectorSubtract($0,$$byval_copy89,$$byval_copy90);
    $206 = HEAP32[$70>>2]|0;
    $207 = (($206) + -1)|0;
    $208 = (($24) + (($207*12)|0)|0);
    $209 = HEAP32[$vNum>>2]|0;
    $210 = (($209) + -1)|0;
    $211 = (($24) + (($210*12)|0)|0);
    ;HEAP32[$$byval_copy89+0>>2]=HEAP32[$208+0>>2]|0;HEAP32[$$byval_copy89+4>>2]=HEAP32[$208+4>>2]|0;HEAP32[$$byval_copy89+8>>2]=HEAP32[$208+8>>2]|0;
    ;HEAP32[$$byval_copy90+0>>2]=HEAP32[$211+0>>2]|0;HEAP32[$$byval_copy90+4>>2]=HEAP32[$211+4>>2]|0;HEAP32[$$byval_copy90+8>>2]=HEAP32[$211+8>>2]|0;
    _VectorSubtract($1,$$byval_copy89,$$byval_copy90);
    ;HEAP32[$$byval_copy89+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$$byval_copy89+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy89+8>>2]=HEAP32[$0+8>>2]|0;
    ;HEAP32[$$byval_copy90+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$$byval_copy90+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy90+8>>2]=HEAP32[$1+8>>2]|0;
    _VectorCrossProduct($norm,$$byval_copy89,$$byval_copy90);
    _VectorNormalize($norm);
    $212 = +HEAPF32[$norm>>2];
    $213 = (($61) + ($nCounter$0$ph<<2)|0);
    HEAPF32[$213>>2] = $212;
    $214 = +HEAPF32[$73>>2];
    $215 = (($nCounter$0$ph) + 1)|0;
    $216 = (($61) + ($215<<2)|0);
    HEAPF32[$216>>2] = $214;
    $217 = +HEAPF32[$74>>2];
    $218 = (($nCounter$0$ph) + 2)|0;
    $219 = (($61) + ($218<<2)|0);
    HEAPF32[$219>>2] = $217;
    $220 = (($nCounter$0$ph) + 3)|0;
    $221 = +HEAPF32[$norm>>2];
    $222 = (($61) + ($220<<2)|0);
    HEAPF32[$222>>2] = $221;
    $223 = +HEAPF32[$73>>2];
    $224 = (($nCounter$0$ph) + 4)|0;
    $225 = (($61) + ($224<<2)|0);
    HEAPF32[$225>>2] = $223;
    $226 = +HEAPF32[$74>>2];
    $227 = (($nCounter$0$ph) + 5)|0;
    $228 = (($61) + ($227<<2)|0);
    HEAPF32[$228>>2] = $226;
    $229 = (($nCounter$0$ph) + 6)|0;
    $230 = +HEAPF32[$norm>>2];
    $231 = (($61) + ($229<<2)|0);
    HEAPF32[$231>>2] = $230;
    $232 = +HEAPF32[$73>>2];
    $233 = (($nCounter$0$ph) + 7)|0;
    $234 = (($61) + ($233<<2)|0);
    HEAPF32[$234>>2] = $232;
    $235 = +HEAPF32[$74>>2];
    $236 = (($nCounter$0$ph) + 8)|0;
    $237 = (($61) + ($236<<2)|0);
    HEAPF32[$237>>2] = $235;
   }
   $nCounter$1 = (($nCounter$0$ph) + 9)|0;
   if ($28) {
    break;
   } else {
    $nCounter$0$ph = $nCounter$1;$vCounter$0$ph = $146;
   }
  }
  $238 = HEAP32[$vtNum>>2]|0;
  $239 = (($238) + -1)|0;
  $240 = (($midTexCoords$0) + ($239<<3)|0);
  $241 = +HEAPF32[$240>>2];
  $242 = (($60) + ($tcCounter$0$ph$ph<<2)|0);
  HEAPF32[$242>>2] = $241;
  $243 = HEAP32[$vtNum>>2]|0;
  $244 = (($243) + -1)|0;
  $245 = ((($midTexCoords$0) + ($244<<3)|0) + 4|0);
  $246 = +HEAPF32[$245>>2];
  $247 = -$246;
  $248 = $tcCounter$0$ph$ph | 1;
  $249 = (($60) + ($248<<2)|0);
  HEAPF32[$249>>2] = $247;
  $250 = (($tcCounter$0$ph$ph) + 2)|0;
  $251 = HEAP32[$85>>2]|0;
  $252 = (($251) + -1)|0;
  $253 = (($midTexCoords$0) + ($252<<3)|0);
  $254 = +HEAPF32[$253>>2];
  $255 = (($60) + ($250<<2)|0);
  HEAPF32[$255>>2] = $254;
  $256 = HEAP32[$85>>2]|0;
  $257 = (($256) + -1)|0;
  $258 = ((($midTexCoords$0) + ($257<<3)|0) + 4|0);
  $259 = +HEAPF32[$258>>2];
  $260 = -$259;
  $261 = (($tcCounter$0$ph$ph) + 3)|0;
  $262 = (($60) + ($261<<2)|0);
  HEAPF32[$262>>2] = $260;
  $263 = (($tcCounter$0$ph$ph) + 4)|0;
  $264 = HEAP32[$86>>2]|0;
  $265 = (($264) + -1)|0;
  $266 = (($midTexCoords$0) + ($265<<3)|0);
  $267 = +HEAPF32[$266>>2];
  $268 = (($60) + ($263<<2)|0);
  HEAPF32[$268>>2] = $267;
  $269 = HEAP32[$86>>2]|0;
  $270 = (($269) + -1)|0;
  $271 = ((($midTexCoords$0) + ($270<<3)|0) + 4|0);
  $272 = +HEAPF32[$271>>2];
  $273 = -$272;
  $274 = (($tcCounter$0$ph$ph) + 5)|0;
  $275 = (($60) + ($274<<2)|0);
  HEAPF32[$275>>2] = $273;
  $276 = (($tcCounter$0$ph$ph) + 6)|0;
  $nCounter$0$ph$ph = $nCounter$1;$tcCounter$0$ph$ph = $276;$vCounter$0$ph$ph = $146;
 }
 (_fclose(($2|0))|0);
 $277 = ($numTexCoords$0$ph2453|0)==(0);
 $278 = ($58|0)>(0);
 $or$cond = $277 & $278;
 if ($or$cond) {
  $279 = ($numTriangles$0$ph2747*24)|0;
  _memset(($60|0),0,($279|0))|0;
 }
 $280 = ($62|0)>(0);
 if ($280) {
  $281 = ($numTriangles$0$ph2747*12)|0;
  _memset(($63|0),-1,($281|0))|0;
 }
 _free($24);
 _free($midNormals$0);
 _free($midTexCoords$0);
 HEAP32[$$byval_copy90>>2] = $fileName;
 _TraceLog(0,16336,$$byval_copy90);
 HEAP32[$agg$result>>2] = $55;
 $282 = (($agg$result) + 4|0);
 HEAP32[$282>>2] = $57;
 $283 = (($agg$result) + 8|0);
 HEAP32[$283>>2] = $60;
 $284 = (($agg$result) + 12|0);
 HEAP32[$284>>2] = $61;
 $285 = (($agg$result) + 16|0);
 HEAP32[$285>>2] = $63;
 STACKTOP = sp;return;
}
function _UnloadModel($model) {
 $model = $model|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($model) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 _free($1);
 $2 = (($model) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 $4 = (($model) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = (($model) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 _rlDeleteBuffers($7);
 $8 = (($model) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 _rlDeleteBuffers($9);
 $10 = (($model) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 _rlDeleteBuffers($11);
 STACKTOP = sp;return;
}
function _SetModelTexture($model,$texture) {
 $model = $model|0;
 $texture = $texture|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$texture>>2]|0;
 $1 = ($0|0)==(0);
 $2 = (($model) + 40|0);
 $$ = $1 ? 1 : $0;
 HEAP32[$2>>2] = $$;
 STACKTOP = sp;return;
}
function _DrawModelEx($model,$position,$rotation,$scale,$tint) {
 $model = $model|0;
 $position = $position|0;
 $rotation = $rotation|0;
 $scale = $scale|0;
 $tint = $tint|0;
 var $model$byval_copy = 0, $position$byval_copy = 0, $rotation$byval_copy = 0, $scale$byval_copy = 0, $tint$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tint$byval_copy = sp + 80|0;
 $scale$byval_copy = sp;
 $rotation$byval_copy = sp + 12|0;
 $position$byval_copy = sp + 24|0;
 $model$byval_copy = sp + 36|0;
 dest=$model$byval_copy+0|0; src=$model+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$position$byval_copy+0>>2]=HEAP32[$position+0>>2]|0;HEAP32[$position$byval_copy+4>>2]=HEAP32[$position+4>>2]|0;HEAP32[$position$byval_copy+8>>2]=HEAP32[$position+8>>2]|0;
 ;HEAP32[$rotation$byval_copy+0>>2]=HEAP32[$rotation+0>>2]|0;HEAP32[$rotation$byval_copy+4>>2]=HEAP32[$rotation+4>>2]|0;HEAP32[$rotation$byval_copy+8>>2]=HEAP32[$rotation+8>>2]|0;
 ;HEAP32[$scale$byval_copy+0>>2]=HEAP32[$scale+0>>2]|0;HEAP32[$scale$byval_copy+4>>2]=HEAP32[$scale+4>>2]|0;HEAP32[$scale$byval_copy+8>>2]=HEAP32[$scale+8>>2]|0;
 ;HEAP8[$tint$byval_copy+0>>0]=HEAP8[$tint+0>>0]|0;HEAP8[$tint$byval_copy+1>>0]=HEAP8[$tint+1>>0]|0;HEAP8[$tint$byval_copy+2>>0]=HEAP8[$tint+2>>0]|0;HEAP8[$tint$byval_copy+3>>0]=HEAP8[$tint+3>>0]|0;
 _rlglDrawModel($model$byval_copy,$position$byval_copy,$rotation$byval_copy,$scale$byval_copy,$tint$byval_copy,0);
 STACKTOP = sp;return;
}
function _InitAudioDevice() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cond = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp;
 $0 = (_alcOpenDevice((0|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _TraceLog(1,16392,$vararg_buffer3);
 }
 $2 = (_alcCreateContext(($0|0),(0|0))|0);
 $cond = ($2|0)==(0|0);
 if ($cond) {
  label = 6;
 } else {
  $3 = (_alcMakeContextCurrent(($2|0))|0);
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   _alcDestroyContext(($2|0));
   label = 6;
  }
 }
 if ((label|0) == 6) {
  (_alcCloseDevice(($0|0))|0);
  _TraceLog(1,16432,$vararg_buffer3);
 }
 $5 = (_alcGetString(($0|0),4101)|0);
 HEAP32[$vararg_buffer3>>2] = $5;
 _TraceLog(0,16464,$vararg_buffer3);
 _alListener3f(4100,0.0,0.0,0.0);
 _alListener3f(4102,0.0,0.0,0.0);
 _alListener3f(4111,0.0,0.0,-1.0);
 STACKTOP = sp;return;
}
function _CloseAudioDevice() {
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _StopMusicStream();
 $0 = (_alcGetCurrentContext()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _TraceLog(2,16520,$vararg_buffer);
 }
 $2 = (_alcGetContextsDevice(($0|0))|0);
 (_alcMakeContextCurrent((0|0))|0);
 _alcDestroyContext(($0|0));
 (_alcCloseDevice(($2|0))|0);
 STACKTOP = sp;return;
}
function _StopMusicStream() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[16384>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  HEAP32[16384>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = HEAP32[((16728 + 12|0))>>2]|0;
 _alSourceStop(($2|0));
 _EmptyMusicStream();
 _alDeleteSources(1,(((16728 + 12|0))|0));
 _alDeleteBuffers(2,(((16728 + 4|0))|0));
 $3 = HEAP32[16728>>2]|0;
 _stb_vorbis_close($3);
 HEAP32[16384>>2] = 0;
 STACKTOP = sp;return;
}
function _LoadSound($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buffer = 0, $format$0 = 0, $sound$sroa$0$0 = 0, $sound$sroa$1$0 = 0, $source = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $wave = 0, $wave$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wave$byval_copy = sp;
 $wave = sp + 24|0;
 $source = sp + 16|0;
 $buffer = sp + 20|0;
 $0 = (($wave) + 4|0);
 $1 = (($wave) + 8|0);
 $2 = (($wave) + 12|0);
 $3 = (($wave) + 14|0);
 ;HEAP32[$wave+0>>2]=0|0;HEAP32[$wave+4>>2]=0|0;HEAP32[$wave+8>>2]=0|0;HEAP32[$wave+12>>2]=0|0;
 $4 = (_GetExtension($fileName)|0);
 $5 = (_strcmp($4,16568)|0);
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   _LoadWAV($wave,$fileName);
  } else {
   $7 = (_GetExtension($fileName)|0);
   $8 = (_strcmp($7,16576)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    _LoadOGG($wave,$fileName);
    break;
   } else {
    HEAP32[$wave$byval_copy>>2] = $fileName;
    _TraceLog(2,16584,$wave$byval_copy);
    break;
   }
  }
 } while(0);
 $10 = HEAP32[$wave>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $sound$sroa$0$0 = 0;$sound$sroa$1$0 = 0;
  HEAP32[$agg$result>>2] = $sound$sroa$0$0;
  $37 = (($agg$result) + 4|0);
  HEAP32[$37>>2] = $sound$sroa$1$0;
  STACKTOP = sp;return;
 }
 $12 = HEAP16[$3>>1]|0;
 if ((($12<<16>>16) == 1)) {
  $13 = HEAP16[$2>>1]|0;
  $14 = ($13<<16>>16)==(8);
  if ($14) {
   $format$0 = 4352;
  } else {
   $15 = ($13<<16>>16)==(16);
   $$ = $15 ? 4353 : 0;
   $format$0 = $$;
  }
 } else if ((($12<<16>>16) == 2)) {
  $16 = HEAP16[$2>>1]|0;
  $17 = ($16<<16>>16)==(8);
  if ($17) {
   $format$0 = 4354;
  } else {
   $18 = ($16<<16>>16)==(16);
   $$1 = $18 ? 4355 : 0;
   $format$0 = $$1;
  }
 } else {
  $format$0 = 0;
 }
 _alGenSources(1,($source|0));
 $19 = HEAP32[$source>>2]|0;
 _alSourcef(($19|0),4099,1.0);
 $20 = HEAP32[$source>>2]|0;
 _alSourcef(($20|0),4106,1.0);
 $21 = HEAP32[$source>>2]|0;
 _alSource3f(($21|0),4100,0.0,0.0,0.0);
 $22 = HEAP32[$source>>2]|0;
 _alSource3f(($22|0),4102,0.0,0.0,0.0);
 $23 = HEAP32[$source>>2]|0;
 _alSourcei(($23|0),4103,0);
 _alGenBuffers(1,($buffer|0));
 $24 = HEAP32[$buffer>>2]|0;
 $25 = HEAP32[$wave>>2]|0;
 $26 = HEAP32[$0>>2]|0;
 $27 = HEAP32[$1>>2]|0;
 _alBufferData(($24|0),($format$0|0),($25|0),($26|0),($27|0));
 $28 = HEAP32[$source>>2]|0;
 $29 = HEAP32[$buffer>>2]|0;
 _alSourcei(($28|0),4105,($29|0));
 $30 = HEAP32[$1>>2]|0;
 $31 = HEAP16[$2>>1]|0;
 $32 = $31 << 16 >> 16;
 $33 = HEAP16[$3>>1]|0;
 $34 = $33 << 16 >> 16;
 HEAP32[$wave$byval_copy>>2] = $fileName;
 $vararg_ptr4 = (($wave$byval_copy) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $30;
 $vararg_ptr5 = (($wave$byval_copy) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $32;
 $vararg_ptr6 = (($wave$byval_copy) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $34;
 _TraceLog(0,16640,$wave$byval_copy);
 ;HEAP32[$wave$byval_copy+0>>2]=HEAP32[$wave+0>>2]|0;HEAP32[$wave$byval_copy+4>>2]=HEAP32[$wave+4>>2]|0;HEAP32[$wave$byval_copy+8>>2]=HEAP32[$wave+8>>2]|0;HEAP32[$wave$byval_copy+12>>2]=HEAP32[$wave+12>>2]|0;
 _UnloadWave($wave$byval_copy);
 $35 = HEAP32[$source>>2]|0;
 $36 = HEAP32[$buffer>>2]|0;
 $sound$sroa$0$0 = $35;$sound$sroa$1$0 = $36;
 HEAP32[$agg$result>>2] = $sound$sroa$0$0;
 $37 = (($agg$result) + 4|0);
 HEAP32[$37>>2] = $sound$sroa$1$0;
 STACKTOP = sp;return;
}
function _LoadWAV($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $riffHeader = 0, $vararg_buffer10 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $wave$sroa$0$0 = 0, $wave$sroa$0$1 = 0, $wave$sroa$1$0 = 0, $wave$sroa$1$1 = 0, $wave$sroa$2$0 = 0, $wave$sroa$2$1 = 0;
 var $wave$sroa$3$0 = 0, $wave$sroa$3$1 = 0, $wave$sroa$4$0 = 0, $wave$sroa$4$1 = 0, $waveData = 0, $waveFormat = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp;
 $riffHeader = sp + 48|0;
 $waveFormat = sp + 16|0;
 $waveData = sp + 40|0;
 $0 = (_fopen(($fileName|0),(16720|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$vararg_buffer10>>2] = $fileName;
  _TraceLog(2,17304,$vararg_buffer10);
  $wave$sroa$0$1 = 0;$wave$sroa$1$1 = 0;$wave$sroa$2$1 = 0;$wave$sroa$3$1 = 0;$wave$sroa$4$1 = 0;
  HEAP32[$agg$result>>2] = $wave$sroa$0$1;
  $45 = (($agg$result) + 4|0);
  HEAP32[$45>>2] = $wave$sroa$1$1;
  $46 = (($agg$result) + 8|0);
  HEAP32[$46>>2] = $wave$sroa$2$1;
  $47 = (($agg$result) + 12|0);
  HEAP16[$47>>1] = $wave$sroa$3$1;
  $48 = (($agg$result) + 14|0);
  HEAP16[$48>>1] = $wave$sroa$4$1;
  STACKTOP = sp;return;
 }
 (_fread(($riffHeader|0),12,1,($0|0))|0);
 $2 = (_strncmp($riffHeader,17344,4)|0);
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $4 = (($riffHeader) + 8|0);
   $5 = (_strncmp($4,17352,4)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    (_fread(($waveFormat|0),24,1,($0|0))|0);
    $7 = HEAP8[$waveFormat>>0]|0;
    $8 = ($7<<24>>24)==(102);
    if ($8) {
     $9 = (($waveFormat) + 1|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(109);
     if ($11) {
      $12 = (($waveFormat) + 2|0);
      $13 = HEAP8[$12>>0]|0;
      $14 = ($13<<24>>24)==(116);
      if ($14) {
       $15 = (($waveFormat) + 3|0);
       $16 = HEAP8[$15>>0]|0;
       $17 = ($16<<24>>24)==(32);
       if ($17) {
        $18 = (($waveFormat) + 4|0);
        $19 = HEAP32[$18>>2]|0;
        $20 = ($19|0)>(16);
        if ($20) {
         (_fseek(($0|0),2,1)|0);
        }
        (_fread(($waveData|0),8,1,($0|0))|0);
        $21 = HEAP8[$waveData>>0]|0;
        $22 = ($21<<24>>24)==(100);
        if ($22) {
         $23 = (($waveData) + 1|0);
         $24 = HEAP8[$23>>0]|0;
         $25 = ($24<<24>>24)==(97);
         if ($25) {
          $26 = (($waveData) + 2|0);
          $27 = HEAP8[$26>>0]|0;
          $28 = ($27<<24>>24)==(116);
          if ($28) {
           $29 = (($waveData) + 3|0);
           $30 = HEAP8[$29>>0]|0;
           $31 = ($30<<24>>24)==(97);
           if ($31) {
            $32 = (($waveData) + 4|0);
            $33 = HEAP32[$32>>2]|0;
            $34 = (_malloc($33)|0);
            $35 = HEAP32[$32>>2]|0;
            (_fread(($34|0),($35|0),1,($0|0))|0);
            $36 = HEAP32[$32>>2]|0;
            $37 = (($waveFormat) + 12|0);
            $38 = HEAP32[$37>>2]|0;
            $39 = (($waveFormat) + 10|0);
            $40 = HEAP16[$39>>1]|0;
            $41 = (($waveFormat) + 22|0);
            $42 = HEAP16[$41>>1]|0;
            $43 = $42 << 16 >> 16;
            $44 = $40 << 16 >> 16;
            HEAP32[$vararg_buffer10>>2] = $fileName;
            $vararg_ptr13 = (($vararg_buffer10) + 4|0);
            HEAP32[$vararg_ptr13>>2] = $38;
            $vararg_ptr14 = (($vararg_buffer10) + 8|0);
            HEAP32[$vararg_ptr14>>2] = $43;
            $vararg_ptr15 = (($vararg_buffer10) + 12|0);
            HEAP32[$vararg_ptr15>>2] = $44;
            _TraceLog(0,17464,$vararg_buffer10);
            $wave$sroa$0$0 = $34;$wave$sroa$1$0 = $36;$wave$sroa$2$0 = $38;$wave$sroa$3$0 = $42;$wave$sroa$4$0 = $40;
            break;
           }
          }
         }
        }
        HEAP32[$vararg_buffer10>>2] = $fileName;
        _TraceLog(2,17432,$vararg_buffer10);
        $wave$sroa$0$0 = 0;$wave$sroa$1$0 = 0;$wave$sroa$2$0 = 0;$wave$sroa$3$0 = 0;$wave$sroa$4$0 = 0;
        break;
       }
      }
     }
    }
    HEAP32[$vararg_buffer10>>2] = $fileName;
    _TraceLog(2,17400,$vararg_buffer10);
    $wave$sroa$0$0 = 0;$wave$sroa$1$0 = 0;$wave$sroa$2$0 = 0;$wave$sroa$3$0 = 0;$wave$sroa$4$0 = 0;
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  HEAP32[$vararg_buffer10>>2] = $fileName;
  _TraceLog(2,17360,$vararg_buffer10);
  $wave$sroa$0$0 = 0;$wave$sroa$1$0 = 0;$wave$sroa$2$0 = 0;$wave$sroa$3$0 = 0;$wave$sroa$4$0 = 0;
 }
 (_fclose(($0|0))|0);
 $wave$sroa$0$1 = $wave$sroa$0$0;$wave$sroa$1$1 = $wave$sroa$1$0;$wave$sroa$2$1 = $wave$sroa$2$0;$wave$sroa$3$1 = $wave$sroa$3$0;$wave$sroa$4$1 = $wave$sroa$4$0;
 HEAP32[$agg$result>>2] = $wave$sroa$0$1;
 $45 = (($agg$result) + 4|0);
 HEAP32[$45>>2] = $wave$sroa$1$1;
 $46 = (($agg$result) + 8|0);
 HEAP32[$46>>2] = $wave$sroa$2$1;
 $47 = (($agg$result) + 12|0);
 HEAP16[$47>>1] = $wave$sroa$3$1;
 $48 = (($agg$result) + 14|0);
 HEAP16[$48>>1] = $wave$sroa$4$1;
 STACKTOP = sp;return;
}
function _LoadOGG($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, $sext = 0, $vararg_buffer26 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr5 = 0;
 var $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer26 = sp;
 $info = sp + 16|0;
 $0 = (_stb_vorbis_open_filename($fileName,0,0)|0);
 _stb_vorbis_get_info($info,$0);
 $1 = HEAP32[$info>>2]|0;
 $2 = (($info) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&65535;
 HEAP32[$vararg_buffer26>>2] = $fileName;
 $vararg_ptr1 = (($vararg_buffer26) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 _TraceLog(3,16808,$vararg_buffer26);
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$vararg_buffer26>>2] = $fileName;
 $vararg_ptr5 = (($vararg_buffer26) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $5;
 _TraceLog(3,16840,$vararg_buffer26);
 $6 = (_stb_vorbis_stream_length_in_samples($0)|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = Math_imul($7, $6)|0;
 $9 = $8 << 1;
 HEAP32[$vararg_buffer26>>2] = $fileName;
 $vararg_ptr9 = (($vararg_buffer26) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $8;
 _TraceLog(3,16992,$vararg_buffer26);
 $10 = (+_stb_vorbis_stream_length_in_seconds($0));
 $11 = $10;
 HEAP32[$vararg_buffer26>>2] = $fileName;
 $vararg_ptr13 = (($vararg_buffer26) + 4|0);
 HEAPF64[tempDoublePtr>>3]=$11;HEAP32[$vararg_ptr13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr13+4>>2]=HEAP32[tempDoublePtr+4>>2];
 _TraceLog(3,17016,$vararg_buffer26);
 $12 = $10 > 10.0;
 if ($12) {
  HEAP32[$vararg_buffer26>>2] = $fileName;
  $vararg_ptr17 = (($vararg_buffer26) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$11;HEAP32[$vararg_ptr17>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr17+4>>2]=HEAP32[tempDoublePtr+4>>2];
  _TraceLog(2,17040,$vararg_buffer26);
 }
 $13 = HEAP32[$info>>2]|0;
 $14 = (+($13>>>0));
 $15 = $10 * $14;
 $16 = HEAP32[$2>>2]|0;
 $17 = (+($16|0));
 $18 = $15 * $17;
 $19 = (~~(($18)));
 HEAP32[$vararg_buffer26>>2] = $fileName;
 $vararg_ptr21 = (($vararg_buffer26) + 4|0);
 HEAP32[$vararg_ptr21>>2] = $19;
 _TraceLog(3,17152,$vararg_buffer26);
 $20 = (_malloc($9)|0);
 $21 = HEAP32[$2>>2]|0;
 $22 = (_stb_vorbis_get_samples_short_interleaved($0,$21,$20,$8)|0);
 HEAP32[$vararg_buffer26>>2] = $fileName;
 $vararg_ptr25 = (($vararg_buffer26) + 4|0);
 HEAP32[$vararg_ptr25>>2] = $22;
 _TraceLog(3,17192,$vararg_buffer26);
 $sext = $3 << 16;
 $23 = $sext >> 16;
 HEAP32[$vararg_buffer26>>2] = $fileName;
 $vararg_ptr29 = (($vararg_buffer26) + 4|0);
 HEAP32[$vararg_ptr29>>2] = $1;
 $vararg_ptr30 = (($vararg_buffer26) + 8|0);
 HEAP32[$vararg_ptr30>>2] = 16;
 $vararg_ptr31 = (($vararg_buffer26) + 12|0);
 HEAP32[$vararg_ptr31>>2] = $23;
 _TraceLog(0,17224,$vararg_buffer26);
 _stb_vorbis_close($0);
 HEAP32[$agg$result>>2] = $20;
 $24 = (($agg$result) + 4|0);
 HEAP32[$24>>2] = $9;
 $25 = (($agg$result) + 8|0);
 HEAP32[$25>>2] = $1;
 $26 = (($agg$result) + 12|0);
 HEAP16[$26>>1] = 16;
 $27 = (($agg$result) + 14|0);
 HEAP16[$27>>1] = $4;
 STACKTOP = sp;return;
}
function _UnloadWave($wave) {
 $wave = $wave|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$wave>>2]|0;
 _free($0);
 STACKTOP = sp;return;
}
function _UnloadSound($sound) {
 $sound = $sound|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _alDeleteSources(1,($sound|0));
 $0 = (($sound) + 4|0);
 _alDeleteBuffers(1,($0|0));
 STACKTOP = sp;return;
}
function _PlaySound($sound) {
 $sound = $sound|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$sound>>2]|0;
 _alSourcePlay(($0|0));
 STACKTOP = sp;return;
}
function _PlayMusicStream($fileName) {
 $fileName = $fileName|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, $vararg_buffer13 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer13 = sp;
 $info = sp + 8|0;
 $0 = (_GetExtension($fileName)|0);
 $1 = (_strcmp($0,16576)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  HEAP32[$vararg_buffer13>>2] = $fileName;
  _TraceLog(2,16896,$vararg_buffer13);
  STACKTOP = sp;return;
 }
 _StopMusicStream();
 $3 = (_stb_vorbis_open_filename($fileName,0,0)|0);
 HEAP32[16728>>2] = $3;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$vararg_buffer13>>2] = $fileName;
  _TraceLog(2,16768,$vararg_buffer13);
  STACKTOP = sp;return;
 } else {
  _stb_vorbis_get_info($info,$3);
  $5 = (($info) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[((16728 + 20|0))>>2] = $6;
  $7 = HEAP32[$info>>2]|0;
  HEAP32[((16728 + 24|0))>>2] = $7;
  $8 = HEAP32[$info>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $fileName;
  $vararg_ptr4 = (($vararg_buffer13) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $8;
  _TraceLog(0,16808,$vararg_buffer13);
  $9 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $fileName;
  $vararg_ptr8 = (($vararg_buffer13) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $9;
  _TraceLog(0,16840,$vararg_buffer13);
  $10 = (($info) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $fileName;
  $vararg_ptr12 = (($vararg_buffer13) + 4|0);
  HEAP32[$vararg_ptr12>>2] = $11;
  _TraceLog(0,16864,$vararg_buffer13);
  $12 = HEAP32[$5>>2]|0;
  $13 = ($12|0)==(2);
  $$ = $13 ? 4355 : 4353;
  HEAP32[((16728 + 16|0))>>2] = $$;
  HEAP32[((16728 + 32|0))>>2] = 1;
  HEAP32[16384>>2] = 1;
  _alGenSources(1,(((16728 + 12|0))|0));
  $14 = HEAP32[((16728 + 12|0))>>2]|0;
  _alSourcef(($14|0),4099,1.0);
  $15 = HEAP32[((16728 + 12|0))>>2]|0;
  _alSourcef(($15|0),4106,1.0);
  $16 = HEAP32[((16728 + 12|0))>>2]|0;
  _alSource3f(($16|0),4100,0.0,0.0,0.0);
  $17 = HEAP32[((16728 + 12|0))>>2]|0;
  _alSource3f(($17|0),4102,0.0,0.0,0.0);
  _alGenBuffers(2,(((16728 + 4|0))|0));
  $18 = HEAP32[((16728 + 4|0))>>2]|0;
  (_BufferMusicStream($18)|0);
  $19 = HEAP32[((16728 + 8|0))>>2]|0;
  (_BufferMusicStream($19)|0);
  $20 = HEAP32[((16728 + 12|0))>>2]|0;
  _alSourceQueueBuffers(($20|0),2,(((16728 + 4|0))|0));
  $21 = HEAP32[((16728 + 12|0))>>2]|0;
  _alSourcePlay(($21|0));
  $22 = HEAP32[16728>>2]|0;
  $23 = (_stb_vorbis_stream_length_in_samples($22)|0);
  $24 = HEAP32[((16728 + 20|0))>>2]|0;
  $25 = Math_imul($24, $23)|0;
  HEAP32[((16728 + 28|0))>>2] = $25;
  STACKTOP = sp;return;
 }
}
function _BufferMusicStream($buffer) {
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $active$0 = 0, $pcm = 0;
 var $size$04 = 0, $size$05 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65552|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $pcm = sp + 8|0;
 $0 = HEAP32[16384>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $size$05 = 0;
   while(1) {
    $2 = HEAP32[16728>>2]|0;
    $3 = HEAP32[((16728 + 20|0))>>2]|0;
    $4 = (($pcm) + ($size$05<<1)|0);
    $5 = (32768 - ($size$05))|0;
    $6 = (_stb_vorbis_get_samples_short_interleaved($2,$3,$4,$5)|0);
    $7 = ($6|0)>(0);
    if (!($7)) {
     label = 4;
     break;
    }
    $8 = HEAP32[((16728 + 20|0))>>2]|0;
    $9 = Math_imul($8, $6)|0;
    $10 = (($9) + ($size$05))|0;
    $11 = ($10|0)<(32768);
    if ($11) {
     $size$05 = $10;
    } else {
     $size$04 = $10;
     break;
    }
   }
   if ((label|0) == 4) {
    $12 = ($size$05|0)>(0);
    if ($12) {
     $size$04 = $size$05;
    } else {
     break;
    }
   }
   $13 = HEAP32[((16728 + 16|0))>>2]|0;
   $14 = $size$04 << 1;
   $15 = HEAP32[((16728 + 24|0))>>2]|0;
   _alBufferData(($buffer|0),($13|0),($pcm|0),($14|0),($15|0));
   $16 = HEAP32[((16728 + 28|0))>>2]|0;
   $17 = (($16) - ($size$04))|0;
   HEAP32[((16728 + 28|0))>>2] = $17;
   $active$0 = 1;
   STACKTOP = sp;return ($active$0|0);
  }
 } while(0);
 _TraceLog(2,17544,$vararg_buffer);
 $active$0 = 0;
 STACKTOP = sp;return ($active$0|0);
}
function _EmptyMusicStream() {
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $buffer = 0, $queued = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 4|0;
 $queued = sp;
 HEAP32[$buffer>>2] = 0;
 HEAP32[$queued>>2] = 0;
 $0 = HEAP32[((16728 + 12|0))>>2]|0;
 _alGetSourcei(($0|0),4117,($queued|0));
 $$pr = HEAP32[$queued>>2]|0;
 $1 = ($$pr|0)>(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $2 = HEAP32[((16728 + 12|0))>>2]|0;
  _alSourceUnqueueBuffers(($2|0),1,($buffer|0));
  $3 = HEAP32[$queued>>2]|0;
  $4 = (($3) + -1)|0;
  HEAP32[$queued>>2] = $4;
  $5 = ($4|0)>(0);
  if (!($5)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _MusicIsPlaying() {
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $state = sp;
 $0 = HEAP32[((16728 + 12|0))>>2]|0;
 _alGetSourcei(($0|0),4112,($state|0));
 $1 = HEAP32[$state>>2]|0;
 $2 = ($1|0)==(4114);
 $$ = $2&1;
 STACKTOP = sp;return ($$|0);
}
function _GetMusicTimeLength() {
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[16728>>2]|0;
 $1 = (+_stb_vorbis_stream_length_in_seconds($0));
 STACKTOP = sp;return (+$1);
}
function _GetMusicTimePlayed() {
 var $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[16728>>2]|0;
 $1 = (_stb_vorbis_stream_length_in_samples($0)|0);
 $2 = HEAP32[((16728 + 20|0))>>2]|0;
 $3 = Math_imul($2, $1)|0;
 $4 = HEAP32[((16728 + 28|0))>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = (+($5|0));
 $7 = HEAP32[((16728 + 24|0))>>2]|0;
 $8 = Math_imul($7, $2)|0;
 $9 = (+($8|0));
 $10 = $6 / $9;
 STACKTOP = sp;return (+$10);
}
function _UpdateMusicStream() {
 var $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $active$0$lcssa = 0, $active$1 = 0, $buffer = 0, $or$cond = 0, $or$cond4 = 0, $processed = 0, $state = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $buffer = sp + 12|0;
 $processed = sp + 4|0;
 $state = sp + 8|0;
 HEAP32[$buffer>>2] = 0;
 HEAP32[$processed>>2] = 0;
 $0 = HEAP32[16384>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[((16728 + 12|0))>>2]|0;
 _alGetSourcei(($2|0),4118,($processed|0));
 $$pr = HEAP32[$processed>>2]|0;
 $3 = ($$pr|0)>(0);
 $4 = HEAP32[((16728 + 12|0))>>2]|0;
 if ($3) {
  $5 = $4;
  while(1) {
   _alSourceUnqueueBuffers(($5|0),1,($buffer|0));
   $6 = HEAP32[$buffer>>2]|0;
   $7 = (_BufferMusicStream($6)|0);
   $8 = ($7|0)==(0);
   $9 = HEAP32[((16728 + 32|0))>>2]|0;
   $10 = ($9|0)!=(0);
   $or$cond = $8 & $10;
   if ($or$cond) {
    $11 = HEAP32[16728>>2]|0;
    _stb_vorbis_seek_start($11);
    $12 = HEAP32[16728>>2]|0;
    $13 = (_stb_vorbis_stream_length_in_samples($12)|0);
    $14 = HEAP32[((16728 + 20|0))>>2]|0;
    $15 = Math_imul($14, $13)|0;
    HEAP32[((16728 + 28|0))>>2] = $15;
    $16 = HEAP32[$buffer>>2]|0;
    $17 = (_BufferMusicStream($16)|0);
    $active$1 = $17;
   } else {
    $active$1 = $7;
   }
   $18 = HEAP32[((16728 + 12|0))>>2]|0;
   _alSourceQueueBuffers(($18|0),1,($buffer|0));
   $19 = (_alGetError()|0);
   $20 = ($19|0)==(0);
   if (!($20)) {
    _TraceLog(2,16952,$vararg_buffer);
   }
   $21 = HEAP32[$processed>>2]|0;
   $22 = (($21) + -1)|0;
   HEAP32[$processed>>2] = $22;
   $23 = ($22|0)>(0);
   $24 = HEAP32[((16728 + 12|0))>>2]|0;
   if ($23) {
    $5 = $24;
   } else {
    $$lcssa = $24;$active$0$lcssa = $active$1;
    break;
   }
  }
 } else {
  $$lcssa = $4;$active$0$lcssa = 1;
 }
 _alGetSourcei(($$lcssa|0),4112,($state|0));
 $25 = HEAP32[$state>>2]|0;
 $26 = ($25|0)==(4114);
 $27 = ($active$0$lcssa|0)==(0);
 $or$cond4 = $26 | $27;
 if (!($or$cond4)) {
  $28 = HEAP32[((16728 + 12|0))>>2]|0;
  _alSourcePlay(($28|0));
 }
 if (!($27)) {
  STACKTOP = sp;return;
 }
 _StopMusicStream();
 STACKTOP = sp;return;
}
function _TraceLog($msgType,$text,$varargs) {
 $msgType = $msgType|0;
 $text = $text|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp;
 if ((($msgType|0) == 0)) {
  $0 = HEAP32[_stdout>>2]|0;
  (_fwrite((17584|0),6,1,($0|0))|0);
 } else if ((($msgType|0) == 1)) {
  $1 = HEAP32[_stdout>>2]|0;
  (_fwrite((17592|0),7,1,($1|0))|0);
 } else if ((($msgType|0) == 2)) {
  $2 = HEAP32[_stdout>>2]|0;
  (_fwrite((17600|0),9,1,($2|0))|0);
 } else if ((($msgType|0) == 3)) {
  STACKTOP = sp;return;
 }
 HEAP32[$args>>2] = $varargs;
 $3 = HEAP32[_stdout>>2]|0;
 (_vfprintf(($3|0),($text|0),($args|0))|0);
 $4 = HEAP32[_stdout>>2]|0;
 (_fputc(10,($4|0))|0);
 $5 = ($msgType|0)==(1);
 if ($5) {
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _GetExtension($fileName) {
 $fileName = $fileName|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strrchr($fileName,46)|0);
 $1 = ($0|0)==(0|0);
 $2 = ($0|0)==($fileName|0);
 $or$cond = $1 | $2;
 $3 = (($0) + 1|0);
 $$0 = $or$cond ? 17616 : $3;
 STACKTOP = sp;return ($$0|0);
}
function _GetNextPOT($num) {
 $num = $num|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num|0)==(0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($num) + -1)|0;
 $2 = $1 >> 1;
 $3 = $2 | $1;
 $4 = $3 >> 2;
 $5 = $4 | $3;
 $6 = $5 >> 4;
 $7 = $6 | $5;
 $8 = $7 >> 8;
 $9 = $8 | $7;
 $10 = $9 >> 16;
 $11 = $10 | $9;
 $12 = (($11) + 1)|0;
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _stb_vorbis_close($p) {
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if (!($0)) {
  _vorbis_deinit($p);
  _setup_free($p,$p);
 }
 STACKTOP = sp;return;
}
function _vorbis_deinit($p) {
 $p = $p|0;
 var $$lcssa = 0, $$lcssa12 = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$017 = 0, $i$17 = 0, $i$23 = 0, $i$32 = 0, $j$013 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 280|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = (($p) + 412|0);
  $4 = (($p) + 140|0);
  $i$017 = 0;
  while(1) {
   $5 = HEAP32[$3>>2]|0;
   $6 = ((($5) + (($i$017*24)|0)|0) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = ((($5) + (($i$017*24)|0)|0) + 13|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    $12 = HEAP32[$4>>2]|0;
    $13 = ((($12) + (($11*2096)|0)|0) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)>(0);
    $16 = HEAP32[$6>>2]|0;
    if ($15) {
     $18 = $16;$j$013 = 0;
     while(1) {
      $17 = (($18) + ($j$013<<2)|0);
      $19 = HEAP32[$17>>2]|0;
      _setup_free($p,$19);
      $20 = (($j$013) + 1)|0;
      $21 = HEAP8[$9>>0]|0;
      $22 = $21&255;
      $23 = HEAP32[$4>>2]|0;
      $24 = ((($23) + (($22*2096)|0)|0) + 4|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($20|0)<($25|0);
      $27 = HEAP32[$6>>2]|0;
      if ($26) {
       $18 = $27;$j$013 = $20;
      } else {
       $$lcssa12 = $27;
       break;
      }
     }
    } else {
     $$lcssa12 = $16;
    }
    _setup_free($p,$$lcssa12);
   }
   $28 = ((($5) + (($i$017*24)|0)|0) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   _setup_free($p,$29);
   $30 = (($i$017) + 1)|0;
   $31 = HEAP32[$0>>2]|0;
   $32 = ($30|0)<($31|0);
   if ($32) {
    $i$017 = $30;
   } else {
    break;
   }
  }
 }
 $33 = (($p) + 140|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if (!($35)) {
  $36 = (($p) + 136|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)>(0);
  $39 = HEAP32[$33>>2]|0;
  if ($38) {
   $41 = $39;$i$17 = 0;
   while(1) {
    $40 = ((($41) + (($i$17*2096)|0)|0) + 8|0);
    $42 = HEAP32[$40>>2]|0;
    _setup_free($p,$42);
    $43 = ((($41) + (($i$17*2096)|0)|0) + 28|0);
    $44 = HEAP32[$43>>2]|0;
    _setup_free($p,$44);
    $45 = ((($41) + (($i$17*2096)|0)|0) + 32|0);
    $46 = HEAP32[$45>>2]|0;
    _setup_free($p,$46);
    $47 = ((($41) + (($i$17*2096)|0)|0) + 2084|0);
    $48 = HEAP32[$47>>2]|0;
    _setup_free($p,$48);
    $49 = ((($41) + (($i$17*2096)|0)|0) + 2088|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)==(0|0);
    if ($51) {
     $53 = 0;
    } else {
     $52 = (($50) + -4|0);
     $53 = $52;
    }
    _setup_free($p,$53);
    $54 = (($i$17) + 1)|0;
    $55 = HEAP32[$36>>2]|0;
    $56 = ($54|0)<($55|0);
    $57 = HEAP32[$33>>2]|0;
    if ($56) {
     $41 = $57;$i$17 = $54;
    } else {
     $$lcssa6 = $57;
     break;
    }
   }
  } else {
   $$lcssa6 = $39;
  }
  _setup_free($p,$$lcssa6);
 }
 $58 = (($p) + 276|0);
 $59 = HEAP32[$58>>2]|0;
 _setup_free($p,$59);
 $60 = (($p) + 412|0);
 $61 = HEAP32[$60>>2]|0;
 _setup_free($p,$61);
 $62 = (($p) + 416|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)>(0);
 $65 = (($p) + 420|0);
 $66 = HEAP32[$65>>2]|0;
 if ($64) {
  $68 = $66;$i$23 = 0;
  while(1) {
   $67 = ((($68) + (($i$23*40)|0)|0) + 4|0);
   $69 = HEAP32[$67>>2]|0;
   _setup_free($p,$69);
   $70 = (($i$23) + 1)|0;
   $71 = HEAP32[$62>>2]|0;
   $72 = ($70|0)<($71|0);
   $73 = HEAP32[$65>>2]|0;
   if ($72) {
    $68 = $73;$i$23 = $70;
   } else {
    $$lcssa = $73;
    break;
   }
  }
 } else {
  $$lcssa = $66;
 }
 _setup_free($p,$$lcssa);
 $74 = (($p) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)>(0);
 if ($76) {
  $i$32 = 0;
  while(1) {
   $77 = ((($p) + ($i$32<<2)|0) + 816|0);
   $78 = HEAP32[$77>>2]|0;
   _setup_free($p,$78);
   $79 = ((($p) + ($i$32<<2)|0) + 944|0);
   $80 = HEAP32[$79>>2]|0;
   _setup_free($p,$80);
   $81 = ((($p) + ($i$32<<2)|0) + 1012|0);
   $82 = HEAP32[$81>>2]|0;
   _setup_free($p,$82);
   $83 = (($i$32) + 1)|0;
   $84 = HEAP32[$74>>2]|0;
   $85 = ($83|0)<($84|0);
   if ($85) {
    $i$32 = $83;
   } else {
    break;
   }
  }
 }
 $86 = (($p) + 1084|0);
 $87 = HEAP32[$86>>2]|0;
 _setup_free($p,$87);
 $88 = (($p) + 1092|0);
 $89 = HEAP32[$88>>2]|0;
 _setup_free($p,$89);
 $90 = (($p) + 1100|0);
 $91 = HEAP32[$90>>2]|0;
 _setup_free($p,$91);
 $92 = (($p) + 1108|0);
 $93 = HEAP32[$92>>2]|0;
 _setup_free($p,$93);
 $94 = (($p) + 1116|0);
 $95 = HEAP32[$94>>2]|0;
 _setup_free($p,$95);
 $96 = (($p) + 1088|0);
 $97 = HEAP32[$96>>2]|0;
 _setup_free($p,$97);
 $98 = (($p) + 1096|0);
 $99 = HEAP32[$98>>2]|0;
 _setup_free($p,$99);
 $100 = (($p) + 1104|0);
 $101 = HEAP32[$100>>2]|0;
 _setup_free($p,$101);
 $102 = (($p) + 1112|0);
 $103 = HEAP32[$102>>2]|0;
 _setup_free($p,$103);
 $104 = (($p) + 1120|0);
 $105 = HEAP32[$104>>2]|0;
 _setup_free($p,$105);
 $106 = (($p) + 28|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)==(0);
 if ($108) {
  STACKTOP = sp;return;
 }
 $109 = (($p) + 20|0);
 $110 = HEAP32[$109>>2]|0;
 (_fclose(($110|0))|0);
 STACKTOP = sp;return;
}
function _setup_free($f,$p) {
 $f = $f|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _free($p);
 }
 STACKTOP = sp;return;
}
function _stb_vorbis_get_info($agg$result,$f) {
 $agg$result = $agg$result|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = (($f) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($f) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($f) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($f) + 132|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 >> 1;
 HEAP32[$agg$result>>2] = $2;
 $12 = (($agg$result) + 4|0);
 HEAP32[$12>>2] = $1;
 $13 = (($agg$result) + 8|0);
 HEAP32[$13>>2] = $4;
 $14 = (($agg$result) + 12|0);
 HEAP32[$14>>2] = $6;
 $15 = (($agg$result) + 16|0);
 HEAP32[$15>>2] = $8;
 $16 = (($agg$result) + 20|0);
 HEAP32[$16>>2] = $11;
 STACKTOP = sp;return;
}
function _error($f,$e) {
 $f = $f|0;
 $e = $e|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 116|0);
 HEAP32[$0>>2] = $e;
 STACKTOP = sp;return;
}
function _is_whole_packet_present($f,$end_page) {
 $f = $f|0;
 $end_page = $end_page|0;
 var $$0 = 0, $$s$0 = 0, $$s$3 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $first$0 = 0, $first$0$ph = 0, $p$08 = 0, $p$1 = 0, $p$2 = 0, $p$2$ph = 0, $p$32 = 0, $p$4 = 0, $s$0$lcssa = 0;
 var $s$09 = 0, $s$2 = 0, $s$2$ph = 0, $s$3$lcssa = 0, $s$33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 1396|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==(-1);
 if ($4) {
  $first$0$ph = 1;$p$2$ph = $3;$s$2$ph = -1;
 } else {
  $5 = (($f) + 1132|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($1|0)<($6|0);
  L3: do {
   if ($7) {
    $p$08 = $3;$s$09 = $1;
    while(1) {
     $11 = ((($f) + ($s$09)|0) + 1136|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = $12&255;
     $14 = (($p$08) + ($13)|0);
     $15 = ($12<<24>>24)==(-1);
     $10 = (($s$09) + 1)|0;
     if (!($15)) {
      $p$1 = $14;$s$0$lcssa = $s$09;
      break L3;
     }
     $8 = HEAP32[$5>>2]|0;
     $9 = ($10|0)<($8|0);
     if ($9) {
      $p$08 = $14;$s$09 = $10;
     } else {
      $p$1 = $14;$s$0$lcssa = $10;
      break;
     }
    }
   } else {
    $p$1 = $3;$s$0$lcssa = $1;
   }
  } while(0);
  $16 = ($end_page|0)==(0);
  if (!($16)) {
   $17 = HEAP32[$5>>2]|0;
   $18 = (($17) + -1)|0;
   $19 = ($s$0$lcssa|0)<($18|0);
   if ($19) {
    _error($f,21);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $20 = HEAP32[$5>>2]|0;
  $21 = ($s$0$lcssa|0)==($20|0);
  $$s$0 = $21 ? -1 : $s$0$lcssa;
  $22 = (($f) + 40|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($p$1>>>0)>($23>>>0);
  if ($24) {
   _error($f,1);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $first$0$ph = 0;$p$2$ph = $p$1;$s$2$ph = $$s$0;
  }
 }
 $25 = (($f) + 40|0);
 $26 = ($end_page|0)==(0);
 $27 = (($f) + 1008|0);
 $first$0 = $first$0$ph;$p$2 = $p$2$ph;$s$2 = $s$2$ph;
 while(1) {
  $28 = ($s$2|0)==(-1);
  if (!($28)) {
   $$0 = 1;
   label = 34;
   break;
  }
  $29 = (($p$2) + 26|0);
  $30 = HEAP32[$25>>2]|0;
  $31 = ($29>>>0)<($30>>>0);
  if (!($31)) {
   label = 13;
   break;
  }
  $32 = (_memcmp($p$2,17752,4)|0);
  $33 = ($32|0)==(0);
  if (!($33)) {
   label = 15;
   break;
  }
  $34 = (($p$2) + 4|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if (!($36)) {
   label = 17;
   break;
  }
  $37 = ($first$0|0)==(0);
  if ($37) {
   $44 = (($p$2) + 5|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45 & 1;
   $47 = ($46<<24>>24)==(0);
   if ($47) {
    label = 23;
    break;
   }
  } else {
   $38 = HEAP32[$27>>2]|0;
   $39 = ($38|0)==(0);
   if (!($39)) {
    $40 = (($p$2) + 5|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41 & 1;
    $43 = ($42<<24>>24)==(0);
    if (!($43)) {
     label = 21;
     break;
    }
   }
  }
  $48 = HEAP8[$29>>0]|0;
  $49 = $48&255;
  $$sum = (($49) + 27)|0;
  $50 = (($p$2) + ($$sum)|0);
  $51 = HEAP32[$25>>2]|0;
  $52 = ($50>>>0)>($51>>>0);
  if ($52) {
   label = 26;
   break;
  }
  $53 = ($48<<24>>24)==(0);
  L28: do {
   if ($53) {
    $p$4 = $50;$s$3$lcssa = 0;
   } else {
    $p$32 = $50;$s$33 = 0;
    while(1) {
     $$sum1 = (($s$33) + 27)|0;
     $56 = (($p$2) + ($$sum1)|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57&255;
     $59 = (($p$32) + ($58)|0);
     $60 = ($57<<24>>24)==(-1);
     $55 = (($s$33) + 1)|0;
     if (!($60)) {
      $p$4 = $59;$s$3$lcssa = $s$33;
      break L28;
     }
     $54 = ($55|0)<($49|0);
     if ($54) {
      $p$32 = $59;$s$33 = $55;
     } else {
      $p$4 = $59;$s$3$lcssa = $55;
      break;
     }
    }
   }
  } while(0);
  if (!($26)) {
   $61 = (($49) + -1)|0;
   $62 = ($s$3$lcssa|0)<($61|0);
   if ($62) {
    label = 31;
    break;
   }
  }
  $63 = ($s$3$lcssa|0)==($49|0);
  $$s$3 = $63 ? -1 : $s$3$lcssa;
  $64 = HEAP32[$25>>2]|0;
  $65 = ($p$4>>>0)>($64>>>0);
  if ($65) {
   label = 33;
   break;
  } else {
   $first$0 = 0;$p$2 = $p$4;$s$2 = $$s$3;
  }
 }
 if ((label|0) == 13) {
  _error($f,1);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 15) {
  _error($f,21);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 17) {
  _error($f,21);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 21) {
  _error($f,21);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 23) {
  _error($f,21);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  _error($f,1);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 31) {
  _error($f,21);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 33) {
  _error($f,1);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 34) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vorbis_decode_packet($f,$len,$p_left,$p_right) {
 $f = $f|0;
 $len = $len|0;
 $p_left = $p_left|0;
 $p_right = $p_right|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $left_end = 0, $mode = 0, $right_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $mode = sp + 8|0;
 $left_end = sp;
 $right_end = sp + 4|0;
 $0 = (_vorbis_decode_initial($f,$p_left,$left_end,$p_right,$right_end,$mode)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$mode>>2]|0;
 $3 = ((($f) + (($2*6)|0)|0) + 428|0);
 $4 = HEAP32[$p_left>>2]|0;
 $5 = HEAP32[$p_right>>2]|0;
 $6 = HEAP32[$right_end>>2]|0;
 $7 = (_vorbis_decode_packet_rest($f,$len,$3,$4,$5,$6,$p_left)|0);
 $$0 = $7;
 STACKTOP = sp;return ($$0|0);
}
function _get8_packet($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_get8_packet_raw($f)|0);
 $1 = (($f) + 1412|0);
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return ($0|0);
}
function _vorbis_finish_frame($f,$len,$left,$right) {
 $f = $f|0;
 $len = $len|0;
 $left = $left|0;
 $right = $right|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond10 = 0;
 var $i$03 = 0, $i1$09 = 0, $j$02 = 0, $j2$06 = 0, $len$right = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 1008|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $50 = 0;
 } else {
  $3 = (_get_window($f,$1)|0);
  $4 = (($f) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)>(0);
  if ($6) {
   $7 = ($1|0)>(0);
   $8 = HEAP32[$4>>2]|0;
   $9 = (($1) + -1)|0;
   $i1$09 = 0;
   while(1) {
    if ($7) {
     $10 = ((($f) + ($i1$09<<2)|0) + 816|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = ((($f) + ($i1$09<<2)|0) + 944|0);
     $13 = HEAP32[$12>>2]|0;
     $j2$06 = 0;
     while(1) {
      $14 = (($j2$06) + ($left))|0;
      $15 = (($11) + ($14<<2)|0);
      $16 = +HEAPF32[$15>>2];
      $17 = (($3) + ($j2$06<<2)|0);
      $18 = +HEAPF32[$17>>2];
      $19 = $16 * $18;
      $20 = (($13) + ($j2$06<<2)|0);
      $21 = +HEAPF32[$20>>2];
      $22 = (($9) - ($j2$06))|0;
      $23 = (($3) + ($22<<2)|0);
      $24 = +HEAPF32[$23>>2];
      $25 = $21 * $24;
      $26 = $19 + $25;
      HEAPF32[$15>>2] = $26;
      $27 = (($j2$06) + 1)|0;
      $exitcond10 = ($27|0)==($1|0);
      if ($exitcond10) {
       break;
      } else {
       $j2$06 = $27;
      }
     }
    }
    $28 = (($i1$09) + 1)|0;
    $29 = ($28|0)<($8|0);
    if ($29) {
     $i1$09 = $28;
    } else {
     break;
    }
   }
  }
  $$pr = HEAP32[$0>>2]|0;
  $50 = $$pr;
 }
 $30 = (($len) - ($right))|0;
 HEAP32[$0>>2] = $30;
 $31 = (($f) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)>(0);
 if ($33) {
  $34 = ($right|0)<($len|0);
  $35 = HEAP32[$31>>2]|0;
  $36 = (($len) - ($right))|0;
  $i$03 = 0;
  while(1) {
   if ($34) {
    $37 = ((($f) + ($i$03<<2)|0) + 816|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($f) + ($i$03<<2)|0) + 944|0);
    $40 = HEAP32[$39>>2]|0;
    $42 = $right;$j$02 = 0;
    while(1) {
     $41 = (($38) + ($42<<2)|0);
     $43 = +HEAPF32[$41>>2];
     $44 = (($40) + ($j$02<<2)|0);
     HEAPF32[$44>>2] = $43;
     $45 = (($j$02) + 1)|0;
     $46 = (($45) + ($right))|0;
     $exitcond = ($45|0)==($36|0);
     if ($exitcond) {
      break;
     } else {
      $42 = $46;$j$02 = $45;
     }
    }
   }
   $47 = (($i$03) + 1)|0;
   $48 = ($47|0)<($35|0);
   if ($48) {
    $i$03 = $47;
   } else {
    break;
   }
  }
 }
 $49 = ($50|0)==(0);
 if ($49) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $51 = ($len|0)<($right|0);
 $len$right = $51 ? $len : $right;
 $52 = (($len$right) - ($left))|0;
 $53 = (($f) + 1432|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + ($52))|0;
 HEAP32[$53>>2] = $55;
 $$0 = $52;
 STACKTOP = sp;return ($$0|0);
}
function _vorbis_init($p,$z) {
 $p = $p|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($p|0),0,1528)|0;
 $0 = ($z|0)==(0|0);
 if (!($0)) {
  $1 = (($p) + 96|0);
  $2 = $z;
  $3 = $2;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($2) + 4)|0;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = $8;
  HEAP32[$9>>2] = $4;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $7;
  $12 = (($p) + 100|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 3)|0;
  $15 = $14 & -4;
  HEAP32[$12>>2] = $15;
  $16 = (($p) + 108|0);
  HEAP32[$16>>2] = $15;
 }
 $17 = (($p) + 112|0);
 HEAP32[$17>>2] = 0;
 $18 = (($p) + 116|0);
 HEAP32[$18>>2] = 0;
 $19 = (($p) + 32|0);
 HEAP32[$19>>2] = 0;
 $20 = (($p) + 140|0);
 HEAP32[$20>>2] = 0;
 $21 = (($p) + 1436|0);
 HEAP32[$21>>2] = -1;
 $22 = (($p) + 28|0);
 HEAP32[$22>>2] = 0;
 $23 = (($p) + 20|0);
 HEAP32[$23>>2] = 0;
 STACKTOP = sp;return;
}
function _start_decoder($f) {
 $f = $f|0;
 var $$ = 0, $$14 = 0, $$4 = 0, $$lcssa = 0, $$lcssa108 = 0, $$lcssa151 = 0, $$lcssa157 = 0, $$lcssa99 = 0, $$longest_floorlist$0 = 0, $$max_class$0 = 0, $$max_part_read$0 = 0, $$off = 0, $$off7 = 0, $$pr = 0, $$pr211 = 0, $$pr216 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0;
 var $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $current_entry$0140 = 0, $current_length$0141 = 0, $current_length$0141$in = 0, $div$0163 = 0, $exitcond = 0, $header = 0, $hi = 0, $high_bits$0 = 0, $i$1182 = 0, $i$2128 = 0, $i$3122 = 0, $i$473 = 0, $i$546 = 0, $i$627 = 0, $i$723 = 0, $i7$018 = 0, $j$0135 = 0, $j$10100 = 0, $j$11105 = 0;
 var $j$1147 = 0, $j$12109 = 0, $j$1351 = 0, $j$1458 = 0, $j$1566 = 0, $j$1639 = 0, $j$1735 = 0, $j$1842 = 0, $j$2153 = 0, $j$3168 = 0, $j$4158 = 0, $j$5173 = 0, $j$617 = 0, $j$779 = 0, $j$887 = 0, $j$996 = 0, $k$0164 = 0, $k$184 = 0, $k$291 = 0, $k$357 = 0;
 var $k$462 = 0, $k$462$in = 0, $k$531 = 0, $lengths$0 = 0, $lengths$1213 = 0, $lengths$1214 = 0, $longest_floorlist$0$lcssa = 0, $longest_floorlist$0121 = 0, $low = 0, $max_class$078 = 0, $max_part_read$0$lcssa = 0, $max_part_read$019 = 0, $or$cond = 0, $p = 0, $phitmp = 0, $phitmp10 = 0, $phitmp192 = 0, $phitmp193 = 0, $phitmp194 = 0, $phitmp8 = 0;
 var $phitmp9 = 0, $sext = 0, $sorted_count$0146 = 0, $sorted_count$1 = 0, $sorted_count$2 = 0, $temp$061 = 0, $total$0134 = 0, $total$1 = 0, $total$2 = 0, $values$0 = 0, $values$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $header = sp + 1008|0;
 $p = sp + 8|0;
 $low = sp;
 $hi = sp + 4|0;
 $0 = (_start_page($f)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $2 = (($f) + 1391|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 2;
 $6 = ($5|0)==(0);
 if ($6) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $7 = $4 & 4;
 $8 = ($7|0)==(0);
 if (!($8)) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $9 = $4 & 1;
 $10 = ($9|0)==(0);
 if (!($10)) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $11 = (($f) + 1132|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $14 = (($f) + 1136|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(30);
 if (!($16)) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $17 = (_get8($f)|0);
 $18 = ($17<<24>>24)==(1);
 if (!($18)) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $19 = (_getn($f,$header,6)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  _error($f,10);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $21 = (_vorbis_validate($header)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $23 = (_get32($f)|0);
 $24 = ($23|0)==(0);
 if (!($24)) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $25 = (_get8($f)|0);
 $26 = $25&255;
 $27 = (($f) + 4|0);
 HEAP32[$27>>2] = $26;
 $28 = ($25<<24>>24)==(0);
 if ($28) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $29 = ($25&255)>(16);
 if ($29) {
  _error($f,5);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $30 = (_get32($f)|0);
 HEAP32[$f>>2] = $30;
 $31 = ($30|0)==(0);
 if ($31) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 (_get32($f)|0);
 (_get32($f)|0);
 (_get32($f)|0);
 $32 = (_get8($f)|0);
 $33 = $32&255;
 $34 = $33 & 15;
 $35 = $33 >>> 4;
 $36 = 1 << $34;
 $37 = (($f) + 128|0);
 HEAP32[$37>>2] = $36;
 $38 = 1 << $35;
 $39 = (($f) + 132|0);
 HEAP32[$39>>2] = $38;
 $$off = (($34) + -6)|0;
 $40 = ($$off>>>0)>(7);
 if ($40) {
  _error($f,20);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $$off7 = (($32) + -96)<<24>>24;
 $41 = ($$off7<<24>>24)<(0);
 if ($41) {
  _error($f,20);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $42 = ($34>>>0)>($35>>>0);
 if ($42) {
  _error($f,20);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $43 = (_get8($f)|0);
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $46 = (_start_page($f)|0);
 $47 = ($46|0)==(0);
 if ($47) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $48 = (_start_packet($f)|0);
 $49 = ($48|0)==(0);
 if ($49) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $50 = (($f) + 1392|0);
 while(1) {
  $51 = (_next_segment($f)|0);
  _skip($f,$51);
  HEAP8[$50>>0] = 0;
  $52 = ($51|0)==(0);
  if ($52) {
   break;
  }
 }
 $53 = (_start_packet($f)|0);
 $54 = ($53|0)==(0);
 if ($54) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $55 = (($f) + 48|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = ($56<<24>>24)==(0);
 do {
  if (!($57)) {
   $58 = (_is_whole_packet_present($f,1)|0);
   $59 = ($58|0)==(0);
   if (!($59)) {
    break;
   }
   $60 = (($f) + 116|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(21);
   if (!($62)) {
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   HEAP32[$60>>2] = 20;
   $$4 = 0;
   STACKTOP = sp;return ($$4|0);
  }
 } while(0);
 _crc32_init();
 $63 = (_get8_packet($f)|0);
 $64 = ($63|0)==(5);
 if (!($64)) {
  _error($f,20);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $65 = (_get8_packet($f)|0);
 $66 = $65&255;
 HEAP8[$header>>0] = $66;
 $67 = (_get8_packet($f)|0);
 $68 = $67&255;
 $69 = (($header) + 1|0);
 HEAP8[$69>>0] = $68;
 $70 = (_get8_packet($f)|0);
 $71 = $70&255;
 $72 = (($header) + 2|0);
 HEAP8[$72>>0] = $71;
 $73 = (_get8_packet($f)|0);
 $74 = $73&255;
 $75 = (($header) + 3|0);
 HEAP8[$75>>0] = $74;
 $76 = (_get8_packet($f)|0);
 $77 = $76&255;
 $78 = (($header) + 4|0);
 HEAP8[$78>>0] = $77;
 $79 = (_get8_packet($f)|0);
 $80 = $79&255;
 $81 = (($header) + 5|0);
 HEAP8[$81>>0] = $80;
 $82 = (_vorbis_validate($header)|0);
 $83 = ($82|0)==(0);
 if ($83) {
  _error($f,20);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $84 = (_get_bits($f,8)|0);
 $85 = (($84) + 1)|0;
 $86 = (($f) + 136|0);
 HEAP32[$86>>2] = $85;
 $87 = ($85*2096)|0;
 $88 = (_setup_malloc($f,$87)|0);
 $89 = (($f) + 140|0);
 HEAP32[$89>>2] = $88;
 $90 = ($88|0)==(0|0);
 if ($90) {
  _error($f,3);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $91 = HEAP32[$86>>2]|0;
 $92 = ($91*2096)|0;
 _memset(($88|0),0,($92|0))|0;
 $93 = HEAP32[$86>>2]|0;
 $94 = ($93|0)>(0);
 L100: do {
  if ($94) {
   $95 = (($f) + 16|0);
   $96 = (($f) + 16|0);
   $i$1182 = 0;
   L102: while(1) {
    $97 = HEAP32[$89>>2]|0;
    $98 = (($97) + (($i$1182*2096)|0)|0);
    $99 = (_get_bits($f,8)|0);
    $100 = $99 & 255;
    $101 = ($100|0)==(66);
    if (!($101)) {
     label = 52;
     break;
    }
    $102 = (_get_bits($f,8)|0);
    $103 = $102 & 255;
    $104 = ($103|0)==(67);
    if (!($104)) {
     label = 54;
     break;
    }
    $105 = (_get_bits($f,8)|0);
    $106 = $105 & 255;
    $107 = ($106|0)==(86);
    if (!($107)) {
     label = 56;
     break;
    }
    $108 = (_get_bits($f,8)|0);
    $109 = (_get_bits($f,8)|0);
    $110 = $109 << 8;
    $111 = $108 & 255;
    $112 = $110 | $111;
    HEAP32[$98>>2] = $112;
    $113 = (_get_bits($f,8)|0);
    $114 = (_get_bits($f,8)|0);
    $115 = (_get_bits($f,8)|0);
    $116 = $115 << 16;
    $117 = $114 << 8;
    $118 = $117 & 65280;
    $119 = $113 & 255;
    $120 = $118 | $119;
    $121 = $120 | $116;
    $122 = ((($97) + (($i$1182*2096)|0)|0) + 4|0);
    HEAP32[$122>>2] = $121;
    $123 = (_get_bits($f,1)|0);
    $124 = ($123|0)!=(0);
    do {
     if ($124) {
      $125 = ((($97) + (($i$1182*2096)|0)|0) + 23|0);
      HEAP8[$125>>0] = 0;
      $126 = HEAP32[$122>>2]|0;
      $132 = $126;$863 = $125;
      label = 61;
     } else {
      $127 = (_get_bits($f,1)|0);
      $phitmp9 = $127&255;
      $128 = ((($97) + (($i$1182*2096)|0)|0) + 23|0);
      HEAP8[$128>>0] = $phitmp9;
      $129 = ($phitmp9<<24>>24)==(0);
      $130 = HEAP32[$122>>2]|0;
      if ($129) {
       $132 = $130;$863 = $128;
       label = 61;
       break;
      }
      $131 = (_setup_temp_malloc($f,$130)|0);
      $153 = $128;$lengths$0 = $131;
     }
    } while(0);
    if ((label|0) == 61) {
     label = 0;
     $133 = (_setup_malloc($f,$132)|0);
     $134 = ((($97) + (($i$1182*2096)|0)|0) + 8|0);
     HEAP32[$134>>2] = $133;
     $153 = $863;$lengths$0 = $133;
    }
    $135 = ($lengths$0|0)==(0|0);
    if ($135) {
     label = 63;
     break;
    }
    do {
     if ($124) {
      $138 = (_get_bits($f,5)|0);
      $139 = HEAP32[$122>>2]|0;
      $140 = ($139|0)>(0);
      if ($140) {
       $142 = $139;$current_entry$0140 = 0;$current_length$0141$in = $138;
      } else {
       $total$2 = 0;
       break;
      }
      while(1) {
       $current_length$0141 = (($current_length$0141$in) + 1)|0;
       $141 = (($142) - ($current_entry$0140))|0;
       $143 = (_ilog($141)|0);
       $144 = (_get_bits($f,$143)|0);
       $145 = (($144) + ($current_entry$0140))|0;
       $146 = HEAP32[$122>>2]|0;
       $147 = ($145|0)>($146|0);
       if ($147) {
        label = 68;
        break L102;
       }
       $148 = (($lengths$0) + ($current_entry$0140)|0);
       $149 = $current_length$0141&255;
       _memset(($148|0),($149|0),($144|0))|0;
       $150 = HEAP32[$122>>2]|0;
       $151 = ($145|0)<($150|0);
       if ($151) {
        $142 = $150;$current_entry$0140 = $145;$current_length$0141$in = $current_length$0141;
       } else {
        $total$2 = 0;
        break;
       }
      }
     } else {
      $136 = HEAP32[$122>>2]|0;
      $137 = ($136|0)>(0);
      if ($137) {
       $j$0135 = 0;$total$0134 = 0;
      } else {
       $total$2 = 0;
       break;
      }
      while(1) {
       $152 = HEAP8[$153>>0]|0;
       $154 = ($152<<24>>24)==(0);
       do {
        if ($154) {
         label = 72;
        } else {
         $155 = (_get_bits($f,1)|0);
         $phitmp10 = ($155|0)==(0);
         if (!($phitmp10)) {
          label = 72;
          break;
         }
         $161 = (($lengths$0) + ($j$0135)|0);
         HEAP8[$161>>0] = -1;
         $total$1 = $total$0134;
        }
       } while(0);
       if ((label|0) == 72) {
        label = 0;
        $156 = (_get_bits($f,5)|0);
        $157 = (($156) + 1)|0;
        $158 = $157&255;
        $159 = (($lengths$0) + ($j$0135)|0);
        HEAP8[$159>>0] = $158;
        $160 = (($total$0134) + 1)|0;
        $total$1 = $160;
       }
       $162 = (($j$0135) + 1)|0;
       $163 = HEAP32[$122>>2]|0;
       $164 = ($162|0)<($163|0);
       if ($164) {
        $j$0135 = $162;$total$0134 = $total$1;
       } else {
        $total$2 = $total$1;
        break;
       }
      }
     }
    } while(0);
    $165 = HEAP8[$153>>0]|0;
    $166 = ($165<<24>>24)==(0);
    do {
     if ($166) {
      $lengths$1214 = $lengths$0;
      label = 81;
     } else {
      $167 = HEAP32[$122>>2]|0;
      $168 = $167 >> 2;
      $169 = ($total$2|0)<($168|0);
      if ($169) {
       $$pr211 = HEAP8[$153>>0]|0;
       $178 = ($$pr211<<24>>24)==(0);
       if ($178) {
        $lengths$1214 = $lengths$0;
        label = 81;
        break;
       } else {
        $lengths$1213 = $lengths$0;$sorted_count$2 = $total$2;
        break;
       }
      }
      $170 = HEAP32[$96>>2]|0;
      $171 = ($167|0)>($170|0);
      if ($171) {
       HEAP32[$96>>2] = $167;
      }
      $172 = HEAP32[$122>>2]|0;
      $173 = (_setup_malloc($f,$172)|0);
      $174 = ((($97) + (($i$1182*2096)|0)|0) + 8|0);
      HEAP32[$174>>2] = $173;
      $175 = HEAP32[$122>>2]|0;
      _memcpy(($173|0),($lengths$0|0),($175|0))|0;
      $176 = HEAP32[$122>>2]|0;
      _setup_temp_free($f,$lengths$0,$176);
      $177 = HEAP32[$174>>2]|0;
      HEAP8[$153>>0] = 0;
      $lengths$1214 = $177;
      label = 81;
     }
    } while(0);
    do {
     if ((label|0) == 81) {
      label = 0;
      $179 = HEAP32[$122>>2]|0;
      $180 = ($179|0)>(0);
      if (!($180)) {
       $lengths$1213 = $lengths$1214;$sorted_count$2 = 0;
       break;
      }
      $181 = HEAP32[$122>>2]|0;
      $j$1147 = 0;$sorted_count$0146 = 0;
      while(1) {
       $182 = (($lengths$1214) + ($j$1147)|0);
       $183 = HEAP8[$182>>0]|0;
       $184 = ($183&255)<(11);
       $185 = ($183<<24>>24)==(-1);
       $or$cond = $184 | $185;
       $186 = $or$cond&1;
       $187 = $186 ^ 1;
       $sorted_count$1 = (($187) + ($sorted_count$0146))|0;
       $188 = (($j$1147) + 1)|0;
       $189 = ($188|0)<($181|0);
       if ($189) {
        $j$1147 = $188;$sorted_count$0146 = $sorted_count$1;
       } else {
        $lengths$1213 = $lengths$1214;$sorted_count$2 = $sorted_count$1;
        break;
       }
      }
     }
    } while(0);
    $190 = ((($97) + (($i$1182*2096)|0)|0) + 2092|0);
    HEAP32[$190>>2] = $sorted_count$2;
    $191 = HEAP8[$153>>0]|0;
    $192 = ($191<<24>>24)==(0);
    do {
     if ($192) {
      $193 = HEAP32[$122>>2]|0;
      $194 = $193 << 2;
      $195 = (_setup_malloc($f,$194)|0);
      $196 = ((($97) + (($i$1182*2096)|0)|0) + 32|0);
      HEAP32[$196>>2] = $195;
      $197 = ($195|0)==(0|0);
      if ($197) {
       label = 86;
       break L102;
      } else {
       $values$1 = 0;
      }
     } else {
      $198 = ($sorted_count$2|0)==(0);
      if ($198) {
       $values$0 = 0;
      } else {
       $199 = (_setup_malloc($f,$sorted_count$2)|0);
       $200 = ((($97) + (($i$1182*2096)|0)|0) + 8|0);
       HEAP32[$200>>2] = $199;
       $201 = ($199|0)==(0|0);
       if ($201) {
        label = 89;
        break L102;
       }
       $202 = HEAP32[$190>>2]|0;
       $203 = $202 << 2;
       $204 = (_setup_temp_malloc($f,$203)|0);
       $205 = ((($97) + (($i$1182*2096)|0)|0) + 32|0);
       HEAP32[$205>>2] = $204;
       $206 = ($204|0)==(0|0);
       if ($206) {
        label = 91;
        break L102;
       }
       $207 = HEAP32[$190>>2]|0;
       $208 = $207 << 2;
       $209 = (_setup_temp_malloc($f,$208)|0);
       $210 = ($209|0)==(0|0);
       if ($210) {
        label = 93;
        break L102;
       } else {
        $values$0 = $209;
       }
      }
      $211 = HEAP32[$122>>2]|0;
      $212 = HEAP32[$190>>2]|0;
      $213 = $212 << 3;
      $214 = (($213) + ($211))|0;
      $215 = HEAP32[$95>>2]|0;
      $216 = ($214>>>0)>($215>>>0);
      if (!($216)) {
       $values$1 = $values$0;
       break;
      }
      HEAP32[$95>>2] = $214;
      $values$1 = $values$0;
     }
    } while(0);
    $217 = HEAP32[$122>>2]|0;
    _compute_codewords($98,$lengths$1213,$217,$values$1);
    $218 = HEAP32[$190>>2]|0;
    $219 = ($218|0)==(0);
    if (!($219)) {
     $220 = $218 << 2;
     $221 = (($220) + 4)|0;
     $222 = (_setup_malloc($f,$221)|0);
     $223 = ((($97) + (($i$1182*2096)|0)|0) + 2084|0);
     HEAP32[$223>>2] = $222;
     $224 = HEAP32[$190>>2]|0;
     $225 = $224 << 2;
     $226 = (($225) + 4)|0;
     $227 = (_setup_malloc($f,$226)|0);
     $228 = ((($97) + (($i$1182*2096)|0)|0) + 2088|0);
     HEAP32[$228>>2] = $227;
     $229 = ($227|0)==(0|0);
     if (!($229)) {
      $230 = (($227) + 4|0);
      HEAP32[$228>>2] = $230;
      HEAP32[$227>>2] = -1;
     }
     _compute_sorted_huffman($98,$lengths$1213,$values$1);
    }
    $231 = HEAP8[$153>>0]|0;
    $232 = ($231<<24>>24)==(0);
    if (!($232)) {
     $233 = HEAP32[$190>>2]|0;
     $234 = $233 << 2;
     _setup_temp_free($f,$values$1,$234);
     $235 = ((($97) + (($i$1182*2096)|0)|0) + 32|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = HEAP32[$190>>2]|0;
     $238 = $237 << 2;
     _setup_temp_free($f,$236,$238);
     $239 = HEAP32[$122>>2]|0;
     _setup_temp_free($f,$lengths$1213,$239);
     HEAP32[$235>>2] = 0;
    }
    _compute_accelerated_huffman($98);
    $240 = (_get_bits($f,4)|0);
    $241 = $240&255;
    $242 = ((($97) + (($i$1182*2096)|0)|0) + 21|0);
    HEAP8[$242>>0] = $241;
    $243 = $240 & 255;
    $244 = ($243>>>0)>(2);
    if ($244) {
     label = 103;
     break;
    }
    $245 = ($243|0)==(0);
    do {
     if (!($245)) {
      $246 = (_get_bits($f,32)|0);
      $247 = (+_float32_unpack($246));
      $248 = ((($97) + (($i$1182*2096)|0)|0) + 12|0);
      HEAPF32[$248>>2] = $247;
      $249 = (_get_bits($f,32)|0);
      $250 = (+_float32_unpack($249));
      $251 = ((($97) + (($i$1182*2096)|0)|0) + 16|0);
      HEAPF32[$251>>2] = $250;
      $252 = (_get_bits($f,4)|0);
      $253 = (($252) + 1)|0;
      $254 = $253&255;
      $255 = ((($97) + (($i$1182*2096)|0)|0) + 20|0);
      HEAP8[$255>>0] = $254;
      $256 = (_get_bits($f,1)|0);
      $257 = $256&255;
      $258 = ((($97) + (($i$1182*2096)|0)|0) + 22|0);
      HEAP8[$258>>0] = $257;
      $259 = HEAP8[$242>>0]|0;
      $260 = ($259<<24>>24)==(1);
      $261 = HEAP32[$122>>2]|0;
      $262 = HEAP32[$98>>2]|0;
      if ($260) {
       $263 = (_lookup1_values($261,$262)|0);
       $264 = ((($97) + (($i$1182*2096)|0)|0) + 24|0);
       HEAP32[$264>>2] = $263;
      } else {
       $265 = Math_imul($262, $261)|0;
       $266 = ((($97) + (($i$1182*2096)|0)|0) + 24|0);
       HEAP32[$266>>2] = $265;
      }
      $267 = ((($97) + (($i$1182*2096)|0)|0) + 24|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = $268 << 1;
      $270 = (_setup_temp_malloc($f,$269)|0);
      $271 = ($270|0)==(0|0);
      if ($271) {
       label = 110;
       break L102;
      }
      $272 = HEAP32[$267>>2]|0;
      $273 = ($272|0)>(0);
      if ($273) {
       $j$2153 = 0;
       while(1) {
        $274 = HEAP8[$255>>0]|0;
        $275 = $274&255;
        $276 = (_get_bits($f,$275)|0);
        $277 = ($276|0)==(-1);
        if ($277) {
         label = 112;
         break L102;
        }
        $280 = $276&65535;
        $281 = (($270) + ($j$2153<<1)|0);
        HEAP16[$281>>1] = $280;
        $282 = (($j$2153) + 1)|0;
        $283 = HEAP32[$267>>2]|0;
        $284 = ($282|0)<($283|0);
        if ($284) {
         $j$2153 = $282;
        } else {
         $$lcssa151 = $283;
         break;
        }
       }
      } else {
       $$lcssa151 = $272;
      }
      $285 = HEAP8[$242>>0]|0;
      $286 = ($285<<24>>24)==(1);
      do {
       if ($286) {
        $287 = HEAP8[$153>>0]|0;
        $288 = ($287<<24>>24)!=(0);
        if ($288) {
         $289 = HEAP32[$190>>2]|0;
         $290 = ($289|0)==(0);
         if ($290) {
          label = 134;
          break;
         }
         $291 = $289 << 2;
         $292 = HEAP32[$98>>2]|0;
         $293 = Math_imul($291, $292)|0;
         $294 = (_setup_malloc($f,$293)|0);
         $295 = ((($97) + (($i$1182*2096)|0)|0) + 28|0);
         HEAP32[$295>>2] = $294;
        } else {
         $296 = HEAP32[$122>>2]|0;
         $297 = $296 << 2;
         $298 = HEAP32[$98>>2]|0;
         $299 = Math_imul($297, $298)|0;
         $300 = (_setup_malloc($f,$299)|0);
         $301 = ((($97) + (($i$1182*2096)|0)|0) + 28|0);
         HEAP32[$301>>2] = $300;
        }
        $302 = ((($97) + (($i$1182*2096)|0)|0) + 28|0);
        $303 = HEAP32[$302>>2]|0;
        $304 = ($303|0)==(0|0);
        if ($304) {
         label = 120;
         break L102;
        }
        $$ = $288 ? $190 : $122;
        $307 = HEAP32[$$>>2]|0;
        $308 = ($307|0)>(0);
        if ($308) {
         $309 = ((($97) + (($i$1182*2096)|0)|0) + 2088|0);
         $310 = HEAP32[$98>>2]|0;
         $311 = ($310|0)>(0);
         $j$3168 = 0;
         while(1) {
          if ($288) {
           $312 = HEAP32[$309>>2]|0;
           $313 = (($312) + ($j$3168<<2)|0);
           $314 = HEAP32[$313>>2]|0;
           $319 = $314;
          } else {
           $319 = $j$3168;
          }
          if ($311) {
           $315 = HEAP32[$267>>2]|0;
           $316 = HEAP32[$302>>2]|0;
           $317 = HEAP32[$98>>2]|0;
           $330 = $310;$div$0163 = 1;$k$0164 = 0;
           while(1) {
            $318 = (($319|0) / ($div$0163|0))&-1;
            $320 = (($318>>>0) % ($315>>>0))&-1;
            $321 = (($270) + ($320<<1)|0);
            $322 = HEAP16[$321>>1]|0;
            $323 = $322&65535;
            $324 = (+($323|0));
            $325 = +HEAPF32[$251>>2];
            $326 = $325 * $324;
            $327 = +HEAPF32[$248>>2];
            $328 = $327 + $326;
            $329 = Math_imul($330, $j$3168)|0;
            $331 = (($329) + ($k$0164))|0;
            $332 = (($316) + ($331<<2)|0);
            HEAPF32[$332>>2] = $328;
            $333 = Math_imul($315, $div$0163)|0;
            $334 = (($k$0164) + 1)|0;
            $335 = ($334|0)<($317|0);
            if ($335) {
             $330 = $317;$div$0163 = $333;$k$0164 = $334;
            } else {
             break;
            }
           }
          }
          $336 = (($j$3168) + 1)|0;
          $exitcond = ($336|0)==($307|0);
          if ($exitcond) {
           break;
          } else {
           $j$3168 = $336;
          }
         }
        }
        $337 = HEAP32[$267>>2]|0;
        $338 = $337 << 1;
        _setup_temp_free($f,$270,$338);
        HEAP8[$242>>0] = 2;
       } else {
        $339 = $$lcssa151 << 2;
        $340 = (_setup_malloc($f,$339)|0);
        $341 = ((($97) + (($i$1182*2096)|0)|0) + 28|0);
        HEAP32[$341>>2] = $340;
        $342 = HEAP32[$267>>2]|0;
        $343 = ($342|0)>(0);
        if ($343) {
         $344 = HEAP32[$341>>2]|0;
         $345 = HEAP32[$267>>2]|0;
         $j$4158 = 0;
         while(1) {
          $346 = (($270) + ($j$4158<<1)|0);
          $347 = HEAP16[$346>>1]|0;
          $348 = $347&65535;
          $349 = (+($348|0));
          $350 = +HEAPF32[$251>>2];
          $351 = $350 * $349;
          $352 = +HEAPF32[$248>>2];
          $353 = $352 + $351;
          $354 = (($344) + ($j$4158<<2)|0);
          HEAPF32[$354>>2] = $353;
          $355 = (($j$4158) + 1)|0;
          $356 = ($355|0)<($345|0);
          if ($356) {
           $j$4158 = $355;
          } else {
           $$lcssa157 = $345;
           break;
          }
         }
        } else {
         $$lcssa157 = $342;
        }
        $357 = $$lcssa157 << 1;
        _setup_temp_free($f,$270,$357);
        label = 134;
       }
      } while(0);
      if ((label|0) == 134) {
       label = 0;
       $$pr = HEAP8[$242>>0]|0;
       $358 = ($$pr<<24>>24)==(2);
       if (!($358)) {
        break;
       }
      }
      $359 = HEAP8[$258>>0]|0;
      $360 = ($359<<24>>24)==(0);
      if ($360) {
       break;
      }
      $361 = HEAP32[$267>>2]|0;
      $362 = ($361|0)>(1);
      if ($362) {
       $363 = ((($97) + (($i$1182*2096)|0)|0) + 28|0);
       $364 = HEAP32[$363>>2]|0;
       $365 = HEAP32[$267>>2]|0;
       $j$5173 = 1;
       while(1) {
        $366 = (($j$5173) + -1)|0;
        $367 = (($364) + ($366<<2)|0);
        $368 = +HEAPF32[$367>>2];
        $369 = (($364) + ($j$5173<<2)|0);
        HEAPF32[$369>>2] = $368;
        $370 = (($j$5173) + 1)|0;
        $371 = ($370|0)<($365|0);
        if ($371) {
         $j$5173 = $370;
        } else {
         break;
        }
       }
      }
      HEAP8[$258>>0] = 0;
     }
    } while(0);
    $372 = (($i$1182) + 1)|0;
    $373 = HEAP32[$86>>2]|0;
    $374 = ($372|0)<($373|0);
    if ($374) {
     $i$1182 = $372;
    } else {
     break L100;
    }
   }
   switch (label|0) {
    case 52: {
     _error($f,20);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 54: {
     _error($f,20);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 56: {
     _error($f,20);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 63: {
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 68: {
     _error($f,20);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 86: {
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 89: {
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 91: {
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 93: {
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 103: {
     _error($f,20);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 110: {
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 112: {
     $278 = HEAP32[$267>>2]|0;
     $279 = $278 << 1;
     _setup_temp_free($f,$270,$279);
     _error($f,20);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 120: {
     $305 = HEAP32[$267>>2]|0;
     $306 = $305 << 1;
     _setup_temp_free($f,$270,$306);
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
   }
  }
 } while(0);
 $375 = (_get_bits($f,6)|0);
 $376 = (($375) + 1)|0;
 $377 = $376 & 255;
 $378 = ($377|0)==(0);
 L241: do {
  if (!($378)) {
   $i$2128 = 0;
   while(1) {
    $381 = (_get_bits($f,16)|0);
    $382 = ($381|0)==(0);
    $380 = (($i$2128) + 1)|0;
    if (!($382)) {
     break;
    }
    $379 = ($380|0)<($377|0);
    if ($379) {
     $i$2128 = $380;
    } else {
     break L241;
    }
   }
   _error($f,20);
   $$4 = 0;
   STACKTOP = sp;return ($$4|0);
  }
 } while(0);
 $383 = (_get_bits($f,6)|0);
 $384 = (($383) + 1)|0;
 $385 = (($f) + 144|0);
 HEAP32[$385>>2] = $384;
 $386 = ($384*1596)|0;
 $387 = (_setup_malloc($f,$386)|0);
 $388 = (($f) + 276|0);
 HEAP32[$388>>2] = $387;
 $389 = HEAP32[$385>>2]|0;
 $390 = ($389|0)>(0);
 do {
  if ($390) {
   $i$3122 = 0;$longest_floorlist$0121 = 0;
   L250: while(1) {
    $391 = (_get_bits($f,16)|0);
    $392 = $391&65535;
    $393 = ((($f) + ($i$3122<<1)|0) + 148|0);
    HEAP16[$393>>1] = $392;
    $394 = $391 & 65535;
    $395 = ($394>>>0)>(1);
    if ($395) {
     label = 148;
     break;
    }
    $396 = ($394|0)==(0);
    if ($396) {
     label = 150;
     break;
    }
    $426 = HEAP32[$388>>2]|0;
    $427 = (_get_bits($f,5)|0);
    $428 = $427&255;
    $429 = (($426) + (($i$3122*1596)|0)|0);
    HEAP8[$429>>0] = $428;
    $430 = $427 & 255;
    $431 = ($430|0)==(0);
    do {
     if (!($431)) {
      $j$779 = 0;$max_class$078 = -1;
      while(1) {
       $432 = (_get_bits($f,4)|0);
       $433 = $432&255;
       $434 = (((($426) + (($i$3122*1596)|0)|0) + ($j$779)|0) + 1|0);
       HEAP8[$434>>0] = $433;
       $435 = $432 & 255;
       $436 = ($435|0)>($max_class$078|0);
       $$max_class$0 = $436 ? $435 : $max_class$078;
       $437 = (($j$779) + 1)|0;
       $438 = HEAP8[$429>>0]|0;
       $439 = $438&255;
       $440 = ($437|0)<($439|0);
       if ($440) {
        $j$779 = $437;$max_class$078 = $$max_class$0;
       } else {
        break;
       }
      }
      $441 = ($$max_class$0|0)<(0);
      if ($441) {
       break;
      } else {
       $j$887 = 0;
      }
      while(1) {
       $442 = (_get_bits($f,3)|0);
       $443 = (($442) + 1)|0;
       $444 = $443&255;
       $445 = (((($426) + (($i$3122*1596)|0)|0) + ($j$887)|0) + 33|0);
       HEAP8[$445>>0] = $444;
       $446 = (_get_bits($f,2)|0);
       $447 = $446&255;
       $448 = (((($426) + (($i$3122*1596)|0)|0) + ($j$887)|0) + 49|0);
       HEAP8[$448>>0] = $447;
       $449 = ($447<<24>>24)==(0);
       if (!($449)) {
        $454 = (_get_bits($f,8)|0);
        $455 = $454&255;
        $456 = (((($426) + (($i$3122*1596)|0)|0) + ($j$887)|0) + 65|0);
        HEAP8[$456>>0] = $455;
        $457 = $454 & 255;
        $458 = HEAP32[$86>>2]|0;
        $459 = ($457|0)<($458|0);
        if (!($459)) {
         label = 159;
         break L250;
        }
       }
       $450 = HEAP8[$448>>0]|0;
       $451 = $450&255;
       $452 = 1 << $451;
       $453 = ($452|0)>(0);
       if ($453) {
        $k$184 = 0;
        while(1) {
         $465 = (_get_bits($f,8)|0);
         $466 = (($465) + 65535)|0;
         $467 = $466&65535;
         $468 = ((((($426) + (($i$3122*1596)|0)|0) + ($j$887<<4)|0) + ($k$184<<1)|0) + 82|0);
         HEAP16[$468>>1] = $467;
         $sext = $466 << 16;
         $469 = $sext >> 16;
         $470 = HEAP32[$86>>2]|0;
         $471 = ($469|0)<($470|0);
         $464 = (($k$184) + 1)|0;
         if (!($471)) {
          label = 162;
          break L250;
         }
         $460 = HEAP8[$448>>0]|0;
         $461 = $460&255;
         $462 = 1 << $461;
         $463 = ($464|0)<($462|0);
         if ($463) {
          $k$184 = $464;
         } else {
          break;
         }
        }
       }
       $472 = (($j$887) + 1)|0;
       $473 = ($j$887|0)<($$max_class$0|0);
       if ($473) {
        $j$887 = $472;
       } else {
        break;
       }
      }
     }
    } while(0);
    $474 = (_get_bits($f,2)|0);
    $475 = (($474) + 1)|0;
    $476 = $475&255;
    $477 = ((($426) + (($i$3122*1596)|0)|0) + 1588|0);
    HEAP8[$477>>0] = $476;
    $478 = (_get_bits($f,4)|0);
    $479 = $478&255;
    $480 = ((($426) + (($i$3122*1596)|0)|0) + 1589|0);
    HEAP8[$480>>0] = $479;
    $481 = ((($426) + (($i$3122*1596)|0)|0) + 338|0);
    HEAP16[$481>>1] = 0;
    $482 = HEAP8[$480>>0]|0;
    $483 = $482&255;
    $484 = 1 << $483;
    $485 = $484&65535;
    $486 = ((($426) + (($i$3122*1596)|0)|0) + 340|0);
    HEAP16[$486>>1] = $485;
    $487 = ((($426) + (($i$3122*1596)|0)|0) + 1592|0);
    HEAP32[$487>>2] = 2;
    $488 = HEAP8[$429>>0]|0;
    $489 = ($488<<24>>24)==(0);
    if ($489) {
     $j$10100 = 0;
     label = 169;
    } else {
     $j$996 = 0;
     while(1) {
      $490 = (((($426) + (($i$3122*1596)|0)|0) + ($j$996)|0) + 1|0);
      $491 = HEAP8[$490>>0]|0;
      $492 = $491&255;
      $493 = (((($426) + (($i$3122*1596)|0)|0) + ($492)|0) + 33|0);
      $494 = HEAP8[$493>>0]|0;
      $495 = ($494<<24>>24)==(0);
      if (!($495)) {
       $k$291 = 0;
       while(1) {
        $496 = HEAP8[$480>>0]|0;
        $497 = $496&255;
        $498 = (_get_bits($f,$497)|0);
        $499 = $498&65535;
        $500 = HEAP32[$487>>2]|0;
        $501 = (((($426) + (($i$3122*1596)|0)|0) + ($500<<1)|0) + 338|0);
        HEAP16[$501>>1] = $499;
        $502 = HEAP32[$487>>2]|0;
        $503 = (($502) + 1)|0;
        HEAP32[$487>>2] = $503;
        $504 = (($k$291) + 1)|0;
        $505 = HEAP8[$493>>0]|0;
        $506 = $505&255;
        $507 = ($504|0)<($506|0);
        if ($507) {
         $k$291 = $504;
        } else {
         break;
        }
       }
      }
      $508 = (($j$996) + 1)|0;
      $509 = HEAP8[$429>>0]|0;
      $510 = $509&255;
      $511 = ($508|0)<($510|0);
      if ($511) {
       $j$996 = $508;
      } else {
       break;
      }
     }
     $$pr216 = HEAP32[$487>>2]|0;
     $512 = ($$pr216|0)>(0);
     if ($512) {
      $j$10100 = 0;
      label = 169;
     } else {
      $$lcssa99 = $$pr216;
     }
    }
    if ((label|0) == 169) {
     while(1) {
      label = 0;
      $513 = (((($426) + (($i$3122*1596)|0)|0) + ($j$10100<<1)|0) + 338|0);
      $514 = HEAP16[$513>>1]|0;
      $515 = (($p) + ($j$10100<<2)|0);
      HEAP16[$515>>1] = $514;
      $516 = $j$10100&65535;
      $517 = ((($p) + ($j$10100<<2)|0) + 2|0);
      HEAP16[$517>>1] = $516;
      $518 = (($j$10100) + 1)|0;
      $519 = HEAP32[$487>>2]|0;
      $520 = ($518|0)<($519|0);
      if ($520) {
       $j$10100 = $518;
       label = 169;
      } else {
       $$lcssa99 = $519;
       break;
      }
     }
    }
    _qsort($p,$$lcssa99,4,1);
    $521 = HEAP32[$487>>2]|0;
    $522 = ($521|0)>(0);
    do {
     if ($522) {
      $j$11105 = 0;
      while(1) {
       $523 = ((($p) + ($j$11105<<2)|0) + 2|0);
       $524 = HEAP16[$523>>1]|0;
       $525 = $524&255;
       $526 = (((($426) + (($i$3122*1596)|0)|0) + ($j$11105)|0) + 838|0);
       HEAP8[$526>>0] = $525;
       $527 = (($j$11105) + 1)|0;
       $528 = HEAP32[$487>>2]|0;
       $529 = ($527|0)<($528|0);
       if ($529) {
        $j$11105 = $527;
       } else {
        break;
       }
      }
      $530 = ($528|0)>(2);
      if ($530) {
       $j$12109 = 2;
      } else {
       $$lcssa108 = $528;
       break;
      }
      while(1) {
       HEAP32[$low>>2] = 0;
       HEAP32[$hi>>2] = 0;
       _neighbors($481,$j$12109,$low,$hi);
       $531 = HEAP32[$low>>2]|0;
       $532 = $531&255;
       $533 = (((($426) + (($i$3122*1596)|0)|0) + ($j$12109<<1)|0) + 1088|0);
       HEAP8[$533>>0] = $532;
       $534 = HEAP32[$hi>>2]|0;
       $535 = $534&255;
       $536 = (((($426) + (($i$3122*1596)|0)|0) + ($j$12109<<1)|0) + 1089|0);
       HEAP8[$536>>0] = $535;
       $537 = (($j$12109) + 1)|0;
       $538 = HEAP32[$487>>2]|0;
       $539 = ($537|0)<($538|0);
       if ($539) {
        $j$12109 = $537;
       } else {
        $$lcssa108 = $538;
        break;
       }
      }
     } else {
      $$lcssa108 = $521;
     }
    } while(0);
    $540 = ($$lcssa108|0)>($longest_floorlist$0121|0);
    $$longest_floorlist$0 = $540 ? $$lcssa108 : $longest_floorlist$0121;
    $541 = (($i$3122) + 1)|0;
    $542 = HEAP32[$385>>2]|0;
    $543 = ($541|0)<($542|0);
    if ($543) {
     $i$3122 = $541;$longest_floorlist$0121 = $$longest_floorlist$0;
    } else {
     label = 175;
     break;
    }
   }
   if ((label|0) == 148) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 150) {
    $397 = HEAP32[$388>>2]|0;
    $398 = (_get_bits($f,8)|0);
    $399 = $398&255;
    $400 = (($397) + (($i$3122*1596)|0)|0);
    HEAP8[$400>>0] = $399;
    $401 = (_get_bits($f,16)|0);
    $402 = $401&65535;
    $403 = ((($397) + (($i$3122*1596)|0)|0) + 2|0);
    HEAP16[$403>>1] = $402;
    $404 = (_get_bits($f,16)|0);
    $405 = $404&65535;
    $406 = ((($397) + (($i$3122*1596)|0)|0) + 4|0);
    HEAP16[$406>>1] = $405;
    $407 = (_get_bits($f,6)|0);
    $408 = $407&255;
    $409 = ((($397) + (($i$3122*1596)|0)|0) + 6|0);
    HEAP8[$409>>0] = $408;
    $410 = (_get_bits($f,8)|0);
    $411 = $410&255;
    $412 = ((($397) + (($i$3122*1596)|0)|0) + 7|0);
    HEAP8[$412>>0] = $411;
    $413 = (_get_bits($f,4)|0);
    $414 = (($413) + 1)|0;
    $415 = $414&255;
    $416 = ((($397) + (($i$3122*1596)|0)|0) + 8|0);
    HEAP8[$416>>0] = $415;
    $417 = $414 & 255;
    $418 = ($417|0)==(0);
    if (!($418)) {
     $j$617 = 0;
     while(1) {
      $419 = (_get_bits($f,8)|0);
      $420 = $419&255;
      $$sum = (($j$617) + 8)|0;
      $421 = (((($397) + (($i$3122*1596)|0)|0) + ($$sum)|0) + 1|0);
      HEAP8[$421>>0] = $420;
      $422 = (($j$617) + 1)|0;
      $423 = HEAP8[$416>>0]|0;
      $424 = $423&255;
      $425 = ($422|0)<($424|0);
      if ($425) {
       $j$617 = $422;
      } else {
       break;
      }
     }
    }
    _error($f,4);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 159) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 162) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 175) {
    $phitmp194 = $$longest_floorlist$0 << 1;
    $longest_floorlist$0$lcssa = $phitmp194;
    break;
   }
  } else {
   $longest_floorlist$0$lcssa = 0;
  }
 } while(0);
 $544 = (_get_bits($f,6)|0);
 $545 = (($544) + 1)|0;
 $546 = (($f) + 280|0);
 HEAP32[$546>>2] = $545;
 $547 = ($545*24)|0;
 $548 = (_setup_malloc($f,$547)|0);
 $549 = (($f) + 412|0);
 HEAP32[$549>>2] = $548;
 $550 = HEAP32[$546>>2]|0;
 $551 = ($550|0)>(0);
 L303: do {
  if ($551) {
   $i$473 = 0;
   L305: while(1) {
    $552 = HEAP32[$549>>2]|0;
    $553 = (_get_bits($f,16)|0);
    $554 = $553&65535;
    $555 = ((($f) + ($i$473<<1)|0) + 284|0);
    HEAP16[$555>>1] = $554;
    $556 = $553 & 65535;
    $557 = ($556>>>0)>(2);
    if ($557) {
     label = 179;
     break;
    }
    $558 = (_get_bits($f,24)|0);
    $559 = (($552) + (($i$473*24)|0)|0);
    HEAP32[$559>>2] = $558;
    $560 = (_get_bits($f,24)|0);
    $561 = ((($552) + (($i$473*24)|0)|0) + 4|0);
    HEAP32[$561>>2] = $560;
    $562 = (_get_bits($f,24)|0);
    $563 = (($562) + 1)|0;
    $564 = ((($552) + (($i$473*24)|0)|0) + 8|0);
    HEAP32[$564>>2] = $563;
    $565 = (_get_bits($f,6)|0);
    $566 = (($565) + 1)|0;
    $567 = $566&255;
    $568 = ((($552) + (($i$473*24)|0)|0) + 12|0);
    HEAP8[$568>>0] = $567;
    $569 = (_get_bits($f,8)|0);
    $570 = $569&255;
    $571 = ((($552) + (($i$473*24)|0)|0) + 13|0);
    HEAP8[$571>>0] = $570;
    $572 = HEAP8[$568>>0]|0;
    $573 = $572&255;
    $574 = ($572<<24>>24)==(0);
    if ($574) {
     $$lcssa = $573;
    } else {
     $j$1351 = 0;
     while(1) {
      $575 = (_get_bits($f,3)|0);
      $576 = (_get_bits($f,1)|0);
      $577 = ($576|0)==(0);
      if ($577) {
       $high_bits$0 = 0;
      } else {
       $578 = (_get_bits($f,5)|0);
       $phitmp = $578 << 3;
       $phitmp8 = $phitmp & 2040;
       $high_bits$0 = $phitmp8;
      }
      $579 = (($high_bits$0) + ($575))|0;
      $580 = $579&255;
      $581 = (($p) + ($j$1351)|0);
      HEAP8[$581>>0] = $580;
      $582 = (($j$1351) + 1)|0;
      $583 = HEAP8[$568>>0]|0;
      $584 = $583&255;
      $585 = ($582|0)<($584|0);
      if ($585) {
       $j$1351 = $582;
      } else {
       $$lcssa = $584;
       break;
      }
     }
    }
    $586 = $$lcssa << 4;
    $587 = (_setup_malloc($f,$586)|0);
    $588 = ((($552) + (($i$473*24)|0)|0) + 20|0);
    HEAP32[$588>>2] = $587;
    $589 = HEAP8[$568>>0]|0;
    $590 = ($589<<24>>24)==(0);
    if (!($590)) {
     $j$1458 = 0;
     while(1) {
      $591 = (($p) + ($j$1458)|0);
      $592 = HEAP8[$591>>0]|0;
      $593 = $592&255;
      $k$357 = 0;
      while(1) {
       $594 = 1 << $k$357;
       $595 = $593 & $594;
       $596 = ($595|0)==(0);
       if ($596) {
        $607 = HEAP32[$588>>2]|0;
        $608 = ((($607) + ($j$1458<<4)|0) + ($k$357<<1)|0);
        HEAP16[$608>>1] = -1;
       } else {
        $597 = (_get_bits($f,8)|0);
        $598 = $597&65535;
        $599 = HEAP32[$588>>2]|0;
        $600 = ((($599) + ($j$1458<<4)|0) + ($k$357<<1)|0);
        HEAP16[$600>>1] = $598;
        $601 = HEAP32[$588>>2]|0;
        $602 = ((($601) + ($j$1458<<4)|0) + ($k$357<<1)|0);
        $603 = HEAP16[$602>>1]|0;
        $604 = $603 << 16 >> 16;
        $605 = HEAP32[$86>>2]|0;
        $606 = ($604|0)<($605|0);
        if (!($606)) {
         label = 188;
         break L305;
        }
       }
       $609 = (($k$357) + 1)|0;
       $610 = ($609|0)<(8);
       if ($610) {
        $k$357 = $609;
       } else {
        break;
       }
      }
      $611 = (($j$1458) + 1)|0;
      $612 = HEAP8[$568>>0]|0;
      $613 = $612&255;
      $614 = ($611|0)<($613|0);
      if ($614) {
       $j$1458 = $611;
      } else {
       break;
      }
     }
    }
    $615 = HEAP8[$571>>0]|0;
    $616 = $615&255;
    $617 = HEAP32[$89>>2]|0;
    $618 = ((($617) + (($616*2096)|0)|0) + 4|0);
    $619 = HEAP32[$618>>2]|0;
    $620 = $619 << 2;
    $621 = (_setup_malloc($f,$620)|0);
    $622 = ((($552) + (($i$473*24)|0)|0) + 16|0);
    HEAP32[$622>>2] = $621;
    $623 = ($621|0)==(0|0);
    if ($623) {
     label = 193;
     break;
    }
    $624 = HEAP8[$571>>0]|0;
    $625 = $624&255;
    $626 = HEAP32[$89>>2]|0;
    $627 = ((($626) + (($625*2096)|0)|0) + 4|0);
    $628 = HEAP32[$627>>2]|0;
    $629 = $628 << 2;
    _memset(($621|0),0,($629|0))|0;
    $630 = HEAP8[$571>>0]|0;
    $631 = $630&255;
    $632 = HEAP32[$89>>2]|0;
    $633 = ((($632) + (($631*2096)|0)|0) + 4|0);
    $634 = HEAP32[$633>>2]|0;
    $635 = ($634|0)>(0);
    if ($635) {
     $637 = $632;$638 = $631;$j$1566 = 0;
     while(1) {
      $636 = (($637) + (($638*2096)|0)|0);
      $639 = HEAP32[$636>>2]|0;
      $640 = (_setup_malloc($f,$639)|0);
      $641 = HEAP32[$622>>2]|0;
      $642 = (($641) + ($j$1566<<2)|0);
      HEAP32[$642>>2] = $640;
      $643 = ($639|0)>(0);
      if ($643) {
       $k$462$in = $639;$temp$061 = $j$1566;
       while(1) {
        $k$462 = (($k$462$in) + -1)|0;
        $644 = HEAP8[$568>>0]|0;
        $645 = $644&255;
        $646 = (($temp$061|0) % ($645|0))&-1;
        $647 = $646&255;
        $648 = HEAP32[$622>>2]|0;
        $649 = (($648) + ($j$1566<<2)|0);
        $650 = HEAP32[$649>>2]|0;
        $651 = (($650) + ($k$462)|0);
        HEAP8[$651>>0] = $647;
        $652 = HEAP8[$568>>0]|0;
        $653 = $652&255;
        $654 = (($temp$061|0) / ($653|0))&-1;
        $655 = ($k$462|0)>(0);
        if ($655) {
         $k$462$in = $k$462;$temp$061 = $654;
        } else {
         break;
        }
       }
      }
      $656 = (($j$1566) + 1)|0;
      $657 = HEAP8[$571>>0]|0;
      $658 = $657&255;
      $659 = HEAP32[$89>>2]|0;
      $660 = ((($659) + (($658*2096)|0)|0) + 4|0);
      $661 = HEAP32[$660>>2]|0;
      $662 = ($656|0)<($661|0);
      if ($662) {
       $637 = $659;$638 = $658;$j$1566 = $656;
      } else {
       break;
      }
     }
    }
    $663 = (($i$473) + 1)|0;
    $664 = HEAP32[$546>>2]|0;
    $665 = ($663|0)<($664|0);
    if ($665) {
     $i$473 = $663;
    } else {
     break L303;
    }
   }
   if ((label|0) == 179) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 188) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 193) {
    _error($f,3);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
  }
 } while(0);
 $666 = (_get_bits($f,6)|0);
 $667 = (($666) + 1)|0;
 $668 = (($f) + 416|0);
 HEAP32[$668>>2] = $667;
 $669 = ($667*40)|0;
 $670 = (_setup_malloc($f,$669)|0);
 $671 = (($f) + 420|0);
 HEAP32[$671>>2] = $670;
 $672 = HEAP32[$668>>2]|0;
 $673 = ($672|0)>(0);
 L343: do {
  if ($673) {
   $i$546 = 0;
   L344: while(1) {
    $674 = HEAP32[$671>>2]|0;
    $675 = (($674) + (($i$546*40)|0)|0);
    $676 = (_get_bits($f,16)|0);
    $677 = ($676|0)==(0);
    if (!($677)) {
     label = 201;
     break;
    }
    $678 = HEAP32[$27>>2]|0;
    $679 = ($678*3)|0;
    $680 = (_setup_malloc($f,$679)|0);
    $681 = ((($674) + (($i$546*40)|0)|0) + 4|0);
    HEAP32[$681>>2] = $680;
    $682 = (_get_bits($f,1)|0);
    $683 = ($682|0)==(0);
    if ($683) {
     $688 = ((($674) + (($i$546*40)|0)|0) + 8|0);
     HEAP8[$688>>0] = 1;
    } else {
     $684 = (_get_bits($f,4)|0);
     $685 = (($684) + 1)|0;
     $686 = $685&255;
     $687 = ((($674) + (($i$546*40)|0)|0) + 8|0);
     HEAP8[$687>>0] = $686;
    }
    $689 = ((($674) + (($i$546*40)|0)|0) + 8|0);
    $690 = (_get_bits($f,1)|0);
    $691 = ($690|0)==(0);
    do {
     if ($691) {
      HEAP16[$675>>1] = 0;
     } else {
      $692 = (_get_bits($f,8)|0);
      $693 = (($692) + 1)|0;
      $694 = $693&65535;
      HEAP16[$675>>1] = $694;
      $695 = $693 & 65535;
      $696 = ($695|0)==(0);
      if ($696) {
       break;
      } else {
       $k$531 = 0;
      }
      while(1) {
       $701 = HEAP32[$27>>2]|0;
       $702 = (($701) + -1)|0;
       $703 = (_ilog($702)|0);
       $704 = (_get_bits($f,$703)|0);
       $705 = $704&255;
       $706 = HEAP32[$681>>2]|0;
       $707 = (($706) + (($k$531*3)|0)|0);
       HEAP8[$707>>0] = $705;
       $708 = HEAP32[$27>>2]|0;
       $709 = (($708) + -1)|0;
       $710 = (_ilog($709)|0);
       $711 = (_get_bits($f,$710)|0);
       $712 = $711&255;
       $713 = HEAP32[$681>>2]|0;
       $714 = ((($713) + (($k$531*3)|0)|0) + 1|0);
       HEAP8[$714>>0] = $712;
       $715 = HEAP32[$681>>2]|0;
       $716 = (($715) + (($k$531*3)|0)|0);
       $717 = HEAP8[$716>>0]|0;
       $718 = $717&255;
       $719 = HEAP32[$27>>2]|0;
       $720 = ($718|0)<($719|0);
       if (!($720)) {
        label = 209;
        break L344;
       }
       $721 = ((($715) + (($k$531*3)|0)|0) + 1|0);
       $722 = HEAP8[$721>>0]|0;
       $723 = $722&255;
       $724 = ($723|0)<($719|0);
       if (!($724)) {
        label = 211;
        break L344;
       }
       $725 = ($717<<24>>24)==($722<<24>>24);
       $700 = (($k$531) + 1)|0;
       if ($725) {
        label = 213;
        break L344;
       }
       $697 = HEAP16[$675>>1]|0;
       $698 = $697&65535;
       $699 = ($700|0)<($698|0);
       if ($699) {
        $k$531 = $700;
       } else {
        break;
       }
      }
     }
    } while(0);
    $726 = (_get_bits($f,2)|0);
    $727 = ($726|0)==(0);
    if (!($727)) {
     label = 216;
     break;
    }
    $728 = HEAP8[$689>>0]|0;
    $729 = ($728&255)>(1);
    $730 = HEAP32[$27>>2]|0;
    $731 = ($730|0)>(0);
    do {
     if ($729) {
      if ($731) {
       $j$1639 = 0;
      } else {
       break;
      }
      while(1) {
       $735 = (_get_bits($f,4)|0);
       $736 = $735&255;
       $737 = HEAP32[$681>>2]|0;
       $738 = ((($737) + (($j$1639*3)|0)|0) + 2|0);
       HEAP8[$738>>0] = $736;
       $739 = HEAP32[$681>>2]|0;
       $740 = ((($739) + (($j$1639*3)|0)|0) + 2|0);
       $741 = HEAP8[$740>>0]|0;
       $742 = HEAP8[$689>>0]|0;
       $743 = ($741&255)<($742&255);
       $734 = (($j$1639) + 1)|0;
       if (!($743)) {
        label = 222;
        break L344;
       }
       $732 = HEAP32[$27>>2]|0;
       $733 = ($734|0)<($732|0);
       if ($733) {
        $j$1639 = $734;
       } else {
        break;
       }
      }
     } else {
      if ($731) {
       $j$1735 = 0;
      } else {
       break;
      }
      while(1) {
       $744 = HEAP32[$681>>2]|0;
       $745 = ((($744) + (($j$1735*3)|0)|0) + 2|0);
       HEAP8[$745>>0] = 0;
       $746 = (($j$1735) + 1)|0;
       $747 = HEAP32[$27>>2]|0;
       $748 = ($746|0)<($747|0);
       if ($748) {
        $j$1735 = $746;
       } else {
        break;
       }
      }
     }
    } while(0);
    $749 = HEAP8[$689>>0]|0;
    $750 = ($749<<24>>24)==(0);
    if (!($750)) {
     $j$1842 = 0;
     while(1) {
      (_get_bits($f,8)|0);
      $755 = (_get_bits($f,8)|0);
      $756 = $755&255;
      $757 = (((($674) + (($i$546*40)|0)|0) + ($j$1842)|0) + 9|0);
      HEAP8[$757>>0] = $756;
      $758 = (_get_bits($f,8)|0);
      $759 = $758&255;
      $760 = (((($674) + (($i$546*40)|0)|0) + ($j$1842)|0) + 24|0);
      HEAP8[$760>>0] = $759;
      $761 = HEAP8[$757>>0]|0;
      $762 = $761&255;
      $763 = HEAP32[$385>>2]|0;
      $764 = ($762|0)<($763|0);
      if (!($764)) {
       label = 227;
       break L344;
      }
      $765 = $758 & 255;
      $766 = HEAP32[$546>>2]|0;
      $767 = ($765|0)<($766|0);
      $754 = (($j$1842) + 1)|0;
      if (!($767)) {
       label = 229;
       break L344;
      }
      $751 = HEAP8[$689>>0]|0;
      $752 = $751&255;
      $753 = ($754|0)<($752|0);
      if ($753) {
       $j$1842 = $754;
      } else {
       break;
      }
     }
    }
    $768 = (($i$546) + 1)|0;
    $769 = HEAP32[$668>>2]|0;
    $770 = ($768|0)<($769|0);
    if ($770) {
     $i$546 = $768;
    } else {
     break L343;
    }
   }
   if ((label|0) == 201) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 209) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 211) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 213) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 216) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 222) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 227) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 229) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
  }
 } while(0);
 $771 = (_get_bits($f,6)|0);
 $772 = (($771) + 1)|0;
 $773 = (($f) + 424|0);
 HEAP32[$773>>2] = $772;
 $774 = ($772|0)>(0);
 L394: do {
  if ($774) {
   $i$627 = 0;
   while(1) {
    $778 = (_get_bits($f,1)|0);
    $779 = $778&255;
    $780 = ((($f) + (($i$627*6)|0)|0) + 428|0);
    HEAP8[$780>>0] = $779;
    $781 = (_get_bits($f,16)|0);
    $782 = $781&65535;
    $783 = ((($f) + (($i$627*6)|0)|0) + 430|0);
    HEAP16[$783>>1] = $782;
    $784 = (_get_bits($f,16)|0);
    $785 = $784&65535;
    $786 = ((($f) + (($i$627*6)|0)|0) + 432|0);
    HEAP16[$786>>1] = $785;
    $787 = (_get_bits($f,8)|0);
    $788 = $787&255;
    $789 = ((($f) + (($i$627*6)|0)|0) + 429|0);
    HEAP8[$789>>0] = $788;
    $790 = HEAP16[$783>>1]|0;
    $791 = ($790<<16>>16)==(0);
    if (!($791)) {
     label = 234;
     break;
    }
    $792 = HEAP16[$786>>1]|0;
    $793 = ($792<<16>>16)==(0);
    if (!($793)) {
     label = 236;
     break;
    }
    $794 = $787 & 255;
    $795 = HEAP32[$668>>2]|0;
    $796 = ($794|0)<($795|0);
    $777 = (($i$627) + 1)|0;
    if (!($796)) {
     label = 238;
     break;
    }
    $775 = HEAP32[$773>>2]|0;
    $776 = ($777|0)<($775|0);
    if ($776) {
     $i$627 = $777;
    } else {
     break L394;
    }
   }
   if ((label|0) == 234) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 236) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 238) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
  }
 } while(0);
 _flush_packet($f);
 $797 = (($f) + 1008|0);
 HEAP32[$797>>2] = 0;
 $798 = HEAP32[$27>>2]|0;
 $799 = ($798|0)>(0);
 if ($799) {
  $i$723 = 0;
  while(1) {
   $800 = HEAP32[$39>>2]|0;
   $801 = $800 << 2;
   $802 = (_setup_malloc($f,$801)|0);
   $803 = ((($f) + ($i$723<<2)|0) + 816|0);
   HEAP32[$803>>2] = $802;
   $804 = HEAP32[$39>>2]|0;
   $805 = $804 << 1;
   $806 = $805 & 2147483646;
   $807 = (_setup_malloc($f,$806)|0);
   $808 = ((($f) + ($i$723<<2)|0) + 944|0);
   HEAP32[$808>>2] = $807;
   $809 = (_setup_malloc($f,$longest_floorlist$0$lcssa)|0);
   $810 = ((($f) + ($i$723<<2)|0) + 1012|0);
   HEAP32[$810>>2] = $809;
   $811 = (($i$723) + 1)|0;
   $812 = HEAP32[$27>>2]|0;
   $813 = ($811|0)<($812|0);
   if ($813) {
    $i$723 = $811;
   } else {
    break;
   }
  }
 }
 $814 = HEAP32[$37>>2]|0;
 $815 = (_init_blocksize($f,0,$814)|0);
 $816 = ($815|0)==(0);
 if ($816) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $817 = HEAP32[$39>>2]|0;
 $818 = (_init_blocksize($f,1,$817)|0);
 $819 = ($818|0)==(0);
 if ($819) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $820 = HEAP32[$37>>2]|0;
 $821 = (($f) + 120|0);
 HEAP32[$821>>2] = $820;
 $822 = HEAP32[$39>>2]|0;
 $823 = (($f) + 124|0);
 HEAP32[$823>>2] = $822;
 $824 = HEAP32[$39>>2]|0;
 $825 = $824 << 1;
 $826 = $825 & 2147483646;
 $827 = HEAP32[$546>>2]|0;
 $828 = ($827|0)>(0);
 if ($828) {
  $829 = HEAP32[$549>>2]|0;
  $830 = HEAP32[$546>>2]|0;
  $i7$018 = 0;$max_part_read$019 = 0;
  while(1) {
   $831 = ((($829) + (($i7$018*24)|0)|0) + 4|0);
   $832 = HEAP32[$831>>2]|0;
   $833 = (($829) + (($i7$018*24)|0)|0);
   $834 = HEAP32[$833>>2]|0;
   $835 = (($832) - ($834))|0;
   $836 = ((($829) + (($i7$018*24)|0)|0) + 8|0);
   $837 = HEAP32[$836>>2]|0;
   $838 = (($835>>>0) / ($837>>>0))&-1;
   $839 = ($838|0)>($max_part_read$019|0);
   $$max_part_read$0 = $839 ? $838 : $max_part_read$019;
   $840 = (($i7$018) + 1)|0;
   $841 = ($840|0)<($830|0);
   if ($841) {
    $i7$018 = $840;$max_part_read$019 = $$max_part_read$0;
   } else {
    break;
   }
  }
  $phitmp192 = $$max_part_read$0 << 2;
  $phitmp193 = (($phitmp192) + 4)|0;
  $max_part_read$0$lcssa = $phitmp193;
 } else {
  $max_part_read$0$lcssa = 4;
 }
 $842 = HEAP32[$27>>2]|0;
 $843 = Math_imul($842, $max_part_read$0$lcssa)|0;
 $844 = (($f) + 12|0);
 $845 = ($826>>>0)>($843>>>0);
 $$14 = $845 ? $826 : $843;
 HEAP32[$844>>2] = $$14;
 $846 = (($f) + 1393|0);
 HEAP8[$846>>0] = 1;
 $847 = (($f) + 96|0);
 $848 = HEAP32[$847>>2]|0;
 $849 = ($848|0)==(0|0);
 do {
  if (!($849)) {
   $850 = (($f) + 108|0);
   $851 = HEAP32[$850>>2]|0;
   $852 = (($f) + 100|0);
   $853 = HEAP32[$852>>2]|0;
   $854 = ($851|0)==($853|0);
   if (!($854)) {
    ___assert_fail((18960|0),(17648|0),3735,(19016|0));
    // unreachable;
   }
   $855 = (($f) + 104|0);
   $856 = HEAP32[$855>>2]|0;
   $857 = (($856) + 1528)|0;
   $858 = HEAP32[$844>>2]|0;
   $859 = (($857) + ($858))|0;
   $860 = ($859>>>0)>($851>>>0);
   if (!($860)) {
    break;
   }
   _error($f,3);
   $$4 = 0;
   STACKTOP = sp;return ($$4|0);
  }
 } while(0);
 $861 = (_stb_vorbis_get_file_offset($f)|0);
 $862 = (($f) + 52|0);
 HEAP32[$862>>2] = $861;
 $$4 = 1;
 STACKTOP = sp;return ($$4|0);
}
function _vorbis_alloc($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_setup_malloc($f,1528)|0);
 STACKTOP = sp;return ($0|0);
}
function _stb_vorbis_get_file_offset($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($f) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $11 = (($f) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_ftell(($12|0))|0);
  $14 = (($f) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) - ($15))|0;
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 } else {
  $6 = (($f) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $4;
  $9 = $7;
  $10 = (($8) - ($9))|0;
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _stb_vorbis_seek_start($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (($f) + 52|0);
  $4 = HEAP32[$3>>2]|0;
  _set_file_offset($f,$4);
  $5 = (($f) + 1008|0);
  HEAP32[$5>>2] = 0;
  $6 = (($f) + 1393|0);
  HEAP8[$6>>0] = 1;
  $7 = (($f) + 1396|0);
  HEAP32[$7>>2] = -1;
  _vorbis_pump_first_frame($f);
  STACKTOP = sp;return;
 } else {
  _error($f,2);
  STACKTOP = sp;return;
 }
}
function _set_file_offset($f,$loc) {
 $f = $f|0;
 $loc = $loc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($f) + 112|0);
 HEAP32[$3>>2] = 0;
 $4 = (($f) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = (($f) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($loc)|0);
  $10 = (($f) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9>>>0)>=($11>>>0);
  $13 = ($loc|0)<(0);
  $or$cond1 = $12 | $13;
  if ($or$cond1) {
   HEAP32[$4>>2] = $11;
   HEAP32[$3>>2] = 1;
   STACKTOP = sp;return;
  } else {
   HEAP32[$4>>2] = $9;
   STACKTOP = sp;return;
  }
 }
 $14 = (($f) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($loc))|0;
 $17 = ($16>>>0)<($loc>>>0);
 $18 = ($loc|0)<(0);
 $or$cond = $17 | $18;
 if ($or$cond) {
  HEAP32[$3>>2] = 1;
  $$0 = 2147483647;
 } else {
  $$0 = $16;
 }
 $19 = (($f) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_fseek(($20|0),($$0|0),0)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  STACKTOP = sp;return;
 }
 HEAP32[$3>>2] = 1;
 $23 = HEAP32[$19>>2]|0;
 $24 = HEAP32[$14>>2]|0;
 (_fseek(($23|0),($24|0),2)|0);
 STACKTOP = sp;return;
}
function _vorbis_pump_first_frame($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $left = 0, $len = 0, $right = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp + 8|0;
 $right = sp;
 $left = sp + 4|0;
 $0 = (_vorbis_decode_packet($f,$len,$left,$right)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[$len>>2]|0;
 $3 = HEAP32[$left>>2]|0;
 $4 = HEAP32[$right>>2]|0;
 (_vorbis_finish_frame($f,$2,$3,$4)|0);
 STACKTOP = sp;return;
}
function _stb_vorbis_stream_length_in_samples($f) {
 $f = $f|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, $header = 0, $last = 0, $last_page_loc$0$lcssa = 0, $last_page_loc$03 = 0, $or$cond = 0, $previous_safe$0 = 0, $previous_safe$1$lcssa = 0, $previous_safe$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $end = sp + 4|0;
 $last = sp;
 $header = sp + 8|0;
 $0 = (($f) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  _error($f,2);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($f) + 812|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_stb_vorbis_get_file_offset($f)|0);
  $7 = (($f) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8>>>0)>(65535);
  if ($9) {
   $10 = (($8) + -65536)|0;
   $11 = (($f) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10>>>0)<($12>>>0);
   if ($13) {
    label = 6;
   } else {
    $previous_safe$0 = $10;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   $14 = (($f) + 52|0);
   $15 = HEAP32[$14>>2]|0;
   $previous_safe$0 = $15;
  }
  _set_file_offset($f,$previous_safe$0);
  $16 = (_vorbis_find_page($f,$end,$last)|0);
  $17 = ($16|0)==(0);
  do {
   if ($17) {
    $18 = (($f) + 116|0);
    HEAP32[$18>>2] = 36;
    HEAP32[$3>>2] = -1;
   } else {
    $19 = (_stb_vorbis_get_file_offset($f)|0);
    $20 = HEAP32[$last>>2]|0;
    $21 = ($20|0)==(0);
    L14: do {
     if ($21) {
      $last_page_loc$03 = $19;$previous_safe$12 = $previous_safe$0;
      while(1) {
       $22 = HEAP32[$end>>2]|0;
       _set_file_offset($f,$22);
       $23 = (_vorbis_find_page($f,$end,$last)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $last_page_loc$0$lcssa = $last_page_loc$03;$previous_safe$1$lcssa = $previous_safe$12;
        break L14;
       }
       $25 = (($last_page_loc$03) + 1)|0;
       $26 = (_stb_vorbis_get_file_offset($f)|0);
       $27 = HEAP32[$last>>2]|0;
       $28 = ($27|0)==(0);
       if ($28) {
        $last_page_loc$03 = $26;$previous_safe$12 = $25;
       } else {
        $last_page_loc$0$lcssa = $26;$previous_safe$1$lcssa = $25;
        break;
       }
      }
     } else {
      $last_page_loc$0$lcssa = $19;$previous_safe$1$lcssa = $previous_safe$0;
     }
    } while(0);
    _set_file_offset($f,$last_page_loc$0$lcssa);
    (_getn($f,$header,6)|0);
    $29 = (_get32($f)|0);
    $30 = (_get32($f)|0);
    $31 = ($29|0)==(-1);
    $32 = ($30|0)==(-1);
    $or$cond = $31 & $32;
    if ($or$cond) {
     $33 = (($f) + 116|0);
     HEAP32[$33>>2] = 36;
     HEAP32[$3>>2] = -1;
     break;
    } else {
     $34 = ($30|0)==(0);
     $$ = $34 ? $29 : -2;
     HEAP32[$3>>2] = $$;
     $35 = (($f) + 76|0);
     HEAP32[$35>>2] = $last_page_loc$0$lcssa;
     $36 = HEAP32[$end>>2]|0;
     $37 = (($f) + 80|0);
     HEAP32[$37>>2] = $36;
     $38 = (($f) + 92|0);
     HEAP32[$38>>2] = $$;
     $39 = (($f) + 88|0);
     HEAP32[$39>>2] = -1;
     $40 = (($f) + 84|0);
     HEAP32[$40>>2] = $previous_safe$1$lcssa;
     break;
    }
   }
  } while(0);
  _set_file_offset($f,$6);
 }
 $41 = HEAP32[$3>>2]|0;
 $42 = ($41|0)==(-1);
 $$1 = $42 ? 0 : $41;
 $$0 = $$1;
 STACKTOP = sp;return ($$0|0);
}
function _vorbis_find_page($f,$end,$last) {
 $f = $f|0;
 $end = $end|0;
 $last = $last|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0;
 var $crc$09 = 0, $crc$111 = 0, $crc$2$lcssa = 0, $crc$218 = 0, $exitcond = 0, $exitcond27 = 0, $exitcond31 = 0, $header = 0, $i$0$lcssa = 0, $i$01 = 0, $i1$14 = 0, $i1$38 = 0, $i1$410 = 0, $i1$517 = 0, $len$012 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $header = sp;
 $0 = (($f) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($f) + 44|0);
 $4 = (($header) + 4|0);
 $5 = (($header) + 22|0);
 $6 = (($header) + 23|0);
 $7 = (($header) + 24|0);
 $8 = (($header) + 25|0);
 $9 = (($header) + 26|0);
 $scevgep = (($header) + 22|0);
 while(1) {
  $10 = (_get8($f)|0);
  $11 = ($10<<24>>24)==(79);
  if ($11) {
   $12 = (_stb_vorbis_get_file_offset($f)|0);
   $13 = (($12) + -25)|0;
   $14 = HEAP32[$3>>2]|0;
   $15 = ($13>>>0)>($14>>>0);
   if ($15) {
    $$0 = 0;
    label = 32;
    break;
   } else {
    $i$01 = 1;
   }
   while(1) {
    $18 = (_get8($f)|0);
    $19 = (17752 + ($i$01)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($18<<24>>24)==($20<<24>>24);
    $17 = (($i$01) + 1)|0;
    if (!($21)) {
     $i$0$lcssa = $i$01;
     break;
    }
    $16 = ($17|0)<(4);
    if ($16) {
     $i$01 = $17;
    } else {
     $i$0$lcssa = $17;
     break;
    }
   }
   $22 = HEAP32[$0>>2]|0;
   $23 = ($22|0)==(0);
   if (!($23)) {
    $$0 = 0;
    label = 32;
    break;
   }
   $24 = ($i$0$lcssa|0)==(4);
   if ($24) {
    $25 = HEAP32[17752>>2]|0;
    HEAP32[$header>>2] = $25;
    $i1$14 = 4;
    while(1) {
     $26 = (_get8($f)|0);
     $27 = (($header) + ($i1$14)|0);
     HEAP8[$27>>0] = $26;
     $28 = (($i1$14) + 1)|0;
     $exitcond = ($28|0)==(27);
     if ($exitcond) {
      break;
     } else {
      $i1$14 = $28;
     }
    }
    $29 = HEAP32[$0>>2]|0;
    $30 = ($29|0)==(0);
    if (!($30)) {
     $$0 = 0;
     label = 32;
     break;
    }
    $31 = HEAP8[$4>>0]|0;
    $32 = ($31<<24>>24)==(0);
    if ($32) {
     $33 = HEAP8[$5>>0]|0;
     $34 = HEAP8[$6>>0]|0;
     $35 = HEAP8[$7>>0]|0;
     $36 = HEAP8[$8>>0]|0;
     $37 = $36&255;
     $38 = $37 << 24;
     HEAP16[$scevgep>>1]=0&65535;HEAP16[$scevgep+2>>1]=0>>>16;
     $39 = $35&255;
     $40 = $34&255;
     $41 = $39 << 16;
     $42 = $40 << 8;
     $43 = $33&255;
     $44 = $42 | $43;
     $45 = $44 | $41;
     $crc$09 = 0;$i1$38 = 0;
     while(1) {
      $46 = (($header) + ($i1$38)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = (_crc32_update($crc$09,$47)|0);
      $49 = (($i1$38) + 1)|0;
      $exitcond27 = ($49|0)==(27);
      if ($exitcond27) {
       break;
      } else {
       $crc$09 = $48;$i1$38 = $49;
      }
     }
     $50 = $45 | $38;
     $51 = HEAP8[$9>>0]|0;
     $52 = ($51<<24>>24)==(0);
     if ($52) {
      $crc$2$lcssa = $48;
     } else {
      $53 = HEAP8[$9>>0]|0;
      $54 = $53&255;
      $crc$111 = $48;$i1$410 = 0;$len$012 = 0;
      while(1) {
       $55 = (_get8($f)|0);
       $56 = $55&255;
       $57 = (_crc32_update($crc$111,$55)|0);
       $58 = (($56) + ($len$012))|0;
       $59 = (($i1$410) + 1)|0;
       $60 = ($59>>>0)<($54>>>0);
       if ($60) {
        $crc$111 = $57;$i1$410 = $59;$len$012 = $58;
       } else {
        break;
       }
      }
      $61 = ($58|0)==(0);
      if ($61) {
       $crc$2$lcssa = $57;
      } else {
       $62 = HEAP32[$0>>2]|0;
       $63 = ($62|0)==(0);
       if (!($63)) {
        $$0 = 0;
        label = 32;
        break;
       }
       $64 = ($58|0)==(0);
       if ($64) {
        $crc$2$lcssa = $57;
       } else {
        $crc$218 = $57;$i1$517 = 0;
        while(1) {
         $65 = (_get8($f)|0);
         $66 = (_crc32_update($crc$218,$65)|0);
         $67 = (($i1$517) + 1)|0;
         $exitcond31 = ($67|0)==($58|0);
         if ($exitcond31) {
          $crc$2$lcssa = $66;
          break;
         } else {
          $crc$218 = $66;$i1$517 = $67;
         }
        }
       }
      }
     }
     $68 = ($crc$2$lcssa|0)==($50|0);
     if ($68) {
      label = 23;
      break;
     }
    }
   }
   _set_file_offset($f,$12);
  }
  $77 = HEAP32[$0>>2]|0;
  $78 = ($77|0)==(0);
  if (!($78)) {
   $$0 = 0;
   label = 32;
   break;
  }
 }
 if ((label|0) == 23) {
  $69 = ($end|0)==(0|0);
  if (!($69)) {
   $70 = (_stb_vorbis_get_file_offset($f)|0);
   HEAP32[$end>>2] = $70;
  }
  $71 = ($last|0)==(0|0);
  do {
   if (!($71)) {
    $72 = (($header) + 5|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73 & 4;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     HEAP32[$last>>2] = 0;
     break;
    } else {
     HEAP32[$last>>2] = 1;
     break;
    }
   }
  } while(0);
  $76 = (($12) + -1)|0;
  _set_file_offset($f,$76);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 32) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _getn($z,$data,$n) {
 $z = $z|0;
 $data = $data|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($z) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $10 = (($z) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_fread(($data|0),($n|0),1,($11|0))|0);
  $13 = ($12|0)==(1);
  if ($13) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = (($z) + 112|0);
  HEAP32[$14>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($1) + ($n)|0);
 $4 = (($z) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)>($5>>>0);
 if ($6) {
  $7 = (($z) + 112|0);
  HEAP32[$7>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  _memcpy(($data|0),($1|0),($n|0))|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + ($n)|0);
  HEAP32[$0>>2] = $9;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _get32($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_get8($f)|0);
 $1 = $0&255;
 $2 = (_get8($f)|0);
 $3 = $2&255;
 $4 = $3 << 8;
 $5 = $4 | $1;
 $6 = (_get8($f)|0);
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $5 | $8;
 $10 = (_get8($f)|0);
 $11 = $10&255;
 $12 = $11 << 24;
 $13 = $9 | $12;
 STACKTOP = sp;return ($13|0);
}
function _stb_vorbis_stream_length_in_seconds($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stb_vorbis_stream_length_in_samples($f)|0);
 $1 = (+($0>>>0));
 $2 = HEAP32[$f>>2]|0;
 $3 = (+($2>>>0));
 $4 = $1 / $3;
 STACKTOP = sp;return (+$4);
}
function _stb_vorbis_get_frame_float($f,$channels,$output) {
 $f = $f|0;
 $channels = $channels|0;
 $output = $output|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $left = 0, $len = 0, $right = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $len = sp + 8|0;
 $right = sp;
 $left = sp + 4|0;
 $0 = (($f) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  _error($f,2);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_vorbis_decode_packet($f,$len,$left,$right)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (($f) + 1524|0);
  HEAP32[$5>>2] = 0;
  $6 = (($f) + 1520|0);
  HEAP32[$6>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$len>>2]|0;
 $8 = HEAP32[$left>>2]|0;
 $9 = HEAP32[$right>>2]|0;
 $10 = (_vorbis_finish_frame($f,$7,$8,$9)|0);
 HEAP32[$len>>2] = $10;
 $11 = (($f) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = HEAP32[$left>>2]|0;
  $i$01 = 0;
  while(1) {
   $15 = ((($f) + ($i$01<<2)|0) + 816|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($14<<2)|0);
   $18 = ((($f) + ($i$01<<2)|0) + 880|0);
   HEAP32[$18>>2] = $17;
   $19 = (($i$01) + 1)|0;
   $20 = HEAP32[$11>>2]|0;
   $21 = ($19|0)<($20|0);
   if ($21) {
    $i$01 = $19;
   } else {
    break;
   }
  }
 }
 $22 = HEAP32[$left>>2]|0;
 $23 = (($f) + 1520|0);
 HEAP32[$23>>2] = $22;
 $24 = HEAP32[$left>>2]|0;
 $25 = HEAP32[$len>>2]|0;
 $26 = (($25) + ($24))|0;
 $27 = (($f) + 1524|0);
 HEAP32[$27>>2] = $26;
 $28 = ($channels|0)==(0|0);
 if (!($28)) {
  $29 = HEAP32[$11>>2]|0;
  HEAP32[$channels>>2] = $29;
 }
 $30 = ($output|0)==(0|0);
 if (!($30)) {
  $31 = (($f) + 880|0);
  HEAP32[$output>>2] = $31;
 }
 $32 = HEAP32[$len>>2]|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _stb_vorbis_open_file_section($file,$close_on_free,$error,$alloc,$length) {
 $file = $file|0;
 $close_on_free = $close_on_free|0;
 $error = $error|0;
 $alloc = $alloc|0;
 $length = $length|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1536|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 _vorbis_init($p,$alloc);
 $0 = (($p) + 20|0);
 HEAP32[$0>>2] = $file;
 $1 = (_ftell(($file|0))|0);
 $2 = (($p) + 24|0);
 HEAP32[$2>>2] = $1;
 $3 = (($p) + 44|0);
 HEAP32[$3>>2] = $length;
 $4 = (($p) + 28|0);
 HEAP32[$4>>2] = $close_on_free;
 $5 = (_start_decoder($p)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = (_vorbis_alloc($p)|0);
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   _memcpy(($7|0),($p|0),1528)|0;
   _vorbis_pump_first_frame($7);
   $$0 = $7;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $9 = ($error|0)==(0|0);
 if (!($9)) {
  $10 = (($p) + 116|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$error>>2] = $11;
 }
 _vorbis_deinit($p);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stb_vorbis_open_file($file,$close_on_free,$error,$alloc) {
 $file = $file|0;
 $close_on_free = $close_on_free|0;
 $error = $error|0;
 $alloc = $alloc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ftell(($file|0))|0);
 (_fseek(($file|0),0,2)|0);
 $1 = (_ftell(($file|0))|0);
 $2 = (($1) - ($0))|0;
 (_fseek(($file|0),($0|0),0)|0);
 $3 = (_stb_vorbis_open_file_section($file,$close_on_free,$error,$alloc,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _stb_vorbis_open_filename($filename,$error,$alloc) {
 $filename = $filename|0;
 $error = $error|0;
 $alloc = $alloc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fopen(($filename|0),(17624|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $3 = ($error|0)==(0|0);
  if ($3) {
   $$0 = 0;
  } else {
   HEAP32[$error>>2] = 6;
   $$0 = 0;
  }
 } else {
  $2 = (_stb_vorbis_open_file($0,1,$error,$alloc)|0);
  $$0 = $2;
 }
 STACKTOP = sp;return ($$0|0);
}
function _convert_channels_short_interleaved($buf_c,$buffer,$data_c,$data,$d_offset,$len) {
 $buf_c = $buf_c|0;
 $buffer = $buffer|0;
 $data_c = $data_c|0;
 $data = $data|0;
 $d_offset = $d_offset|0;
 $len = $len|0;
 var $$017 = 0, $$1$lcssa = 0, $$18 = 0, $$2$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond19 = 0, $exitcond24 = 0;
 var $i$04 = 0, $i$1$lcssa = 0, $i$17 = 0, $j$016 = 0, $or$cond = 0, $or$cond3 = 0, $scevgep = 0, $scevgep20$sum = 0, $scevgep21 = 0, $smax = 0, $v$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($buf_c|0)!=($data_c|0);
 $1 = ($buf_c|0)<(3);
 $or$cond = $0 & $1;
 $2 = ($data_c|0)<(7);
 $or$cond3 = $or$cond & $2;
 if ($or$cond3) {
  $3 = ($buf_c|0)==(2);
  if ($3) {
   $i$04 = 0;
  } else {
   ___assert_fail((17632|0),(17648|0),4817,(17664|0));
   // unreachable;
  }
  while(1) {
   _compute_stereo_samples($buffer,$data_c,$data,$d_offset,$len);
   $4 = (($i$04) + 1)|0;
   $exitcond = ($4|0)==($buf_c|0);
   if ($exitcond) {
    break;
   } else {
    $i$04 = $4;
   }
  }
  STACKTOP = sp;return;
 }
 $5 = ($len|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ($buf_c|0)<($data_c|0);
 $7 = $6 ? $buf_c : $data_c;
 $8 = ($7|0)>(0);
 $9 = $data_c ^ -1;
 $10 = $buf_c ^ -1;
 $11 = ($9|0)>($10|0);
 $smax = $11 ? $9 : $10;
 $12 = $smax ^ -1;
 $$017 = $buffer;$j$016 = 0;
 while(1) {
  if ($8) {
   $13 = (($j$016) + ($d_offset))|0;
   $$18 = $$017;$i$17 = 0;
   while(1) {
    $14 = (($data) + ($i$17<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($15) + ($13<<2)|0);
    $17 = +HEAPF32[$16>>2];
    $18 = $17 + 384.0;
    $19 = (HEAPF32[tempDoublePtr>>2]=$18,HEAP32[tempDoublePtr>>2]|0);
    $20 = (($19) + -1136656384)|0;
    $21 = (($19) + -1136623616)|0;
    $22 = ($21>>>0)>(65535);
    if ($22) {
     $23 = $20 >> 31;
     $24 = $23 & -65535;
     $25 = (($24) + 32767)|0;
     $v$0 = $25;
    } else {
     $v$0 = $20;
    }
    $26 = $v$0&65535;
    $27 = (($$18) + 2|0);
    HEAP16[$$18>>1] = $26;
    $28 = (($i$17) + 1)|0;
    $exitcond19 = ($28|0)==($12|0);
    if ($exitcond19) {
     break;
    } else {
     $$18 = $27;$i$17 = $28;
    }
   }
   $scevgep = (($$017) + ($12<<1)|0);
   $$1$lcssa = $scevgep;$i$1$lcssa = $12;
  } else {
   $$1$lcssa = $$017;$i$1$lcssa = 0;
  }
  $29 = ($i$1$lcssa|0)<($buf_c|0);
  if ($29) {
   $30 = (($buf_c) - ($i$1$lcssa))|0;
   $31 = $30 << 1;
   _memset(($$1$lcssa|0),0,($31|0))|0;
   $scevgep20$sum = (($buf_c) - ($i$1$lcssa))|0;
   $scevgep21 = (($$1$lcssa) + ($scevgep20$sum<<1)|0);
   $$2$lcssa = $scevgep21;
  } else {
   $$2$lcssa = $$1$lcssa;
  }
  $32 = (($j$016) + 1)|0;
  $exitcond24 = ($32|0)==($len|0);
  if ($exitcond24) {
   break;
  } else {
   $$017 = $$2$lcssa;$j$016 = $32;
  }
 }
 STACKTOP = sp;return;
}
function _stb_vorbis_get_samples_short_interleaved($f,$channels,$buffer,$num_shorts) {
 $f = $f|0;
 $channels = $channels|0;
 $buffer = $buffer|0;
 $num_shorts = $num_shorts|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $n$1 = 0, $outputs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $outputs = sp;
 $0 = (($num_shorts|0) / ($channels|0))&-1;
 $1 = (($f) + 4|0);
 $2 = (($f) + 1524|0);
 $3 = (($f) + 1520|0);
 $4 = (($f) + 816|0);
 $$0 = $buffer;$n$0 = 0;
 while(1) {
  $5 = ($n$0|0)<($0|0);
  if (!($5)) {
   $n$1 = $n$0;
   label = 7;
   break;
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$3>>2]|0;
  $8 = (($6) - ($7))|0;
  $9 = (($8) + ($n$0))|0;
  $10 = ($9|0)<($0|0);
  $11 = (($0) - ($n$0))|0;
  $$ = $10 ? $8 : $11;
  $12 = ($$|0)==(0);
  if (!($12)) {
   $13 = HEAP32[$1>>2]|0;
   _convert_channels_short_interleaved($channels,$$0,$13,$4,$7,$$);
  }
  $14 = (($$) + ($n$0))|0;
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) + ($$))|0;
  HEAP32[$3>>2] = $16;
  $17 = ($14|0)==($0|0);
  if ($17) {
   $n$1 = $14;
   label = 7;
   break;
  }
  $18 = Math_imul($$, $channels)|0;
  $19 = (($$0) + ($18<<1)|0);
  $20 = (_stb_vorbis_get_frame_float($f,0,$outputs)|0);
  $21 = ($20|0)==(0);
  if ($21) {
   $n$1 = $14;
   label = 7;
   break;
  } else {
   $$0 = $19;$n$0 = $14;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($n$1|0);
 }
 return 0|0;
}
function _compute_stereo_samples($output,$num_c,$data,$d_offset,$len) {
 $output = $output|0;
 $num_c = $num_c|0;
 $data = $data|0;
 $d_offset = $d_offset|0;
 $len = $len|0;
 var $$n$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0;
 var $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $buffer = 0, $exitcond = 0, $exitcond23 = 0, $exitcond27 = 0, $exitcond28 = 0, $exitcond32 = 0, $i$08 = 0, $i$14 = 0, $i$21 = 0, $i$313 = 0, $indvars$iv$next30 = 0, $indvars$iv29 = 0, $j$011 = 0;
 var $n$015 = 0, $o$016 = 0, $smax = 0, $smax22 = 0, $smax26 = 0, $smax31 = 0, $v$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp;
 $0 = ($len|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = ($num_c|0)>(0);
 $2 = $len ^ -1;
 $indvars$iv29 = -1;$n$015 = 16;$o$016 = 0;
 while(1) {
  $3 = $o$016 << 1;
  dest=$buffer+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $4 = (($o$016) + ($n$015))|0;
  $5 = ($4|0)>($len|0);
  $6 = (($len) - ($o$016))|0;
  $$n$0 = $5 ? $6 : $n$015;
  if ($1) {
   $7 = ($$n$0|0)>(0);
   $8 = (($o$016) + ($d_offset))|0;
   $9 = ($$n$0|0)>(0);
   $10 = (($o$016) + ($d_offset))|0;
   $11 = ($$n$0|0)>(0);
   $12 = (($o$016) + ($d_offset))|0;
   $13 = (($indvars$iv29) - ($n$015))|0;
   $14 = ($13|0)>($2|0);
   $smax = $14 ? $13 : $2;
   $15 = (($indvars$iv29) - ($smax))|0;
   $16 = (($indvars$iv29) - ($n$015))|0;
   $17 = ($16|0)>($2|0);
   $smax22 = $17 ? $16 : $2;
   $18 = (($indvars$iv29) - ($smax22))|0;
   $19 = (($indvars$iv29) - ($n$015))|0;
   $20 = ($19|0)>($2|0);
   $smax26 = $20 ? $19 : $2;
   $21 = (($indvars$iv29) - ($smax26))|0;
   $j$011 = 0;
   while(1) {
    $22 = ((17704 + (($num_c*6)|0)|0) + ($j$011)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = $24 & 6;
    if ((($25|0) == 6)) {
     if ($11) {
      $26 = (($data) + ($j$011<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $i$08 = 0;
      while(1) {
       $32 = (($12) + ($i$08))|0;
       $33 = (($27) + ($32<<2)|0);
       $34 = +HEAPF32[$33>>2];
       $35 = $i$08 << 1;
       $36 = (($buffer) + ($35<<2)|0);
       $37 = +HEAPF32[$36>>2];
       $38 = $34 + $37;
       HEAPF32[$36>>2] = $38;
       $39 = (($27) + ($32<<2)|0);
       $40 = +HEAPF32[$39>>2];
       $41 = $35 | 1;
       $42 = (($buffer) + ($41<<2)|0);
       $43 = +HEAPF32[$42>>2];
       $44 = $40 + $43;
       HEAPF32[$42>>2] = $44;
       $45 = (($i$08) + 1)|0;
       $exitcond27 = ($45|0)==($21|0);
       if ($exitcond27) {
        break;
       } else {
        $i$08 = $45;
       }
      }
     }
    } else if ((($25|0) == 2)) {
     if ($9) {
      $28 = (($data) + ($j$011<<2)|0);
      $29 = HEAP32[$28>>2]|0;
      $i$14 = 0;
      while(1) {
       $46 = (($10) + ($i$14))|0;
       $47 = (($29) + ($46<<2)|0);
       $48 = +HEAPF32[$47>>2];
       $49 = $i$14 << 1;
       $50 = (($buffer) + ($49<<2)|0);
       $51 = +HEAPF32[$50>>2];
       $52 = $48 + $51;
       HEAPF32[$50>>2] = $52;
       $53 = (($i$14) + 1)|0;
       $exitcond23 = ($53|0)==($18|0);
       if ($exitcond23) {
        break;
       } else {
        $i$14 = $53;
       }
      }
     }
    } else if ((($25|0) == 4)) {
     if ($7) {
      $30 = (($data) + ($j$011<<2)|0);
      $31 = HEAP32[$30>>2]|0;
      $i$21 = 0;
      while(1) {
       $54 = (($8) + ($i$21))|0;
       $55 = (($31) + ($54<<2)|0);
       $56 = +HEAPF32[$55>>2];
       $57 = $i$21 << 1;
       $58 = $57 | 1;
       $59 = (($buffer) + ($58<<2)|0);
       $60 = +HEAPF32[$59>>2];
       $61 = $56 + $60;
       HEAPF32[$59>>2] = $61;
       $62 = (($i$21) + 1)|0;
       $exitcond = ($62|0)==($15|0);
       if ($exitcond) {
        break;
       } else {
        $i$21 = $62;
       }
      }
     }
    }
    $63 = (($j$011) + 1)|0;
    $exitcond28 = ($63|0)==($num_c|0);
    if ($exitcond28) {
     break;
    } else {
     $j$011 = $63;
    }
   }
  }
  $64 = $$n$0 << 1;
  $65 = ($64|0)>(0);
  if ($65) {
   $66 = (($indvars$iv29) - ($n$015))|0;
   $67 = ($66|0)>($2|0);
   $smax31 = $67 ? $66 : $2;
   $68 = (($indvars$iv29) - ($smax31))|0;
   $69 = $68 << 1;
   $i$313 = 0;
   while(1) {
    $70 = (($buffer) + ($i$313<<2)|0);
    $71 = +HEAPF32[$70>>2];
    $72 = $71 + 384.0;
    $73 = (HEAPF32[tempDoublePtr>>2]=$72,HEAP32[tempDoublePtr>>2]|0);
    $74 = (($73) + -1136656384)|0;
    $75 = (($73) + -1136623616)|0;
    $76 = ($75>>>0)>(65535);
    if ($76) {
     $77 = $74 >> 31;
     $78 = $77 & -65535;
     $79 = (($78) + 32767)|0;
     $v$0 = $79;
    } else {
     $v$0 = $74;
    }
    $80 = $v$0&65535;
    $81 = (($i$313) + ($3))|0;
    $82 = (($output) + ($81<<1)|0);
    HEAP16[$82>>1] = $80;
    $83 = (($i$313) + 1)|0;
    $exitcond32 = ($83|0)==($69|0);
    if ($exitcond32) {
     break;
    } else {
     $i$313 = $83;
    }
   }
  }
  $84 = (($o$016) + 16)|0;
  $85 = ($84|0)<($len|0);
  $indvars$iv$next30 = (($indvars$iv29) + -16)|0;
  if ($85) {
   $indvars$iv29 = $indvars$iv$next30;$n$015 = $$n$0;$o$016 = $84;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _get8($z) {
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($z) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $9 = (($z) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (_fgetc(($10|0))|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $13 = (($z) + 112|0);
    HEAP32[$13>>2] = 1;
    $$0 = 0;
    break;
   } else {
    $14 = $11&255;
    $$0 = $14;
    break;
   }
  } else {
   $3 = (($z) + 40|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($1>>>0)<($4>>>0);
   if ($5) {
    $7 = (($1) + 1|0);
    HEAP32[$0>>2] = $7;
    $8 = HEAP8[$1>>0]|0;
    $$0 = $8;
    break;
   } else {
    $6 = (($z) + 112|0);
    HEAP32[$6>>2] = 1;
    $$0 = 0;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _crc32_update($crc,$byte) {
 $crc = $crc|0;
 $byte = $byte|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $crc << 8;
 $1 = $byte&255;
 $2 = $crc >>> 24;
 $3 = $1 ^ $2;
 $4 = (17760 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 ^ $0;
 STACKTOP = sp;return ($6|0);
}
function _ilog($n) {
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(16384);
 do {
  if ($0) {
   $1 = ($n|0)<(16);
   if ($1) {
    $2 = (18784 + ($n)|0);
    $3 = HEAP8[$2>>0]|0;
    $4 = $3 << 24 >> 24;
    $$0 = $4;
    break;
   }
   $5 = ($n|0)<(512);
   if ($5) {
    $6 = $n >> 5;
    $7 = (18784 + ($6)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8 << 24 >> 24;
    $10 = (($9) + 5)|0;
    $$0 = $10;
    break;
   } else {
    $11 = $n >> 10;
    $12 = (18784 + ($11)|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = (($14) + 10)|0;
    $$0 = $15;
    break;
   }
  } else {
   $16 = ($n|0)<(16777216);
   if (!($16)) {
    $28 = ($n|0)<(536870912);
    if (!($28)) {
     $$0 = 0;
     break;
    }
    $29 = $n >> 25;
    $30 = (18784 + ($29)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31 << 24 >> 24;
    $33 = (($32) + 25)|0;
    $$0 = $33;
    break;
   }
   $17 = ($n|0)<(524288);
   if ($17) {
    $18 = $n >> 15;
    $19 = (18784 + ($18)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20 << 24 >> 24;
    $22 = (($21) + 15)|0;
    $$0 = $22;
    break;
   } else {
    $23 = $n >> 20;
    $24 = (18784 + ($23)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = (($26) + 20)|0;
    $$0 = $27;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _skip($z,$n) {
 $z = $z|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($z) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $8 = (($z) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_ftell(($9|0))|0);
  $11 = HEAP32[$8>>2]|0;
  $12 = (($10) + ($n))|0;
  (_fseek(($11|0),($12|0),0)|0);
  STACKTOP = sp;return;
 }
 $3 = (($1) + ($n)|0);
 HEAP32[$0>>2] = $3;
 $4 = (($z) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = (($z) + 112|0);
 HEAP32[$7>>2] = 1;
 STACKTOP = sp;return;
}
function _vorbis_decode_initial($f,$p_left_start,$p_left_end,$p_right_start,$p_right_end,$mode) {
 $f = $f|0;
 $p_left_start = $p_left_start|0;
 $p_left_end = $p_left_end|0;
 $p_right_start = $p_right_start|0;
 $p_right_end = $p_right_end|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $next$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp = 0, $prev$0 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 1524|0);
 HEAP32[$0>>2] = 0;
 $1 = (($f) + 1520|0);
 HEAP32[$1>>2] = 0;
 $2 = (($f) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($f) + 48|0);
 while(1) {
  $8 = (_maybe_start_packet($f)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = 0;
   label = 24;
   break;
  }
  $10 = (_get_bits($f,1)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   label = 9;
   break;
  }
  $12 = HEAP8[$5>>0]|0;
  $13 = ($12<<24>>24)==(0);
  if (!($13)) {
   label = 7;
   break;
  }
  while(1) {
   $14 = (_get8_packet($f)|0);
   $15 = ($14|0)==(-1);
   if ($15) {
    break;
   }
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $$0 = 0;
   label = 24;
   break;
  }
 }
 if ((label|0) == 7) {
  _error($f,35);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 9) {
  $16 = (($f) + 96|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $19 = (($f) + 100|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($f) + 108|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if (!($23)) {
    ___assert_fail((18880|0),(17648|0),2796,(18936|0));
    // unreachable;
   }
  }
  $24 = (($f) + 424|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + -1)|0;
  $27 = (_ilog($26)|0);
  $28 = (_get_bits($f,$27)|0);
  $29 = ($28|0)==(-1);
  if ($29) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $30 = HEAP32[$24>>2]|0;
  $31 = ($28|0)<($30|0);
  if (!($31)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$mode>>2] = $28;
  $32 = ((($f) + (($28*6)|0)|0) + 428|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = ($33<<24>>24)==(0);
  if ($34) {
   $39 = (($f) + 128|0);
   $40 = HEAP32[$39>>2]|0;
   $n$0 = $40;$next$0 = 0;$prev$0 = 1;
  } else {
   $35 = (($f) + 132|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_get_bits($f,1)|0);
   $38 = (_get_bits($f,1)|0);
   $phitmp = ($37|0)==(0);
   $n$0 = $36;$next$0 = $38;$prev$0 = $phitmp;
  }
  $41 = $n$0 >> 1;
  $42 = HEAP8[$32>>0]|0;
  $43 = ($42<<24>>24)!=(0);
  $or$cond = $43 & $prev$0;
  if ($or$cond) {
   $44 = (($f) + 128|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($n$0) - ($45))|0;
   $47 = $46 >> 2;
   HEAP32[$p_left_start>>2] = $47;
   $48 = HEAP32[$44>>2]|0;
   $49 = (($48) + ($n$0))|0;
   $50 = $49 >> 2;
   $storemerge = $50;
  } else {
   HEAP32[$p_left_start>>2] = 0;
   $storemerge = $41;
  }
  HEAP32[$p_left_end>>2] = $storemerge;
  $51 = HEAP8[$32>>0]|0;
  $52 = ($51<<24>>24)!=(0);
  $53 = ($next$0|0)==(0);
  $or$cond2 = $52 & $53;
  if ($or$cond2) {
   $54 = ($n$0*3)|0;
   $55 = (($f) + 128|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) - ($56))|0;
   $58 = $57 >> 2;
   HEAP32[$p_right_start>>2] = $58;
   $59 = HEAP32[$55>>2]|0;
   $60 = (($59) + ($54))|0;
   $61 = $60 >> 2;
   $storemerge1 = $61;
  } else {
   HEAP32[$p_right_start>>2] = $41;
   $storemerge1 = $n$0;
  }
  HEAP32[$p_right_end>>2] = $storemerge1;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _flush_packet($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $0 = (_get8_packet_raw($f)|0);
  $1 = ($0|0)==(-1);
  if ($1) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _maybe_start_packet($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 1396|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(-1);
 do {
  if ($2) {
   $3 = (_get8($f)|0);
   $4 = (($f) + 112|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = ($3<<24>>24)==(79);
    if (!($7)) {
     _error($f,30);
     $$0 = 0;
     break;
    }
    $8 = (_get8($f)|0);
    $9 = ($8<<24>>24)==(103);
    if (!($9)) {
     _error($f,30);
     $$0 = 0;
     break;
    }
    $10 = (_get8($f)|0);
    $11 = ($10<<24>>24)==(103);
    if (!($11)) {
     _error($f,30);
     $$0 = 0;
     break;
    }
    $12 = (_get8($f)|0);
    $13 = ($12<<24>>24)==(83);
    if (!($13)) {
     _error($f,30);
     $$0 = 0;
     break;
    }
    $14 = (_start_page_no_capturepattern($f)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$0 = 0;
    } else {
     $16 = (($f) + 1391|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17 & 1;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      label = 14;
     } else {
      $20 = (($f) + 1400|0);
      HEAP32[$20>>2] = 0;
      $21 = (($f) + 1392|0);
      HEAP8[$21>>0] = 0;
      _error($f,32);
      $$0 = 0;
     }
    }
   } else {
    $$0 = 0;
   }
  } else {
   label = 14;
  }
 } while(0);
 if ((label|0) == 14) {
  $22 = (_start_packet($f)|0);
  $$0 = $22;
 }
 STACKTOP = sp;return ($$0|0);
}
function _start_page_no_capturepattern($f) {
 $f = $f|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$in = 0, $i1$02 = 0, $len$0$lcssa = 0, $len$01 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_get8($f)|0);
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  _error($f,31);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_get8($f)|0);
 $3 = (($f) + 1391|0);
 HEAP8[$3>>0] = $2;
 $4 = (_get32($f)|0);
 $5 = (_get32($f)|0);
 (_get32($f)|0);
 $6 = (_get32($f)|0);
 $7 = (($f) + 1128|0);
 HEAP32[$7>>2] = $6;
 (_get32($f)|0);
 $8 = (_get8($f)|0);
 $9 = $8&255;
 $10 = (($f) + 1132|0);
 HEAP32[$10>>2] = $9;
 $11 = (($f) + 1136|0);
 $12 = (_getn($f,$11,$9)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  _error($f,10);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($f) + 1420|0);
 HEAP32[$14>>2] = -2;
 $15 = ($4|0)==(-1);
 $16 = ($5|0)==(-1);
 $or$cond = $15 & $16;
 L9: do {
  if (!($or$cond)) {
   $17 = HEAP32[$10>>2]|0;
   $i$0$in = $17;
   while(1) {
    $i$0 = (($i$0$in) + -1)|0;
    $18 = ($i$0$in|0)>(0);
    if (!($18)) {
     break L9;
    }
    $19 = ((($f) + ($i$0)|0) + 1136|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(-1);
    if ($21) {
     $i$0$in = $i$0;
    } else {
     break;
    }
   }
   HEAP32[$14>>2] = $i$0;
   $22 = (($f) + 1424|0);
   HEAP32[$22>>2] = $4;
  }
 } while(0);
 $23 = (($f) + 1393|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ($24<<24>>24)==(0);
 if (!($25)) {
  $26 = HEAP32[$10>>2]|0;
  $27 = ($26|0)>(0);
  if ($27) {
   $28 = HEAP32[$10>>2]|0;
   $i1$02 = 0;$len$01 = 0;
   while(1) {
    $29 = ((($f) + ($i1$02)|0) + 1136|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = (($31) + ($len$01))|0;
    $33 = (($i1$02) + 1)|0;
    $34 = ($33|0)<($28|0);
    if ($34) {
     $i1$02 = $33;$len$01 = $32;
    } else {
     break;
    }
   }
   $phitmp = (($32) + 27)|0;
   $$lcssa = $28;$len$0$lcssa = $phitmp;
  } else {
   $$lcssa = $26;$len$0$lcssa = 27;
  }
  $35 = (($f) + 52|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($len$0$lcssa) + ($$lcssa))|0;
  $38 = (($37) + ($36))|0;
  $39 = (($f) + 56|0);
  HEAP32[$39>>2] = $36;
  $40 = (($f) + 60|0);
  HEAP32[$40>>2] = $38;
  $41 = (($f) + 64|0);
  HEAP32[$41>>2] = $36;
  $42 = (($f) + 68|0);
  HEAP32[$42>>2] = 0;
  $43 = (($f) + 72|0);
  HEAP32[$43>>2] = $4;
 }
 $44 = (($f) + 1396|0);
 HEAP32[$44>>2] = 0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _start_packet($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 1396|0);
 $1 = (($f) + 1391|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(-1);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (_start_page($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
   label = 7;
   break;
  }
  $6 = HEAP8[$1>>0]|0;
  $7 = $6 & 1;
  $8 = ($7<<24>>24)==(0);
  if (!($8)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  _error($f,32);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 6) {
  $9 = (($f) + 1400|0);
  HEAP32[$9>>2] = 0;
  $10 = (($f) + 1412|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 1416|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 1392|0);
  HEAP8[$12>>0] = 0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _start_page($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_capture_pattern($f)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _error($f,30);
  $$0 = 0;
 } else {
  $2 = (_start_page_no_capturepattern($f)|0);
  $$0 = $2;
 }
 STACKTOP = sp;return ($$0|0);
}
function _capture_pattern($f) {
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_get8($f)|0);
 $1 = ($0<<24>>24)==(79);
 if ($1) {
  $2 = (_get8($f)|0);
  $3 = ($2<<24>>24)==(103);
  if ($3) {
   $4 = (_get8($f)|0);
   $5 = ($4<<24>>24)==(103);
   if ($5) {
    $6 = (_get8($f)|0);
    $7 = ($6<<24>>24)==(83);
    $$ = $7&1;
    $$0 = $$;
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _get8_packet_raw($f) {
 $f = $f|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 1392|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (($f) + 1400|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $6 = (_next_segment($f)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $$pr = HEAP8[$0>>0]|0;
  $8 = ($$pr<<24>>24)==(0);
  if ($8) {
   ___assert_fail((18800|0),(17648|0),1130,(18824|0));
   // unreachable;
  } else {
   $10 = $$pr;
  }
 } else {
  $10 = $1;
 }
 $9 = (($10) + -1)<<24>>24;
 HEAP8[$0>>0] = $9;
 $11 = (($f) + 1416|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$11>>2] = $13;
 $14 = (_get8($f)|0);
 $15 = $14&255;
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function _next_segment($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 1400|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($f) + 1396|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  $6 = (($f) + 1132|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + -1)|0;
  $9 = (($f) + 1404|0);
  HEAP32[$9>>2] = $8;
  $10 = (_start_page($f)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   HEAP32[$0>>2] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $12 = (($f) + 1391|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 & 1;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   _error($f,32);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $16 = HEAP32[$3>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$3>>2] = $17;
 $18 = ((($f) + ($16)|0) + 1136|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($19<<24>>24)==(-1);
 if (!($21)) {
  HEAP32[$0>>2] = 1;
  $22 = HEAP32[$3>>2]|0;
  $23 = (($22) + -1)|0;
  $24 = (($f) + 1404|0);
  HEAP32[$24>>2] = $23;
 }
 $25 = HEAP32[$3>>2]|0;
 $26 = (($f) + 1132|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($25|0)<($27|0);
 if (!($28)) {
  HEAP32[$3>>2] = -1;
 }
 $29 = (($f) + 1392|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  ___assert_fail((18840|0),(17648|0),1116,(18864|0));
  // unreachable;
 }
 HEAP8[$29>>0] = $19;
 $$0 = $20;
 STACKTOP = sp;return ($$0|0);
}
function _get_bits($f,$n) {
 $f = $f|0;
 $n = $n|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 1412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($1|0)<($n|0);
 L4: do {
  if ($3) {
   $4 = ($n|0)>(24);
   if ($4) {
    $5 = (_get_bits($f,24)|0);
    $6 = (($n) + -24)|0;
    $7 = (_get_bits($f,$6)|0);
    $8 = $7 << 24;
    $9 = (($8) + ($5))|0;
    STACKTOP = sp;return ($9|0);
   }
   $10 = ($1|0)==(0);
   if ($10) {
    $11 = (($f) + 1408|0);
    HEAP32[$11>>2] = 0;
   }
   $12 = HEAP32[$0>>2]|0;
   $13 = ($12|0)<($n|0);
   if ($13) {
    $14 = (($f) + 1408|0);
    while(1) {
     $15 = (_get8_packet_raw($f)|0);
     $16 = ($15|0)==(-1);
     if ($16) {
      break;
     }
     $17 = HEAP32[$0>>2]|0;
     $18 = $15 << $17;
     $19 = HEAP32[$14>>2]|0;
     $20 = (($19) + ($18))|0;
     HEAP32[$14>>2] = $20;
     $21 = HEAP32[$0>>2]|0;
     $22 = (($21) + 8)|0;
     HEAP32[$0>>2] = $22;
     $23 = ($22|0)<($n|0);
     if (!($23)) {
      $25 = $22;
      break L4;
     }
    }
    HEAP32[$0>>2] = -1;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $25 = $12;
   }
  } else {
   $$pr = HEAP32[$0>>2]|0;
   $25 = $$pr;
  }
 } while(0);
 $24 = ($25|0)<(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($f) + 1408|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = 1 << $n;
 $29 = (($28) + -1)|0;
 $30 = $27 & $29;
 $31 = $27 >>> $n;
 HEAP32[$26>>2] = $31;
 $32 = HEAP32[$0>>2]|0;
 $33 = (($32) - ($n))|0;
 HEAP32[$0>>2] = $33;
 $$0 = $30;
 STACKTOP = sp;return ($$0|0);
}
function _setup_malloc($f,$sz) {
 $f = $f|0;
 $sz = $sz|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($sz) + 3)|0;
 $1 = $0 & -4;
 $2 = (($f) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 HEAP32[$2>>2] = $4;
 $5 = (($f) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $15 = ($1|0)==(0);
  if ($15) {
   $$0 = 0;
  } else {
   $16 = (_malloc($1)|0);
   $$0 = $16;
  }
 } else {
  $8 = (($f) + 104|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($1))|0;
  $11 = (($f) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)>($12|0);
  if ($13) {
   $$0 = 0;
  } else {
   $14 = (($6) + ($9)|0);
   HEAP32[$8>>2] = $10;
   $$0 = $14;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vorbis_validate($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memcmp($data,19320,6)|0);
 $1 = ($0|0)==(0);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _crc32_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $0 = $i$03 << 24;
  $1 = $i$03 << 25;
  $2 = $0 >> 31;
  $3 = $2 & 79764919;
  $4 = $3 ^ $1;
  $5 = $4 << 1;
  $6 = $1 >> 31;
  $7 = $6 & 79764919;
  $8 = $7 ^ $5;
  $9 = $8 << 1;
  $10 = $5 >> 31;
  $11 = $10 & 79764919;
  $12 = $11 ^ $9;
  $13 = $12 << 1;
  $14 = $9 >> 31;
  $15 = $14 & 79764919;
  $16 = $15 ^ $13;
  $17 = $16 << 1;
  $18 = $13 >> 31;
  $19 = $18 & 79764919;
  $20 = $19 ^ $17;
  $21 = $20 << 1;
  $22 = $17 >> 31;
  $23 = $22 & 79764919;
  $24 = $23 ^ $21;
  $25 = $24 << 1;
  $26 = $21 >> 31;
  $27 = $26 & 79764919;
  $28 = $27 ^ $25;
  $29 = $28 << 1;
  $30 = $25 >> 31;
  $31 = $30 & 79764919;
  $32 = $31 ^ $29;
  $33 = (17760 + ($i$03<<2)|0);
  HEAP32[$33>>2] = $32;
  $34 = (($i$03) + 1)|0;
  $exitcond = ($34|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $i$03 = $34;
  }
 }
 STACKTOP = sp;return;
}
function _setup_temp_malloc($f,$sz) {
 $f = $f|0;
 $sz = $sz|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($sz) + 3)|0;
 $1 = $0 & -4;
 $2 = (($f) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $13 = (_malloc($1)|0);
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($f) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - ($1))|0;
 $8 = (($f) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)<($9|0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$5>>2] = $7;
 $11 = HEAP32[$2>>2]|0;
 $12 = (($11) + ($7)|0);
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _setup_temp_free($f,$p,$sz) {
 $f = $f|0;
 $p = $p|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _free($p);
  STACKTOP = sp;return;
 } else {
  $3 = (($sz) + 3)|0;
  $4 = $3 & -4;
  $5 = (($f) + 108|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($4))|0;
  HEAP32[$5>>2] = $7;
  STACKTOP = sp;return;
 }
}
function _compute_codewords($c,$len,$n,$values) {
 $c = $c|0;
 $len = $len|0;
 $n = $n|0;
 $values = $values|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $available = 0, $i$011 = 0, $i$1 = 0, $i$1$in = 0, $i$1$in$ph = 0, $k$0$lcssa = 0, $k$013 = 0, $m$0$ph = 0, $y$05 = 0, $z$0$lcssa = 0, $z$02 = 0;
 var $z$03 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $available = sp;
 dest=$available+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ($n|0)>(0);
 L1: do {
  if ($0) {
   $k$013 = 0;
   while(1) {
    $3 = (($len) + ($k$013)|0);
    $4 = HEAP8[$3>>0]|0;
    $5 = ($4<<24>>24)==(-1);
    $2 = (($k$013) + 1)|0;
    if (!($5)) {
     $k$0$lcssa = $k$013;
     break L1;
    }
    $1 = ($2|0)<($n|0);
    if ($1) {
     $k$013 = $2;
    } else {
     $k$0$lcssa = $2;
     break;
    }
   }
  } else {
   $k$0$lcssa = 0;
  }
 } while(0);
 $6 = ($k$0$lcssa|0)==($n|0);
 if ($6) {
  $7 = (($c) + 2092|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   STACKTOP = sp;return;
  } else {
   ___assert_fail((19240|0),(17648|0),657,(19264|0));
   // unreachable;
  }
 }
 $10 = (($len) + ($k$0$lcssa)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 _add_entry($c,0,$k$0$lcssa,0,$12,$values);
 $13 = HEAP8[$10>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  $i$1$in$ph = $k$0$lcssa;$m$0$ph = 1;
 } else {
  $15 = HEAP8[$10>>0]|0;
  $16 = $15&255;
  $i$011 = 1;
  while(1) {
   $17 = (32 - ($i$011))|0;
   $18 = 1 << $17;
   $19 = (($available) + ($i$011<<2)|0);
   HEAP32[$19>>2] = $18;
   $20 = (($i$011) + 1)|0;
   $21 = ($i$011|0)<($16|0);
   if ($21) {
    $i$011 = $20;
   } else {
    $i$1$in$ph = $k$0$lcssa;$m$0$ph = 1;
    break;
   }
  }
 }
 L16: while(1) {
  $i$1$in = $i$1$in$ph;
  while(1) {
   $i$1 = (($i$1$in) + 1)|0;
   $22 = ($i$1|0)<($n|0);
   if (!($22)) {
    label = 21;
    break L16;
   }
   $23 = (($len) + ($i$1)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   if ((($24<<24>>24) == 0)) {
    $z$0$lcssa = $25;
    label = 15;
    break;
   } else if ((($24<<24>>24) == -1)) {
    $i$1$in = $i$1;
   } else {
    $z$03 = $25;
    label = 14;
    break;
   }
  }
  L21: do {
   if ((label|0) == 14) {
    while(1) {
     label = 0;
     $28 = (($available) + ($z$03<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(0);
     $27 = (($z$03) + -1)|0;
     if (!($30)) {
      $z$02 = $z$03;
      break L21;
     }
     $26 = ($27|0)>(0);
     if ($26) {
      $z$03 = $27;
      label = 14;
     } else {
      $z$0$lcssa = $27;
      label = 15;
      break;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   $31 = ($z$0$lcssa|0)==(0);
   if ($31) {
    label = 16;
    break;
   } else {
    $z$02 = $z$0$lcssa;
   }
  }
  $32 = (($available) + ($z$02<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$32>>2] = 0;
  $34 = (_bit_reverse($33)|0);
  $35 = (($m$0$ph) + 1)|0;
  $36 = HEAP8[$23>>0]|0;
  $37 = $36&255;
  _add_entry($c,$34,$i$1,$m$0$ph,$37,$values);
  $38 = HEAP8[$23>>0]|0;
  $39 = $38&255;
  $40 = ($39|0)>($z$02|0);
  if ($40) {
   $y$05 = $39;
  } else {
   $i$1$in$ph = $i$1;$m$0$ph = $35;
   continue;
  }
  while(1) {
   $41 = (($available) + ($y$05<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0);
   if (!($43)) {
    label = 19;
    break L16;
   }
   $44 = (32 - ($y$05))|0;
   $45 = 1 << $44;
   $46 = (($45) + ($33))|0;
   HEAP32[$41>>2] = $46;
   $47 = (($y$05) + -1)|0;
   $48 = ($47|0)>($z$02|0);
   if ($48) {
    $y$05 = $47;
   } else {
    $i$1$in$ph = $i$1;$m$0$ph = $35;
    continue L16;
   }
  }
 }
 if ((label|0) == 16) {
  ___assert_fail((19288|0),(17648|0),678,(19264|0));
  // unreachable;
 }
 else if ((label|0) == 19) {
  ___assert_fail((19296|0),(17648|0),685,(19264|0));
  // unreachable;
 }
 else if ((label|0) == 21) {
  STACKTOP = sp;return;
 }
}
function _compute_sorted_huffman($c,$lengths,$values) {
 $c = $c|0;
 $lengths = $lengths|0;
 $values = $values|0;
 var $$ = 0, $$in = 0, $$pn = 0, $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $i$08 = 0, $i$113 = 0, $i$23 = 0, $k$0$lcssa = 0;
 var $k$07 = 0, $k$1 = 0, $n$02 = 0, $x$0$ = 0, $x$0$lcssa = 0, $x$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + 23|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $10 = (($c) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)>(0);
  if ($12) {
   $13 = (($c) + 32|0);
   $14 = (($c) + 2084|0);
   $i$08 = 0;$k$07 = 0;
   while(1) {
    $15 = (($lengths) + ($i$08)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = (_include_in_sort($c,$16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     $k$1 = $k$07;
    } else {
     $19 = HEAP32[$13>>2]|0;
     $20 = (($19) + ($i$08<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (_bit_reverse($21)|0);
     $23 = (($k$07) + 1)|0;
     $24 = HEAP32[$14>>2]|0;
     $25 = (($24) + ($k$07<<2)|0);
     HEAP32[$25>>2] = $22;
     $k$1 = $23;
    }
    $26 = (($i$08) + 1)|0;
    $27 = HEAP32[$10>>2]|0;
    $28 = ($26|0)<($27|0);
    if ($28) {
     $i$08 = $26;$k$07 = $k$1;
    } else {
     $k$0$lcssa = $k$1;
     break;
    }
   }
  } else {
   $k$0$lcssa = 0;
  }
  $29 = (($c) + 2092|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($k$0$lcssa|0)==($30|0);
  if (!($31)) {
   ___assert_fail((19128|0),(17648|0),752,(19152|0));
   // unreachable;
  }
 } else {
  $3 = (($c) + 2092|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>(0);
  if ($5) {
   $6 = (($c) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($c) + 2084|0);
   $9 = HEAP32[$8>>2]|0;
   $i$113 = 0;
   while(1) {
    $32 = (($7) + ($i$113<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (_bit_reverse($33)|0);
    $35 = (($9) + ($i$113<<2)|0);
    HEAP32[$35>>2] = $34;
    $36 = (($i$113) + 1)|0;
    $37 = HEAP32[$3>>2]|0;
    $38 = ($36|0)<($37|0);
    if ($38) {
     $i$113 = $36;
    } else {
     break;
    }
   }
  }
 }
 $39 = (($c) + 2084|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($c) + 2092|0);
 $42 = HEAP32[$41>>2]|0;
 _qsort($40,$42,4,2);
 $43 = HEAP32[$41>>2]|0;
 $44 = HEAP32[$39>>2]|0;
 $45 = (($44) + ($43<<2)|0);
 HEAP32[$45>>2] = -1;
 $46 = HEAP8[$0>>0]|0;
 $47 = ($46<<24>>24)==(0);
 $48 = (($c) + 4|0);
 $$in = $47 ? $48 : $41;
 $49 = HEAP32[$$in>>2]|0;
 $50 = ($49|0)>(0);
 if (!($50)) {
  STACKTOP = sp;return;
 }
 $51 = (($c) + 32|0);
 $52 = (($c) + 2088|0);
 $53 = (($c) + 2088|0);
 $54 = (($c) + 8|0);
 $i$23 = 0;
 L20: while(1) {
  $55 = HEAP8[$0>>0]|0;
  $56 = ($55<<24>>24)==(0);
  if ($56) {
   $$pn = $i$23;
  } else {
   $57 = (($values) + ($i$23<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $$pn = $58;
  }
  $$sink$in = (($lengths) + ($$pn)|0);
  $$sink = HEAP8[$$sink$in>>0]|0;
  $59 = (_include_in_sort($c,$$sink)|0);
  $60 = ($59|0)==(0);
  do {
   if (!($60)) {
    $61 = HEAP32[$51>>2]|0;
    $62 = (($61) + ($i$23<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (_bit_reverse($63)|0);
    $65 = HEAP32[$41>>2]|0;
    $66 = ($65|0)>(1);
    if ($66) {
     $67 = HEAP32[$39>>2]|0;
     $n$02 = $65;$x$01 = 0;
     while(1) {
      $68 = $n$02 >> 1;
      $69 = (($68) + ($x$01))|0;
      $70 = (($67) + ($69<<2)|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71>>>0)>($64>>>0);
      $73 = (($n$02) - ($68))|0;
      $x$0$ = $72 ? $x$01 : $69;
      $$ = $72 ? $68 : $73;
      $74 = ($$|0)>(1);
      if ($74) {
       $n$02 = $$;$x$01 = $x$0$;
      } else {
       $x$0$lcssa = $x$0$;
       break;
      }
     }
    } else {
     $x$0$lcssa = 0;
    }
    $75 = HEAP32[$39>>2]|0;
    $76 = (($75) + ($x$0$lcssa<<2)|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==($64|0);
    if (!($78)) {
     label = 21;
     break L20;
    }
    $79 = HEAP8[$0>>0]|0;
    $80 = ($79<<24>>24)==(0);
    if ($80) {
     $87 = HEAP32[$52>>2]|0;
     $88 = (($87) + ($x$0$lcssa<<2)|0);
     HEAP32[$88>>2] = $i$23;
     break;
    } else {
     $81 = (($values) + ($i$23<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = HEAP32[$53>>2]|0;
     $84 = (($83) + ($x$0$lcssa<<2)|0);
     HEAP32[$84>>2] = $82;
     $85 = HEAP32[$54>>2]|0;
     $86 = (($85) + ($x$0$lcssa)|0);
     HEAP8[$86>>0] = $$sink;
     break;
    }
   }
  } while(0);
  $89 = (($i$23) + 1)|0;
  $90 = ($89|0)<($49|0);
  if ($90) {
   $i$23 = $89;
  } else {
   label = 26;
   break;
  }
 }
 if ((label|0) == 21) {
  ___assert_fail((19176|0),(17648|0),782,(19152|0));
  // unreachable;
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return;
 }
}
function _compute_accelerated_huffman($c) {
 $c = $c|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$12 = 0, $scevgep = 0;
 var $z$0$ph = 0, $z$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $scevgep = (($c) + 36|0);
 _memset(($scevgep|0),-1,2048)|0;
 $0 = (($c) + 23|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = (($c) + 2092|0);
 $4 = (($c) + 4|0);
 $$in = $2 ? $4 : $3;
 $5 = HEAP32[$$in>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($c) + 8|0);
 $8 = (($c) + 32|0);
 $9 = (($c) + 2084|0);
 $10 = ($5|0)<(32767);
 $11 = $10 ? $5 : 32767;
 $i$12 = 0;
 while(1) {
  $12 = HEAP32[$7>>2]|0;
  $13 = (($12) + ($i$12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14&255)<(11);
  if ($15) {
   $16 = HEAP8[$0>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $22 = HEAP32[$8>>2]|0;
    $23 = (($22) + ($i$12<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $z$0$ph = $24;
   } else {
    $18 = HEAP32[$9>>2]|0;
    $19 = (($18) + ($i$12<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_bit_reverse($20)|0);
    $z$0$ph = $21;
   }
   $25 = ($z$0$ph>>>0)<(1024);
   if ($25) {
    $26 = $i$12&65535;
    $z$01 = $z$0$ph;
    while(1) {
     $27 = ((($c) + ($z$01<<1)|0) + 36|0);
     HEAP16[$27>>1] = $26;
     $28 = HEAP32[$7>>2]|0;
     $29 = (($28) + ($i$12)|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $32 = 1 << $31;
     $33 = (($32) + ($z$01))|0;
     $34 = ($33>>>0)<(1024);
     if ($34) {
      $z$01 = $33;
     } else {
      break;
     }
    }
   }
  }
  $35 = (($i$12) + 1)|0;
  $exitcond = ($35|0)==($11|0);
  if ($exitcond) {
   break;
  } else {
   $i$12 = $35;
  }
 }
 STACKTOP = sp;return;
}
function _float32_unpack($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x & 2097151;
 $1 = $x >>> 21;
 $2 = $1 & 1023;
 $3 = ($x|0)<(0);
 $4 = (+($0>>>0));
 if ($3) {
  $5 = -$4;
  $7 = $5;
 } else {
  $7 = $4;
 }
 $6 = $7;
 $8 = $6;
 $9 = (($2) + -788)|0;
 $10 = (+_ldexp($8,$9));
 $11 = $10;
 STACKTOP = sp;return (+$11);
}
function _lookup1_values($entries,$dim) {
 $entries = $entries|0;
 $dim = $dim|0;
 var $$ = 0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($entries|0));
 $1 = $0;
 $2 = (+Math_log((+$1)));
 $3 = $2;
 $4 = (+($dim|0));
 $5 = $3 / $4;
 $6 = $5;
 $7 = (+Math_exp((+$6)));
 $8 = (+Math_floor((+$7)));
 $9 = (~~(($8)));
 $10 = (+($9|0));
 $11 = $10 + 1.0;
 $12 = $11;
 $13 = (+($dim|0));
 $14 = (+Math_pow((+$12),(+$13)));
 $15 = (+Math_floor((+$14)));
 $16 = (~~(($15)));
 $not$ = ($16|0)<=($entries|0);
 $17 = $not$&1;
 $$ = (($17) + ($9))|0;
 $18 = (+($$|0));
 $19 = $18 + 1.0;
 $20 = $19;
 $21 = (+Math_pow((+$20),(+$13)));
 $22 = (+($entries|0));
 $23 = $21 > $22;
 if (!($23)) {
  ___assert_fail((19032|0),(17648|0),807,(19064|0));
  // unreachable;
 }
 $24 = $18;
 $25 = (+Math_pow((+$24),(+$13)));
 $26 = (+Math_floor((+$25)));
 $27 = (~~(($26)));
 $28 = ($27|0)>($entries|0);
 if ($28) {
  ___assert_fail((19080|0),(17648|0),808,(19064|0));
  // unreachable;
 } else {
  STACKTOP = sp;return ($$|0);
 }
 return 0|0;
}
function _point_compare($p,$q) {
 $p = $p|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$p>>1]|0;
 $1 = HEAP16[$q>>1]|0;
 $2 = ($0&65535)<($1&65535);
 if ($2) {
  $5 = -1;
 } else {
  $3 = ($0&65535)>($1&65535);
  $4 = $3&1;
  $5 = $4;
 }
 STACKTOP = sp;return ($5|0);
}
function _neighbors($x,$n,$plow,$phigh) {
 $x = $x|0;
 $n = $n|0;
 $plow = $plow|0;
 $phigh = $phigh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $high$02 = 0, $high$1 = 0, $i$03 = 0, $low$01 = 0, $low$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = (($x) + ($n<<1)|0);
 $2 = (($x) + ($n<<1)|0);
 $high$02 = 65536;$i$03 = 0;$low$01 = -1;
 while(1) {
  $3 = (($x) + ($i$03<<1)|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&65535;
  $6 = ($5|0)>($low$01|0);
  if ($6) {
   $7 = HEAP16[$1>>1]|0;
   $8 = ($4&65535)<($7&65535);
   if ($8) {
    HEAP32[$plow>>2] = $i$03;
    $9 = HEAP16[$3>>1]|0;
    $10 = $9&65535;
    $low$1 = $10;
   } else {
    $low$1 = $low$01;
   }
  } else {
   $low$1 = $low$01;
  }
  $11 = HEAP16[$3>>1]|0;
  $12 = $11&65535;
  $13 = ($12|0)<($high$02|0);
  if ($13) {
   $14 = HEAP16[$2>>1]|0;
   $15 = ($11&65535)>($14&65535);
   if ($15) {
    HEAP32[$phigh>>2] = $i$03;
    $16 = HEAP16[$3>>1]|0;
    $17 = $16&65535;
    $high$1 = $17;
   } else {
    $high$1 = $high$02;
   }
  } else {
   $high$1 = $high$02;
  }
  $18 = (($i$03) + 1)|0;
  $exitcond = ($18|0)==($n|0);
  if ($exitcond) {
   break;
  } else {
   $high$02 = $high$1;$i$03 = $18;$low$01 = $low$1;
  }
 }
 STACKTOP = sp;return;
}
function _init_blocksize($f,$b,$n) {
 $f = $f|0;
 $b = $b|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >>> 1;
 $1 = $n & -4;
 $2 = $n >> 3;
 $3 = $0 << 2;
 $4 = (_setup_malloc($f,$3)|0);
 $5 = ((($f) + ($b<<2)|0) + 1084|0);
 HEAP32[$5>>2] = $4;
 $6 = (_setup_malloc($f,$3)|0);
 $7 = ((($f) + ($b<<2)|0) + 1092|0);
 HEAP32[$7>>2] = $6;
 $8 = (_setup_malloc($f,$1)|0);
 $9 = ((($f) + ($b<<2)|0) + 1100|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$5>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = HEAP32[$7>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = ($8|0)==(0|0);
  $or$cond = $13 | $14;
  if (!($or$cond)) {
   _compute_twiddle_factors($n,$10,$12,$8);
   $15 = (_setup_malloc($f,$3)|0);
   $16 = ((($f) + ($b<<2)|0) + 1108|0);
   HEAP32[$16>>2] = $15;
   $17 = ($15|0)==(0|0);
   if ($17) {
    _error($f,3);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   _compute_window($n,$15);
   $18 = $2 << 1;
   $19 = (_setup_malloc($f,$18)|0);
   $20 = ((($f) + ($b<<2)|0) + 1116|0);
   HEAP32[$20>>2] = $19;
   $21 = ($19|0)==(0|0);
   if ($21) {
    _error($f,3);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    _compute_bitreverse($n,$19);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 _error($f,3);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _compute_twiddle_factors($n,$A,$B,$C) {
 $n = $n|0;
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $exitcond7 = 0, $k$03 = 0, $k$11 = 0, $k2$04 = 0, $k2$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >> 2;
 $1 = $n >> 3;
 $2 = ($0|0)>(0);
 if ($2) {
  $3 = (+($n|0));
  $k$03 = 0;$k2$04 = 0;
  while(1) {
   $6 = $k$03 << 2;
   $7 = (+($6|0));
   $8 = $7 * 3.14159274101257324219;
   $9 = $8 / $3;
   $10 = $9;
   $11 = (+Math_cos((+$10)));
   $12 = $11;
   $13 = (($A) + ($k2$04<<2)|0);
   HEAPF32[$13>>2] = $12;
   $14 = (+Math_sin((+$10)));
   $15 = $14;
   $16 = -$15;
   $17 = $k2$04 | 1;
   $18 = (($A) + ($17<<2)|0);
   HEAPF32[$18>>2] = $16;
   $19 = (+($17|0));
   $20 = $19 * 3.14159274101257324219;
   $21 = $20 / $3;
   $22 = $21 * 0.5;
   $23 = $22;
   $24 = (+Math_cos((+$23)));
   $25 = $24;
   $26 = $25 * 0.5;
   $27 = (($B) + ($k2$04<<2)|0);
   HEAPF32[$27>>2] = $26;
   $28 = (+Math_sin((+$23)));
   $29 = $28;
   $30 = $29 * 0.5;
   $31 = (($B) + ($17<<2)|0);
   HEAPF32[$31>>2] = $30;
   $32 = (($k$03) + 1)|0;
   $33 = (($k2$04) + 2)|0;
   $exitcond7 = ($32|0)==($0|0);
   if ($exitcond7) {
    break;
   } else {
    $k$03 = $32;$k2$04 = $33;
   }
  }
 }
 $4 = ($1|0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (+($n|0));
 $k$11 = 0;$k2$12 = 0;
 while(1) {
  $34 = $k2$12 | 1;
  $35 = $34 << 1;
  $36 = (+($35|0));
  $37 = $36 * 3.14159274101257324219;
  $38 = $37 / $5;
  $39 = $38;
  $40 = (+Math_cos((+$39)));
  $41 = $40;
  $42 = (($C) + ($k2$12<<2)|0);
  HEAPF32[$42>>2] = $41;
  $43 = (+Math_sin((+$39)));
  $44 = $43;
  $45 = -$44;
  $46 = (($C) + ($34<<2)|0);
  HEAPF32[$46>>2] = $45;
  $47 = (($k$11) + 1)|0;
  $48 = (($k2$12) + 2)|0;
  $exitcond = ($47|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $k$11 = $47;$k2$12 = $48;
  }
 }
 STACKTOP = sp;return;
}
function _compute_window($n,$window) {
 $n = $n|0;
 $window = $window|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $n >> 1;
 $1 = ($0|0)>(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (+($0|0));
 $i$01 = 0;
 while(1) {
  $3 = (+($i$01|0));
  $4 = $3 + 0.5;
  $5 = $4 / $2;
  $6 = $5 * 0.5;
  $7 = $6 * 3.14159274101257324219;
  $8 = (+Math_sin((+$7)));
  $9 = $8;
  $10 = (+_square($9));
  $11 = $10;
  $12 = $11 * 1.57079637050628662109;
  $13 = (+Math_sin((+$12)));
  $14 = $13;
  $15 = (($window) + ($i$01<<2)|0);
  HEAPF32[$15>>2] = $14;
  $16 = (($i$01) + 1)|0;
  $exitcond = ($16|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $16;
  }
 }
 STACKTOP = sp;return;
}
function _compute_bitreverse($n,$rev) {
 $n = $n|0;
 $rev = $rev|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >> 3;
 $1 = ($0|0)>(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (_ilog($n)|0);
 $3 = (36 - ($2))|0;
 $i$01 = 0;
 while(1) {
  $4 = (_bit_reverse($i$01)|0);
  $5 = $4 >>> $3;
  $6 = $5 << 2;
  $7 = $6&65535;
  $8 = (($rev) + ($i$01<<1)|0);
  HEAP16[$8>>1] = $7;
  $9 = (($i$01) + 1)|0;
  $exitcond = ($9|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $9;
  }
 }
 STACKTOP = sp;return;
}
function _bit_reverse($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >>> 1;
 $1 = $0 & 1431655765;
 $2 = $n << 1;
 $3 = $2 & -1431655766;
 $4 = $1 | $3;
 $5 = $4 >>> 2;
 $6 = $5 & 858993459;
 $7 = $4 << 2;
 $8 = $7 & -858993460;
 $9 = $6 | $8;
 $10 = $9 >>> 4;
 $11 = $10 & 252645135;
 $12 = $9 << 4;
 $13 = $12 & -252645136;
 $14 = $11 | $13;
 $15 = $14 >>> 8;
 $16 = $15 & 16711935;
 $17 = $14 << 8;
 $18 = $17 & -16711936;
 $19 = $16 | $18;
 $20 = $19 >>> 16;
 $21 = $19 << 16;
 $22 = $20 | $21;
 STACKTOP = sp;return ($22|0);
}
function _square($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 STACKTOP = sp;return (+$0);
}
function _include_in_sort($c,$len) {
 $c = $c|0;
 $len = $len|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + 23|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = ($len<<24>>24)==(-1);
 if ($2) {
  if ($3) {
   $$0 = 0;
  } else {
   $4 = ($len&255)>(10);
   $$ = $4&1;
   $$0 = $$;
  }
 } else {
  if ($3) {
   ___assert_fail((19208|0),(17648|0),732,(19224|0));
   // unreachable;
  } else {
   $$0 = 1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _uint32_compare($p,$q) {
 $p = $p|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = HEAP32[$q>>2]|0;
 $2 = ($0>>>0)<($1>>>0);
 if ($2) {
  $5 = -1;
 } else {
  $3 = ($0>>>0)>($1>>>0);
  $4 = $3&1;
  $5 = $4;
 }
 STACKTOP = sp;return ($5|0);
}
function _add_entry($c,$huff_code,$symbol,$count,$len,$values) {
 $c = $c|0;
 $huff_code = $huff_code|0;
 $symbol = $symbol|0;
 $count = $count|0;
 $len = $len|0;
 $values = $values|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + 23|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = (($c) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $5 = (($4) + ($symbol<<2)|0);
  HEAP32[$5>>2] = $huff_code;
  STACKTOP = sp;return;
 } else {
  $6 = (($4) + ($count<<2)|0);
  HEAP32[$6>>2] = $huff_code;
  $7 = $len&255;
  $8 = (($c) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($count)|0);
  HEAP8[$10>>0] = $7;
  $11 = (($values) + ($count<<2)|0);
  HEAP32[$11>>2] = $symbol;
  STACKTOP = sp;return;
 }
}
function _get_window($f,$len) {
 $f = $f|0;
 $len = $len|0;
 var $$0 = 0, $$0$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $len << 1;
 $1 = (($f) + 128|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)==($2|0);
 if ($3) {
  $4 = (($f) + 1108|0);
  $$0$in = $4;
  $$0 = HEAP32[$$0$in>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($f) + 132|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 if (!($7)) {
  ___assert_fail((19288|0),(17648|0),2735,(19328|0));
  // unreachable;
 }
 $8 = (($f) + 1112|0);
 $$0$in = $8;
 $$0 = HEAP32[$$0$in>>2]|0;
 STACKTOP = sp;return ($$0|0);
}
function _vorbis_decode_packet_rest($f,$len,$m,$left_start,$right_start,$right_end,$p_left) {
 $f = $f|0;
 $len = $len|0;
 $m = $m|0;
 $left_start = $left_start|0;
 $right_start = $right_start|0;
 $right_end = $right_end|0;
 $p_left = $p_left|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $a2$0 = 0.0, $ch$0$lcssa = 0, $ch$016 = 0, $ch$1 = 0, $cval$0 = 0, $cval$2$ph = 0, $cval$231 = 0, $do_not_decode = 0, $exitcond = 0, $i$052 = 0, $i$125 = 0, $i$222 = 0, $i$313 = 0, $i$313$in = 0, $i$47 = 0, $i$55 = 0, $j$038 = 0, $j$144 = 0, $j$248 = 0, $j$317 = 0;
 var $j$49 = 0, $k$033 = 0, $m2$0 = 0.0, $offset$037 = 0, $offset$1$lcssa = 0, $offset$132 = 0, $offset$2 = 0, $really_zero_channel = 0, $residue_buffers = 0, $room$0 = 0, $smax = 0, $step2_flag = 0, $storemerge = 0, $temp$0 = 0, $temp$1 = 0, $zero_channel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $zero_channel = sp + 1088|0;
 $really_zero_channel = sp;
 $step2_flag = sp + 2368|0;
 $residue_buffers = sp + 1024|0;
 $do_not_decode = sp + 2112|0;
 $0 = HEAP8[$m>>0]|0;
 $1 = $0&255;
 $2 = ((($f) + ($1<<2)|0) + 120|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($m) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (($f) + 420|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($6*40)|0)|0);
 $10 = $3 >> 1;
 $11 = (0 - ($10))|0;
 $12 = (($f) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 L1: do {
  if ($14) {
   $15 = ((($8) + (($6*40)|0)|0) + 4|0);
   $16 = (($f) + 276|0);
   $17 = (($f) + 1412|0);
   $18 = (($step2_flag) + 1|0);
   $19 = (($f) + 140|0);
   $20 = (($f) + 1412|0);
   $21 = (($f) + 1408|0);
   $22 = (($f) + 140|0);
   $23 = (($f) + 1412|0);
   $24 = (($f) + 1408|0);
   $i$052 = 0;
   while(1) {
    $25 = HEAP32[$15>>2]|0;
    $26 = ((($25) + (($i$052*3)|0)|0) + 2|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = (($zero_channel) + ($i$052<<2)|0);
    HEAP32[$29>>2] = 0;
    $30 = (((($8) + (($6*40)|0)|0) + ($28)|0) + 9|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = ((($f) + ($32<<1)|0) + 148|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = ($34<<16>>16)==(0);
    if ($35) {
     break;
    }
    $36 = HEAP32[$16>>2]|0;
    $37 = (_get_bits($f,1)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     label = 47;
    } else {
     $39 = ((($36) + (($32*1596)|0)|0) + 1588|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     $42 = (($41) + -1)|0;
     $43 = (19344 + ($42<<2)|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ((($f) + ($i$052<<2)|0) + 1012|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (_ilog($44)|0);
     $48 = (($47) + -1)|0;
     $49 = (_get_bits($f,$48)|0);
     $50 = $49&65535;
     HEAP16[$46>>1] = $50;
     $51 = (_get_bits($f,$48)|0);
     $52 = $51&65535;
     $53 = (($46) + 2|0);
     HEAP16[$53>>1] = $52;
     $54 = (($36) + (($32*1596)|0)|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = ($55<<24>>24)==(0);
     if (!($56)) {
      $j$038 = 0;$offset$037 = 2;
      while(1) {
       $57 = (((($36) + (($32*1596)|0)|0) + ($j$038)|0) + 1|0);
       $58 = HEAP8[$57>>0]|0;
       $59 = $58&255;
       $60 = (((($36) + (($32*1596)|0)|0) + ($59)|0) + 33|0);
       $61 = HEAP8[$60>>0]|0;
       $62 = $61&255;
       $63 = (((($36) + (($32*1596)|0)|0) + ($59)|0) + 49|0);
       $64 = HEAP8[$63>>0]|0;
       $65 = $64&255;
       $66 = 1 << $65;
       $67 = (($66) + -1)|0;
       $68 = ($64<<24>>24)==(0);
       if ($68) {
        $cval$2$ph = 0;
       } else {
        $69 = HEAP32[$19>>2]|0;
        $70 = (((($36) + (($32*1596)|0)|0) + ($59)|0) + 65|0);
        $71 = HEAP8[$70>>0]|0;
        $72 = $71&255;
        $73 = (($69) + (($72*2096)|0)|0);
        $74 = HEAP32[$20>>2]|0;
        $75 = ($74|0)<(10);
        if ($75) {
         _prep_huffman($f);
        }
        $76 = HEAP32[$21>>2]|0;
        $77 = $76 & 1023;
        $78 = (((($69) + (($72*2096)|0)|0) + ($77<<1)|0) + 36|0);
        $79 = HEAP16[$78>>1]|0;
        $80 = $79 << 16 >> 16;
        $81 = ($79<<16>>16)>(-1);
        if ($81) {
         $82 = ((($69) + (($72*2096)|0)|0) + 8|0);
         $83 = HEAP32[$82>>2]|0;
         $84 = (($83) + ($80)|0);
         $85 = HEAP8[$84>>0]|0;
         $86 = $85&255;
         $87 = $76 >>> $86;
         HEAP32[$21>>2] = $87;
         $88 = HEAP32[$20>>2]|0;
         $89 = (($88) - ($86))|0;
         $90 = ($89|0)<(0);
         $$ = $90 ? 0 : $89;
         HEAP32[$20>>2] = $$;
         $$1 = $90 ? -1 : $80;
         $cval$0 = $$1;
        } else {
         $91 = (_codebook_decode_scalar_raw($f,$73)|0);
         $cval$0 = $91;
        }
        $92 = ((($69) + (($72*2096)|0)|0) + 23|0);
        $93 = HEAP8[$92>>0]|0;
        $94 = ($93<<24>>24)==(0);
        if ($94) {
         $cval$2$ph = $cval$0;
        } else {
         $95 = ((($69) + (($72*2096)|0)|0) + 2088|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = (($96) + ($cval$0<<2)|0);
         $98 = HEAP32[$97>>2]|0;
         $cval$2$ph = $98;
        }
       }
       $99 = ($61<<24>>24)==(0);
       if ($99) {
        $offset$1$lcssa = $offset$037;
       } else {
        $100 = $61&255;
        $101 = ($100>>>0)>(1);
        $smax = $101 ? $100 : 1;
        $cval$231 = $cval$2$ph;$k$033 = 0;$offset$132 = $offset$037;
        while(1) {
         $102 = $cval$231 & $67;
         $103 = ((((($36) + (($32*1596)|0)|0) + ($59<<4)|0) + ($102<<1)|0) + 82|0);
         $104 = HEAP16[$103>>1]|0;
         $105 = $cval$231 >> $65;
         $106 = ($104<<16>>16)>(-1);
         if ($106) {
          $107 = $104 << 16 >> 16;
          $108 = HEAP32[$22>>2]|0;
          $109 = (($108) + (($107*2096)|0)|0);
          $110 = HEAP32[$23>>2]|0;
          $111 = ($110|0)<(10);
          if ($111) {
           _prep_huffman($f);
          }
          $112 = HEAP32[$24>>2]|0;
          $113 = $112 & 1023;
          $114 = (((($108) + (($107*2096)|0)|0) + ($113<<1)|0) + 36|0);
          $115 = HEAP16[$114>>1]|0;
          $116 = $115 << 16 >> 16;
          $117 = ($115<<16>>16)>(-1);
          if ($117) {
           $118 = ((($108) + (($107*2096)|0)|0) + 8|0);
           $119 = HEAP32[$118>>2]|0;
           $120 = (($119) + ($116)|0);
           $121 = HEAP8[$120>>0]|0;
           $122 = $121&255;
           $123 = $112 >>> $122;
           HEAP32[$24>>2] = $123;
           $124 = HEAP32[$23>>2]|0;
           $125 = (($124) - ($122))|0;
           $126 = ($125|0)<(0);
           $$2 = $126 ? 0 : $125;
           HEAP32[$23>>2] = $$2;
           $$3 = $126 ? -1 : $116;
           $temp$0 = $$3;
          } else {
           $127 = (_codebook_decode_scalar_raw($f,$109)|0);
           $temp$0 = $127;
          }
          $128 = ((($108) + (($107*2096)|0)|0) + 23|0);
          $129 = HEAP8[$128>>0]|0;
          $130 = ($129<<24>>24)==(0);
          if ($130) {
           $temp$1 = $temp$0;
          } else {
           $131 = ((($108) + (($107*2096)|0)|0) + 2088|0);
           $132 = HEAP32[$131>>2]|0;
           $133 = (($132) + ($temp$0<<2)|0);
           $134 = HEAP32[$133>>2]|0;
           $temp$1 = $134;
          }
          $135 = $temp$1&65535;
          $136 = (($46) + ($offset$132<<1)|0);
          HEAP16[$136>>1] = $135;
         } else {
          $137 = (($46) + ($offset$132<<1)|0);
          HEAP16[$137>>1] = 0;
         }
         $offset$2 = (($offset$132) + 1)|0;
         $138 = (($k$033) + 1)|0;
         $139 = ($138|0)<($62|0);
         if ($139) {
          $cval$231 = $105;$k$033 = $138;$offset$132 = $offset$2;
         } else {
          break;
         }
        }
        $140 = (($offset$037) + ($smax))|0;
        $offset$1$lcssa = $140;
       }
       $141 = (($j$038) + 1)|0;
       $142 = HEAP8[$54>>0]|0;
       $143 = $142&255;
       $144 = ($141|0)<($143|0);
       if ($144) {
        $j$038 = $141;$offset$037 = $offset$1$lcssa;
       } else {
        break;
       }
      }
     }
     $145 = HEAP32[$17>>2]|0;
     $146 = ($145|0)==(-1);
     if ($146) {
      label = 47;
     } else {
      HEAP8[$18>>0] = 1;
      HEAP8[$step2_flag>>0] = 1;
      $147 = ((($36) + (($32*1596)|0)|0) + 1592|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)>(2);
      if ($149) {
       $j$144 = 2;
       while(1) {
        $150 = (((($36) + (($32*1596)|0)|0) + ($j$144<<1)|0) + 1088|0);
        $151 = HEAP8[$150>>0]|0;
        $152 = $151&255;
        $153 = (((($36) + (($32*1596)|0)|0) + ($j$144<<1)|0) + 1089|0);
        $154 = HEAP8[$153>>0]|0;
        $155 = $154&255;
        $156 = (((($36) + (($32*1596)|0)|0) + ($j$144<<1)|0) + 338|0);
        $157 = HEAP16[$156>>1]|0;
        $158 = $157&65535;
        $159 = (((($36) + (($32*1596)|0)|0) + ($152<<1)|0) + 338|0);
        $160 = HEAP16[$159>>1]|0;
        $161 = $160&65535;
        $162 = (((($36) + (($32*1596)|0)|0) + ($155<<1)|0) + 338|0);
        $163 = HEAP16[$162>>1]|0;
        $164 = $163&65535;
        $165 = (($46) + ($152<<1)|0);
        $166 = HEAP16[$165>>1]|0;
        $167 = $166 << 16 >> 16;
        $168 = (($46) + ($155<<1)|0);
        $169 = HEAP16[$168>>1]|0;
        $170 = $169 << 16 >> 16;
        $171 = (_predict_point($158,$161,$164,$167,$170)|0);
        $172 = (($46) + ($j$144<<1)|0);
        $173 = HEAP16[$172>>1]|0;
        $174 = $173 << 16 >> 16;
        $175 = (($44) - ($171))|0;
        $176 = ($173<<16>>16)==(0);
        do {
         if ($176) {
          $195 = (($step2_flag) + ($j$144)|0);
          HEAP8[$195>>0] = 0;
          $196 = $171&65535;
          HEAP16[$172>>1] = $196;
         } else {
          $177 = ($175|0)<($171|0);
          $$4 = $177 ? $175 : $171;
          $room$0 = $$4 << 1;
          $178 = (($step2_flag) + ($155)|0);
          HEAP8[$178>>0] = 1;
          $179 = (($step2_flag) + ($152)|0);
          HEAP8[$179>>0] = 1;
          $180 = (($step2_flag) + ($j$144)|0);
          HEAP8[$180>>0] = 1;
          $181 = ($174|0)<($room$0|0);
          if ($181) {
           $186 = $174 & 1;
           $187 = ($186|0)==(0);
           if ($187) {
            $192 = $174 >>> 1;
            $193 = (($192) + ($171))|0;
            $194 = $193&65535;
            HEAP16[$172>>1] = $194;
            break;
           } else {
            $188 = (($174) + 1)|0;
            $189 = $188 >>> 1;
            $190 = (($171) - ($189))|0;
            $191 = $190&65535;
            HEAP16[$172>>1] = $191;
            break;
           }
          } else {
           $182 = ($175|0)>($171|0);
           if ($182) {
            HEAP16[$172>>1] = $173;
            break;
           } else {
            $183 = (($44) + 65535)|0;
            $184 = (($183) - ($174))|0;
            $185 = $184&65535;
            HEAP16[$172>>1] = $185;
            break;
           }
          }
         }
        } while(0);
        $197 = (($j$144) + 1)|0;
        $198 = HEAP32[$147>>2]|0;
        $199 = ($197|0)<($198|0);
        if ($199) {
         $j$144 = $197;
        } else {
         $201 = $198;
         break;
        }
       }
      } else {
       $201 = $148;
      }
      $200 = ($201|0)>(0);
      if ($200) {
       $202 = HEAP32[$147>>2]|0;
       $j$248 = 0;
       while(1) {
        $203 = (($step2_flag) + ($j$248)|0);
        $204 = HEAP8[$203>>0]|0;
        $205 = ($204<<24>>24)==(0);
        if ($205) {
         $206 = (($46) + ($j$248<<1)|0);
         HEAP16[$206>>1] = -1;
        }
        $207 = (($j$248) + 1)|0;
        $208 = ($207|0)<($202|0);
        if ($208) {
         $j$248 = $207;
        } else {
         break;
        }
       }
      }
     }
    }
    if ((label|0) == 47) {
     label = 0;
     HEAP32[$29>>2] = 1;
    }
    $209 = (($i$052) + 1)|0;
    $210 = HEAP32[$12>>2]|0;
    $211 = ($209|0)<($210|0);
    if ($211) {
     $i$052 = $209;
    } else {
     break L1;
    }
   }
   _error($f,21);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $212 = (($f) + 96|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = ($213|0)==(0|0);
 if (!($214)) {
  $215 = (($f) + 100|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = (($f) + 108|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = ($216|0)==($218|0);
  if (!($219)) {
   ___assert_fail((18880|0),(17648|0),2943,(19360|0));
   // unreachable;
  }
 }
 $220 = HEAP32[$12>>2]|0;
 $221 = $220 << 2;
 _memcpy(($really_zero_channel|0),($zero_channel|0),($221|0))|0;
 $222 = HEAP16[$9>>1]|0;
 $223 = ($222<<16>>16)==(0);
 if (!($223)) {
  $224 = ((($8) + (($6*40)|0)|0) + 4|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = HEAP16[$9>>1]|0;
  $227 = $226&65535;
  $i$125 = 0;
  while(1) {
   $232 = (($225) + (($i$125*3)|0)|0);
   $233 = HEAP8[$232>>0]|0;
   $234 = $233&255;
   $235 = (($zero_channel) + ($234<<2)|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = ($236|0)==(0);
   if ($237) {
    label = 58;
   } else {
    $238 = ((($225) + (($i$125*3)|0)|0) + 1|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = (($zero_channel) + ($240<<2)|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = ($242|0)==(0);
    if ($243) {
     label = 58;
    }
   }
   if ((label|0) == 58) {
    label = 0;
    $244 = HEAP32[$224>>2]|0;
    $245 = ((($244) + (($i$125*3)|0)|0) + 1|0);
    $246 = HEAP8[$245>>0]|0;
    $247 = $246&255;
    $248 = (($zero_channel) + ($247<<2)|0);
    HEAP32[$248>>2] = 0;
    $249 = HEAP32[$224>>2]|0;
    $250 = (($249) + (($i$125*3)|0)|0);
    $251 = HEAP8[$250>>0]|0;
    $252 = $251&255;
    $253 = (($zero_channel) + ($252<<2)|0);
    HEAP32[$253>>2] = 0;
   }
   $254 = (($i$125) + 1)|0;
   $255 = ($254|0)<($227|0);
   if ($255) {
    $i$125 = $254;
   } else {
    break;
   }
  }
 }
 $228 = ((($8) + (($6*40)|0)|0) + 8|0);
 $229 = HEAP8[$228>>0]|0;
 $230 = ($229<<24>>24)==(0);
 if (!($230)) {
  $231 = ((($8) + (($6*40)|0)|0) + 4|0);
  $i$222 = 0;
  while(1) {
   $256 = HEAP32[$12>>2]|0;
   $257 = ($256|0)>(0);
   if ($257) {
    $258 = HEAP32[$231>>2]|0;
    $259 = HEAP32[$12>>2]|0;
    $ch$016 = 0;$j$317 = 0;
    while(1) {
     $260 = ((($258) + (($j$317*3)|0)|0) + 2|0);
     $261 = HEAP8[$260>>0]|0;
     $262 = $261&255;
     $263 = ($262|0)==($i$222|0);
     if ($263) {
      $264 = (($zero_channel) + ($j$317<<2)|0);
      $265 = HEAP32[$264>>2]|0;
      $266 = ($265|0)==(0);
      $267 = (($do_not_decode) + ($ch$016)|0);
      if ($266) {
       HEAP8[$267>>0] = 0;
       $269 = ((($f) + ($j$317<<2)|0) + 816|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = (($residue_buffers) + ($ch$016<<2)|0);
       HEAP32[$271>>2] = $270;
      } else {
       HEAP8[$267>>0] = 1;
       $268 = (($residue_buffers) + ($ch$016<<2)|0);
       HEAP32[$268>>2] = 0;
      }
      $272 = (($ch$016) + 1)|0;
      $ch$1 = $272;
     } else {
      $ch$1 = $ch$016;
     }
     $273 = (($j$317) + 1)|0;
     $274 = ($273|0)<($259|0);
     if ($274) {
      $ch$016 = $ch$1;$j$317 = $273;
     } else {
      $ch$0$lcssa = $ch$1;
      break;
     }
    }
   } else {
    $ch$0$lcssa = 0;
   }
   $275 = (((($8) + (($6*40)|0)|0) + ($i$222)|0) + 24|0);
   $276 = HEAP8[$275>>0]|0;
   $277 = $276&255;
   _decode_residue($f,$residue_buffers,$ch$0$lcssa,$10,$277,$do_not_decode);
   $278 = (($i$222) + 1)|0;
   $279 = HEAP8[$228>>0]|0;
   $280 = $279&255;
   $281 = ($278|0)<($280|0);
   if ($281) {
    $i$222 = $278;
   } else {
    break;
   }
  }
 }
 $282 = HEAP32[$212>>2]|0;
 $283 = ($282|0)==(0|0);
 if (!($283)) {
  $284 = (($f) + 100|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = (($f) + 108|0);
  $287 = HEAP32[$286>>2]|0;
  $288 = ($285|0)==($287|0);
  if (!($288)) {
   ___assert_fail((18880|0),(17648|0),2975,(19360|0));
   // unreachable;
  }
 }
 $289 = HEAP16[$9>>1]|0;
 $290 = ($289<<16>>16)==(0);
 if (!($290)) {
  $291 = $289&65535;
  $292 = ((($8) + (($6*40)|0)|0) + 4|0);
  $293 = ($10|0)>(0);
  $i$313$in = $291;
  while(1) {
   $i$313 = (($i$313$in) + -1)|0;
   $298 = HEAP32[$292>>2]|0;
   $299 = (($298) + (($i$313*3)|0)|0);
   $300 = HEAP8[$299>>0]|0;
   $301 = $300&255;
   $302 = ((($f) + ($301<<2)|0) + 816|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = ((($298) + (($i$313*3)|0)|0) + 1|0);
   $305 = HEAP8[$304>>0]|0;
   $306 = $305&255;
   $307 = ((($f) + ($306<<2)|0) + 816|0);
   $308 = HEAP32[$307>>2]|0;
   if ($293) {
    $j$49 = 0;
    while(1) {
     $309 = (($303) + ($j$49<<2)|0);
     $310 = +HEAPF32[$309>>2];
     $311 = $310 > 0.0;
     $312 = (($308) + ($j$49<<2)|0);
     $313 = +HEAPF32[$312>>2];
     $314 = $313 > 0.0;
     do {
      if ($311) {
       if ($314) {
        $315 = $310 - $313;
        $a2$0 = $315;$m2$0 = $310;
        break;
       } else {
        $316 = $310 + $313;
        $a2$0 = $310;$m2$0 = $316;
        break;
       }
      } else {
       if ($314) {
        $317 = $310 + $313;
        $a2$0 = $317;$m2$0 = $310;
        break;
       } else {
        $318 = $310 - $313;
        $a2$0 = $310;$m2$0 = $318;
        break;
       }
      }
     } while(0);
     HEAPF32[$309>>2] = $m2$0;
     HEAPF32[$312>>2] = $a2$0;
     $319 = (($j$49) + 1)|0;
     $exitcond = ($319|0)==($10|0);
     if ($exitcond) {
      break;
     } else {
      $j$49 = $319;
     }
    }
   }
   $294 = ($i$313|0)>(0);
   if ($294) {
    $i$313$in = $i$313;
   } else {
    break;
   }
  }
 }
 $295 = HEAP32[$12>>2]|0;
 $296 = ($295|0)>(0);
 if ($296) {
  $297 = $10 << 2;
  $i$47 = 0;
  while(1) {
   $322 = (($really_zero_channel) + ($i$47<<2)|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = ($323|0)==(0);
   $325 = ((($f) + ($i$47<<2)|0) + 816|0);
   $326 = HEAP32[$325>>2]|0;
   if ($324) {
    $327 = ((($f) + ($i$47<<2)|0) + 1012|0);
    $328 = HEAP32[$327>>2]|0;
    _do_floor($f,$9,$i$47,$3,$326,$328);
   } else {
    _memset(($326|0),0,($297|0))|0;
   }
   $329 = (($i$47) + 1)|0;
   $321 = HEAP32[$12>>2]|0;
   $330 = ($329|0)<($321|0);
   if ($330) {
    $i$47 = $329;
   } else {
    break;
   }
  }
  $320 = ($321|0)>(0);
  if ($320) {
   $i$55 = 0;
   while(1) {
    $331 = ((($f) + ($i$55<<2)|0) + 816|0);
    $332 = HEAP32[$331>>2]|0;
    $333 = HEAP8[$m>>0]|0;
    $334 = $333&255;
    _inverse_mdct($332,$3,$f,$334);
    $335 = (($i$55) + 1)|0;
    $336 = HEAP32[$12>>2]|0;
    $337 = ($335|0)<($336|0);
    if ($337) {
     $i$55 = $335;
    } else {
     break;
    }
   }
  }
 }
 _flush_packet($f);
 $338 = (($f) + 1393|0);
 $339 = HEAP8[$338>>0]|0;
 $340 = ($339<<24>>24)==(0);
 if ($340) {
  $345 = (($f) + 1428|0);
  $346 = HEAP32[$345>>2]|0;
  $347 = ($346|0)==(0);
  if ($347) {
   $$01 = $left_start;
  } else {
   $348 = (($346) + ($left_start))|0;
   HEAP32[$p_left>>2] = $348;
   HEAP32[$345>>2] = 0;
   $$01 = $348;
  }
 } else {
  $341 = (($f) + 1076|0);
  HEAP32[$341>>2] = $11;
  $342 = (($3) - ($right_end))|0;
  $343 = (($f) + 1428|0);
  HEAP32[$343>>2] = $342;
  $344 = (($f) + 1080|0);
  HEAP32[$344>>2] = 1;
  HEAP8[$338>>0] = 0;
  $$01 = $left_start;
 }
 $349 = (($f) + 1404|0);
 $350 = HEAP32[$349>>2]|0;
 $351 = (($f) + 1420|0);
 $352 = HEAP32[$351>>2]|0;
 $353 = ($350|0)==($352|0);
 if ($353) {
  $354 = (($f) + 1080|0);
  $355 = HEAP32[$354>>2]|0;
  $356 = ($355|0)==(0);
  if (!($356)) {
   $357 = (($f) + 1391|0);
   $358 = HEAP8[$357>>0]|0;
   $359 = $358 & 4;
   $360 = ($359<<24>>24)==(0);
   if (!($360)) {
    $361 = (($f) + 1424|0);
    $362 = HEAP32[$361>>2]|0;
    $363 = (($right_end) - ($3))|0;
    $364 = (($362) + ($363))|0;
    $365 = (($f) + 1076|0);
    $366 = HEAP32[$365>>2]|0;
    $367 = (($366) + ($right_end))|0;
    $368 = ($364>>>0)<($367>>>0);
    if ($368) {
     $369 = ($364>>>0)<($366>>>0);
     $370 = (($364) - ($366))|0;
     $storemerge = $369 ? 0 : $370;
     $371 = (($storemerge) + ($$01))|0;
     HEAP32[$len>>2] = $371;
     $372 = HEAP32[$365>>2]|0;
     $373 = (($372) + ($371))|0;
     HEAP32[$365>>2] = $373;
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
  $374 = (($f) + 1424|0);
  $375 = HEAP32[$374>>2]|0;
  $376 = (($$01) - ($10))|0;
  $377 = (($376) + ($375))|0;
  $378 = (($f) + 1076|0);
  HEAP32[$378>>2] = $377;
  HEAP32[$354>>2] = 1;
 }
 $379 = (($f) + 1080|0);
 $380 = HEAP32[$379>>2]|0;
 $381 = ($380|0)==(0);
 if (!($381)) {
  $382 = (($right_start) - ($$01))|0;
  $383 = (($f) + 1076|0);
  $384 = HEAP32[$383>>2]|0;
  $385 = (($382) + ($384))|0;
  HEAP32[$383>>2] = $385;
 }
 $386 = HEAP32[$212>>2]|0;
 $387 = ($386|0)==(0|0);
 if (!($387)) {
  $388 = (($f) + 100|0);
  $389 = HEAP32[$388>>2]|0;
  $390 = (($f) + 108|0);
  $391 = HEAP32[$390>>2]|0;
  $392 = ($389|0)==($391|0);
  if (!($392)) {
   ___assert_fail((18880|0),(17648|0),3084,(19360|0));
   // unreachable;
  }
 }
 HEAP32[$len>>2] = $right_end;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _prep_huffman($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 1412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(25);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = ($1|0)==(0);
 if ($3) {
  $4 = (($f) + 1408|0);
  HEAP32[$4>>2] = 0;
 }
 $5 = (($f) + 1392|0);
 $6 = (($f) + 1400|0);
 $7 = (($f) + 1408|0);
 while(1) {
  $8 = HEAP32[$6>>2]|0;
  $9 = ($8|0)==(0);
  if (!($9)) {
   $10 = HEAP8[$5>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    label = 9;
    break;
   }
  }
  $12 = (_get8_packet_raw($f)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   label = 9;
   break;
  }
  $14 = HEAP32[$0>>2]|0;
  $15 = $12 << $14;
  $16 = HEAP32[$7>>2]|0;
  $17 = (($16) + ($15))|0;
  HEAP32[$7>>2] = $17;
  $18 = HEAP32[$0>>2]|0;
  $19 = (($18) + 8)|0;
  HEAP32[$0>>2] = $19;
  $20 = ($19|0)<(25);
  if (!($20)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
}
function _codebook_decode_scalar_raw($f,$c) {
 $f = $f|0;
 $c = $c|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $9 = 0, $i$05 = 0, $n$07 = 0, $x$0$ = 0, $x$0$lcssa = 0, $x$06 = 0, $x$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _prep_huffman($f);
 $0 = (($c) + 2084|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (($c) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   ___assert_fail((20584|0),(17648|0),1211,(20624|0));
   // unreachable;
  }
 }
 $6 = (($c) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(8);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   label = 7;
  }
 } else {
  $11 = (($c) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($f) + 1408|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_bit_reverse($15)|0);
  $17 = (($c) + 2092|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)>(1);
  if ($19) {
   $20 = HEAP32[$0>>2]|0;
   $n$07 = $18;$x$06 = 0;
   while(1) {
    $21 = $n$07 >> 1;
    $22 = (($21) + ($x$06))|0;
    $23 = (($20) + ($22<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24>>>0)>($16>>>0);
    $26 = (($n$07) - ($21))|0;
    $x$0$ = $25 ? $x$06 : $22;
    $$ = $25 ? $21 : $26;
    $27 = ($$|0)>(1);
    if ($27) {
     $n$07 = $$;$x$06 = $x$0$;
    } else {
     $x$0$lcssa = $x$0$;
     break;
    }
   }
  } else {
   $x$0$lcssa = 0;
  }
  $28 = (($c) + 23|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $31 = (($c) + 2088|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($x$0$lcssa<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $x$1 = $34;
  } else {
   $x$1 = $x$0$lcssa;
  }
  $35 = (($c) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($x$1)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (($f) + 1412|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)<($39|0);
  if ($42) {
   HEAP32[$40>>2] = 0;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $43 = HEAP32[$14>>2]|0;
   $44 = $43 >>> $39;
   HEAP32[$14>>2] = $44;
   $45 = HEAP32[$40>>2]|0;
   $46 = (($45) - ($39))|0;
   HEAP32[$40>>2] = $46;
   $$0 = $x$1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $47 = (($c) + 23|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = ($48<<24>>24)==(0);
 if (!($49)) {
  ___assert_fail((20656|0),(17648|0),1244,(20624|0));
  // unreachable;
 }
 $50 = HEAP32[$6>>2]|0;
 $51 = ($50|0)>(0);
 L27: do {
  if ($51) {
   $52 = (($c) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($c) + 32|0);
   $55 = (($f) + 1408|0);
   $i$05 = 0;
   while(1) {
    $56 = (($53) + ($i$05)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = ($57<<24>>24)==(-1);
    if (!($59)) {
     $60 = HEAP32[$54>>2]|0;
     $61 = (($60) + ($i$05<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = HEAP32[$55>>2]|0;
     $64 = 1 << $58;
     $65 = (($64) + -1)|0;
     $66 = $63 & $65;
     $67 = ($62|0)==($66|0);
     if ($67) {
      break;
     }
    }
    $78 = (($i$05) + 1)|0;
    $79 = HEAP32[$6>>2]|0;
    $80 = ($78|0)<($79|0);
    if ($80) {
     $i$05 = $78;
    } else {
     break L27;
    }
   }
   $68 = (($f) + 1412|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)<($58|0);
   if ($70) {
    HEAP32[$68>>2] = 0;
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $71 = $63 >>> $58;
    HEAP32[$55>>2] = $71;
    $72 = HEAP32[$52>>2]|0;
    $73 = (($72) + ($i$05)|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = HEAP32[$68>>2]|0;
    $77 = (($76) - ($75))|0;
    HEAP32[$68>>2] = $77;
    $$0 = $i$05;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 _error($f,21);
 $81 = (($f) + 1412|0);
 HEAP32[$81>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _predict_point($x,$x0,$x1,$y0,$y1) {
 $x = $x|0;
 $x0 = $x0|0;
 $x1 = $x1|0;
 $y0 = $y0|0;
 $y1 = $y1|0;
 var $$p = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ispos = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($y1) - ($y0))|0;
 $1 = (($x1) - ($x0))|0;
 $ispos = ($0|0)>(-1);
 $neg = (0 - ($0))|0;
 $2 = $ispos ? $0 : $neg;
 $3 = (($x) - ($x0))|0;
 $4 = Math_imul($2, $3)|0;
 $5 = (($4|0) / ($1|0))&-1;
 $6 = ($0|0)<(0);
 $7 = (0 - ($5))|0;
 $$p = $6 ? $7 : $5;
 $8 = (($$p) + ($y0))|0;
 STACKTOP = sp;return ($8|0);
}
function _decode_residue($f,$residue_buffers,$ch,$n,$rn,$do_not_decode) {
 $f = $f|0;
 $residue_buffers = $residue_buffers|0;
 $ch = $ch|0;
 $n = $n|0;
 $rn = $rn|0;
 $do_not_decode = $do_not_decode|0;
 var $$ = 0, $$10 = 0, $$12 = 0, $$13 = 0, $$4 = 0, $$6 = 0, $$7 = 0, $$9 = 0, $$not = 0, $$not101 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $c_inter = 0, $c_inter16 = 0, $c_inter6 = 0, $class_set$062 = 0;
 var $class_set$148 = 0, $class_set$276 = 0, $class_set26$030 = 0, $exitcond = 0, $i$091 = 0, $i$156 = 0, $i$242 = 0, $i$370 = 0, $i$427 = 0, $j$0$lcssa = 0, $j$086 = 0, $j$116 = 0, $j$220 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond1168 = 0, $or$cond14 = 0, $or$cond1424 = 0, $or$cond5 = 0, $or$cond554 = 0;
 var $or$cond8 = 0, $or$cond840 = 0, $p_inter = 0, $p_inter17 = 0, $p_inter7 = 0, $pass$081 = 0, $pass$135 = 0, $pcount$063 = 0, $pcount$1$lcssa = 0, $pcount$155 = 0, $pcount$249 = 0, $pcount$3$lcssa = 0, $pcount$341 = 0, $pcount$477 = 0, $pcount$5$lcssa = 0, $pcount$569 = 0, $pcount25$029 = 0, $pcount25$1$lcssa = 0, $pcount25$125 = 0, $q$0 = 0;
 var $q$1 = 0, $q19$0 = 0, $q19$1 = 0, $q9$0 = 0, $q9$1 = 0, $temp$0 = 0, $temp$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c_inter = sp + 20|0;
 $p_inter = sp;
 $c_inter6 = sp + 4|0;
 $p_inter7 = sp + 8|0;
 $c_inter16 = sp + 12|0;
 $p_inter17 = sp + 16|0;
 $0 = (($f) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f) + ($rn<<1)|0) + 284|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($1) + (($rn*24)|0)|0) + 13|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($f) + 140|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($7*2096)|0)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1) + (($rn*24)|0)|0) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($1) + (($rn*24)|0)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) - ($15))|0;
 $17 = ((($1) + (($rn*24)|0)|0) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16>>>0) / ($18>>>0))&-1;
 $20 = (($f) + 108|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($f) + 96|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 $25 = (($f) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $19 << 2;
 $28 = (($27) + 4)|0;
 $29 = Math_imul($26, $28)|0;
 if ($24) {
  $31 = STACKTOP; STACKTOP = STACKTOP + ((((1*$29)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
  $33 = $31;
 } else {
  $30 = (_setup_temp_malloc($f,$29)|0);
  $33 = $30;
 }
 $32 = HEAP32[$25>>2]|0;
 $34 = (_make_block_array($33,$32,$27)|0);
 $35 = ($ch|0)>(0);
 if ($35) {
  $36 = $n << 2;
  $i$091 = 0;
  while(1) {
   $37 = (($do_not_decode) + ($i$091)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = ($38<<24>>24)==(0);
   if ($39) {
    $40 = (($residue_buffers) + ($i$091<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    _memset(($41|0),0,($36|0))|0;
   }
   $42 = (($i$091) + 1)|0;
   $exitcond = ($42|0)==($ch|0);
   if ($exitcond) {
    break;
   } else {
    $i$091 = $42;
   }
  }
 }
 $43 = ($3<<16>>16)!=(2);
 $44 = ($ch|0)==(1);
 $or$cond = $43 | $44;
 if ($or$cond) {
  $46 = ($19|0)>(0);
  $47 = (($f) + 1412|0);
  $48 = (($f) + 1408|0);
  $49 = ((($1) + (($rn*24)|0)|0) + 16|0);
  $50 = ($11|0)>(0);
  $51 = ($ch|0)>(0);
  $52 = ((($1) + (($rn*24)|0)|0) + 20|0);
  $pass$135 = 0;
  L15: while(1) {
   if ($46) {
    $class_set26$030 = 0;$pcount25$029 = 0;
    while(1) {
     $$not = ($pass$135|0)!=(0);
     $$not101 = ($ch|0)<(1);
     $brmerge = $$not | $$not101;
     if (!($brmerge)) {
      $j$116 = 0;
      while(1) {
       $288 = (($do_not_decode) + ($j$116)|0);
       $289 = HEAP8[$288>>0]|0;
       $290 = ($289<<24>>24)==(0);
       if ($290) {
        $291 = HEAP32[$8>>2]|0;
        $292 = HEAP8[$5>>0]|0;
        $293 = $292&255;
        $294 = (($291) + (($293*2096)|0)|0);
        $295 = HEAP32[$47>>2]|0;
        $296 = ($295|0)<(10);
        if ($296) {
         _prep_huffman($f);
        }
        $297 = HEAP32[$48>>2]|0;
        $298 = $297 & 1023;
        $299 = (((($291) + (($293*2096)|0)|0) + ($298<<1)|0) + 36|0);
        $300 = HEAP16[$299>>1]|0;
        $301 = $300 << 16 >> 16;
        $302 = ($300<<16>>16)>(-1);
        if ($302) {
         $303 = ((($291) + (($293*2096)|0)|0) + 8|0);
         $304 = HEAP32[$303>>2]|0;
         $305 = (($304) + ($301)|0);
         $306 = HEAP8[$305>>0]|0;
         $307 = $306&255;
         $308 = $297 >>> $307;
         HEAP32[$48>>2] = $308;
         $309 = HEAP32[$47>>2]|0;
         $310 = (($309) - ($307))|0;
         $311 = ($310|0)<(0);
         $$12 = $311 ? 0 : $310;
         HEAP32[$47>>2] = $$12;
         $$13 = $311 ? -1 : $301;
         $temp$0 = $$13;
        } else {
         $312 = (_codebook_decode_scalar_raw($f,$294)|0);
         $temp$0 = $312;
        }
        $313 = ((($291) + (($293*2096)|0)|0) + 23|0);
        $314 = HEAP8[$313>>0]|0;
        $315 = ($314<<24>>24)==(0);
        if ($315) {
         $temp$1 = $temp$0;
        } else {
         $316 = ((($291) + (($293*2096)|0)|0) + 2088|0);
         $317 = HEAP32[$316>>2]|0;
         $318 = (($317) + ($temp$0<<2)|0);
         $319 = HEAP32[$318>>2]|0;
         $temp$1 = $319;
        }
        $320 = ($temp$1|0)==(-1);
        if ($320) {
         label = 94;
         break L15;
        }
        $321 = HEAP32[$49>>2]|0;
        $322 = (($321) + ($temp$1<<2)|0);
        $323 = HEAP32[$322>>2]|0;
        $324 = (($34) + ($j$116<<2)|0);
        $325 = HEAP32[$324>>2]|0;
        $326 = (($325) + ($class_set26$030<<2)|0);
        HEAP32[$326>>2] = $323;
       }
       $327 = (($j$116) + 1)|0;
       $328 = ($327|0)<($ch|0);
       if ($328) {
        $j$116 = $327;
       } else {
        break;
       }
      }
     }
     $329 = ($pcount25$029|0)<($19|0);
     $or$cond1424 = $50 & $329;
     if ($or$cond1424) {
      $i$427 = 0;$pcount25$125 = $pcount25$029;
      while(1) {
       if ($51) {
        $j$220 = 0;
        while(1) {
         $330 = (($do_not_decode) + ($j$220)|0);
         $331 = HEAP8[$330>>0]|0;
         $332 = ($331<<24>>24)==(0);
         if ($332) {
          $333 = (($34) + ($j$220<<2)|0);
          $334 = HEAP32[$333>>2]|0;
          $335 = (($334) + ($class_set26$030<<2)|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = (($336) + ($i$427)|0);
          $338 = HEAP8[$337>>0]|0;
          $339 = $338&255;
          $340 = HEAP32[$52>>2]|0;
          $341 = ((($340) + ($339<<4)|0) + ($pass$135<<1)|0);
          $342 = HEAP16[$341>>1]|0;
          $343 = ($342<<16>>16)>(-1);
          if ($343) {
           $344 = $342 << 16 >> 16;
           $345 = (($residue_buffers) + ($j$220<<2)|0);
           $346 = HEAP32[$345>>2]|0;
           $347 = HEAP32[$14>>2]|0;
           $348 = HEAP32[$17>>2]|0;
           $349 = Math_imul($348, $pcount25$125)|0;
           $350 = (($349) + ($347))|0;
           $351 = HEAP32[$8>>2]|0;
           $352 = (($351) + (($344*2096)|0)|0);
           $353 = (_residue_decode($f,$352,$346,$350,$348,$4)|0);
           $354 = ($353|0)==(0);
           if ($354) {
            label = 94;
            break L15;
           }
          }
         }
         $355 = (($j$220) + 1)|0;
         $356 = ($355|0)<($ch|0);
         if ($356) {
          $j$220 = $355;
         } else {
          break;
         }
        }
       }
       $357 = (($i$427) + 1)|0;
       $358 = (($pcount25$125) + 1)|0;
       $359 = ($357|0)<($11|0);
       $360 = ($358|0)<($19|0);
       $or$cond14 = $359 & $360;
       if ($or$cond14) {
        $i$427 = $357;$pcount25$125 = $358;
       } else {
        $pcount25$1$lcssa = $358;
        break;
       }
      }
     } else {
      $pcount25$1$lcssa = $pcount25$029;
     }
     $361 = (($class_set26$030) + 1)|0;
     $362 = ($pcount25$1$lcssa|0)<($19|0);
     if ($362) {
      $class_set26$030 = $361;$pcount25$029 = $pcount25$1$lcssa;
     } else {
      break;
     }
    }
   }
   $363 = (($pass$135) + 1)|0;
   $364 = ($363|0)<(8);
   if ($364) {
    $pass$135 = $363;
   } else {
    label = 94;
    break;
   }
  }
  if ((label|0) == 94) {
   HEAP32[$20>>2] = $21;
   STACKTOP = sp;return;
  }
 }
 $45 = ($ch|0)>(0);
 L56: do {
  if ($45) {
   $j$086 = 0;
   while(1) {
    $55 = (($do_not_decode) + ($j$086)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = ($56<<24>>24)==(0);
    $54 = (($j$086) + 1)|0;
    if ($57) {
     $j$0$lcssa = $j$086;
     break L56;
    }
    $53 = ($54|0)<($ch|0);
    if ($53) {
     $j$086 = $54;
    } else {
     $j$0$lcssa = $54;
     break;
    }
   }
  } else {
   $j$0$lcssa = 0;
  }
 } while(0);
 $58 = ($j$0$lcssa|0)==($ch|0);
 if ($58) {
  HEAP32[$20>>2] = $21;
  STACKTOP = sp;return;
 }
 $59 = ($19|0)>(0);
 $60 = (($f) + 1412|0);
 $61 = (($f) + 1408|0);
 $62 = ((($1) + (($rn*24)|0)|0) + 16|0);
 $63 = ($11|0)>(0);
 $64 = ((($1) + (($rn*24)|0)|0) + 20|0);
 $65 = ($19|0)>(0);
 $66 = (($f) + 1412|0);
 $67 = (($f) + 1408|0);
 $68 = ((($1) + (($rn*24)|0)|0) + 16|0);
 $69 = ($11|0)>(0);
 $70 = ((($1) + (($rn*24)|0)|0) + 20|0);
 $71 = ($19|0)>(0);
 $72 = (($f) + 1412|0);
 $73 = (($f) + 1408|0);
 $74 = ((($1) + (($rn*24)|0)|0) + 16|0);
 $75 = ($11|0)>(0);
 $76 = ((($1) + (($rn*24)|0)|0) + 20|0);
 $pass$081 = 0;
 L64: while(1) {
  if ((($ch|0) == 1)) {
   if ($59) {
    $79 = ($pass$081|0)==(0);
    $class_set$148 = 0;$pcount$249 = 0;
    while(1) {
     $150 = HEAP32[$14>>2]|0;
     $151 = HEAP32[$17>>2]|0;
     $152 = Math_imul($151, $pcount$249)|0;
     $153 = (($152) + ($150))|0;
     HEAP32[$c_inter6>>2] = 0;
     HEAP32[$p_inter7>>2] = $153;
     if ($79) {
      $154 = HEAP32[$8>>2]|0;
      $155 = HEAP8[$5>>0]|0;
      $156 = $155&255;
      $157 = (($154) + (($156*2096)|0)|0);
      $158 = HEAP32[$60>>2]|0;
      $159 = ($158|0)<(10);
      if ($159) {
       _prep_huffman($f);
      }
      $160 = HEAP32[$61>>2]|0;
      $161 = $160 & 1023;
      $162 = (((($154) + (($156*2096)|0)|0) + ($161<<1)|0) + 36|0);
      $163 = HEAP16[$162>>1]|0;
      $164 = $163 << 16 >> 16;
      $165 = ($163<<16>>16)>(-1);
      if ($165) {
       $166 = ((($154) + (($156*2096)|0)|0) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = (($167) + ($164)|0);
       $169 = HEAP8[$168>>0]|0;
       $170 = $169&255;
       $171 = $160 >>> $170;
       HEAP32[$61>>2] = $171;
       $172 = HEAP32[$60>>2]|0;
       $173 = (($172) - ($170))|0;
       $174 = ($173|0)<(0);
       $$6 = $174 ? 0 : $173;
       HEAP32[$60>>2] = $$6;
       $$7 = $174 ? -1 : $164;
       $q9$0 = $$7;
      } else {
       $175 = (_codebook_decode_scalar_raw($f,$157)|0);
       $q9$0 = $175;
      }
      $176 = ((($154) + (($156*2096)|0)|0) + 23|0);
      $177 = HEAP8[$176>>0]|0;
      $178 = ($177<<24>>24)==(0);
      if ($178) {
       $q9$1 = $q9$0;
      } else {
       $179 = ((($154) + (($156*2096)|0)|0) + 2088|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = (($180) + ($q9$0<<2)|0);
       $182 = HEAP32[$181>>2]|0;
       $q9$1 = $182;
      }
      $183 = ($q9$1|0)==(-1);
      if ($183) {
       label = 94;
       break L64;
      }
      $184 = HEAP32[$62>>2]|0;
      $185 = (($184) + ($q9$1<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = HEAP32[$34>>2]|0;
      $188 = (($187) + ($class_set$148<<2)|0);
      HEAP32[$188>>2] = $186;
     }
     $189 = ($pcount$249|0)<($19|0);
     $or$cond840 = $63 & $189;
     if ($or$cond840) {
      $i$242 = 0;$pcount$341 = $pcount$249;
      while(1) {
       $190 = HEAP32[$17>>2]|0;
       $191 = HEAP32[$34>>2]|0;
       $192 = (($191) + ($class_set$148<<2)|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = (($193) + ($i$242)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = HEAP32[$64>>2]|0;
       $198 = ((($197) + ($196<<4)|0) + ($pass$081<<1)|0);
       $199 = HEAP16[$198>>1]|0;
       $200 = ($199<<16>>16)>(-1);
       if ($200) {
        $201 = $199 << 16 >> 16;
        $202 = HEAP32[$8>>2]|0;
        $203 = (($202) + (($201*2096)|0)|0);
        $204 = (_codebook_decode_deinterleave_repeat($f,$203,$residue_buffers,$ch,$c_inter6,$p_inter7,$n,$190)|0);
        $205 = ($204|0)==(0);
        if ($205) {
         label = 94;
         break L64;
        }
       } else {
        $206 = Math_imul($190, $pcount$341)|0;
        $207 = HEAP32[$14>>2]|0;
        $208 = (($206) + ($190))|0;
        $209 = (($208) + ($207))|0;
        HEAP32[$c_inter6>>2] = 0;
        HEAP32[$p_inter7>>2] = $209;
       }
       $210 = (($i$242) + 1)|0;
       $211 = (($pcount$341) + 1)|0;
       $212 = ($210|0)<($11|0);
       $213 = ($211|0)<($19|0);
       $or$cond8 = $212 & $213;
       if ($or$cond8) {
        $i$242 = $210;$pcount$341 = $211;
       } else {
        $pcount$3$lcssa = $211;
        break;
       }
      }
     } else {
      $pcount$3$lcssa = $pcount$249;
     }
     $214 = (($class_set$148) + 1)|0;
     $215 = ($pcount$3$lcssa|0)<($19|0);
     if ($215) {
      $class_set$148 = $214;$pcount$249 = $pcount$3$lcssa;
     } else {
      break;
     }
    }
   }
  } else if ((($ch|0) == 2)) {
   if ($65) {
    $78 = ($pass$081|0)==(0);
    $class_set$062 = 0;$pcount$063 = 0;
    while(1) {
     $80 = HEAP32[$14>>2]|0;
     $81 = HEAP32[$17>>2]|0;
     $82 = Math_imul($81, $pcount$063)|0;
     $83 = (($82) + ($80))|0;
     $84 = $83 & 1;
     HEAP32[$c_inter>>2] = $84;
     $85 = $83 >> 1;
     HEAP32[$p_inter>>2] = $85;
     if ($78) {
      $86 = HEAP32[$8>>2]|0;
      $87 = HEAP8[$5>>0]|0;
      $88 = $87&255;
      $89 = (($86) + (($88*2096)|0)|0);
      $90 = HEAP32[$66>>2]|0;
      $91 = ($90|0)<(10);
      if ($91) {
       _prep_huffman($f);
      }
      $92 = HEAP32[$67>>2]|0;
      $93 = $92 & 1023;
      $94 = (((($86) + (($88*2096)|0)|0) + ($93<<1)|0) + 36|0);
      $95 = HEAP16[$94>>1]|0;
      $96 = $95 << 16 >> 16;
      $97 = ($95<<16>>16)>(-1);
      if ($97) {
       $98 = ((($86) + (($88*2096)|0)|0) + 8|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (($99) + ($96)|0);
       $101 = HEAP8[$100>>0]|0;
       $102 = $101&255;
       $103 = $92 >>> $102;
       HEAP32[$67>>2] = $103;
       $104 = HEAP32[$66>>2]|0;
       $105 = (($104) - ($102))|0;
       $106 = ($105|0)<(0);
       $$ = $106 ? 0 : $105;
       HEAP32[$66>>2] = $$;
       $$4 = $106 ? -1 : $96;
       $q$0 = $$4;
      } else {
       $107 = (_codebook_decode_scalar_raw($f,$89)|0);
       $q$0 = $107;
      }
      $108 = ((($86) + (($88*2096)|0)|0) + 23|0);
      $109 = HEAP8[$108>>0]|0;
      $110 = ($109<<24>>24)==(0);
      if ($110) {
       $q$1 = $q$0;
      } else {
       $111 = ((($86) + (($88*2096)|0)|0) + 2088|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = (($112) + ($q$0<<2)|0);
       $114 = HEAP32[$113>>2]|0;
       $q$1 = $114;
      }
      $115 = ($q$1|0)==(-1);
      if ($115) {
       label = 94;
       break L64;
      }
      $116 = HEAP32[$68>>2]|0;
      $117 = (($116) + ($q$1<<2)|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = HEAP32[$34>>2]|0;
      $120 = (($119) + ($class_set$062<<2)|0);
      HEAP32[$120>>2] = $118;
     }
     $121 = ($pcount$063|0)<($19|0);
     $or$cond554 = $69 & $121;
     if ($or$cond554) {
      $i$156 = 0;$pcount$155 = $pcount$063;
      while(1) {
       $122 = HEAP32[$17>>2]|0;
       $123 = HEAP32[$34>>2]|0;
       $124 = (($123) + ($class_set$062<<2)|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = (($125) + ($i$156)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = $127&255;
       $129 = HEAP32[$70>>2]|0;
       $130 = ((($129) + ($128<<4)|0) + ($pass$081<<1)|0);
       $131 = HEAP16[$130>>1]|0;
       $132 = ($131<<16>>16)>(-1);
       if ($132) {
        $133 = $131 << 16 >> 16;
        $134 = HEAP32[$8>>2]|0;
        $135 = (($134) + (($133*2096)|0)|0);
        $136 = (_codebook_decode_deinterleave_repeat_2($f,$135,$residue_buffers,$c_inter,$p_inter,$n,$122)|0);
        $137 = ($136|0)==(0);
        if ($137) {
         label = 94;
         break L64;
        }
       } else {
        $138 = Math_imul($122, $pcount$155)|0;
        $139 = HEAP32[$14>>2]|0;
        $140 = (($138) + ($122))|0;
        $141 = (($140) + ($139))|0;
        $142 = $141 & 1;
        HEAP32[$c_inter>>2] = $142;
        $143 = $141 >> 1;
        HEAP32[$p_inter>>2] = $143;
       }
       $144 = (($i$156) + 1)|0;
       $145 = (($pcount$155) + 1)|0;
       $146 = ($144|0)<($11|0);
       $147 = ($145|0)<($19|0);
       $or$cond5 = $146 & $147;
       if ($or$cond5) {
        $i$156 = $144;$pcount$155 = $145;
       } else {
        $pcount$1$lcssa = $145;
        break;
       }
      }
     } else {
      $pcount$1$lcssa = $pcount$063;
     }
     $148 = (($class_set$062) + 1)|0;
     $149 = ($pcount$1$lcssa|0)<($19|0);
     if ($149) {
      $class_set$062 = $148;$pcount$063 = $pcount$1$lcssa;
     } else {
      break;
     }
    }
   }
  } else {
   if ($71) {
    $77 = ($pass$081|0)==(0);
    $class_set$276 = 0;$pcount$477 = 0;
    while(1) {
     $216 = HEAP32[$14>>2]|0;
     $217 = HEAP32[$17>>2]|0;
     $218 = Math_imul($217, $pcount$477)|0;
     $219 = (($218) + ($216))|0;
     $220 = (($219|0) % ($ch|0))&-1;
     HEAP32[$c_inter16>>2] = $220;
     $221 = (($219|0) / ($ch|0))&-1;
     HEAP32[$p_inter17>>2] = $221;
     if ($77) {
      $222 = HEAP32[$8>>2]|0;
      $223 = HEAP8[$5>>0]|0;
      $224 = $223&255;
      $225 = (($222) + (($224*2096)|0)|0);
      $226 = HEAP32[$72>>2]|0;
      $227 = ($226|0)<(10);
      if ($227) {
       _prep_huffman($f);
      }
      $228 = HEAP32[$73>>2]|0;
      $229 = $228 & 1023;
      $230 = (((($222) + (($224*2096)|0)|0) + ($229<<1)|0) + 36|0);
      $231 = HEAP16[$230>>1]|0;
      $232 = $231 << 16 >> 16;
      $233 = ($231<<16>>16)>(-1);
      if ($233) {
       $234 = ((($222) + (($224*2096)|0)|0) + 8|0);
       $235 = HEAP32[$234>>2]|0;
       $236 = (($235) + ($232)|0);
       $237 = HEAP8[$236>>0]|0;
       $238 = $237&255;
       $239 = $228 >>> $238;
       HEAP32[$73>>2] = $239;
       $240 = HEAP32[$72>>2]|0;
       $241 = (($240) - ($238))|0;
       $242 = ($241|0)<(0);
       $$9 = $242 ? 0 : $241;
       HEAP32[$72>>2] = $$9;
       $$10 = $242 ? -1 : $232;
       $q19$0 = $$10;
      } else {
       $243 = (_codebook_decode_scalar_raw($f,$225)|0);
       $q19$0 = $243;
      }
      $244 = ((($222) + (($224*2096)|0)|0) + 23|0);
      $245 = HEAP8[$244>>0]|0;
      $246 = ($245<<24>>24)==(0);
      if ($246) {
       $q19$1 = $q19$0;
      } else {
       $247 = ((($222) + (($224*2096)|0)|0) + 2088|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = (($248) + ($q19$0<<2)|0);
       $250 = HEAP32[$249>>2]|0;
       $q19$1 = $250;
      }
      $251 = ($q19$1|0)==(-1);
      if ($251) {
       label = 94;
       break L64;
      }
      $252 = HEAP32[$74>>2]|0;
      $253 = (($252) + ($q19$1<<2)|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = HEAP32[$34>>2]|0;
      $256 = (($255) + ($class_set$276<<2)|0);
      HEAP32[$256>>2] = $254;
     }
     $257 = ($pcount$477|0)<($19|0);
     $or$cond1168 = $75 & $257;
     if ($or$cond1168) {
      $i$370 = 0;$pcount$569 = $pcount$477;
      while(1) {
       $258 = HEAP32[$17>>2]|0;
       $259 = HEAP32[$34>>2]|0;
       $260 = (($259) + ($class_set$276<<2)|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = (($261) + ($i$370)|0);
       $263 = HEAP8[$262>>0]|0;
       $264 = $263&255;
       $265 = HEAP32[$76>>2]|0;
       $266 = ((($265) + ($264<<4)|0) + ($pass$081<<1)|0);
       $267 = HEAP16[$266>>1]|0;
       $268 = ($267<<16>>16)>(-1);
       if ($268) {
        $269 = $267 << 16 >> 16;
        $270 = HEAP32[$8>>2]|0;
        $271 = (($270) + (($269*2096)|0)|0);
        $272 = (_codebook_decode_deinterleave_repeat($f,$271,$residue_buffers,$ch,$c_inter16,$p_inter17,$n,$258)|0);
        $273 = ($272|0)==(0);
        if ($273) {
         label = 94;
         break L64;
        }
       } else {
        $274 = Math_imul($258, $pcount$569)|0;
        $275 = HEAP32[$14>>2]|0;
        $276 = (($274) + ($258))|0;
        $277 = (($276) + ($275))|0;
        $278 = (($277|0) % ($ch|0))&-1;
        HEAP32[$c_inter16>>2] = $278;
        $279 = (($277|0) / ($ch|0))&-1;
        HEAP32[$p_inter17>>2] = $279;
       }
       $280 = (($i$370) + 1)|0;
       $281 = (($pcount$569) + 1)|0;
       $282 = ($280|0)<($11|0);
       $283 = ($281|0)<($19|0);
       $or$cond11 = $282 & $283;
       if ($or$cond11) {
        $i$370 = $280;$pcount$569 = $281;
       } else {
        $pcount$5$lcssa = $281;
        break;
       }
      }
     } else {
      $pcount$5$lcssa = $pcount$477;
     }
     $284 = (($class_set$276) + 1)|0;
     $285 = ($pcount$5$lcssa|0)<($19|0);
     if ($285) {
      $class_set$276 = $284;$pcount$477 = $pcount$5$lcssa;
     } else {
      break;
     }
    }
   }
  }
  $286 = (($pass$081) + 1)|0;
  $287 = ($286|0)<(8);
  if ($287) {
   $pass$081 = $286;
  } else {
   label = 94;
   break;
  }
 }
 if ((label|0) == 94) {
  HEAP32[$20>>2] = $21;
  STACKTOP = sp;return;
 }
}
function _do_floor($f,$map,$i,$n,$target,$finalY) {
 $f = $f|0;
 $map = $map|0;
 $i = $i|0;
 $n = $n|0;
 $target = $target|0;
 $finalY = $finalY|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $j$01 = 0, $lx$0$lcssa = 0, $lx$03 = 0, $lx$1 = 0, $ly$0$lcssa = 0, $ly$04 = 0, $ly$1 = 0, $q$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >> 1;
 $1 = (($map) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2) + (($i*3)|0)|0) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ((($map) + ($5)|0) + 9|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ((($f) + ($8<<1)|0) + 148|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($10<<16>>16)==(0);
 if ($11) {
  _error($f,21);
  STACKTOP = sp;return;
 }
 $12 = (($f) + 276|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP16[$finalY>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = ((($13) + (($8*1596)|0)|0) + 1588|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = Math_imul($18, $15)|0;
 $20 = ((($13) + (($8*1596)|0)|0) + 1592|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)>(1);
 if ($22) {
  $lx$03 = 0;$ly$04 = $19;$q$02 = 1;
  while(1) {
   $23 = (((($13) + (($8*1596)|0)|0) + ($q$02)|0) + 838|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = (($finalY) + ($25<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = ($27<<16>>16)>(-1);
   if ($28) {
    $29 = $27 << 16 >> 16;
    $30 = HEAP8[$16>>0]|0;
    $31 = $30&255;
    $32 = Math_imul($31, $29)|0;
    $33 = (((($13) + (($8*1596)|0)|0) + ($25<<1)|0) + 338|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34&65535;
    _draw_line($target,$lx$03,$ly$04,$35,$32,$0);
    $lx$1 = $35;$ly$1 = $32;
   } else {
    $lx$1 = $lx$03;$ly$1 = $ly$04;
   }
   $36 = (($q$02) + 1)|0;
   $37 = HEAP32[$20>>2]|0;
   $38 = ($36|0)<($37|0);
   if ($38) {
    $lx$03 = $lx$1;$ly$04 = $ly$1;$q$02 = $36;
   } else {
    $lx$0$lcssa = $lx$1;$ly$0$lcssa = $ly$1;
    break;
   }
  }
 } else {
  $lx$0$lcssa = 0;$ly$0$lcssa = $19;
 }
 $39 = ($lx$0$lcssa|0)<($0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = (19432 + ($ly$0$lcssa<<2)|0);
 $41 = +HEAPF32[$40>>2];
 $j$01 = $lx$0$lcssa;
 while(1) {
  $42 = (($target) + ($j$01<<2)|0);
  $43 = +HEAPF32[$42>>2];
  $44 = $41 * $43;
  HEAPF32[$42>>2] = $44;
  $45 = (($j$01) + 1)|0;
  $exitcond = ($45|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $j$01 = $45;
  }
 }
 STACKTOP = sp;return;
}
function _inverse_mdct($buffer,$n,$f,$blocktype) {
 $buffer = $buffer|0;
 $n = $n|0;
 $f = $f|0;
 $blocktype = $blocktype|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0;
 var $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0;
 var $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0.0;
 var $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0;
 var $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0.0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0.0;
 var $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0.0, $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0.0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $A0$023 = 0, $AA$0$lcssa = 0, $AA$050 = 0;
 var $AA$144 = 0, $AA1$040 = 0, $B$07 = 0, $C$09 = 0, $bitrev$015 = 0, $d$0$lcssa = 0, $d$052 = 0, $d$146 = 0, $d0$039 = 0, $d05$016 = 0, $d09$03 = 0, $d1$038 = 0, $d110$04 = 0, $d16$017 = 0, $d2$05 = 0, $d3$06 = 0, $d7$010 = 0, $e$051 = 0, $e$145 = 0, $e0$037 = 0;
 var $e1$036 = 0, $e11$08 = 0, $e8$011 = 0, $exitcond = 0, $exitcond58 = 0, $exitcond59 = 0, $i$030 = 0, $i_off$022 = 0, $l$0$lcssa = 0, $l$033 = 0, $l$126 = 0, $r$021 = 0, $scevgep = 0, $scevgep61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >> 1;
 $1 = $n >> 2;
 $2 = $n >> 3;
 $3 = (($f) + 108|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($f) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 $8 = $0 << 2;
 if ($7) {
  $10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$8)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();;
  $15 = $10;
 } else {
  $9 = (_setup_temp_malloc($f,$8)|0);
  $15 = $9;
 }
 $11 = ((($f) + ($blocktype<<2)|0) + 1084|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($0) + -2)|0;
 $14 = (($15) + ($13<<2)|0);
 $16 = (($buffer) + ($0<<2)|0);
 $17 = ($0|0)==(0);
 if ($17) {
  $AA$0$lcssa = $12;$d$0$lcssa = $14;
 } else {
  $18 = $0 << 2;
  $19 = (($18) + -16)|0;
  $20 = $19 >>> 4;
  $21 = $20 << 1;
  $22 = (($21) + 2)|0;
  $23 = $20 << 3;
  $24 = (($19) - ($23))|0;
  $scevgep61 = (($15) + ($24)|0);
  $AA$050 = $12;$d$052 = $14;$e$051 = $buffer;
  while(1) {
   $25 = +HEAPF32[$e$051>>2];
   $26 = +HEAPF32[$AA$050>>2];
   $27 = $25 * $26;
   $28 = (($e$051) + 8|0);
   $29 = +HEAPF32[$28>>2];
   $30 = (($AA$050) + 4|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $29 * $31;
   $33 = $27 - $32;
   $34 = (($d$052) + 4|0);
   HEAPF32[$34>>2] = $33;
   $35 = +HEAPF32[$e$051>>2];
   $36 = +HEAPF32[$30>>2];
   $37 = $35 * $36;
   $38 = +HEAPF32[$28>>2];
   $39 = +HEAPF32[$AA$050>>2];
   $40 = $38 * $39;
   $41 = $37 + $40;
   HEAPF32[$d$052>>2] = $41;
   $42 = (($d$052) + -8|0);
   $43 = (($AA$050) + 8|0);
   $44 = (($e$051) + 16|0);
   $45 = ($44|0)==($16|0);
   if ($45) {
    break;
   } else {
    $AA$050 = $43;$d$052 = $42;$e$051 = $44;
   }
  }
  $scevgep = (($12) + ($22<<2)|0);
  $AA$0$lcssa = $scevgep;$d$0$lcssa = $scevgep61;
 }
 $46 = ($d$0$lcssa>>>0)<($15>>>0);
 if (!($46)) {
  $47 = (($0) + -3)|0;
  $48 = (($buffer) + ($47<<2)|0);
  $AA$144 = $AA$0$lcssa;$d$146 = $d$0$lcssa;$e$145 = $48;
  while(1) {
   $49 = (($e$145) + 8|0);
   $50 = +HEAPF32[$49>>2];
   $51 = +HEAPF32[$AA$144>>2];
   $52 = $50 * $51;
   $53 = +HEAPF32[$e$145>>2];
   $54 = (($AA$144) + 4|0);
   $55 = +HEAPF32[$54>>2];
   $56 = $53 * $55;
   $57 = $56 - $52;
   $58 = (($d$146) + 4|0);
   HEAPF32[$58>>2] = $57;
   $59 = +HEAPF32[$49>>2];
   $60 = +HEAPF32[$54>>2];
   $61 = $59 * $60;
   $62 = +HEAPF32[$e$145>>2];
   $63 = +HEAPF32[$AA$144>>2];
   $64 = $62 * $63;
   $65 = -$64;
   $66 = $65 - $61;
   HEAPF32[$d$146>>2] = $66;
   $67 = (($d$146) + -8|0);
   $68 = (($AA$144) + 8|0);
   $69 = (($e$145) + -16|0);
   $70 = ($67>>>0)<($15>>>0);
   if ($70) {
    break;
   } else {
    $AA$144 = $68;$d$146 = $67;$e$145 = $69;
   }
  }
 }
 $71 = (($0) + -8)|0;
 $72 = ($71|0)<(0);
 if (!($72)) {
  $73 = (($12) + ($71<<2)|0);
  $74 = (($buffer) + ($1<<2)|0);
  $75 = (($15) + ($1<<2)|0);
  $AA1$040 = $73;$d0$039 = $74;$d1$038 = $buffer;$e0$037 = $75;$e1$036 = $15;
  while(1) {
   $76 = (($e0$037) + 4|0);
   $77 = +HEAPF32[$76>>2];
   $78 = (($e1$036) + 4|0);
   $79 = +HEAPF32[$78>>2];
   $80 = $77 - $79;
   $81 = +HEAPF32[$e0$037>>2];
   $82 = +HEAPF32[$e1$036>>2];
   $83 = $81 - $82;
   $84 = $77 + $79;
   $85 = (($d0$039) + 4|0);
   HEAPF32[$85>>2] = $84;
   $86 = +HEAPF32[$e0$037>>2];
   $87 = +HEAPF32[$e1$036>>2];
   $88 = $86 + $87;
   HEAPF32[$d0$039>>2] = $88;
   $89 = (($AA1$040) + 16|0);
   $90 = +HEAPF32[$89>>2];
   $91 = $80 * $90;
   $92 = (($AA1$040) + 20|0);
   $93 = +HEAPF32[$92>>2];
   $94 = $83 * $93;
   $95 = $91 - $94;
   $96 = (($d1$038) + 4|0);
   HEAPF32[$96>>2] = $95;
   $97 = +HEAPF32[$89>>2];
   $98 = $83 * $97;
   $99 = +HEAPF32[$92>>2];
   $100 = $80 * $99;
   $101 = $98 + $100;
   HEAPF32[$d1$038>>2] = $101;
   $102 = (($e0$037) + 12|0);
   $103 = +HEAPF32[$102>>2];
   $104 = (($e1$036) + 12|0);
   $105 = +HEAPF32[$104>>2];
   $106 = $103 - $105;
   $107 = (($e0$037) + 8|0);
   $108 = +HEAPF32[$107>>2];
   $109 = (($e1$036) + 8|0);
   $110 = +HEAPF32[$109>>2];
   $111 = $108 - $110;
   $112 = $103 + $105;
   $113 = (($d0$039) + 12|0);
   HEAPF32[$113>>2] = $112;
   $114 = +HEAPF32[$107>>2];
   $115 = +HEAPF32[$109>>2];
   $116 = $114 + $115;
   $117 = (($d0$039) + 8|0);
   HEAPF32[$117>>2] = $116;
   $118 = +HEAPF32[$AA1$040>>2];
   $119 = $106 * $118;
   $120 = (($AA1$040) + 4|0);
   $121 = +HEAPF32[$120>>2];
   $122 = $111 * $121;
   $123 = $119 - $122;
   $124 = (($d1$038) + 12|0);
   HEAPF32[$124>>2] = $123;
   $125 = +HEAPF32[$AA1$040>>2];
   $126 = $111 * $125;
   $127 = +HEAPF32[$120>>2];
   $128 = $106 * $127;
   $129 = $126 + $128;
   $130 = (($d1$038) + 8|0);
   HEAPF32[$130>>2] = $129;
   $131 = (($AA1$040) + -32|0);
   $132 = (($d0$039) + 16|0);
   $133 = (($d1$038) + 16|0);
   $134 = (($e0$037) + 16|0);
   $135 = (($e1$036) + 16|0);
   $136 = ($131>>>0)<($12>>>0);
   if ($136) {
    break;
   } else {
    $AA1$040 = $131;$d0$039 = $132;$d1$038 = $133;$e0$037 = $134;$e1$036 = $135;
   }
  }
 }
 $137 = (_ilog($n)|0);
 $138 = $n >> 4;
 $139 = (($0) + -1)|0;
 $140 = (0 - ($2))|0;
 _imdct_step3_iter0_loop($138,$buffer,$139,$140,$12);
 $141 = (($139) - ($1))|0;
 _imdct_step3_iter0_loop($138,$buffer,$141,$140,$12);
 $142 = $n >> 5;
 $143 = (0 - ($138))|0;
 _imdct_step3_inner_r_loop($142,$buffer,$139,$143,$12,16);
 $144 = (($139) - ($2))|0;
 _imdct_step3_inner_r_loop($142,$buffer,$144,$143,$12,16);
 $145 = $2 << 1;
 $146 = (($139) - ($145))|0;
 _imdct_step3_inner_r_loop($142,$buffer,$146,$143,$12,16);
 $147 = Math_imul($2, -3)|0;
 $148 = (($139) + ($147))|0;
 _imdct_step3_inner_r_loop($142,$buffer,$148,$143,$12,16);
 $149 = (($137) + -4)|0;
 $150 = $149 >> 1;
 $151 = ($150|0)>(2);
 if ($151) {
  $l$033 = 2;
  while(1) {
   $156 = (($l$033) + 2)|0;
   $157 = $n >> $156;
   $152 = (($l$033) + 1)|0;
   $158 = 1 << $152;
   $159 = ($158|0)>(0);
   if ($159) {
    $160 = $157 >> 1;
    $161 = (($l$033) + 4)|0;
    $162 = $n >> $161;
    $163 = (0 - ($160))|0;
    $164 = (($l$033) + 3)|0;
    $165 = 1 << $164;
    $i$030 = 0;
    while(1) {
     $166 = Math_imul($i$030, $157)|0;
     $167 = (($139) - ($166))|0;
     _imdct_step3_inner_r_loop($162,$buffer,$167,$163,$12,$165);
     $168 = (($i$030) + 1)|0;
     $exitcond58 = ($168|0)==($158|0);
     if ($exitcond58) {
      break;
     } else {
      $i$030 = $168;
     }
    }
   }
   $exitcond59 = ($152|0)==($150|0);
   if ($exitcond59) {
    $l$0$lcssa = $150;
    break;
   } else {
    $l$033 = $152;
   }
  }
 } else {
  $l$0$lcssa = 2;
 }
 $153 = (($137) + -7)|0;
 $154 = ($l$0$lcssa|0)<($153|0);
 if ($154) {
  $155 = (($137) + -7)|0;
  $l$126 = $l$0$lcssa;
  while(1) {
   $170 = (($l$126) + 2)|0;
   $171 = $n >> $170;
   $172 = (($l$126) + 3)|0;
   $173 = 1 << $172;
   $174 = (($l$126) + 6)|0;
   $175 = $n >> $174;
   $169 = (($l$126) + 1)|0;
   $176 = 1 << $169;
   $177 = ($175|0)>(0);
   if ($177) {
    $178 = $171 >> 1;
    $179 = (0 - ($178))|0;
    $180 = $173 << 2;
    $A0$023 = $12;$i_off$022 = $139;$r$021 = $175;
    while(1) {
     _imdct_step3_inner_s_loop($176,$buffer,$i_off$022,$179,$A0$023,$173,$171);
     $181 = (($A0$023) + ($180<<2)|0);
     $182 = (($i_off$022) + -8)|0;
     $183 = (($r$021) + -1)|0;
     $184 = ($183|0)>(0);
     if ($184) {
      $A0$023 = $181;$i_off$022 = $182;$r$021 = $183;
     } else {
      break;
     }
    }
   }
   $exitcond = ($169|0)==($155|0);
   if ($exitcond) {
    break;
   } else {
    $l$126 = $169;
   }
  }
 }
 _imdct_step3_inner_s_loop_ld654($142,$buffer,$139,$12,$n);
 $185 = (($1) + -4)|0;
 $186 = (($15) + ($185<<2)|0);
 $187 = (($0) + -4)|0;
 $188 = ($186>>>0)<($15>>>0);
 if (!($188)) {
  $189 = ((($f) + ($blocktype<<2)|0) + 1116|0);
  $190 = (($15) + ($187<<2)|0);
  $191 = HEAP32[$189>>2]|0;
  $bitrev$015 = $191;$d05$016 = $186;$d16$017 = $190;
  while(1) {
   $192 = HEAP16[$bitrev$015>>1]|0;
   $193 = $192&65535;
   $194 = (($buffer) + ($193<<2)|0);
   $195 = +HEAPF32[$194>>2];
   $196 = (($d16$017) + 12|0);
   HEAPF32[$196>>2] = $195;
   $197 = (($193) + 1)|0;
   $198 = (($buffer) + ($197<<2)|0);
   $199 = +HEAPF32[$198>>2];
   $200 = (($d16$017) + 8|0);
   HEAPF32[$200>>2] = $199;
   $201 = (($193) + 2)|0;
   $202 = (($buffer) + ($201<<2)|0);
   $203 = +HEAPF32[$202>>2];
   $204 = (($d05$016) + 12|0);
   HEAPF32[$204>>2] = $203;
   $205 = (($193) + 3)|0;
   $206 = (($buffer) + ($205<<2)|0);
   $207 = +HEAPF32[$206>>2];
   $208 = (($d05$016) + 8|0);
   HEAPF32[$208>>2] = $207;
   $209 = (($bitrev$015) + 2|0);
   $210 = HEAP16[$209>>1]|0;
   $211 = $210&65535;
   $212 = (($buffer) + ($211<<2)|0);
   $213 = +HEAPF32[$212>>2];
   $214 = (($d16$017) + 4|0);
   HEAPF32[$214>>2] = $213;
   $215 = (($211) + 1)|0;
   $216 = (($buffer) + ($215<<2)|0);
   $217 = +HEAPF32[$216>>2];
   HEAPF32[$d16$017>>2] = $217;
   $218 = (($211) + 2)|0;
   $219 = (($buffer) + ($218<<2)|0);
   $220 = +HEAPF32[$219>>2];
   $221 = (($d05$016) + 4|0);
   HEAPF32[$221>>2] = $220;
   $222 = (($211) + 3)|0;
   $223 = (($buffer) + ($222<<2)|0);
   $224 = +HEAPF32[$223>>2];
   HEAPF32[$d05$016>>2] = $224;
   $225 = (($d05$016) + -16|0);
   $226 = (($d16$017) + -16|0);
   $227 = (($bitrev$015) + 4|0);
   $228 = ($225>>>0)<($15>>>0);
   if ($228) {
    break;
   } else {
    $bitrev$015 = $227;$d05$016 = $225;$d16$017 = $226;
   }
  }
 }
 $$sum = (($0) + -4)|0;
 $229 = (($15) + ($$sum<<2)|0);
 $230 = ($15>>>0)<($229>>>0);
 if ($230) {
  $231 = ((($f) + ($blocktype<<2)|0) + 1100|0);
  $232 = HEAP32[$231>>2]|0;
  $C$09 = $232;$d7$010 = $15;$e8$011 = $229;
  while(1) {
   $233 = +HEAPF32[$d7$010>>2];
   $234 = (($e8$011) + 8|0);
   $235 = +HEAPF32[$234>>2];
   $236 = $233 - $235;
   $237 = (($d7$010) + 4|0);
   $238 = +HEAPF32[$237>>2];
   $239 = (($e8$011) + 12|0);
   $240 = +HEAPF32[$239>>2];
   $241 = $238 + $240;
   $242 = (($C$09) + 4|0);
   $243 = +HEAPF32[$242>>2];
   $244 = $236 * $243;
   $245 = +HEAPF32[$C$09>>2];
   $246 = $241 * $245;
   $247 = $244 + $246;
   $248 = $243 * $241;
   $249 = $236 * $245;
   $250 = $248 - $249;
   $251 = $233 + $235;
   $252 = $238 - $240;
   $253 = $251 + $247;
   HEAPF32[$d7$010>>2] = $253;
   $254 = $252 + $250;
   HEAPF32[$237>>2] = $254;
   $255 = $251 - $247;
   HEAPF32[$234>>2] = $255;
   $256 = $250 - $252;
   HEAPF32[$239>>2] = $256;
   $257 = (($d7$010) + 8|0);
   $258 = +HEAPF32[$257>>2];
   $259 = +HEAPF32[$e8$011>>2];
   $260 = $258 - $259;
   $261 = (($d7$010) + 12|0);
   $262 = +HEAPF32[$261>>2];
   $263 = (($e8$011) + 4|0);
   $264 = +HEAPF32[$263>>2];
   $265 = $262 + $264;
   $266 = (($C$09) + 12|0);
   $267 = +HEAPF32[$266>>2];
   $268 = $260 * $267;
   $269 = (($C$09) + 8|0);
   $270 = +HEAPF32[$269>>2];
   $271 = $265 * $270;
   $272 = $268 + $271;
   $273 = $267 * $265;
   $274 = $260 * $270;
   $275 = $273 - $274;
   $276 = $258 + $259;
   $277 = $262 - $264;
   $278 = $276 + $272;
   HEAPF32[$257>>2] = $278;
   $279 = $277 + $275;
   HEAPF32[$261>>2] = $279;
   $280 = $276 - $272;
   HEAPF32[$e8$011>>2] = $280;
   $281 = $275 - $277;
   HEAPF32[$263>>2] = $281;
   $282 = (($C$09) + 16|0);
   $283 = (($d7$010) + 16|0);
   $284 = (($e8$011) + -16|0);
   $285 = ($283>>>0)<($284>>>0);
   if ($285) {
    $C$09 = $282;$d7$010 = $283;$e8$011 = $284;
   } else {
    break;
   }
  }
 }
 $$sum1 = (($0) + -8)|0;
 $286 = (($15) + ($$sum1<<2)|0);
 $287 = ($286>>>0)<($15>>>0);
 if ($287) {
  HEAP32[$3>>2] = $4;
  STACKTOP = sp;return;
 }
 $288 = ((($f) + ($blocktype<<2)|0) + 1092|0);
 $289 = (($n) + -4)|0;
 $290 = HEAP32[$288>>2]|0;
 $291 = (($buffer) + ($289<<2)|0);
 $292 = (($buffer) + ($187<<2)|0);
 $293 = (($290) + ($$sum1<<2)|0);
 $B$07 = $293;$d09$03 = $buffer;$d110$04 = $292;$d2$05 = $16;$d3$06 = $291;$e11$08 = $286;
 while(1) {
  $294 = (($e11$08) + 24|0);
  $295 = +HEAPF32[$294>>2];
  $296 = (($B$07) + 28|0);
  $297 = +HEAPF32[$296>>2];
  $298 = $295 * $297;
  $299 = (($e11$08) + 28|0);
  $300 = +HEAPF32[$299>>2];
  $301 = (($B$07) + 24|0);
  $302 = +HEAPF32[$301>>2];
  $303 = $300 * $302;
  $304 = $298 - $303;
  $305 = $295 * $302;
  $306 = -$305;
  $307 = $297 * $300;
  $308 = $306 - $307;
  HEAPF32[$d09$03>>2] = $304;
  $309 = -$304;
  $310 = (($d110$04) + 12|0);
  HEAPF32[$310>>2] = $309;
  HEAPF32[$d2$05>>2] = $308;
  $311 = (($d3$06) + 12|0);
  HEAPF32[$311>>2] = $308;
  $312 = (($e11$08) + 16|0);
  $313 = +HEAPF32[$312>>2];
  $314 = (($B$07) + 20|0);
  $315 = +HEAPF32[$314>>2];
  $316 = $313 * $315;
  $317 = (($e11$08) + 20|0);
  $318 = +HEAPF32[$317>>2];
  $319 = (($B$07) + 16|0);
  $320 = +HEAPF32[$319>>2];
  $321 = $318 * $320;
  $322 = $316 - $321;
  $323 = $313 * $320;
  $324 = -$323;
  $325 = $315 * $318;
  $326 = $324 - $325;
  $327 = (($d09$03) + 4|0);
  HEAPF32[$327>>2] = $322;
  $328 = -$322;
  $329 = (($d110$04) + 8|0);
  HEAPF32[$329>>2] = $328;
  $330 = (($d2$05) + 4|0);
  HEAPF32[$330>>2] = $326;
  $331 = (($d3$06) + 8|0);
  HEAPF32[$331>>2] = $326;
  $332 = (($e11$08) + 8|0);
  $333 = +HEAPF32[$332>>2];
  $334 = (($B$07) + 12|0);
  $335 = +HEAPF32[$334>>2];
  $336 = $333 * $335;
  $337 = (($e11$08) + 12|0);
  $338 = +HEAPF32[$337>>2];
  $339 = (($B$07) + 8|0);
  $340 = +HEAPF32[$339>>2];
  $341 = $338 * $340;
  $342 = $336 - $341;
  $343 = $333 * $340;
  $344 = -$343;
  $345 = $335 * $338;
  $346 = $344 - $345;
  $347 = (($d09$03) + 8|0);
  HEAPF32[$347>>2] = $342;
  $348 = -$342;
  $349 = (($d110$04) + 4|0);
  HEAPF32[$349>>2] = $348;
  $350 = (($d2$05) + 8|0);
  HEAPF32[$350>>2] = $346;
  $351 = (($d3$06) + 4|0);
  HEAPF32[$351>>2] = $346;
  $352 = +HEAPF32[$e11$08>>2];
  $353 = (($B$07) + 4|0);
  $354 = +HEAPF32[$353>>2];
  $355 = $352 * $354;
  $356 = (($e11$08) + 4|0);
  $357 = +HEAPF32[$356>>2];
  $358 = +HEAPF32[$B$07>>2];
  $359 = $357 * $358;
  $360 = $355 - $359;
  $361 = $352 * $358;
  $362 = -$361;
  $363 = $354 * $357;
  $364 = $362 - $363;
  $365 = (($d09$03) + 12|0);
  HEAPF32[$365>>2] = $360;
  $366 = -$360;
  HEAPF32[$d110$04>>2] = $366;
  $367 = (($d2$05) + 12|0);
  HEAPF32[$367>>2] = $364;
  HEAPF32[$d3$06>>2] = $364;
  $368 = (($B$07) + -32|0);
  $369 = (($e11$08) + -32|0);
  $370 = (($d09$03) + 16|0);
  $371 = (($d2$05) + 16|0);
  $372 = (($d110$04) + -16|0);
  $373 = (($d3$06) + -16|0);
  $374 = ($369>>>0)<($15>>>0);
  if ($374) {
   break;
  } else {
   $B$07 = $368;$d09$03 = $370;$d110$04 = $372;$d2$05 = $371;$d3$06 = $373;$e11$08 = $369;
  }
 }
 HEAP32[$3>>2] = $4;
 STACKTOP = sp;return;
}
function _imdct_step3_iter0_loop($n,$e,$i_off,$k_off,$A) {
 $n = $n|0;
 $e = $e|0;
 $i_off = $i_off|0;
 $k_off = $k_off|0;
 $A = $A|0;
 var $$04 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0.0, $13 = 0.0;
 var $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0;
 var $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $ee0$03 = 0, $ee2$01 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n & 3;
 $1 = ($0|0)==(0);
 if (!($1)) {
  ___assert_fail((19392|0),(17648|0),2085,(19408|0));
  // unreachable;
 }
 $2 = $n >> 2;
 $3 = ($2|0)>(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $$sum = (($k_off) + ($i_off))|0;
 $4 = (($e) + ($$sum<<2)|0);
 $5 = (($e) + ($i_off<<2)|0);
 $$04 = $A;$ee0$03 = $5;$ee2$01 = $4;$i$02 = $2;
 while(1) {
  $6 = +HEAPF32[$ee0$03>>2];
  $7 = +HEAPF32[$ee2$01>>2];
  $8 = $6 - $7;
  $9 = (($ee0$03) + -4|0);
  $10 = +HEAPF32[$9>>2];
  $11 = (($ee2$01) + -4|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $10 - $12;
  $14 = $6 + $7;
  HEAPF32[$ee0$03>>2] = $14;
  $15 = +HEAPF32[$11>>2];
  $16 = +HEAPF32[$9>>2];
  $17 = $15 + $16;
  HEAPF32[$9>>2] = $17;
  $18 = +HEAPF32[$$04>>2];
  $19 = $8 * $18;
  $20 = (($$04) + 4|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $13 * $21;
  $23 = $19 - $22;
  HEAPF32[$ee2$01>>2] = $23;
  $24 = +HEAPF32[$$04>>2];
  $25 = $13 * $24;
  $26 = +HEAPF32[$20>>2];
  $27 = $8 * $26;
  $28 = $25 + $27;
  HEAPF32[$11>>2] = $28;
  $29 = (($$04) + 32|0);
  $30 = (($ee0$03) + -8|0);
  $31 = +HEAPF32[$30>>2];
  $32 = (($ee2$01) + -8|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $31 - $33;
  $35 = (($ee0$03) + -12|0);
  $36 = +HEAPF32[$35>>2];
  $37 = (($ee2$01) + -12|0);
  $38 = +HEAPF32[$37>>2];
  $39 = $36 - $38;
  $40 = $31 + $33;
  HEAPF32[$30>>2] = $40;
  $41 = +HEAPF32[$37>>2];
  $42 = +HEAPF32[$35>>2];
  $43 = $41 + $42;
  HEAPF32[$35>>2] = $43;
  $44 = +HEAPF32[$29>>2];
  $45 = $34 * $44;
  $46 = (($$04) + 36|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $39 * $47;
  $49 = $45 - $48;
  HEAPF32[$32>>2] = $49;
  $50 = +HEAPF32[$29>>2];
  $51 = $39 * $50;
  $52 = +HEAPF32[$46>>2];
  $53 = $34 * $52;
  $54 = $51 + $53;
  HEAPF32[$37>>2] = $54;
  $55 = (($$04) + 64|0);
  $56 = (($ee0$03) + -16|0);
  $57 = +HEAPF32[$56>>2];
  $58 = (($ee2$01) + -16|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $57 - $59;
  $61 = (($ee0$03) + -20|0);
  $62 = +HEAPF32[$61>>2];
  $63 = (($ee2$01) + -20|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $62 - $64;
  $66 = $57 + $59;
  HEAPF32[$56>>2] = $66;
  $67 = +HEAPF32[$63>>2];
  $68 = +HEAPF32[$61>>2];
  $69 = $67 + $68;
  HEAPF32[$61>>2] = $69;
  $70 = +HEAPF32[$55>>2];
  $71 = $60 * $70;
  $72 = (($$04) + 68|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $65 * $73;
  $75 = $71 - $74;
  HEAPF32[$58>>2] = $75;
  $76 = +HEAPF32[$55>>2];
  $77 = $65 * $76;
  $78 = +HEAPF32[$72>>2];
  $79 = $60 * $78;
  $80 = $77 + $79;
  HEAPF32[$63>>2] = $80;
  $81 = (($$04) + 96|0);
  $82 = (($ee0$03) + -24|0);
  $83 = +HEAPF32[$82>>2];
  $84 = (($ee2$01) + -24|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $83 - $85;
  $87 = (($ee0$03) + -28|0);
  $88 = +HEAPF32[$87>>2];
  $89 = (($ee2$01) + -28|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $88 - $90;
  $92 = $83 + $85;
  HEAPF32[$82>>2] = $92;
  $93 = +HEAPF32[$89>>2];
  $94 = +HEAPF32[$87>>2];
  $95 = $93 + $94;
  HEAPF32[$87>>2] = $95;
  $96 = +HEAPF32[$81>>2];
  $97 = $86 * $96;
  $98 = (($$04) + 100|0);
  $99 = +HEAPF32[$98>>2];
  $100 = $91 * $99;
  $101 = $97 - $100;
  HEAPF32[$84>>2] = $101;
  $102 = +HEAPF32[$81>>2];
  $103 = $91 * $102;
  $104 = +HEAPF32[$98>>2];
  $105 = $86 * $104;
  $106 = $103 + $105;
  HEAPF32[$89>>2] = $106;
  $107 = (($$04) + 128|0);
  $108 = (($ee0$03) + -32|0);
  $109 = (($ee2$01) + -32|0);
  $110 = (($i$02) + -1)|0;
  $111 = ($110|0)>(0);
  if ($111) {
   $$04 = $107;$ee0$03 = $108;$ee2$01 = $109;$i$02 = $110;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _imdct_step3_inner_r_loop($lim,$e,$d0,$k_off,$A,$k1) {
 $lim = $lim|0;
 $e = $e|0;
 $d0 = $d0|0;
 $k_off = $k_off|0;
 $A = $A|0;
 $k1 = $k1|0;
 var $$09 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum34 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0;
 var $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $e0$010 = 0, $e2$011 = 0;
 var $i$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $lim >> 2;
 $1 = ($0|0)>(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $$sum = (($k_off) + ($d0))|0;
 $2 = (($e) + ($$sum<<2)|0);
 $3 = (($e) + ($d0<<2)|0);
 $$sum1 = (($k1) + 1)|0;
 $$sum2 = $k1 << 1;
 $$sum34 = $$sum2 | 1;
 $$sum5 = (($$sum2) + ($k1))|0;
 $$sum6 = (($$sum5) + 1)|0;
 $$sum7 = (($$sum5) + ($k1))|0;
 $$09 = $A;$e0$010 = $3;$e2$011 = $2;$i$08 = $0;
 while(1) {
  $4 = +HEAPF32[$e0$010>>2];
  $5 = +HEAPF32[$e2$011>>2];
  $6 = $4 - $5;
  $7 = (($e0$010) + -4|0);
  $8 = +HEAPF32[$7>>2];
  $9 = (($e2$011) + -4|0);
  $10 = +HEAPF32[$9>>2];
  $11 = $8 - $10;
  $12 = $4 + $5;
  HEAPF32[$e0$010>>2] = $12;
  $13 = +HEAPF32[$9>>2];
  $14 = +HEAPF32[$7>>2];
  $15 = $13 + $14;
  HEAPF32[$7>>2] = $15;
  $16 = +HEAPF32[$$09>>2];
  $17 = $6 * $16;
  $18 = (($$09) + 4|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $11 * $19;
  $21 = $17 - $20;
  HEAPF32[$e2$011>>2] = $21;
  $22 = +HEAPF32[$$09>>2];
  $23 = $11 * $22;
  $24 = +HEAPF32[$18>>2];
  $25 = $6 * $24;
  $26 = $23 + $25;
  HEAPF32[$9>>2] = $26;
  $27 = (($$09) + ($k1<<2)|0);
  $28 = (($e0$010) + -8|0);
  $29 = +HEAPF32[$28>>2];
  $30 = (($e2$011) + -8|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $29 - $31;
  $33 = (($e0$010) + -12|0);
  $34 = +HEAPF32[$33>>2];
  $35 = (($e2$011) + -12|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $34 - $36;
  $38 = $29 + $31;
  HEAPF32[$28>>2] = $38;
  $39 = +HEAPF32[$35>>2];
  $40 = +HEAPF32[$33>>2];
  $41 = $39 + $40;
  HEAPF32[$33>>2] = $41;
  $42 = +HEAPF32[$27>>2];
  $43 = $32 * $42;
  $44 = (($$09) + ($$sum1<<2)|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $37 * $45;
  $47 = $43 - $46;
  HEAPF32[$30>>2] = $47;
  $48 = +HEAPF32[$27>>2];
  $49 = $37 * $48;
  $50 = +HEAPF32[$44>>2];
  $51 = $32 * $50;
  $52 = $49 + $51;
  HEAPF32[$35>>2] = $52;
  $53 = (($$09) + ($$sum2<<2)|0);
  $54 = (($e0$010) + -16|0);
  $55 = +HEAPF32[$54>>2];
  $56 = (($e2$011) + -16|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $55 - $57;
  $59 = (($e0$010) + -20|0);
  $60 = +HEAPF32[$59>>2];
  $61 = (($e2$011) + -20|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $60 - $62;
  $64 = $55 + $57;
  HEAPF32[$54>>2] = $64;
  $65 = +HEAPF32[$61>>2];
  $66 = +HEAPF32[$59>>2];
  $67 = $65 + $66;
  HEAPF32[$59>>2] = $67;
  $68 = +HEAPF32[$53>>2];
  $69 = $58 * $68;
  $70 = (($$09) + ($$sum34<<2)|0);
  $71 = +HEAPF32[$70>>2];
  $72 = $63 * $71;
  $73 = $69 - $72;
  HEAPF32[$56>>2] = $73;
  $74 = +HEAPF32[$53>>2];
  $75 = $63 * $74;
  $76 = +HEAPF32[$70>>2];
  $77 = $58 * $76;
  $78 = $75 + $77;
  HEAPF32[$61>>2] = $78;
  $79 = (($$09) + ($$sum5<<2)|0);
  $80 = (($e0$010) + -24|0);
  $81 = +HEAPF32[$80>>2];
  $82 = (($e2$011) + -24|0);
  $83 = +HEAPF32[$82>>2];
  $84 = $81 - $83;
  $85 = (($e0$010) + -28|0);
  $86 = +HEAPF32[$85>>2];
  $87 = (($e2$011) + -28|0);
  $88 = +HEAPF32[$87>>2];
  $89 = $86 - $88;
  $90 = $81 + $83;
  HEAPF32[$80>>2] = $90;
  $91 = +HEAPF32[$87>>2];
  $92 = +HEAPF32[$85>>2];
  $93 = $91 + $92;
  HEAPF32[$85>>2] = $93;
  $94 = +HEAPF32[$79>>2];
  $95 = $84 * $94;
  $96 = (($$09) + ($$sum6<<2)|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $89 * $97;
  $99 = $95 - $98;
  HEAPF32[$82>>2] = $99;
  $100 = +HEAPF32[$79>>2];
  $101 = $89 * $100;
  $102 = +HEAPF32[$96>>2];
  $103 = $84 * $102;
  $104 = $101 + $103;
  HEAPF32[$87>>2] = $104;
  $105 = (($e0$010) + -32|0);
  $106 = (($e2$011) + -32|0);
  $107 = (($$09) + ($$sum7<<2)|0);
  $108 = (($i$08) + -1)|0;
  $109 = ($108|0)>(0);
  if ($109) {
   $$09 = $107;$e0$010 = $105;$e2$011 = $106;$i$08 = $108;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _imdct_step3_inner_s_loop($n,$e,$i_off,$k_off,$A,$a_off,$k0) {
 $n = $n|0;
 $e = $e|0;
 $i_off = $i_off|0;
 $k_off = $k_off|0;
 $A = $A|0;
 $a_off = $a_off|0;
 $k0 = $k0|0;
 var $$sum = 0, $0 = 0.0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $ee0$02 = 0, $ee2$03 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$A>>2];
 $1 = (($A) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (($A) + ($a_off<<2)|0);
 $4 = +HEAPF32[$3>>2];
 $5 = (($a_off) + 1)|0;
 $6 = (($A) + ($5<<2)|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $a_off << 1;
 $9 = (($A) + ($8<<2)|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $8 | 1;
 $12 = (($A) + ($11<<2)|0);
 $13 = +HEAPF32[$12>>2];
 $14 = ($a_off*3)|0;
 $15 = (($A) + ($14<<2)|0);
 $16 = +HEAPF32[$15>>2];
 $17 = (($14) + 1)|0;
 $18 = (($A) + ($17<<2)|0);
 $19 = +HEAPF32[$18>>2];
 $20 = ($n|0)>(0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $$sum = (($k_off) + ($i_off))|0;
 $21 = (($e) + ($$sum<<2)|0);
 $22 = (($e) + ($i_off<<2)|0);
 $23 = (0 - ($k0))|0;
 $ee0$02 = $22;$ee2$03 = $21;$i$01 = $n;
 while(1) {
  $24 = +HEAPF32[$ee0$02>>2];
  $25 = +HEAPF32[$ee2$03>>2];
  $26 = $24 - $25;
  $27 = (($ee0$02) + -4|0);
  $28 = +HEAPF32[$27>>2];
  $29 = (($ee2$03) + -4|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $28 - $30;
  $32 = $24 + $25;
  HEAPF32[$ee0$02>>2] = $32;
  $33 = +HEAPF32[$27>>2];
  $34 = +HEAPF32[$29>>2];
  $35 = $33 + $34;
  HEAPF32[$27>>2] = $35;
  $36 = $0 * $26;
  $37 = $2 * $31;
  $38 = $36 - $37;
  HEAPF32[$ee2$03>>2] = $38;
  $39 = $0 * $31;
  $40 = $2 * $26;
  $41 = $40 + $39;
  HEAPF32[$29>>2] = $41;
  $42 = (($ee0$02) + -8|0);
  $43 = +HEAPF32[$42>>2];
  $44 = (($ee2$03) + -8|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $43 - $45;
  $47 = (($ee0$02) + -12|0);
  $48 = +HEAPF32[$47>>2];
  $49 = (($ee2$03) + -12|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $48 - $50;
  $52 = $43 + $45;
  HEAPF32[$42>>2] = $52;
  $53 = +HEAPF32[$47>>2];
  $54 = +HEAPF32[$49>>2];
  $55 = $53 + $54;
  HEAPF32[$47>>2] = $55;
  $56 = $4 * $46;
  $57 = $7 * $51;
  $58 = $56 - $57;
  HEAPF32[$44>>2] = $58;
  $59 = $4 * $51;
  $60 = $7 * $46;
  $61 = $60 + $59;
  HEAPF32[$49>>2] = $61;
  $62 = (($ee0$02) + -16|0);
  $63 = +HEAPF32[$62>>2];
  $64 = (($ee2$03) + -16|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $63 - $65;
  $67 = (($ee0$02) + -20|0);
  $68 = +HEAPF32[$67>>2];
  $69 = (($ee2$03) + -20|0);
  $70 = +HEAPF32[$69>>2];
  $71 = $68 - $70;
  $72 = $63 + $65;
  HEAPF32[$62>>2] = $72;
  $73 = +HEAPF32[$67>>2];
  $74 = +HEAPF32[$69>>2];
  $75 = $73 + $74;
  HEAPF32[$67>>2] = $75;
  $76 = $10 * $66;
  $77 = $13 * $71;
  $78 = $76 - $77;
  HEAPF32[$64>>2] = $78;
  $79 = $10 * $71;
  $80 = $13 * $66;
  $81 = $80 + $79;
  HEAPF32[$69>>2] = $81;
  $82 = (($ee0$02) + -24|0);
  $83 = +HEAPF32[$82>>2];
  $84 = (($ee2$03) + -24|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $83 - $85;
  $87 = (($ee0$02) + -28|0);
  $88 = +HEAPF32[$87>>2];
  $89 = (($ee2$03) + -28|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $88 - $90;
  $92 = $83 + $85;
  HEAPF32[$82>>2] = $92;
  $93 = +HEAPF32[$87>>2];
  $94 = +HEAPF32[$89>>2];
  $95 = $93 + $94;
  HEAPF32[$87>>2] = $95;
  $96 = $16 * $86;
  $97 = $19 * $91;
  $98 = $96 - $97;
  HEAPF32[$84>>2] = $98;
  $99 = $16 * $91;
  $100 = $19 * $86;
  $101 = $100 + $99;
  HEAPF32[$89>>2] = $101;
  $102 = (($ee0$02) + ($23<<2)|0);
  $103 = (($ee2$03) + ($23<<2)|0);
  $104 = (($i$01) + -1)|0;
  $105 = ($104|0)>(0);
  if ($105) {
   $ee0$02 = $102;$ee2$03 = $103;$i$01 = $104;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _imdct_step3_inner_s_loop_ld654($n,$e,$i_off,$A,$base_n) {
 $n = $n|0;
 $e = $e|0;
 $i_off = $i_off|0;
 $A = $A|0;
 $base_n = $base_n|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0;
 var $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $8 = 0, $9 = 0.0, $z$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $base_n >> 3;
 $1 = (($A) + ($0<<2)|0);
 $2 = +HEAPF32[$1>>2];
 $3 = $n << 4;
 $$sum = (($i_off) - ($3))|0;
 $4 = (($e) + ($$sum<<2)|0);
 $5 = ($$sum|0)<($i_off|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($e) + ($i_off<<2)|0);
 $z$01 = $6;
 while(1) {
  $7 = +HEAPF32[$z$01>>2];
  $8 = (($z$01) + -32|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $7 - $9;
  $11 = (($z$01) + -4|0);
  $12 = +HEAPF32[$11>>2];
  $13 = (($z$01) + -36|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $12 - $14;
  $16 = $7 + $9;
  HEAPF32[$z$01>>2] = $16;
  $17 = +HEAPF32[$11>>2];
  $18 = +HEAPF32[$13>>2];
  $19 = $17 + $18;
  HEAPF32[$11>>2] = $19;
  HEAPF32[$8>>2] = $10;
  HEAPF32[$13>>2] = $15;
  $20 = (($z$01) + -8|0);
  $21 = +HEAPF32[$20>>2];
  $22 = (($z$01) + -40|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $21 - $23;
  $25 = (($z$01) + -12|0);
  $26 = +HEAPF32[$25>>2];
  $27 = (($z$01) + -44|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $26 - $28;
  $30 = $21 + $23;
  HEAPF32[$20>>2] = $30;
  $31 = +HEAPF32[$25>>2];
  $32 = +HEAPF32[$27>>2];
  $33 = $31 + $32;
  HEAPF32[$25>>2] = $33;
  $34 = $24 + $29;
  $35 = $2 * $34;
  HEAPF32[$22>>2] = $35;
  $36 = $29 - $24;
  $37 = $2 * $36;
  HEAPF32[$27>>2] = $37;
  $38 = (($z$01) + -48|0);
  $39 = +HEAPF32[$38>>2];
  $40 = (($z$01) + -16|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $39 - $41;
  $43 = (($z$01) + -20|0);
  $44 = +HEAPF32[$43>>2];
  $45 = (($z$01) + -52|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $44 - $46;
  $48 = $39 + $41;
  HEAPF32[$40>>2] = $48;
  $49 = +HEAPF32[$43>>2];
  $50 = +HEAPF32[$45>>2];
  $51 = $49 + $50;
  HEAPF32[$43>>2] = $51;
  HEAPF32[$38>>2] = $47;
  HEAPF32[$45>>2] = $42;
  $52 = (($z$01) + -56|0);
  $53 = +HEAPF32[$52>>2];
  $54 = (($z$01) + -24|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $53 - $55;
  $57 = (($z$01) + -28|0);
  $58 = +HEAPF32[$57>>2];
  $59 = (($z$01) + -60|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $58 - $60;
  $62 = $53 + $55;
  HEAPF32[$54>>2] = $62;
  $63 = +HEAPF32[$57>>2];
  $64 = +HEAPF32[$59>>2];
  $65 = $63 + $64;
  HEAPF32[$57>>2] = $65;
  $66 = $56 + $61;
  $67 = $2 * $66;
  HEAPF32[$52>>2] = $67;
  $68 = $56 - $61;
  $69 = $2 * $68;
  HEAPF32[$59>>2] = $69;
  _iter_54($z$01);
  _iter_54($8);
  $70 = (($z$01) + -64|0);
  $71 = ($70>>>0)>($4>>>0);
  if ($71) {
   $z$01 = $70;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _iter_54($z) {
 $z = $z|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$z>>2];
 $1 = (($z) + -16|0);
 $2 = +HEAPF32[$1>>2];
 $3 = $0 - $2;
 $4 = $0 + $2;
 $5 = (($z) + -8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (($z) + -24|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 + $8;
 $10 = $6 - $8;
 $11 = $4 + $9;
 HEAPF32[$z>>2] = $11;
 $12 = $4 - $9;
 HEAPF32[$5>>2] = $12;
 $13 = (($z) + -12|0);
 $14 = +HEAPF32[$13>>2];
 $15 = (($z) + -28|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $14 - $16;
 $18 = $3 + $17;
 HEAPF32[$1>>2] = $18;
 $19 = $3 - $17;
 HEAPF32[$7>>2] = $19;
 $20 = (($z) + -4|0);
 $21 = +HEAPF32[$20>>2];
 $22 = (($z) + -20|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $21 - $23;
 $25 = $21 + $23;
 $26 = +HEAPF32[$13>>2];
 $27 = +HEAPF32[$15>>2];
 $28 = $26 + $27;
 $29 = $25 + $28;
 HEAPF32[$20>>2] = $29;
 $30 = $25 - $28;
 HEAPF32[$13>>2] = $30;
 $31 = $24 - $10;
 HEAPF32[$22>>2] = $31;
 $32 = $10 + $24;
 HEAPF32[$15>>2] = $32;
 STACKTOP = sp;return;
}
function _draw_line($output,$x0,$y0,$x1,$y1,$n) {
 $output = $output|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $x1 = $x1|0;
 $y1 = $y1|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err$05 = 0, $err$1 = 0, $exitcond = 0, $ispos = 0, $ispos1 = 0, $n$x1 = 0, $neg = 0, $neg2 = 0, $smax = 0, $sy$0 = 0, $sy$0$pn = 0, $x$0 = 0;
 var $x$03 = 0, $x$06 = 0, $y$04 = 0, $y$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($y1) - ($y0))|0;
 $1 = (($x1) - ($x0))|0;
 $ispos = ($0|0)>(-1);
 $neg = (0 - ($0))|0;
 $2 = $ispos ? $0 : $neg;
 $3 = (($0|0) / ($1|0))&-1;
 $4 = $0 >> 31;
 $5 = $4 | 1;
 $ispos1 = ($3|0)>(-1);
 $neg2 = (0 - ($3))|0;
 $6 = $ispos1 ? $3 : $neg2;
 $7 = Math_imul($6, $1)|0;
 $8 = (($2) - ($7))|0;
 $9 = ($x1|0)>($n|0);
 $n$x1 = $9 ? $n : $x1;
 $10 = (19432 + ($y0<<2)|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (($output) + ($x0<<2)|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $11 * $13;
 HEAPF32[$12>>2] = $14;
 $x$03 = (($x0) + 1)|0;
 $15 = ($x$03|0)<($n$x1|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $n ^ -1;
 $17 = $x1 ^ -1;
 $18 = ($16|0)>($17|0);
 $smax = $18 ? $16 : $17;
 $19 = $smax ^ -1;
 $err$05 = 0;$x$06 = $x$03;$y$04 = $y0;
 while(1) {
  $20 = (($err$05) + ($8))|0;
  $21 = ($20|0)<($1|0);
  $sy$0 = $21 ? 0 : $5;
  $22 = $21 ? 0 : $1;
  $err$1 = (($20) - ($22))|0;
  $sy$0$pn = (($y$04) + ($3))|0;
  $y$1 = (($sy$0$pn) + ($sy$0))|0;
  $23 = (19432 + ($y$1<<2)|0);
  $24 = +HEAPF32[$23>>2];
  $25 = (($output) + ($x$06<<2)|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $24 * $26;
  HEAPF32[$25>>2] = $27;
  $x$0 = (($x$06) + 1)|0;
  $exitcond = ($x$0|0)==($19|0);
  if ($exitcond) {
   break;
  } else {
   $err$05 = $err$1;$x$06 = $x$0;$y$04 = $y$1;
  }
 }
 STACKTOP = sp;return;
}
function _make_block_array($mem,$count,$size) {
 $mem = $mem|0;
 $count = $count|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond = 0, $i$01 = 0, $q$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return ($mem|0);
 }
 $1 = (($mem) + ($count<<2)|0);
 $i$01 = 0;$q$02 = $1;
 while(1) {
  $2 = (($mem) + ($i$01<<2)|0);
  HEAP32[$2>>2] = $q$02;
  $3 = (($q$02) + ($size)|0);
  $4 = (($i$01) + 1)|0;
  $exitcond = ($4|0)==($count|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $4;$q$02 = $3;
  }
 }
 STACKTOP = sp;return ($mem|0);
}
function _codebook_decode_deinterleave_repeat_2($f,$c,$outputs,$c_inter_p,$p_inter_p,$len,$total_decode) {
 $f = $f|0;
 $c = $c|0;
 $outputs = $outputs|0;
 $c_inter_p = $c_inter_p|0;
 $p_inter_p = $p_inter_p|0;
 $len = $len|0;
 $total_decode = $total_decode|0;
 var $$ = 0, $$0 = 0, $$0121 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$p_inter$1 = 0, $$p_inter$4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $c_inter$0$lcssa = 0, $c_inter$020 = 0, $c_inter$18 = 0, $c_inter$3 = 0, $c_inter$4 = 0, $effective$018 = 0, $effective$1 = 0, $exitcond = 0, $i$06 = 0, $i$1 = 0, $i$2$lcssa = 0;
 var $i$210 = 0, $last$05 = 0.0, $p_inter$0$lcssa = 0, $p_inter$019 = 0, $p_inter$17 = 0, $p_inter$3 = 0, $p_inter$4$lcssa = 0, $p_inter$411 = 0, $p_inter$5 = 0, $z$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$c_inter_p>>2]|0;
 $1 = HEAP32[$p_inter_p>>2]|0;
 $2 = HEAP32[$c>>2]|0;
 $3 = (($c) + 21|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  _error($f,21);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($total_decode|0)>(0);
 L5: do {
  if ($6) {
   $7 = (($f) + 1412|0);
   $8 = (($f) + 1408|0);
   $9 = (($c) + 8|0);
   $10 = $len << 1;
   $11 = (($c) + 22|0);
   $12 = (($c) + 28|0);
   $13 = (($outputs) + 4|0);
   $14 = (($c) + 28|0);
   $15 = (($c) + 28|0);
   $16 = (($c) + 28|0);
   $$0121 = $total_decode;$c_inter$020 = $0;$effective$018 = $2;$p_inter$019 = $1;
   while(1) {
    $17 = HEAP32[$7>>2]|0;
    $18 = ($17|0)<(10);
    if ($18) {
     _prep_huffman($f);
    }
    $19 = HEAP32[$8>>2]|0;
    $20 = $19 & 1023;
    $21 = ((($c) + ($20<<1)|0) + 36|0);
    $22 = HEAP16[$21>>1]|0;
    $23 = $22 << 16 >> 16;
    $24 = ($22<<16>>16)>(-1);
    if ($24) {
     $25 = HEAP32[$9>>2]|0;
     $26 = (($25) + ($23)|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = $19 >>> $28;
     HEAP32[$8>>2] = $29;
     $30 = HEAP32[$7>>2]|0;
     $31 = (($30) - ($28))|0;
     $32 = ($31|0)<(0);
     $$ = $32 ? 0 : $31;
     HEAP32[$7>>2] = $$;
     $$2 = $32 ? -1 : $23;
     $z$0 = $$2;
    } else {
     $33 = (_codebook_decode_scalar_raw($f,$c)|0);
     $z$0 = $33;
    }
    $34 = ($z$0|0)<(0);
    if ($34) {
     break;
    }
    $41 = $p_inter$019 << 1;
    $42 = (($41) + ($effective$018))|0;
    $43 = (($42) + ($c_inter$020))|0;
    $44 = ($43|0)>($10|0);
    if ($44) {
     $45 = (($10) - ($41))|0;
     $46 = (($45) + ($c_inter$020))|0;
     $effective$1 = $46;
    } else {
     $effective$1 = $effective$018;
    }
    $47 = HEAP32[$c>>2]|0;
    $48 = Math_imul($47, $z$0)|0;
    $49 = HEAP8[$11>>0]|0;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $67 = ($c_inter$020|0)==(1);
     if ($67) {
      $68 = (($outputs) + ($c_inter$020<<2)|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if (!($70)) {
       $71 = HEAP32[$12>>2]|0;
       $72 = (($71) + ($48<<2)|0);
       $73 = +HEAPF32[$72>>2];
       $74 = $73 + 0.0;
       $75 = (($69) + ($p_inter$019<<2)|0);
       $76 = +HEAPF32[$75>>2];
       $77 = $76 + $74;
       HEAPF32[$75>>2] = $77;
      }
      $78 = (($p_inter$019) + 1)|0;
      $c_inter$3 = 0;$i$1 = 1;$p_inter$3 = $78;
     } else {
      $c_inter$3 = $c_inter$020;$i$1 = 0;$p_inter$3 = $p_inter$019;
     }
     $79 = HEAP32[$outputs>>2]|0;
     $80 = HEAP32[$13>>2]|0;
     $81 = (($i$1) + 1)|0;
     $82 = ($81|0)<($effective$1|0);
     if ($82) {
      $83 = HEAP32[$15>>2]|0;
      $84 = ($79|0)==(0|0);
      $85 = ($80|0)==(0|0);
      $i$210 = $i$1;$p_inter$411 = $p_inter$3;
      while(1) {
       $86 = (($i$210) + ($48))|0;
       $87 = (($86) + 1)|0;
       $88 = (($83) + ($87<<2)|0);
       $89 = +HEAPF32[$88>>2];
       $90 = $89 + 0.0;
       if (!($84)) {
        $91 = (($83) + ($86<<2)|0);
        $92 = +HEAPF32[$91>>2];
        $93 = $92 + 0.0;
        $94 = (($79) + ($p_inter$411<<2)|0);
        $95 = +HEAPF32[$94>>2];
        $96 = $95 + $93;
        HEAPF32[$94>>2] = $96;
       }
       if (!($85)) {
        $97 = (($80) + ($p_inter$411<<2)|0);
        $98 = +HEAPF32[$97>>2];
        $99 = $90 + $98;
        HEAPF32[$97>>2] = $99;
       }
       $100 = (($p_inter$411) + 1)|0;
       $101 = (($i$210) + 2)|0;
       $102 = (($i$210) + 3)|0;
       $103 = ($102|0)<($effective$1|0);
       if ($103) {
        $i$210 = $101;$p_inter$411 = $100;
       } else {
        $i$2$lcssa = $101;$p_inter$4$lcssa = $100;
        break;
       }
      }
     } else {
      $i$2$lcssa = $i$1;$p_inter$4$lcssa = $p_inter$3;
     }
     $104 = ($i$2$lcssa|0)<($effective$1|0);
     if ($104) {
      $105 = (($outputs) + ($c_inter$3<<2)|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = ($106|0)==(0|0);
      if (!($107)) {
       $108 = HEAP32[$14>>2]|0;
       $109 = (($i$2$lcssa) + ($48))|0;
       $110 = (($108) + ($109<<2)|0);
       $111 = +HEAPF32[$110>>2];
       $112 = $111 + 0.0;
       $113 = (($106) + ($p_inter$4$lcssa<<2)|0);
       $114 = +HEAPF32[$113>>2];
       $115 = $114 + $112;
       HEAPF32[$113>>2] = $115;
      }
      $116 = (($c_inter$3) + 1)|0;
      $117 = ($116|0)==(2);
      $118 = $117&1;
      $$p_inter$4 = (($p_inter$4$lcssa) + ($118))|0;
      $$4 = $117 ? 0 : $116;
      $c_inter$4 = $$4;$p_inter$5 = $$p_inter$4;
     } else {
      $c_inter$4 = $c_inter$3;$p_inter$5 = $p_inter$4$lcssa;
     }
    } else {
     $51 = ($effective$1|0)>(0);
     if ($51) {
      $52 = HEAP32[$16>>2]|0;
      $c_inter$18 = $c_inter$020;$i$06 = 0;$last$05 = 0.0;$p_inter$17 = $p_inter$019;
      while(1) {
       $53 = (($i$06) + ($48))|0;
       $54 = (($52) + ($53<<2)|0);
       $55 = +HEAPF32[$54>>2];
       $56 = $last$05 + $55;
       $57 = (($outputs) + ($c_inter$18<<2)|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = ($58|0)==(0|0);
       if (!($59)) {
        $60 = (($58) + ($p_inter$17<<2)|0);
        $61 = +HEAPF32[$60>>2];
        $62 = $56 + $61;
        HEAPF32[$60>>2] = $62;
       }
       $63 = (($c_inter$18) + 1)|0;
       $64 = ($63|0)==(2);
       $65 = $64&1;
       $$p_inter$1 = (($65) + ($p_inter$17))|0;
       $$3 = $64 ? 0 : $63;
       $66 = (($i$06) + 1)|0;
       $exitcond = ($66|0)==($effective$1|0);
       if ($exitcond) {
        $c_inter$4 = $$3;$p_inter$5 = $$p_inter$1;
        break;
       } else {
        $c_inter$18 = $$3;$i$06 = $66;$last$05 = $56;$p_inter$17 = $$p_inter$1;
       }
      }
     } else {
      $c_inter$4 = $c_inter$020;$p_inter$5 = $p_inter$019;
     }
    }
    $119 = (($$0121) - ($effective$1))|0;
    $120 = ($119|0)>(0);
    if ($120) {
     $$0121 = $119;$c_inter$020 = $c_inter$4;$effective$018 = $effective$1;$p_inter$019 = $p_inter$5;
    } else {
     $c_inter$0$lcssa = $c_inter$4;$p_inter$0$lcssa = $p_inter$5;
     break L5;
    }
   }
   $35 = (($f) + 1392|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $38 = (($f) + 1400|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
   _error($f,21);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $c_inter$0$lcssa = $0;$p_inter$0$lcssa = $1;
  }
 } while(0);
 HEAP32[$c_inter_p>>2] = $c_inter$0$lcssa;
 HEAP32[$p_inter_p>>2] = $p_inter$0$lcssa;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _codebook_decode_deinterleave_repeat($f,$c,$outputs,$ch,$c_inter_p,$p_inter_p,$len,$total_decode) {
 $f = $f|0;
 $c = $c|0;
 $outputs = $outputs|0;
 $ch = $ch|0;
 $c_inter_p = $c_inter_p|0;
 $p_inter_p = $p_inter_p|0;
 $len = $len|0;
 $total_decode = $total_decode|0;
 var $$ = 0, $$0 = 0, $$0126 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$p_inter$1 = 0, $$p_inter$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $c_inter$0$lcssa = 0, $c_inter$025 = 0, $c_inter$18 = 0, $c_inter$314 = 0, $c_inter$5 = 0;
 var $effective$024 = 0, $effective$1 = 0, $exitcond = 0, $exitcond30 = 0, $i$06 = 0, $i$113 = 0, $last$07 = 0.0, $p_inter$0$lcssa = 0, $p_inter$023 = 0, $p_inter$15 = 0, $p_inter$312 = 0, $p_inter$5 = 0, $z$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$c_inter_p>>2]|0;
 $1 = HEAP32[$p_inter_p>>2]|0;
 $2 = HEAP32[$c>>2]|0;
 $3 = (($c) + 21|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  _error($f,21);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($total_decode|0)>(0);
 L5: do {
  if ($6) {
   $7 = (($f) + 1412|0);
   $8 = (($f) + 1408|0);
   $9 = (($c) + 8|0);
   $10 = (($c) + 23|0);
   $11 = Math_imul($len, $ch)|0;
   $12 = (($c) + 22|0);
   $13 = (($c) + 28|0);
   $14 = (($c) + 28|0);
   $15 = (($c) + 2092|0);
   $$0126 = $total_decode;$c_inter$025 = $0;$effective$024 = $2;$p_inter$023 = $1;
   while(1) {
    $16 = HEAP32[$7>>2]|0;
    $17 = ($16|0)<(10);
    if ($17) {
     _prep_huffman($f);
    }
    $18 = HEAP32[$8>>2]|0;
    $19 = $18 & 1023;
    $20 = ((($c) + ($19<<1)|0) + 36|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21 << 16 >> 16;
    $23 = ($21<<16>>16)>(-1);
    if ($23) {
     $24 = HEAP32[$9>>2]|0;
     $25 = (($24) + ($22)|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = $18 >>> $27;
     HEAP32[$8>>2] = $28;
     $29 = HEAP32[$7>>2]|0;
     $30 = (($29) - ($27))|0;
     $31 = ($30|0)<(0);
     $$ = $31 ? 0 : $30;
     HEAP32[$7>>2] = $$;
     $$2 = $31 ? -1 : $22;
     $z$0 = $$2;
    } else {
     $32 = (_codebook_decode_scalar_raw($f,$c)|0);
     $z$0 = $32;
    }
    $33 = HEAP8[$10>>0]|0;
    $34 = ($33<<24>>24)==(0);
    if (!($34)) {
     $35 = HEAP32[$15>>2]|0;
     $36 = ($z$0|0)<($35|0);
     if (!($36)) {
      label = 12;
      break;
     }
    }
    $37 = ($z$0|0)<(0);
    if ($37) {
     break;
    }
    $44 = Math_imul($p_inter$023, $ch)|0;
    $45 = (($effective$024) + ($44))|0;
    $46 = (($45) + ($c_inter$025))|0;
    $47 = ($46|0)>($11|0);
    if ($47) {
     $48 = (($11) - ($44))|0;
     $49 = (($48) + ($c_inter$025))|0;
     $effective$1 = $49;
    } else {
     $effective$1 = $effective$024;
    }
    $50 = HEAP32[$c>>2]|0;
    $51 = Math_imul($50, $z$0)|0;
    $52 = HEAP8[$12>>0]|0;
    $53 = ($52<<24>>24)==(0);
    $54 = ($effective$1|0)>(0);
    if ($53) {
     if ($54) {
      $c_inter$314 = $c_inter$025;$i$113 = 0;$p_inter$312 = $p_inter$023;
      while(1) {
       $70 = (($outputs) + ($c_inter$314<<2)|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = ($71|0)==(0|0);
       if (!($72)) {
        $73 = HEAP32[$14>>2]|0;
        $74 = (($i$113) + ($51))|0;
        $75 = (($73) + ($74<<2)|0);
        $76 = +HEAPF32[$75>>2];
        $77 = $76 + 0.0;
        $78 = (($71) + ($p_inter$312<<2)|0);
        $79 = +HEAPF32[$78>>2];
        $80 = $79 + $77;
        HEAPF32[$78>>2] = $80;
       }
       $81 = (($c_inter$314) + 1)|0;
       $82 = ($81|0)==($ch|0);
       $83 = $82&1;
       $$p_inter$3 = (($83) + ($p_inter$312))|0;
       $$4 = $82 ? 0 : $81;
       $84 = (($i$113) + 1)|0;
       $exitcond30 = ($84|0)==($effective$1|0);
       if ($exitcond30) {
        $c_inter$5 = $$4;$p_inter$5 = $$p_inter$3;
        break;
       } else {
        $c_inter$314 = $$4;$i$113 = $84;$p_inter$312 = $$p_inter$3;
       }
      }
     } else {
      $c_inter$5 = $c_inter$025;$p_inter$5 = $p_inter$023;
     }
    } else {
     if ($54) {
      $55 = HEAP32[$13>>2]|0;
      $c_inter$18 = $c_inter$025;$i$06 = 0;$last$07 = 0.0;$p_inter$15 = $p_inter$023;
      while(1) {
       $56 = (($i$06) + ($51))|0;
       $57 = (($55) + ($56<<2)|0);
       $58 = +HEAPF32[$57>>2];
       $59 = $last$07 + $58;
       $60 = (($outputs) + ($c_inter$18<<2)|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)==(0|0);
       if (!($62)) {
        $63 = (($61) + ($p_inter$15<<2)|0);
        $64 = +HEAPF32[$63>>2];
        $65 = $59 + $64;
        HEAPF32[$63>>2] = $65;
       }
       $66 = (($c_inter$18) + 1)|0;
       $67 = ($66|0)==($ch|0);
       $68 = $67&1;
       $$p_inter$1 = (($68) + ($p_inter$15))|0;
       $$3 = $67 ? 0 : $66;
       $69 = (($i$06) + 1)|0;
       $exitcond = ($69|0)==($effective$1|0);
       if ($exitcond) {
        $c_inter$5 = $$3;$p_inter$5 = $$p_inter$1;
        break;
       } else {
        $c_inter$18 = $$3;$i$06 = $69;$last$07 = $59;$p_inter$15 = $$p_inter$1;
       }
      }
     } else {
      $c_inter$5 = $c_inter$025;$p_inter$5 = $p_inter$023;
     }
    }
    $85 = (($$0126) - ($effective$1))|0;
    $86 = ($85|0)>(0);
    if ($86) {
     $$0126 = $85;$c_inter$025 = $c_inter$5;$effective$024 = $effective$1;$p_inter$023 = $p_inter$5;
    } else {
     $c_inter$0$lcssa = $c_inter$5;$p_inter$0$lcssa = $p_inter$5;
     break L5;
    }
   }
   if ((label|0) == 12) {
    ___assert_fail((20504|0),(17648|0),1432,(20544|0));
    // unreachable;
   }
   $38 = (($f) + 1392|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $41 = (($f) + 1400|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)==(0);
    if (!($43)) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
   _error($f,21);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $c_inter$0$lcssa = $0;$p_inter$0$lcssa = $1;
  }
 } while(0);
 HEAP32[$c_inter_p>>2] = $c_inter$0$lcssa;
 HEAP32[$p_inter_p>>2] = $p_inter$0$lcssa;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _residue_decode($f,$book,$target,$offset,$n,$rtype) {
 $f = $f|0;
 $book = $book|0;
 $target = $target|0;
 $offset = $offset|0;
 $n = $n|0;
 $rtype = $rtype|0;
 var $$0 = 0, $$015 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $k$02 = 0, $k$16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($rtype|0)==(0);
 L1: do {
  if ($0) {
   $2 = HEAP32[$book>>2]|0;
   $3 = (($n|0) / ($2|0))&-1;
   $4 = ($3|0)>(0);
   if ($4) {
    $5 = (($n) - ($offset))|0;
    $k$02 = 0;
    while(1) {
     $$sum = (($k$02) + ($offset))|0;
     $8 = (($target) + ($$sum<<2)|0);
     $9 = (($5) - ($k$02))|0;
     $10 = (_codebook_decode_step($f,$book,$8,$9,$3)|0);
     $11 = ($10|0)==(0);
     $7 = (($k$02) + 1)|0;
     if ($11) {
      $$0 = 0;
      break L1;
     }
     $6 = ($7|0)<($3|0);
     if ($6) {
      $k$02 = $7;
     } else {
      $$0 = 1;
      break;
     }
    }
   } else {
    $$0 = 1;
   }
  } else {
   $1 = ($n|0)>(0);
   if ($1) {
    $$015 = $offset;$k$16 = 0;
    while(1) {
     $12 = (($target) + ($$015<<2)|0);
     $13 = (($n) - ($k$16))|0;
     $14 = (_codebook_decode($f,$book,$12,$13)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      $$0 = 0;
      break L1;
     }
     $16 = HEAP32[$book>>2]|0;
     $17 = (($16) + ($k$16))|0;
     $18 = (($16) + ($$015))|0;
     $19 = ($17|0)<($n|0);
     if ($19) {
      $$015 = $18;$k$16 = $17;
     } else {
      $$0 = 1;
      break;
     }
    }
   } else {
    $$0 = 1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _codebook_decode_step($f,$c,$output,$len,$step) {
 $f = $f|0;
 $c = $c|0;
 $output = $output|0;
 $len = $len|0;
 $step = $step|0;
 var $$0 = 0, $$len = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $last$0$ = 0.0, $last$03 = 0.0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_codebook_decode_start($f,$c)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$c>>2]|0;
 $3 = ($2|0)<($len|0);
 $$len = $3 ? $2 : $len;
 $4 = Math_imul($2, $0)|0;
 $5 = ($$len|0)>(0);
 if (!($5)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($c) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($c) + 22|0);
 $9 = $2 ^ -1;
 $10 = $len ^ -1;
 $11 = ($9|0)>($10|0);
 $smax = $11 ? $9 : $10;
 $12 = $smax ^ -1;
 $i$02 = 0;$last$03 = 0.0;
 while(1) {
  $13 = (($i$02) + ($4))|0;
  $14 = (($7) + ($13<<2)|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $last$03 + $15;
  $17 = Math_imul($i$02, $step)|0;
  $18 = (($output) + ($17<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $19 + $16;
  HEAPF32[$18>>2] = $20;
  $21 = HEAP8[$8>>0]|0;
  $22 = ($21<<24>>24)==(0);
  $last$0$ = $22 ? $last$03 : $16;
  $23 = (($i$02) + 1)|0;
  $exitcond = ($23|0)==($12|0);
  if ($exitcond) {
   $$0 = 1;
   break;
  } else {
   $i$02 = $23;$last$03 = $last$0$;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _codebook_decode($f,$c,$output,$len) {
 $f = $f|0;
 $c = $c|0;
 $output = $output|0;
 $len = $len|0;
 var $$0 = 0, $$len = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $exitcond9 = 0, $i$05 = 0, $i$12 = 0, $last$06 = 0.0, $smax = 0, $smax8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_codebook_decode_start($f,$c)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$c>>2]|0;
 $3 = ($2|0)<($len|0);
 $$len = $3 ? $2 : $len;
 $4 = Math_imul($2, $0)|0;
 $5 = (($c) + 22|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 $8 = ($$len|0)>(0);
 if ($7) {
  if (!($8)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $16 = (($c) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $2 ^ -1;
  $19 = $len ^ -1;
  $20 = ($18|0)>($19|0);
  $smax = $20 ? $18 : $19;
  $21 = $smax ^ -1;
  $i$12 = 0;
  while(1) {
   $32 = (($i$12) + ($4))|0;
   $33 = (($17) + ($32<<2)|0);
   $34 = +HEAPF32[$33>>2];
   $35 = $34 + 0.0;
   $36 = (($output) + ($i$12<<2)|0);
   $37 = +HEAPF32[$36>>2];
   $38 = $37 + $35;
   HEAPF32[$36>>2] = $38;
   $39 = (($i$12) + 1)|0;
   $exitcond = ($39|0)==($21|0);
   if ($exitcond) {
    $$0 = 1;
    break;
   } else {
    $i$12 = $39;
   }
  }
  STACKTOP = sp;return ($$0|0);
 } else {
  if (!($8)) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $9 = (($c) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($c) + 12|0);
  $12 = $2 ^ -1;
  $13 = $len ^ -1;
  $14 = ($12|0)>($13|0);
  $smax8 = $14 ? $12 : $13;
  $15 = $smax8 ^ -1;
  $i$05 = 0;$last$06 = 0.0;
  while(1) {
   $22 = (($i$05) + ($4))|0;
   $23 = (($10) + ($22<<2)|0);
   $24 = +HEAPF32[$23>>2];
   $25 = $last$06 + $24;
   $26 = (($output) + ($i$05<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $27 + $25;
   HEAPF32[$26>>2] = $28;
   $29 = +HEAPF32[$11>>2];
   $30 = $25 + $29;
   $31 = (($i$05) + 1)|0;
   $exitcond9 = ($31|0)==($15|0);
   if ($exitcond9) {
    $$0 = 1;
    break;
   } else {
    $i$05 = $31;$last$06 = $30;
   }
  }
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _codebook_decode_start($f,$c) {
 $f = $f|0;
 $c = $c|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $z$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + 21|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  _error($f,21);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($f) + 1412|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(10);
 if ($5) {
  _prep_huffman($f);
 }
 $6 = (($f) + 1408|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1023;
 $9 = ((($c) + ($8<<1)|0) + 36|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = ($10<<16>>16)>(-1);
 if ($12) {
  $13 = (($c) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $7 >>> $17;
  HEAP32[$6>>2] = $18;
  $19 = HEAP32[$3>>2]|0;
  $20 = (($19) - ($17))|0;
  $21 = ($20|0)<(0);
  $$ = $21 ? 0 : $20;
  HEAP32[$3>>2] = $$;
  $$1 = $21 ? -1 : $11;
  $z$0 = $$1;
 } else {
  $22 = (_codebook_decode_scalar_raw($f,$c)|0);
  $z$0 = $22;
 }
 $23 = (($c) + 23|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ($24<<24>>24)==(0);
 if (!($25)) {
  $26 = (($c) + 2092|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($z$0|0)<($27|0);
  if (!($28)) {
   ___assert_fail((20456|0),(17648|0),1338,(20480|0));
   // unreachable;
  }
 }
 $29 = ($z$0|0)<(0);
 if (!($29)) {
  $$0 = $z$0;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = (($f) + 1392|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)==(0);
 if ($32) {
  $33 = (($f) + 1400|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0);
  if (!($35)) {
   $$0 = $z$0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _error($f,21);
 $$0 = $z$0;
 STACKTOP = sp;return ($$0|0);
}
function _ldexp($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$$i = 0, $$0$be$i = 0, $$0$be$i20 = 0, $$0$i50 = 0, $$01$be$i = 0, $$01$be$i19 = 0, $$01$i5$i = 0, $$012$i = 0, $$012$i16 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$i3469 = 0, $$02$i72 = 0, $$02$us$i = 0, $$02$us$i32 = 0, $$03$i = 0, $$03$i15 = 0, $$66 = 0, $$67 = 0;
 var $$lcssa75 = 0, $$lcssa76 = 0, $$pre = 0, $$pre$i = 0, $$pre$i22 = 0, $$pre$i28 = 0, $$pre$i9 = 0, $$sum = 0, $$sum$i = 0, $$sum$i18 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i31 = 0, $head$0$lcssa = 0, $head$077 = 0;
 var $head$1 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i24 = 0, $i$01$us$i = 0, $i$01$us$i30 = 0, $i$04$i = 0, $i$04$i14 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $pshift$0$lcssa = 0, $pshift$078 = 0, $pshift$1 = 0, $pshift$2 = 0, $sum = 0, $sum$i = 0, $sum$i17 = 0, $tmp$i = 0, $tmp$i26 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i26 = sp + 680|0;
 $tmp$i = sp + 424|0;
 $ar$i = sp;
 $lp = sp + 232|0;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = (($lp) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = ($width>>>0)>(256);
  $15 = $14 ? 256 : $width;
  $16 = ($15|0)==($width|0);
  $17 = $11;
  $19 = 1;$61 = 0;$head$077 = $base;$pshift$078 = 1;
  while(1) {
   $18 = $19 & 3;
   $20 = ($18|0)==(3);
   do {
    if ($20) {
     HEAP32[$ar$i>>2] = $head$077;
     $21 = ($pshift$078|0)>(1);
     L13: do {
      if ($21) {
       $$012$i = $pshift$078;$$03$i = $head$077;$27 = $head$077;$i$04$i = 1;
       while(1) {
        $22 = (($$03$i) + ($10)|0);
        $23 = (($$012$i) + -2)|0;
        $24 = (($lp) + ($23<<2)|0);
        $25 = HEAP32[$24>>2]|0;
        $sum$i = (($25) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $26 = (($$03$i) + ($$sum$i)|0);
        $28 = (FUNCTION_TABLE_iii[$cmp & 3]($27,$26)|0);
        $29 = ($28|0)>(-1);
        if ($29) {
         $30 = (FUNCTION_TABLE_iii[$cmp & 3]($27,$22)|0);
         $31 = ($30|0)>(-1);
         if ($31) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $32 = (FUNCTION_TABLE_iii[$cmp & 3]($26,$22)|0);
        $33 = ($32|0)>(-1);
        $34 = (($i$04$i) + 1)|0;
        $35 = (($ar$i) + ($i$04$i<<2)|0);
        if ($33) {
         HEAP32[$35>>2] = $26;
         $36 = (($$012$i) + -1)|0;
         $$0$be$i = $26;$$01$be$i = $36;
        } else {
         HEAP32[$35>>2] = $22;
         $$0$be$i = $22;$$01$be$i = $23;
        }
        $37 = ($$01$be$i|0)>(1);
        if (!($37)) {
         $i$0$lcssa$i = $34;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$27 = $$pre$i;$i$04$i = $34;
       }
       $38 = ($i$0$lcssa$i|0)<(2);
       if (!($38)) {
        $39 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$39>>2] = $tmp$i;
        if (!($13)) {
         $40 = ($i$0$lcssa$i|0)>(0);
         if ($40) {
          $$02$us$i = $width;$53 = $tmp$i;
         } else {
          $41 = HEAP32[$ar$i>>2]|0;
          _memcpy(($tmp$i|0),($41|0),($15|0))|0;
          if ($16) {
           break;
          } else {
           $$02$i72 = $width;$55 = $15;
          }
          while(1) {
           $54 = (($$02$i72) - ($55))|0;
           $56 = ($54>>>0)>(256);
           $57 = $56 ? 256 : $54;
           _memcpy(($tmp$i|0),($41|0),($57|0))|0;
           $58 = ($54|0)==($57|0);
           if ($58) {
            break L13;
           } else {
            $$02$i72 = $54;$55 = $57;
           }
          }
         }
         while(1) {
          $51 = ($$02$us$i>>>0)>(256);
          $43 = $51 ? 256 : $$02$us$i;
          $52 = HEAP32[$ar$i>>2]|0;
          _memcpy(($53|0),($52|0),($43|0))|0;
          $49 = $52;$i$01$us$i = 0;
          while(1) {
           $45 = (($ar$i) + ($i$01$us$i<<2)|0);
           $46 = (($i$01$us$i) + 1)|0;
           $47 = (($ar$i) + ($46<<2)|0);
           $48 = HEAP32[$47>>2]|0;
           _memcpy(($49|0),($48|0),($43|0))|0;
           $50 = (($49) + ($43)|0);
           HEAP32[$45>>2] = $50;
           $exitcond$i = ($46|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $49 = $48;$i$01$us$i = $46;
           }
          }
          $42 = ($$02$us$i|0)==($43|0);
          if ($42) {
           break L13;
          }
          $44 = (($$02$us$i) - ($43))|0;
          $$pre$i9 = HEAP32[$39>>2]|0;
          $$02$us$i = $44;$53 = $$pre$i9;
         }
        }
       }
      }
     } while(0);
     $59 = $19 >>> 2;
     $60 = $61 << 30;
     $62 = $59 | $60;
     $63 = $61 >>> 2;
     $64 = (($pshift$078) + 2)|0;
     $122 = $62;$182 = $63;$pshift$1 = $64;
    } else {
     $65 = (($pshift$078) + -1)|0;
     $66 = (($lp) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $head$077;
     $69 = (($17) - ($68))|0;
     $70 = ($67>>>0)<($69>>>0);
     L39: do {
      if ($70) {
       HEAP32[$ar$i>>2] = $head$077;
       $71 = ($pshift$078|0)>(1);
       if ($71) {
        $$012$i16 = $pshift$078;$$03$i15 = $head$077;$77 = $head$077;$i$04$i14 = 1;
        while(1) {
         $72 = (($$03$i15) + ($10)|0);
         $73 = (($$012$i16) + -2)|0;
         $74 = (($lp) + ($73<<2)|0);
         $75 = HEAP32[$74>>2]|0;
         $sum$i17 = (($75) + ($width))|0;
         $$sum$i18 = (0 - ($sum$i17))|0;
         $76 = (($$03$i15) + ($$sum$i18)|0);
         $78 = (FUNCTION_TABLE_iii[$cmp & 3]($77,$76)|0);
         $79 = ($78|0)>(-1);
         if ($79) {
          $80 = (FUNCTION_TABLE_iii[$cmp & 3]($77,$72)|0);
          $81 = ($80|0)>(-1);
          if ($81) {
           $i$0$lcssa$i24 = $i$04$i14;
           break;
          }
         }
         $82 = (FUNCTION_TABLE_iii[$cmp & 3]($76,$72)|0);
         $83 = ($82|0)>(-1);
         $84 = (($i$04$i14) + 1)|0;
         $85 = (($ar$i) + ($i$04$i14<<2)|0);
         if ($83) {
          HEAP32[$85>>2] = $76;
          $86 = (($$012$i16) + -1)|0;
          $$0$be$i20 = $76;$$01$be$i19 = $86;
         } else {
          HEAP32[$85>>2] = $72;
          $$0$be$i20 = $72;$$01$be$i19 = $73;
         }
         $87 = ($$01$be$i19|0)>(1);
         if (!($87)) {
          $i$0$lcssa$i24 = $84;
          break;
         }
         $$pre$i22 = HEAP32[$ar$i>>2]|0;
         $$012$i16 = $$01$be$i19;$$03$i15 = $$0$be$i20;$77 = $$pre$i22;$i$04$i14 = $84;
        }
        $88 = ($i$0$lcssa$i24|0)<(2);
        if (!($88)) {
         $89 = (($ar$i) + ($i$0$lcssa$i24<<2)|0);
         HEAP32[$89>>2] = $tmp$i26;
         if (!($13)) {
          $90 = ($i$0$lcssa$i24|0)>(0);
          if ($90) {
           $$02$us$i32 = $width;$103 = $tmp$i26;
          } else {
           $91 = HEAP32[$ar$i>>2]|0;
           _memcpy(($tmp$i26|0),($91|0),($15|0))|0;
           if ($16) {
            break;
           } else {
            $$02$i3469 = $width;$105 = $15;
           }
           while(1) {
            $104 = (($$02$i3469) - ($105))|0;
            $106 = ($104>>>0)>(256);
            $107 = $106 ? 256 : $104;
            _memcpy(($tmp$i26|0),($91|0),($107|0))|0;
            $108 = ($104|0)==($107|0);
            if ($108) {
             break L39;
            } else {
             $$02$i3469 = $104;$105 = $107;
            }
           }
          }
          while(1) {
           $101 = ($$02$us$i32>>>0)>(256);
           $93 = $101 ? 256 : $$02$us$i32;
           $102 = HEAP32[$ar$i>>2]|0;
           _memcpy(($103|0),($102|0),($93|0))|0;
           $99 = $102;$i$01$us$i30 = 0;
           while(1) {
            $95 = (($ar$i) + ($i$01$us$i30<<2)|0);
            $96 = (($i$01$us$i30) + 1)|0;
            $97 = (($ar$i) + ($96<<2)|0);
            $98 = HEAP32[$97>>2]|0;
            _memcpy(($99|0),($98|0),($93|0))|0;
            $100 = (($99) + ($93)|0);
            HEAP32[$95>>2] = $100;
            $exitcond$i31 = ($96|0)==($i$0$lcssa$i24|0);
            if ($exitcond$i31) {
             break;
            } else {
             $99 = $98;$i$01$us$i30 = $96;
            }
           }
           $92 = ($$02$us$i32|0)==($93|0);
           if ($92) {
            break L39;
           }
           $94 = (($$02$us$i32) - ($93))|0;
           $$pre$i28 = HEAP32[$89>>2]|0;
           $$02$us$i32 = $94;$103 = $$pre$i28;
          }
         }
        }
       }
      } else {
       _trinkle($head$077,$width,$cmp,$19,$61,$pshift$078,0,$lp);
      }
     } while(0);
     $109 = ($pshift$078|0)==(1);
     if ($109) {
      $110 = $61 << 1;
      $111 = $19 >>> 31;
      $112 = $111 | $110;
      $113 = $19 << 1;
      $122 = $113;$182 = $112;$pshift$1 = 0;
      break;
     } else {
      $114 = ($65>>>0)>(31);
      $115 = (($pshift$078) + -33)|0;
      $$ = $114 ? 0 : $19;
      $$66 = $114 ? $19 : $61;
      $$67 = $114 ? $115 : $65;
      $116 = $$66 << $$67;
      $117 = (32 - ($$67))|0;
      $118 = $$ >>> $117;
      $119 = $118 | $116;
      $120 = $$ << $$67;
      $122 = $120;$182 = $119;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $121 = $122 | 1;
   $123 = (($head$077) + ($width)|0);
   $124 = ($123>>>0)<($11>>>0);
   if ($124) {
    $19 = $121;$61 = $182;$head$077 = $123;$pshift$078 = $pshift$1;
   } else {
    $$lcssa75 = $182;$$lcssa76 = $121;$head$0$lcssa = $123;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa75 = 0;$$lcssa76 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa76,$$lcssa75,$pshift$0$lcssa,0,$lp);
 $127 = $$lcssa76;$129 = $$lcssa75;$head$1 = $head$0$lcssa;$pshift$2 = $pshift$0$lcssa;
 while(1) {
  $125 = ($pshift$2|0)==(1);
  if ($125) {
   $126 = ($127|0)==(1);
   if ($126) {
    $128 = ($129|0)==(0);
    if ($128) {
     break;
    } else {
     label = 52;
    }
   }
  } else {
   label = 52;
  }
  if ((label|0) == 52) {
   label = 0;
   $130 = ($pshift$2|0)<(2);
   if (!($130)) {
    $162 = $129 << 2;
    $163 = $127 >>> 30;
    $164 = $163 | $162;
    $165 = (($pshift$2) + -2)|0;
    $166 = $127 << 1;
    $167 = $166 & 2147483646;
    $168 = $163 << 31;
    $169 = $167 | $168;
    $170 = $169 ^ 3;
    $171 = $164 >>> 1;
    $172 = (($lp) + ($165<<2)|0);
    $173 = HEAP32[$172>>2]|0;
    $sum = (($173) + ($width))|0;
    $$sum2 = (0 - ($sum))|0;
    $174 = (($head$1) + ($$sum2)|0);
    $175 = (($pshift$2) + -1)|0;
    _trinkle($174,$width,$cmp,$170,$171,$175,1,$lp);
    $176 = $171 << 1;
    $177 = $163 & 1;
    $178 = $176 | $177;
    $179 = $170 << 1;
    $180 = $179 | 1;
    $181 = (($head$1) + ($10)|0);
    _trinkle($181,$width,$cmp,$180,$178,$165,1,$lp);
    $127 = $180;$129 = $178;$head$1 = $181;$pshift$2 = $165;
    continue;
   }
  }
  $131 = (($127) + -1)|0;
  $132 = ($131|0)==(0);
  if ($132) {
   $152 = 32;
   label = 62;
  } else {
   $133 = $131 & 1;
   $134 = ($133|0)==(0);
   if ($134) {
    $$02$i$i = $131;$nTrailingZeros$03$i$i = 0;
    while(1) {
     $135 = (($nTrailingZeros$03$i$i) + 1)|0;
     $136 = $$02$i$i >>> 1;
     $137 = $136 & 1;
     $138 = ($137|0)==(0);
     if ($138) {
      $$02$i$i = $136;$nTrailingZeros$03$i$i = $135;
     } else {
      break;
     }
    }
    $139 = ($135|0)==(0);
    if ($139) {
     label = 57;
    } else {
     $150 = $135;
    }
   } else {
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $140 = ($129|0)==(0);
    if ($140) {
     $$01$i5$i = 32;
    } else {
     $141 = $129 & 1;
     $142 = ($141|0)==(0);
     if ($142) {
      $$02$i3$i = $129;$nTrailingZeros$03$i2$i = 0;
      while(1) {
       $143 = (($nTrailingZeros$03$i2$i) + 1)|0;
       $144 = $$02$i3$i >>> 1;
       $145 = $144 & 1;
       $146 = ($145|0)==(0);
       if ($146) {
        $$02$i3$i = $144;$nTrailingZeros$03$i2$i = $143;
       } else {
        $$01$i5$i = $143;
        break;
       }
      }
     } else {
      $$01$i5$i = 0;
     }
    }
    $147 = (($$01$i5$i) + 32)|0;
    $148 = ($$01$i5$i|0)==(0);
    $$$i = $148 ? 0 : $147;
    $150 = $$$i;
   }
   $149 = ($150>>>0)>(31);
   if ($149) {
    $152 = $150;
    label = 62;
   } else {
    $$0$i50 = $150;$154 = $127;$157 = $129;$161 = $150;
   }
  }
  if ((label|0) == 62) {
   label = 0;
   $151 = (($152) + -32)|0;
   $$0$i50 = $151;$154 = $129;$157 = 0;$161 = $152;
  }
  $153 = $154 >>> $$0$i50;
  $155 = (32 - ($$0$i50))|0;
  $156 = $157 << $155;
  $158 = $156 | $153;
  $159 = $157 >>> $$0$i50;
  $160 = (($161) + ($pshift$2))|0;
  $$pre = (($head$1) + ($10)|0);
  $127 = $158;$129 = $159;$head$1 = $$pre;$pshift$2 = $160;
 }
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$$i = 0, $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa26 = 0, $$01$be$i = 0, $$01$i5$i = 0, $$01$lcssa = 0, $$01$lcssa28 = 0, $$0110 = 0, $$012 = 0, $$012$i = 0, $$02$i$i = 0, $$02$i146 = 0, $$02$i3 = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$us$i = 0, $$02$us$i12 = 0, $$029 = 0;
 var $$03$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i3 = 0, $$pre$i8 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i11 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0;
 var $i$0$lcssa27 = 0, $i$01$us$i = 0, $i$01$us$i10 = 0, $i$011 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $or$cond = 0, $or$cond1 = 0, $or$cond18 = 0, $sum = 0, $sum$i = 0, $tmp$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp$i6 = sp + 456|0;
 $ar$i = sp;
 $ar = sp + 228|0;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)==(1);
 $2 = ($pp$1$val|0)==(0);
 $or$cond18 = $1 & $2;
 L1: do {
  if ($or$cond18) {
   $$0$lcssa = $head;$$01$lcssa = $pshift;$$02$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  } else {
   $$0110 = $pshift;$$012 = $head;$$029 = $trusty;$24 = $pp$val;$34 = $pp$1$val;$7 = $head;$i$011 = 1;
   while(1) {
    $3 = (($lp) + ($$0110<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (0 - ($4))|0;
    $6 = (($$012) + ($5)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 3]($6,$7)|0);
    $9 = ($8|0)<(1);
    if ($9) {
     $$0$lcssa = $$012;$$01$lcssa = $$0110;$$02$lcssa = $$029;$i$0$lcssa = $i$011;
     label = 18;
     break L1;
    }
    $10 = ($$029|0)==(0);
    $11 = ($$0110|0)>(1);
    $or$cond = $10 & $11;
    if ($or$cond) {
     $12 = (($$012) + ($0)|0);
     $13 = (($$0110) + -2)|0;
     $14 = (($lp) + ($13<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_iii[$cmp & 3]($12,$6)|0);
     $17 = ($16|0)>(-1);
     if ($17) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
     $sum = (($15) + ($width))|0;
     $$sum = (0 - ($sum))|0;
     $18 = (($$012) + ($$sum)|0);
     $19 = (FUNCTION_TABLE_iii[$cmp & 3]($18,$6)|0);
     $20 = ($19|0)>(-1);
     if ($20) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
    }
    $21 = (($i$011) + 1)|0;
    $22 = (($ar) + ($i$011<<2)|0);
    HEAP32[$22>>2] = $6;
    $23 = (($24) + -1)|0;
    $25 = ($23|0)==(0);
    if ($25) {
     $46 = 32;
     label = 15;
    } else {
     $26 = $23 & 1;
     $27 = ($26|0)==(0);
     if ($27) {
      $$02$i$i = $23;$nTrailingZeros$03$i$i = 0;
      while(1) {
       $28 = (($nTrailingZeros$03$i$i) + 1)|0;
       $29 = $$02$i$i >>> 1;
       $30 = $29 & 1;
       $31 = ($30|0)==(0);
       if ($31) {
        $$02$i$i = $29;$nTrailingZeros$03$i$i = $28;
       } else {
        break;
       }
      }
      $32 = ($28|0)==(0);
      if ($32) {
       label = 10;
      } else {
       $44 = $28;
      }
     } else {
      label = 10;
     }
     if ((label|0) == 10) {
      label = 0;
      $33 = ($34|0)==(0);
      if ($33) {
       $$01$i5$i = 32;
      } else {
       $35 = $34 & 1;
       $36 = ($35|0)==(0);
       if ($36) {
        $$02$i3$i = $34;$nTrailingZeros$03$i2$i = 0;
        while(1) {
         $37 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $38 = $$02$i3$i >>> 1;
         $39 = $38 & 1;
         $40 = ($39|0)==(0);
         if ($40) {
          $$02$i3$i = $38;$nTrailingZeros$03$i2$i = $37;
         } else {
          $$01$i5$i = $37;
          break;
         }
        }
       } else {
        $$01$i5$i = 0;
       }
      }
      $41 = (($$01$i5$i) + 32)|0;
      $42 = ($$01$i5$i|0)==(0);
      $$$i = $42 ? 0 : $41;
      $44 = $$$i;
     }
     $43 = ($44>>>0)>(31);
     if ($43) {
      $46 = $44;
      label = 15;
     } else {
      $$0$i = $44;$48 = $24;$51 = $34;$55 = $44;
     }
    }
    if ((label|0) == 15) {
     label = 0;
     $45 = (($46) + -32)|0;
     $$0$i = $45;$48 = $34;$51 = 0;$55 = $46;
    }
    $47 = $48 >>> $$0$i;
    $49 = (32 - ($$0$i))|0;
    $50 = $51 << $49;
    $52 = $50 | $47;
    $53 = $51 >>> $$0$i;
    $54 = (($55) + ($$0110))|0;
    $56 = ($52|0)==(1);
    $57 = ($53|0)==(0);
    $or$cond1 = $56 & $57;
    if ($or$cond1) {
     $$0$lcssa26 = $6;$$01$lcssa28 = $54;$i$0$lcssa27 = $21;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$0110 = $54;$$012 = $6;$$029 = 0;$24 = $52;$34 = $53;$7 = $$pre;$i$011 = $21;
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $58 = ($$02$lcssa|0)==(0);
  if ($58) {
   $$0$lcssa26 = $$0$lcssa;$$01$lcssa28 = $$01$lcssa;$i$0$lcssa27 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $59 = ($i$0$lcssa27|0)<(2);
 L31: do {
  if (!($59)) {
   $60 = (($ar) + ($i$0$lcssa27<<2)|0);
   HEAP32[$60>>2] = $tmp$i6;
   $61 = ($width|0)==(0);
   if (!($61)) {
    $62 = ($i$0$lcssa27|0)>(0);
    if ($62) {
     $$02$us$i12 = $width;$78 = $tmp$i6;
    } else {
     $63 = ($width>>>0)>(256);
     $64 = $63 ? 256 : $width;
     $65 = HEAP32[$ar>>2]|0;
     _memcpy(($tmp$i6|0),($65|0),($64|0))|0;
     $66 = ($64|0)==($width|0);
     if ($66) {
      break;
     } else {
      $$02$i146 = $width;$80 = $64;
     }
     while(1) {
      $79 = (($$02$i146) - ($80))|0;
      $81 = ($79>>>0)>(256);
      $82 = $81 ? 256 : $79;
      _memcpy(($tmp$i6|0),($65|0),($82|0))|0;
      $83 = ($79|0)==($82|0);
      if ($83) {
       break L31;
      } else {
       $$02$i146 = $79;$80 = $82;
      }
     }
    }
    while(1) {
     $76 = ($$02$us$i12>>>0)>(256);
     $68 = $76 ? 256 : $$02$us$i12;
     $77 = HEAP32[$ar>>2]|0;
     _memcpy(($78|0),($77|0),($68|0))|0;
     $74 = $77;$i$01$us$i10 = 0;
     while(1) {
      $70 = (($ar) + ($i$01$us$i10<<2)|0);
      $71 = (($i$01$us$i10) + 1)|0;
      $72 = (($ar) + ($71<<2)|0);
      $73 = HEAP32[$72>>2]|0;
      _memcpy(($74|0),($73|0),($68|0))|0;
      $75 = (($74) + ($68)|0);
      HEAP32[$70>>2] = $75;
      $exitcond$i11 = ($71|0)==($i$0$lcssa27|0);
      if ($exitcond$i11) {
       break;
      } else {
       $74 = $73;$i$01$us$i10 = $71;
      }
     }
     $67 = ($$02$us$i12|0)==($68|0);
     if ($67) {
      break L31;
     }
     $69 = (($$02$us$i12) - ($68))|0;
     $$pre$i8 = HEAP32[$60>>2]|0;
     $$02$us$i12 = $69;$78 = $$pre$i8;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa26;
 $84 = ($$01$lcssa28|0)>(1);
 L45: do {
  if ($84) {
   $$012$i = $$01$lcssa28;$$03$i = $$0$lcssa26;$90 = $$0$lcssa26;$i$04$i = 1;
   while(1) {
    $85 = (($$03$i) + ($0)|0);
    $86 = (($$012$i) + -2)|0;
    $87 = (($lp) + ($86<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $sum$i = (($88) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $89 = (($$03$i) + ($$sum$i)|0);
    $91 = (FUNCTION_TABLE_iii[$cmp & 3]($90,$89)|0);
    $92 = ($91|0)>(-1);
    if ($92) {
     $93 = (FUNCTION_TABLE_iii[$cmp & 3]($90,$85)|0);
     $94 = ($93|0)>(-1);
     if ($94) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $95 = (FUNCTION_TABLE_iii[$cmp & 3]($89,$85)|0);
    $96 = ($95|0)>(-1);
    $97 = (($i$04$i) + 1)|0;
    $98 = (($ar$i) + ($i$04$i<<2)|0);
    if ($96) {
     HEAP32[$98>>2] = $89;
     $99 = (($$012$i) + -1)|0;
     $$0$be$i = $89;$$01$be$i = $99;
    } else {
     HEAP32[$98>>2] = $85;
     $$0$be$i = $85;$$01$be$i = $86;
    }
    $100 = ($$01$be$i|0)>(1);
    if (!($100)) {
     $i$0$lcssa$i = $97;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$90 = $$pre$i;$i$04$i = $97;
   }
   $101 = ($i$0$lcssa$i|0)<(2);
   if ($101) {
    $126 = $tmp$i6;
   } else {
    $102 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$102>>2] = $tmp$i6;
    $103 = ($width|0)==(0);
    if ($103) {
     $126 = $tmp$i6;
    } else {
     $104 = ($i$0$lcssa$i|0)>(0);
     if ($104) {
      $$02$us$i = $width;$120 = $tmp$i6;
     } else {
      $105 = ($width>>>0)>(256);
      $106 = $105 ? 256 : $width;
      $107 = HEAP32[$ar$i>>2]|0;
      _memcpy(($tmp$i6|0),($107|0),($106|0))|0;
      $108 = ($106|0)==($width|0);
      if ($108) {
       $126 = $tmp$i6;
       break;
      } else {
       $$02$i3 = $width;$122 = $106;
      }
      while(1) {
       $121 = (($$02$i3) - ($122))|0;
       $123 = ($121>>>0)>(256);
       $124 = $123 ? 256 : $121;
       _memcpy(($tmp$i6|0),($107|0),($124|0))|0;
       $125 = ($121|0)==($124|0);
       if ($125) {
        $126 = $tmp$i6;
        break L45;
       } else {
        $$02$i3 = $121;$122 = $124;
       }
      }
     }
     while(1) {
      $118 = ($$02$us$i>>>0)>(256);
      $110 = $118 ? 256 : $$02$us$i;
      $119 = HEAP32[$ar$i>>2]|0;
      _memcpy(($120|0),($119|0),($110|0))|0;
      $116 = $119;$i$01$us$i = 0;
      while(1) {
       $112 = (($ar$i) + ($i$01$us$i<<2)|0);
       $113 = (($i$01$us$i) + 1)|0;
       $114 = (($ar$i) + ($113<<2)|0);
       $115 = HEAP32[$114>>2]|0;
       _memcpy(($116|0),($115|0),($110|0))|0;
       $117 = (($116) + ($110)|0);
       HEAP32[$112>>2] = $117;
       $exitcond$i = ($113|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $116 = $115;$i$01$us$i = $113;
       }
      }
      $109 = ($$02$us$i|0)==($110|0);
      if ($109) {
       $126 = $tmp$i6;
       break L45;
      }
      $111 = (($$02$us$i) - ($110))|0;
      $$pre$i3 = HEAP32[$102>>2]|0;
      $$02$us$i = $111;$120 = $$pre$i3;
     }
    }
   }
  } else {
   $126 = $tmp$i6;
  }
 } while(0);
 STACKTOP = sp;return;
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[20672>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((20672 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((20672 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[20672>>2] = $22;
     } else {
      $23 = HEAP32[((20672 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((20672 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((20672 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((20672 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[20672>>2] = $74;
      } else {
       $75 = HEAP32[((20672 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((20672 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((20672 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((20672 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[20672>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[20672>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((20672 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((20672 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((20672 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((20672 + 8|0))>>2] = $81;
     HEAP32[((20672 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((20672 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((20672 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((20672 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((20672 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((20672 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((20672 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((20672 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((20672 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((20672 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((20672 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((20672 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((20672 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((20672 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[20672>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[20672>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((20672 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((20672 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((20672 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((20672 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((20672 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((20672 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((20672 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((20672 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((20672 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((20672 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((20672 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((20672 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((20672 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((20672 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((20672 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((20672 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((20672 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((20672 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[20672>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[20672>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((20672 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((20672 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((20672 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((20672 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((20672 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((20672 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L225;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((20672 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((20672 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((20672 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((20672 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((20672 + 20|0))>>2] = $516;
   HEAP32[((20672 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((20672 + 8|0))>>2] = 0;
   HEAP32[((20672 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((20672 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((20672 + 12|0))>>2] = $530;
  $531 = HEAP32[((20672 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((20672 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[21144>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((21144 + 8|0))>>2] = $540;
    HEAP32[((21144 + 4|0))>>2] = $540;
    HEAP32[((21144 + 12|0))>>2] = -1;
    HEAP32[((21144 + 16|0))>>2] = -1;
    HEAP32[((21144 + 20|0))>>2] = 0;
    HEAP32[((20672 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[21144>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((21144 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((20672 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((20672 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((20672 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((20672 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((20672 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((20672 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((21144 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((20672 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((20672 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((21144 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((20672 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((20672 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((20672 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((20672 + 432|0))>>2] = $633;
  $634 = HEAP32[((20672 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((20672 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((20672 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((20672 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((20672 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((20672 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((20672 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((20672 + 460|0))>>2] = 0;
    $641 = HEAP32[21144>>2]|0;
    HEAP32[((20672 + 36|0))>>2] = $641;
    HEAP32[((20672 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((20672 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((20672 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((20672 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((20672 + 24|0))>>2] = $654;
    HEAP32[((20672 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((21144 + 16|0))>>2]|0;
    HEAP32[((20672 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((20672 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((20672 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((20672 + 24|0))>>2] = $684;
       HEAP32[((20672 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((21144 + 16|0))>>2]|0;
       HEAP32[((20672 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((20672 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((20672 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((20672 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((20672 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((20672 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((20672 + 12|0))>>2] = $732;
        HEAP32[((20672 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((20672 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((20672 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((20672 + 8|0))>>2] = $738;
         HEAP32[((20672 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L356: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((20672 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((20672 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[20672>>2]|0;
            $765 = $764 & $763;
            HEAP32[20672>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((20672 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((20672 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((20672 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((20672 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((20672 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((20672 + 4|0))>>2] = $811;
             break L356;
            } else {
             $812 = HEAP32[((20672 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L356;
             }
            }
           } while(0);
           $819 = HEAP32[((20672 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((20672 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((20672 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((20672 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[20672>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[20672>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((20672 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((20672 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((20672 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((20672 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((20672 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((20672 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((20672 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((20672 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((20672 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((20672 + 24|0))>>2] = $958;
    HEAP32[((20672 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((21144 + 16|0))>>2]|0;
    HEAP32[((20672 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((20672 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((20672 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((20672 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((20672 + 448|0))+12>>2]|0;
    HEAP32[((20672 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((20672 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((20672 + 460|0))>>2] = 0;
    HEAP32[((20672 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((20672 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[20672>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[20672>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((20672 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((20672 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((20672 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((20672 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((20672 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((20672 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((20672 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((20672 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((20672 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((20672 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((20672 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((20672 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((20672 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((20672 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((20672 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((20672 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[20672>>2]|0;
     $36 = $35 & $34;
     HEAP32[20672>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((20672 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((20672 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((20672 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((20672 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((20672 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((20672 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((20672 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((20672 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((20672 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((20672 + 12|0))>>2] = $122;
   HEAP32[((20672 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((20672 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((20672 + 20|0))>>2] = 0;
   HEAP32[((20672 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((20672 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((20672 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((20672 + 8|0))>>2] = $130;
   HEAP32[((20672 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((20672 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((20672 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[20672>>2]|0;
     $154 = $153 & $152;
     HEAP32[20672>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((20672 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((20672 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((20672 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((20672 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((20672 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((20672 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((20672 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((20672 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((20672 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((20672 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((20672 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((20672 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((20672 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[20672>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[20672>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((20672 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((20672 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((20672 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((20672 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((20672 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((20672 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L204: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L204;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((20672 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((20672 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((20672 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((20672 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((20672 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((20672 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((20672 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((21144 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((20672 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((20672 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((20672 + 24|0))>>2] = $38;
  HEAP32[((20672 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((20672 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((20672 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((20672 + 8|0))>>2] = $storemerge21;
  HEAP32[((20672 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((20672 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[20672>>2]|0;
    $90 = $89 & $88;
    HEAP32[20672>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((20672 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((20672 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((20672 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((20672 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((20672 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((20672 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((20672 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((20672 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((20672 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((20672 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((20672 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[20672>>2]|0;
     $32 = $31 & $30;
     HEAP32[20672>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((20672 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((20672 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((20672 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((20672 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((20672 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((20672 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((20672 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((20672 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((20672 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((20672 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((20672 + 12|0))>>2] = $117;
   HEAP32[((20672 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((20672 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((20672 + 20|0))>>2] = 0;
   HEAP32[((20672 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((20672 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((20672 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((20672 + 8|0))>>2] = $125;
   HEAP32[((20672 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((20672 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[20672>>2]|0;
     $148 = $147 & $146;
     HEAP32[20672>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((20672 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((20672 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((20672 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((20672 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((20672 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((20672 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((20672 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((20672 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((20672 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((20672 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[20672>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[20672>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((20672 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((20672 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((20672 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((20672 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((20672 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((20672 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((20672 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((20672 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 18446744073709551616.0;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.98846567431157953864E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.98846567431157953864E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.22507385850720138309E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.22507385850720138309E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 21168;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 21168;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 21168;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 STACKTOP = sp;return ($14|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $8 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 3]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 3]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 3]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i103$i = 0, $$0$lcssa$i127$i = 0, $$0$lcssa$i142$i = 0, $$0$lcssa$i37 = 0, $$0$lcssa$i38$i = 0, $$0$lcssa$i43 = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i45$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i55$i = 0, $$0$lcssa$i59 = 0, $$0$lcssa$i62$i = 0;
 var $$0$lcssa$i66 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i75$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i96$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i101$i = 0, $$01$i125$i = 0, $$01$i140$i = 0, $$01$i35 = 0, $$01$i36$i = 0, $$01$i43$i = 0, $$01$i50 = 0, $$01$i53$i = 0, $$01$i57 = 0, $$01$i60$i = 0, $$01$i64 = 0, $$01$i66$i = 0;
 var $$01$i73$i = 0, $$01$i74 = 0, $$01$i94$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i40 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i87$i = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$17 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us159$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$210$$23$i = 0, $$210$$25$i = 0, $$210$i = 0, $$22$i = 0.0, $$23$i = 0, $$25$i = 0;
 var $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412175$i = 0, $$5193$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us322$i = 0, $$a$3$us323$i = 0, $$a$3324$i = 0, $$a$3325$i = 0, $$fl$4 = 0, $$lcssa300$i = 0, $$lcssa92 = 0, $$mask$i = 0, $$mask$i30 = 0, $$mask1$i = 0, $$mask1$i29 = 0;
 var $$neg151$i = 0, $$neg152$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre290 = 0, $$pre292 = 0, $$pre319$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0.0, $1037 = 0.0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1045$phi = 0, $1046 = 0, $1046$phi = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0;
 var $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0;
 var $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0;
 var $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0;
 var $a$1 = 0, $a$1$lcssa$i = 0, $a$1263$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3249$i = 0, $a$3249$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0;
 var $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0;
 var $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0255$i = 0, $carry3$0243$i = 0, $carry3$0243$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0254$i = 0, $d$0256$i = 0, $d$1242$i = 0, $d$1242$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4183$i = 0, $d$5174$i = 0, $d$6192$i = 0, $e$0238$i = 0, $e$1$i = 0;
 var $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1200$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0100 = 0, $fl$0104 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0166 = 0;
 var $i$0168 = 0, $i$0237$i = 0, $i$03$i = 0, $i$03$i22 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1230$i = 0, $i$2217$i = 0, $i$289 = 0, $i$3209$i = 0, $i$388 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i24 = 0, $isdigit11 = 0, $isdigit2$i = 0, $isdigit2$i21 = 0, $isdigit9 = 0, $isdigittmp = 0, $isdigittmp$i = 0;
 var $isdigittmp$i23 = 0, $isdigittmp1$i = 0, $isdigittmp1$i20 = 0, $isdigittmp10 = 0, $isdigittmp8 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1210$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1167 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0;
 var $mb = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i49 = 0, $or$cond$i52$i = 0, $or$cond$i56 = 0, $or$cond$i59$i = 0, $or$cond$i63 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i73 = 0, $or$cond$i93$i = 0, $or$cond28$i = 0, $or$cond28173$i = 0, $or$cond29$i = 0, $or$cond4$i = 0;
 var $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1165$i = 0;
 var $round$0164$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us158$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us160$i = 0, $s1$0$i = 0, $s7$0180$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0169$i = 0, $s9$0$i = 0, $s9$1188$i = 0, $s9$2$i = 0, $sext = 0;
 var $sext84 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge12 = 0, $storemerge7103 = 0, $storemerge798 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0169 = 0, $ws$1175 = 0, $y$03$i = 0;
 var $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1262$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3248$i = 0, $z$3248$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp;
 $buf$i = sp + 832|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 816|0;
 $pad$i = sp + 520|0;
 $buf = sp + 776|0;
 $wc = sp + 8|0;
 $mb = sp + 828|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 288|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1045 = 0;$1046 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 344;
   break;
  } else {
   $1047 = $21;$25 = $22;
  }
  while(1) {
   if ((($1047<<24>>24) == 37)) {
    $27 = $25;$z$093 = $25;
    label = 9;
    break;
   } else if ((($1047<<24>>24) == 0)) {
    $$lcssa92 = $25;$z$0$lcssa = $25;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1047 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa92 = $27;$z$0$lcssa = $z$093;
      break L12;
     }
     $30 = (($z$093) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$093 = $30;
      label = 9;
     } else {
      $$lcssa92 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1046$phi = $1046;$1045$phi = $1045;$22 = $$lcssa92;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1046 = $1046$phi;$1045 = $1045$phi;
   continue;
  }
  $38 = (($$lcssa92) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa92) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa92) + 3|0);
    $$pre290 = HEAP8[$44>>0]|0;
    $46 = $$pre290;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0104 = 0;$storemerge7103 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $65 = $55;$fl$0100 = $fl$0104;$storemerge798 = $storemerge7103;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0104;
     $59 = (($storemerge7103) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0104 = $58;$storemerge7103 = $59;
     } else {
      $65 = $60;$fl$0100 = $58;$storemerge798 = $59;
      break;
     }
    }
   } else {
    $65 = $46;$fl$0100 = 0;$storemerge798 = $storemerge;
   }
  } while(0);
  $64 = ($65<<24>>24)==(42);
  do {
   if ($64) {
    $66 = (($storemerge798) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp10 = (($68) + -48)|0;
    $isdigit11 = ($isdigittmp10>>>0)<(10);
    if ($isdigit11) {
     $69 = (($storemerge798) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp10<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge798) + 3|0);
      $l10n$2 = 1;$storemerge12 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0100;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge12 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0100 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge12;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge12;$fl$1 = $fl$0100;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $65 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge798;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 362;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge798;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i20 = (($125) + -48)|0;
     $isdigit2$i21 = ($isdigittmp1$i20>>>0)<(10);
     if ($isdigit2$i21) {
      $128 = $125;$131 = $102;$i$03$i22 = 0;
     } else {
      $1048 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i22*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i23 = (($133) + -48)|0;
      $isdigit$i24 = ($isdigittmp$i23>>>0)<(10);
      if ($isdigit$i24) {
       $128 = $133;$131 = $130;$i$03$i22 = $129;
      } else {
       $1048 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp8 = (($107) + -48)|0;
    $isdigit9 = ($isdigittmp8>>>0)<(10);
    if ($isdigit9) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp8<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1048 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 362;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1048 = $105;$p$0 = $124;
    } else {
     $1048 = $105;$p$0 = 0;
    }
   } else {
    $1048 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1048;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 362;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((21176 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 362;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1049 = $1045;$1050 = $1046;
     label = 63;
    }
   } else {
    if ($147) {
     $148 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$148>>2] = $142;
     $149 = (($nl_arg) + ($argpos$0<<3)|0);
     $150 = $149;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($150) + 4)|0;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = $152;
     $1049 = $155;$1050 = $156;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 362;
     break L1;
    }
    $157 = ($141&255)>(20);
    if ($157) {
     $199 = $134;$207 = $1046;$229 = $1045;
    } else {
     do {
      switch ($142|0) {
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $160 = ($159|0)<(0);
       $161 = $160 << 31 >> 31;
       $162 = $159;
       $1051 = $162;$1052 = $161;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $163 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $164 = $163;
       $1051 = $164;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $165 = $arglist_current14;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = (($165) + 4)|0;
       $169 = $168;
       $170 = HEAP32[$169>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $171 = $167;
       $1051 = $171;$1052 = $170;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $173 = $172&65535;
       $174 = $173 << 16 >> 16;
       $175 = ($174|0)<(0);
       $176 = $175 << 31 >> 31;
       $sext84 = $172 << 16;
       $177 = $sext84 >> 16;
       $178 = $177;
       $1051 = $178;$1052 = $176;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i29 = $179 & 65535;
       $180 = $$mask1$i29;
       $1051 = $180;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $181 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $182 = $181&255;
       $183 = $182 << 24 >> 24;
       $184 = ($183|0)<(0);
       $185 = $184 << 31 >> 31;
       $sext = $181 << 24;
       $186 = $sext >> 24;
       $187 = $186;
       $1051 = $187;$1052 = $185;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $188 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i30 = $188 & 255;
       $189 = $$mask$i30;
       $1051 = $189;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$190 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $190;$191 = HEAP32[tempDoublePtr>>2]|0;
       $192 = HEAP32[tempDoublePtr+4>>2]|0;
       $193 = $191;
       $1051 = $193;$1052 = $192;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $158 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $1051 = $158;$1052 = $1045;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$194 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $194;$195 = HEAP32[tempDoublePtr>>2]|0;
       $196 = HEAP32[tempDoublePtr+4>>2]|0;
       $197 = $195;
       $1049 = $196;$1050 = $197;
       label = 63;
       break L65;
       break;
      }
      default: {
       $1051 = $1046;$1052 = $1045;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1051 = $1050;$1052 = $1049;
    label = 64;
   } else {
    $1045 = $1049;$1046 = $1050;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre292 = HEAP8[$135>>0]|0;
   $199 = $$pre292;$207 = $1051;$229 = $1052;
  }
  $198 = $199 << 24 >> 24;
  $200 = ($st$0|0)==(0);
  if ($200) {
   $t$0 = $198;
  } else {
   $201 = $198 & 15;
   $202 = ($201|0)==(3);
   $203 = $198 & -33;
   $$ = $202 ? $203 : $198;
   $t$0 = $$;
  }
  $204 = $fl$1 & 8192;
  $205 = ($204|0)==(0);
  $206 = $fl$1 & -65537;
  $fl$1$ = $205 ? $fl$1 : $206;
  L92: do {
   switch ($t$0|0) {
   case 111:  {
    $249 = $207;
    $250 = ($249|0)==(0);
    $251 = ($229|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i43 = $2;
    } else {
     $$03$i40 = $2;$254 = $249;$258 = $229;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = (($$03$i40) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i43 = $257;
       break;
      } else {
       $$03$i40 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 21640;
     label = 94;
    } else {
     $$13 = $252 ? 21640 : ((21640 + 5|0));
     $266 = $252&1;
     $$14 = $266 ^ 1;
     $308 = $207;$311 = $229;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$14;$prefix$1 = $$13;
     label = 94;
    }
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 4:  {
     $215 = $cnt$1&255;
     HEAP8[$207>>0] = $215;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $214 = $cnt$1&65535;
     HEAP16[$207>>1] = $214;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $208 = ($cnt$1|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = $207;
     $211 = $210;
     HEAP32[$211>>2] = $cnt$1;
     $212 = (($210) + 4)|0;
     $213 = $212;
     HEAP32[$213>>2] = $209;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $216 = ($cnt$1|0)<(0);
     $217 = $216 << 31 >> 31;
     $218 = $207;
     $219 = $218;
     HEAP32[$219>>2] = $cnt$1;
     $220 = (($218) + 4)|0;
     $221 = $220;
     HEAP32[$221>>2] = $217;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   case 115:  {
    $324 = ($207|0)==(0|0);
    $$17 = $324 ? 21656 : $207;
    $a$1 = $$17;
    label = 99;
    break;
   }
   case 117:  {
    $277 = $207;$279 = $229;$pl$0 = 0;$prefix$0 = 21640;
    label = 89;
    break;
   }
   case 67:  {
    $331 = $207;
    HEAP32[$wc>>2] = $331;
    HEAP32[$5>>2] = 0;
    $1055 = $wc;$1056 = $wc;$p$4296 = -1;
    label = 104;
    break;
   }
   case 105: case 100:  {
    $267 = $207;
    $268 = ($229|0)<(0);
    if ($268) {
     $269 = (_i64Subtract(0,0,($267|0),($229|0))|0);
     $270 = tempRet0;
     $271 = $269;
     $277 = $271;$279 = $270;$pl$0 = 1;$prefix$0 = 21640;
     label = 89;
     break L92;
    }
    $272 = $fl$1$ & 2048;
    $273 = ($272|0)==(0);
    if ($273) {
     $274 = $fl$1$ & 1;
     $275 = ($274|0)==(0);
     $$15 = $275 ? 21640 : ((21640 + 2|0));
     $277 = $207;$279 = $229;$pl$0 = $274;$prefix$0 = $$15;
     label = 89;
    } else {
     $277 = $207;$279 = $229;$pl$0 = 1;$prefix$0 = ((21640 + 1|0));
     label = 89;
    }
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     $1057 = $207;$1058 = $207;$i$0166 = 0;
     label = 110;
    } else {
     $1055 = $207;$1056 = $207;$p$4296 = $p$0;
     label = 104;
    }
    break;
   }
   case 99:  {
    $319 = $207;
    $320 = $319&255;
    HEAP8[$4>>0] = $320;
    $1053 = $229;$1054 = $207;$a$2 = $4;$fl$6 = $206;$p$5 = 1;$pl$2 = 0;$prefix$2 = 21640;$z$2 = $2;
    break;
   }
   case 109:  {
    $321 = (___errno_location()|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (_strerror(($322|0))|0);
    $a$1 = $323;
    label = 99;
    break;
   }
   case 112:  {
    $222 = ($p$0>>>0)>(8);
    $223 = $222 ? $p$0 : 8;
    $224 = $fl$1$ | 8;
    $fl$3 = $224;$p$1 = $223;$t$1 = 120;
    label = 77;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $368 = $207;
    HEAP32[tempDoublePtr>>2] = $368;HEAP32[tempDoublePtr+4>>2] = $229;$369 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $370 = ($229|0)<(0);
    if ($370) {
     $371 = -$369;
     $$07$i = $371;$pl$0$i = 1;$prefix$0$i = 21664;
    } else {
     $372 = $fl$1$ & 2048;
     $373 = ($372|0)==(0);
     if ($373) {
      $374 = $fl$1$ & 1;
      $375 = ($374|0)==(0);
      $$$i = $375 ? ((21664 + 1|0)) : ((21664 + 6|0));
      $$07$i = $369;$pl$0$i = $374;$prefix$0$i = $$$i;
     } else {
      $$07$i = $369;$pl$0$i = 1;$prefix$0$i = ((21664 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$376 = HEAP32[tempDoublePtr>>2]|0;
    $377 = HEAP32[tempDoublePtr+4>>2]|0;
    $378 = $377 & 2146435072;
    $379 = ($378>>>0)<(2146435072);
    $380 = ($378|0)==(2146435072);
    $381 = (0)<(0);
    $382 = $380 & $381;
    $383 = $379 | $382;
    if (!($383)) {
     $384 = $t$0 & 32;
     $385 = ($384|0)!=(0);
     $386 = $385 ? 21688 : 21696;
     $387 = ($$07$i != $$07$i) | (0.0 != 0.0);
     if ($387) {
      $388 = $385 ? 21704 : 21712;
      $pl$1$i = 0;$s1$0$i = $388;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $386;
     }
     $389 = (($pl$1$i) + 3)|0;
     $390 = $fl$1$ & 8192;
     $391 = ($390|0)==(0);
     $392 = ($389|0)<($w$1|0);
     $or$cond$i35$i = $391 & $392;
     if ($or$cond$i35$i) {
      $393 = (($w$1) - ($389))|0;
      $394 = ($393>>>0)>(256);
      $395 = $394 ? 256 : $393;
      _memset(($pad$i|0),32,($395|0))|0;
      $396 = ($393>>>0)>(255);
      if ($396) {
       $$01$i36$i = $393;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $397 = (($$01$i36$i) + -256)|0;
        $398 = ($397>>>0)>(255);
        if ($398) {
         $$01$i36$i = $397;
        } else {
         $$0$lcssa$i38$i = $397;
         break;
        }
       }
      } else {
       $$0$lcssa$i38$i = $393;
      }
      (___fwritex($pad$i,$$0$lcssa$i38$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $399 = $fl$1$ & 73728;
     $400 = ($399|0)==(8192);
     $or$cond$i42$i = $400 & $392;
     if ($or$cond$i42$i) {
      $401 = (($w$1) - ($389))|0;
      $402 = ($401>>>0)>(256);
      $403 = $402 ? 256 : $401;
      _memset(($pad$i|0),32,($403|0))|0;
      $404 = ($401>>>0)>(255);
      if ($404) {
       $$01$i43$i = $401;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $405 = (($$01$i43$i) + -256)|0;
        $406 = ($405>>>0)>(255);
        if ($406) {
         $$01$i43$i = $405;
        } else {
         $$0$lcssa$i45$i = $405;
         break;
        }
       }
      } else {
       $$0$lcssa$i45$i = $401;
      }
      (___fwritex($pad$i,$$0$lcssa$i45$i,$f)|0);
     }
     $w$$i = $392 ? $w$1 : $389;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $407 = (+_frexpl($$07$i,$e2$i));
    $408 = $407 * 2.0;
    $409 = $408 != 0.0;
    if ($409) {
     $410 = HEAP32[$e2$i>>2]|0;
     $411 = (($410) + -1)|0;
     HEAP32[$e2$i>>2] = $411;
    }
    $412 = $t$0 | 32;
    $413 = ($412|0)==(97);
    if ($413) {
     $414 = $t$0 & 32;
     $415 = ($414|0)==(0);
     $416 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $415 ? $prefix$0$i : $416;
     $417 = $pl$0$i | 2;
     $418 = ($p$0>>>0)>(11);
     $419 = (12 - ($p$0))|0;
     $re$0$i = $418 ? 0 : $419;
     $420 = ($re$0$i|0)==(0);
     do {
      if ($420) {
       $$1$i = $408;
      } else {
       $re$1165$i = $re$0$i;$round$0164$i = 8.0;
       while(1) {
        $421 = (($re$1165$i) + -1)|0;
        $422 = $round$0164$i * 16.0;
        $423 = ($421|0)==(0);
        if ($423) {
         break;
        } else {
         $re$1165$i = $421;$round$0164$i = $422;
        }
       }
       $424 = HEAP8[$prefix$0$$i>>0]|0;
       $425 = ($424<<24>>24)==(45);
       if ($425) {
        $426 = -$408;
        $427 = $426 - $422;
        $428 = $422 + $427;
        $429 = -$428;
        $$1$i = $429;
        break;
       } else {
        $430 = $408 + $422;
        $431 = $430 - $422;
        $$1$i = $431;
        break;
       }
      }
     } while(0);
     $432 = HEAP32[$e2$i>>2]|0;
     $433 = ($432|0)<(0);
     $434 = (0 - ($432))|0;
     $435 = $433 ? $434 : $432;
     $436 = ($435|0)<(0);
     if ($436) {
      $437 = ($435|0)<(0);
      $438 = $437 << 31 >> 31;
      $$05$i$i = $6;$439 = $435;$440 = $438;
      while(1) {
       $441 = (___uremdi3(($439|0),($440|0),10,0)|0);
       $442 = tempRet0;
       $443 = $441 | 48;
       $444 = $443&255;
       $445 = (($$05$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (___udivdi3(($439|0),($440|0),10,0)|0);
       $447 = tempRet0;
       $448 = ($440>>>0)>(9);
       $449 = ($440|0)==(9);
       $450 = ($439>>>0)>(4294967295);
       $451 = $449 & $450;
       $452 = $448 | $451;
       if ($452) {
        $$05$i$i = $445;$439 = $446;$440 = $447;
       } else {
        break;
       }
      }
      $$0$lcssa$i48$i = $445;$$01$lcssa$off0$i$i = $446;
     } else {
      $$0$lcssa$i48$i = $6;$$01$lcssa$off0$i$i = $435;
     }
     $453 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($453) {
      $$1$lcssa$i$i = $$0$lcssa$i48$i;
     } else {
      $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $454 = (($y$03$i$i>>>0) % 10)&-1;
       $455 = $454 | 48;
       $456 = $455&255;
       $457 = (($$12$i$i) + -1|0);
       HEAP8[$457>>0] = $456;
       $458 = (($y$03$i$i>>>0) / 10)&-1;
       $459 = ($y$03$i$i>>>0)<(10);
       if ($459) {
        $$1$lcssa$i$i = $457;
        break;
       } else {
        $$12$i$i = $457;$y$03$i$i = $458;
       }
      }
     }
     $460 = ($$1$lcssa$i$i|0)==($6|0);
     if ($460) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $461 = HEAP32[$e2$i>>2]|0;
     $462 = $461 >> 31;
     $463 = $462 & 2;
     $464 = (($463) + 43)|0;
     $465 = $464&255;
     $466 = (($estr$0$i) + -1|0);
     HEAP8[$466>>0] = $465;
     $467 = (($t$0) + 15)|0;
     $468 = $467&255;
     $469 = (($estr$0$i) + -2|0);
     HEAP8[$469>>0] = $468;
     $470 = ($p$0|0)>(0);
     $471 = $fl$1$ & 8;
     $472 = ($471|0)==(0);
     if ($470) {
      if ($472) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $473 = (~~(($$2$us$us$i)));
        $474 = (21720 + ($473)|0);
        $475 = HEAP8[$474>>0]|0;
        $476 = $475&255;
        $477 = $476 | $414;
        $478 = $477&255;
        $479 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $478;
        $480 = (+($473|0));
        $481 = $$2$us$us$i - $480;
        $482 = $481 * 16.0;
        $483 = $479;
        $484 = (($483) - ($0))|0;
        $485 = ($484|0)==(1);
        if ($485) {
         $486 = (($s$0$us$us$i) + 2|0);
         HEAP8[$479>>0] = 46;
         $s$1$us$us$i = $486;
        } else {
         $s$1$us$us$i = $479;
        }
        $487 = $482 != 0.0;
        if ($487) {
         $$2$us$us$i = $482;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $488 = (~~(($$2$us$i)));
        $489 = (21720 + ($488)|0);
        $490 = HEAP8[$489>>0]|0;
        $491 = $490&255;
        $492 = $491 | $414;
        $493 = $492&255;
        $494 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $493;
        $495 = (+($488|0));
        $496 = $$2$us$i - $495;
        $497 = $496 * 16.0;
        $498 = $494;
        $499 = (($498) - ($0))|0;
        $500 = ($499|0)==(1);
        if ($500) {
         $501 = (($s$0$us$i) + 2|0);
         HEAP8[$494>>0] = 46;
         $s$1$us$i = $501;
        } else {
         $s$1$us$i = $494;
        }
        $502 = $497 != 0.0;
        if ($502) {
         $$2$us$i = $497;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($472) {
       $$2$us159$i = $$1$i;$s$0$us158$i = $buf$i;
       while(1) {
        $503 = (~~(($$2$us159$i)));
        $504 = (21720 + ($503)|0);
        $505 = HEAP8[$504>>0]|0;
        $506 = $505&255;
        $507 = $506 | $414;
        $508 = $507&255;
        $509 = (($s$0$us158$i) + 1|0);
        HEAP8[$s$0$us158$i>>0] = $508;
        $510 = (+($503|0));
        $511 = $$2$us159$i - $510;
        $512 = $511 * 16.0;
        $513 = $509;
        $514 = (($513) - ($0))|0;
        $515 = ($514|0)==(1);
        $516 = $512 != 0.0;
        $or$cond$i71 = $515 & $516;
        if ($or$cond$i71) {
         $517 = (($s$0$us158$i) + 2|0);
         HEAP8[$509>>0] = 46;
         $s$1$us160$i = $517;
        } else {
         $s$1$us160$i = $509;
        }
        if ($516) {
         $$2$us159$i = $512;$s$0$us158$i = $s$1$us160$i;
        } else {
         $s$1$lcssa$i = $s$1$us160$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $518 = (~~(($$2$i)));
        $519 = (21720 + ($518)|0);
        $520 = HEAP8[$519>>0]|0;
        $521 = $520&255;
        $522 = $521 | $414;
        $523 = $522&255;
        $524 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $523;
        $525 = (+($518|0));
        $526 = $$2$i - $525;
        $527 = $526 * 16.0;
        $528 = $524;
        $529 = (($528) - ($0))|0;
        $530 = ($529|0)==(1);
        if ($530) {
         $531 = (($s$0$i) + 2|0);
         HEAP8[$524>>0] = 46;
         $s$1$i = $531;
        } else {
         $s$1$i = $524;
        }
        $532 = $527 != 0.0;
        if ($532) {
         $$2$i = $527;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $533 = ($p$0|0)==(0);
     $$pre319$i = $s$1$lcssa$i;
     do {
      if ($533) {
       label = 173;
      } else {
       $534 = (($10) + ($$pre319$i))|0;
       $535 = ($534|0)<($p$0|0);
       if (!($535)) {
        label = 173;
        break;
       }
       $536 = $469;
       $537 = (($11) + ($p$0))|0;
       $538 = (($537) - ($536))|0;
       $l$0$i = $538;
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      $539 = $469;
      $540 = (($9) - ($539))|0;
      $541 = (($540) + ($$pre319$i))|0;
      $l$0$i = $541;
     }
     $542 = (($l$0$i) + ($417))|0;
     $543 = $fl$1$ & 73728;
     $544 = ($543|0)==(0);
     $545 = ($542|0)<($w$1|0);
     $or$cond$i52$i = $544 & $545;
     if ($or$cond$i52$i) {
      $546 = (($w$1) - ($542))|0;
      $547 = ($546>>>0)>(256);
      $548 = $547 ? 256 : $546;
      _memset(($pad$i|0),32,($548|0))|0;
      $549 = ($546>>>0)>(255);
      if ($549) {
       $$01$i53$i = $546;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $550 = (($$01$i53$i) + -256)|0;
        $551 = ($550>>>0)>(255);
        if ($551) {
         $$01$i53$i = $550;
        } else {
         $$0$lcssa$i55$i = $550;
         break;
        }
       }
      } else {
       $$0$lcssa$i55$i = $546;
      }
      (___fwritex($pad$i,$$0$lcssa$i55$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$417,$f)|0);
     $552 = ($543|0)==(65536);
     $or$cond$i59$i = $552 & $545;
     if ($or$cond$i59$i) {
      $553 = (($w$1) - ($542))|0;
      $554 = ($553>>>0)>(256);
      $555 = $554 ? 256 : $553;
      _memset(($pad$i|0),48,($555|0))|0;
      $556 = ($553>>>0)>(255);
      if ($556) {
       $$01$i60$i = $553;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $557 = (($$01$i60$i) + -256)|0;
        $558 = ($557>>>0)>(255);
        if ($558) {
         $$01$i60$i = $557;
        } else {
         $$0$lcssa$i62$i = $557;
         break;
        }
       }
      } else {
       $$0$lcssa$i62$i = $553;
      }
      (___fwritex($pad$i,$$0$lcssa$i62$i,$f)|0);
     }
     $559 = (($$pre319$i) - ($0))|0;
     (___fwritex($buf$i,$559,$f)|0);
     $560 = $469;
     $561 = (($8) - ($560))|0;
     $562 = (($l$0$i) - ($561))|0;
     $563 = (($562) - ($559))|0;
     $564 = ($563|0)>(0);
     if ($564) {
      $565 = ($563>>>0)>(256);
      $566 = $565 ? 256 : $563;
      _memset(($pad$i|0),48,($566|0))|0;
      $567 = ($563>>>0)>(255);
      if ($567) {
       $$01$i66$i = $563;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $568 = (($$01$i66$i) + -256)|0;
        $569 = ($568>>>0)>(255);
        if ($569) {
         $$01$i66$i = $568;
        } else {
         $$0$lcssa$i68$i = $568;
         break;
        }
       }
      } else {
       $$0$lcssa$i68$i = $563;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     (___fwritex($469,$561,$f)|0);
     $570 = ($543|0)==(8192);
     $or$cond$i72$i = $570 & $545;
     if ($or$cond$i72$i) {
      $571 = (($w$1) - ($542))|0;
      $572 = ($571>>>0)>(256);
      $573 = $572 ? 256 : $571;
      _memset(($pad$i|0),32,($573|0))|0;
      $574 = ($571>>>0)>(255);
      if ($574) {
       $$01$i73$i = $571;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $575 = (($$01$i73$i) + -256)|0;
        $576 = ($575>>>0)>(255);
        if ($576) {
         $$01$i73$i = $575;
        } else {
         $$0$lcssa$i75$i = $575;
         break;
        }
       }
      } else {
       $$0$lcssa$i75$i = $571;
      }
      (___fwritex($pad$i,$$0$lcssa$i75$i,$f)|0);
     }
     $w$18$i = $545 ? $w$1 : $542;
     $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $577 = ($p$0|0)<(0);
    $$p$i = $577 ? 6 : $p$0;
    if ($409) {
     $578 = $408 * 268435456.0;
     $579 = HEAP32[$e2$i>>2]|0;
     $580 = (($579) + -28)|0;
     HEAP32[$e2$i>>2] = $580;
     $$3$i = $578;$582 = $580;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $408;$582 = $$pre$i;
    }
    $581 = ($582|0)<(0);
    $$31$i = $581 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$31$i;
    while(1) {
     $583 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $583;
     $584 = (($z$0$i) + 4|0);
     $585 = (+($583>>>0));
     $586 = $$4$i - $585;
     $587 = $586 * 1.0E+9;
     $588 = $587 != 0.0;
     if ($588) {
      $$4$i = $587;$z$0$i = $584;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $589 = ($$pr$i|0)>(0);
    if ($589) {
     $591 = $$pr$i;$a$1263$i = $$31$i;$z$1262$i = $584;
     while(1) {
      $590 = ($591|0)>(29);
      $592 = $590 ? 29 : $591;
      $d$0254$i = (($z$1262$i) + -4|0);
      $593 = ($d$0254$i>>>0)<($a$1263$i>>>0);
      do {
       if ($593) {
        $a$2$ph$i = $a$1263$i;
       } else {
        $carry$0255$i = 0;$d$0256$i = $d$0254$i;
        while(1) {
         $594 = HEAP32[$d$0256$i>>2]|0;
         $595 = (_bitshift64Shl(($594|0),0,($592|0))|0);
         $596 = tempRet0;
         $597 = (_i64Add(($595|0),($596|0),($carry$0255$i|0),0)|0);
         $598 = tempRet0;
         $599 = (___uremdi3(($597|0),($598|0),1000000000,0)|0);
         $600 = tempRet0;
         HEAP32[$d$0256$i>>2] = $599;
         $601 = (___udivdi3(($597|0),($598|0),1000000000,0)|0);
         $602 = tempRet0;
         $d$0$i = (($d$0256$i) + -4|0);
         $603 = ($d$0$i>>>0)<($a$1263$i>>>0);
         if ($603) {
          break;
         } else {
          $carry$0255$i = $601;$d$0256$i = $d$0$i;
         }
        }
        $604 = ($601|0)==(0);
        if ($604) {
         $a$2$ph$i = $a$1263$i;
         break;
        }
        $605 = (($a$1263$i) + -4|0);
        HEAP32[$605>>2] = $601;
        $a$2$ph$i = $605;
       }
      } while(0);
      $z$2$i = $z$1262$i;
      while(1) {
       $606 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($606)) {
        break;
       }
       $607 = (($z$2$i) + -4|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = ($608|0)==(0);
       if ($609) {
        $z$2$i = $607;
       } else {
        break;
       }
      }
      $610 = HEAP32[$e2$i>>2]|0;
      $611 = (($610) - ($592))|0;
      HEAP32[$e2$i>>2] = $611;
      $612 = ($611|0)>(0);
      if ($612) {
       $591 = $611;$a$1263$i = $a$2$ph$i;$z$1262$i = $z$2$i;
      } else {
       $$pr146$i = $611;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $584;
    }
    $613 = ($$pr146$i|0)<(0);
    L254: do {
     if ($613) {
      $614 = (($$p$i) + 25)|0;
      $615 = (($614|0) / 9)&-1;
      $616 = (($615) + 1)|0;
      $617 = ($412|0)==(102);
      if ($617) {
       $618 = $$31$i;
       $619 = (($$31$i) + ($616<<2)|0);
       $621 = $$pr146$i;$a$3249$us$i = $a$1$lcssa$i;$z$3248$us$i = $z$1$lcssa$i;
       while(1) {
        $620 = (0 - ($621))|0;
        $622 = ($620|0)>(9);
        $$20$us$i = $622 ? 9 : $620;
        $623 = ($a$3249$us$i>>>0)<($z$3248$us$i>>>0);
        do {
         if ($623) {
          $648 = 1 << $$20$us$i;
          $642 = (($648) + -1)|0;
          $645 = 1000000000 >>> $$20$us$i;
          $carry3$0243$us$i = 0;$d$1242$us$i = $a$3249$us$i;
          while(1) {
           $640 = HEAP32[$d$1242$us$i>>2]|0;
           $641 = $640 & $642;
           $643 = $640 >>> $$20$us$i;
           $644 = (($643) + ($carry3$0243$us$i))|0;
           HEAP32[$d$1242$us$i>>2] = $644;
           $631 = Math_imul($641, $645)|0;
           $646 = (($d$1242$us$i) + 4|0);
           $647 = ($646>>>0)<($z$3248$us$i>>>0);
           if ($647) {
            $carry3$0243$us$i = $631;$d$1242$us$i = $646;
           } else {
            break;
           }
          }
          $627 = HEAP32[$a$3249$us$i>>2]|0;
          $628 = ($627|0)==(0);
          $629 = (($a$3249$us$i) + 4|0);
          $$a$3$us$i = $628 ? $629 : $a$3249$us$i;
          $630 = ($631|0)==(0);
          if ($630) {
           $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $z$3248$us$i;
           break;
          }
          $632 = (($z$3248$us$i) + 4|0);
          HEAP32[$z$3248$us$i>>2] = $631;
          $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $632;
         } else {
          $624 = HEAP32[$a$3249$us$i>>2]|0;
          $625 = ($624|0)==(0);
          $626 = (($a$3249$us$i) + 4|0);
          $$a$3$us322$i = $625 ? $626 : $a$3249$us$i;
          $$a$3$us323$i = $$a$3$us322$i;$z$4$us$i = $z$3248$us$i;
         }
        } while(0);
        $633 = $z$4$us$i;
        $634 = (($633) - ($618))|0;
        $635 = $634 >> 2;
        $636 = ($635|0)>($616|0);
        $$z$4$us$i = $636 ? $619 : $z$4$us$i;
        $637 = HEAP32[$e2$i>>2]|0;
        $638 = (($637) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $638;
        $639 = ($638|0)<(0);
        if ($639) {
         $621 = $638;$a$3249$us$i = $$a$3$us323$i;$z$3248$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us323$i;$z$3$lcssa$i = $$z$4$us$i;
         break L254;
        }
       }
      } else {
       $650 = $$pr146$i;$a$3249$i = $a$1$lcssa$i;$z$3248$i = $z$1$lcssa$i;
      }
      while(1) {
       $649 = (0 - ($650))|0;
       $651 = ($649|0)>(9);
       $$20$i = $651 ? 9 : $649;
       $652 = ($a$3249$i>>>0)<($z$3248$i>>>0);
       do {
        if ($652) {
         $656 = 1 << $$20$i;
         $657 = (($656) + -1)|0;
         $658 = 1000000000 >>> $$20$i;
         $carry3$0243$i = 0;$d$1242$i = $a$3249$i;
         while(1) {
          $659 = HEAP32[$d$1242$i>>2]|0;
          $660 = $659 & $657;
          $661 = $659 >>> $$20$i;
          $662 = (($661) + ($carry3$0243$i))|0;
          HEAP32[$d$1242$i>>2] = $662;
          $663 = Math_imul($660, $658)|0;
          $664 = (($d$1242$i) + 4|0);
          $665 = ($664>>>0)<($z$3248$i>>>0);
          if ($665) {
           $carry3$0243$i = $663;$d$1242$i = $664;
          } else {
           break;
          }
         }
         $666 = HEAP32[$a$3249$i>>2]|0;
         $667 = ($666|0)==(0);
         $668 = (($a$3249$i) + 4|0);
         $$a$3$i = $667 ? $668 : $a$3249$i;
         $669 = ($663|0)==(0);
         if ($669) {
          $$a$3325$i = $$a$3$i;$z$4$i = $z$3248$i;
          break;
         }
         $670 = (($z$3248$i) + 4|0);
         HEAP32[$z$3248$i>>2] = $663;
         $$a$3325$i = $$a$3$i;$z$4$i = $670;
        } else {
         $653 = HEAP32[$a$3249$i>>2]|0;
         $654 = ($653|0)==(0);
         $655 = (($a$3249$i) + 4|0);
         $$a$3324$i = $654 ? $655 : $a$3249$i;
         $$a$3325$i = $$a$3324$i;$z$4$i = $z$3248$i;
        }
       } while(0);
       $671 = $z$4$i;
       $672 = $$a$3325$i;
       $673 = (($671) - ($672))|0;
       $674 = $673 >> 2;
       $675 = ($674|0)>($616|0);
       if ($675) {
        $676 = (($$a$3325$i) + ($616<<2)|0);
        $z$5$i = $676;
       } else {
        $z$5$i = $z$4$i;
       }
       $677 = HEAP32[$e2$i>>2]|0;
       $678 = (($677) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $678;
       $679 = ($678|0)<(0);
       if ($679) {
        $650 = $678;$a$3249$i = $$a$3325$i;$z$3248$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3325$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $680 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $681 = $$31$i;
    do {
     if ($680) {
      $682 = $a$3$lcssa$i;
      $683 = (($681) - ($682))|0;
      $684 = $683 >> 2;
      $685 = ($684*9)|0;
      $686 = HEAP32[$a$3$lcssa$i>>2]|0;
      $687 = ($686>>>0)<(10);
      if ($687) {
       $e$1$i = $685;
       break;
      } else {
       $e$0238$i = $685;$i$0237$i = 10;
      }
      while(1) {
       $688 = ($i$0237$i*10)|0;
       $689 = (($e$0238$i) + 1)|0;
       $690 = ($686>>>0)<($688>>>0);
       if ($690) {
        $e$1$i = $689;
        break;
       } else {
        $e$0238$i = $689;$i$0237$i = $688;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $691 = ($412|0)!=(102);
    $692 = $691 ? $e$1$i : 0;
    $693 = (($$p$i) - ($692))|0;
    $694 = ($412|0)==(103);
    $695 = ($$p$i|0)!=(0);
    $$21$i = $694 & $695;
    $$neg151$i = $$21$i << 31 >> 31;
    $696 = (($693) + ($$neg151$i))|0;
    $697 = $z$3$lcssa$i;
    $698 = (($697) - ($681))|0;
    $699 = $698 >> 2;
    $700 = ($699*9)|0;
    $701 = (($700) + -9)|0;
    $702 = ($696|0)<($701|0);
    if ($702) {
     $703 = (($696) + 9216)|0;
     $704 = (($703|0) / 9)&-1;
     $$sum$i = (($704) + -1023)|0;
     $705 = (($$31$i) + ($$sum$i<<2)|0);
     $706 = (($703|0) % 9)&-1;
     $j$0229$i = (($706) + 1)|0;
     $707 = ($j$0229$i|0)<(9);
     if ($707) {
      $i$1230$i = 10;$j$0231$i = $j$0229$i;
      while(1) {
       $708 = ($i$1230$i*10)|0;
       $j$0$i = (($j$0231$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $708;
        break;
       } else {
        $i$1230$i = $708;$j$0231$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $709 = HEAP32[$705>>2]|0;
     $710 = (($709>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $711 = ($710|0)==(0);
     if ($711) {
      $$sum15$i = (($704) + -1022)|0;
      $712 = (($$31$i) + ($$sum15$i<<2)|0);
      $713 = ($712|0)==($z$3$lcssa$i|0);
      if ($713) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
      } else {
       label = 233;
      }
     } else {
      label = 233;
     }
     do {
      if ((label|0) == 233) {
       label = 0;
       $714 = (($709>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $715 = $714 & 1;
       $716 = ($715|0)==(0);
       $$22$i = $716 ? 9007199254740992.0 : 9007199254740994.0;
       $717 = (($i$1$lcssa$i|0) / 2)&-1;
       $718 = ($710>>>0)<($717>>>0);
       do {
        if ($718) {
         $small$0$i = 0.5;
        } else {
         $719 = ($710|0)==($717|0);
         if ($719) {
          $$sum16$i = (($704) + -1022)|0;
          $720 = (($$31$i) + ($$sum16$i<<2)|0);
          $721 = ($720|0)==($z$3$lcssa$i|0);
          if ($721) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $722 = ($pl$0$i|0)==(0);
       do {
        if ($722) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $723 = HEAP8[$prefix$0$i>>0]|0;
         $724 = ($723<<24>>24)==(45);
         if (!($724)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $725 = $$22$i * -1.0;
         $726 = $small$0$i * -1.0;
         $round6$1$i = $725;$small$1$i = $726;
        }
       } while(0);
       $727 = (($709) - ($710))|0;
       HEAP32[$705>>2] = $727;
       $728 = $round6$1$i + $small$1$i;
       $729 = $728 != $round6$1$i;
       if (!($729)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
        break;
       }
       $730 = (($727) + ($i$1$lcssa$i))|0;
       HEAP32[$705>>2] = $730;
       $731 = ($730>>>0)>(999999999);
       if ($731) {
        $a$5223$i = $a$3$lcssa$i;$d$2222$i = $705;
        while(1) {
         $732 = (($d$2222$i) + -4|0);
         HEAP32[$d$2222$i>>2] = 0;
         $733 = ($732>>>0)<($a$5223$i>>>0);
         if ($733) {
          $734 = (($a$5223$i) + -4|0);
          HEAP32[$734>>2] = 0;
          $a$6$i = $734;
         } else {
          $a$6$i = $a$5223$i;
         }
         $735 = HEAP32[$732>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$732>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $a$5223$i = $a$6$i;$d$2222$i = $732;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $732;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $705;
       }
       $738 = $a$5$lcssa$i;
       $739 = (($681) - ($738))|0;
       $740 = $739 >> 2;
       $741 = ($740*9)|0;
       $742 = HEAP32[$a$5$lcssa$i>>2]|0;
       $743 = ($742>>>0)<(10);
       if ($743) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $741;
        break;
       } else {
        $e$2218$i = $741;$i$2217$i = 10;
       }
       while(1) {
        $744 = ($i$2217$i*10)|0;
        $745 = (($e$2218$i) + 1)|0;
        $746 = ($742>>>0)<($744>>>0);
        if ($746) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $745;
         break;
        } else {
         $e$2218$i = $745;$i$2217$i = $744;
        }
       }
      }
     } while(0);
     $747 = (($d$3$i) + 4|0);
     $748 = ($z$3$lcssa$i>>>0)>($747>>>0);
     $$z$3$i = $748 ? $747 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $749 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $750 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($750)) {
      $$lcssa300$i = 0;
      break;
     }
     $751 = (($z$6$i) + -4|0);
     $752 = HEAP32[$751>>2]|0;
     $753 = ($752|0)==(0);
     if ($753) {
      $z$6$i = $751;
     } else {
      $$lcssa300$i = 1;
      break;
     }
    }
    do {
     if ($694) {
      $754 = ($$p$i|0)==(0);
      $755 = $754&1;
      $$$p$i = (($755) + ($$p$i))|0;
      $756 = ($$$p$i|0)>($e$4$ph$i|0);
      $757 = ($e$4$ph$i|0)>(-5);
      $or$cond4$i = $756 & $757;
      if ($or$cond4$i) {
       $758 = (($t$0) + -1)|0;
       $$neg152$i = (($$$p$i) + -1)|0;
       $759 = (($$neg152$i) - ($e$4$ph$i))|0;
       $$013$i = $758;$$210$i = $759;
      } else {
       $760 = (($t$0) + -2)|0;
       $761 = (($$$p$i) + -1)|0;
       $$013$i = $760;$$210$i = $761;
      }
      $762 = $fl$1$ & 8;
      $763 = ($762|0)==(0);
      if (!($763)) {
       $$114$i = $$013$i;$$311$i = $$210$i;
       break;
      }
      do {
       if ($$lcssa300$i) {
        $764 = (($z$6$i) + -4|0);
        $765 = HEAP32[$764>>2]|0;
        $766 = ($765|0)==(0);
        if ($766) {
         $j$2$i = 9;
         break;
        }
        $767 = (($765>>>0) % 10)&-1;
        $768 = ($767|0)==(0);
        if ($768) {
         $i$3209$i = 10;$j$1210$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $769 = ($i$3209$i*10)|0;
         $770 = (($j$1210$i) + 1)|0;
         $771 = (($765>>>0) % ($769>>>0))&-1;
         $772 = ($771|0)==(0);
         if ($772) {
          $i$3209$i = $769;$j$1210$i = $770;
         } else {
          $j$2$i = $770;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $773 = $$013$i | 32;
      $774 = ($773|0)==(102);
      $775 = $z$6$i;
      $776 = (($775) - ($681))|0;
      $777 = $776 >> 2;
      $778 = ($777*9)|0;
      $779 = (($778) + -9)|0;
      if ($774) {
       $780 = (($779) - ($j$2$i))|0;
       $781 = ($780|0)<(0);
       $$23$i = $781 ? 0 : $780;
       $782 = ($$210$i|0)<($$23$i|0);
       $$210$$23$i = $782 ? $$210$i : $$23$i;
       $$114$i = $$013$i;$$311$i = $$210$$23$i;
       break;
      } else {
       $783 = (($779) + ($e$4$ph$i))|0;
       $784 = (($783) - ($j$2$i))|0;
       $785 = ($784|0)<(0);
       $$25$i = $785 ? 0 : $784;
       $786 = ($$210$i|0)<($$25$i|0);
       $$210$$25$i = $786 ? $$210$i : $$25$i;
       $$114$i = $$013$i;$$311$i = $$210$$25$i;
       break;
      }
     } else {
      $$114$i = $t$0;$$311$i = $$p$i;
     }
    } while(0);
    $787 = ($$311$i|0)!=(0);
    if ($787) {
     $791 = 1;
    } else {
     $788 = $fl$1$ & 8;
     $789 = ($788|0)!=(0);
     $791 = $789;
    }
    $790 = $791&1;
    $792 = $$114$i | 32;
    $793 = ($792|0)==(102);
    if ($793) {
     $794 = ($e$4$ph$i|0)>(0);
     $795 = $794 ? $e$4$ph$i : 0;
     $$pn$i = $795;$estr$2$i = 0;
    } else {
     $796 = ($e$4$ph$i|0)<(0);
     $797 = $796 ? $749 : $e$4$ph$i;
     $798 = ($797|0)<(0);
     if ($798) {
      $799 = ($797|0)<(0);
      $800 = $799 << 31 >> 31;
      $$05$i79$i = $6;$801 = $797;$802 = $800;
      while(1) {
       $803 = (___uremdi3(($801|0),($802|0),10,0)|0);
       $804 = tempRet0;
       $805 = $803 | 48;
       $806 = $805&255;
       $807 = (($$05$i79$i) + -1|0);
       HEAP8[$807>>0] = $806;
       $808 = (___udivdi3(($801|0),($802|0),10,0)|0);
       $809 = tempRet0;
       $810 = ($802>>>0)>(9);
       $811 = ($802|0)==(9);
       $812 = ($801>>>0)>(4294967295);
       $813 = $811 & $812;
       $814 = $810 | $813;
       if ($814) {
        $$05$i79$i = $807;$801 = $808;$802 = $809;
       } else {
        break;
       }
      }
      $$0$lcssa$i84$i = $807;$$01$lcssa$off0$i85$i = $808;
     } else {
      $$0$lcssa$i84$i = $6;$$01$lcssa$off0$i85$i = $797;
     }
     $815 = ($$01$lcssa$off0$i85$i|0)==(0);
     if ($815) {
      $estr$1$ph$i = $$0$lcssa$i84$i;
     } else {
      $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
      while(1) {
       $816 = (($y$03$i86$i>>>0) % 10)&-1;
       $817 = $816 | 48;
       $818 = $817&255;
       $819 = (($$12$i87$i) + -1|0);
       HEAP8[$819>>0] = $818;
       $820 = (($y$03$i86$i>>>0) / 10)&-1;
       $821 = ($y$03$i86$i>>>0)<(10);
       if ($821) {
        $estr$1$ph$i = $819;
        break;
       } else {
        $$12$i87$i = $819;$y$03$i86$i = $820;
       }
      }
     }
     $822 = $estr$1$ph$i;
     $823 = (($8) - ($822))|0;
     $824 = ($823|0)<(2);
     if ($824) {
      $estr$1200$i = $estr$1$ph$i;
      while(1) {
       $825 = (($estr$1200$i) + -1|0);
       HEAP8[$825>>0] = 48;
       $826 = $825;
       $827 = (($8) - ($826))|0;
       $828 = ($827|0)<(2);
       if ($828) {
        $estr$1200$i = $825;
       } else {
        $estr$1$lcssa$i = $825;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $829 = $e$4$ph$i >> 31;
     $830 = $829 & 2;
     $831 = (($830) + 43)|0;
     $832 = $831&255;
     $833 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$833>>0] = $832;
     $834 = $$114$i&255;
     $835 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$835>>0] = $834;
     $836 = $835;
     $837 = (($8) - ($836))|0;
     $$pn$i = $837;$estr$2$i = $835;
    }
    $838 = (($pl$0$i) + 1)|0;
    $839 = (($838) + ($$311$i))|0;
    $l$1$i = (($839) + ($790))|0;
    $840 = (($l$1$i) + ($$pn$i))|0;
    $841 = $fl$1$ & 73728;
    $842 = ($841|0)==(0);
    $843 = ($840|0)<($w$1|0);
    $or$cond$i93$i = $842 & $843;
    if ($or$cond$i93$i) {
     $844 = (($w$1) - ($840))|0;
     $845 = ($844>>>0)>(256);
     $846 = $845 ? 256 : $844;
     _memset(($pad$i|0),32,($846|0))|0;
     $847 = ($844>>>0)>(255);
     if ($847) {
      $$01$i94$i = $844;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $848 = (($$01$i94$i) + -256)|0;
       $849 = ($848>>>0)>(255);
       if ($849) {
        $$01$i94$i = $848;
       } else {
        $$0$lcssa$i96$i = $848;
        break;
       }
      }
     } else {
      $$0$lcssa$i96$i = $844;
     }
     (___fwritex($pad$i,$$0$lcssa$i96$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $850 = ($841|0)==(65536);
    $or$cond$i100$i = $850 & $843;
    if ($or$cond$i100$i) {
     $851 = (($w$1) - ($840))|0;
     $852 = ($851>>>0)>(256);
     $853 = $852 ? 256 : $851;
     _memset(($pad$i|0),48,($853|0))|0;
     $854 = ($851>>>0)>(255);
     if ($854) {
      $$01$i101$i = $851;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $855 = (($$01$i101$i) + -256)|0;
       $856 = ($855>>>0)>(255);
       if ($856) {
        $$01$i101$i = $855;
       } else {
        $$0$lcssa$i103$i = $855;
        break;
       }
      }
     } else {
      $$0$lcssa$i103$i = $851;
     }
     (___fwritex($pad$i,$$0$lcssa$i103$i,$f)|0);
    }
    do {
     if ($793) {
      $857 = ($a$8$ph$i>>>0)>($$31$i>>>0);
      $r$0$a$8$i = $857 ? $$31$i : $a$8$ph$i;
      $d$4183$i = $r$0$a$8$i;
      while(1) {
       $858 = HEAP32[$d$4183$i>>2]|0;
       $859 = ($858|0)==(0);
       if ($859) {
        $$1$lcssa$i112$i = $13;
       } else {
        $$12$i110$i = $13;$y$03$i109$i = $858;
        while(1) {
         $860 = (($y$03$i109$i>>>0) % 10)&-1;
         $861 = $860 | 48;
         $862 = $861&255;
         $863 = (($$12$i110$i) + -1|0);
         HEAP8[$863>>0] = $862;
         $864 = (($y$03$i109$i>>>0) / 10)&-1;
         $865 = ($y$03$i109$i>>>0)<(10);
         if ($865) {
          $$1$lcssa$i112$i = $863;
          break;
         } else {
          $$12$i110$i = $863;$y$03$i109$i = $864;
         }
        }
       }
       $866 = ($d$4183$i|0)==($r$0$a$8$i|0);
       do {
        if ($866) {
         $870 = ($$1$lcssa$i112$i|0)==($13|0);
         if (!($870)) {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $867 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
         if ($867) {
          $s7$0180$i = $$1$lcssa$i112$i;
         } else {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         while(1) {
          $868 = (($s7$0180$i) + -1|0);
          HEAP8[$868>>0] = 48;
          $869 = ($868>>>0)>($buf$i>>>0);
          if ($869) {
           $s7$0180$i = $868;
          } else {
           $s7$1$i = $868;
           break;
          }
         }
        }
       } while(0);
       $871 = $s7$1$i;
       $872 = (($14) - ($871))|0;
       (___fwritex($s7$1$i,$872,$f)|0);
       $873 = (($d$4183$i) + 4|0);
       $874 = ($873>>>0)>($$31$i>>>0);
       if ($874) {
        break;
       } else {
        $d$4183$i = $873;
       }
      }
      if (!($787)) {
       $875 = $fl$1$ & 8;
       $876 = ($875|0)==(0);
       if ($876) {
        break;
       }
      }
      (___fwritex(21736,1,$f)|0);
      $877 = ($873>>>0)<($z$6$i>>>0);
      $878 = ($$311$i|0)>(0);
      $or$cond28173$i = $877 & $878;
      if ($or$cond28173$i) {
       $$412175$i = $$311$i;$d$5174$i = $873;
       while(1) {
        $879 = HEAP32[$d$5174$i>>2]|0;
        $880 = ($879|0)==(0);
        if ($880) {
         $s8$0169$i = $13;
         label = 300;
        } else {
         $$12$i119$i = $13;$y$03$i118$i = $879;
         while(1) {
          $881 = (($y$03$i118$i>>>0) % 10)&-1;
          $882 = $881 | 48;
          $883 = $882&255;
          $884 = (($$12$i119$i) + -1|0);
          HEAP8[$884>>0] = $883;
          $885 = (($y$03$i118$i>>>0) / 10)&-1;
          $886 = ($y$03$i118$i>>>0)<(10);
          if ($886) {
           break;
          } else {
           $$12$i119$i = $884;$y$03$i118$i = $885;
          }
         }
         $887 = ($884>>>0)>($buf$i>>>0);
         if ($887) {
          $s8$0169$i = $884;
          label = 300;
         } else {
          $s8$0$lcssa$i = $884;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $888 = (($s8$0169$i) + -1|0);
          HEAP8[$888>>0] = 48;
          $889 = ($888>>>0)>($buf$i>>>0);
          if ($889) {
           $s8$0169$i = $888;
           label = 300;
          } else {
           $s8$0$lcssa$i = $888;
           break;
          }
         }
        }
        $890 = ($$412175$i|0)>(9);
        $891 = $890 ? 9 : $$412175$i;
        (___fwritex($s8$0$lcssa$i,$891,$f)|0);
        $892 = (($d$5174$i) + 4|0);
        $893 = (($$412175$i) + -9)|0;
        $894 = ($892>>>0)<($z$6$i>>>0);
        $895 = ($893|0)>(0);
        $or$cond28$i = $894 & $895;
        if ($or$cond28$i) {
         $$412175$i = $893;$d$5174$i = $892;
        } else {
         $$412$lcssa$i = $893;
         break;
        }
       }
      } else {
       $$412$lcssa$i = $$311$i;
      }
      $896 = ($$412$lcssa$i|0)>(0);
      if (!($896)) {
       break;
      }
      $897 = ($$412$lcssa$i>>>0)>(256);
      $898 = $897 ? 256 : $$412$lcssa$i;
      _memset(($pad$i|0),48,($898|0))|0;
      $899 = ($$412$lcssa$i>>>0)>(255);
      if ($899) {
       $$01$i125$i = $$412$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $900 = (($$01$i125$i) + -256)|0;
        $901 = ($900>>>0)>(255);
        if ($901) {
         $$01$i125$i = $900;
        } else {
         $$0$lcssa$i127$i = $900;
         break;
        }
       }
      } else {
       $$0$lcssa$i127$i = $$412$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i127$i,$f)|0);
     } else {
      $902 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa300$i ? $z$6$i : $902;
      $903 = ($$311$i|0)>(-1);
      do {
       if ($903) {
        $904 = $fl$1$ & 8;
        $$not$i = ($904|0)!=(0);
        $$5193$i = $$311$i;$d$6192$i = $a$8$ph$i;
        while(1) {
         $905 = HEAP32[$d$6192$i>>2]|0;
         $906 = ($905|0)==(0);
         if ($906) {
          label = 311;
         } else {
          $$12$i134$i = $13;$y$03$i133$i = $905;
          while(1) {
           $907 = (($y$03$i133$i>>>0) % 10)&-1;
           $908 = $907 | 48;
           $909 = $908&255;
           $910 = (($$12$i134$i) + -1|0);
           HEAP8[$910>>0] = $909;
           $911 = (($y$03$i133$i>>>0) / 10)&-1;
           $912 = ($y$03$i133$i>>>0)<(10);
           if ($912) {
            break;
           } else {
            $$12$i134$i = $910;$y$03$i133$i = $911;
           }
          }
          $913 = ($910|0)==($13|0);
          if ($913) {
           label = 311;
          } else {
           $s9$0$i = $910;
          }
         }
         if ((label|0) == 311) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $914 = ($d$6192$i|0)==($a$8$ph$i|0);
         do {
          if ($914) {
           $918 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $919 = ($$5193$i|0)>(0);
           $brmerge$i = $919 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $918;
            break;
           }
           (___fwritex(21736,1,$f)|0);
           $s9$2$i = $918;
          } else {
           $915 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($915) {
            $s9$1188$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $916 = (($s9$1188$i) + -1|0);
            HEAP8[$916>>0] = 48;
            $917 = ($916>>>0)>($buf$i>>>0);
            if ($917) {
             $s9$1188$i = $916;
            } else {
             $s9$2$i = $916;
             break;
            }
           }
          }
         } while(0);
         $920 = $s9$2$i;
         $921 = (($14) - ($920))|0;
         $922 = ($921|0)<($$5193$i|0);
         $$$5$i = $922 ? $921 : $$5193$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $923 = (($$5193$i) - ($921))|0;
         $924 = (($d$6192$i) + 4|0);
         $925 = ($924>>>0)<($z$6$$i>>>0);
         $926 = ($923|0)>(-1);
         $or$cond29$i = $925 & $926;
         if ($or$cond29$i) {
          $$5193$i = $923;$d$6192$i = $924;
         } else {
          break;
         }
        }
        $927 = ($923|0)>(0);
        if (!($927)) {
         break;
        }
        $928 = ($923>>>0)>(256);
        $929 = $928 ? 256 : $923;
        _memset(($pad$i|0),48,($929|0))|0;
        $930 = ($923>>>0)>(255);
        if ($930) {
         $$01$i140$i = $923;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $931 = (($$01$i140$i) + -256)|0;
          $932 = ($931>>>0)>(255);
          if ($932) {
           $$01$i140$i = $931;
          } else {
           $$0$lcssa$i142$i = $931;
           break;
          }
         }
        } else {
         $$0$lcssa$i142$i = $923;
        }
        (___fwritex($pad$i,$$0$lcssa$i142$i,$f)|0);
       }
      } while(0);
      $933 = $estr$2$i;
      $934 = (($8) - ($933))|0;
      (___fwritex($estr$2$i,$934,$f)|0);
     }
    } while(0);
    $935 = ($841|0)==(8192);
    $or$cond$i$i = $935 & $843;
    if ($or$cond$i$i) {
     $936 = (($w$1) - ($840))|0;
     $937 = ($936>>>0)>(256);
     $938 = $937 ? 256 : $936;
     _memset(($pad$i|0),32,($938|0))|0;
     $939 = ($936>>>0)>(255);
     if ($939) {
      $$01$i$i = $936;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $940 = (($$01$i$i) + -256)|0;
       $941 = ($940>>>0)>(255);
       if ($941) {
        $$01$i$i = $940;
       } else {
        $$0$lcssa$i$i = $940;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $936;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$30$i = $843 ? $w$1 : $840;
    $1045 = $229;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$30$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $1053 = $229;$1054 = $207;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 21640;$z$2 = $2;
   }
   }
  } while(0);
  L445: do {
   if ((label|0) == 77) {
    label = 0;
    $225 = $207;
    $226 = $t$1 & 32;
    $227 = ($225|0)==(0);
    $228 = ($229|0)==(0);
    $230 = $227 & $228;
    if ($230) {
     $308 = $207;$311 = $229;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 21640;
     label = 94;
    } else {
     $$012$i = $2;$232 = $225;$239 = $229;
     while(1) {
      $231 = $232 & 15;
      $233 = (21720 + ($231)|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $235 | $226;
      $237 = $236&255;
      $238 = (($$012$i) + -1|0);
      HEAP8[$238>>0] = $237;
      $240 = (_bitshift64Lshr(($232|0),($239|0),4)|0);
      $241 = tempRet0;
      $242 = ($240|0)==(0);
      $243 = ($241|0)==(0);
      $244 = $242 & $243;
      if ($244) {
       break;
      } else {
       $$012$i = $238;$232 = $240;$239 = $241;
      }
     }
     $245 = $fl$3 & 8;
     $246 = ($245|0)==(0);
     if ($246) {
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 21640;
      label = 94;
     } else {
      $247 = $t$1 >> 4;
      $248 = (21640 + ($247)|0);
      $308 = $207;$311 = $229;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $248;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $276 = $277;
    $278 = ($279>>>0)>(0);
    $280 = ($279|0)==(0);
    $281 = ($276>>>0)>(4294967295);
    $282 = $280 & $281;
    $283 = $278 | $282;
    if ($283) {
     $$05$i = $2;$284 = $276;$285 = $279;
     while(1) {
      $286 = (___uremdi3(($284|0),($285|0),10,0)|0);
      $287 = tempRet0;
      $288 = $286 | 48;
      $289 = $288&255;
      $290 = (($$05$i) + -1|0);
      HEAP8[$290>>0] = $289;
      $291 = (___udivdi3(($284|0),($285|0),10,0)|0);
      $292 = tempRet0;
      $293 = ($285>>>0)>(9);
      $294 = ($285|0)==(9);
      $295 = ($284>>>0)>(4294967295);
      $296 = $294 & $295;
      $297 = $293 | $296;
      if ($297) {
       $$05$i = $290;$284 = $291;$285 = $292;
      } else {
       break;
      }
     }
     $$0$lcssa$i45 = $290;$$01$lcssa$off0$i = $291;
    } else {
     $$0$lcssa$i45 = $2;$$01$lcssa$off0$i = $276;
    }
    $298 = ($$01$lcssa$off0$i|0)==(0);
    if ($298) {
     $308 = $277;$311 = $279;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $$12$i = $$0$lcssa$i45;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $299 = (($y$03$i>>>0) % 10)&-1;
      $300 = $299 | 48;
      $301 = $300&255;
      $302 = (($$12$i) + -1|0);
      HEAP8[$302>>0] = $301;
      $303 = (($y$03$i>>>0) / 10)&-1;
      $304 = ($y$03$i>>>0)<(10);
      if ($304) {
       $308 = $277;$311 = $279;$a$0 = $302;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $$12$i = $302;$y$03$i = $303;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    if ($326) {
     $327 = (($a$1) + ($p$0)|0);
     $1053 = $229;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 21640;$z$2 = $327;
     break;
    } else {
     $328 = $325;
     $329 = $a$1;
     $330 = (($328) - ($329))|0;
     $1053 = $229;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $330;$pl$2 = 0;$prefix$2 = 21640;$z$2 = $325;
     break;
    }
   }
   else if ((label|0) == 104) {
    label = 0;
    $i$0168 = 0;$l$1167 = 0;$ws$0169 = $1055;
    while(1) {
     $336 = HEAP32[$ws$0169>>2]|0;
     $337 = ($336|0)==(0);
     if ($337) {
      $i$0$lcssa = $i$0168;$l$1$lcssa = $l$1167;
      break;
     }
     $338 = (_wctomb($mb,$336)|0);
     $339 = ($338|0)>(-1);
     if (!($339)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     $340 = (($p$4296) - ($i$0168))|0;
     $341 = ($338>>>0)>($340>>>0);
     $335 = (($338) + ($i$0168))|0;
     if ($341) {
      $1057 = $1055;$1058 = $1056;$i$0166 = $i$0168;
      label = 110;
      break L445;
     }
     $333 = (($ws$0169) + 4|0);
     $334 = ($335>>>0)<($p$4296>>>0);
     if ($334) {
      $i$0168 = $335;$l$1167 = $338;$ws$0169 = $333;
     } else {
      $i$0$lcssa = $335;$l$1$lcssa = $338;
      break;
     }
    }
    $342 = ($l$1$lcssa|0)<(0);
    if ($342) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1057 = $1055;$1058 = $1056;$i$0166 = $i$0$lcssa;
     label = 110;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $305 = ($p$2|0)>(-1);
   $306 = $fl$4 & -65537;
   $$fl$4 = $305 ? $306 : $fl$4;
   $307 = $308;
   $309 = ($307|0)==(0);
   $310 = ($311|0)==(0);
   $312 = $309 & $310;
   $313 = ($p$2|0)==(0);
   $or$cond = $312 & $313;
   if ($or$cond) {
    $1053 = $311;$1054 = $308;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $314 = $a$0;
    $315 = (($3) - ($314))|0;
    $316 = $312&1;
    $317 = (($316) + ($315))|0;
    $318 = ($p$2|0)>($317|0);
    $p$2$ = $318 ? $p$2 : $317;
    $1053 = $311;$1054 = $308;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 110) {
   label = 0;
   $343 = $fl$1$ & 73728;
   $344 = ($343|0)==(0);
   $345 = ($i$0166|0)<($w$1|0);
   $or$cond$i56 = $344 & $345;
   if ($or$cond$i56) {
    $346 = (($w$1) - ($i$0166))|0;
    $347 = ($346>>>0)>(256);
    $348 = $347 ? 256 : $346;
    _memset(($pad$i|0),32,($348|0))|0;
    $349 = ($346>>>0)>(255);
    if ($349) {
     $$01$i57 = $346;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $350 = (($$01$i57) + -256)|0;
      $351 = ($350>>>0)>(255);
      if ($351) {
       $$01$i57 = $350;
      } else {
       $$0$lcssa$i59 = $350;
       break;
      }
     }
    } else {
     $$0$lcssa$i59 = $346;
    }
    (___fwritex($pad$i,$$0$lcssa$i59,$f)|0);
   }
   $352 = ($i$0166|0)==(0);
   L481: do {
    if (!($352)) {
     $i$1174 = 0;$ws$1175 = $1057;
     while(1) {
      $353 = HEAP32[$ws$1175>>2]|0;
      $354 = ($353|0)==(0);
      if ($354) {
       break L481;
      }
      $355 = (_wctomb($mb,$353)|0);
      $356 = (($355) + ($i$1174))|0;
      $357 = ($356|0)>($i$0166|0);
      if ($357) {
       break L481;
      }
      $358 = (($ws$1175) + 4|0);
      (___fwritex($mb,$355,$f)|0);
      $359 = ($356>>>0)<($i$0166>>>0);
      if ($359) {
       $i$1174 = $356;$ws$1175 = $358;
      } else {
       break;
      }
     }
    }
   } while(0);
   $360 = ($343|0)==(8192);
   $or$cond$i63 = $360 & $345;
   if ($or$cond$i63) {
    $361 = (($w$1) - ($i$0166))|0;
    $362 = ($361>>>0)>(256);
    $363 = $362 ? 256 : $361;
    _memset(($pad$i|0),32,($363|0))|0;
    $364 = ($361>>>0)>(255);
    if ($364) {
     $$01$i64 = $361;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $365 = (($$01$i64) + -256)|0;
      $366 = ($365>>>0)>(255);
      if ($366) {
       $$01$i64 = $365;
      } else {
       $$0$lcssa$i66 = $365;
       break;
      }
     }
    } else {
     $$0$lcssa$i66 = $361;
    }
    (___fwritex($pad$i,$$0$lcssa$i66,$f)|0);
   }
   $367 = $345 ? $w$1 : $i$0166;
   $1045 = $229;$1046 = $1058;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $367;$l10n$0 = $l10n$3;
   continue;
  }
  $942 = $z$2;
  $943 = $a$2;
  $944 = (($942) - ($943))|0;
  $945 = ($p$5|0)<($944|0);
  $$p$5 = $945 ? $944 : $p$5;
  $946 = (($pl$2) + ($$p$5))|0;
  $947 = ($w$1|0)<($946|0);
  $w$2 = $947 ? $946 : $w$1;
  $948 = $fl$6 & 73728;
  $949 = ($948|0)==(0);
  $950 = ($946|0)<($w$2|0);
  $or$cond$i73 = $949 & $950;
  if ($or$cond$i73) {
   $951 = (($w$2) - ($946))|0;
   $952 = ($951>>>0)>(256);
   $953 = $952 ? 256 : $951;
   _memset(($pad$i|0),32,($953|0))|0;
   $954 = ($951>>>0)>(255);
   if ($954) {
    $$01$i74 = $951;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $955 = (($$01$i74) + -256)|0;
     $956 = ($955>>>0)>(255);
     if ($956) {
      $$01$i74 = $955;
     } else {
      $$0$lcssa$i76 = $955;
      break;
     }
    }
   } else {
    $$0$lcssa$i76 = $951;
   }
   (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $957 = ($948|0)==(65536);
  $or$cond$i49 = $957 & $950;
  if ($or$cond$i49) {
   $958 = (($w$2) - ($946))|0;
   $959 = ($958>>>0)>(256);
   $960 = $959 ? 256 : $958;
   _memset(($pad$i|0),48,($960|0))|0;
   $961 = ($958>>>0)>(255);
   if ($961) {
    $$01$i50 = $958;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $962 = (($$01$i50) + -256)|0;
     $963 = ($962>>>0)>(255);
     if ($963) {
      $$01$i50 = $962;
     } else {
      $$0$lcssa$i52 = $962;
      break;
     }
    }
   } else {
    $$0$lcssa$i52 = $958;
   }
   (___fwritex($pad$i,$$0$lcssa$i52,$f)|0);
  }
  $964 = ($944|0)<($$p$5|0);
  if ($964) {
   $965 = (($$p$5) - ($944))|0;
   $966 = ($965>>>0)>(256);
   $967 = $966 ? 256 : $965;
   _memset(($pad$i|0),48,($967|0))|0;
   $968 = ($965>>>0)>(255);
   if ($968) {
    $$01$i35 = $965;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $969 = (($$01$i35) + -256)|0;
     $970 = ($969>>>0)>(255);
     if ($970) {
      $$01$i35 = $969;
     } else {
      $$0$lcssa$i37 = $969;
      break;
     }
    }
   } else {
    $$0$lcssa$i37 = $965;
   }
   (___fwritex($pad$i,$$0$lcssa$i37,$f)|0);
  }
  (___fwritex($a$2,$944,$f)|0);
  $971 = ($948|0)==(8192);
  $or$cond$i = $971 & $950;
  if (!($or$cond$i)) {
   $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $972 = (($w$2) - ($946))|0;
  $973 = ($972>>>0)>(256);
  $974 = $973 ? 256 : $972;
  _memset(($pad$i|0),32,($974|0))|0;
  $975 = ($972>>>0)>(255);
  if ($975) {
   $$01$i = $972;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $976 = (($$01$i) + -256)|0;
    $977 = ($976>>>0)>(255);
    if ($977) {
     $$01$i = $976;
    } else {
     $$0$lcssa$i = $976;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $972;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $978 = ($f|0)==(0|0);
  if (!($978)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $979 = ($l10n$0|0)==(0);
  if ($979) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$289 = 1;
  }
  while(1) {
   $980 = (($nl_type) + ($i$289<<2)|0);
   $981 = HEAP32[$980>>2]|0;
   $982 = ($981|0)==(0);
   if ($982) {
    $i$388 = $i$289;
    break;
   }
   $983 = (($nl_arg) + ($i$289<<3)|0);
   $984 = ($981>>>0)>(20);
   L537: do {
    if (!($984)) {
     do {
      switch ($981|0) {
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $986 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $987 = ($986|0)<(0);
       $988 = $987 << 31 >> 31;
       $989 = $983;
       $990 = $989;
       HEAP32[$990>>2] = $986;
       $991 = (($989) + 4)|0;
       $992 = $991;
       HEAP32[$992>>2] = $988;
       break L537;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1022 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1023 = $1022&255;
       $1024 = $1023 << 24 >> 24;
       $1025 = ($1024|0)<(0);
       $1026 = $1025 << 31 >> 31;
       $1027 = $983;
       $1028 = $1027;
       HEAP32[$1028>>2] = $1024;
       $1029 = (($1027) + 4)|0;
       $1030 = $1029;
       HEAP32[$1030>>2] = $1026;
       break L537;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $993 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $994 = $983;
       $995 = $994;
       HEAP32[$995>>2] = $993;
       $996 = (($994) + 4)|0;
       $997 = $996;
       HEAP32[$997>>2] = 0;
       break L537;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1036 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$983>>3] = $1036;
       break L537;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1008 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1009 = $1008&65535;
       $1010 = $1009 << 16 >> 16;
       $1011 = ($1010|0)<(0);
       $1012 = $1011 << 31 >> 31;
       $1013 = $983;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       $1015 = (($1013) + 4)|0;
       $1016 = $1015;
       HEAP32[$1016>>2] = $1012;
       break L537;
       break;
      }
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $985 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$983>>2] = $985;
       break L537;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1017 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1017 & 65535;
       $1018 = $983;
       $1019 = $1018;
       HEAP32[$1019>>2] = $$mask1$i;
       $1020 = (($1018) + 4)|0;
       $1021 = $1020;
       HEAP32[$1021>>2] = 0;
       break L537;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1037 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$983>>3] = $1037;
       break L537;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1031 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1031 & 255;
       $1032 = $983;
       $1033 = $1032;
       HEAP32[$1033>>2] = $$mask$i;
       $1034 = (($1032) + 4)|0;
       $1035 = $1034;
       HEAP32[$1035>>2] = 0;
       break L537;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $998 = $arglist_current44;
       $999 = $998;
       $1000 = HEAP32[$999>>2]|0;
       $1001 = (($998) + 4)|0;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1004 = $983;
       $1005 = $1004;
       HEAP32[$1005>>2] = $1000;
       $1006 = (($1004) + 4)|0;
       $1007 = $1006;
       HEAP32[$1007>>2] = $1003;
       break L537;
       break;
      }
      default: {
       break L537;
      }
      }
     } while(0);
    }
   } while(0);
   $1038 = (($i$289) + 1)|0;
   $1039 = ($1038|0)<(10);
   if ($1039) {
    $i$289 = $1038;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1042 = (($nl_type) + ($i$388<<2)|0);
   $1043 = HEAP32[$1042>>2]|0;
   $1044 = ($1043|0)==(0);
   $1041 = (($i$388) + 1)|0;
   if (!($1044)) {
    $$0 = -1;
    label = 362;
    break;
   }
   $1040 = ($1041|0)<(10);
   if ($1040) {
    $i$388 = $1041;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 362) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=21744+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  STACKTOP = sp;return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $11 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$5 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $notlhs = ($3<<24>>24)!=(0);
    $notrhs = ($$08|0)!=(0);
    $or$cond$not = $notrhs & $notlhs;
    $4 = ($5<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond$not & $4;
    if (!($or$cond4)) {
     $11 = $5;$r$0$lcssa = $r$07;
     break L4;
    }
    $6 = (($l$06) + 1|0);
    $7 = (($r$07) + 1|0);
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $11 = 0;$r$0$lcssa = $7;
     break;
    } else {
     $$08$in = $$08;$5 = $8;$l$06 = $6;$r$07 = $7;
    }
   }
  }
 } while(0);
 $10 = $11&255;
 $12 = HEAP8[$r$0$lcssa>>0]|0;
 $13 = $12&255;
 $14 = (($10) - ($13))|0;
 $$03 = $14;
 STACKTOP = sp;return ($$03|0);
}
function runPostSets() {
 
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&3](a1|0,a2|0,a3|0)|0;
    }
  

    function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      FUNCTION_TABLE_viiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0);
    }
  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&7](a1|0,a2|0);
    }
  

    function dynCall_vidd(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=+a2; a3=+a3;
      FUNCTION_TABLE_vidd[index&1](a1|0,+a2,+a3);
    }
  

    function dynCall_ii(index,a1) {
      index = index|0;
      a1=a1|0;
      return FUNCTION_TABLE_ii[index&1](a1|0)|0;
    }
  

    function dynCall_viii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      FUNCTION_TABLE_viii[index&3](a1|0,a2|0,a3|0);
    }
  

    function dynCall_v(index) {
      index = index|0;
      
      FUNCTION_TABLE_v[index&1]();
    }
  

    function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      FUNCTION_TABLE_viiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
    }
  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&3](a1|0,a2|0)|0;
    }
  

    function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return FUNCTION_TABLE_iiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }
  

    function dynCall_viiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      FUNCTION_TABLE_viiii[index&1](a1|0,a2|0,a3|0,a4|0);
    }
  
function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(2); }
  function b3(p0,p1,p2) { p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(3); }
  function b4(p0) { p0 = p0|0; nullFunc_ii(4);return 0; }
  function b5(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(5); }
  function b6() { ; nullFunc_v(6); }
  function b7(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(7); }
  function b8(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(8);return 0; }
  function b9(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(9);return 0; }
  function b10(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,_stbi__stdio_read,_sn_write,b0];
  var FUNCTION_TABLE_viiiii = [b1,_KeyCallback];
  var FUNCTION_TABLE_vii = [b2,_stbi__stdio_skip,_ErrorCallback,_CursorEnterCallback,_CharCallback,b2,b2,b2];
  var FUNCTION_TABLE_vidd = [b3,_ScrollCallback];
  var FUNCTION_TABLE_ii = [b4,_stbi__stdio_eof];
  var FUNCTION_TABLE_viii = [b5,_WindowSizeCallback,_stbi__idct_block,b5];
  var FUNCTION_TABLE_v = [b6,_UpdateDrawOneFrame];
  var FUNCTION_TABLE_viiiiii = [b7,_stbi__YCbCr_to_RGB_row];
  var FUNCTION_TABLE_iii = [b8,_point_compare,_uint32_compare,b8];
  var FUNCTION_TABLE_iiiiii = [b9,_stbi__resample_row_hv_2,_resample_row_1,_stbi__resample_row_v_2,_stbi__resample_row_h_2,_stbi__resample_row_generic,b9,b9];
  var FUNCTION_TABLE_viiii = [b10,_MouseButtonCallback];

    return { _i64Subtract: _i64Subtract, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _memset: _memset, _malloc: _malloc, _strncpy: _strncpy, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vii: dynCall_vii, dynCall_vidd: dynCall_vidd, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vii": nullFunc_vii, "nullFunc_vidd": nullFunc_vidd, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_vii": invoke_vii, "invoke_vidd": invoke_vidd, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_alGetError": _alGetError, "_exp": _exp, "_glfwCreateWindow": _glfwCreateWindow, "_sqrtf": _sqrtf, "_fread": _fread, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glGetShaderiv": _glGetShaderiv, "_alBufferData": _alBufferData, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "_glBindBuffer": _glBindBuffer, "_glCreateProgram": _glCreateProgram, "_alSource3f": _alSource3f, "_fsync": _fsync, "_sbrk": _sbrk, "_glBlendFunc": _glBlendFunc, "_glGetAttribLocation": _glGetAttribLocation, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_close": _close, "_rewind": _rewind, "_cos": _cos, "_recv": _recv, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_glfwInit": _glfwInit, "_write": _write, "_ftell": _ftell, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "_alSourcePlay": _alSourcePlay, "_glfwSetErrorCallback": _glfwSetErrorCallback, "_glfwDefaultWindowHints": _glfwDefaultWindowHints, "_glfwDestroyWindow": _glfwDestroyWindow, "_glGenerateMipmap": _glGenerateMipmap, "_glVertexAttribPointer": _glVertexAttribPointer, "_send": _send, "_alcCreateContext": _alcCreateContext, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_llvm_stackrestore": _llvm_stackrestore, "_glDeleteShader": _glDeleteShader, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_glDrawElements": _glDrawElements, "_alGetSourcei": _alGetSourcei, "_glBufferSubData": _glBufferSubData, "_alcMakeContextCurrent": _alcMakeContextCurrent, "_strerror_r": _strerror_r, "_glViewport": _glViewport, "_alSourceQueueBuffers": _alSourceQueueBuffers, "_fscanf": _fscanf, "___setErrNo": ___setErrNo, "_alcGetCurrentContext": _alcGetCurrentContext, "_alSourcef": _alSourcef, "_glDeleteTextures": _glDeleteTextures, "_glDepthFunc": _glDepthFunc, "_alSourcei": _alSourcei, "_alGenBuffers": _alGenBuffers, "_glEnable": _glEnable, "_glGenTextures": _glGenTextures, "_alDeleteSources": _alDeleteSources, "_pread": _pread, "_glfwSetWindowShouldClose": _glfwSetWindowShouldClose, "_emscripten_get_now": _emscripten_get_now, "_glAttachShader": _glAttachShader, "_read": _read, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_exit": _exit, "_glGetString": _glGetString, "_llvm_pow_f64": _llvm_pow_f64, "_glfwPollEvents": _glfwPollEvents, "_lseek": _lseek, "_vfprintf": _vfprintf, "_floor": _floor, "_glCompressedTexImage2D": _glCompressedTexImage2D, "_pwrite": _pwrite, "_open": _open, "_glClearColor": _glClearColor, "_glBindTexture": _glBindTexture, "__scanString": __scanString, "_glfwSetCharCallback": _glfwSetCharCallback, "_glUniform1i": _glUniform1i, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_alcDestroyContext": _alcDestroyContext, "_glDrawArrays": _glDrawArrays, "_sinf": _sinf, "_fseek": _fseek, "_fclose": _fclose, "_log": _log, "_glfwSwapBuffers": _glfwSwapBuffers, "_alcGetString": _alcGetString, "_alSourceStop": _alSourceStop, "_glCompileShader": _glCompileShader, "_alcCloseDevice": _alcCloseDevice, "__getFloat": __getFloat, "_fputc": _fputc, "_abort": _abort, "_alcGetContextsDevice": _alcGetContextsDevice, "_glDeleteBuffers": _glDeleteBuffers, "_glBufferData": _glBufferData, "_glTexImage2D": _glTexImage2D, "_fopen": _fopen, "_sin": _sin, "_glGetProgramiv": _glGetProgramiv, "_glfwGetTime": _glfwGetTime, "_alListener3f": _alListener3f, "_ungetc": _ungetc, "_glfwGetPrimaryMonitor": _glfwGetPrimaryMonitor, "_glfwGetKey": _glfwGetKey, "_glLinkProgram": _glLinkProgram, "__reallyNegative": __reallyNegative, "_glGetUniformLocation": _glGetUniformLocation, "_strerror": _strerror, "_glClear": _glClear, "_fileno": _fileno, "__exit": __exit, "_glfwTerminate": _glfwTerminate, "_glPixelStorei": _glPixelStorei, "__formatString": __formatString, "_alDeleteBuffers": _alDeleteBuffers, "_llvm_stacksave": _llvm_stacksave, "_mkport": _mkport, "_glfwGetCursorPos": _glfwGetCursorPos, "_fflush": _fflush, "_feof": _feof, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_glfwWindowHint": _glfwWindowHint, "_alGenSources": _alGenSources, "_fgetc": _fgetc, "_alcOpenDevice": _alcOpenDevice, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_glTexParameteri": _glTexParameteri, "_fgets": _fgets, "_glfwSetScrollCallback": _glfwSetScrollCallback, "_glCreateShader": _glCreateShader, "_glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback, "_alSourceUnqueueBuffers": _alSourceUnqueueBuffers, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stdout": _stdout, "_whiteTexture": _whiteTexture }, buffer);
  var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__strncpy = asm["_strncpy"]; asm["_strncpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strncpy.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_runPostSets.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



