
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'skully_escape.data';
    var REMOTE_PACKAGE_BASE = 'skully_escape.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
      var REMOTE_PACKAGE_SIZE = 6432857;
      var PACKAGE_UUID = '42e79e6e-0d53-4bc2-be18-d26919c24a50';
    
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'resources', true, true);
Module['FS_createPath']('/resources', 'audio', true, true);
Module['FS_createPath']('/resources', 'textures', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };

      new DataRequest(0, 2310768, 0, 1).open('GET', '/resources/audio/come_play_with_me.ogg');
    new DataRequest(2310768, 2343202, 0, 1).open('GET', '/resources/audio/door.ogg');
    new DataRequest(2343202, 2362898, 0, 1).open('GET', '/resources/audio/scream.ogg');
    new DataRequest(2362898, 2399557, 0, 0).open('GET', '/resources/textures/alagard.png');
    new DataRequest(2399557, 3070038, 0, 0).open('GET', '/resources/textures/background_aisle01.png');
    new DataRequest(3070038, 3577292, 0, 0).open('GET', '/resources/textures/background_aisle02.png');
    new DataRequest(3577292, 3829298, 0, 0).open('GET', '/resources/textures/background_armory.png');
    new DataRequest(3829298, 4116002, 0, 0).open('GET', '/resources/textures/background_attic.png');
    new DataRequest(4116002, 4370711, 0, 0).open('GET', '/resources/textures/background_bathroom.png');
    new DataRequest(4370711, 4680872, 0, 0).open('GET', '/resources/textures/background_kitchen.png');
    new DataRequest(4680872, 4999968, 0, 0).open('GET', '/resources/textures/background_livingroom.png');
    new DataRequest(4999968, 5082453, 0, 0).open('GET', '/resources/textures/doors.png');
    new DataRequest(5082453, 5131795, 0, 0).open('GET', '/resources/textures/monster_arc.png');
    new DataRequest(5131795, 5179262, 0, 0).open('GET', '/resources/textures/monster_blazon01.png');
    new DataRequest(5179262, 5226347, 0, 0).open('GET', '/resources/textures/monster_blazon02.png');
    new DataRequest(5226347, 5278940, 0, 0).open('GET', '/resources/textures/monster_blazon03.png');
    new DataRequest(5278940, 5349385, 0, 0).open('GET', '/resources/textures/monster_candle.png');
    new DataRequest(5349385, 5391914, 0, 0).open('GET', '/resources/textures/monster_chair_left.png');
    new DataRequest(5391914, 5438217, 0, 0).open('GET', '/resources/textures/monster_chair_right.png');
    new DataRequest(5438217, 5531711, 0, 0).open('GET', '/resources/textures/monster_closet.png');
    new DataRequest(5531711, 5612124, 0, 0).open('GET', '/resources/textures/monster_lamp_left.png');
    new DataRequest(5612124, 5760423, 0, 0).open('GET', '/resources/textures/monster_lamp_right.png');
    new DataRequest(5760423, 5827806, 0, 0).open('GET', '/resources/textures/monster_mirror.png');
    new DataRequest(5827806, 5879351, 0, 0).open('GET', '/resources/textures/monster_phone.png');
    new DataRequest(5879351, 5975857, 0, 0).open('GET', '/resources/textures/monster_picture.png');
    new DataRequest(5975857, 6151452, 0, 0).open('GET', '/resources/textures/monster_window.png');
    new DataRequest(6151452, 6290217, 0, 0).open('GET', '/resources/textures/skully.png');
    new DataRequest(6290217, 6293382, 0, 0).open('GET', '/resources/textures/skully_icon.png');
    new DataRequest(6293382, 6312519, 0, 0).open('GET', '/resources/textures/skully_logo.png');
    new DataRequest(6312519, 6432857, 0, 0).open('GET', '/resources/textures/title.png');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
      // (we may be allocating before malloc is ready, during startup).
      var ptr = Module['getMemory'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/resources/audio/come_play_with_me.ogg"].onload();
          DataRequest.prototype.requests["/resources/audio/door.ogg"].onload();
          DataRequest.prototype.requests["/resources/audio/scream.ogg"].onload();
          DataRequest.prototype.requests["/resources/textures/alagard.png"].onload();
          DataRequest.prototype.requests["/resources/textures/background_aisle01.png"].onload();
          DataRequest.prototype.requests["/resources/textures/background_aisle02.png"].onload();
          DataRequest.prototype.requests["/resources/textures/background_armory.png"].onload();
          DataRequest.prototype.requests["/resources/textures/background_attic.png"].onload();
          DataRequest.prototype.requests["/resources/textures/background_bathroom.png"].onload();
          DataRequest.prototype.requests["/resources/textures/background_kitchen.png"].onload();
          DataRequest.prototype.requests["/resources/textures/background_livingroom.png"].onload();
          DataRequest.prototype.requests["/resources/textures/doors.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_arc.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_blazon01.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_blazon02.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_blazon03.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_candle.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_chair_left.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_chair_right.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_closet.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_lamp_left.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_lamp_right.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_mirror.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_phone.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_picture.png"].onload();
          DataRequest.prototype.requests["/resources/textures/monster_window.png"].onload();
          DataRequest.prototype.requests["/resources/textures/skully.png"].onload();
          DataRequest.prototype.requests["/resources/textures/skully_icon.png"].onload();
          DataRequest.prototype.requests["/resources/textures/skully_logo.png"].onload();
          DataRequest.prototype.requests["/resources/textures/title.png"].onload();
          Module['removeRunDependency']('datafile_skully_escape.data');

    };
    Module['addRunDependency']('datafile_skully_escape.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage();

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;




  try {
    if (ArrayBuffer.transfer) {
      buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
    } else {
      var oldHEAP8 = HEAP8;
      buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
  } catch(e) {
    return false;
  }

  var success = _emscripten_replace_memory(buffer);
  if (!success) return false;

  // everything worked

  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [function($0, $1) { { Module.printErr('bad name in getProcAddress: ' + [Pointer_stringify($0), Pointer_stringify($1)]); } }];

function _emscripten_asm_const_2(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1) | 0;
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 35232;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,73,78,71,32,71,65,77,69,74,65,77,32,45,32,83,75,85,76,76,89,32,69,83,67,65,80,69,0,0,0,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,99,111,109,101,95,112,108,97,121,95,119,105,116,104,95,109,101,46,111,103,103,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,97,108,97,103,97,114,100,46,112,110,103,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,100,111,111,114,115,46,112,110,103,0,0,0,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,100,111,111,114,46,111,103,103,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,97,117,100,105,111,47,115,99,114,101,97,109,46,111,103,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,115,107,117,108,108,121,95,108,111,103,111,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,82,65,89,32,84,69,65,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,112,111,119,101,114,101,100,32,98,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,116,105,116,108,101,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,82,69,83,83,32,69,78,84,69,82,32,116,111,32,83,84,65,82,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,98,97,99,107,103,114,111,117,110,100,95,97,116,116,105,99,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,79,85,82,32,80,65,82,69,78,84,83,32,65,82,69,32,71,79,78,69,33,32,84,73,77,69,32,84,79,32,69,83,67,65,80,69,33,10,84,72,69,32,68,79,79,82,32,73,83,32,76,79,67,75,69,68,46,46,46,32,84,85,82,78,32,79,78,32,84,72,69,32,76,73,71,72,84,83,33,32,59,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,98,97,99,107,103,114,111,117,110,100,95,97,105,115,108,101,48,49,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,72,79,32,73,83,32,84,72,69,82,69,63,63,63,10,65,78,89,66,79,68,89,32,73,78,32,84,72,69,32,82,79,79,77,63,63,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,98,97,99,107,103,114,111,117,110,100,95,97,105,115,108,101,48,50,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,108,97,109,112,95,114,105,103,104,116,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,97,114,99,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,65,83,32,76,69,71,83,32,66,85,84,32,67,65,78,32,78,79,84,32,87,65,76,75,46,46,46,10,83,69,65,82,67,72,32,70,79,82,32,73,84,32,84,79,32,79,80,69,78,32,84,72,69,32,68,79,79,82,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,98,97,99,107,103,114,111,117,110,100,95,97,114,109,111,114,121,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,98,108,97,122,111,110,48,49,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,98,108,97,122,111,110,48,50,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,98,108,97,122,111,110,48,51,46,112,110,103,0,0,0,0,0,0,0,0,0,78,79,32,77,79,82,69,32,84,73,80,83,46,46,46,10,70,79,76,76,79,87,32,89,79,85,82,32,73,78,83,84,73,78,67,84,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,98,97,99,107,103,114,111,117,110,100,95,108,105,118,105,110,103,114,111,111,109,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,99,97,110,100,108,101,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,112,105,99,116,117,114,101,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,112,104,111,110,101,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,87,72,69,78,32,87,73,78,68,32,66,76,79,87,83,44,32,73,84,32,75,78,79,87,83,32,84,72,69,32,68,73,82,69,67,84,73,79,78,10,76,69,84,32,73,84,32,71,85,73,68,69,32,89,79,85,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,98,97,99,107,103,114,111,117,110,100,95,107,105,116,99,104,101,110,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,99,108,111,115,101,116,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,99,104,97,105,114,95,108,101,102,116,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,119,105,110,100,111,119,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,81,85,73,84,69,32,66,79,82,73,78,71,32,65,82,79,85,78,68,46,46,46,10,65,78,89,32,66,69,84,84,69,82,32,69,78,84,69,82,84,65,73,78,73,78,71,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,98,97,99,107,103,114,111,117,110,100,95,98,97,116,104,114,111,111,109,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,108,97,109,112,95,108,101,102,116,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,109,105,114,114,111,114,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,109,111,110,115,116,101,114,95,99,104,97,105,114,95,114,105,103,104,116,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,82,73,67,75,32,79,82,32,84,82,69,65,84,33,32,87,72,79,32,73,83,32,84,72,69,32,77,79,83,84,32,66,69,65,85,84,73,70,85,76,10,83,75,69,76,69,84,79,78,32,73,78,32,84,72,69,32,87,79,82,76,68,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,72,79,79,83,69,32,87,73,83,69,76,89,33,0,0,80,82,69,83,83,32,83,80,65,67,69,32,111,114,32,67,76,73,67,75,32,116,111,32,73,78,84,69,82,65,67,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,79,78,71,82,65,84,85,76,65,84,73,79,78,83,33,0,0,0,0,0,0,0,0,83,75,85,76,76,89,32,69,83,67,65,80,69,68,33,0,80,82,69,83,83,32,69,78,84,69,82,32,111,114,32,67,76,73,67,75,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,115,107,117,108,108,121,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,114,101,115,111,117,114,99,101,115,47,116,101,120,116,117,114,101,115,47,115,107,117,108,108,121,95,105,99,111,110,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,105,110,103,32,114,97,121,108,105,98,32,40,118,49,46,51,46,48,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,97,114,103,101,116,32,116,105,109,101,32,112,101,114,32,102,114,97,109,101,58,32,37,48,50,46,48,51,102,32,109,105,108,108,105,115,101,99,111,110,100,115,0,0,0,0,0,0,0,0,0,0,0,0,0,87,105,110,100,111,119,32,99,108,111,115,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,97,99,107,32,66,117,102,102,101,114,32,79,118,101,114,102,108,111,119,32,40,77,65,88,32,37,105,32,77,97,116,114,105,120,41], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10136);
/* memory initializer */ allocate([128,191,0,0,0,0,0,0,0,0,0,0,0,0,77,65,88,95,76,73,78,69,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,65,88,95,84,82,73,65,78,71,76,69,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,65,88,95,81,85,65,68,83,95,66,65,84,67,72,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,80,85,58,32,86,101,110,100,111,114,58,32,32,32,37,115,0,0,0,0,0,0,0,71,80,85,58,32,82,101,110,100,101,114,101,114,58,32,37,115,0,0,0,0,0,0,0,71,80,85,58,32,86,101,114,115,105,111,110,58,32,32,37,115,0,0,0,0,0,0,0,71,80,85,58,32,71,76,83,76,58,32,32,32,32,32,37,115,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,115,117,112,112,111,114,116,101,100,32,101,120,116,101,110,115,105,111,110,115,58,32,37,105,0,0,0,0,0,0,71,76,95,79,69,83,95,118,101,114,116,101,120,95,97,114,114,97,121,95,111,98,106,101,99,116,0,0,0,0,0,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,79,69,83,0,0,0,0,0,0,0,0,0,0,0,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,79,69,83,0,0,0,0,0,0,0,0,0,0,0,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,79,69,83,0,71,76,95,79,69,83,95,116,101,120,116,117,114,101,95,110,112,111,116,0,0,0,0,0,0,0,0,0,0,0,0,0,71,76,95,69,88,84,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,115,51,116,99,0,71,76,95,87,69,66,75,73,84,95,87,69,66,71,76,95,99,111,109,112,114,101,115,115,101,100,95,116,101,120,116,117,114,101,95,115,51,116,99,0,0,0,0,0,0,0,0,0,71,76,95,79,69,83,95,99,111,109,112,114,101,115,115,101,100,95,69,84,67,49,95,82,71,66,56,95,116,101,120,116,117,114,101,0,0,0,0,0,0,0,0,0,0,0,0,0,71,76,95,65,82,66,95,69,83,51,95,99,111,109,112,97,116,105,98,105,108,105,116,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,76,95,73,77,71,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,112,118,114,116,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,76,95,75,72,82,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,97,115,116,99,95,104,100,114,0,0,0,0,0,0,0,0,0,0,0,0,0,91,69,88,84,69,78,83,73,79,78,93,32,86,65,79,32,101,120,116,101,110,115,105,111,110,32,100,101,116,101,99,116,101,100,44,32,86,65,79,32,102,117,110,99,116,105,111,110,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,91,69,88,84,69,78,83,73,79,78,93,32,86,65,79,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,102,111,117,110,100,44,32,86,65,79,32,117,115,97,103,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,91,69,88,84,69,78,83,73,79,78,93,32,78,80,79,84,32,116,101,120,116,117,114,101,115,32,101,120,116,101,110,115,105,111,110,32,100,101,116,101,99,116,101,100,44,32,102,117,108,108,32,78,80,79,84,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,91,69,88,84,69,78,83,73,79,78,93,32,78,80,79,84,32,116,101,120,116,117,114,101,115,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,102,111,117,110,100,44,32,78,80,79,84,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,32,105,115,32,108,105,109,105,116,101,100,32,40,110,111,45,109,105,112,109,97,112,115,44,32,110,111,45,114,101,112,101,97,116,41,0,91,69,88,84,69,78,83,73,79,78,93,32,68,88,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,0,0,91,69,88,84,69,78,83,73,79,78,93,32,69,84,67,49,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,0,91,69,88,84,69,78,83,73,79,78,93,32,69,84,67,50,47,69,65,67,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,91,69,88,84,69,78,83,73,79,78,93,32,80,86,82,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,0,91,69,88,84,69,78,83,73,79,78,93,32,65,83,84,67,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,115,32,115,117,112,112,111,114,116,101,100,0,0,91,84,69,88,32,73,68,32,37,105,93,32,66,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,66,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,88,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,69,84,67,49,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,69,84,67,50,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,80,86,82,84,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,65,83,84,67,32,99,111,109,112,114,101,115,115,101,100,32,116,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,84,101,120,116,117,114,101,32,102,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,91,84,69,88,32,73,68,32,37,105,93,32,84,101,120,116,117,114,101,32,99,114,101,97,116,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,120,37,105,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,70,66,79,32,73,68,32,37,105,93,32,85,110,108,111,97,100,101,100,32,102,114,97,109,101,98,117,102,102,101,114,32,111,98,106,101,99,116,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,84,69,88,32,73,68,32,37,105,93,32,85,110,108,111,97,100,101,100,32,116,101,120,116,117,114,101,32,100,97,116,97,32,40,98,97,115,101,32,119,104,105,116,101,32,116,101,120,116,117,114,101,41,32,102,114,111,109,32,86,82,65,77,0,0,0,0,0,0,0,0,85,110,108,111,97,100,101,100,32,112,111,115,116,112,114,111,99,101,115,115,105,110,103,32,100,97,116,97,0,0,0,0,79,112,101,110,71,76,32,103,114,97,112,104,105,99,32,100,101,118,105,99,101,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,118,101,114,116,101,120,80,111,115,105,116,105,111,110,0,0,118,101,114,116,101,120,84,101,120,67,111,111,114,100,0,0,118,101,114,116,101,120,78,111,114,109,97,108,0,0,0,0,109,111,100,101,108,118,105,101,119,77,97,116,114,105,120,0,112,114,111,106,101,99,116,105,111,110,77,97,116,114,105,120,0,0,0,0,0,0,0,0,116,105,110,116,67,111,108,111,114,0,0,0,0,0,0,0,116,101,120,116,117,114,101,48,0,0,0,0,0,0,0,0,91,86,83,72,68,82,32,73,68,32,37,105,93,32,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,118,101,114,116,101,120,32,115,104,97,100,101,114,46,46,46,0,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,91,86,83,72,68,82,32,73,68,32,37,105,93,32,86,101,114,116,101,120,32,115,104,97,100,101,114,32,99,111,109,112,105,108,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,0,91,70,83,72,68,82,32,73,68,32,37,105,93,32,70,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,102,114,97,103,109,101,110,116,32,115,104,97,100,101,114,46,46,46,0,0,0,0,0,0,91,70,83,72,68,82,32,73,68,32,37,105,93,32,70,114,97,103,109,101,110,116,32,115,104,97,100,101,114,32,99,111,109,112,105,108,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,91,83,72,68,82,32,73,68,32,37,105,93,32,70,97,105,108,101,100,32,116,111,32,108,105,110,107,32,115,104,97,100,101,114,32,112,114,111,103,114,97,109,46,46,46,0,0,0,91,83,72,68,82,32,73,68,32,37,105,93,32,83,104,97,100,101,114,32,112,114,111,103,114,97,109,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,97,110,39,116,32,102,111,112,101,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,110,103,0,0,0,0,0,98,109,112,0,0,0,0,0,116,103,97,0,0,0,0,0,106,112,103,0,0,0,0,0,103,105,102,0,0,0,0,0,112,115,100,0,0,0,0,0,112,105,99,0,0,0,0,0,100,100,115,0,0,0,0,0,112,107,109,0,0,0,0,0,107,116,120,0,0,0,0,0,112,118,114,0,0,0,0,0,97,115,116,99,0,0,0,0,91,37,115,93,32,73,109,97,103,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,37,105,120,37,105,41,0,0,91,37,115,93,32,73,109,97,103,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,44,32,102,105,108,101,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,0,0,0,0,0,84,101,120,116,117,114,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,99,114,101,97,116,101,100,0,0,0,0,91,84,69,88,32,73,68,32,37,105,93,32,85,110,108,111,97,100,101,100,32,116,101,120,116,117,114,101,32,100,97,116,97,32,102,114,111,109,32,86,82,65,77,32,40,71,80,85,41,0,0,0,0,0,0,0,70,111,114,109,97,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,112,105,120,101,108,32,100,97,116,97,32,114,101,116,114,105,101,118,97,108,0,0,0,73,109,97,103,101,32,100,97,116,97,32,102,111,114,109,97,116,32,105,115,32,99,111,109,112,114,101,115,115,101,100,44,32,99,97,110,32,110,111,116,32,98,101,32,99,111,110,118,101,114,116,101,100,0,0,0,73,109,97,103,101,32,99,111,110,118,101,114,116,101,100,32,116,111,32,80,79,84,58,32,40,37,105,120,37,105,41,32,45,62,32,40,37,105,120,37,105,41,0,0,0,0,0,0,46,47,115,116,98,95,114,101,99,116,95,112,97,99,107,46,104,0,0,0,0,0,0,0,119,105,100,116,104,32,60,61,32,48,120,102,102,102,102,32,38,38,32,104,101,105,103,104,116,32,60,61,32,48,120,102,102,102,102,0,0,0,0,0,115,116,98,114,112,95,105,110,105,116,95,116,97,114,103,101,116,0,0,0,0,0,0,0,99,109,97,112,0,0,0,0,108,111,99,97,0,0,0,0,104,101,97,100,0,0,0,0,103,108,121,102,0,0,0,0,104,104,101,97,0,0,0,0,104,109,116,120,0,0,0,0,107,101,114,110,0,0,0,0,109,97,120,112,0,0,0,0,46,47,115,116,98,95,116,114,117,101,116,121,112,101,46,104,0,0,0,0,0,0,0,0,115,116,98,116,116,95,70,105,110,100,71,108,121,112,104,73,110,100,101,120,0,0,0,0,117,110,105,99,111,100,101,95,99,111,100,101,112,111,105,110,116,32,60,61,32,116,116,85,83,72,79,82,84,40,100,97,116,97,32,43,32,101,110,100,67,111,117,110,116,32,43,32,50,42,105,116,101,109,41,0,115,116,98,116,116,95,71,101,116,71,108,121,112,104,83,104,97,112,101,0,0,0,0,0,104,95,111,118,101,114,115,97,109,112,108,101,32,60,61,32,56,0,0,0,0,0,0,0,115,116,98,116,116,95,80,97,99,107,83,101,116,79,118,101,114,115,97,109,112,108,105,110,103,0,0,0,0,0,0,0,118,95,111,118,101,114,115,97,109,112,108,101,32,60,61,32,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,32,0,0,176,1,0,0,0,0,0,0,0,0,0,32,37,249,142,0,10,2,0,0,128,190,125,95,244,125,31,160,242,43,74,30,9,82,8,0,64,34,65,80,20,4,16,32,32,41,46,18,8,34,8,0,32,34,65,80,20,4,16,32,32,249,16,76,8,250,62,60,16,34,125,222,247,125,16,32,32,161,232,50,8,34,8,0,8,34,5,16,4,69,16,0,240,163,164,50,8,82,8,0,4,34,5,16,4,69,16,32,32,249,226,94,8,2,0,129,2,62,125,31,244,125,16,0,0,32,0,0,176,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,15,0,192,15,224,247,251,125,126,191,95,232,190,80,0,162,8,8,68,232,47,20,10,133,2,129,80,72,160,80,0,162,40,228,73,40,40,20,10,132,2,129,64,72,160,72,0,190,15,2,16,175,235,247,9,132,62,159,216,79,160,71,0,34,136,228,9,161,42,20,10,132,2,129,80,72,160,72,0,34,40,8,4,160,47,20,10,133,2,129,80,72,162,80,0,190,143,0,0,33,32,244,251,125,126,129,95,232,156,208,7,0,128,0,0,224,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,12,0,130,66,191,223,239,247,251,11,5,5,133,66,191,4,72,0,198,66,161,80,40,20,64,8,5,37,133,66,160,8,168,0,170,70,161,80,40,20,64,8,5,37,133,66,144,16,8,0,146,74,161,95,232,247,67,8,5,37,121,126,136,32,8,0,130,82,161,64,40,1,66,8,137,36,133,64,132,64,8,0,130,98,161,64,42,2,66,8,81,36,133,64,130,128,8,0,130,66,191,192,47,244,67,248,33,252,133,126,191,0,9,62,0,0,0,0,4,0,0,0,0,0,0,0,128,1,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,4,0,32,72,65,0,0,0,0,0,8,0,0,4,4,0,4,60,32,0,65,0,0,0,0,0,8,0,0,240,125,223,247,133,239,75,81,190,239,251,190,239,59,81,4,0,69,65,20,133,40,74,73,170,40,138,162,32,8,81,4,240,69,65,244,157,40,74,71,170,40,138,162,224,11,81,4,16,69,65,20,132,40,74,73,170,40,138,162,0,10,145,2,240,125,223,247,133,47,74,209,170,232,251,190,224,123,31,1,0,0,0,0,4,8,64,0,0,0,8,32,0,0,0,0,0,0,0,0,132,15,96,0,0,0,8,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,36,1,9,0,0,0,0,0,0,0,0,0,6,0,0,0,36,1,9,0,0,0,0,0,0,0,128,16,9,162,40,250,36,1,9,0,0,0,0,0,0,0,0,62,1,42,37,66,34,82,9,0,0,0,0,0,0,0,128,138,3,42,34,34,36,41,9,0,0,0,0,0,0,0,128,10,1,42,37,18,36,1,9,0,0,0,0,0,0,0,128,10,1,190,232,251,36,1,9,0,0,0,0,0,0,0,128,190,14,0,0,2,172,1,15,0,0,0,0,0,0,0,128,4,0,0,224,3,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,14,184,67,132,3,58,32,0,128,160,190,2,32,0,0,240,138,32,82,196,2,43,32,4,34,145,2,248,59,0,240,7,142,56,75,228,2,58,32,2,28,138,30,8,42,233,17,4,224,11,66,244,2,130,36,1,20,4,20,232,186,4,209,5,128,184,195,231,10,58,137,0,28,14,60,40,2,9,80,4,128,0,64,196,2,128,68,0,34,132,32,232,2,0,80,4,0,0,64,128,2,0,32,5,0,142,62,8,2,0,16,4,224,3,64,128,66,0,0,7,0,132,0,248,3,0,240,7,0,0,64,128,34,0,0,4,0,0,0,0,0,0,0,0,0,0,64,128,2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,128,0,194,160,72,24,0,0,1,132,33,9,146,2,66,38,4,1,33,81,0,0,127,63,2,66,2,16,41,0,34,20,192,239,247,251,253,126,9,161,223,239,247,187,187,3,18,15,68,40,20,10,133,66,9,129,64,32,16,16,17,1,8,4,68,40,20,10,133,66,127,129,64,32,16,16,17,1,4,130,199,239,247,251,253,126,9,129,207,231,243,17,17,1,50,169,80,40,20,10,133,66,9,161,64,32,16,16,17,1,64,184,80,40,20,10,133,66,121,191,223,239,247,187,187,3,32,160,31,0,0,0,0,0,0,16,0,0,0,0,0,0,112,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,2,8,131,34,1,0,2,8,67,2,1,0,1,1,124,20,4,132,68,1,0,32,4,132,4,128,8,63,130,0,132,66,191,223,239,247,3,126,161,80,40,20,10,33,0,0,132,70,161,80,40,20,138,82,161,80,40,20,122,161,239,3,158,74,161,80,40,20,82,82,161,80,40,20,74,31,8,2,132,82,161,80,40,20,34,74,161,80,40,244,75,161,239,3,132,98,161,80,40,20,82,74,161,80,40,4,122,161,40,2,124,66,191,223,239,247,139,126,191,223,239,247,11,189,239,3,0,0,0,0,0,0,0,4,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,5,32,0,0,4,132,0,34,129,69,17,16,66,1,0,148,66,81,0,0,8,66,81,148,42,162,32,8,165,80,0,0,0,32,0,0,0,0,0,0,0,5,0,0,0,0,8,190,239,251,254,251,190,239,251,20,145,235,251,190,239,251,0,32,8,130,32,10,162,40,138,20,145,40,138,162,40,138,62,190,239,251,254,11,190,239,251,20,145,40,138,162,40,138,0,162,40,138,34,8,130,32,8,20,145,40,138,162,40,138,8,190,239,251,254,251,190,239,251,20,145,47,250,190,239,251,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,33,0,4,0,0,0,0,0,0,0,0,0,0,0,0,130,80,20,2,20,0,0,0,0,0,0,0,0,0,0,16,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,190,40,138,162,40,34,0,0,0,0,0,0,0,0,0,0,170,40,138,162,232,34,0,0,0,0,0,0,0,0,0,0,170,40,138,162,168,34,0,0,0,0,0,0,0,0,0,0,170,40,138,162,232,34,0,0,0,0,0,0,0,0,0,0,190,239,251,190,47,62,0,0,0,0,0,0,0,0,0,0,4,0,0,0,40,32,0,0,0,0,0,0,0,0,0,0,0,0,0,128,15,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,2,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,2,0,0,0,7,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,7,0,0,0,1,0,0,0,5,0,0,0,3,0,0,0,7,0,0,0,3,0,0,0,5,0,0,0,4,0,0,0,1,0,0,0,7,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,7,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,9,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,3,0,0,0,5,0,0,0,91,84,69,88,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,102,111,110,116,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,114,98,109,102,0,0,0,0,116,116,102,0,0,0,0,0,91,37,115,93,32,83,112,114,105,116,101,70,111,110,116,32,100,97,116,97,32,112,97,114,115,101,100,32,99,111,114,114,101,99,116,108,121,0,0,0,91,37,115,93,32,83,112,114,105,116,101,70,111,110,116,32,110,117,109,32,99,104,97,114,115,32,100,101,116,101,99,116,101,100,58,32,37,105,0,0,85,110,108,111,97,100,101,100,32,115,112,114,105,116,101,32,102,111,110,116,32,100,97,116,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,78,70,79,58,32,0,0,69,82,82,79,82,58,32,0,87,65,82,78,73,78,71,58,32,0,0,0,0,0,0,0,65,117,100,105,111,32,100,101,118,105,99,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,0,0,0,0,0,0,0,67,111,117,108,100,32,110,111,116,32,115,101,116,117,112,32,97,117,100,105,111,32,99,111,110,116,101,120,116,0,0,0,65,117,100,105,111,32,100,101,118,105,99,101,32,97,110,100,32,99,111,110,116,101,120,116,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,58,32,37,115,0,0,0,67,111,117,108,100,32,110,111,116,32,103,101,116,32,99,117,114,114,101,110,116,32,97,117,100,105,111,32,99,111,110,116,101,120,116,32,102,111,114,32,99,108,111,115,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,97,118,0,0,0,0,0,111,103,103,0,0,0,0,0,91,37,115,93,32,83,111,117,110,100,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,44,32,105,116,32,99,97,110,39,116,32,98,101,32,108,111,97,100,101,100,0,91,37,115,93,32,83,111,117,110,100,32,102,105,108,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,83,97,109,112,108,101,82,97,116,101,58,32,37,105,44,32,66,105,116,82,97,116,101,58,32,37,105,44,32,67,104,97,110,110,101,108,115,58,32,37,105,41,0,85,110,108,111,97,100,101,100,32,115,111,117,110,100,32,100,97,116,97,0,0,0,0,0,91,37,115,93,32,79,71,71,32,97,117,100,105,111,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,91,37,115,93,32,79,103,103,32,115,97,109,112,108,101,32,114,97,116,101,58,32,37,105,0,0,0,0,0,0,0,0,91,37,115,93,32,79,103,103,32,99,104,97,110,110,101,108,115,58,32,37,105,0,0,0,91,37,115,93,32,84,101,109,112,32,109,101,109,111,114,121,32,114,101,113,117,105,114,101,100,58,32,37,105,0,0,0,91,37,115,93,32,77,117,115,105,99,32,101,120,116,101,110,115,105,111,110,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,44,32,105,116,32,99,97,110,39,116,32,98,101,32,108,111,97,100,101,100,0,79,103,103,32,112,108,97,121,105,110,103,44,32,101,114,114,111,114,32,98,117,102,102,101,114,105,110,103,32,100,97,116,97,46,46,46,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,99,97,110,118,97,115,0,1,0,0,0,0,0,0,0,69,86,69,78,84,32,68,69,84,69,67,84,69,68,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,111,32,109,111,114,101,32,100,97,116,97,32,111,98,116,97,105,110,101,100,32,102,114,111,109,32,115,116,114,101,97,109,0,0,0,0,0,0,0,85,110,108,111,97,100,101,100,32,119,97,118,101,32,100,97,116,97,0,0,0,0,0,0,91,37,115,93,32,79,71,71,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,0,0,0,0,0,0,91,37,115,93,32,83,97,109,112,108,101,115,32,108,101,110,103,116,104,58,32,37,105,0,91,37,115,93,32,84,111,116,97,108,32,115,101,99,111,110,100,115,58,32,37,102,0,0,91,37,115,93,32,79,103,103,32,97,117,100,105,111,32,108,101,110,103,104,116,32,105,115,32,108,97,114,103,101,114,32,116,104,97,110,32,49,48,32,115,101,99,111,110,100,115,32,40,37,102,41,44,32,116,104,97,116,39,115,32,97,32,98,105,103,32,102,105,108,101,32,105,110,32,109,101,109,111,114,121,44,32,99,111,110,115,105,100,101,114,32,109,117,115,105,99,32,115,116,114,101,97,109,105,110,103,0,0,0,0,0,91,37,115,93,32,84,111,116,97,108,32,115,97,109,112,108,101,115,32,99,97,108,99,117,108,97,116,101,100,58,32,37,105,0,0,0,0,0,0,0,91,37,115,93,32,83,97,109,112,108,101,115,32,111,98,116,97,105,110,101,100,58,32,37,105,0,0,0,0,0,0,0,91,37,115,93,32,79,71,71,32,102,105,108,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,83,97,109,112,108,101,82,97,116,101,58,32,37,105,44,32,66,105,116,82,97,116,101,58,32,37,105,44,32,67,104,97,110,110,101,108,115,58,32,37,105,41,0,0,0,91,37,115,93,32,87,65,86,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,0,0,0,0,0,0,82,73,70,70,0,0,0,0,87,65,86,69,0,0,0,0,91,37,115,93,32,73,110,118,97,108,105,100,32,82,73,70,70,32,111,114,32,87,65,86,69,32,72,101,97,100,101,114,0,0,0,0,0,0,0,0,91,37,115,93,32,73,110,118,97,108,105,100,32,87,97,118,101,32,102,111,114,109,97,116,0,0,0,0,0,0,0,0,91,37,115,93,32,73,110,118,97,108,105,100,32,100,97,116,97,32,104,101,97,100,101,114,0,0,0,0,0,0,0,0,91,37,115,93,32,87,65,86,32,102,105,108,101,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,32,40,83,97,109,112,108,101,82,97,116,101,58,32,37,105,44,32,66,105,116,82,97,116,101,58,32,37,105,44,32,67,104,97,110,110,101,108,115,58,32,37,105,41,0,0,0,114,98,0,0,0,0,0,0,91,37,115,93,32,114,66,77,70,32,102,111,110,116,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,91,37,115,93,32,76,111,97,100,105,110,103,32,114,66,77,70,32,102,105,108,101,44,32,115,105,122,101,58,32,37,105,120,37,105,44,32,110,117,109,67,104,97,114,115,58,32,37,105,44,32,99,104,97,114,72,101,105,103,104,116,58,32,37,105,0,0,0,0,0,0,0,91,37,115,93,32,73,109,97,103,101,32,114,101,99,111,110,115,116,114,117,99,116,101,100,32,99,111,114,114,101,99,116,108,121,44,32,110,111,119,32,99,111,110,118,101,114,116,105,110,103,32,105,116,32,116,111,32,116,101,120,116,117,114,101,0,0,0,0,0,0,0,0,91,37,115,93,32,114,66,77,70,32,102,105,108,101,32,108,111,97,100,101,100,32,99,111,114,114,101,99,116,108,121,32,97,115,32,83,112,114,105,116,101,70,111,110,116,0,0,0,112,105,120,101,108,115,91,105,42,115,116,114,105,100,101,95,105,110,95,98,121,116,101,115,93,32,61,61,32,48,0,0,115,116,98,116,116,95,95,118,95,112,114,101,102,105,108,116,101,114,0,0,0,0,0,0,112,105,120,101,108,115,91,105,93,32,61,61,32,48,0,0,115,116,98,116,116,95,95,104,95,112,114,101,102,105,108,116,101,114,0,0,0,0,0,0,122,45,62,118,97,108,105,100,0,0,0,0,0,0,0,0,115,116,98,116,116,95,95,114,97,115,116,101,114,105,122,101,95,115,111,114,116,101,100,95,101,100,103,101,115,0,0,0,101,45,62,121,48,32,60,61,32,115,116,97,114,116,95,112,111,105,110,116,0,0,0,0,110,101,119,95,97,99,116,105,118,101,0,0,0,0,0,0,119,105,100,116,104,32,37,32,99,45,62,97,108,105,103,110,32,61,61,32,48,0,0,0,115,116,98,114,112,95,95,115,107,121,108,105,110,101,95,102,105,110,100,95,98,101,115,116,95,112,111,115,0,0,0,0,120,112,111,115,32,62,61,32,48,0,0,0,0,0,0,0,110,111,100,101,45,62,110,101,120,116,45,62,120,32,62,32,120,112,111,115,32,38,38,32,110,111,100,101,45,62,120,32,60,61,32,120,112,111,115,0,102,105,114,115,116,45,62,120,32,60,61,32,120,48,0,0,115,116,98,114,112,95,95,115,107,121,108,105,110,101,95,102,105,110,100,95,109,105,110,95,121,0,0,0,0,0,0,0,110,111,100,101,45,62,110,101,120,116,45,62,120,32,62,32,120,48,0,0,0,0,0,0,98,117,102,95,99,32,61,61,32,50,0,0,0,0,0,0,115,116,98,95,118,111,114,98,105,115,46,99,0,0,0,0,99,111,110,118,101,114,116,95,99,104,97,110,110,101,108,115,95,115,104,111,114,116,95,105,110,116,101,114,108,101,97,118,101,100,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,3,5,0,0,0,0,3,7,5,0,0,0,3,5,3,5,0,0,3,7,5,3,5,0,3,7,5,3,5,7,0,0,0,0,0,0,79,103,103,83], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+11562);
/* memory initializer */ allocate([1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,102,45,62,98,121,116,101,115,95,105,110,95,115,101,103,32,62,32,48,0,0,0,0,0,103,101,116,56,95,112,97,99,107,101,116,95,114,97,119,0,102,45,62,98,121,116,101,115,95,105,110,95,115,101,103,32,61,61,32,48,0,0,0,0,110,101,120,116,95,115,101,103,109,101,110,116,0,0,0,0,102,45,62,97,108,108,111,99,46,97,108,108,111,99,95,98,117,102,102,101,114,95,108,101,110,103,116,104,95,105,110,95,98,121,116,101,115,32,61,61,32,102,45,62,116,101,109,112,95,111,102,102,115,101,116,0,118,111,114,98,105,115,95,100,101,99,111,100,101,95,105,110,105,116,105,97,108,0,0,0,102,45,62,116,101,109,112,95,111,102,102,115,101,116,32,61,61,32,102,45,62,97,108,108,111,99,46,97,108,108,111,99,95,98,117,102,102,101,114,95,108,101,110,103,116,104,95,105,110,95,98,121,116,101,115,0,115,116,97,114,116,95,100,101,99,111,100,101,114,0,0,0,112,111,119,40,40,102,108,111,97,116,41,32,114,43,49,44,32,100,105,109,41,32,62,32,101,110,116,114,105,101,115,0,108,111,111,107,117,112,49,95,118,97,108,117,101,115,0,0,40,105,110,116,41,32,102,108,111,111,114,40,112,111,119,40,40,102,108,111,97,116,41,32,114,44,32,100,105,109,41,41,32,60,61,32,101,110,116,114,105,101,115,0,0,0,0,0,107,32,61,61,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,0,99,111,109,112,117,116,101,95,115,111,114,116,101,100,95,104,117,102,102,109,97,110,0,0,99,45,62,115,111,114,116,101,100,95,99,111,100,101,119,111,114,100,115,91,120,93,32,61,61,32,99,111,100,101,0,0,108,101,110,32,33,61,32,78,79,95,67,79,68,69,0,0,105,110,99,108,117,100,101,95,105,110,95,115,111,114,116,0,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,32,61,61,32,48,0,0,99,111,109,112,117,116,101,95,99,111,100,101,119,111,114,100,115,0,0,0,0,0,0,0,97,118,97,105,108,97,98,108,101,91,121,93,32,61,61,32,48,0,0,0,0,0,0,0,118,111,114,98,105,115,0,0,103,101,116,95,119,105,110,100,111,119,0,0,0,0,0,0,0,1,0,0,128,0,0,0,86,0,0,0,64,0,0,0,118,111,114,98,105,115,95,100,101,99,111,100,101,95,112,97,99,107,101,116,95,114,101,115,116,0,0,0,0,0,0,0,40,110,32,38,32,51,41,32,61,61,32,48,0,0,0,0,105,109,100,99,116,95,115,116,101,112,51,95,105,116,101,114,48,95,108,111,111,112,0,0,62,180,228,51,9,145,243,51,139,178,1,52,60,32,10,52,35,26,19,52,96,169,28,52,167,215,38,52,75,175,49,52,80,59,61,52,112,135,73,52,35,160,86,52,184,146,100,52,85,109,115,52,136,159,129,52,252,11,138,52,147,4,147,52,105,146,156,52,50,191,166,52,63,149,177,52,147,31,189,52,228,105,201,52,173,128,214,52,54,113,228,52,166,73,243,52,136,140,1,53,192,247,9,53,6,239,18,53,118,123,28,53,192,166,38,53,55,123,49,53,218,3,61,53,94,76,73,53,59,97,86,53,185,79,100,53,252,37,115,53,138,121,129,53,134,227,137,53,124,217,146,53,133,100,156,53,82,142,166,53,51,97,177,53,37,232,188,53,220,46,201,53,206,65,214,53,65,46,228,53,87,2,243,53,143,102,1,54,79,207,9,54,245,195,18,54,152,77,28,54,232,117,38,54,50,71,49,54,116,204,60,54,94,17,73,54,101,34,86,54,206,12,100,54,184,222,114,54,151,83,129,54,28,187,137,54,114,174,146,54,175,54,156,54,129,93,166,54,53,45,177,54,199,176,188,54,228,243,200,54,1,3,214,54,96,235,227,54,30,187,242,54,162,64,1,55,235,166,9,55,241,152,18,55,201,31,28,55,30,69,38,55,61,19,49,55,30,149,60,55,111,214,72,55,162,227,85,55,247,201,99,55,137,151,114,55,175,45,129,55,190,146,137,55,116,131,146,55,230,8,156,55,190,44,166,55,71,249,176,55,121,121,188,55,254,184,200,55,71,196,213,55,146,168,227,55,248,115,242,55,192,26,1,56,147,126,9,56,249,109,18,56,6,242,27,56,98,20,38,56,86,223,48,56,216,93,60,56,146,155,72,56,242,164,85,56,51,135,99,56,110,80,114,56,211,7,129,56,107,106,137,56,130,88,146,56,42,219,155,56,9,252,165,56,104,197,176,56,59,66,188,56,41,126,200,56,160,133,213,56,217,101,227,56,232,44,242,56,233,244,0,57,70,86,9,57,14,67,18,57,81,196,27,57,181,227,37,57,127,171,48,57,162,38,60,57,197,96,72,57,83,102,85,57,131,68,99,57,104,9,114,57,1,226,128,57,36,66,137,57,157,45,146,57,123,173,155,57,99,203,165,57,153,145,176,57,13,11,188,57,102,67,200,57,11,71,213,57,50,35,227,57,237,229,241,57,29,207,0,58,5,46,9,58,48,24,18,58,169,150,27,58,21,179,37,58,183,119,48,58,124,239,59,58,10,38,72,58,199,39,85,58,230,1,99,58,120,194,113,58,59,188,128,58,233,25,137,58,198,2,146,58,219,127,155,58,203,154,165,58,216,93,176,58,239,211,187,58,179,8,200,58,136,8,213,58,159,224,226,58,7,159,241,58,92,169,0,59,208,5,9,59,94,237,17,59,15,105,27,59,132,130,37,59,253,67,48,59,103,184,59,59,97,235,71,59,77,233,84,59,93,191,98,59,156,123,113,59,127,150,128,59,186,241,136,59,249,215,145,59,71,82,155,59,65,106,165,59,39,42,176,59,226,156,187,59,18,206,199,59,23,202,212,59,32,158,226,59,53,88,241,59,166,131,0,60,167,221,8,60,152,194,17,60,130,59,27,60,1,82,37,60,84,16,48,60,97,129,59,60,200,176,71,60,229,170,84,60,232,124,98,60,212,52,113,60,207,112,128,60,150,201,136,60,58,173,145,60,192,36,155,60,197,57,165,60,133,246,175,60,229,101,187,60,130,147,199,60,185,139,212,60,180,91,226,60,121,17,241,60,251,93,0,61,137,181,8,61,223,151,17,61,2,14,27,61,141,33,37,61,185,220,47,61,109,74,59,61,64,118,71,61,145,108,84,61,133,58,98,61,34,238,112,61,42,75,128,61,127,161,136,61,136,130,145,61,72,247,154,61,88,9,165,61,242,194,175,61,248,46,187,61,3,89,199,61,109,77,212,61,92,25,226,61,209,202,240,61,91,56,0,62,119,141,8,62,51,109,17,62,144,224,26,62,39,241,36,62,46,169,47,62,135,19,59,62,202,59,71,62,77,46,84,62,55,248,97,62,132,167,112,62,143,37,128,62,115,121,136,62,226,87,145,62,220,201,154,62,249,216,164,62,109,143,175,62,27,248,186,62,149,30,199,62,51,15,212,62,23,215,225,62,61,132,240,62,198,18,0,63,114,101,8,63,147,66,17,63,43,179,26,63,206,192,36,63,177,117,47,63,178,220,58,63,101,1,71,63,29,240,83,63,251,181,97,63,251,96,112,63,0,0,128,63,122,32,60,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,0,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,115,116,97,114,116,0,0,0,33,99,45,62,115,112,97,114,115,101,32,124,124,32,122,32,60,32,99,45,62,115,111,114,116,101,100,95,101,110,116,114,105,101,115,0,0,0,0,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,100,101,105,110,116,101,114,108,101,97,118,101,95,114,101,112,101,97,116,0,0,0,0,0,99,45,62,115,111,114,116,101,100,95,99,111,100,101,119,111,114,100,115,32,124,124,32,99,45,62,99,111,100,101,119,111,114,100,115,0,0,0,0,0,99,111,100,101,98,111,111,107,95,100,101,99,111,100,101,95,115,99,97,108,97,114,95,114,97,119,0,0,0,0,0,0,33,99,45,62,115,112,97,114,115,101,0,0,0,0,0,0,91,37,115,93,32,65,83,84,67,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,0,0,0,0,0,91,37,115,93,32,65,83,84,67,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,115,101,101,109,32,116,111,32,98,101,32,97,32,118,97,108,105,100,32,105,109,97,103,101,0,0,0,0,0,0,0,0,65,83,84,67,32,105,109,97,103,101,32,119,105,100,116,104,58,32,37,105,0,0,0,0,65,83,84,67,32,105,109,97,103,101,32,104,101,105,103,104,116,58,32,37,105,0,0,0,65,83,84,67,32,105,109,97,103,101,32,98,108,111,99,107,115,58,32,37,105,120,37,105,0,0,0,0,0,0,0,0,91,37,115,93,32,65,83,84,67,32,98,108,111,99,107,32,115,105,122,101,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,91,37,115,93,32,80,86,82,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,0,0,0,0,0,0,91,37,115,93,32,80,86,82,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,115,101,101,109,32,116,111,32,98,101,32,97,32,118,97,108,105,100,32,105,109,97,103,101,0,80,86,82,32,118,50,32,110,111,116,32,115,117,112,112,111,114,116,101,100,44,32,117,112,100,97,116,101,32,121,111,117,114,32,102,105,108,101,115,32,116,111,32,80,86,82,32,118,51,0,0,0,0,0,0,0,91,37,115,93,32,75,84,88,32,105,109,97,103,101,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,91,37,115,93,32,75,84,88,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,115,101,101,109,32,116,111,32,98,101,32,97,32,118,97,108,105,100,32,102,105,108,101,0,0,75,84,88,32,40,69,84,67,41,32,105,109,97,103,101,32,119,105,100,116,104,58,32,37,105,0,0,0,0,0,0,0,75,84,88,32,40,69,84,67,41,32,105,109,97,103,101,32,104,101,105,103,104,116,58,32,37,105,0,0,0,0,0,0,75,84,88,32,40,69,84,67,41,32,105,109,97,103,101,32,102,111,114,109,97,116,58,32,48,120,37,120,0,0,0,0,91,37,115,93,32,80,75,77,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,0,0,0,0,0,0,80,75,77,32,0,0,0,0,91,37,115,93,32,80,75,77,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,115,101,101,109,32,116,111,32,98,101,32,97,32,118,97,108,105,100,32,105,109,97,103,101,0,80,75,77,32,40,69,84,67,41,32,105,109,97,103,101,32,119,105,100,116,104,58,32,37,105,0,0,0,0,0,0,0,80,75,77,32,40,69,84,67,41,32,105,109,97,103,101,32,104,101,105,103,104,116,58,32,37,105,0,0,0,0,0,0,80,75,77,32,40,69,84,67,41,32,105,109,97,103,101,32,102,111,114,109,97,116,58,32,37,105,0,0,0,0,0,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,0,0,0,0,0,0,68,68,83,32,0,0,0,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,100,111,101,115,32,110,111,116,32,115,101,101,109,32,116,111,32,98,101,32,97,32,118,97,108,105,100,32,105,109,97,103,101,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,104,101,97,100,101,114,32,115,105,122,101,58,32,37,105,0,0,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,112,105,120,101,108,32,102,111,114,109,97,116,32,115,105,122,101,58,32,37,105,0,0,0,0,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,112,105,120,101,108,32,102,111,114,109,97,116,32,102,108,97,103,115,58,32,48,120,37,120,0,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,102,111,114,109,97,116,58,32,48,120,37,120,0,0,0,0,0,0,91,37,115,93,32,68,68,83,32,102,105,108,101,32,98,105,116,32,99,111,117,110,116,58,32,48,120,37,120,0,0,0,80,105,116,99,104,32,111,114,32,108,105,110,101,97,114,32,115,105,122,101,58,32,37,105,0,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,105,109,97,103,101,32,116,121,112,101,0,0,0,0,0,0,109,97,120,32,118,97,108,117,101,32,62,32,50,53,53,0,110,111,116,32,71,73,70,0,0,0,0,0,0,0,0,0,109,117,108,116,105,112,108,101,32,73,72,68,82,0,0,0,98,97,100,32,73,72,68,82,32,108,101,110,0,0,0,0,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,49,47,50,47,52,47,56,45,98,105,116,32,111,110,108,121,0,0,0,0,0,0,0,0,98,97,100,32,99,116,121,112,101,0,0,0,0,0,0,0,98,97,100,32,99,111,109,112,32,109,101,116,104,111,100,0,98,97,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,0,0,0,0,0,0,0,98,97,100,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,0,0,0,0,48,45,112,105,120,101,108,32,105,109,97,103,101,0,0,0,102,105,114,115,116,32,110,111,116,32,73,72,68,82,0,0,105,110,118,97,108,105,100,32,80,76,84,69,0,0,0,0,116,82,78,83,32,97,102,116,101,114,32,73,68,65,84,0,116,82,78,83,32,98,101,102,111,114,101,32,80,76,84,69,0,0,0,0,0,0,0,0,98,97,100,32,116,82,78,83,32,108,101,110,0,0,0,0,116,82,78,83,32,119,105,116,104,32,97,108,112,104,97,0,0,255,85,0,17,0,0,0,1,0,0,0,0,0,0,0,110,111,32,80,76,84,69,0,111,117,116,111,102,109,101,109,0,0,0,0,0,0,0,0,111,117,116,111,102,100,97,116,97,0,0,0,0,0,0,0,110,111,32,73,68,65,84,0,88,88,88,88,32,80,78,71,32,99,104,117,110,107,32,110,111,116,32,107,110,111,119,110,0,0,0,0,0,0,0,0,115,45,62,105,109,103,95,111,117,116,95,110,32,61,61,32,52,0,0,0,0,0,0,0,46,47,115,116,98,95,105,109,97,103,101,46,104,0,0,0,115,116,98,105,95,95,100,101,95,105,112,104,111,110,101,0,111,117,116,95,110,32,61,61,32,50,32,124,124,32,111,117,116,95,110,32,61,61,32,52,0,0,0,0,0,0,0,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,116,114,97,110,115,112,97,114,101,110,99,121,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,32,124,124,32,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,43,49,0,0,0,0,0,0,0,0,115,116,98,105,95,95,99,114,101,97,116,101,95,112,110,103,95,105,109,97,103,101,95,114,97,119,0,0,0,0,0,0,110,111,116,32,101,110,111,117,103,104,32,112,105,120,101,108,115,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,102,105,108,116,101,114,0,0,105,109,103,95,119,105,100,116,104,95,98,121,116,101,115,32,60,61,32,120,0,0,0,0,0,1,0,5,6,0,0,0,105,109,103,95,110,43,49,32,61,61,32,111,117,116,95,110,0,0,0,0,0,0,0,0,105,109,103,95,110,32,61,61,32,51,0,0,0,0,0,0,98,97,100,32,112,110,103,32,115,105,103,0,0,0,0,0,110,111,32,83,79,73,0,0,110,111,32,83,79,70,0,0,98,97,100,32,83,79,70,32,108,101,110,0,0,0,0,0,111,110,108,121,32,56,45,98,105,116,0,0,0,0,0,0,110,111,32,104,101,97,100,101,114,32,104,101,105,103,104,116,0,0,0,0,0,0,0,0,48,32,119,105,100,116,104,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,0,0,0,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,73,68,0,0,0,0,0,0,0,0,98,97,100,32,72,0,0,0,98,97,100,32,86,0,0,0,98,97,100,32,84,81,0,0,101,120,112,101,99,116,101,100,32,109,97,114,107,101,114,0,98,97,100,32,68,82,73,32,108,101,110,0,0,0,0,0,98,97,100,32,68,81,84,32,116,121,112,101,0,0,0,0,98,97,100,32,68,81,84,32,116,97,98,108,101,0,0,0,0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,98,97,100,32,68,72,84,32,104,101,97,100,101,114,0,0,98,97,100,32,99,111,100,101,32,108,101,110,103,116,104,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,100,32,104,117,102,102,109,97,110,32,99,111,100,101,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,27,0,0,0,31,0,0,0,35,0,0,0,43,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,115,0,0,0,131,0,0,0,163,0,0,0,195,0,0,0,227,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,17,0,0,0,25,0,0,0,33,0,0,0,49,0,0,0,65,0,0,0,97,0,0,0,129,0,0,0,193,0,0,0,1,1,0,0,129,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,8,0,0,1,12,0,0,1,16,0,0,1,24,0,0,1,32,0,0,1,48,0,0,1,64,0,0,1,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,98,97,100,32,100,105,115,116,0,0,0,0,0,0,0,0,111,117,116,112,117,116,32,98,117,102,102,101,114,32,108,105,109,105,116,0,0,0,0,0,122,45,62,115,105,122,101,91,98,93,32,61,61,32,115,0,115,116,98,105,95,95,122,104,117,102,102,109,97,110,95,100,101,99,111,100,101,95,115,108,111,119,112,97,116,104,0,0,98,105,116,115,32,60,61,32,49,54,0,0,0,0,0,0,115,116,98,105,95,95,98,105,116,95,114,101,118,101,114,115,101,0,0,0,0,0,0,0,122,45,62,99,111,100,101,95,98,117,102,102,101,114,32,60,32,40,49,85,32,60,60,32,122,45,62,110,117,109,95,98,105,116,115,41,0,0,0,0,115,116,98,105,95,95,102,105,108,108,95,98,105,116,115,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,0,0,0,0,0,98,97,100,32,99,111,100,101,108,101,110,103,116,104,115,0,99,32,61,61,32,49,56,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,104,117,102,102,109,97,110,95,99,111,100,101,115,0,0,0,0,0,98,97,100,32,115,105,122,101,115,0,0,0,0,0,0,0,97,45,62,110,117,109,95,98,105,116,115,32,61,61,32,48,0,0,0,0,0,0,0,0,115,116,98,105,95,95,112,97,114,115,101,95,117,110,99,111,109,112,101,114,115,115,101,100,95,98,108,111,99,107,0,0,122,108,105,98,32,99,111,114,114,117,112,116,0,0,0,0,114,101,97,100,32,112,97,115,116,32,98,117,102,102,101,114,0,0,0,0,0,0,0,0,98,97,100,32,122,108,105,98,32,104,101,97,100,101,114,0,110,111,32,112,114,101,115,101,116,32,100,105,99,116,0,0,98,97,100,32,99,111,109,112,114,101,115,115,105,111,110,0,98,97,100,32,112,97,108,101,116,116,101,0,0,0,0,0,114,101,113,95,99,111,109,112,32,62,61,32,49,32,38,38,32,114,101,113,95,99,111,109,112,32,60,61,32,52,0,0,115,116,98,105,95,95,99,111,110,118,101,114,116,95,102,111,114,109,97,116,0,0,0,0,48,0,0,0,0,0,0,0,98,97,100,32,102,105,108,101,0,0,0,0,0,0,0,0,98,97,100,32,102,111,114,109,97,116,0,0,0,0,0,0,83,128,246,52,0,0,0,0,80,73,67,84,0,0,0,0,110,111,116,32,80,83,68,0,119,114,111,110,103,32,118,101,114,115,105,111,110,0,0,0,119,114,111,110,103,32,99,104,97,110,110,101,108,32,99,111,117,110,116,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,98,105,116,32,100,101,112,116,104,0,0,0,119,114,111,110,103,32,99,111,108,111,114,32,102,111,114,109,97,116,0,0,0,0,0,0,98,97,100,32,73,109,97,103,101,32,68,101,115,99,114,105,112,116,111,114,0,0,0,0,109,105,115,115,105,110,103,32,99,111,108,111,114,32,116,97,98,108,101,0,0,0,0,0,117,110,107,110,111,119,110,32,99,111,100,101,0,0,0,0,110,111,32,99,108,101,97,114,32,99,111,100,101,0,0,0,116,111,111,32,109,97,110,121,32,99,111,100,101,115,0,0,105,108,108,101,103,97,108,32,99,111,100,101,32,105,110,32,114,97,115,116,101,114,0,0,110,111,116,32,66,77,80,0,117,110,107,110,111,119,110,32,66,77,80,0,0,0,0,0,98,97,100,32,66,77,80,0,109,111,110,111,99,104,114,111,109,101,0,0,0,0,0,0,66,77,80,32,82,76,69,0,104,115,122,32,61,61,32,49,48,56,32,124,124,32,104,115,122,32,61,61,32,49,50,52,0,0,0,0,0,0,0,0,115,116,98,105,95,95,98,109,112,95,108,111,97,100,0,0,105,110,118,97,108,105,100,0,98,97,100,32,98,112,112,0,98,97,100,32,109,97,115,107,115,0,0,0,0,0,0,0,98,97,100,32,114,101,113,95,99,111,109,112,0,0,0,0,106,117,110,107,32,98,101,102,111,114,101,32,109,97,114,107,101,114,0,0,0,0,0,0,99,97,110,39,116,32,109,101,114,103,101,32,100,99,32,97,110,100,32,97,99,0,0,0,110,32,62,61,32,48,32,38,38,32,110,32,60,32,40,105,110,116,41,32,40,115,105,122,101,111,102,40,115,116,98,105,95,95,98,109,97,115,107,41,47,115,105,122,101,111,102,40,42,115,116,98,105,95,95,98,109,97,115,107,41,41,0,0,115,116,98,105,95,95,101,120,116,101,110,100,95,114,101,99,101,105,118,101,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,0,0,0,0,0,0,0,0,255,255,255,255,253,255,255,255,249,255,255,255,241,255,255,255,225,255,255,255,193,255,255,255,129,255,255,255,1,255,255,255,1,254,255,255,1,252,255,255,1,248,255,255,1,240,255,255,1,224,255,255,1,192,255,255,1,128,255,255,40,40,40,106,45,62,99,111,100,101,95,98,117,102,102,101,114,41,32,62,62,32,40,51,50,32,45,32,104,45,62,115,105,122,101,91,99,93,41,41,32,38,32,115,116,98,105,95,95,98,109,97,115,107,91,104,45,62,115,105,122,101,91,99,93,93,41,32,61,61,32,104,45,62,99,111,100,101,91,99,93,0,0,0,0,0,0,0,115,116,98,105,95,95,106,112,101,103,95,104,117,102,102,95,100,101,99,111,100,101,0,0,98,97,100,32,83,79,83,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,98,97,100,32,83,79,83,32,108,101,110,0,0,0,0,0,98,97,100,32,68,67,32,104,117,102,102,0,0,0,0,0,98,97,100,32,65,67,32,104,117,102,102,0,0,0,0,0,98,97,100,32,83,79,83,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,91,86,65,79,32,73,68,32,37,105,93,32,76,105,110,101,115,32,86,65,79,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,76,105,110,101,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,91,86,65,79,32,73,68,32,37,105,93,32,84,114,105,97,110,103,108,101,115,32,86,65,79,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,84,114,105,97,110,103,108,101,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,91,86,65,79,32,73,68,32,37,105,93,32,81,117,97,100,115,32,86,65,79,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,91,86,66,79,32,73,68,32,37,105,93,32,81,117,97,100,115,32,86,66,79,115,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,0,0,0,0,0,0,67,80,85,32,98,117,102,102,101,114,115,32,40,108,105,110,101,115,44,32,116,114,105,97,110,103,108,101,115,44,32,113,117,97,100,115,41,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,35,118,101,114,115,105,111,110,32,49,48,48,32,32,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,118,101,114,116,101,120,80,111,115,105,116,105,111,110,59,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,118,101,114,116,101,120,84,101,120,67,111,111,114,100,59,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,118,101,114,116,101,120,78,111,114,109,97,108,59,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,50,32,102,114,97,103,84,101,120,67,111,111,114,100,59,32,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,109,97,116,52,32,112,114,111,106,101,99,116,105,111,110,77,97,116,114,105,120,59,32,32,32,32,32,10,117,110,105,102,111,114,109,32,109,97,116,52,32,109,111,100,101,108,118,105,101,119,77,97,116,114,105,120,59,32,32,32,32,32,32,10,118,111,105,100,32,109,97,105,110,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,123,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,32,32,32,32,102,114,97,103,84,101,120,67,111,111,114,100,32,61,32,118,101,114,116,101,120,84,101,120,67,111,111,114,100,59,32,10,32,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,112,114,111,106,101,99,116,105,111,110,77,97,116,114,105,120,42,109,111,100,101,108,118,105,101,119,77,97,116,114,105,120,42,118,101,99,52,40,118,101,114,116,101,120,80,111,115,105,116,105,111,110,44,32,49,46,48,41,59,32,10,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,0,0,0,0,0,35,118,101,114,115,105,111,110,32,49,48,48,32,32,32,32,32,32,32,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,32,32,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,50,32,102,114,97,103,84,101,120,67,111,111,114,100,59,32,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,48,59,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,118,101,99,52,32,116,105,110,116,67,111,108,111,114,59,32,32,32,32,32,32,32,32,32,32,32,32,10,118,111,105,100,32,109,97,105,110,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,123,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,32,32,32,32,118,101,99,52,32,116,101,120,101,108,67,111,108,111,114,32,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,48,44,32,102,114,97,103,84,101,120,67,111,111,114,100,41,59,32,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,116,101,120,101,108,67,111,108,111,114,42,116,105,110,116,67,111,108,111,114,59,32,10,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,0,0,0,0,91,83,72,68,82,32,73,68,32,37,105,93,32,83,105,109,112,108,101,32,115,104,97,100,101,114,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,0,91,83,72,68,82,32,73,68,32,37,105,93,32,83,105,109,112,108,101,32,115,104,97,100,101,114,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,0,35,118,101,114,115,105,111,110,32,49,48,48,32,32,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,51,32,118,101,114,116,101,120,80,111,115,105,116,105,111,110,59,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,50,32,118,101,114,116,101,120,84,101,120,67,111,111,114,100,59,32,32,32,32,32,10,97,116,116,114,105,98,117,116,101,32,118,101,99,52,32,118,101,114,116,101,120,67,111,108,111,114,59,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,50,32,102,114,97,103,84,101,120,67,111,111,114,100,59,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,52,32,116,105,110,116,67,111,108,111,114,59,32,32,32,32,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,109,97,116,52,32,112,114,111,106,101,99,116,105,111,110,77,97,116,114,105,120,59,32,32,32,32,32,10,117,110,105,102,111,114,109,32,109,97,116,52,32,109,111,100,101,108,118,105,101,119,77,97,116,114,105,120,59,32,32,32,32,32,32,10,118,111,105,100,32,109,97,105,110,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,123,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,32,32,32,32,102,114,97,103,84,101,120,67,111,111,114,100,32,61,32,118,101,114,116,101,120,84,101,120,67,111,111,114,100,59,32,10,32,32,32,32,116,105,110,116,67,111,108,111,114,32,61,32,118,101,114,116,101,120,67,111,108,111,114,59,32,32,32,32,32,32,32,10,32,32,32,32,103,108,95,80,111,115,105,116,105,111,110,32,61,32,112,114,111,106,101,99,116,105,111,110,77,97,116,114,105,120,42,109,111,100,101,108,118,105,101,119,77,97,116,114,105,120,42,118,101,99,52,40,118,101,114,116,101,120,80,111,115,105,116,105,111,110,44,32,49,46,48,41,59,32,10,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,0,0,0,0,0,35,118,101,114,115,105,111,110,32,49,48,48,32,32,32,32,32,32,32,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,32,32,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,50,32,102,114,97,103,84,101,120,67,111,111,114,100,59,32,32,32,32,32,32,32,32,32,10,118,97,114,121,105,110,103,32,118,101,99,52,32,116,105,110,116,67,111,108,111,114,59,32,32,32,32,32,32,32,32,32,32,32,32,10,117,110,105,102,111,114,109,32,115,97,109,112,108,101,114,50,68,32,116,101,120,116,117,114,101,48,59,32,32,32,32,32,32,32,32,10,118,111,105,100,32,109,97,105,110,40,41,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,123,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,32,32,32,32,118,101,99,52,32,116,101,120,101,108,67,111,108,111,114,32,61,32,116,101,120,116,117,114,101,50,68,40,116,101,120,116,117,114,101,48,44,32,102,114,97,103,84,101,120,67,111,111,114,100,41,59,32,10,32,32,32,32,103,108,95,70,114,97,103,67,111,108,111,114,32,61,32,116,101,120,101,108,67,111,108,111,114,42,116,105,110,116,67,111,108,111,114,59,32,10,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,10,0,0,0,0,91,83,72,68,82,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,115,104,97,100,101,114,32,108,111,97,100,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,91,83,72,68,82,32,73,68,32,37,105,93,32,68,101,102,97,117,108,116,32,115,104,97,100,101,114,32,99,111,117,108,100,32,110,111,116,32,98,101,32,108,111,97,100,101,100,0,118,101,114,116,101,120,67,111,108,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,67,97,110,118,97,115,32,115,99,97,108,101,100,32,116,111,32,102,117,108,108,115,99,114,101,101,110,46,32,69,108,101,109,101,110,116,83,105,122,101,58,32,40,37,105,120,37,105,41,44,32,83,99,114,101,101,110,83,105,122,101,40,37,105,120,37,105,41,0,0,0,0,67,97,110,118,97,115,32,115,99,97,108,101,100,32,116,111,32,119,105,110,100,111,119,101,100,46,32,69,108,101,109,101,110,116,83,105,122,101,58,32,40,37,105,120,37,105,41,44,32,83,99,114,101,101,110,83,105,122,101,40,37,105,120,37,105,41,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,71,76,70,87,0,0,0,0,0,0,0,84,114,121,105,110,103,32,116,111,32,101,110,97,98,108,101,32,77,83,65,65,32,120,52,0,0,0,0,0,0,0,0,71,76,70,87,32,70,97,105,108,101,100,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,87,105,110,100,111,119,0,0,0,0,0,0,0,0,68,105,115,112,108,97,121,32,100,101,118,105,99,101,32,105,110,105,116,105,97,108,105,122,101,100,32,115,117,99,99,101,115,115,102,117,108,108,121,0,82,101,110,100,101,114,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,0,0,0,83,99,114,101,101,110,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,0,0,0,86,105,101,119,112,111,114,116,32,111,102,102,115,101,116,115,58,32,37,105,44,32,37,105,0,0,0,0,0,0,0,0,84,114,121,105,110,103,32,116,111,32,101,110,97,98,108,101,32,86,83,89,78,67,0,0,68,79,87,78,83,67,65,76,73,78,71,58,32,82,101,113,117,105,114,101,100,32,115,99,114,101,101,110,32,115,105,122,101,32,40,37,105,120,37,105,41,32,105,115,32,98,105,103,103,101,114,32,116,104,97,110,32,100,105,115,112,108,97,121,32,115,105,122,101,32,40,37,105,120,37,105,41,0,0,0,68,111,119,110,115,99,97,108,101,32,109,97,116,114,105,120,32,103,101,110,101,114,97,116,101,100,44,32,99,111,110,116,101,110,116,32,119,105,108,108,32,98,101,32,114,101,110,100,101,114,101,100,32,97,116,58,32,37,105,32,120,32,37,105,0,0,0,0,0,0,0,0,85,80,83,67,65,76,73,78,71,58,32,82,101,113,117,105,114,101,100,32,115,99,114,101,101,110,32,115,105,122,101,58,32,37,105,32,120,32,37,105,32,45,62,32,68,105,115,112,108,97,121,32,115,105,122,101,58,32,37,105,32,120,32,37,105,0,0,0,0,0,0,0,91,71,76,70,87,51,32,69,114,114,111,114,93,32,67,111,100,101,58,32,37,105,32,68,101,99,114,105,112,116,105,111,110,58,32,37,115,0,0,0,0,0,0,0,0,0,0,0,69,88,84,0,0,0,0,0,65,82,66,0,0,0,0,0,79,69,83,0,0,0,0,0,65,78,71,76,69,0,0,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,0,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,0,103,108,85,115,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,0,0,0,0,0,103,108,85,115,101,80,114,111,103,114,97,109,0,0,0,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,79,98,106,101,99,116,0,0,0,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,0,0,103,108,65,116,116,97,99,104,79,98,106,101,99,116,0,0,103,108,65,116,116,97,99,104,83,104,97,100,101,114,0,0,103,108,68,101,116,97,99,104,79,98,106,101,99,116,0,0,103,108,68,101,116,97,99,104,83,104,97,100,101,114,0,0,103,108,80,105,120,101,108,83,116,111,114,101,105,0,0,0,103,108,71,101,116,83,116,114,105,110,103,0,0,0,0,0,103,108,71,101,116,73,110,116,101,103,101,114,118,0,0,0,103,108,71,101,116,70,108,111,97,116,118,0,0,0,0,0,103,108,71,101,116,66,111,111,108,101,97,110,118,0,0,0,103,108,71,101,110,84,101,120,116,117,114,101,115,0,0,0,103,108,68,101,108,101,116,101,84,101,120,116,117,114,101,115,0,0,0,0,0,0,0,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,73,109,97,103,101,50,68,0,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,83,117,98,73,109,97,103,101,50,68,0,0,0,0,0,0,0,103,108,84,101,120,73,109,97,103,101,50,68,0,0,0,0,103,108,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,82,101,97,100,80,105,120,101,108,115,0,0,0,0,103,108,66,105,110,100,84,101,120,116,117,114,101,0,0,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,0,0,0,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,0,0,0,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,0,0,0,0,0,0,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,0,0,0,0,0,0,0,103,108,73,115,84,101,120,116,117,114,101,0,0,0,0,0,103,108,71,101,110,66,117,102,102,101,114,115,0,0,0,0,103,108,68,101,108,101,116,101,66,117,102,102,101,114,115,0,103,108,71,101,116,66,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,0,103,108,66,117,102,102,101,114,68,97,116,97,0,0,0,0,103,108,66,117,102,102,101,114,83,117,98,68,97,116,97,0,103,108,73,115,66,117,102,102,101,114,0,0,0,0,0,0,103,108,71,101,110,82,101,110,100,101,114,98,117,102,102,101,114,115,0,0,0,0,0,0,103,108,68,101,108,101,116,101,82,101,110,100,101,114,98,117,102,102,101,114,115,0,0,0,103,108,66,105,110,100,82,101,110,100,101,114,98,117,102,102,101,114,0,0,0,0,0,0,103,108,71,101,116,82,101,110,100,101,114,98,117,102,102,101,114,80,97,114,97,109,101,116,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+21705);
/* memory initializer */ allocate([114,105,118,0,0,0,0,103,108,73,115,82,101,110,100,101,114,98,117,102,102,101,114,0,0,0,0,0,0,0,0,103,108,71,101,116,85,110,105,102,111,114,109,102,118,0,0,103,108,71,101,116,85,110,105,102,111,114,109,105,118,0,0,103,108,71,101,116,85,110,105,102,111,114,109,76,111,99,97,116,105,111,110,0,0,0,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,102,118,0,0,0,0,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,105,118,0,0,0,0,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,118,0,0,0,0,0,0,0,103,108,71,101,116,65,99,116,105,118,101,85,110,105,102,111,114,109,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,49,102,0,0,0,0,0,103,108,85,110,105,102,111,114,109,50,102,0,0,0,0,0,103,108,85,110,105,102,111,114,109,51,102,0,0,0,0,0,103,108,85,110,105,102,111,114,109,52,102,0,0,0,0,0,103,108,85,110,105,102,111,114,109,49,105,0,0,0,0,0,103,108,85,110,105,102,111,114,109,50,105,0,0,0,0,0,103,108,85,110,105,102,111,114,109,51,105,0,0,0,0,0,103,108,85,110,105,102,111,114,109,52,105,0,0,0,0,0,103,108,85,110,105,102,111,114,109,49,105,118,0,0,0,0,103,108,85,110,105,102,111,114,109,50,105,118,0,0,0,0,103,108,85,110,105,102,111,114,109,51,105,118,0,0,0,0,103,108,85,110,105,102,111,114,109,52,105,118,0,0,0,0,103,108,85,110,105,102,111,114,109,49,102,118,0,0,0,0,103,108,85,110,105,102,111,114,109,50,102,118,0,0,0,0,103,108,85,110,105,102,111,114,109,51,102,118,0,0,0,0,103,108,85,110,105,102,111,114,109,52,102,118,0,0,0,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,50,102,118,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,51,102,118,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,52,102,118,0,0,0,0,0,0,103,108,66,105,110,100,66,117,102,102,101,114,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,118,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,118,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,118,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,118,0,0,0,0,0,0,0,103,108,71,101,116,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,0,0,0,0,103,108,71,101,116,65,99,116,105,118,101,65,116,116,114,105,98,0,0,0,0,0,0,0,103,108,68,101,108,101,116,101,83,104,97,100,101,114,0,0,103,108,71,101,116,65,116,116,97,99,104,101,100,83,104,97,100,101,114,115,0,0,0,0,103,108,83,104,97,100,101,114,83,111,117,114,99,101,0,0,103,108,71,101,116,83,104,97,100,101,114,83,111,117,114,99,101,0,0,0,0,0,0,0,103,108,67,111,109,112,105,108,101,83,104,97,100,101,114,0,103,108,71,101,116,83,104,97,100,101,114,73,110,102,111,76,111,103,0,0,0,0,0,0,103,108,71,101,116,83,104,97,100,101,114,105,118,0,0,0,103,108,71,101,116,80,114,111,103,114,97,109,105,118,0,0,103,108,73,115,83,104,97,100,101,114,0,0,0,0,0,0,103,108,68,101,108,101,116,101,80,114,111,103,114,97,109,0,103,108,71,101,116,83,104,97,100,101,114,80,114,101,99,105,115,105,111,110,70,111,114,109,97,116,0,0,0,0,0,0,103,108,76,105,110,107,80,114,111,103,114,97,109,0,0,0,103,108,71,101,116,80,114,111,103,114,97,109,73,110,102,111,76,111,103,0,0,0,0,0,103,108,86,97,108,105,100,97,116,101,80,114,111,103,114,97,109,0,0,0,0,0,0,0,103,108,73,115,80,114,111,103,114,97,109,0,0,0,0,0,103,108,66,105,110,100,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,0,0,0,103,108,66,105,110,100,70,114,97,109,101,98,117,102,102,101,114,0,0,0,0,0,0,0,103,108,71,101,110,70,114,97,109,101,98,117,102,102,101,114,115,0,0,0,0,0,0,0,103,108,68,101,108,101,116,101,70,114,97,109,101,98,117,102,102,101,114,115,0,0,0,0,103,108,70,114,97,109,101,98,117,102,102,101,114,82,101,110,100,101,114,98,117,102,102,101,114,0,0,0,0,0,0,0,103,108,70,114,97,109,101,98,117,102,102,101,114,84,101,120,116,117,114,101,50,68,0,0,103,108,71,101,116,70,114,97,109,101,98,117,102,102,101,114,65,116,116,97,99,104,109,101,110,116,80,97,114,97,109,101,116,101,114,105,118,0,0,0,103,108,73,115,70,114,97,109,101,98,117,102,102,101,114,0,103,108,68,101,108,101,116,101,79,98,106,101,99,116,0,0,103,108,71,101,116,79,98,106,101,99,116,80,97,114,97,109,101,116,101,114,105,118,0,0,103,108,71,101,116,73,110,102,111,76,111,103,0,0,0,0,103,108,66,105,110,100,80,114,111,103,114,97,109,0,0,0,103,108,71,101,116,80,111,105,110,116,101,114,118,0,0,0,103,108,68,114,97,119,82,97,110,103,101,69,108,101,109,101,110,116,115,0,0,0,0,0,103,108,69,110,97,98,108,101,67,108,105,101,110,116,83,116,97,116,101,0,0,0,0,0,103,108,86,101,114,116,101,120,80,111,105,110,116,101,114,0,103,108,84,101,120,67,111,111,114,100,80,111,105,110,116,101,114,0,0,0,0,0,0,0,103,108,78,111,114,109,97,108,80,111,105,110,116,101,114,0,103,108,67,111,108,111,114,80,111,105,110,116,101,114,0,0,103,108,67,108,105,101,110,116,65,99,116,105,118,101,84,101,120,116,117,114,101,0,0,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,0,0,0,0,0,0,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,0,0,0,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,0,0,0,0,0,0,0,103,108,77,97,116,114,105,120,77,111,100,101,0,0,0,0,103,108,76,111,97,100,73,100,101,110,116,105,116,121,0,0,103,108,76,111,97,100,77,97,116,114,105,120,102,0,0,0,103,108,70,114,117,115,116,117,109,0,0,0,0,0,0,0,103,108,82,111,116,97,116,101,102,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,0,0,0,103,108,69,110,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,0,0,0,0,0,0,103,108,68,105,115,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,0,0,0,0,0,103,108,68,114,97,119,65,114,114,97,121,115,0,0,0,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,0,0,103,108,83,104,97,100,101,114,66,105,110,97,114,121,0,0,103,108,82,101,108,101,97,115,101,83,104,97,100,101,114,67,111,109,112,105,108,101,114,0,103,108,71,101,116,69,114,114,111,114,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,68,105,118,105,115,111,114,0,0,0,103,108,68,114,97,119,65,114,114,97,121,115,73,110,115,116,97,110,99,101,100,0,0,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,73,110,115,116,97,110,99,101,100,0,103,108,70,105,110,105,115,104,0,0,0,0,0,0,0,0,103,108,70,108,117,115,104,0,103,108,67,108,101,97,114,68,101,112,116,104,0,0,0,0,103,108,67,108,101,97,114,68,101,112,116,104,102,0,0,0,103,108,68,101,112,116,104,70,117,110,99,0,0,0,0,0,103,108,69,110,97,98,108,101,0,0,0,0,0,0,0,0,103,108,68,105,115,97,98,108,101,0,0,0,0,0,0,0,103,108,70,114,111,110,116,70,97,99,101,0,0,0,0,0,103,108,67,117,108,108,70,97,99,101,0,0,0,0,0,0,103,108,67,108,101,97,114,0,103,108,76,105,110,101,87,105,100,116,104,0,0,0,0,0,103,108,67,108,101,97,114,83,116,101,110,99,105,108,0,0,103,108,68,101,112,116,104,77,97,115,107,0,0,0,0,0,103,108,83,116,101,110,99,105,108,77,97,115,107,0,0,0,103,108,67,104,101,99,107,70,114,97,109,101,98,117,102,102,101,114,83,116,97,116,117,115,0,0,0,0,0,0,0,0,103,108,71,101,110,101,114,97,116,101,77,105,112,109,97,112,0,0,0,0,0,0,0,0,103,108,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,0,103,108,73,115,69,110,97,98,108,101,100,0,0,0,0,0,103,108,66,108,101,110,100,70,117,110,99,0,0,0,0,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,83,101,112,97,114,97,116,101,0,103,108,68,101,112,116,104,82,97,110,103,101,0,0,0,0,103,108,68,101,112,116,104,82,97,110,103,101,102,0,0,0,103,108,83,116,101,110,99,105,108,77,97,115,107,83,101,112,97,114,97,116,101,0,0,0,103,108,72,105,110,116,0,0,103,108,80,111,108,121,103,111,110,79,102,102,115,101,116,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,0,0,0,0,0,0,0,0,103,108,83,97,109,112,108,101,67,111,118,101,114,97,103,101,0,0,0,0,0,0,0,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,0,0,0,0,0,0,0,0,103,108,83,116,101,110,99,105,108,70,117,110,99,0,0,0,103,108,83,116,101,110,99,105,108,79,112,0,0,0,0,0,103,108,86,105,101,119,112,111,114,116,0,0,0,0,0,0,103,108,67,108,101,97,114,67,111,108,111,114,0,0,0,0,103,108,83,99,105,115,115,111,114,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,0,0,0,0,0,0,0,0,103,108,67,111,108,111,114,77,97,115,107,0,0,0,0,0,103,108,82,101,110,100,101,114,98,117,102,102,101,114,83,116,111,114,97,103,101,0,0,0,103,108,66,108,101,110,100,70,117,110,99,83,101,112,97,114,97,116,101,0,0,0,0,0,103,108,66,108,101,110,100,67,111,108,111,114,0,0,0,0,103,108,83,116,101,110,99,105,108,70,117,110,99,83,101,112,97,114,97,116,101,0,0,0,103,108,83,116,101,110,99,105,108,79,112,83,101,112,97,114,97,116,101,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,0,0,0,0,0,0,0,0,103,108,67,111,112,121,84,101,120,73,109,97,103,101,50,68,0,0,0,0,0,0,0,0,103,108,67,111,112,121,84,101,120,83,117,98,73,109,97,103,101,50,68,0,0,0,0,0,103,108,68,114,97,119,66,117,102,102,101,114,115,0,0,0,123,32,77,111,100,117,108,101,46,112,114,105,110,116,69,114,114,40,39,98,97,100,32,110,97,109,101,32,105,110,32,103,101,116,80,114,111,99,65,100,100,114,101,115,115,58,32,39,32,43,32,91,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,41,44,32,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,49,41,93,41,59,32,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+31945);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        var numChannels;
        switch(format) {
          case 0x1906 /* GL_ALPHA */:
          case 0x1909 /* GL_LUMINANCE */:
          case 0x1902 /* GL_DEPTH_COMPONENT */:
          case 0x1903 /* GL_RED */:
            numChannels = 1;
            break;
          case 0x190A /* GL_LUMINANCE_ALPHA */:
          case 0x8227 /* GL_RG */:
            numChannels = 2;
            break;
          case 0x1907 /* GL_RGB */:
            numChannels = 3;
            break;
          case 0x1908 /* GL_RGBA */:
            numChannels = 4;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            sizePerPixel = numChannels*1;
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
          case 0x8D61 /* GL_HALF_FLOAT_OES */:
            sizePerPixel = numChannels*2;
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
          case 0x1406 /* GL_FLOAT */:
            sizePerPixel = numChannels*4;
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },validateBufferTarget:function (target) {
        switch (target) {
          case 0x8892: // GL_ARRAY_BUFFER
          case 0x8893: // GL_ELEMENT_ARRAY_BUFFER
          case 0x8F36: // GL_COPY_READ_BUFFER
          case 0x8F37: // GL_COPY_WRITE_BUFFER
          case 0x88EB: // GL_PIXEL_PACK_BUFFER
          case 0x88EC: // GL_PIXEL_UNPACK_BUFFER
          case 0x8C2A: // GL_TEXTURE_BUFFER
          case 0x8C8E: // GL_TRANSFORM_FEEDBACK_BUFFER
          case 0x8A11: // GL_UNIFORM_BUFFER
            return true;
          default:
            return false;
        }
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
  
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc');
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic');
        context.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        context.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        context.vaoExt = GLctx.getExtension('OES_vertex_array_object');
  
        if (context.version === 2) {
          // drawBuffers is available in WebGL2 by default.
          context.drawBuffersExt = function(n, bufs) {
            GLctx.drawBuffers(n, bufs);
          };
        } else {
          var ext = GLctx.getExtension('WEBGL_draw_buffers');
          if (ext) {
            context.drawBuffersExt = function(n, bufs) {
              ext.drawBuffersWEBGL(n, bufs);
            };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx.stencilMaskSeparate(x0, x1) }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      return _close(fd);
    }

  var _ceilf=Math_ceil;

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx.stencilFunc(x0, x1, x2) }

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glUniform3iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 3;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform3iv(location, value);
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  
  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return self['performance']['now'](); };
        } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return performance['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x61:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
  
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        Runtime.dynCall('vii', GLFW.active.charFunc, [GLFW.active.id, charCode]);
      },onKeyChanged:function (event, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key == -1) return;
  
        GLFW.active.keys[key] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        Runtime.dynCall('viiiii', GLFW.active.keyFunc, [GLFW.active.id, key, event.keyCode, status, GLFW.getModBits(GLFW.active)]);
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1); // GLFW_PRESS
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0); // GLFW_RELEASE
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        Runtime.dynCall('vidd', GLFW.active.cursorPosFunc, [GLFW.active.id, Browser.mouseX, Browser.mouseY]);
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active || !GLFW.active.mouseButtonFunc) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        if (status == 1) { // GLFW_PRESS
          try {
            event.target.setCapture();
          } catch (e) {}
        }
  
        // DOM and glfw have different button codes
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
  
  
        Runtime.dynCall('viiii', GLFW.active.mouseButtonFunc, [GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active)]);
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons |= (1 << event['button']);
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons &= ~(1 << event['button']);
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        Runtime.dynCall('vidd', GLFW.active.scrollFunc, [GLFW.active.id, sx, sy]);
  
        event.preventDefault();
      },onFullScreenEventChange:function () {
        if (!GLFW.active) return;
  
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
        } else {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
        }
  
        Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true); // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        Runtime.dynCall('viii', GLFW.active.windowSizeFunc, [GLFW.active.id, GLFW.active.width, GLFW.active.height]);
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullScreen();
          } else {
            GLFW.cancelFullScreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowResizeFunc) return;
  
  
        Runtime.dynCall('viii', win.windowResizeFunc, [win.id, width, height]);
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullScreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0)    // GLFW_STENCIL_BITS
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          Runtime.dynCall('vi', win.windowCloseFunc, [win.id]);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwSetScrollCallback(winid, cbfun) {
      GLFW.setScrollCallback(winid, cbfun);
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx.texParameterf(x0, x1, x2) }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glSampleCoverage(x0, x1) { GLctx.sampleCoverage(x0, x1) }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glFrustum() {
  Module['printErr']('missing function: emscripten_glFrustum'); abort(-1);
  }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      location = GL.uniforms[location];
      GLctx.uniform4i(location, v0, v1, v2, v3);
    }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var AL={contexts:[],currentContext:null,alcErr:0,stringCache:{},alcStringCache:{},QUEUE_INTERVAL:25,QUEUE_LOOKAHEAD:100,newSrcId:1,updateSources:function updateSources(context) {
        // If we are animating using the requestAnimationFrame method, then the main loop does not run when in the background.
        // To give a perfect glitch-free audio stop when switching from foreground to background, we need to avoid updating
        // audio altogether when in the background, so detect that case and kill audio buffer streaming if so.
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && document['visibilityState'] != 'visible') return;
  
        for (var srcId in context.src) {
          AL.updateSource(context.src[srcId]);
        }
      },updateSource:function updateSource(src) {
        if (src.state !== 0x1012 /* AL_PLAYING */) {
          return;
        }
  
        var currentTime = AL.currentContext.ctx.currentTime;
        var startTime = src.bufferPosition;
  
        for (var i = src.buffersPlayed; i < src.queue.length; i++) {
          var entry = src.queue[i];
  
          var startOffset = startTime - currentTime;
          var endTime = startTime + entry.buffer.duration;
  
          // Clean up old buffers.
          if (currentTime >= endTime) {
            // Update our location in the queue.
            src.bufferPosition = endTime;
            src.buffersPlayed = i + 1;
  
            // Stop / restart the source when we hit the end.
            if (src.buffersPlayed >= src.queue.length) {
              if (src.loop) {
                AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
              } else {
                AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
              }
            }
          }
          // Process all buffers that'll be played before the next tick.
          else if (startOffset < (AL.QUEUE_LOOKAHEAD / 1000) && !entry.src) {
            // If the start offset is negative, we need to offset the actual buffer.
            var offset = Math.abs(Math.min(startOffset, 0));
  
            entry.src = AL.currentContext.ctx.createBufferSource();
            entry.src.buffer = entry.buffer;
            entry.src.connect(src.gain);
            if (typeof(entry.src.start) !== 'undefined') {
              entry.src.start(startTime, offset);
            } else if (typeof(entry.src.noteOn) !== 'undefined') {
              entry.src.noteOn(startTime);
            }
          }
  
          startTime = endTime;
        }
      },setSourceState:function setSourceState(src, state) {
        if (state === 0x1012 /* AL_PLAYING */) {
          if (src.state !== 0x1013 /* AL_PAUSED */) {
            src.state = 0x1012 /* AL_PLAYING */;
            // Reset our position.
            src.bufferPosition = AL.currentContext.ctx.currentTime;
            src.buffersPlayed = 0;
          } else {
            src.state = 0x1012 /* AL_PLAYING */;
            // Use the current offset from src.bufferPosition to resume at the correct point.
            src.bufferPosition = AL.currentContext.ctx.currentTime - src.bufferPosition;
          }
          AL.stopSourceQueue(src);
          AL.updateSource(src);
        } else if (state === 0x1013 /* AL_PAUSED */) {
          if (src.state === 0x1012 /* AL_PLAYING */) {
            src.state = 0x1013 /* AL_PAUSED */;
            // Store off the current offset to restore with on resume.
            src.bufferPosition = AL.currentContext.ctx.currentTime - src.bufferPosition;
            AL.stopSourceQueue(src);
          }
        } else if (state === 0x1014 /* AL_STOPPED */) {
          if (src.state !== 0x1011 /* AL_INITIAL */) {
            src.state = 0x1014 /* AL_STOPPED */;
            src.buffersPlayed = src.queue.length;
            AL.stopSourceQueue(src);
          }
        } else if (state == 0x1011 /* AL_INITIAL */) {
          if (src.state !== 0x1011 /* AL_INITIAL */) {
            src.state = 0x1011 /* AL_INITIAL */;
            src.bufferPosition = 0;
            src.buffersPlayed = 0;
          }
        }
      },stopSourceQueue:function stopSourceQueue(src) {
        for (var i = 0; i < src.queue.length; i++) {
          var entry = src.queue[i];
          if (entry.src) {
            entry.src.stop(0);
            entry.src = null;
          }
        }
      }};function _alcGetCurrentContext() {
      for (var i = 0; i < AL.contexts.length; ++i) {
        if (AL.contexts[i] == AL.currentContext) {
          return i + 1;
        }
      }
      return 0;
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }

  function _alcGetString(device, param) {
      if (AL.alcStringCache[param]) return AL.alcStringCache[param];
      var ret;
      switch (param) {
      case 0 /* ALC_NO_ERROR */:
        ret = 'No Error';
        break;
      case 0xA001 /* ALC_INVALID_DEVICE */:
        ret = 'Invalid Device';
        break;
      case 0xA002 /* ALC_INVALID_CONTEXT */:
        ret = 'Invalid Context';
        break;
      case 0xA003 /* ALC_INVALID_ENUM */:
        ret = 'Invalid Enum';
        break;
      case 0xA004 /* ALC_INVALID_VALUE */:
        ret = 'Invalid Value';
        break;
      case 0xA005 /* ALC_OUT_OF_MEMORY */:
        ret = 'Out of Memory';
        break;
      case 0x1004 /* ALC_DEFAULT_DEVICE_SPECIFIER */:
        if (typeof(AudioContext) !== "undefined" ||
            typeof(webkitAudioContext) !== "undefined") {
          ret = 'Device';
        } else {
          return 0;
        }
        break;
      case 0x1005 /* ALC_DEVICE_SPECIFIER */:
        if (typeof(AudioContext) !== "undefined" ||
            typeof(webkitAudioContext) !== "undefined") {
          ret = 'Device\0';
        } else {
          ret = '\0';
        }
        break;
      case 0x311 /* ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER */:
        return 0;
        break;
      case 0x310 /* ALC_CAPTURE_DEVICE_SPECIFIER */:
        ret = '\0'
        break;
      case 0x1006 /* ALC_EXTENSIONS */:
        if (!device) {
          AL.alcErr = 0xA001 /* ALC_INVALID_DEVICE */;
          return 0;
        }
        ret = '';
        break;
      default:
        AL.alcErr = 0xA003 /* ALC_INVALID_ENUM */;
        return 0;
      }
  
      ret = allocate(intArrayFromString(ret), 'i8', ALLOC_NORMAL);
  
      AL.alcStringCache[param] = ret;
  
      return ret;
    }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3f(location, v0, v1, v2);
    }

  function _emscripten_glGetObjectParameterivARB() {
  Module['printErr']('missing function: emscripten_glGetObjectParameterivARB'); abort(-1);
  }

  function _emscripten_glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3i(location, v0, v1, v2);
    }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx.stencilOp(x0, x1, x2) }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  function _emscripten_glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  var _cosf=Math_cos;

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      if (data) {
        data = HEAPU8.subarray((data),(data+imageSize));
      } else {
        data = null;
      }
      // N.b. using array notation explicitly to not confuse Closure minification.
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data);
    }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

   
  Module["_memset"] = _memset;

  function _alDeleteBuffers(count, buffers)
    {
      if (!AL.currentContext) {
        return;
      }
      if (count > AL.currentContext.buf.length) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)] - 1;
  
        // Make sure the buffer index is valid.
        if (bufferIdx >= AL.currentContext.buf.length || !AL.currentContext.buf[bufferIdx]) {
          AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
  
        // Make sure the buffer is no longer in use.
        var buffer = AL.currentContext.buf[bufferIdx];
        for (var srcId in AL.currentContext.src) {
          var src = AL.currentContext.src[srcId];
          if (!src) {
            continue;
          }
          for (var k = 0; k < src.queue.length; k++) {
            if (buffer === src.queue[k].buffer) {
              AL.currentContext.err = 0xA004 /* AL_INVALID_OPERATION */;
              return;
            }
          }
        }
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)] - 1;
        delete AL.currentContext.buf[bufferIdx];
      }
    }

  function _alListener3f(param, v1, v2, v3) {
      if (!AL.currentContext) {
        return;
      }
      switch (param) {
      case 0x1004 /* AL_POSITION */:
        AL.currentContext.ctx.listener._position = [v1, v2, v3];
        AL.currentContext.ctx.listener.setPosition(v1, v2, v3);
        break;
      case 0x1006 /* AL_VELOCITY */:
        AL.currentContext.ctx.listener._velocity = [v1, v2, v3];
        AL.currentContext.ctx.listener.setVelocity(v1, v2, v3);
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _glfwMakeContextCurrent(winid) {}

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
        __ATEXIT__.push(function() {
            for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
              JSEvents._removeHandler(i);
            }
           });
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        if (target) {
          if (typeof target == "number") {
            target = Pointer_stringify(target);
          }
          if (target == '#window') return window;
          else if (target == '#document') return document;
          else if (target == '#screen') return window.screen;
          else if (target == '#canvas') return Module['canvas'];
  
          if (typeof target == 'string') return document.getElementById(target);
          else return target;
        } else {
          // The sensible target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          return window;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
          JSEvents.keyEvent = _malloc( 164 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
          writeStringToMemory(e.key ? e.key : "", JSEvents.keyEvent + 0 );
          writeStringToMemory(e.code ? e.code : "", JSEvents.keyEvent + 32 );
          HEAP32[(((JSEvents.keyEvent)+(64))>>2)]=e.location;
          HEAP32[(((JSEvents.keyEvent)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((JSEvents.keyEvent)+(72))>>2)]=e.shiftKey;
          HEAP32[(((JSEvents.keyEvent)+(76))>>2)]=e.altKey;
          HEAP32[(((JSEvents.keyEvent)+(80))>>2)]=e.metaKey;
          HEAP32[(((JSEvents.keyEvent)+(84))>>2)]=e.repeat;
          writeStringToMemory(e.locale ? e.locale : "", JSEvents.keyEvent + 88 );
          writeStringToMemory(e.char ? e.char : "", JSEvents.keyEvent + 120 );
          HEAP32[(((JSEvents.keyEvent)+(152))>>2)]=e.charCode;
          HEAP32[(((JSEvents.keyEvent)+(156))>>2)]=e.keyCode;
          HEAP32[(((JSEvents.keyEvent)+(160))>>2)]=e.which;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.keyEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;        
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
          JSEvents.mouseEvent = _malloc( 72 );
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.mouseEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
          JSEvents.wheelEvent = _malloc( 104 );
        }
        target = JSEvents.findEventTarget(target);
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=e["deltaMode"];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-e["wheelDeltaY"] /* Invert to unify direction with the DOM Level 3 wheel event. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
          JSEvents.uiEvent = _malloc( 36 );
        }
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
          HEAP32[((JSEvents.uiEvent)>>2)]=e.detail;
          HEAP32[(((JSEvents.uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((JSEvents.uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((JSEvents.uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((JSEvents.uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((JSEvents.uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((JSEvents.uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((JSEvents.uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((JSEvents.uiEvent)+(32))>>2)]=scrollPos[1];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.uiEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
          JSEvents.focusEvent = _malloc( 256 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
          writeStringToMemory(nodeName, JSEvents.focusEvent + 0 );
          writeStringToMemory(id, JSEvents.focusEvent + 128 );
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.focusEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
          JSEvents.deviceOrientationEvent = _malloc( 40 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(8))>>3)]=e.alpha;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(16))>>3)]=e.beta;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(24))>>3)]=e.gamma;
          HEAP32[(((JSEvents.deviceOrientationEvent)+(32))>>2)]=e.absolute;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceOrientationEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
          JSEvents.deviceMotionEvent = _malloc( 80 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceMotionEvent)+(8))>>3)]=e.acceleration.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(16))>>3)]=e.acceleration.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(24))>>3)]=e.acceleration.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(32))>>3)]=e.accelerationIncludingGravity.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(40))>>3)]=e.accelerationIncludingGravity.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(48))>>3)]=e.accelerationIncludingGravity.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(56))>>3)]=e.rotationRate.alpha;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(64))>>3)]=e.rotationRate.beta;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(72))>>3)]=e.rotationRate.gamma;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceMotionEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
          JSEvents.orientationChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.orientationChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        writeStringToMemory(nodeName, eventStruct + 8 );
        writeStringToMemory(id, eventStruct + 136 );
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
          JSEvents.fullscreenChangeEvent = _malloc( 280 );
        }
  
        if (!target) {
          target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.fullscreenChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          target.width = cssWidth * dpiScale;
          target.height = cssHeight * dpiScale;
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Runtime.dynCall('iiii', strategy.canvasResizedCallback, [37, 0, strategy.canvasResizedCallbackUserData]);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        writeStringToMemory(nodeName, eventStruct + 4 );
        writeStringToMemory(id, eventStruct + 132);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
          JSEvents.pointerlockChangeEvent = _malloc( 260 );
        }
  
        if (!target) {
          target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.pointerlockChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
          JSEvents.visibilityChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.visibilityChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
          JSEvents.touchEvent = _malloc( 1684 );
        }
  
        target = JSEvents.findEventTarget(target);
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
          
          var ptr = JSEvents.touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((JSEvents.touchEvent)>>2)]=numTouches;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.touchEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // XXX Currently disabled, see bug https://bugzilla.mozilla.org/show_bug.cgi?id=966493
          // Once the above bug is resolved, enable the following condition if possible:
          // allowsDeferredCalls: eventTypeString == 'touchstart',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        writeStringToMemory(e.id, eventStruct + 1304 );
        writeStringToMemory(e.mapping, eventStruct + 1368 );
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
          JSEvents.gamepadEvent = _malloc( 1432 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.gamepadEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var confirmationMessage = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
          JSEvents.batteryEvent = _malloc( 32 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.batteryEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = Module['canvas'];
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};function _emscripten_set_touchcancel_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel");
      return 0;
    }

  function _glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx.blendFuncSeparate(x0, x1, x2, x3) }

  var _asin=Math_asin;

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx.vertexAttrib3f(x0, x1, x2, x3) }

  function _alSource3f(source, param, v1, v2, v3) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      switch (param) {
      case 0x1004 /* AL_POSITION */:
        src.position = [v1, v2, v3];
        break;
      case 0x1005 /* AL_DIRECTION */:
        src.direction = [v1, v2, v3];
        break;
      case 0x1006 /* AL_VELOCITY */:
        src.velocity = [v1, v2, v3];
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _emscripten_glNormalPointer() {
  Module['printErr']('missing function: emscripten_glNormalPointer'); abort(-1);
  }

  
  var _emscripten_GetProcAddress=undefined;
  Module["_emscripten_GetProcAddress"] = _emscripten_GetProcAddress;
  
  
  function _eglWaitClient() {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,stringCache:{},setErrorCode:function (code) {
        EGL.errorCode = code;
      },chooseConfig:function (display, attribList, config, config_size, numConfigs) { 
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
        // TODO: read attribList.
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)]=1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAP32[((config)>>2)]=62002; 
        }
        
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }


  
  var _setSourceState=undefined;function _alSourcePlay(source) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      AL.setSourceState(src, 0x1012 /* AL_PLAYING */);
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glfwGetPrimaryMonitor() {
      return 1;
    }

  function _emscripten_glGetVertexAttribfv(index, pname, params) {
      var data = GLctx.getVertexAttrib(index, pname);
      if (typeof data == 'number') {
        HEAPF32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAPF32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _emscripten_set_touchstart_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart");
      return 0;
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GL.currentContext.instancedArraysExt.drawArraysInstancedANGLE(mode, first, count, primcount);
    }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  var _sinf=Math_sin;

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[3];
        for (var i = 0; i < 4; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(location, transpose, view);
    }

  var _cos=Math_cos;

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      var data = GLctx.getVertexAttrib(index, pname);
      if (typeof data == 'number' || typeof data == 'boolean') {
        HEAP32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAP32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function _emscripten_glEnableClientState() {
  Module['printErr']('missing function: emscripten_glEnableClientState'); abort(-1);
  }

  function _emscripten_glGetPointerv() {
  Module['printErr']('missing function: emscripten_glGetPointerv'); abort(-1);
  }

  function _emscripten_glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  function _emscripten_glStencilMask(x0) { GLctx.stencilMask(x0) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx.stencilFuncSeparate(x0, x1, x2, x3) }

  function _emscripten_set_touchend_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend");
      return 0;
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _glfwTerminate() {
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx.vertexAttrib1f(x0, x1) }

  function _emscripten_glFinish() { GLctx.finish() }

  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDepthFunc(x0) { GLctx.depthFunc(x0) }

  function _alcOpenDevice(deviceName) {
      if (typeof(AudioContext) !== "undefined" ||
          typeof(webkitAudioContext) !== "undefined") {
        return 1; // non-null pointer -- we just simulate one device
      } else {
        return 0;
      }
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  
   
  Module["_strlen"] = _strlen;function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }

  function _emscripten_glUniform4iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 4;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform4iv(location, value);
    }

  function _glClear(x0) { GLctx.clear(x0) }

  function _emscripten_glLoadIdentity(){ throw 'Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glUniform3fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[2];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(location, view);
    }

  function _emscripten_glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _alSourceUnqueueBuffers(source, count, buffers) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
  
      if (count > src.buffersPlayed) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
  
      for (var i = 0; i < count; i++) {
        var entry = src.queue.shift();
        // Write the buffers index out to the return list.
        for (var j = 0; j < AL.currentContext.buf.length; j++) {
          var b = AL.currentContext.buf[j];
          if (b && b == entry.buffer) {
            HEAP32[(((buffers)+(i*4))>>2)]=j+1;
            break;
          }
        }
        src.buffersPlayed--;
      }
  
      AL.updateSource(src);
    }

  function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _alGetSourcei(source, param, value) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
  
      // Being that we have no way to receive end events from buffer nodes,
      // we currently proccess and update a source's buffer queue every
      // ~QUEUE_INTERVAL milliseconds. However, this interval is not precise,
      // so we also forcefully update the source when alGetSourcei is queried
      // to aid in the common scenario of application calling alGetSourcei(AL_BUFFERS_PROCESSED)
      // to recycle buffers.
      AL.updateSource(src);
  
      switch (param) {
      case 0x202 /* AL_SOURCE_RELATIVE */:
        HEAP32[((value)>>2)]=src.panner ? 1 : 0;
        break;
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
        HEAP32[((value)>>2)]=src.coneInnerAngle;
        break;
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
        HEAP32[((value)>>2)]=src.coneOuterAngle;
        break;
      case 0x1009 /* AL_BUFFER */:
        if (!src.queue.length) {
          HEAP32[((value)>>2)]=0;
        } else {
          // Find the first unprocessed buffer.
          var buffer = src.queue[src.buffersPlayed].buffer;
          // Return its index.
          for (var i = 0; i < AL.currentContext.buf.length; ++i) {
            if (buffer == AL.currentContext.buf[i]) {
              HEAP32[((value)>>2)]=i+1;
              return;
            }
          }
          HEAP32[((value)>>2)]=0;
        }
        break;
      case 0x1010 /* AL_SOURCE_STATE */:
        HEAP32[((value)>>2)]=src.state;
        break;
      case 0x1015 /* AL_BUFFERS_QUEUED */:
        HEAP32[((value)>>2)]=src.queue.length
        break;
      case 0x1016 /* AL_BUFFERS_PROCESSED */:
        if (src.loop) {
          HEAP32[((value)>>2)]=0
        } else {
          HEAP32[((value)>>2)]=src.buffersPlayed
        }
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _emscripten_glClearStencil(x0) { GLctx.clearStencil(x0) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDeleteVertexArrays(n, vaos) {
      for(var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GL.currentContext.vaoExt.deleteVertexArrayOES(GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _alGenSources(count, sources) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        var gain = AL.currentContext.ctx.createGain();
        gain.connect(AL.currentContext.gain);
        AL.currentContext.src[AL.newSrcId] = {
          state: 0x1011 /* AL_INITIAL */,
          queue: [],
          loop: false,
          get refDistance() {
            return this._refDistance || 1;
          },
          set refDistance(val) {
            this._refDistance = val;
            if (this.panner) this.panner.refDistance = val;
          },
          get maxDistance() {
            return this._maxDistance || 10000;
          },
          set maxDistance(val) {
            this._maxDistance = val;
            if (this.panner) this.panner.maxDistance = val;
          },
          get rolloffFactor() {
            return this._rolloffFactor || 1;
          },
          set rolloffFactor(val) {
            this._rolloffFactor = val;
            if (this.panner) this.panner.rolloffFactor = val;
          },
          get position() {
            return this._position || [0, 0, 0];
          },
          set position(val) {
            this._position = val;
            if (this.panner) this.panner.setPosition(val[0], val[1], val[2]);
          },
          get velocity() {
            return this._velocity || [0, 0, 0];
          },
          set velocity(val) {
            this._velocity = val;
            if (this.panner) this.panner.setVelocity(val[0], val[1], val[2]);
          },
          get direction() {
            return this._direction || [0, 0, 0];
          },
          set direction(val) {
            this._direction = val;
            if (this.panner) this.panner.setOrientation(val[0], val[1], val[2]);
          },
          get coneOuterGain() {
            return this._coneOuterGain || 0.0;
          },
          set coneOuterGain(val) {
            this._coneOuterGain = val;
            if (this.panner) this.panner.coneOuterGain = val;
          },
          get coneInnerAngle() {
            return this._coneInnerAngle || 360.0;
          },
          set coneInnerAngle(val) {
            this._coneInnerAngle = val;
            if (this.panner) this.panner.coneInnerAngle = val;
          },
          get coneOuterAngle() {
            return this._coneOuterAngle || 360.0;
          },
          set coneOuterAngle(val) {
            this._coneOuterAngle = val;
            if (this.panner) this.panner.coneOuterAngle = val;
          },
          gain: gain,
          panner: null,
          buffersPlayed: 0,
          bufferPosition: 0
        };
        HEAP32[(((sources)+(i*4))>>2)]=AL.newSrcId;
        AL.newSrcId++;
      }
    }

  function ___errno_location() {
      return ___errno_state;
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onFullScreenEventChange();
      });
      return 1; // GL_TRUE
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _alDeleteSources(count, sources) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        var sourceIdx = HEAP32[(((sources)+(i*4))>>2)];
        delete AL.currentContext.src[sourceIdx];
      }
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _emscripten_glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _emscripten_glGenerateMipmap(x0) { GLctx.generateMipmap(x0) }

  function _emscripten_glCullFace(x0) { GLctx.cullFace(x0) }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      location = GL.uniforms[location];
      GLctx.uniform4f(location, v0, v1, v2, v3);
    }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

  function _emscripten_glHint(x0, x1) { GLctx.hint(x0, x1) }

  function _emscripten_glUniform2fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[1];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(location, view);
    }

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glMatrixMode(){ throw 'Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _abort() {
      Module['abort']();
    }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _alGenBuffers(count, buffers) {
      if (!AL.currentContext) {
        return;
      }
      for (var i = 0; i < count; ++i) {
        AL.currentContext.buf.push(null);
        HEAP32[(((buffers)+(i*4))>>2)]=AL.currentContext.buf.length;
      }
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      if (data) {
        data = HEAPU8.subarray((data),(data+imageSize));
      } else {
        data = null;
      }
      // N.b. using array notation explicitly to not confuse Closure minification.
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data);
    }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glUniform2iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 2;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform2iv(location, value);
    }

  function _emscripten_glVertexAttrib1fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+4)>>2);
      GLctx.vertexAttrib1fv(index, v);
    }

  function _glEnable(x0) { GLctx.enable(x0) }

  function _alBufferData(buffer, format, data, size, freq) {
      if (!AL.currentContext) {
        return;
      }
      if (buffer > AL.currentContext.buf.length) {
        return;
      }
      var channels, bytes;
      switch (format) {
      case 0x1100 /* AL_FORMAT_MONO8 */:
        bytes = 1;
        channels = 1;
        break;
      case 0x1101 /* AL_FORMAT_MONO16 */:
        bytes = 2;
        channels = 1;
        break;
      case 0x1102 /* AL_FORMAT_STEREO8 */:
        bytes = 1;
        channels = 2;
        break;
      case 0x1103 /* AL_FORMAT_STEREO16 */:
        bytes = 2;
        channels = 2;
        break;
      case 0x10010 /* AL_FORMAT_MONO_FLOAT32 */:
        bytes = 4;
        channels = 1;
        break;
      case 0x10011 /* AL_FORMAT_STEREO_FLOAT32 */:
        bytes = 4;
        channels = 2;
        break;
      default:
        return;
      }
      try {
        AL.currentContext.buf[buffer - 1] = AL.currentContext.ctx.createBuffer(channels, size / (bytes * channels), freq);
        AL.currentContext.buf[buffer - 1].bytesPerSample =  bytes;
      } catch (e) {
        AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        return;
      }
      var buf = new Array(channels);
      for (var i = 0; i < channels; ++i) {
        buf[i] = AL.currentContext.buf[buffer - 1].getChannelData(i);
      }
      for (var i = 0; i < size / (bytes * channels); ++i) {
        for (var j = 0; j < channels; ++j) {
          switch (bytes) {
          case 1:
            var val = HEAP8[(((data)+(i*channels+j))>>0)] & 0xff;  // unsigned
            buf[j][i] = -1.0 + val * (2/256);
            break;
          case 2:
            var val = HEAP16[(((data)+(2*(i*channels+j)))>>1)];
            buf[j][i] = val/32768;
            break;
          case 4:
            buf[j][i] = HEAPF32[(((data)+(4*(i*channels+j)))>>2)];
            break;
          }
        }
      }
    }

  function _alSourceStop(source) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      AL.setSourceState(src, 0x1014 /* AL_STOPPED */);
    }


  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, -1);
        pixels = data.pixels;
      } else {
        pixels = null;
      }
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx.polygonOffset(x0, x1) }

  var _emscripten_asm_const_int=true;

  function _emscripten_glUniform2f(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2f(location, v0, v1);
    }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }

  var _sin=Math_sin;

  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  function _emscripten_glGetUniformiv(program, location, params) {
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        HEAP32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAP32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _emscripten_glDepthMask(x0) { GLctx.depthMask(x0) }


  function _emscripten_glDepthRangef(x0, x1) { GLctx.depthRange(x0, x1) }

  function _emscripten_glDepthRange(x0, x1) { GLctx.depthRange(x0, x1) }

  function _emscripten_set_fullscreenchange_callback(target, userData, useCapture, callbackfunc) {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      if (!target) target = document;
      else {
        target = JSEvents.findEventTarget(target);
        if (!target) return -4;
      }
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange");
      return 0;
    }

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glUniform1fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[0];
        view[0] = HEAPF32[((value)>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(location, view);
    }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glBindProgramARB() {
  Module['printErr']('missing function: emscripten_glBindProgramARB'); abort(-1);
  }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _glfwDefaultWindowHints() {
      GLFW.hints = GLFW.defaultHints;
    }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDisable(x0) { GLctx.disable(x0) }

  function _emscripten_glVertexAttrib3fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+12)>>2);
      GLctx.vertexAttrib3fv(index, v);
    }

  function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
      if (bufSize > 0 && name) {
        writeStringToMemory(infoname, name);
        if (length) HEAP32[((length)>>2)]=infoname.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glLineWidth(x0) { GLctx.lineWidth(x0) }

  function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  var _sqrt=Math_sqrt;

  function _emscripten_glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _emscripten_glRotatef() {
  Module['printErr']('missing function: emscripten_glRotatef'); abort(-1);
  }

  function _emscripten_glGetIntegerv(name_, p) {
      return GL.get(name_, p, 'Integer');
    }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      HEAP32[((params)>>2)]=result;
    }

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  function _emscripten_glClientActiveTexture() {
  Module['printErr']('missing function: emscripten_glClientActiveTexture'); abort(-1);
  }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx.stencilOpSeparate(x0, x1, x2, x3) }

  function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var data = GL.getTexPixelData(type, format, width, height, pixels, format);
      if (!data.pixels) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, data.pixels);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      if (data) {
        data = HEAPU8.subarray((data),(data+imageSize));
      } else {
        data = null;
      }
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data);
    }

  function _emscripten_glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _alSourcei(source, param, value) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      switch (param) {
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
        src.coneInnerAngle = value;
        break;
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
        src.coneOuterAngle = value;
        break;
      case 0x1007 /* AL_LOOPING */:
        src.loop = (value === 1 /* AL_TRUE */);
        break;
      case 0x1009 /* AL_BUFFER */:
        var buffer = AL.currentContext.buf[value - 1];
        if (value == 0) {
          src.queue = [];
        } else {
          src.queue = [{ buffer: buffer }];
        }
        AL.updateSource(src);
        break;
      case 0x202 /* AL_SOURCE_RELATIVE */:
        if (value === 1 /* AL_TRUE */) {
          if (src.panner) {
            src.panner = null;
  
            // Disconnect from the panner.
            src.gain.disconnect();
  
            src.gain.connect(AL.currentContext.ctx.destination);
          }
        } else if (value === 0 /* AL_FALSE */) {
          if (!src.panner) {
            var panner = src.panner = AL.currentContext.ctx.createPanner();
            panner.panningModel = "equalpower";
            panner.distanceModel = "linear";
            panner.refDistance = src.refDistance;
            panner.maxDistance = src.maxDistance;
            panner.rolloffFactor = src.rolloffFactor;
            panner.setPosition(src.position[0], src.position[1], src.position[2]);
            panner.setVelocity(src.velocity[0], src.velocity[1], src.velocity[2]);
            panner.connect(AL.currentContext.ctx.destination);
  
            // Disconnect from the default source.
            src.gain.disconnect();
  
            src.gain.connect(panner);
          }
        } else {
          AL.currentContext.err = 0xA003 /* AL_INVALID_VALUE */;
        }
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

  function _emscripten_glIsEnabled(x0) { return GLctx.isEnabled(x0) }

  function _alSourceQueueBuffers(source, count, buffers) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)];
        if (bufferIdx > AL.currentContext.buf.length) {
          AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
          return;
        }
      }
  
      for (var i = 0; i < count; ++i) {
        var bufferIdx = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = AL.currentContext.buf[bufferIdx - 1];
        src.queue.push({ buffer: buffer, src: null });
      }
  
      AL.updateSource(src);
    }

  function _alSourcef(source, param, value) {
      if (!AL.currentContext) {
        return;
      }
      var src = AL.currentContext.src[source];
      if (!src) {
        AL.currentContext.err = 0xA001 /* AL_INVALID_NAME */;
        return;
      }
      switch (param) {
      case 0x1003 /* AL_PITCH */:
        break;
      case 0x100A /* AL_GAIN */:
        src.gain.gain.value = value;
        break;
      // case 0x100D /* AL_MIN_GAIN */:
      //   break;
      // case 0x100E /* AL_MAX_GAIN */:
      //   break;
      case 0x1023 /* AL_MAX_DISTANCE */:
        src.maxDistance = value;
        break;
      case 0x1021 /* AL_ROLLOFF_FACTOR */:
        src.rolloffFactor = value;
        break;
      case 0x1022 /* AL_CONE_OUTER_GAIN */:
        src.coneOuterGain = value;
        break;
      case 0x1001 /* AL_CONE_INNER_ANGLE */:
        src.coneInnerAngle = value;
        break;
      case 0x1002 /* AL_CONE_OUTER_ANGLE */:
        src.coneOuterAngle = value;
        break;
      case 0x1020 /* AL_REFERENCE_DISTANCE */:
        src.refDistance = value;
        break;
      default:
        AL.currentContext.err = 0xA002 /* AL_INVALID_ENUM */;
        break;
      }
    }

   
  Module["_memmove"] = _memmove;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx.vertexAttrib4f(x0, x1, x2, x3, x4) }

  function _glDepthFunc(x0) { GLctx.depthFunc(x0) }

  function _emscripten_glUniform2i(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2i(location, v0, v1);
    }

  function _emscripten_glClearDepthf(x0) { GLctx.clearDepth(x0) }

  function _emscripten_glClear(x0) { GLctx.clear(x0) }

  function _alGetError() {
      if (!AL.currentContext) {
        return 0xA004 /* AL_INVALID_OPERATION */;
      } else {
        // Reset error on get.
        var err = AL.currentContext.err;
        AL.currentContext.err = 0 /* AL_NO_ERROR */;
        return err;
      }
    }

  function _emscripten_glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }

  function _emscripten_glGetUniformfv(program, location, params) {
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number') {
        HEAPF32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAPF32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _alcMakeContextCurrent(context) {
      if (context == 0) {
        AL.currentContext = null;
        return 0;
      } else {
        AL.currentContext = AL.contexts[context - 1];
        return 1;
      }
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glFrontFace(x0) { GLctx.frontFace(x0) }

  function _emscripten_glVertexPointer(){ throw 'Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glUniform1iv(location, count, value) {
      location = GL.uniforms[location];
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform1iv(location, value);
    }

  function _glUniform4fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[3];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
        view[3] = HEAPF32[(((value)+(12))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(location, view);
    }

  function _emscripten_glTexCoordPointer() {
  Module['printErr']('missing function: emscripten_glTexCoordPointer'); abort(-1);
  }

  function _emscripten_glGetInfoLogARB() {
  Module['printErr']('missing function: emscripten_glGetInfoLogARB'); abort(-1);
  }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx.renderbufferStorage(x0, x1, x2, x3) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glIsProgram(program) {
      var program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx.blendColor(x0, x1, x2, x3) }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[8];
        for (var i = 0; i < 9; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(location, transpose, view);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx.vertexAttrib2f(x0, x1, x2) }

  function _emscripten_glUniform4fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[3];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
        view[3] = HEAPF32[(((value)+(12))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(location, view);
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _alcDestroyContext(context) {
      // Stop playback, etc
      clearInterval(AL.contexts[context - 1].interval);
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

   
  Module["_strcpy"] = _strcpy;

  function _glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx.blendEquationSeparate(x0, x1) }

  function _glfwSetWindowIconifyCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.windowIconifyFunc = cbfun;
    }

  function _emscripten_glDrawRangeElements() {
  Module['printErr']('missing function: emscripten_glDrawRangeElements'); abort(-1);
  }

  function _emscripten_glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib2fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+8)>>2);
      GLctx.vertexAttrib2fv(index, v);
    }

  var _floorf=Math_floor;

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
      if (bufSize > 0 && name) {
        writeStringToMemory(infoname, name);
        if (length) HEAP32[((length)>>2)]=infoname.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glDeleteObjectARB() {
  Module['printErr']('missing function: emscripten_glDeleteObjectARB'); abort(-1);
  }

  function _emscripten_set_touchmove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove");
      return 0;
    }

  function _emscripten_glUniform1f(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1f(location, v0);
    }

  function _alcCreateContext(device, attrList) {
      if (device != 1) {
        return 0;
      }
  
      if (attrList) {
        return 0;
      }
  
      var ctx;
      try {
        ctx = new AudioContext();
      } catch (e) {
        try {
          ctx = new webkitAudioContext();
        } catch (e) {}
      }
  
      if (ctx) {
        // Old Web Audio API (e.g. Safari 6.0.5) had an inconsistently named createGainNode function.
        if (typeof(ctx.createGain) === 'undefined') ctx.createGain = ctx.createGainNode;
  
        var gain = ctx.createGain();
        gain.connect(ctx.destination);
        var context = {
          ctx: ctx,
          err: 0,
          src: {},
          buf: [],
          interval: setInterval(function() { AL.updateSources(context); }, AL.QUEUE_INTERVAL),
          gain: gain
        };
        AL.contexts.push(context);
        return AL.contexts.length;
      } else {
        return 0;
      }
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _alcCloseDevice(device) {
      // Stop playback, etc
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  var _sqrtf=Math_sqrt;

   
  Module["_strncpy"] = _strncpy;

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  var _log=Math_log;

  function _glfwSetCharCallback(winid, cbfun) {
      GLFW.setCharCallback(winid, cbfun);
    }

  function _emscripten_glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glEnable(x0) { GLctx.enable(x0) }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx.scissor(x0, x1, x2, x3) }

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.cursorEnterFunc = cbfun;
    }

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_glDrawBuffers(n, bufs) {
      var bufArray = [];
      for (var i = 0; i < n; i++)
        bufArray.push(HEAP32[(((bufs)+(i*4))>>2)]);
  
      GL.currentContext.drawBuffersExt(bufArray);
    }

  
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _alcGetContextsDevice(context) {
      if (context <= AL.contexts.length && context > 0) {
        // Returns the only one audio device
        return 1;
      }
      return 0;
    }

  function _emscripten_glBlendEquation(x0) { GLctx.blendEquation(x0) }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _emscripten_glVertexAttrib4fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+16)>>2);
      GLctx.vertexAttrib4fv(index, v);
    }

  var _BItoD=true;

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      result = result.slice(0, Math.max(0, bufSize - 1));
      if (bufSize > 0 && source) {
        writeStringToMemory(result, source);
        if (length) HEAP32[((length)>>2)]=result.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glClearDepth(x0) { GLctx.clearDepth(x0) }

  function _emscripten_glGetFloatv(name_, p) {
      return GL.get(name_, p, 'Float');
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GL.currentContext.instancedArraysExt.vertexAttribDivisorANGLE(index, divisor);    
    }

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GL.currentContext.instancedArraysExt.drawElementsInstancedANGLE(mode, count, type, indices, primcount);
    }


  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  function _emscripten_glBindVertexArray(vao) {
  
      GL.currentContext.vaoExt.bindVertexArrayOES(GL.vaos[vao]);
    }

  var _floor=Math_floor;

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _emscripten_glLoadMatrixf() {
  Module['printErr']('missing function: emscripten_glLoadMatrixf'); abort(-1);
  }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  var _exp=Math_exp;

  function _emscripten_glColorPointer() {
  Module['printErr']('missing function: emscripten_glColorPointer'); abort(-1);
  }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function _glfwPollEvents() {}

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx.checkFramebufferStatus(x0) }

  function _glfwDestroyWindow(winid) {
      return GLFW.destroyWindow(winid);
    }

  function _emscripten_glFlush() { GLctx.flush() }

  function _glfwSetErrorCallback(cbfun) {
      GLFW.errorFunc = cbfun;
    }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glfwSetKeyCallback(winid, cbfun) {
      GLFW.setKeyCallback(winid, cbfun);
    }

  function _emscripten_glColorMask(x0, x1, x2, x3) { GLctx.colorMask(x0, x1, x2, x3) }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glfwGetKey(winid, key) {
      return GLFW.getKey(winid, key);
    }

  function _emscripten_glGenVertexArrays(n, arrays) {
  
      for(var i = 0; i < n; i++) {
        var vao = GL.currentContext.vaoExt.createVertexArrayOES();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _emscripten_glGetBooleanv(name_, p) {
      return GL.get(name_, p, 'Boolean');
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vd(index,a1) {
  try {
    Module["dynCall_vd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdi(index,a1,a2) {
  try {
    Module["dynCall_vdi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_vdddddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vdddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdd(index,a1,a2) {
  try {
    Module["dynCall_vdd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_viiiii": invoke_viiiii, "invoke_vd": invoke_vd, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viddd": invoke_viddd, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viii": invoke_viii, "invoke_vidddd": invoke_vidddd, "invoke_vdi": invoke_vdi, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_iii": invoke_iii, "invoke_i": invoke_i, "invoke_iiiiii": invoke_iiiiii, "invoke_vdddddd": invoke_vdddddd, "invoke_vdddd": invoke_vdddd, "invoke_vdd": invoke_vdd, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_viiii": invoke_viiii, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_glUseProgram": _glUseProgram, "_exp": _exp, "_glfwCreateWindow": _glfwCreateWindow, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_fread": _fread, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glCullFace": _emscripten_glCullFace, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glGetPointerv": _emscripten_glGetPointerv, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_alBufferData": _alBufferData, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_glBindBuffer": _glBindBuffer, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_alSource3f": _alSource3f, "_sqrtf": _sqrtf, "_emscripten_set_fullscreenchange_callback": _emscripten_set_fullscreenchange_callback, "_emscripten_set_touchmove_callback": _emscripten_set_touchmove_callback, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_ceilf": _ceilf, "_glBlendFunc": _glBlendFunc, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_glGetAttribLocation": _glGetAttribLocation, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_alcGetString": _alcGetString, "_sysconf": _sysconf, "_close": _close, "_emscripten_glVertexPointer": _emscripten_glVertexPointer, "_emscripten_set_touchstart_callback": _emscripten_set_touchstart_callback, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_cos": _cos, "_fileno": _fileno, "_llvm_stacksave": _llvm_stacksave, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_puts": _puts, "_emscripten_glFrustum": _emscripten_glFrustum, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_glfwInit": _glfwInit, "_write": _write, "_ftell": _ftell, "_glGetShaderiv": _glGetShaderiv, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_alSourcePlay": _alSourcePlay, "_alSourcei": _alSourcei, "_emscripten_glHint": _emscripten_glHint, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_glfwSetErrorCallback": _glfwSetErrorCallback, "_glfwDefaultWindowHints": _glfwDefaultWindowHints, "_glfwDestroyWindow": _glfwDestroyWindow, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glColorPointer": _emscripten_glColorPointer, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_glVertexAttribPointer": _glVertexAttribPointer, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_alcCreateContext": _alcCreateContext, "_glfwTerminate": _glfwTerminate, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_emscripten_glIsShader": _emscripten_glIsShader, "_llvm_stackrestore": _llvm_stackrestore, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_emscripten_glClear": _emscripten_glClear, "_glDrawElements": _glDrawElements, "_alGetSourcei": _alGetSourcei, "_glBufferSubData": _glBufferSubData, "_alcMakeContextCurrent": _alcMakeContextCurrent, "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_glViewport": _glViewport, "_alSourceQueueBuffers": _alSourceQueueBuffers, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "___setErrNo": ___setErrNo, "_eglGetProcAddress": _eglGetProcAddress, "_alcGetCurrentContext": _alcGetCurrentContext, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_glDeleteTextures": _glDeleteTextures, "_glDepthFunc": _glDepthFunc, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glGetError": _emscripten_glGetError, "_alGenBuffers": _alGenBuffers, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glRotatef": _emscripten_glRotatef, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_glEnable": _glEnable, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glMatrixMode": _emscripten_glMatrixMode, "_alDeleteSources": _alDeleteSources, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_sin": _sin, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "_alSourceUnqueueBuffers": _alSourceUnqueueBuffers, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_alGetError": _alGetError, "_emscripten_get_now": _emscripten_get_now, "_emscripten_glNormalPointer": _emscripten_glNormalPointer, "_glAttachShader": _glAttachShader, "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer, "_emscripten_glFinish": _emscripten_glFinish, "_glCreateProgram": _glCreateProgram, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_emscripten_glClearDepth": _emscripten_glClearDepth, "_read": _read, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_time": _time, "_glBindFramebuffer": _glBindFramebuffer, "_pwrite": _pwrite, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_exit": _exit, "_emscripten_asm_const_2": _emscripten_asm_const_2, "_glGetString": _glGetString, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_alSourcef": _alSourcef, "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements, "_llvm_pow_f64": _llvm_pow_f64, "_glDeleteFramebuffers": _glDeleteFramebuffers, "_glfwPollEvents": _glfwPollEvents, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_glfwSwapInterval": _glfwSwapInterval, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_glfwSetWindowShouldClose": _glfwSetWindowShouldClose, "_lseek": _lseek, "_glfwWindowHint": _glfwWindowHint, "_vfprintf": _vfprintf, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_asin": _asin, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_sbrk": _sbrk, "_glCompressedTexImage2D": _glCompressedTexImage2D, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "___errno_location": ___errno_location, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_open": _open, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_glBindTexture": _glBindTexture, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glDisable": _emscripten_glDisable, "_glfwSetCharCallback": _glfwSetCharCallback, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glfwSetScrollCallback": _glfwSetScrollCallback, "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_alcDestroyContext": _alcDestroyContext, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_glCreateShader": _glCreateShader, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_glCompileShader": _glCompileShader, "_fseek": _fseek, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glDepthRange": _emscripten_glDepthRange, "_fclose": _fclose, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_floorf": _floorf, "_log": _log, "_glActiveTexture": _glActiveTexture, "_glfwSwapBuffers": _glfwSwapBuffers, "_recv": _recv, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_glfwSetWindowIconifyCallback": _glfwSetWindowIconifyCallback, "_emscripten_glDrawBuffers": _emscripten_glDrawBuffers, "_alSourceStop": _alSourceStop, "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_alcCloseDevice": _alcCloseDevice, "_glUniform1i": _glUniform1i, "_send": _send, "_fputc": _fputc, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_abort": _abort, "_alcGetContextsDevice": _alcGetContextsDevice, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_glDeleteBuffers": _glDeleteBuffers, "_glBufferData": _glBufferData, "_glTexImage2D": _glTexImage2D, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_fopen": _fopen, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_floor": _floor, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity, "_glDeleteShader": _glDeleteShader, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_glGetProgramiv": _glGetProgramiv, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_glfwGetTime": _glfwGetTime, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_alListener3f": _alListener3f, "_glDrawArrays": _glDrawArrays, "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "_emscripten_set_touchcancel_callback": _emscripten_set_touchcancel_callback, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_fwrite": _fwrite, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_glfwGetKey": _glfwGetKey, "_glfwGetPrimaryMonitor": _glfwGetPrimaryMonitor, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "_emscripten_set_touchend_callback": _emscripten_set_touchend_callback, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_glClear": _glClear, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_fprintf": _fprintf, "__reallyNegative": __reallyNegative, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_glGetUniformLocation": _glGetUniformLocation, "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_emscripten_glEnable": _emscripten_glEnable, "_glUniform4fv": _glUniform4fv, "_glGenTextures": _glGenTextures, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_sinf": _sinf, "__exit": __exit, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_glPixelStorei": _glPixelStorei, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_alDeleteBuffers": _alDeleteBuffers, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_pread": _pread, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_mkport": _mkport, "_glfwGetCursorPos": _glfwGetCursorPos, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_glLinkProgram": _glLinkProgram, "_feof": _feof, "_fflush": _fflush, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_alGenSources": _alGenSources, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_fgetc": _fgetc, "_alcOpenDevice": _alcOpenDevice, "_cosf": _cosf, "_sqrt": _sqrt, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_eglWaitClient": _eglWaitClient, "_glTexParameteri": _glTexParameteri, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "__formatString": __formatString, "_fputs": _fputs, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_glClearColor": _glClearColor, "_emscripten_glEnableClientState": _emscripten_glEnableClientState, "_glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vd=env.invoke_vd;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viddd=env.invoke_viddd;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_vidddd=env.invoke_vidddd;
  var invoke_vdi=env.invoke_vdi;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_i=env.invoke_i;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_vdddddd=env.invoke_vdddddd;
  var invoke_vdddd=env.invoke_vdddd;
  var invoke_vdd=env.invoke_vdd;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_viiii=env.invoke_viiii;
  var _emscripten_glGetTexParameterfv=env._emscripten_glGetTexParameterfv;
  var _glUseProgram=env._glUseProgram;
  var _exp=env._exp;
  var _glfwCreateWindow=env._glfwCreateWindow;
  var _emscripten_glReleaseShaderCompiler=env._emscripten_glReleaseShaderCompiler;
  var _emscripten_glBlendFuncSeparate=env._emscripten_glBlendFuncSeparate;
  var _emscripten_glUniform4iv=env._emscripten_glUniform4iv;
  var _emscripten_glVertexAttribPointer=env._emscripten_glVertexAttribPointer;
  var _fread=env._fread;
  var _emscripten_glGetIntegerv=env._emscripten_glGetIntegerv;
  var _emscripten_glCullFace=env._emscripten_glCullFace;
  var _emscripten_glIsProgram=env._emscripten_glIsProgram;
  var _emscripten_glStencilMaskSeparate=env._emscripten_glStencilMaskSeparate;
  var _emscripten_glGetPointerv=env._emscripten_glGetPointerv;
  var _emscripten_glViewport=env._emscripten_glViewport;
  var _emscripten_glFrontFace=env._emscripten_glFrontFace;
  var _alBufferData=env._alBufferData;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var _emscripten_glUniform3fv=env._emscripten_glUniform3fv;
  var _emscripten_glPolygonOffset=env._emscripten_glPolygonOffset;
  var _emscripten_glUseProgram=env._emscripten_glUseProgram;
  var _emscripten_glBlendColor=env._emscripten_glBlendColor;
  var _glBindBuffer=env._glBindBuffer;
  var _emscripten_glDepthFunc=env._emscripten_glDepthFunc;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _alSource3f=env._alSource3f;
  var _sqrtf=env._sqrtf;
  var _emscripten_set_fullscreenchange_callback=env._emscripten_set_fullscreenchange_callback;
  var _emscripten_set_touchmove_callback=env._emscripten_set_touchmove_callback;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _ceilf=env._ceilf;
  var _glBlendFunc=env._glBlendFunc;
  var _emscripten_glDisableVertexAttribArray=env._emscripten_glDisableVertexAttribArray;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _alcGetString=env._alcGetString;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _emscripten_glVertexPointer=env._emscripten_glVertexPointer;
  var _emscripten_set_touchstart_callback=env._emscripten_set_touchstart_callback;
  var _emscripten_glGetBooleanv=env._emscripten_glGetBooleanv;
  var _emscripten_glGetShaderSource=env._emscripten_glGetShaderSource;
  var _cos=env._cos;
  var _fileno=env._fileno;
  var _llvm_stacksave=env._llvm_stacksave;
  var _emscripten_glUniform1i=env._emscripten_glUniform1i;
  var _emscripten_glStencilFuncSeparate=env._emscripten_glStencilFuncSeparate;
  var _puts=env._puts;
  var _emscripten_glFrustum=env._emscripten_glFrustum;
  var _emscripten_glGenBuffers=env._emscripten_glGenBuffers;
  var _emscripten_glDeleteObjectARB=env._emscripten_glDeleteObjectARB;
  var _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback;
  var _emscripten_glGetShaderPrecisionFormat=env._emscripten_glGetShaderPrecisionFormat;
  var _glfwInit=env._glfwInit;
  var _write=env._write;
  var _ftell=env._ftell;
  var _glGetShaderiv=env._glGetShaderiv;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var _emscripten_glGetString=env._emscripten_glGetString;
  var _emscripten_glIsFramebuffer=env._emscripten_glIsFramebuffer;
  var _emscripten_glIsEnabled=env._emscripten_glIsEnabled;
  var _emscripten_glScissor=env._emscripten_glScissor;
  var _emscripten_glTexParameteriv=env._emscripten_glTexParameteriv;
  var _emscripten_glDeleteVertexArrays=env._emscripten_glDeleteVertexArrays;
  var _emscripten_glBindProgramARB=env._emscripten_glBindProgramARB;
  var _emscripten_glStencilOpSeparate=env._emscripten_glStencilOpSeparate;
  var _alSourcePlay=env._alSourcePlay;
  var _alSourcei=env._alSourcei;
  var _emscripten_glHint=env._emscripten_glHint;
  var _emscripten_glFramebufferRenderbuffer=env._emscripten_glFramebufferRenderbuffer;
  var _emscripten_glClearDepthf=env._emscripten_glClearDepthf;
  var _glfwSetErrorCallback=env._glfwSetErrorCallback;
  var _glfwDefaultWindowHints=env._glfwDefaultWindowHints;
  var _glfwDestroyWindow=env._glfwDestroyWindow;
  var _emscripten_glVertexAttrib1f=env._emscripten_glVertexAttrib1f;
  var _emscripten_glGetActiveAttrib=env._emscripten_glGetActiveAttrib;
  var _emscripten_glColorPointer=env._emscripten_glColorPointer;
  var _emscripten_glAttachShader=env._emscripten_glAttachShader;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _emscripten_glCompressedTexSubImage2D=env._emscripten_glCompressedTexSubImage2D;
  var _emscripten_glUniform2f=env._emscripten_glUniform2f;
  var _alcCreateContext=env._alcCreateContext;
  var _glfwTerminate=env._glfwTerminate;
  var _emscripten_glTexParameterfv=env._emscripten_glTexParameterfv;
  var _emscripten_glUniformMatrix2fv=env._emscripten_glUniformMatrix2fv;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _emscripten_glGetUniformiv=env._emscripten_glGetUniformiv;
  var _emscripten_glTexParameterf=env._emscripten_glTexParameterf;
  var _emscripten_glGetAttachedShaders=env._emscripten_glGetAttachedShaders;
  var _emscripten_glGenTextures=env._emscripten_glGenTextures;
  var _emscripten_glTexParameteri=env._emscripten_glTexParameteri;
  var _emscripten_glIsShader=env._emscripten_glIsShader;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _glfwMakeContextCurrent=env._glfwMakeContextCurrent;
  var _emscripten_glClear=env._emscripten_glClear;
  var _glDrawElements=env._glDrawElements;
  var _alGetSourcei=env._alGetSourcei;
  var _glBufferSubData=env._glBufferSubData;
  var _alcMakeContextCurrent=env._alcMakeContextCurrent;
  var _emscripten_glGenVertexArrays=env._emscripten_glGenVertexArrays;
  var _emscripten_glVertexAttrib2fv=env._emscripten_glVertexAttrib2fv;
  var _glViewport=env._glViewport;
  var _alSourceQueueBuffers=env._alSourceQueueBuffers;
  var _emscripten_glGetTexParameteriv=env._emscripten_glGetTexParameteriv;
  var ___setErrNo=env.___setErrNo;
  var _eglGetProcAddress=env._eglGetProcAddress;
  var _alcGetCurrentContext=env._alcGetCurrentContext;
  var _emscripten_glBindAttribLocation=env._emscripten_glBindAttribLocation;
  var _glDeleteTextures=env._glDeleteTextures;
  var _glDepthFunc=env._glDepthFunc;
  var _emscripten_glStencilMask=env._emscripten_glStencilMask;
  var _emscripten_glClientActiveTexture=env._emscripten_glClientActiveTexture;
  var _emscripten_glVertexAttrib2f=env._emscripten_glVertexAttrib2f;
  var _emscripten_glFlush=env._emscripten_glFlush;
  var _emscripten_glBlendFunc=env._emscripten_glBlendFunc;
  var _emscripten_glCheckFramebufferStatus=env._emscripten_glCheckFramebufferStatus;
  var _emscripten_glGenerateMipmap=env._emscripten_glGenerateMipmap;
  var _emscripten_glGetError=env._emscripten_glGetError;
  var _alGenBuffers=env._alGenBuffers;
  var _emscripten_glUniform3f=env._emscripten_glUniform3f;
  var _emscripten_glUniform3i=env._emscripten_glUniform3i;
  var _emscripten_glRotatef=env._emscripten_glRotatef;
  var _emscripten_glDeleteShader=env._emscripten_glDeleteShader;
  var _glEnable=env._glEnable;
  var _emscripten_glReadPixels=env._emscripten_glReadPixels;
  var _emscripten_glMatrixMode=env._emscripten_glMatrixMode;
  var _alDeleteSources=env._alDeleteSources;
  var _emscripten_glClearStencil=env._emscripten_glClearStencil;
  var _sin=env._sin;
  var _emscripten_glGetUniformLocation=env._emscripten_glGetUniformLocation;
  var _alSourceUnqueueBuffers=env._alSourceUnqueueBuffers;
  var _emscripten_glDrawArrays=env._emscripten_glDrawArrays;
  var _alGetError=env._alGetError;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_glNormalPointer=env._emscripten_glNormalPointer;
  var _glAttachShader=env._glAttachShader;
  var _emscripten_glTexCoordPointer=env._emscripten_glTexCoordPointer;
  var _emscripten_glFinish=env._emscripten_glFinish;
  var _glCreateProgram=env._glCreateProgram;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _emscripten_glClearDepth=env._emscripten_glClearDepth;
  var _read=env._read;
  var _emscripten_glBindFramebuffer=env._emscripten_glBindFramebuffer;
  var _emscripten_glLoadMatrixf=env._emscripten_glLoadMatrixf;
  var _emscripten_glIsBuffer=env._emscripten_glIsBuffer;
  var _emscripten_glVertexAttrib3f=env._emscripten_glVertexAttrib3f;
  var _time=env._time;
  var _glBindFramebuffer=env._glBindFramebuffer;
  var _pwrite=env._pwrite;
  var _emscripten_glGetFramebufferAttachmentParameteriv=env._emscripten_glGetFramebufferAttachmentParameteriv;
  var _emscripten_glBlendEquationSeparate=env._emscripten_glBlendEquationSeparate;
  var _exit=env._exit;
  var _emscripten_asm_const_2=env._emscripten_asm_const_2;
  var _glGetString=env._glGetString;
  var _emscripten_glUniform4i=env._emscripten_glUniform4i;
  var _alSourcef=env._alSourcef;
  var _emscripten_glDrawRangeElements=env._emscripten_glDrawRangeElements;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _glDeleteFramebuffers=env._glDeleteFramebuffers;
  var _glfwPollEvents=env._glfwPollEvents;
  var _emscripten_glUniform4f=env._emscripten_glUniform4f;
  var _glfwSwapInterval=env._glfwSwapInterval;
  var _emscripten_glBindBuffer=env._emscripten_glBindBuffer;
  var _glfwSetWindowShouldClose=env._glfwSetWindowShouldClose;
  var _lseek=env._lseek;
  var _glfwWindowHint=env._glfwWindowHint;
  var _vfprintf=env._vfprintf;
  var _emscripten_glShaderBinary=env._emscripten_glShaderBinary;
  var _emscripten_glDrawElements=env._emscripten_glDrawElements;
  var _asin=env._asin;
  var _emscripten_glGetShaderInfoLog=env._emscripten_glGetShaderInfoLog;
  var _sbrk=env._sbrk;
  var _glCompressedTexImage2D=env._glCompressedTexImage2D;
  var _emscripten_glUniform1iv=env._emscripten_glUniform1iv;
  var _emscripten_glGetVertexAttribPointerv=env._emscripten_glGetVertexAttribPointerv;
  var ___errno_location=env.___errno_location;
  var _emscripten_glEnableVertexAttribArray=env._emscripten_glEnableVertexAttribArray;
  var _emscripten_glUniform2i=env._emscripten_glUniform2i;
  var _open=env._open;
  var _emscripten_glGetAttribLocation=env._emscripten_glGetAttribLocation;
  var _emscripten_glGetActiveUniform=env._emscripten_glGetActiveUniform;
  var _glBindTexture=env._glBindTexture;
  var _emscripten_glUniform3iv=env._emscripten_glUniform3iv;
  var _emscripten_glUniform2iv=env._emscripten_glUniform2iv;
  var _emscripten_glDisable=env._emscripten_glDisable;
  var _glfwSetCharCallback=env._glfwSetCharCallback;
  var _emscripten_glGetBufferParameteriv=env._emscripten_glGetBufferParameteriv;
  var _emscripten_glDeleteProgram=env._emscripten_glDeleteProgram;
  var _emscripten_glDeleteRenderbuffers=env._emscripten_glDeleteRenderbuffers;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _glfwSetScrollCallback=env._glfwSetScrollCallback;
  var _emscripten_glDrawElementsInstanced=env._emscripten_glDrawElementsInstanced;
  var _emscripten_glVertexAttrib4f=env._emscripten_glVertexAttrib4f;
  var _alcDestroyContext=env._alcDestroyContext;
  var _emscripten_glGetVertexAttribiv=env._emscripten_glGetVertexAttribiv;
  var _emscripten_glTexSubImage2D=env._emscripten_glTexSubImage2D;
  var _glCreateShader=env._glCreateShader;
  var _emscripten_glPixelStorei=env._emscripten_glPixelStorei;
  var _glCompileShader=env._glCompileShader;
  var _fseek=env._fseek;
  var _emscripten_glUniformMatrix3fv=env._emscripten_glUniformMatrix3fv;
  var _emscripten_glDepthRange=env._emscripten_glDepthRange;
  var _fclose=env._fclose;
  var _emscripten_glCompressedTexImage2D=env._emscripten_glCompressedTexImage2D;
  var _floorf=env._floorf;
  var _log=env._log;
  var _glActiveTexture=env._glActiveTexture;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _recv=env._recv;
  var _emscripten_glDepthMask=env._emscripten_glDepthMask;
  var _glfwSetWindowIconifyCallback=env._glfwSetWindowIconifyCallback;
  var _emscripten_glDrawBuffers=env._emscripten_glDrawBuffers;
  var _alSourceStop=env._alSourceStop;
  var _emscripten_glGetObjectParameterivARB=env._emscripten_glGetObjectParameterivARB;
  var _emscripten_glFramebufferTexture2D=env._emscripten_glFramebufferTexture2D;
  var _alcCloseDevice=env._alcCloseDevice;
  var _glUniform1i=env._glUniform1i;
  var _send=env._send;
  var _fputc=env._fputc;
  var _emscripten_glStencilFunc=env._emscripten_glStencilFunc;
  var _abort=env._abort;
  var _alcGetContextsDevice=env._alcGetContextsDevice;
  var _emscripten_glUniform2fv=env._emscripten_glUniform2fv;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glBufferData=env._glBufferData;
  var _glTexImage2D=env._glTexImage2D;
  var _emscripten_glGetShaderiv=env._emscripten_glGetShaderiv;
  var _fopen=env._fopen;
  var _emscripten_glGenFramebuffers=env._emscripten_glGenFramebuffers;
  var _floor=env._floor;
  var _emscripten_glUniformMatrix4fv=env._emscripten_glUniformMatrix4fv;
  var _emscripten_glLoadIdentity=env._emscripten_glLoadIdentity;
  var _glDeleteShader=env._glDeleteShader;
  var _emscripten_glUniform1f=env._emscripten_glUniform1f;
  var _glGetProgramiv=env._glGetProgramiv;
  var _emscripten_glUniform1fv=env._emscripten_glUniform1fv;
  var _emscripten_glIsRenderbuffer=env._emscripten_glIsRenderbuffer;
  var _glfwGetTime=env._glfwGetTime;
  var _emscripten_glRenderbufferStorage=env._emscripten_glRenderbufferStorage;
  var _alListener3f=env._alListener3f;
  var _glDrawArrays=env._glDrawArrays;
  var _emscripten_glBindVertexArray=env._emscripten_glBindVertexArray;
  var _emscripten_glDrawArraysInstanced=env._emscripten_glDrawArraysInstanced;
  var _emscripten_set_touchcancel_callback=env._emscripten_set_touchcancel_callback;
  var _emscripten_glCreateShader=env._emscripten_glCreateShader;
  var _fwrite=env._fwrite;
  var _emscripten_glDeleteTextures=env._emscripten_glDeleteTextures;
  var _glfwGetKey=env._glfwGetKey;
  var _glfwGetPrimaryMonitor=env._glfwGetPrimaryMonitor;
  var _emscripten_glBufferSubData=env._emscripten_glBufferSubData;
  var _emscripten_glVertexAttribDivisor=env._emscripten_glVertexAttribDivisor;
  var _emscripten_set_touchend_callback=env._emscripten_set_touchend_callback;
  var _emscripten_glGetUniformfv=env._emscripten_glGetUniformfv;
  var _glClear=env._glClear;
  var _emscripten_glGetVertexAttribfv=env._emscripten_glGetVertexAttribfv;
  var _emscripten_glGetRenderbufferParameteriv=env._emscripten_glGetRenderbufferParameteriv;
  var _fprintf=env._fprintf;
  var __reallyNegative=env.__reallyNegative;
  var _emscripten_glVertexAttrib3fv=env._emscripten_glVertexAttrib3fv;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _emscripten_glGetInfoLogARB=env._emscripten_glGetInfoLogARB;
  var _emscripten_glCompileShader=env._emscripten_glCompileShader;
  var _emscripten_glEnable=env._emscripten_glEnable;
  var _glUniform4fv=env._glUniform4fv;
  var _glGenTextures=env._glGenTextures;
  var _emscripten_glSampleCoverage=env._emscripten_glSampleCoverage;
  var _emscripten_glDepthRangef=env._emscripten_glDepthRangef;
  var _sinf=env._sinf;
  var __exit=env.__exit;
  var _emscripten_glLineWidth=env._emscripten_glLineWidth;
  var _emscripten_glStencilOp=env._emscripten_glStencilOp;
  var _glPixelStorei=env._glPixelStorei;
  var _emscripten_glColorMask=env._emscripten_glColorMask;
  var _emscripten_glLinkProgram=env._emscripten_glLinkProgram;
  var _emscripten_glBlendEquation=env._emscripten_glBlendEquation;
  var _emscripten_glIsTexture=env._emscripten_glIsTexture;
  var _alDeleteBuffers=env._alDeleteBuffers;
  var _emscripten_glGetProgramiv=env._emscripten_glGetProgramiv;
  var _emscripten_glVertexAttrib1fv=env._emscripten_glVertexAttrib1fv;
  var _pread=env._pread;
  var _emscripten_glBindTexture=env._emscripten_glBindTexture;
  var _mkport=env._mkport;
  var _glfwGetCursorPos=env._glfwGetCursorPos;
  var _emscripten_glActiveTexture=env._emscripten_glActiveTexture;
  var _emscripten_glGenRenderbuffers=env._emscripten_glGenRenderbuffers;
  var _emscripten_glVertexAttrib4fv=env._emscripten_glVertexAttrib4fv;
  var _emscripten_glDeleteBuffers=env._emscripten_glDeleteBuffers;
  var _glLinkProgram=env._glLinkProgram;
  var _feof=env._feof;
  var _fflush=env._fflush;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _glfwSetMouseButtonCallback=env._glfwSetMouseButtonCallback;
  var _emscripten_glGetProgramInfoLog=env._emscripten_glGetProgramInfoLog;
  var _emscripten_glBindRenderbuffer=env._emscripten_glBindRenderbuffer;
  var _alGenSources=env._alGenSources;
  var _emscripten_glShaderSource=env._emscripten_glShaderSource;
  var _emscripten_glDeleteFramebuffers=env._emscripten_glDeleteFramebuffers;
  var _emscripten_glUniform4fv=env._emscripten_glUniform4fv;
  var _fgetc=env._fgetc;
  var _alcOpenDevice=env._alcOpenDevice;
  var _cosf=env._cosf;
  var _sqrt=env._sqrt;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _emscripten_glClearColor=env._emscripten_glClearColor;
  var _emscripten_glBufferData=env._emscripten_glBufferData;
  var _emscripten_glCreateProgram=env._emscripten_glCreateProgram;
  var _emscripten_glCopyTexSubImage2D=env._emscripten_glCopyTexSubImage2D;
  var _eglWaitClient=env._eglWaitClient;
  var _glTexParameteri=env._glTexParameteri;
  var _emscripten_glValidateProgram=env._emscripten_glValidateProgram;
  var __formatString=env.__formatString;
  var _fputs=env._fputs;
  var _emscripten_glGetFloatv=env._emscripten_glGetFloatv;
  var _emscripten_glDetachShader=env._emscripten_glDetachShader;
  var _glClearColor=env._glClearColor;
  var _emscripten_glEnableClientState=env._emscripten_glEnableClientState;
  var _glfwSetCursorEnterCallback=env._glfwSetCursorEnterCallback;
  var _emscripten_glCopyTexImage2D=env._emscripten_glCopyTexImage2D;
  var _emscripten_glTexImage2D=env._emscripten_glTexImage2D;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sndScream$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $sndScream$byval_copy = sp + 72|0;
 $0 = sp + 36|0;
 $1 = sp + 16|0;
 $2 = sp;
 $3 = sp + 8|0;
 _InitWindow(1280,720,224);
 _InitAudioDevice();
 _PlayMusicStream(256);
 _LoadSpriteFont($0,296);
 dest=48; src=$0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _LoadTexture($1,328);
 ;HEAP32[88>>2]=HEAP32[$1>>2]|0;HEAP32[88+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[88+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[88+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[88+16>>2]=HEAP32[$1+16>>2]|0;
 _LoadSound($2,360);
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = 112;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 _LoadSound($3,392);
 $14 = $3;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = 120;
 $21 = $20;
 HEAP32[$21>>2] = $16;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $19;
 _InitPlayer();
 HEAP32[128>>2] = 0;
 _InitLogoScreen();
 _emscripten_set_main_loop((1|0),0,1);
 _UnloadPlayer();
 dest=$sndScream$byval_copy; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadSpriteFont($sndScream$byval_copy);
 ;HEAP32[$sndScream$byval_copy>>2]=HEAP32[88>>2]|0;HEAP32[$sndScream$byval_copy+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$sndScream$byval_copy+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$sndScream$byval_copy+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$sndScream$byval_copy+16>>2]=HEAP32[88+16>>2]|0;
 _UnloadTexture($sndScream$byval_copy);
 ;HEAP32[$sndScream$byval_copy>>2]=HEAP32[112>>2]|0;HEAP32[$sndScream$byval_copy+4>>2]=HEAP32[112+4>>2]|0;
 _UnloadSound($sndScream$byval_copy);
 ;HEAP32[$sndScream$byval_copy>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy+4>>2]=HEAP32[120+4>>2]|0;
 _UnloadSound($sndScream$byval_copy);
 _CloseAudioDevice();
 _CloseWindow();
 STACKTOP = sp;return 0;
}
function _UpdateDrawFrame() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[16>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $3 = HEAP32[(216)>>2]|0;
   $4 = ($3|0)==(0);
   if (!($4)) {
    $5 = HEAP32[424>>2]|0;
    $6 = (($5) + 1)|0;
    HEAP32[424>>2] = $6;
    $7 = ($5|0)>(79);
    if ($7) {
     HEAP32[424>>2] = 0;
     HEAP32[(216)>>2] = 0;
     HEAP32[(212)>>2] = 4;
     _TransitionToScreen(2);
    }
   }
   $8 = HEAP32[128>>2]|0;
   do {
    switch ($8|0) {
    case 0:  {
     _UpdateLogoScreen();
     $9 = (_FinishLogoScreen()|0);
     $10 = ($9|0)==(0);
     if ($10) {
      break L1;
     }
     _ChangeToScreen(1);
     break L1;
     break;
    }
    case 1:  {
     _rlUpdateLogoScreen();
     $11 = (_rlFinishLogoScreen()|0);
     $12 = ($11|0)==(0);
     if ($12) {
      break L1;
     }
     _TransitionToScreen(2);
     break L1;
     break;
    }
    case 4:  {
     _UpdateAisle01Screen();
     $17 = (_FinishAisle01Screen()|0);
     $18 = ($17|0)==(1);
     if ($18) {
      _TransitionToScreen(6);
      break L1;
     }
     $19 = (_FinishAisle01Screen()|0);
     $20 = ($19|0)==(2);
     if ($20) {
      _TransitionToScreen(8);
      break L1;
     }
     $21 = (_FinishAisle01Screen()|0);
     $22 = ($21|0)==(3);
     if (!($22)) {
      break L1;
     }
     _TransitionToScreen(7);
     break L1;
     break;
    }
    case 6:  {
     _UpdateBathroomScreen();
     $23 = (_FinishBathroomScreen()|0);
     $24 = ($23|0)==(1);
     if (!($24)) {
      break L1;
     }
     _TransitionToScreen(4);
     break L1;
     break;
    }
    case 2:  {
     _UpdateTitleScreen();
     $13 = (_FinishTitleScreen()|0);
     $14 = ($13|0)==(1);
     if (!($14)) {
      break L1;
     }
     _TransitionToScreen(3);
     break L1;
     break;
    }
    case 3:  {
     _UpdateAtticScreen();
     $15 = (_FinishAtticScreen()|0);
     $16 = ($15|0)==(1);
     if (!($16)) {
      break L1;
     }
     _TransitionToScreen(4);
     break L1;
     break;
    }
    case 9:  {
     _UpdateArmoryScreen();
     $35 = (_FinishArmoryScreen()|0);
     $36 = ($35|0)==(1);
     if ($36) {
      _TransitionToScreen(10);
      break L1;
     }
     $37 = (_FinishArmoryScreen()|0);
     $38 = ($37|0)==(2);
     if (!($38)) {
      break L1;
     }
     _TransitionToScreen(8);
     break L1;
     break;
    }
    case 8:  {
     _UpdateKitchenScreen();
     $31 = (_FinishKitchenScreen()|0);
     $32 = ($31|0)==(1);
     if ($32) {
      _TransitionToScreen(9);
      break L1;
     }
     $33 = (_FinishKitchenScreen()|0);
     $34 = ($33|0)==(2);
     if (!($34)) {
      break L1;
     }
     _TransitionToScreen(5);
     break L1;
     break;
    }
    case 10:  {
     _UpdateEndingScreen();
     $39 = (_FinishEndingScreen()|0);
     $40 = ($39|0)==(0);
     if ($40) {
      break L1;
     }
     _TransitionToScreen(2);
     break L1;
     break;
    }
    case 5:  {
     _UpdateAisle02Screen();
     $29 = (_FinishAisle02Screen()|0);
     $30 = ($29|0)==(1);
     if (!($30)) {
      break L1;
     }
     _TransitionToScreen(8);
     break L1;
     break;
    }
    case 7:  {
     _UpdateLivingroomScreen();
     $25 = (_FinishLivingroomScreen()|0);
     $26 = ($25|0)==(1);
     if ($26) {
      _TransitionToScreen(4);
      break L1;
     }
     $27 = (_FinishLivingroomScreen()|0);
     $28 = ($27|0)==(2);
     if (!($28)) {
      break L1;
     }
     _TransitionToScreen(5);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  } else {
   _UpdateTransition();
  }
 } while(0);
 _UpdateMusicStream();
 _BeginDrawing();
 HEAP8[$0>>0] = -11;
 $41 = ((($0)) + 1|0);
 HEAP8[$41>>0] = -11;
 $42 = ((($0)) + 2|0);
 HEAP8[$42>>0] = -11;
 $43 = ((($0)) + 3|0);
 HEAP8[$43>>0] = -1;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$0+3>>0]|0;
 _ClearBackground($$byval_copy);
 $44 = HEAP32[128>>2]|0;
 do {
  switch ($44|0) {
  case 3:  {
   _DrawAtticScreen();
   break;
  }
  case 5:  {
   _DrawAisle02Screen();
   break;
  }
  case 7:  {
   _DrawLivingroomScreen();
   break;
  }
  case 0:  {
   _DrawLogoScreen();
   break;
  }
  case 9:  {
   _DrawArmoryScreen();
   break;
  }
  case 2:  {
   _DrawTitleScreen();
   break;
  }
  case 1:  {
   _rlDrawLogoScreen();
   break;
  }
  case 6:  {
   _DrawBathroomScreen();
   break;
  }
  case 10:  {
   _DrawEndingScreen();
   break;
  }
  case 4:  {
   _DrawAisle01Screen();
   break;
  }
  case 8:  {
   _DrawKitchenScreen();
   break;
  }
  default: {
  }
  }
 } while(0);
 $45 = HEAP32[16>>2]|0;
 $46 = ($45|0)==(0);
 if ($46) {
  _EndDrawing();
  STACKTOP = sp;return;
 }
 _DrawTransition();
 _EndDrawing();
 STACKTOP = sp;return;
}
function _TransitionToScreen($screen) {
 $screen = $screen|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[16>>2] = 1;
 $0 = HEAP32[128>>2]|0;
 HEAP32[32>>2] = $0;
 HEAP32[40>>2] = $screen;
 return;
}
function _ChangeToScreen($screen) {
 $screen = $screen|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[128>>2]|0;
 do {
  switch ($0|0) {
  case 9:  {
   _UnloadArmoryScreen();
   break;
  }
  case 5:  {
   _UnloadAisle02Screen();
   break;
  }
  case 7:  {
   _UnloadLivingroomScreen();
   break;
  }
  case 6:  {
   _UnloadBathroomScreen();
   break;
  }
  case 10:  {
   break;
  }
  case 8:  {
   _UnloadKitchenScreen();
   break;
  }
  case 3:  {
   _UnloadAtticScreen();
   break;
  }
  case 2:  {
   _UnloadTitleScreen();
   break;
  }
  case 0:  {
   _UnloadLogoScreen();
   break;
  }
  case 4:  {
   _UnloadAisle01Screen();
   break;
  }
  case 1:  {
   break;
  }
  default: {
  }
  }
 } while(0);
 do {
  switch ($screen|0) {
  case 6:  {
   _InitBathroomScreen();
   break;
  }
  case 10:  {
   _InitEndingScreen();
   break;
  }
  case 4:  {
   _InitAisle01Screen();
   break;
  }
  case 0:  {
   _InitLogoScreen();
   break;
  }
  case 1:  {
   _rlInitLogoScreen();
   break;
  }
  case 7:  {
   _InitLivingroomScreen();
   break;
  }
  case 9:  {
   _InitArmoryScreen();
   break;
  }
  case 2:  {
   _InitTitleScreen();
   break;
  }
  case 3:  {
   _InitAtticScreen();
   break;
  }
  case 5:  {
   _InitAisle02Screen();
   break;
  }
  case 8:  {
   _InitKitchenScreen();
   break;
  }
  default: {
  }
  }
 } while(0);
 HEAP32[128>>2] = $screen;
 return;
}
function _UpdateTransition() {
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[24>>2]|0;
 $1 = ($0|0)==(0);
 $2 = +HEAPF32[8>>2];
 if (!($1)) {
  $7 = $2 + -0.05000000074505806;
  HEAPF32[8>>2] = $7;
  $8 = !($7 <= 0.0);
  if ($8) {
   return;
  }
  HEAPF32[8>>2] = 0.0;
  HEAP32[24>>2] = 0;
  HEAP32[16>>2] = 0;
  HEAP32[32>>2] = -1;
  HEAP32[40>>2] = -1;
  return;
 }
 $3 = $2 + 0.05000000074505806;
 HEAPF32[8>>2] = $3;
 $4 = !($3 >= 1.0);
 if ($4) {
  return;
 }
 HEAPF32[8>>2] = 1.0;
 $5 = HEAP32[32>>2]|0;
 do {
  switch ($5|0) {
  case 9:  {
   _UnloadArmoryScreen();
   break;
  }
  case 0:  {
   _UnloadLogoScreen();
   break;
  }
  case 10:  {
   break;
  }
  case 3:  {
   _UnloadAtticScreen();
   break;
  }
  case 4:  {
   _UnloadAisle01Screen();
   break;
  }
  case 8:  {
   _UnloadKitchenScreen();
   break;
  }
  case 5:  {
   _UnloadAisle02Screen();
   break;
  }
  case 6:  {
   _UnloadBathroomScreen();
   break;
  }
  case 7:  {
   _UnloadLivingroomScreen();
   break;
  }
  case 1:  {
   break;
  }
  case 2:  {
   _UnloadTitleScreen();
   break;
  }
  default: {
  }
  }
 } while(0);
 $6 = HEAP32[40>>2]|0;
 do {
  switch ($6|0) {
  case 3:  {
   _InitAtticScreen();
   HEAP32[128>>2] = 3;
   break;
  }
  case 8:  {
   _InitKitchenScreen();
   HEAP32[128>>2] = 8;
   break;
  }
  case 0:  {
   _InitLogoScreen();
   HEAP32[128>>2] = 0;
   break;
  }
  case 10:  {
   _InitEndingScreen();
   HEAP32[128>>2] = 10;
   break;
  }
  case 4:  {
   _InitAisle01Screen();
   HEAP32[128>>2] = 4;
   break;
  }
  case 2:  {
   _InitTitleScreen();
   HEAP32[128>>2] = 2;
   break;
  }
  case 6:  {
   _InitBathroomScreen();
   HEAP32[128>>2] = 6;
   break;
  }
  case 5:  {
   _InitAisle02Screen();
   HEAP32[128>>2] = 5;
   break;
  }
  case 7:  {
   _InitLivingroomScreen();
   HEAP32[128>>2] = 7;
   break;
  }
  case 9:  {
   _InitArmoryScreen();
   HEAP32[128>>2] = 9;
   break;
  }
  case 1:  {
   _rlInitLogoScreen();
   HEAP32[128>>2] = 1;
   break;
  }
  default: {
  }
  }
 } while(0);
 HEAP32[24>>2] = 1;
 return;
}
function _DrawTransition() {
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 8|0;
 $0 = sp;
 $1 = sp + 4|0;
 $2 = (_GetScreenWidth()|0);
 $3 = (_GetScreenHeight()|0);
 HEAP8[$1>>0] = 0;
 $4 = ((($1)) + 1|0);
 HEAP8[$4>>0] = 0;
 $5 = ((($1)) + 2|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($1)) + 3|0);
 HEAP8[$6>>0] = -1;
 $7 = +HEAPF32[8>>2];
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$1+3>>0]|0;
 _Fade($0,$$byval_copy1,$7);
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawRectangle(0,0,$2,$3,$$byval_copy1);
 STACKTOP = sp;return;
}
function _InitLogoScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp;
 HEAP32[432>>2] = 0;
 _LoadTexture($0,440);
 ;HEAP32[480>>2]=HEAP32[$0>>2]|0;HEAP32[480+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[480+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[480+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[480+16>>2]=HEAP32[$0+16>>2]|0;
 STACKTOP = sp;return;
}
function _UpdateLogoScreen() {
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[504>>2]|0;
 if ((($0|0) == 2)) {
  $7 = +HEAPF32[512>>2];
  $8 = $7 + -0.039999999105930328;
  HEAPF32[512>>2] = $8;
  $9 = !($8 <= 0.0);
  if ($9) {
   return;
  }
  HEAP32[520>>2] = 0;
  HEAP32[504>>2] = 3;
  return;
 } else if ((($0|0) == 3)) {
  HEAP32[432>>2] = 1;
  return;
 } else if ((($0|0) == 1)) {
  $4 = HEAP32[520>>2]|0;
  $5 = (($4) + 1)|0;
  HEAP32[520>>2] = $5;
  $6 = ($4|0)>(179);
  if (!($6)) {
   return;
  }
  HEAP32[504>>2] = 2;
  return;
 } else if ((($0|0) == 0)) {
  $1 = +HEAPF32[512>>2];
  $2 = $1 + 0.039999999105930328;
  HEAPF32[512>>2] = $2;
  $3 = !($2 >= 1.0);
  if ($3) {
   return;
  }
  HEAP32[504>>2] = 1;
  return;
 } else {
  return;
 }
}
function _DrawLogoScreen() {
 var $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $logo$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy3 = sp + 40|0;
 $logo$byval_copy = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 32|0;
 $4 = sp + 36|0;
 $5 = (_GetScreenWidth()|0);
 $6 = (_GetScreenHeight()|0);
 HEAP8[$0>>0] = -11;
 $7 = ((($0)) + 1|0);
 HEAP8[$7>>0] = -11;
 $8 = ((($0)) + 2|0);
 HEAP8[$8>>0] = -11;
 $9 = ((($0)) + 3|0);
 HEAP8[$9>>0] = -1;
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawRectangle(0,0,$5,$6,$$byval_copy3);
 $10 = (_GetScreenWidth()|0);
 $11 = (($10|0) / 2)&-1;
 $12 = HEAP32[(484)>>2]|0;
 $13 = (($12|0) / 2)&-1;
 $14 = (($11) - ($13))|0;
 HEAP32[$2>>2] = -1;
 $15 = +HEAPF32[512>>2];
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$2+3>>0]|0;
 _Fade($1,$$byval_copy3,$15);
 ;HEAP32[$logo$byval_copy>>2]=HEAP32[480>>2]|0;HEAP32[$logo$byval_copy+4>>2]=HEAP32[480+4>>2]|0;HEAP32[$logo$byval_copy+8>>2]=HEAP32[480+8>>2]|0;HEAP32[$logo$byval_copy+12>>2]=HEAP32[480+12>>2]|0;HEAP32[$logo$byval_copy+16>>2]=HEAP32[480+16>>2]|0;
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$1+3>>0]|0;
 _DrawTexture($logo$byval_copy,$14,130,$$byval_copy3);
 HEAP8[$4>>0] = 80;
 $16 = ((($4)) + 1|0);
 HEAP8[$16>>0] = 80;
 $17 = ((($4)) + 2|0);
 HEAP8[$17>>0] = 80;
 $18 = ((($4)) + 3|0);
 HEAP8[$18>>0] = -1;
 $19 = +HEAPF32[512>>2];
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$4+3>>0]|0;
 _Fade($3,$$byval_copy3,$19);
 ;HEAP8[$$byval_copy3>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$3+3>>0]|0;
 _DrawText(528,340,450,100,$$byval_copy3);
 STACKTOP = sp;return;
}
function _UnloadLogoScreen() {
 var $logo$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $logo$byval_copy = sp;
 ;HEAP32[$logo$byval_copy>>2]=HEAP32[480>>2]|0;HEAP32[$logo$byval_copy+4>>2]=HEAP32[480+4>>2]|0;HEAP32[$logo$byval_copy+8>>2]=HEAP32[480+8>>2]|0;HEAP32[$logo$byval_copy+12>>2]=HEAP32[480+12>>2]|0;HEAP32[$logo$byval_copy+16>>2]=HEAP32[480+16>>2]|0;
 _UnloadTexture($logo$byval_copy);
 STACKTOP = sp;return;
}
function _FinishLogoScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[432>>2]|0;
 return ($0|0);
}
function _rlInitLogoScreen() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[544>>2] = 0;
 $0 = (_GetScreenWidth()|0);
 $1 = (($0|0) / 2)&-1;
 $2 = (($1) + -128)|0;
 HEAP32[552>>2] = $2;
 $3 = (_GetScreenHeight()|0);
 $4 = (($3|0) / 2)&-1;
 $5 = (($4) + -128)|0;
 HEAP32[560>>2] = $5;
 $6 = 568;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 return;
}
function _rlUpdateLogoScreen() {
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[576>>2]|0;
 switch ($0|0) {
 case 1:  {
  $4 = HEAP32[592>>2]|0;
  $5 = (($4) + 8)|0;
  HEAP32[592>>2] = $5;
  $6 = HEAP32[600>>2]|0;
  $7 = (($6) + 8)|0;
  HEAP32[600>>2] = $7;
  $8 = ($5|0)==(256);
  if (!($8)) {
   return;
  }
  HEAP32[576>>2] = 2;
  return;
  break;
 }
 case 4:  {
  $22 = HEAP32[584>>2]|0;
  $23 = (($22) + 1)|0;
  HEAP32[584>>2] = $23;
  $24 = ($22|0)>(99);
  if (!($24)) {
   return;
  }
  $25 = +HEAPF32[632>>2];
  $26 = $25 + -0.019999999552965164;
  HEAPF32[632>>2] = $26;
  $27 = !($26 <= 0.0);
  if ($27) {
   return;
  }
  HEAPF32[632>>2] = 0.0;
  HEAP32[544>>2] = 1;
  return;
  break;
 }
 case 2:  {
  $9 = HEAP32[608>>2]|0;
  $10 = (($9) + 8)|0;
  HEAP32[608>>2] = $10;
  $11 = HEAP32[616>>2]|0;
  $12 = (($11) + 8)|0;
  HEAP32[616>>2] = $12;
  $13 = ($10|0)==(256);
  if (!($13)) {
   return;
  }
  HEAP32[576>>2] = 3;
  return;
  break;
 }
 case 0:  {
  $1 = HEAP32[584>>2]|0;
  $2 = (($1) + 1)|0;
  HEAP32[584>>2] = $2;
  $3 = ($2|0)==(80);
  if (!($3)) {
   return;
  }
  HEAP32[576>>2] = 1;
  HEAP32[584>>2] = 0;
  return;
  break;
 }
 case 3:  {
  $14 = HEAP32[584>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[584>>2] = $15;
  $$off = (($14) + 10)|0;
  $16 = ($$off>>>0)>(18);
  $17 = HEAP32[624>>2]|0;
  if ($16) {
   $18 = (($17) + 1)|0;
   HEAP32[624>>2] = $18;
   HEAP32[584>>2] = 0;
   $19 = $18;
  } else {
   $19 = $17;
  }
  switch ($19|0) {
  case 3:  {
   HEAP8[(570)>>0] = 121;
   break;
  }
  case 1:  {
   HEAP8[568>>0] = 114;
   break;
  }
  case 5:  {
   HEAP8[(572)>>0] = 105;
   break;
  }
  case 6:  {
   HEAP8[(573)>>0] = 98;
   break;
  }
  case 4:  {
   HEAP8[(571)>>0] = 108;
   break;
  }
  case 2:  {
   HEAP8[(569)>>0] = 97;
   break;
  }
  default: {
  }
  }
  $20 = HEAP32[624>>2]|0;
  $21 = ($20|0)>(9);
  if (!($21)) {
   return;
  }
  HEAP32[576>>2] = 4;
  HEAP32[584>>2] = 0;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _rlDrawLogoScreen() {
 var $$byval_copy32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy32 = sp + 132|0;
 $0 = sp + 128|0;
 $1 = sp + 124|0;
 $2 = sp + 120|0;
 $3 = sp + 116|0;
 $4 = sp + 112|0;
 $5 = sp + 108|0;
 $6 = sp + 104|0;
 $7 = sp + 100|0;
 $8 = sp + 96|0;
 $9 = sp + 92|0;
 $10 = sp + 88|0;
 $11 = sp + 84|0;
 $12 = sp + 80|0;
 $13 = sp + 76|0;
 $14 = sp + 72|0;
 $15 = sp + 68|0;
 $16 = sp + 64|0;
 $17 = sp + 24|0;
 $18 = sp;
 $19 = sp + 4|0;
 $20 = sp + 8|0;
 $21 = sp + 12|0;
 $22 = sp + 16|0;
 $23 = sp + 20|0;
 $24 = sp + 28|0;
 $25 = sp + 32|0;
 $26 = sp + 36|0;
 $27 = sp + 40|0;
 $28 = sp + 44|0;
 $29 = sp + 48|0;
 $30 = sp + 52|0;
 $31 = sp + 56|0;
 $32 = sp + 60|0;
 $33 = HEAP32[576>>2]|0;
 switch ($33|0) {
 case 4:  {
  $135 = HEAP32[552>>2]|0;
  $136 = HEAP32[560>>2]|0;
  $137 = HEAP32[592>>2]|0;
  HEAP8[$20>>0] = 0;
  $138 = ((($20)) + 1|0);
  HEAP8[$138>>0] = 0;
  $139 = ((($20)) + 2|0);
  HEAP8[$139>>0] = 0;
  $140 = ((($20)) + 3|0);
  HEAP8[$140>>0] = -1;
  $141 = +HEAPF32[632>>2];
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$20>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$20+3>>0]|0;
  _Fade($19,$$byval_copy32,$141);
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$19>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$19+3>>0]|0;
  _DrawRectangle($135,$136,$137,16,$$byval_copy32);
  $142 = HEAP32[552>>2]|0;
  $143 = HEAP32[560>>2]|0;
  $144 = (($143) + 16)|0;
  $145 = HEAP32[600>>2]|0;
  $146 = (($145) + -32)|0;
  HEAP8[$22>>0] = 0;
  $147 = ((($22)) + 1|0);
  HEAP8[$147>>0] = 0;
  $148 = ((($22)) + 2|0);
  HEAP8[$148>>0] = 0;
  $149 = ((($22)) + 3|0);
  HEAP8[$149>>0] = -1;
  $150 = +HEAPF32[632>>2];
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$22>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$22+3>>0]|0;
  _Fade($21,$$byval_copy32,$150);
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$21>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$21+3>>0]|0;
  _DrawRectangle($142,$144,16,$146,$$byval_copy32);
  $151 = HEAP32[552>>2]|0;
  $152 = (($151) + 240)|0;
  $153 = HEAP32[560>>2]|0;
  $154 = (($153) + 16)|0;
  $155 = HEAP32[616>>2]|0;
  $156 = (($155) + -32)|0;
  HEAP8[$24>>0] = 0;
  $157 = ((($24)) + 1|0);
  HEAP8[$157>>0] = 0;
  $158 = ((($24)) + 2|0);
  HEAP8[$158>>0] = 0;
  $159 = ((($24)) + 3|0);
  HEAP8[$159>>0] = -1;
  $160 = +HEAPF32[632>>2];
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$24>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$24+3>>0]|0;
  _Fade($23,$$byval_copy32,$160);
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$23>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$23+3>>0]|0;
  _DrawRectangle($152,$154,16,$156,$$byval_copy32);
  $161 = HEAP32[552>>2]|0;
  $162 = HEAP32[560>>2]|0;
  $163 = (($162) + 240)|0;
  $164 = HEAP32[608>>2]|0;
  HEAP8[$26>>0] = 0;
  $165 = ((($26)) + 1|0);
  HEAP8[$165>>0] = 0;
  $166 = ((($26)) + 2|0);
  HEAP8[$166>>0] = 0;
  $167 = ((($26)) + 3|0);
  HEAP8[$167>>0] = -1;
  $168 = +HEAPF32[632>>2];
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$26>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$26+3>>0]|0;
  _Fade($25,$$byval_copy32,$168);
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$25>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$25+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$25+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$25+3>>0]|0;
  _DrawRectangle($161,$163,$164,16,$$byval_copy32);
  $169 = (_GetScreenWidth()|0);
  $170 = (($169|0) / 2)&-1;
  $171 = (($170) + -112)|0;
  $172 = (_GetScreenHeight()|0);
  $173 = (($172|0) / 2)&-1;
  $174 = (($173) + -112)|0;
  HEAP8[$28>>0] = -11;
  $175 = ((($28)) + 1|0);
  HEAP8[$175>>0] = -11;
  $176 = ((($28)) + 2|0);
  HEAP8[$176>>0] = -11;
  $177 = ((($28)) + 3|0);
  HEAP8[$177>>0] = -1;
  $178 = +HEAPF32[632>>2];
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$28>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$28+3>>0]|0;
  _Fade($27,$$byval_copy32,$178);
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$27>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$27+3>>0]|0;
  _DrawRectangle($171,$174,224,224,$$byval_copy32);
  $179 = (_GetScreenWidth()|0);
  $180 = (($179|0) / 2)&-1;
  $181 = (($180) + -44)|0;
  $182 = (_GetScreenHeight()|0);
  $183 = (($182|0) / 2)&-1;
  $184 = (($183) + 48)|0;
  HEAP8[$30>>0] = 0;
  $185 = ((($30)) + 1|0);
  HEAP8[$185>>0] = 0;
  $186 = ((($30)) + 2|0);
  HEAP8[$186>>0] = 0;
  $187 = ((($30)) + 3|0);
  HEAP8[$187>>0] = -1;
  $188 = +HEAPF32[632>>2];
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$30>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$30+3>>0]|0;
  _Fade($29,$$byval_copy32,$188);
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$29>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$29+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$29+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$29+3>>0]|0;
  _DrawText(568,$181,$184,50,$$byval_copy32);
  $189 = HEAP32[584>>2]|0;
  $190 = ($189|0)>(20);
  if (!($190)) {
   STACKTOP = sp;return;
  }
  $191 = HEAP32[552>>2]|0;
  $192 = HEAP32[560>>2]|0;
  $193 = (($192) + -27)|0;
  HEAP8[$32>>0] = 80;
  $194 = ((($32)) + 1|0);
  HEAP8[$194>>0] = 80;
  $195 = ((($32)) + 2|0);
  HEAP8[$195>>0] = 80;
  $196 = ((($32)) + 3|0);
  HEAP8[$196>>0] = -1;
  $197 = +HEAPF32[632>>2];
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$32>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$32+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$32+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$32+3>>0]|0;
  _Fade($31,$$byval_copy32,$197);
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$31>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$31+3>>0]|0;
  _DrawText(640,$191,$193,20,$$byval_copy32);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $34 = HEAP32[584>>2]|0;
  $35 = (($34|0) / 10)&-1;
  $36 = $35 & 1;
  $37 = ($36|0)==(0);
  if ($37) {
   STACKTOP = sp;return;
  }
  $38 = HEAP32[552>>2]|0;
  $39 = HEAP32[560>>2]|0;
  HEAP8[$0>>0] = 0;
  $40 = ((($0)) + 1|0);
  HEAP8[$40>>0] = 0;
  $41 = ((($0)) + 2|0);
  HEAP8[$41>>0] = 0;
  $42 = ((($0)) + 3|0);
  HEAP8[$42>>0] = -1;
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$0+3>>0]|0;
  _DrawRectangle($38,$39,16,16,$$byval_copy32);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $55 = HEAP32[552>>2]|0;
  $56 = HEAP32[560>>2]|0;
  $57 = HEAP32[592>>2]|0;
  HEAP8[$3>>0] = 0;
  $58 = ((($3)) + 1|0);
  HEAP8[$58>>0] = 0;
  $59 = ((($3)) + 2|0);
  HEAP8[$59>>0] = 0;
  $60 = ((($3)) + 3|0);
  HEAP8[$60>>0] = -1;
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$3+3>>0]|0;
  _DrawRectangle($55,$56,$57,16,$$byval_copy32);
  $61 = HEAP32[552>>2]|0;
  $62 = HEAP32[560>>2]|0;
  $63 = HEAP32[600>>2]|0;
  HEAP8[$4>>0] = 0;
  $64 = ((($4)) + 1|0);
  HEAP8[$64>>0] = 0;
  $65 = ((($4)) + 2|0);
  HEAP8[$65>>0] = 0;
  $66 = ((($4)) + 3|0);
  HEAP8[$66>>0] = -1;
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$4+3>>0]|0;
  _DrawRectangle($61,$62,16,$63,$$byval_copy32);
  $67 = HEAP32[552>>2]|0;
  $68 = (($67) + 240)|0;
  $69 = HEAP32[560>>2]|0;
  $70 = HEAP32[616>>2]|0;
  HEAP8[$5>>0] = 0;
  $71 = ((($5)) + 1|0);
  HEAP8[$71>>0] = 0;
  $72 = ((($5)) + 2|0);
  HEAP8[$72>>0] = 0;
  $73 = ((($5)) + 3|0);
  HEAP8[$73>>0] = -1;
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$5+3>>0]|0;
  _DrawRectangle($68,$69,16,$70,$$byval_copy32);
  $74 = HEAP32[552>>2]|0;
  $75 = HEAP32[560>>2]|0;
  $76 = (($75) + 240)|0;
  $77 = HEAP32[608>>2]|0;
  HEAP8[$6>>0] = 0;
  $78 = ((($6)) + 1|0);
  HEAP8[$78>>0] = 0;
  $79 = ((($6)) + 2|0);
  HEAP8[$79>>0] = 0;
  $80 = ((($6)) + 3|0);
  HEAP8[$80>>0] = -1;
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$6+3>>0]|0;
  _DrawRectangle($74,$76,$77,16,$$byval_copy32);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $81 = HEAP32[552>>2]|0;
  $82 = HEAP32[560>>2]|0;
  $83 = HEAP32[592>>2]|0;
  HEAP8[$8>>0] = 0;
  $84 = ((($8)) + 1|0);
  HEAP8[$84>>0] = 0;
  $85 = ((($8)) + 2|0);
  HEAP8[$85>>0] = 0;
  $86 = ((($8)) + 3|0);
  HEAP8[$86>>0] = -1;
  $87 = +HEAPF32[632>>2];
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$8+3>>0]|0;
  _Fade($7,$$byval_copy32,$87);
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$7+3>>0]|0;
  _DrawRectangle($81,$82,$83,16,$$byval_copy32);
  $88 = HEAP32[552>>2]|0;
  $89 = HEAP32[560>>2]|0;
  $90 = (($89) + 16)|0;
  $91 = HEAP32[600>>2]|0;
  $92 = (($91) + -32)|0;
  HEAP8[$10>>0] = 0;
  $93 = ((($10)) + 1|0);
  HEAP8[$93>>0] = 0;
  $94 = ((($10)) + 2|0);
  HEAP8[$94>>0] = 0;
  $95 = ((($10)) + 3|0);
  HEAP8[$95>>0] = -1;
  $96 = +HEAPF32[632>>2];
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$10+3>>0]|0;
  _Fade($9,$$byval_copy32,$96);
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$9>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$9+3>>0]|0;
  _DrawRectangle($88,$90,16,$92,$$byval_copy32);
  $97 = HEAP32[552>>2]|0;
  $98 = (($97) + 240)|0;
  $99 = HEAP32[560>>2]|0;
  $100 = (($99) + 16)|0;
  $101 = HEAP32[616>>2]|0;
  $102 = (($101) + -32)|0;
  HEAP8[$12>>0] = 0;
  $103 = ((($12)) + 1|0);
  HEAP8[$103>>0] = 0;
  $104 = ((($12)) + 2|0);
  HEAP8[$104>>0] = 0;
  $105 = ((($12)) + 3|0);
  HEAP8[$105>>0] = -1;
  $106 = +HEAPF32[632>>2];
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$12>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$12+3>>0]|0;
  _Fade($11,$$byval_copy32,$106);
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$11>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$11+3>>0]|0;
  _DrawRectangle($98,$100,16,$102,$$byval_copy32);
  $107 = HEAP32[552>>2]|0;
  $108 = HEAP32[560>>2]|0;
  $109 = (($108) + 240)|0;
  $110 = HEAP32[608>>2]|0;
  HEAP8[$14>>0] = 0;
  $111 = ((($14)) + 1|0);
  HEAP8[$111>>0] = 0;
  $112 = ((($14)) + 2|0);
  HEAP8[$112>>0] = 0;
  $113 = ((($14)) + 3|0);
  HEAP8[$113>>0] = -1;
  $114 = +HEAPF32[632>>2];
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$14>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$14+3>>0]|0;
  _Fade($13,$$byval_copy32,$114);
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$13>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$13+3>>0]|0;
  _DrawRectangle($107,$109,$110,16,$$byval_copy32);
  $115 = (_GetScreenWidth()|0);
  $116 = (($115|0) / 2)&-1;
  $117 = (($116) + -112)|0;
  $118 = (_GetScreenHeight()|0);
  $119 = (($118|0) / 2)&-1;
  $120 = (($119) + -112)|0;
  HEAP8[$16>>0] = -11;
  $121 = ((($16)) + 1|0);
  HEAP8[$121>>0] = -11;
  $122 = ((($16)) + 2|0);
  HEAP8[$122>>0] = -11;
  $123 = ((($16)) + 3|0);
  HEAP8[$123>>0] = -1;
  $124 = +HEAPF32[632>>2];
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$16>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$16+3>>0]|0;
  _Fade($15,$$byval_copy32,$124);
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$15+3>>0]|0;
  _DrawRectangle($117,$120,224,224,$$byval_copy32);
  $125 = (_GetScreenWidth()|0);
  $126 = (($125|0) / 2)&-1;
  $127 = (($126) + -44)|0;
  $128 = (_GetScreenHeight()|0);
  $129 = (($128|0) / 2)&-1;
  $130 = (($129) + 48)|0;
  HEAP8[$18>>0] = 0;
  $131 = ((($18)) + 1|0);
  HEAP8[$131>>0] = 0;
  $132 = ((($18)) + 2|0);
  HEAP8[$132>>0] = 0;
  $133 = ((($18)) + 3|0);
  HEAP8[$133>>0] = -1;
  $134 = +HEAPF32[632>>2];
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$18>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$18+3>>0]|0;
  _Fade($17,$$byval_copy32,$134);
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$17+3>>0]|0;
  _DrawText(568,$127,$130,50,$$byval_copy32);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $43 = HEAP32[552>>2]|0;
  $44 = HEAP32[560>>2]|0;
  $45 = HEAP32[592>>2]|0;
  HEAP8[$1>>0] = 0;
  $46 = ((($1)) + 1|0);
  HEAP8[$46>>0] = 0;
  $47 = ((($1)) + 2|0);
  HEAP8[$47>>0] = 0;
  $48 = ((($1)) + 3|0);
  HEAP8[$48>>0] = -1;
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$1+3>>0]|0;
  _DrawRectangle($43,$44,$45,16,$$byval_copy32);
  $49 = HEAP32[552>>2]|0;
  $50 = HEAP32[560>>2]|0;
  $51 = HEAP32[600>>2]|0;
  HEAP8[$2>>0] = 0;
  $52 = ((($2)) + 1|0);
  HEAP8[$52>>0] = 0;
  $53 = ((($2)) + 2|0);
  HEAP8[$53>>0] = 0;
  $54 = ((($2)) + 3|0);
  HEAP8[$54>>0] = -1;
  ;HEAP8[$$byval_copy32>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy32+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy32+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy32+3>>0]=HEAP8[$2+3>>0]|0;
  _DrawRectangle($49,$50,16,$51,$$byval_copy32);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _rlUnloadLogoScreen() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _rlFinishLogoScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[544>>2]|0;
 return ($0|0);
}
function _InitTitleScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp;
 HEAP32[656>>2] = 0;
 HEAP32[664>>2] = 0;
 _LoadTexture($0,672);
 ;HEAP32[704>>2]=HEAP32[$0>>2]|0;HEAP32[704+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[704+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[704+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[704+16>>2]=HEAP32[$0+16>>2]|0;
 STACKTOP = sp;return;
}
function _UpdateTitleScreen() {
 var $$inv = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[656>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[656>>2] = $1;
 $2 = +HEAPF32[728>>2];
 $3 = $2 + 0.004999999888241291;
 $$inv = $3 >= 1.0;
 $storemerge = $$inv ? 1.0 : $3;
 HEAPF32[728>>2] = $storemerge;
 $4 = (_IsKeyPressed(257)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_IsMouseButtonPressed(0)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   return;
  }
 }
 HEAP32[664>>2] = 1;
 return;
}
function _DrawTitleScreen() {
 var $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $title$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy2 = sp + 36|0;
 $title$byval_copy = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 32|0;
 $4 = (_GetScreenWidth()|0);
 $5 = (_GetScreenHeight()|0);
 HEAP8[$0>>0] = 80;
 $6 = ((($0)) + 1|0);
 HEAP8[$6>>0] = 80;
 $7 = ((($0)) + 2|0);
 HEAP8[$7>>0] = 80;
 $8 = ((($0)) + 3|0);
 HEAP8[$8>>0] = -1;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawRectangle(0,0,$4,$5,$$byval_copy2);
 $9 = (_GetScreenWidth()|0);
 $10 = (($9|0) / 2)&-1;
 $11 = HEAP32[(708)>>2]|0;
 $12 = (($11|0) / 2)&-1;
 $13 = (($10) - ($12))|0;
 HEAP32[$2>>2] = -1;
 $14 = +HEAPF32[728>>2];
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$2+3>>0]|0;
 _Fade($1,$$byval_copy2,$14);
 ;HEAP32[$title$byval_copy>>2]=HEAP32[704>>2]|0;HEAP32[$title$byval_copy+4>>2]=HEAP32[704+4>>2]|0;HEAP32[$title$byval_copy+8>>2]=HEAP32[704+8>>2]|0;HEAP32[$title$byval_copy+12>>2]=HEAP32[704+12>>2]|0;HEAP32[$title$byval_copy+16>>2]=HEAP32[704+16>>2]|0;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$1+3>>0]|0;
 _DrawTexture($title$byval_copy,$13,20,$$byval_copy2);
 $15 = HEAP32[656>>2]|0;
 $16 = ($15|0)>(180);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = (($15|0) / 40)&-1;
 $18 = $17 & 1;
 $19 = ($18|0)==(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 HEAP8[$3>>0] = 0;
 $20 = ((($3)) + 1|0);
 HEAP8[$20>>0] = 0;
 $21 = ((($3)) + 2|0);
 HEAP8[$21>>0] = 0;
 $22 = ((($3)) + 3|0);
 HEAP8[$22>>0] = -1;
 ;HEAP8[$$byval_copy2>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$3+3>>0]|0;
 _DrawText(736,380,545,40,$$byval_copy2);
 STACKTOP = sp;return;
}
function _UnloadTitleScreen() {
 var $title$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $title$byval_copy = sp;
 ;HEAP32[$title$byval_copy>>2]=HEAP32[704>>2]|0;HEAP32[$title$byval_copy+4>>2]=HEAP32[704+4>>2]|0;HEAP32[$title$byval_copy+8>>2]=HEAP32[704+8>>2]|0;HEAP32[$title$byval_copy+12>>2]=HEAP32[704+12>>2]|0;HEAP32[$title$byval_copy+16>>2]=HEAP32[704+16>>2]|0;
 _UnloadTexture($title$byval_copy);
 STACKTOP = sp;return;
}
function _FinishTitleScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[664>>2]|0;
 return ($0|0);
}
function _InitAtticScreen() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 40|0;
 $1 = sp;
 $2 = sp + 20|0;
 _ResetPlayer();
 HEAP32[760>>2] = 0;
 HEAP32[768>>2] = -1;
 HEAP32[776>>2] = 0;
 HEAP32[784>>2] = 0;
 HEAP32[792>>2] = 0;
 _memset((800|0),0,256)|0;
 HEAP32[1056>>2] = 0;
 HEAP32[1064>>2] = 0;
 _LoadTexture($0,1072);
 ;HEAP32[1112>>2]=HEAP32[$0>>2]|0;HEAP32[1112+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[1112+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[1112+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[1112+16>>2]=HEAP32[$0+16>>2]|0;
 HEAPF32[1136>>2] = 1074.0;
 HEAPF32[(1140)>>2] = 140.0;
 HEAP32[(1144)>>2] = 2;
 HEAP32[(1148)>>2] = 1;
 $3 = HEAP32[(92)>>2]|0;
 $4 = (($3|0) / 3)&-1;
 $5 = HEAP32[(1144)>>2]|0;
 $6 = Math_imul($5, $4)|0;
 $7 = HEAP32[(96)>>2]|0;
 $8 = (($7|0) / 2)&-1;
 HEAP32[(1156)>>2] = $6;
 HEAP32[(1160)>>2] = $8;
 HEAP32[(1164)>>2] = $4;
 HEAP32[(1168)>>2] = $8;
 $9 = +HEAPF32[1136>>2];
 $10 = (~~(($9)));
 $11 = +HEAPF32[(1140)>>2];
 $12 = (~~(($11)));
 $13 = HEAP32[(92)>>2]|0;
 $14 = (($13|0) / 3)&-1;
 $15 = HEAP32[(96)>>2]|0;
 $16 = (($15|0) / 2)&-1;
 HEAP32[(1172)>>2] = $10;
 HEAP32[(1176)>>2] = $12;
 HEAP32[(1180)>>2] = $14;
 HEAP32[(1184)>>2] = $16;
 HEAP32[(1152)>>2] = 0;
 HEAPF32[1192>>2] = 50.0;
 HEAPF32[(1196)>>2] = 316.0;
 _LoadTexture($1,7896);
 ;HEAP32[(1200)>>2]=HEAP32[$1>>2]|0;HEAP32[(1200)+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[(1200)+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[(1200)+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[(1200)+16>>2]=HEAP32[$1+16>>2]|0;
 HEAP32[(1260)>>2] = 0;
 HEAP32[(1256)>>2] = 0;
 HEAP32[(1268)>>2] = 4;
 $17 = +HEAPF32[1192>>2];
 $18 = $17 + 20.0;
 $19 = (~~(($18)));
 $20 = +HEAPF32[(1196)>>2];
 $21 = (~~(($20)));
 HEAP32[(1220)>>2] = $19;
 HEAP32[(1224)>>2] = $21;
 HEAP32[(1228)>>2] = 90;
 HEAP32[(1232)>>2] = 380;
 $22 = HEAP32[(1204)>>2]|0;
 $23 = HEAP32[(1268)>>2]|0;
 $24 = (($22|0) / ($23|0))&-1;
 $25 = HEAP32[(1208)>>2]|0;
 HEAP32[(1236)>>2] = 0;
 HEAP32[(1240)>>2] = 0;
 HEAP32[(1244)>>2] = $24;
 HEAP32[(1248)>>2] = $25;
 HEAP32[(1276)>>2] = 0;
 HEAP32[(1272)>>2] = 0;
 HEAP32[(1280)>>2] = 0;
 HEAPF32[1288>>2] = 760.0;
 HEAPF32[(1292)>>2] = 430.0;
 _LoadTexture($2,3544);
 ;HEAP32[(1296)>>2]=HEAP32[$2>>2]|0;HEAP32[(1296)+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[(1296)+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[(1296)+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[(1296)+16>>2]=HEAP32[$2+16>>2]|0;
 HEAP32[(1356)>>2] = 0;
 HEAP32[(1352)>>2] = 0;
 HEAP32[(1364)>>2] = 4;
 $26 = +HEAPF32[1288>>2];
 $27 = $26 + 44.0;
 $28 = (~~(($27)));
 $29 = +HEAPF32[(1292)>>2];
 $30 = $29 + 70.0;
 $31 = (~~(($30)));
 HEAP32[(1316)>>2] = $28;
 HEAP32[(1320)>>2] = $31;
 HEAP32[(1324)>>2] = 220;
 HEAP32[(1328)>>2] = 120;
 $32 = HEAP32[(1300)>>2]|0;
 $33 = HEAP32[(1364)>>2]|0;
 $34 = (($32|0) / ($33|0))&-1;
 $35 = HEAP32[(1304)>>2]|0;
 HEAP32[(1332)>>2] = 0;
 HEAP32[(1336)>>2] = 0;
 HEAP32[(1340)>>2] = $34;
 HEAP32[(1344)>>2] = $35;
 HEAP32[(1372)>>2] = 0;
 HEAP32[(1368)>>2] = 0;
 HEAP32[(1376)>>2] = 1;
 STACKTOP = sp;return;
}
function _UpdateAtticScreen() {
 var $$11 = 0, $$byval_copy18 = 0, $$pr = 0, $$pr12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $i$014 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $sndScream$byval_copy20 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $sndScream$byval_copy20 = sp + 48|0;
 $$byval_copy18 = sp;
 $0 = sp + 16|0;
 $1 = sp + 24|0;
 $2 = sp + 32|0;
 $3 = sp + 40|0;
 $4 = HEAP32[(208)>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if (!($5)) {
   _GetMousePosition($0);
   ;HEAP32[$$byval_copy18>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[$0+4>>2]|0;
   ;HEAP32[$sndScream$byval_copy20>>2]=HEAP32[(1172)>>2]|0;HEAP32[$sndScream$byval_copy20+4>>2]=HEAP32[(1172)+4>>2]|0;HEAP32[$sndScream$byval_copy20+8>>2]=HEAP32[(1172)+8>>2]|0;HEAP32[$sndScream$byval_copy20+12>>2]=HEAP32[(1172)+12>>2]|0;
   $6 = (_CheckCollisionPointRec($$byval_copy18,$sndScream$byval_copy20)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    ;HEAP32[$$byval_copy18>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy18+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy18+12>>2]=HEAP32[(144)+12>>2]|0;
    ;HEAP32[$sndScream$byval_copy20>>2]=HEAP32[(1172)>>2]|0;HEAP32[$sndScream$byval_copy20+4>>2]=HEAP32[(1172)+4>>2]|0;HEAP32[$sndScream$byval_copy20+8>>2]=HEAP32[(1172)+8>>2]|0;HEAP32[$sndScream$byval_copy20+12>>2]=HEAP32[(1172)+12>>2]|0;
    $8 = (_CheckCollisionRecs($$byval_copy18,$sndScream$byval_copy20)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     HEAP32[(1152)>>2] = 0;
     break;
    }
   }
   HEAP32[(1152)>>2] = 1;
   ;HEAP32[$$byval_copy18>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy18+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy18+12>>2]=HEAP32[(144)+12>>2]|0;
   ;HEAP32[$sndScream$byval_copy20>>2]=HEAP32[(1172)>>2]|0;HEAP32[$sndScream$byval_copy20+4>>2]=HEAP32[(1172)+4>>2]|0;HEAP32[$sndScream$byval_copy20+8>>2]=HEAP32[(1172)+8>>2]|0;HEAP32[$sndScream$byval_copy20+12>>2]=HEAP32[(1172)+12>>2]|0;
   $10 = (_CheckCollisionRecs($$byval_copy18,$sndScream$byval_copy20)|0);
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = (_IsMouseButtonPressed(0)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     label = 8;
    } else {
     _GetMousePosition($1);
     ;HEAP32[$$byval_copy18>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[$1+4>>2]|0;
     ;HEAP32[$sndScream$byval_copy20>>2]=HEAP32[(1172)>>2]|0;HEAP32[$sndScream$byval_copy20+4>>2]=HEAP32[(1172)+4>>2]|0;HEAP32[$sndScream$byval_copy20+8>>2]=HEAP32[(1172)+8>>2]|0;HEAP32[$sndScream$byval_copy20+12>>2]=HEAP32[(1172)+12>>2]|0;
     $14 = (_CheckCollisionPointRec($$byval_copy18,$sndScream$byval_copy20)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      label = 8;
     }
    }
    if ((label|0) == 8) {
     $16 = (_IsKeyPressed(32)|0);
     $17 = ($16|0)==(0);
     if ($17) {
      break;
     }
    }
    $18 = HEAP32[(1148)>>2]|0;
    $19 = ($18|0)==(0);
    if ($19) {
     HEAP32[1064>>2] = 1;
     break;
    } else {
     HEAP32[(1160)>>2] = 0;
     HEAP32[(1148)>>2] = 0;
     ;HEAP32[$sndScream$byval_copy20>>2]=HEAP32[112>>2]|0;HEAP32[$sndScream$byval_copy20+4>>2]=HEAP32[112+4>>2]|0;
     _PlaySound($sndScream$byval_copy20);
     break;
    }
   }
  }
 } while(0);
 $20 = HEAP32[776>>2]|0;
 $21 = ($20|0)>(2);
 if ($21) {
  _UpdatePlayer();
  _UpdateMonster(1192);
  _UpdateMonster(1288);
 }
 ;HEAP32[$$byval_copy18>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy18+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy18+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy20>>2]=HEAP32[(1220)>>2]|0;HEAP32[$sndScream$byval_copy20+4>>2]=HEAP32[(1220)+4>>2]|0;HEAP32[$sndScream$byval_copy20+8>>2]=HEAP32[(1220)+8>>2]|0;HEAP32[$sndScream$byval_copy20+12>>2]=HEAP32[(1220)+12>>2]|0;
 $22 = (_CheckCollisionRecs($$byval_copy18,$sndScream$byval_copy20)|0);
 $23 = ($22|0)==(0);
 $24 = HEAP32[(1272)>>2]|0;
 $25 = ($24|0)!=(0);
 $or$cond = $23 | $25;
 if ($or$cond) {
  ;HEAP32[$$byval_copy18>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy18+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy18+12>>2]=HEAP32[(144)+12>>2]|0;
  ;HEAP32[$sndScream$byval_copy20>>2]=HEAP32[(1316)>>2]|0;HEAP32[$sndScream$byval_copy20+4>>2]=HEAP32[(1316)+4>>2]|0;HEAP32[$sndScream$byval_copy20+8>>2]=HEAP32[(1316)+8>>2]|0;HEAP32[$sndScream$byval_copy20+12>>2]=HEAP32[(1316)+12>>2]|0;
  $26 = (_CheckCollisionRecs($$byval_copy18,$sndScream$byval_copy20)|0);
  $27 = ($26|0)==(0);
  $28 = HEAP32[(1368)>>2]|0;
  $29 = ($28|0)!=(0);
  $or$cond3 = $27 | $29;
  $30 = $or$cond3&1;
  $$11 = $30 ^ 1;
  $storemerge = $$11;
 } else {
  $storemerge = 1;
 }
 HEAP32[760>>2] = $storemerge;
 ;HEAP32[$$byval_copy18>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy18+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy18+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy20>>2]=HEAP32[(1220)>>2]|0;HEAP32[$sndScream$byval_copy20+4>>2]=HEAP32[(1220)+4>>2]|0;HEAP32[$sndScream$byval_copy20+8>>2]=HEAP32[(1220)+8>>2]|0;HEAP32[$sndScream$byval_copy20+12>>2]=HEAP32[(1220)+12>>2]|0;
 $31 = (_CheckCollisionRecs($$byval_copy18,$sndScream$byval_copy20)|0);
 $32 = ($31|0)==(0);
 $33 = HEAP32[(1272)>>2]|0;
 $34 = ($33|0)!=(0);
 $or$cond5 = $32 | $34;
 do {
  if ($or$cond5) {
   HEAP32[(1276)>>2] = 0;
  } else {
   HEAP32[(1276)>>2] = 1;
   $35 = (_IsKeyPressed(32)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    $37 = (_IsMouseButtonPressed(0)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     break;
    }
    _GetMousePosition($2);
    ;HEAP32[$$byval_copy18>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[$2+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy20>>2]=HEAP32[(1220)>>2]|0;HEAP32[$sndScream$byval_copy20+4>>2]=HEAP32[(1220)+4>>2]|0;HEAP32[$sndScream$byval_copy20+8>>2]=HEAP32[(1220)+8>>2]|0;HEAP32[$sndScream$byval_copy20+12>>2]=HEAP32[(1220)+12>>2]|0;
    $39 = (_CheckCollisionPointRec($$byval_copy18,$sndScream$byval_copy20)|0);
    $40 = ($39|0)==(0);
    if ($40) {
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[1384>>2] = 1;
   HEAP32[1056>>2] = 0;
   HEAP32[768>>2] = 1;
  }
 } while(0);
 ;HEAP32[$$byval_copy18>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy18+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy18+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy20>>2]=HEAP32[(1316)>>2]|0;HEAP32[$sndScream$byval_copy20+4>>2]=HEAP32[(1316)+4>>2]|0;HEAP32[$sndScream$byval_copy20+8>>2]=HEAP32[(1316)+8>>2]|0;HEAP32[$sndScream$byval_copy20+12>>2]=HEAP32[(1316)+12>>2]|0;
 $41 = (_CheckCollisionRecs($$byval_copy18,$sndScream$byval_copy20)|0);
 $42 = ($41|0)==(0);
 $43 = HEAP32[(1368)>>2]|0;
 $44 = ($43|0)!=(0);
 $or$cond7 = $42 | $44;
 do {
  if ($or$cond7) {
   HEAP32[(1372)>>2] = 0;
   label = 28;
  } else {
   HEAP32[(1372)>>2] = 1;
   $45 = (_IsKeyPressed(32)|0);
   $46 = ($45|0)==(0);
   if ($46) {
    $47 = (_IsMouseButtonPressed(0)|0);
    $48 = ($47|0)==(0);
    if ($48) {
     label = 28;
     break;
    }
    _GetMousePosition($3);
    ;HEAP32[$$byval_copy18>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[$3+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy20>>2]=HEAP32[(1316)>>2]|0;HEAP32[$sndScream$byval_copy20+4>>2]=HEAP32[(1316)+4>>2]|0;HEAP32[$sndScream$byval_copy20+8>>2]=HEAP32[(1316)+8>>2]|0;HEAP32[$sndScream$byval_copy20+12>>2]=HEAP32[(1316)+12>>2]|0;
    $49 = (_CheckCollisionPointRec($$byval_copy18,$sndScream$byval_copy20)|0);
    $50 = ($49|0)==(0);
    if ($50) {
     label = 28;
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[1384>>2] = 1;
   HEAP32[768>>2] = 2;
   HEAP32[1056>>2] = 1;
  }
 } while(0);
 if ((label|0) == 28) {
  $$pr = HEAP32[1384>>2]|0;
  $51 = ($$pr|0)==(0);
  if (!($51)) {
   $$pr12 = HEAP32[1056>>2]|0;
   $52 = (($$pr12) + 1)|0;
   HEAP32[1056>>2] = $52;
   $53 = ($$pr12|0)>(179);
   if ($53) {
    $54 = HEAP32[768>>2]|0;
    if ((($54|0) == 2)) {
     $57 = HEAP32[(1376)>>2]|0;
     $58 = ($57|0)==(0);
     if ($58) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy20>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy20+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy20);
     }
     HEAP32[(1368)>>2] = 1;
     HEAP32[(1372)>>2] = 0;
    } else if ((($54|0) == 1)) {
     $55 = HEAP32[(1280)>>2]|0;
     $56 = ($55|0)==(0);
     if ($56) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy20>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy20+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy20);
     }
     HEAP32[(1272)>>2] = 1;
     HEAP32[(1276)>>2] = 0;
    }
    HEAP32[1384>>2] = 0;
    HEAP32[1056>>2] = 0;
   }
  }
 }
 $59 = HEAP32[1056>>2]|0;
 $60 = (($59) + 1)|0;
 HEAP32[1056>>2] = $60;
 $61 = $60 & 1;
 $62 = ($61|0)==(0);
 if ($62) {
  $63 = HEAP32[792>>2]|0;
  $64 = (($63) + 1)|0;
  HEAP32[792>>2] = $64;
 }
 $65 = HEAP32[776>>2]|0;
 do {
  if ((($65|0) == 0)) {
   $66 = HEAP32[792>>2]|0;
   $67 = ($66|0)<(84);
   if ($67) {
    (_strncpy((800|0),(1392|0),($66|0))|0);
   } else {
    $68 = (_strlen((800|0))|0);
    $69 = ($68|0)>(0);
    if ($69) {
     $i$014 = 0;
     while(1) {
      $70 = (800 + ($i$014)|0);
      HEAP8[$70>>0] = 0;
      $71 = (($i$014) + 1)|0;
      $72 = (_strlen((800|0))|0);
      $73 = ($71|0)<($72|0);
      if ($73) {
       $i$014 = $71;
      } else {
       break;
      }
     }
    }
    HEAP32[792>>2] = 0;
    HEAP32[776>>2] = 1;
   }
   $74 = (_IsKeyPressed(257)|0);
   $75 = ($74|0)==(0);
   if (!($75)) {
    HEAP32[776>>2] = 1;
   }
  } else if ((($65|0) == 1)) {
   $76 = HEAP32[784>>2]|0;
   $77 = (($76) + 1)|0;
   HEAP32[784>>2] = $77;
   $78 = (_IsKeyPressed(257)|0);
   $79 = ($78|0)==(0);
   if ($79) {
    $80 = (_IsMouseButtonPressed(0)|0);
    $81 = ($80|0)==(0);
    if ($81) {
     break;
    }
   }
   HEAP32[776>>2] = 2;
   HEAP32[784>>2] = 0;
  } else {
   $82 = ($65|0)==(2);
   $83 = HEAP32[784>>2]|0;
   $84 = (($83) + 1)|0;
   HEAP32[784>>2] = $84;
   $85 = ($83|0)>(179);
   $or$cond9 = $82 & $85;
   if ($or$cond9) {
    HEAP32[776>>2] = 3;
   }
  }
 } while(0);
 $86 = (_IsKeyPressed(77)|0);
 $87 = ($86|0)==(0);
 if ($87) {
  STACKTOP = sp;return;
 }
 HEAP32[1064>>2] = 1;
 STACKTOP = sp;return;
}
function _DrawAtticScreen() {
 var $$byval_copy20 = 0, $$byval_copy24 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $doors$byval_copy3 = 0;
 var $font$byval_copy14 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $$byval_copy24 = sp + 32|0;
 $$byval_copy20 = sp + 140|0;
 $font$byval_copy14 = sp + 184|0;
 $doors$byval_copy3 = sp + 160|0;
 $0 = sp + 180|0;
 $1 = sp + 252|0;
 $2 = sp + 124|0;
 $3 = sp + 256|0;
 $4 = sp + 268|0;
 $5 = sp + 264|0;
 $6 = sp + 260|0;
 $7 = sp + 128|0;
 $8 = sp + 136|0;
 $9 = sp + 24|0;
 $10 = sp + 16|0;
 $11 = sp + 248|0;
 $12 = sp + 8|0;
 $13 = sp;
 $14 = sp + 240|0;
 $15 = sp + 228|0;
 $16 = sp + 244|0;
 $17 = sp + 220|0;
 $18 = sp + 224|0;
 $19 = sp + 236|0;
 $20 = sp + 232|0;
 HEAP32[$0>>2] = -1;
 ;HEAP32[$$byval_copy20>>2]=HEAP32[1112>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[1112+4>>2]|0;HEAP32[$$byval_copy20+8>>2]=HEAP32[1112+8>>2]|0;HEAP32[$$byval_copy20+12>>2]=HEAP32[1112+12>>2]|0;HEAP32[$$byval_copy20+16>>2]=HEAP32[1112+16>>2]|0;
 ;HEAP8[$$byval_copy24>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawTexture($$byval_copy20,0,0,$$byval_copy24);
 dest=$$byval_copy24; src=1192; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy24,0);
 dest=$$byval_copy24; src=1288; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy24,0);
 $21 = HEAP32[(1152)>>2]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  HEAP32[$2>>2] = -1;
  ;HEAP32[$doors$byval_copy3>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy3+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy3+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy3+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy3+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy14>>2]=HEAP32[(1156)>>2]|0;HEAP32[$font$byval_copy14+4>>2]=HEAP32[(1156)+4>>2]|0;HEAP32[$font$byval_copy14+8>>2]=HEAP32[(1156)+8>>2]|0;HEAP32[$font$byval_copy14+12>>2]=HEAP32[(1156)+12>>2]|0;
  ;HEAP32[$$byval_copy20>>2]=HEAP32[1136>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[1136+4>>2]|0;
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$2+3>>0]|0;
  _DrawTextureRec($doors$byval_copy3,$font$byval_copy14,$$byval_copy20,$$byval_copy24);
 } else {
  HEAP8[$1>>0] = 0;
  $23 = ((($1)) + 1|0);
  HEAP8[$23>>0] = -28;
  $24 = ((($1)) + 2|0);
  HEAP8[$24>>0] = 48;
  $25 = ((($1)) + 3|0);
  HEAP8[$25>>0] = -1;
  ;HEAP32[$doors$byval_copy3>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy3+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy3+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy3+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy3+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy14>>2]=HEAP32[(1156)>>2]|0;HEAP32[$font$byval_copy14+4>>2]=HEAP32[(1156)+4>>2]|0;HEAP32[$font$byval_copy14+8>>2]=HEAP32[(1156)+8>>2]|0;HEAP32[$font$byval_copy14+12>>2]=HEAP32[(1156)+12>>2]|0;
  ;HEAP32[$$byval_copy20>>2]=HEAP32[1136>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[1136+4>>2]|0;
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$1+3>>0]|0;
  _DrawTextureRec($doors$byval_copy3,$font$byval_copy14,$$byval_copy20,$$byval_copy24);
 }
 $26 = HEAP32[776>>2]|0;
 $27 = ($26|0)<(2);
 if ($27) {
  $28 = (_GetScreenWidth()|0);
  HEAP8[$4>>0] = -56;
  $29 = ((($4)) + 1|0);
  HEAP8[$29>>0] = -56;
  $30 = ((($4)) + 2|0);
  HEAP8[$30>>0] = -56;
  $31 = ((($4)) + 3|0);
  HEAP8[$31>>0] = -1;
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$4+3>>0]|0;
  _Fade($3,$$byval_copy24,0.5);
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$3+3>>0]|0;
  _DrawRectangle(0,40,$28,200,$$byval_copy24);
 } else {
  $32 = ($26|0)==(2);
  if ($32) {
   $33 = (_GetScreenWidth()|0);
   HEAP8[$6>>0] = -56;
   $34 = ((($6)) + 1|0);
   HEAP8[$34>>0] = -56;
   $35 = ((($6)) + 2|0);
   HEAP8[$35>>0] = -56;
   $36 = ((($6)) + 3|0);
   HEAP8[$36>>0] = -1;
   ;HEAP8[$$byval_copy24>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$6+3>>0]|0;
   _Fade($5,$$byval_copy24,0.5);
   ;HEAP8[$$byval_copy24>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$5+3>>0]|0;
   _DrawRectangle(0,80,$33,100,$$byval_copy24);
  }
 }
 $37 = HEAP32[776>>2]|0;
 if ((($37|0) == 0)) {
  HEAPF32[$7>>2] = 100.0;
  $38 = ((($7)) + 4|0);
  HEAPF32[$38>>2] = 80.0;
  $39 = HEAP32[(68)>>2]|0;
  HEAP32[$8>>2] = -1;
  dest=$font$byval_copy14; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy20>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[$7+4>>2]|0;
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$8+3>>0]|0;
  _DrawTextEx($font$byval_copy14,800,$$byval_copy20,$39,2,$$byval_copy24);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($37|0) == 1)) {
  HEAPF32[$9>>2] = 100.0;
  $40 = ((($9)) + 4|0);
  HEAPF32[$40>>2] = 80.0;
  $41 = HEAP32[(68)>>2]|0;
  HEAP32[$10>>2] = -1;
  dest=$font$byval_copy14; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy20>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[$9+4>>2]|0;
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$10+3>>0]|0;
  _DrawTextEx($font$byval_copy14,1392,$$byval_copy20,$41,2,$$byval_copy24);
  $42 = HEAP32[784>>2]|0;
  $43 = (($42|0) / 30)&-1;
  $44 = $43 & 1;
  $45 = ($44|0)==(0);
  if ($45) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $46 = (_GetScreenWidth()|0);
  $47 = (($46) + -280)|0;
  HEAP8[$11>>0] = 0;
  $48 = ((($11)) + 1|0);
  HEAP8[$48>>0] = 0;
  $49 = ((($11)) + 2|0);
  HEAP8[$49>>0] = 0;
  $50 = ((($11)) + 3|0);
  HEAP8[$50>>0] = -1;
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$11>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$11+3>>0]|0;
  _DrawText(8608,$47,200,20,$$byval_copy24);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($37|0) == 2)) {
  $51 = HEAP32[784>>2]|0;
  $52 = (($51|0) / 30)&-1;
  $53 = $52 & 1;
  $54 = ($53|0)==(0);
  if ($54) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  HEAPF32[$12>>2] = 300.0;
  $55 = ((($12)) + 4|0);
  HEAPF32[$55>>2] = 95.0;
  $56 = HEAP32[(68)>>2]|0;
  $57 = $56 << 1;
  HEAP32[$13>>2] = -1;
  dest=$font$byval_copy14; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy20>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[$12+4>>2]|0;
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$13>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$13+3>>0]|0;
  _DrawTextEx($font$byval_copy14,8488,$$byval_copy20,$57,2,$$byval_copy24);
  HEAP8[$15>>0] = -26;
  $58 = ((($15)) + 1|0);
  HEAP8[$58>>0] = 41;
  $59 = ((($15)) + 2|0);
  HEAP8[$59>>0] = 55;
  $60 = ((($15)) + 3|0);
  HEAP8[$60>>0] = -1;
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$15+3>>0]|0;
  _Fade($14,$$byval_copy24,0.60000002384185791);
  ;HEAP32[$$byval_copy20>>2]=HEAP32[(1220)>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[(1220)+4>>2]|0;HEAP32[$$byval_copy20+8>>2]=HEAP32[(1220)+8>>2]|0;HEAP32[$$byval_copy20+12>>2]=HEAP32[(1220)+12>>2]|0;
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$14>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$14+3>>0]|0;
  _DrawRectangleRec($$byval_copy20,$$byval_copy24);
  HEAP8[$17>>0] = -26;
  $61 = ((($17)) + 1|0);
  HEAP8[$61>>0] = 41;
  $62 = ((($17)) + 2|0);
  HEAP8[$62>>0] = 55;
  $63 = ((($17)) + 3|0);
  HEAP8[$63>>0] = -1;
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$17+3>>0]|0;
  _Fade($16,$$byval_copy24,0.60000002384185791);
  ;HEAP32[$$byval_copy20>>2]=HEAP32[(1316)>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[(1316)+4>>2]|0;HEAP32[$$byval_copy20+8>>2]=HEAP32[(1316)+8>>2]|0;HEAP32[$$byval_copy20+12>>2]=HEAP32[(1316)+12>>2]|0;
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$16>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$16+3>>0]|0;
  _DrawRectangleRec($$byval_copy20,$$byval_copy24);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else {
  $64 = HEAP32[760>>2]|0;
  $65 = ($64|0)==(0);
  if ($65) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $66 = HEAP32[784>>2]|0;
  $67 = (($66|0) / 30)&-1;
  $68 = $67 & 1;
  $69 = ($68|0)==(0);
  if ($69) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $70 = (_GetScreenWidth()|0);
  HEAP8[$19>>0] = -56;
  $71 = ((($19)) + 1|0);
  HEAP8[$71>>0] = -56;
  $72 = ((($19)) + 2|0);
  HEAP8[$72>>0] = -56;
  $73 = ((($19)) + 3|0);
  HEAP8[$73>>0] = -1;
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$19>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$19+3>>0]|0;
  _Fade($18,$$byval_copy24,0.5);
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$18>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$18+3>>0]|0;
  _DrawRectangle(0,0,$70,50,$$byval_copy24);
  HEAP8[$20>>0] = 0;
  $74 = ((($20)) + 1|0);
  HEAP8[$74>>0] = 0;
  $75 = ((($20)) + 2|0);
  HEAP8[$75>>0] = 0;
  $76 = ((($20)) + 3|0);
  HEAP8[$76>>0] = -1;
  ;HEAP8[$$byval_copy24>>0]=HEAP8[$20>>0]|0;HEAP8[$$byval_copy24+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$$byval_copy24+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$$byval_copy24+3>>0]=HEAP8[$20+3>>0]|0;
  _DrawText(8504,420,15,20,$$byval_copy24);
  _DrawPlayer();
  STACKTOP = sp;return;
 }
}
function _UnloadAtticScreen() {
 var $arc$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $arc$byval_copy = sp;
 ;HEAP32[$arc$byval_copy>>2]=HEAP32[1112>>2]|0;HEAP32[$arc$byval_copy+4>>2]=HEAP32[1112+4>>2]|0;HEAP32[$arc$byval_copy+8>>2]=HEAP32[1112+8>>2]|0;HEAP32[$arc$byval_copy+12>>2]=HEAP32[1112+12>>2]|0;HEAP32[$arc$byval_copy+16>>2]=HEAP32[1112+16>>2]|0;
 _UnloadTexture($arc$byval_copy);
 dest=$arc$byval_copy; src=1192; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($arc$byval_copy);
 dest=$arc$byval_copy; src=1288; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($arc$byval_copy);
 STACKTOP = sp;return;
}
function _FinishAtticScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1064>>2]|0;
 return ($0|0);
}
function _InitAisle01Screen() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 40|0;
 $1 = sp;
 $2 = sp + 20|0;
 _ResetPlayer();
 HEAP32[1648>>2] = 0;
 HEAP32[1656>>2] = -1;
 HEAP32[1664>>2] = 0;
 HEAP32[1672>>2] = 0;
 HEAP32[1680>>2] = 0;
 _memset((1688|0),0,256)|0;
 HEAP32[1944>>2] = 0;
 HEAP32[1952>>2] = 0;
 _LoadTexture($0,1960);
 ;HEAP32[2008>>2]=HEAP32[$0>>2]|0;HEAP32[2008+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[2008+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[2008+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[2008+16>>2]=HEAP32[$0+16>>2]|0;
 $3 = +HEAPF32[136>>2];
 $4 = $3 + -200.0;
 $5 = (~~(($4)));
 HEAP32[2032>>2] = $5;
 HEAPF32[2040>>2] = -30.0;
 HEAPF32[(2044)>>2] = 135.0;
 HEAP32[(2048)>>2] = 0;
 HEAP32[(2052)>>2] = 1;
 $6 = HEAP32[(92)>>2]|0;
 $7 = (($6|0) / 3)&-1;
 $8 = HEAP32[(2048)>>2]|0;
 $9 = Math_imul($8, $7)|0;
 $10 = HEAP32[(96)>>2]|0;
 $11 = (($10|0) / 2)&-1;
 HEAP32[(2060)>>2] = $9;
 HEAP32[(2064)>>2] = $11;
 HEAP32[(2068)>>2] = $7;
 HEAP32[(2072)>>2] = $11;
 $12 = +HEAPF32[2040>>2];
 $13 = (~~(($12)));
 $14 = +HEAPF32[(2044)>>2];
 $15 = (~~(($14)));
 $16 = HEAP32[(92)>>2]|0;
 $17 = (($16|0) / 3)&-1;
 $18 = HEAP32[(96)>>2]|0;
 $19 = (($18|0) / 2)&-1;
 HEAP32[(2076)>>2] = $13;
 HEAP32[(2080)>>2] = $15;
 HEAP32[(2084)>>2] = $17;
 HEAP32[(2088)>>2] = $19;
 HEAP32[(2056)>>2] = 0;
 HEAPF32[2096>>2] = 1115.0;
 HEAPF32[(2100)>>2] = 104.0;
 HEAP32[(2104)>>2] = 1;
 HEAP32[(2108)>>2] = 1;
 $20 = HEAP32[(92)>>2]|0;
 $21 = (($20|0) / 3)&-1;
 $22 = HEAP32[(2104)>>2]|0;
 $23 = Math_imul($22, $21)|0;
 $24 = HEAP32[(96)>>2]|0;
 $25 = (($24|0) / 2)&-1;
 HEAP32[(2116)>>2] = $23;
 HEAP32[(2120)>>2] = $25;
 HEAP32[(2124)>>2] = $21;
 HEAP32[(2128)>>2] = $25;
 $26 = +HEAPF32[2096>>2];
 $27 = (~~(($26)));
 $28 = +HEAPF32[(2100)>>2];
 $29 = (~~(($28)));
 $30 = HEAP32[(92)>>2]|0;
 $31 = (($30|0) / 3)&-1;
 $32 = HEAP32[(96)>>2]|0;
 $33 = (($32|0) / 2)&-1;
 HEAP32[(2132)>>2] = $27;
 HEAP32[(2136)>>2] = $29;
 HEAP32[(2140)>>2] = $31;
 HEAP32[(2144)>>2] = $33;
 HEAP32[(2112)>>2] = 0;
 HEAPF32[2152>>2] = 1710.0;
 HEAPF32[(2156)>>2] = 140.0;
 HEAP32[(2160)>>2] = 2;
 HEAP32[(2164)>>2] = 1;
 $34 = HEAP32[(92)>>2]|0;
 $35 = (($34|0) / 3)&-1;
 $36 = HEAP32[(2160)>>2]|0;
 $37 = Math_imul($36, $35)|0;
 $38 = HEAP32[(96)>>2]|0;
 $39 = (($38|0) / 2)&-1;
 HEAP32[(2172)>>2] = $37;
 HEAP32[(2176)>>2] = $39;
 HEAP32[(2180)>>2] = $35;
 HEAP32[(2184)>>2] = $39;
 $40 = +HEAPF32[2152>>2];
 $41 = (~~(($40)));
 $42 = +HEAPF32[(2156)>>2];
 $43 = (~~(($42)));
 $44 = HEAP32[(92)>>2]|0;
 $45 = (($44|0) / 3)&-1;
 $46 = HEAP32[(96)>>2]|0;
 $47 = (($46|0) / 2)&-1;
 HEAP32[(2188)>>2] = $41;
 HEAP32[(2192)>>2] = $43;
 HEAP32[(2196)>>2] = $45;
 HEAP32[(2200)>>2] = $47;
 HEAPF32[2208>>2] = 187.0;
 HEAPF32[(2212)>>2] = 256.0;
 _LoadTexture($1,7896);
 ;HEAP32[(2216)>>2]=HEAP32[$1>>2]|0;HEAP32[(2216)+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[(2216)+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[(2216)+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[(2216)+16>>2]=HEAP32[$1+16>>2]|0;
 HEAP32[(2276)>>2] = 0;
 HEAP32[(2272)>>2] = 0;
 HEAP32[(2284)>>2] = 4;
 $48 = +HEAPF32[2208>>2];
 $49 = $48 + 20.0;
 $50 = (~~(($49)));
 $51 = +HEAPF32[(2212)>>2];
 $52 = (~~(($51)));
 HEAP32[(2236)>>2] = $50;
 HEAP32[(2240)>>2] = $52;
 HEAP32[(2244)>>2] = 90;
 HEAP32[(2248)>>2] = 380;
 $53 = HEAP32[(2220)>>2]|0;
 $54 = HEAP32[(2284)>>2]|0;
 $55 = (($53|0) / ($54|0))&-1;
 $56 = HEAP32[(2224)>>2]|0;
 HEAP32[(2252)>>2] = 0;
 HEAP32[(2256)>>2] = 0;
 HEAP32[(2260)>>2] = $55;
 HEAP32[(2264)>>2] = $56;
 HEAP32[(2292)>>2] = 0;
 HEAP32[(2288)>>2] = 0;
 HEAP32[(2296)>>2] = 1;
 HEAPF32[2304>>2] = 637.0;
 HEAPF32[(2308)>>2] = 178.0;
 _LoadTexture($2,5744);
 ;HEAP32[(2312)>>2]=HEAP32[$2>>2]|0;HEAP32[(2312)+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[(2312)+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[(2312)+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[(2312)+16>>2]=HEAP32[$2+16>>2]|0;
 HEAP32[(2372)>>2] = 0;
 HEAP32[(2368)>>2] = 0;
 HEAP32[(2380)>>2] = 4;
 $57 = +HEAPF32[2304>>2];
 $58 = $57 + 44.0;
 $59 = (~~(($58)));
 $60 = +HEAPF32[(2308)>>2];
 $61 = (~~(($60)));
 HEAP32[(2332)>>2] = $59;
 HEAP32[(2336)>>2] = $61;
 HEAP32[(2340)>>2] = 174;
 HEAP32[(2344)>>2] = 256;
 $62 = HEAP32[(2316)>>2]|0;
 $63 = HEAP32[(2380)>>2]|0;
 $64 = (($62|0) / ($63|0))&-1;
 $65 = HEAP32[(2320)>>2]|0;
 HEAP32[(2348)>>2] = 0;
 HEAP32[(2352)>>2] = 0;
 HEAP32[(2356)>>2] = $64;
 HEAP32[(2360)>>2] = $65;
 HEAP32[(2388)>>2] = 0;
 HEAP32[(2384)>>2] = 0;
 HEAP32[(2392)>>2] = 0;
 STACKTOP = sp;return;
}
function _UpdateAisle01Screen() {
 var $$ = 0, $$16 = 0, $$byval_copy36 = 0, $$pr = 0, $$pr17 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0.0;
 var $148 = 0, $149 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$019 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, $sndScream$byval_copy38 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $sndScream$byval_copy38 = sp + 80|0;
 $$byval_copy36 = sp + 64|0;
 $0 = sp + 56|0;
 $1 = sp + 48|0;
 $2 = sp + 40|0;
 $3 = sp + 32|0;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = +HEAPF32[2040>>2];
 $9 = HEAP32[2032>>2]|0;
 $10 = (+($9|0));
 $11 = $8 - $10;
 $12 = (~~(($11)));
 HEAP32[(2076)>>2] = $12;
 $13 = +HEAPF32[2096>>2];
 $14 = HEAP32[2032>>2]|0;
 $15 = (+($14|0));
 $16 = $13 - $15;
 $17 = (~~(($16)));
 HEAP32[(2132)>>2] = $17;
 $18 = +HEAPF32[2152>>2];
 $19 = HEAP32[2032>>2]|0;
 $20 = (+($19|0));
 $21 = $18 - $20;
 $22 = (~~(($21)));
 HEAP32[(2188)>>2] = $22;
 $23 = HEAP32[(208)>>2]|0;
 $24 = ($23|0)==(0);
 do {
  if (!($24)) {
   _GetMousePosition($0);
   ;HEAP32[$$byval_copy36>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[$0+4>>2]|0;
   ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2076)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2076)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2076)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2076)+12>>2]|0;
   $25 = (_CheckCollisionPointRec($$byval_copy36,$sndScream$byval_copy38)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    ;HEAP32[$$byval_copy36>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy36+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy36+12>>2]=HEAP32[(144)+12>>2]|0;
    ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2076)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2076)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2076)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2076)+12>>2]|0;
    $27 = (_CheckCollisionRecs($$byval_copy36,$sndScream$byval_copy38)|0);
    $28 = ($27|0)==(0);
    if ($28) {
     HEAP32[(2056)>>2] = 0;
    } else {
     label = 5;
    }
   } else {
    label = 5;
   }
   do {
    if ((label|0) == 5) {
     HEAP32[(2056)>>2] = 1;
     ;HEAP32[$$byval_copy36>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy36+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy36+12>>2]=HEAP32[(144)+12>>2]|0;
     ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2076)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2076)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2076)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2076)+12>>2]|0;
     $29 = (_CheckCollisionRecs($$byval_copy36,$sndScream$byval_copy38)|0);
     $30 = ($29|0)==(0);
     if (!($30)) {
      $31 = (_IsMouseButtonPressed(0)|0);
      $32 = ($31|0)==(0);
      if ($32) {
       label = 8;
      } else {
       _GetMousePosition($1);
       ;HEAP32[$$byval_copy36>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[$1+4>>2]|0;
       ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2076)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2076)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2076)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2076)+12>>2]|0;
       $33 = (_CheckCollisionPointRec($$byval_copy36,$sndScream$byval_copy38)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        label = 8;
       }
      }
      if ((label|0) == 8) {
       $35 = (_IsKeyPressed(32)|0);
       $36 = ($35|0)==(0);
       if ($36) {
        break;
       }
      }
      $37 = HEAP32[(2052)>>2]|0;
      $38 = ($37|0)==(0);
      if ($38) {
       HEAP32[1952>>2] = 1;
       break;
      } else {
       HEAP32[(2064)>>2] = 0;
       HEAP32[(2052)>>2] = 0;
       ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[112>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[112+4>>2]|0;
       _PlaySound($sndScream$byval_copy38);
       break;
      }
     }
    }
   } while(0);
   _GetMousePosition($2);
   ;HEAP32[$$byval_copy36>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[$2+4>>2]|0;
   ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2132)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2132)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2132)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2132)+12>>2]|0;
   $39 = (_CheckCollisionPointRec($$byval_copy36,$sndScream$byval_copy38)|0);
   $40 = ($39|0)==(0);
   if ($40) {
    ;HEAP32[$$byval_copy36>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy36+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy36+12>>2]=HEAP32[(144)+12>>2]|0;
    ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2132)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2132)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2132)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2132)+12>>2]|0;
    $41 = (_CheckCollisionRecs($$byval_copy36,$sndScream$byval_copy38)|0);
    $42 = ($41|0)==(0);
    if ($42) {
     HEAP32[(2112)>>2] = 0;
    } else {
     label = 15;
    }
   } else {
    label = 15;
   }
   do {
    if ((label|0) == 15) {
     HEAP32[(2112)>>2] = 1;
     ;HEAP32[$$byval_copy36>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy36+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy36+12>>2]=HEAP32[(144)+12>>2]|0;
     ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2132)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2132)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2132)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2132)+12>>2]|0;
     $43 = (_CheckCollisionRecs($$byval_copy36,$sndScream$byval_copy38)|0);
     $44 = ($43|0)==(0);
     if (!($44)) {
      $45 = (_IsMouseButtonPressed(0)|0);
      $46 = ($45|0)==(0);
      if ($46) {
       label = 18;
      } else {
       _GetMousePosition($3);
       ;HEAP32[$$byval_copy36>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[$3+4>>2]|0;
       ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2132)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2132)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2132)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2132)+12>>2]|0;
       $47 = (_CheckCollisionPointRec($$byval_copy36,$sndScream$byval_copy38)|0);
       $48 = ($47|0)==(0);
       if ($48) {
        label = 18;
       }
      }
      if ((label|0) == 18) {
       $49 = (_IsKeyPressed(32)|0);
       $50 = ($49|0)==(0);
       if ($50) {
        break;
       }
      }
      $51 = HEAP32[(2108)>>2]|0;
      $52 = ($51|0)==(0);
      if ($52) {
       HEAP32[1952>>2] = 2;
       break;
      } else {
       HEAP32[(2120)>>2] = 0;
       HEAP32[(2108)>>2] = 0;
       ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[112>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[112+4>>2]|0;
       _PlaySound($sndScream$byval_copy38);
       break;
      }
     }
    }
   } while(0);
   _GetMousePosition($4);
   ;HEAP32[$$byval_copy36>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[$4+4>>2]|0;
   ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2188)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2188)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2188)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2188)+12>>2]|0;
   $53 = (_CheckCollisionPointRec($$byval_copy36,$sndScream$byval_copy38)|0);
   $54 = ($53|0)==(0);
   if ($54) {
    ;HEAP32[$$byval_copy36>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy36+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy36+12>>2]=HEAP32[(144)+12>>2]|0;
    ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2188)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2188)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2188)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2188)+12>>2]|0;
    $55 = (_CheckCollisionRecs($$byval_copy36,$sndScream$byval_copy38)|0);
    $56 = ($55|0)==(0);
    if ($56) {
     HEAP32[(2168)>>2] = 0;
     break;
    }
   }
   HEAP32[(2168)>>2] = 1;
   ;HEAP32[$$byval_copy36>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy36+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy36+12>>2]=HEAP32[(144)+12>>2]|0;
   ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2188)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2188)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2188)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2188)+12>>2]|0;
   $57 = (_CheckCollisionRecs($$byval_copy36,$sndScream$byval_copy38)|0);
   $58 = ($57|0)==(0);
   if (!($58)) {
    $59 = (_IsMouseButtonPressed(0)|0);
    $60 = ($59|0)==(0);
    if ($60) {
     label = 28;
    } else {
     _GetMousePosition($5);
     ;HEAP32[$$byval_copy36>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[$5+4>>2]|0;
     ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2188)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2188)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2188)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2188)+12>>2]|0;
     $61 = (_CheckCollisionPointRec($$byval_copy36,$sndScream$byval_copy38)|0);
     $62 = ($61|0)==(0);
     if ($62) {
      label = 28;
     }
    }
    if ((label|0) == 28) {
     $63 = (_IsKeyPressed(32)|0);
     $64 = ($63|0)==(0);
     if ($64) {
      break;
     }
    }
    $65 = HEAP32[(2164)>>2]|0;
    $66 = ($65|0)==(0);
    if ($66) {
     HEAP32[1952>>2] = 3;
     break;
    } else {
     HEAP32[(2176)>>2] = 0;
     HEAP32[(2164)>>2] = 0;
     ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[112>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[112+4>>2]|0;
     _PlaySound($sndScream$byval_copy38);
     break;
    }
   }
  }
 } while(0);
 $67 = HEAP32[1664>>2]|0;
 $68 = ($67|0)>(2);
 if ($68) {
  _UpdatePlayer();
  _UpdateMonster(2208);
  _UpdateMonster(2304);
 }
 $69 = +HEAPF32[2208>>2];
 $70 = $69 + 20.0;
 $71 = HEAP32[2032>>2]|0;
 $72 = (+($71|0));
 $73 = $70 - $72;
 $74 = (~~(($73)));
 HEAP32[(2236)>>2] = $74;
 $75 = +HEAPF32[2304>>2];
 $76 = $75 + 44.0;
 $77 = HEAP32[2032>>2]|0;
 $78 = (+($77|0));
 $79 = $76 - $78;
 $80 = (~~(($79)));
 HEAP32[(2332)>>2] = $80;
 ;HEAP32[$$byval_copy36>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy36+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy36+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2236)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2236)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2236)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2236)+12>>2]|0;
 $81 = (_CheckCollisionRecs($$byval_copy36,$sndScream$byval_copy38)|0);
 $82 = ($81|0)==(0);
 $83 = HEAP32[(2288)>>2]|0;
 $84 = ($83|0)!=(0);
 $or$cond = $82 | $84;
 if ($or$cond) {
  ;HEAP32[$$byval_copy36>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy36+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy36+12>>2]=HEAP32[(144)+12>>2]|0;
  ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2332)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2332)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2332)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2332)+12>>2]|0;
  $85 = (_CheckCollisionRecs($$byval_copy36,$sndScream$byval_copy38)|0);
  $86 = ($85|0)==(0);
  $87 = HEAP32[(2384)>>2]|0;
  $88 = ($87|0)!=(0);
  $or$cond3 = $86 | $88;
  $89 = $or$cond3&1;
  $$16 = $89 ^ 1;
  $storemerge = $$16;
 } else {
  $storemerge = 1;
 }
 HEAP32[1648>>2] = $storemerge;
 ;HEAP32[$$byval_copy36>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy36+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy36+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2236)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2236)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2236)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2236)+12>>2]|0;
 $90 = (_CheckCollisionRecs($$byval_copy36,$sndScream$byval_copy38)|0);
 $91 = ($90|0)==(0);
 $92 = HEAP32[(2288)>>2]|0;
 $93 = ($92|0)!=(0);
 $or$cond5 = $91 | $93;
 do {
  if ($or$cond5) {
   HEAP32[(2292)>>2] = 0;
  } else {
   HEAP32[(2292)>>2] = 1;
   $94 = (_IsKeyPressed(32)|0);
   $95 = ($94|0)==(0);
   if ($95) {
    $96 = (_IsMouseButtonPressed(0)|0);
    $97 = ($96|0)==(0);
    if ($97) {
     break;
    }
    _GetMousePosition($6);
    ;HEAP32[$$byval_copy36>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[$6+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2236)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2236)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2236)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2236)+12>>2]|0;
    $98 = (_CheckCollisionPointRec($$byval_copy36,$sndScream$byval_copy38)|0);
    $99 = ($98|0)==(0);
    if ($99) {
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[2400>>2] = 1;
   HEAP32[1944>>2] = 0;
   HEAP32[1656>>2] = 1;
  }
 } while(0);
 ;HEAP32[$$byval_copy36>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy36+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy36+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2332)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2332)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2332)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2332)+12>>2]|0;
 $100 = (_CheckCollisionRecs($$byval_copy36,$sndScream$byval_copy38)|0);
 $101 = ($100|0)==(0);
 $102 = HEAP32[(2384)>>2]|0;
 $103 = ($102|0)!=(0);
 $or$cond7 = $101 | $103;
 do {
  if ($or$cond7) {
   HEAP32[(2388)>>2] = 0;
   label = 48;
  } else {
   HEAP32[(2388)>>2] = 1;
   $104 = (_IsKeyPressed(32)|0);
   $105 = ($104|0)==(0);
   if ($105) {
    $106 = (_IsMouseButtonPressed(0)|0);
    $107 = ($106|0)==(0);
    if ($107) {
     label = 48;
     break;
    }
    _GetMousePosition($7);
    ;HEAP32[$$byval_copy36>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[$7+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[(2332)>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[(2332)+4>>2]|0;HEAP32[$sndScream$byval_copy38+8>>2]=HEAP32[(2332)+8>>2]|0;HEAP32[$sndScream$byval_copy38+12>>2]=HEAP32[(2332)+12>>2]|0;
    $108 = (_CheckCollisionPointRec($$byval_copy36,$sndScream$byval_copy38)|0);
    $109 = ($108|0)==(0);
    if ($109) {
     label = 48;
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[2400>>2] = 1;
   HEAP32[1656>>2] = 2;
   HEAP32[1944>>2] = 1;
  }
 } while(0);
 if ((label|0) == 48) {
  $$pr = HEAP32[2400>>2]|0;
  $110 = ($$pr|0)==(0);
  if (!($110)) {
   $$pr17 = HEAP32[1944>>2]|0;
   $111 = (($$pr17) + 1)|0;
   HEAP32[1944>>2] = $111;
   $112 = ($$pr17|0)>(179);
   if ($112) {
    $113 = HEAP32[1656>>2]|0;
    if ((($113|0) == 1)) {
     $114 = HEAP32[(2296)>>2]|0;
     $115 = ($114|0)==(0);
     if ($115) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy38);
     }
     HEAP32[(2288)>>2] = 1;
     HEAP32[(2292)>>2] = 0;
    } else if ((($113|0) == 2)) {
     $116 = HEAP32[(2392)>>2]|0;
     $117 = ($116|0)==(0);
     if ($117) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy38>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy38+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy38);
     }
     HEAP32[(2384)>>2] = 1;
     HEAP32[(2388)>>2] = 0;
    }
    HEAP32[2400>>2] = 0;
    HEAP32[1944>>2] = 0;
   }
  }
 }
 $118 = HEAP32[1944>>2]|0;
 $119 = (($118) + 1)|0;
 HEAP32[1944>>2] = $119;
 $120 = $119 & 1;
 $121 = ($120|0)==(0);
 if ($121) {
  $122 = HEAP32[1680>>2]|0;
  $123 = (($122) + 1)|0;
  HEAP32[1680>>2] = $123;
 }
 $124 = HEAP32[1664>>2]|0;
 do {
  if ((($124|0) == 0)) {
   $125 = HEAP32[1680>>2]|0;
   $126 = ($125|0)<(39);
   if ($126) {
    (_strncpy((1688|0),(2408|0),($125|0))|0);
   } else {
    $127 = (_strlen((1688|0))|0);
    $128 = ($127|0)>(0);
    if ($128) {
     $i$019 = 0;
     while(1) {
      $129 = (1688 + ($i$019)|0);
      HEAP8[$129>>0] = 0;
      $130 = (($i$019) + 1)|0;
      $131 = (_strlen((1688|0))|0);
      $132 = ($130|0)<($131|0);
      if ($132) {
       $i$019 = $130;
      } else {
       break;
      }
     }
    }
    HEAP32[1680>>2] = 0;
    HEAP32[1664>>2] = 1;
   }
   $133 = (_IsKeyPressed(257)|0);
   $134 = ($133|0)==(0);
   if (!($134)) {
    HEAP32[1664>>2] = 1;
   }
  } else if ((($124|0) == 1)) {
   $135 = HEAP32[1672>>2]|0;
   $136 = (($135) + 1)|0;
   HEAP32[1672>>2] = $136;
   $137 = (_IsKeyPressed(257)|0);
   $138 = ($137|0)==(0);
   if ($138) {
    $139 = (_IsMouseButtonPressed(0)|0);
    $140 = ($139|0)==(0);
    if ($140) {
     break;
    }
   }
   HEAP32[1664>>2] = 2;
   HEAP32[1672>>2] = 0;
  } else {
   $141 = ($124|0)==(2);
   $142 = HEAP32[1672>>2]|0;
   $143 = (($142) + 1)|0;
   HEAP32[1672>>2] = $143;
   $144 = ($142|0)>(179);
   $or$cond9 = $141 & $144;
   if ($or$cond9) {
    HEAP32[1664>>2] = 3;
   }
  }
 } while(0);
 $145 = +HEAPF32[136>>2];
 $146 = $145 > 200.0;
 if (!($146)) {
  STACKTOP = sp;return;
 }
 $147 = $145 + -200.0;
 $148 = (~~(($147)));
 $149 = ($148|0)>(620);
 $$ = $149 ? 620 : $148;
 HEAP32[2032>>2] = $$;
 STACKTOP = sp;return;
}
function _DrawAisle01Screen() {
 var $$byval_copy33 = 0, $$byval_copy37 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0;
 var $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $doorScrollPos = 0, $doors$byval_copy16 = 0, $font$byval_copy27 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $$byval_copy37 = sp + 132|0;
 $$byval_copy33 = sp + 52|0;
 $font$byval_copy27 = sp + 72|0;
 $doors$byval_copy16 = sp + 108|0;
 $0 = sp + 128|0;
 $doorScrollPos = sp + 224|0;
 $1 = sp + 284|0;
 $2 = sp;
 $3 = sp + 280|0;
 $4 = sp + 16|0;
 $5 = sp + 276|0;
 $6 = sp + 4|0;
 $7 = sp + 272|0;
 $8 = sp + 268|0;
 $9 = sp + 264|0;
 $10 = sp + 288|0;
 $11 = sp + 8|0;
 $12 = sp + 20|0;
 $13 = sp + 24|0;
 $14 = sp + 32|0;
 $15 = sp + 248|0;
 $16 = sp + 40|0;
 $17 = sp + 48|0;
 $18 = sp + 232|0;
 $19 = sp + 236|0;
 $20 = sp + 240|0;
 $21 = sp + 252|0;
 $22 = sp + 256|0;
 $23 = sp + 244|0;
 $24 = sp + 260|0;
 $25 = HEAP32[2032>>2]|0;
 $26 = (0 - ($25))|0;
 HEAP32[$0>>2] = -1;
 ;HEAP32[$$byval_copy33>>2]=HEAP32[2008>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[2008+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[2008+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[2008+12>>2]|0;HEAP32[$$byval_copy33+16>>2]=HEAP32[2008+16>>2]|0;
 ;HEAP8[$$byval_copy37>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawTexture($$byval_copy33,$26,0,$$byval_copy37);
 $27 = HEAP32[2032>>2]|0;
 dest=$$byval_copy37; src=2208; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy37,$27);
 $28 = HEAP32[2032>>2]|0;
 dest=$$byval_copy37; src=2304; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy37,$28);
 $29 = +HEAPF32[2096>>2];
 $30 = HEAP32[2032>>2]|0;
 $31 = (+($30|0));
 $32 = $29 - $31;
 HEAPF32[$doorScrollPos>>2] = $32;
 $33 = ((($doorScrollPos)) + 4|0);
 $34 = HEAP32[(2100)>>2]|0;
 HEAP32[$33>>2] = $34;
 $35 = HEAP32[(2112)>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  HEAP32[$2>>2] = -1;
  ;HEAP32[$doors$byval_copy16>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy16+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy16+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy16+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy16+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy27>>2]=HEAP32[(2116)>>2]|0;HEAP32[$font$byval_copy27+4>>2]=HEAP32[(2116)+4>>2]|0;HEAP32[$font$byval_copy27+8>>2]=HEAP32[(2116)+8>>2]|0;HEAP32[$font$byval_copy27+12>>2]=HEAP32[(2116)+12>>2]|0;
  ;HEAP32[$$byval_copy33>>2]=HEAP32[$doorScrollPos>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$doorScrollPos+4>>2]|0;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$2+3>>0]|0;
  _DrawTextureRec($doors$byval_copy16,$font$byval_copy27,$$byval_copy33,$$byval_copy37);
 } else {
  HEAP8[$1>>0] = 0;
  $37 = ((($1)) + 1|0);
  HEAP8[$37>>0] = -28;
  $38 = ((($1)) + 2|0);
  HEAP8[$38>>0] = 48;
  $39 = ((($1)) + 3|0);
  HEAP8[$39>>0] = -1;
  ;HEAP32[$doors$byval_copy16>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy16+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy16+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy16+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy16+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy27>>2]=HEAP32[(2116)>>2]|0;HEAP32[$font$byval_copy27+4>>2]=HEAP32[(2116)+4>>2]|0;HEAP32[$font$byval_copy27+8>>2]=HEAP32[(2116)+8>>2]|0;HEAP32[$font$byval_copy27+12>>2]=HEAP32[(2116)+12>>2]|0;
  ;HEAP32[$$byval_copy33>>2]=HEAP32[$doorScrollPos>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$doorScrollPos+4>>2]|0;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$1+3>>0]|0;
  _DrawTextureRec($doors$byval_copy16,$font$byval_copy27,$$byval_copy33,$$byval_copy37);
 }
 $40 = +HEAPF32[2040>>2];
 $41 = HEAP32[2032>>2]|0;
 $42 = (+($41|0));
 $43 = $40 - $42;
 $44 = HEAP32[(2044)>>2]|0;
 HEAPF32[$doorScrollPos>>2] = $43;
 HEAP32[$33>>2] = $44;
 $45 = HEAP32[(2056)>>2]|0;
 $46 = ($45|0)==(0);
 if ($46) {
  HEAP32[$4>>2] = -1;
  ;HEAP32[$doors$byval_copy16>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy16+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy16+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy16+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy16+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy27>>2]=HEAP32[(2060)>>2]|0;HEAP32[$font$byval_copy27+4>>2]=HEAP32[(2060)+4>>2]|0;HEAP32[$font$byval_copy27+8>>2]=HEAP32[(2060)+8>>2]|0;HEAP32[$font$byval_copy27+12>>2]=HEAP32[(2060)+12>>2]|0;
  ;HEAP32[$$byval_copy33>>2]=HEAP32[$doorScrollPos>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$doorScrollPos+4>>2]|0;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$4+3>>0]|0;
  _DrawTextureRec($doors$byval_copy16,$font$byval_copy27,$$byval_copy33,$$byval_copy37);
 } else {
  HEAP8[$3>>0] = 0;
  $47 = ((($3)) + 1|0);
  HEAP8[$47>>0] = -28;
  $48 = ((($3)) + 2|0);
  HEAP8[$48>>0] = 48;
  $49 = ((($3)) + 3|0);
  HEAP8[$49>>0] = -1;
  ;HEAP32[$doors$byval_copy16>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy16+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy16+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy16+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy16+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy27>>2]=HEAP32[(2060)>>2]|0;HEAP32[$font$byval_copy27+4>>2]=HEAP32[(2060)+4>>2]|0;HEAP32[$font$byval_copy27+8>>2]=HEAP32[(2060)+8>>2]|0;HEAP32[$font$byval_copy27+12>>2]=HEAP32[(2060)+12>>2]|0;
  ;HEAP32[$$byval_copy33>>2]=HEAP32[$doorScrollPos>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$doorScrollPos+4>>2]|0;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$3+3>>0]|0;
  _DrawTextureRec($doors$byval_copy16,$font$byval_copy27,$$byval_copy33,$$byval_copy37);
 }
 $50 = +HEAPF32[2152>>2];
 $51 = HEAP32[2032>>2]|0;
 $52 = (+($51|0));
 $53 = $50 - $52;
 $54 = HEAP32[(2156)>>2]|0;
 HEAPF32[$doorScrollPos>>2] = $53;
 HEAP32[$33>>2] = $54;
 $55 = HEAP32[(2168)>>2]|0;
 $56 = ($55|0)==(0);
 if ($56) {
  HEAP32[$6>>2] = -1;
  ;HEAP32[$doors$byval_copy16>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy16+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy16+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy16+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy16+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy27>>2]=HEAP32[(2172)>>2]|0;HEAP32[$font$byval_copy27+4>>2]=HEAP32[(2172)+4>>2]|0;HEAP32[$font$byval_copy27+8>>2]=HEAP32[(2172)+8>>2]|0;HEAP32[$font$byval_copy27+12>>2]=HEAP32[(2172)+12>>2]|0;
  ;HEAP32[$$byval_copy33>>2]=HEAP32[$doorScrollPos>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$doorScrollPos+4>>2]|0;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$6+3>>0]|0;
  _DrawTextureRec($doors$byval_copy16,$font$byval_copy27,$$byval_copy33,$$byval_copy37);
 } else {
  HEAP8[$5>>0] = 0;
  $57 = ((($5)) + 1|0);
  HEAP8[$57>>0] = -28;
  $58 = ((($5)) + 2|0);
  HEAP8[$58>>0] = 48;
  $59 = ((($5)) + 3|0);
  HEAP8[$59>>0] = -1;
  ;HEAP32[$doors$byval_copy16>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy16+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy16+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy16+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy16+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy27>>2]=HEAP32[(2172)>>2]|0;HEAP32[$font$byval_copy27+4>>2]=HEAP32[(2172)+4>>2]|0;HEAP32[$font$byval_copy27+8>>2]=HEAP32[(2172)+8>>2]|0;HEAP32[$font$byval_copy27+12>>2]=HEAP32[(2172)+12>>2]|0;
  ;HEAP32[$$byval_copy33>>2]=HEAP32[$doorScrollPos>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$doorScrollPos+4>>2]|0;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$5+3>>0]|0;
  _DrawTextureRec($doors$byval_copy16,$font$byval_copy27,$$byval_copy33,$$byval_copy37);
 }
 $60 = HEAP32[1664>>2]|0;
 $61 = ($60|0)<(2);
 if ($61) {
  $62 = (_GetScreenWidth()|0);
  HEAP8[$8>>0] = -56;
  $63 = ((($8)) + 1|0);
  HEAP8[$63>>0] = -56;
  $64 = ((($8)) + 2|0);
  HEAP8[$64>>0] = -56;
  $65 = ((($8)) + 3|0);
  HEAP8[$65>>0] = -1;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$8+3>>0]|0;
  _Fade($7,$$byval_copy37,0.5);
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$7+3>>0]|0;
  _DrawRectangle(0,40,$62,200,$$byval_copy37);
 } else {
  $66 = ($60|0)==(2);
  if ($66) {
   $67 = (_GetScreenWidth()|0);
   HEAP8[$10>>0] = -56;
   $68 = ((($10)) + 1|0);
   HEAP8[$68>>0] = -56;
   $69 = ((($10)) + 2|0);
   HEAP8[$69>>0] = -56;
   $70 = ((($10)) + 3|0);
   HEAP8[$70>>0] = -1;
   ;HEAP8[$$byval_copy37>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$10+3>>0]|0;
   _Fade($9,$$byval_copy37,0.5);
   ;HEAP8[$$byval_copy37>>0]=HEAP8[$9>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$9+3>>0]|0;
   _DrawRectangle(0,80,$67,100,$$byval_copy37);
  }
 }
 $71 = HEAP32[1664>>2]|0;
 if ((($71|0) == 1)) {
  HEAPF32[$13>>2] = 100.0;
  $74 = ((($13)) + 4|0);
  HEAPF32[$74>>2] = 80.0;
  $75 = HEAP32[(68)>>2]|0;
  HEAP32[$14>>2] = -1;
  dest=$font$byval_copy27; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy33>>2]=HEAP32[$13>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$13+4>>2]|0;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$14>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$14+3>>0]|0;
  _DrawTextEx($font$byval_copy27,2408,$$byval_copy33,$75,2,$$byval_copy37);
  $76 = HEAP32[1672>>2]|0;
  $77 = (($76|0) / 30)&-1;
  $78 = $77 & 1;
  $79 = ($78|0)==(0);
  if ($79) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $80 = (_GetScreenWidth()|0);
  $81 = (($80) + -280)|0;
  HEAP8[$15>>0] = 0;
  $82 = ((($15)) + 1|0);
  HEAP8[$82>>0] = 0;
  $83 = ((($15)) + 2|0);
  HEAP8[$83>>0] = 0;
  $84 = ((($15)) + 3|0);
  HEAP8[$84>>0] = -1;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$15+3>>0]|0;
  _DrawText(8608,$81,200,20,$$byval_copy37);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($71|0) == 0)) {
  HEAPF32[$11>>2] = 100.0;
  $72 = ((($11)) + 4|0);
  HEAPF32[$72>>2] = 80.0;
  $73 = HEAP32[(68)>>2]|0;
  HEAP32[$12>>2] = -1;
  dest=$font$byval_copy27; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy33>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$11+4>>2]|0;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$12>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$12+3>>0]|0;
  _DrawTextEx($font$byval_copy27,1688,$$byval_copy33,$73,2,$$byval_copy37);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($71|0) == 2)) {
  $85 = HEAP32[1672>>2]|0;
  $86 = (($85|0) / 30)&-1;
  $87 = $86 & 1;
  $88 = ($87|0)==(0);
  if ($88) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  HEAPF32[$16>>2] = 300.0;
  $89 = ((($16)) + 4|0);
  HEAPF32[$89>>2] = 95.0;
  $90 = HEAP32[(68)>>2]|0;
  $91 = $90 << 1;
  HEAP32[$17>>2] = -1;
  dest=$font$byval_copy27; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy33>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$16+4>>2]|0;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$17+3>>0]|0;
  _DrawTextEx($font$byval_copy27,8488,$$byval_copy33,$91,2,$$byval_copy37);
  HEAP8[$19>>0] = -26;
  $92 = ((($19)) + 1|0);
  HEAP8[$92>>0] = 41;
  $93 = ((($19)) + 2|0);
  HEAP8[$93>>0] = 55;
  $94 = ((($19)) + 3|0);
  HEAP8[$94>>0] = -1;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$19>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$19+3>>0]|0;
  _Fade($18,$$byval_copy37,0.60000002384185791);
  ;HEAP32[$$byval_copy33>>2]=HEAP32[(2236)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(2236)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(2236)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(2236)+12>>2]|0;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$18>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$18+3>>0]|0;
  _DrawRectangleRec($$byval_copy33,$$byval_copy37);
  HEAP8[$21>>0] = -26;
  $95 = ((($21)) + 1|0);
  HEAP8[$95>>0] = 41;
  $96 = ((($21)) + 2|0);
  HEAP8[$96>>0] = 55;
  $97 = ((($21)) + 3|0);
  HEAP8[$97>>0] = -1;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$21>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$21+3>>0]|0;
  _Fade($20,$$byval_copy37,0.60000002384185791);
  ;HEAP32[$$byval_copy33>>2]=HEAP32[(2332)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(2332)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(2332)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(2332)+12>>2]|0;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$20>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$20+3>>0]|0;
  _DrawRectangleRec($$byval_copy33,$$byval_copy37);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else {
  $98 = HEAP32[1648>>2]|0;
  $99 = ($98|0)==(0);
  if ($99) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $100 = HEAP32[1672>>2]|0;
  $101 = (($100|0) / 30)&-1;
  $102 = $101 & 1;
  $103 = ($102|0)==(0);
  if ($103) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $104 = (_GetScreenWidth()|0);
  HEAP8[$23>>0] = -56;
  $105 = ((($23)) + 1|0);
  HEAP8[$105>>0] = -56;
  $106 = ((($23)) + 2|0);
  HEAP8[$106>>0] = -56;
  $107 = ((($23)) + 3|0);
  HEAP8[$107>>0] = -1;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$23>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$23+3>>0]|0;
  _Fade($22,$$byval_copy37,0.5);
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$22>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$22+3>>0]|0;
  _DrawRectangle(0,0,$104,50,$$byval_copy37);
  HEAP8[$24>>0] = 0;
  $108 = ((($24)) + 1|0);
  HEAP8[$108>>0] = 0;
  $109 = ((($24)) + 2|0);
  HEAP8[$109>>0] = 0;
  $110 = ((($24)) + 3|0);
  HEAP8[$110>>0] = -1;
  ;HEAP8[$$byval_copy37>>0]=HEAP8[$24>>0]|0;HEAP8[$$byval_copy37+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$$byval_copy37+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$$byval_copy37+3>>0]=HEAP8[$24+3>>0]|0;
  _DrawText(8504,420,15,20,$$byval_copy37);
  _DrawPlayer();
  STACKTOP = sp;return;
 }
}
function _UnloadAisle01Screen() {
 var $picture$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $picture$byval_copy = sp;
 ;HEAP32[$picture$byval_copy>>2]=HEAP32[2008>>2]|0;HEAP32[$picture$byval_copy+4>>2]=HEAP32[2008+4>>2]|0;HEAP32[$picture$byval_copy+8>>2]=HEAP32[2008+8>>2]|0;HEAP32[$picture$byval_copy+12>>2]=HEAP32[2008+12>>2]|0;HEAP32[$picture$byval_copy+16>>2]=HEAP32[2008+16>>2]|0;
 _UnloadTexture($picture$byval_copy);
 dest=$picture$byval_copy; src=2208; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($picture$byval_copy);
 dest=$picture$byval_copy; src=2304; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($picture$byval_copy);
 STACKTOP = sp;return;
}
function _FinishAisle01Screen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1952>>2]|0;
 return ($0|0);
}
function _InitAisle02Screen() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 80|0;
 $1 = sp;
 $2 = sp + 20|0;
 $3 = sp + 40|0;
 $4 = sp + 60|0;
 _ResetPlayer();
 HEAP32[2664>>2] = 0;
 HEAP32[2672>>2] = -1;
 HEAP32[2680>>2] = 0;
 HEAP32[2688>>2] = 0;
 HEAP32[2696>>2] = 0;
 _memset((2704|0),0,256)|0;
 HEAP32[2960>>2] = 0;
 HEAP32[2968>>2] = 0;
 _LoadTexture($0,2976);
 ;HEAP32[3024>>2]=HEAP32[$0>>2]|0;HEAP32[3024+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[3024+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[3024+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[3024+16>>2]=HEAP32[$0+16>>2]|0;
 $5 = +HEAPF32[136>>2];
 $6 = $5 + -200.0;
 $7 = (~~(($6)));
 HEAP32[3048>>2] = $7;
 HEAPF32[3056>>2] = -10.0;
 HEAPF32[(3060)>>2] = 136.0;
 HEAP32[(3064)>>2] = 0;
 HEAP32[(3068)>>2] = 1;
 $8 = HEAP32[(92)>>2]|0;
 $9 = (($8|0) / 3)&-1;
 $10 = HEAP32[(3064)>>2]|0;
 $11 = Math_imul($10, $9)|0;
 $12 = HEAP32[(96)>>2]|0;
 $13 = (($12|0) / 2)&-1;
 HEAP32[(3076)>>2] = $11;
 HEAP32[(3080)>>2] = $13;
 HEAP32[(3084)>>2] = $9;
 HEAP32[(3088)>>2] = $13;
 $14 = +HEAPF32[3056>>2];
 $15 = (~~(($14)));
 $16 = +HEAPF32[(3060)>>2];
 $17 = (~~(($16)));
 $18 = HEAP32[(92)>>2]|0;
 $19 = (($18|0) / 3)&-1;
 $20 = HEAP32[(96)>>2]|0;
 $21 = (($20|0) / 2)&-1;
 HEAP32[(3092)>>2] = $15;
 HEAP32[(3096)>>2] = $17;
 HEAP32[(3100)>>2] = $19;
 HEAP32[(3104)>>2] = $21;
 HEAP32[(3072)>>2] = 0;
 HEAPF32[3112>>2] = 1520.0;
 HEAPF32[(3116)>>2] = 300.0;
 _LoadTexture($1,3208);
 ;HEAP32[(3120)>>2]=HEAP32[$1>>2]|0;HEAP32[(3120)+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[(3120)+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[(3120)+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[(3120)+16>>2]=HEAP32[$1+16>>2]|0;
 HEAP32[(3180)>>2] = 0;
 HEAP32[(3176)>>2] = 0;
 HEAP32[(3188)>>2] = 4;
 $22 = +HEAPF32[3112>>2];
 $23 = $22 + 200.0;
 $24 = (~~(($23)));
 $25 = +HEAPF32[(3116)>>2];
 $26 = (~~(($25)));
 HEAP32[(3140)>>2] = $24;
 HEAP32[(3144)>>2] = $26;
 HEAP32[(3148)>>2] = 90;
 HEAP32[(3152)>>2] = 380;
 $27 = HEAP32[(3124)>>2]|0;
 $28 = HEAP32[(3188)>>2]|0;
 $29 = (($27|0) / ($28|0))&-1;
 $30 = HEAP32[(3128)>>2]|0;
 HEAP32[(3156)>>2] = 0;
 HEAP32[(3160)>>2] = 0;
 HEAP32[(3164)>>2] = $29;
 HEAP32[(3168)>>2] = $30;
 HEAP32[(3196)>>2] = 0;
 HEAP32[(3192)>>2] = 0;
 HEAP32[(3200)>>2] = 1;
 HEAPF32[3256>>2] = 1400.0;
 HEAPF32[(3260)>>2] = 404.0;
 _LoadTexture($2,8176);
 ;HEAP32[(3264)>>2]=HEAP32[$2>>2]|0;HEAP32[(3264)+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[(3264)+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[(3264)+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[(3264)+16>>2]=HEAP32[$2+16>>2]|0;
 HEAP32[(3324)>>2] = 0;
 HEAP32[(3320)>>2] = 0;
 HEAP32[(3332)>>2] = 4;
 $31 = +HEAPF32[3256>>2];
 $32 = $31 + 50.0;
 $33 = (~~(($32)));
 $34 = +HEAPF32[(3260)>>2];
 $35 = $34 + 30.0;
 $36 = (~~(($35)));
 HEAP32[(3284)>>2] = $33;
 HEAP32[(3288)>>2] = $36;
 HEAP32[(3292)>>2] = 120;
 HEAP32[(3296)>>2] = 190;
 $37 = HEAP32[(3268)>>2]|0;
 $38 = HEAP32[(3332)>>2]|0;
 $39 = (($37|0) / ($38|0))&-1;
 $40 = HEAP32[(3272)>>2]|0;
 HEAP32[(3300)>>2] = 0;
 HEAP32[(3304)>>2] = 0;
 HEAP32[(3308)>>2] = $39;
 HEAP32[(3312)>>2] = $40;
 HEAP32[(3340)>>2] = 0;
 HEAP32[(3336)>>2] = 0;
 HEAP32[(3344)>>2] = 0;
 HEAPF32[3352>>2] = 837.0;
 HEAPF32[(3356)>>2] = 162.0;
 _LoadTexture($3,5744);
 ;HEAP32[(3360)>>2]=HEAP32[$3>>2]|0;HEAP32[(3360)+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[(3360)+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[(3360)+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[(3360)+16>>2]=HEAP32[$3+16>>2]|0;
 HEAP32[(3420)>>2] = 0;
 HEAP32[(3416)>>2] = 0;
 HEAP32[(3428)>>2] = 4;
 $41 = +HEAPF32[3352>>2];
 $42 = $41 + 44.0;
 $43 = (~~(($42)));
 $44 = +HEAPF32[(3356)>>2];
 $45 = (~~(($44)));
 HEAP32[(3380)>>2] = $43;
 HEAP32[(3384)>>2] = $45;
 HEAP32[(3388)>>2] = 174;
 HEAP32[(3392)>>2] = 264;
 $46 = HEAP32[(3364)>>2]|0;
 $47 = HEAP32[(3428)>>2]|0;
 $48 = (($46|0) / ($47|0))&-1;
 $49 = HEAP32[(3368)>>2]|0;
 HEAP32[(3396)>>2] = 0;
 HEAP32[(3400)>>2] = 0;
 HEAP32[(3404)>>2] = $48;
 HEAP32[(3408)>>2] = $49;
 HEAP32[(3436)>>2] = 0;
 HEAP32[(3432)>>2] = 0;
 HEAP32[(3440)>>2] = 1;
 HEAPF32[3448>>2] = 388.0;
 HEAPF32[(3452)>>2] = 423.0;
 _LoadTexture($4,3544);
 ;HEAP32[(3456)>>2]=HEAP32[$4>>2]|0;HEAP32[(3456)+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[(3456)+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[(3456)+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[(3456)+16>>2]=HEAP32[$4+16>>2]|0;
 HEAP32[(3516)>>2] = 0;
 HEAP32[(3512)>>2] = 0;
 HEAP32[(3524)>>2] = 4;
 $50 = +HEAPF32[3448>>2];
 $51 = $50 + 44.0;
 $52 = (~~(($51)));
 $53 = +HEAPF32[(3452)>>2];
 $54 = $53 + 70.0;
 $55 = (~~(($54)));
 HEAP32[(3476)>>2] = $52;
 HEAP32[(3480)>>2] = $55;
 HEAP32[(3484)>>2] = 220;
 HEAP32[(3488)>>2] = 120;
 $56 = HEAP32[(3460)>>2]|0;
 $57 = HEAP32[(3524)>>2]|0;
 $58 = (($56|0) / ($57|0))&-1;
 $59 = HEAP32[(3464)>>2]|0;
 HEAP32[(3492)>>2] = 0;
 HEAP32[(3496)>>2] = 0;
 HEAP32[(3500)>>2] = $58;
 HEAP32[(3504)>>2] = $59;
 HEAP32[(3532)>>2] = 0;
 HEAP32[(3528)>>2] = 0;
 HEAP32[(3536)>>2] = 1;
 STACKTOP = sp;return;
}
function _UpdateAisle02Screen() {
 var $$ = 0, $$20 = 0, $$byval_copy30 = 0, $$pr = 0, $$pr21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$023 = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $sndScream$byval_copy34 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $sndScream$byval_copy34 = sp + 64|0;
 $$byval_copy30 = sp;
 $0 = sp + 16|0;
 $1 = sp + 24|0;
 $2 = sp + 32|0;
 $3 = sp + 40|0;
 $4 = sp + 48|0;
 $5 = sp + 56|0;
 $6 = +HEAPF32[3056>>2];
 $7 = HEAP32[3048>>2]|0;
 $8 = (+($7|0));
 $9 = $6 - $8;
 $10 = (~~(($9)));
 HEAP32[(3092)>>2] = $10;
 $11 = HEAP32[(208)>>2]|0;
 $12 = ($11|0)==(0);
 do {
  if (!($12)) {
   _GetMousePosition($0);
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$0+4>>2]|0;
   ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3092)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3092)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3092)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3092)+12>>2]|0;
   $13 = (_CheckCollisionPointRec($$byval_copy30,$sndScream$byval_copy34)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    ;HEAP32[$$byval_copy30>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(144)+12>>2]|0;
    ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3092)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3092)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3092)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3092)+12>>2]|0;
    $15 = (_CheckCollisionRecs($$byval_copy30,$sndScream$byval_copy34)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     HEAP32[(3072)>>2] = 0;
     break;
    }
   }
   HEAP32[(3072)>>2] = 1;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(144)+12>>2]|0;
   ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3092)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3092)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3092)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3092)+12>>2]|0;
   $17 = (_CheckCollisionRecs($$byval_copy30,$sndScream$byval_copy34)|0);
   $18 = ($17|0)==(0);
   if (!($18)) {
    $19 = (_IsMouseButtonPressed(0)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     label = 8;
    } else {
     _GetMousePosition($1);
     ;HEAP32[$$byval_copy30>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$1+4>>2]|0;
     ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3092)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3092)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3092)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3092)+12>>2]|0;
     $21 = (_CheckCollisionPointRec($$byval_copy30,$sndScream$byval_copy34)|0);
     $22 = ($21|0)==(0);
     if ($22) {
      label = 8;
     }
    }
    if ((label|0) == 8) {
     $23 = (_IsKeyPressed(32)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      break;
     }
    }
    $25 = HEAP32[(3068)>>2]|0;
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP32[2968>>2] = 1;
     break;
    } else {
     HEAP32[(3080)>>2] = 0;
     HEAP32[(3068)>>2] = 0;
     ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[112>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[112+4>>2]|0;
     _PlaySound($sndScream$byval_copy34);
     break;
    }
   }
  }
 } while(0);
 $27 = HEAP32[2680>>2]|0;
 $28 = ($27|0)>(2);
 if ($28) {
  _UpdatePlayer();
  _UpdateMonster(3112);
  _UpdateMonster(3256);
  _UpdateMonster(3352);
  _UpdateMonster(3448);
 }
 $29 = +HEAPF32[3112>>2];
 $30 = $29 + 200.0;
 $31 = HEAP32[3048>>2]|0;
 $32 = (+($31|0));
 $33 = $30 - $32;
 $34 = (~~(($33)));
 HEAP32[(3140)>>2] = $34;
 $35 = +HEAPF32[3256>>2];
 $36 = $35 + 50.0;
 $37 = HEAP32[3048>>2]|0;
 $38 = (+($37|0));
 $39 = $36 - $38;
 $40 = (~~(($39)));
 HEAP32[(3284)>>2] = $40;
 $41 = +HEAPF32[3352>>2];
 $42 = $41 + 44.0;
 $43 = HEAP32[3048>>2]|0;
 $44 = (+($43|0));
 $45 = $42 - $44;
 $46 = (~~(($45)));
 HEAP32[(3380)>>2] = $46;
 $47 = +HEAPF32[3448>>2];
 $48 = $47 + 44.0;
 $49 = HEAP32[3048>>2]|0;
 $50 = (+($49|0));
 $51 = $48 - $50;
 $52 = (~~(($51)));
 HEAP32[(3476)>>2] = $52;
 ;HEAP32[$$byval_copy30>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3140)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3140)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3140)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3140)+12>>2]|0;
 $53 = (_CheckCollisionRecs($$byval_copy30,$sndScream$byval_copy34)|0);
 $54 = ($53|0)==(0);
 $55 = HEAP32[(3192)>>2]|0;
 $56 = ($55|0)!=(0);
 $or$cond = $54 | $56;
 if ($or$cond) {
  ;HEAP32[$$byval_copy30>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(144)+12>>2]|0;
  ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3284)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3284)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3284)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3284)+12>>2]|0;
  $57 = (_CheckCollisionRecs($$byval_copy30,$sndScream$byval_copy34)|0);
  $58 = ($57|0)==(0);
  $59 = HEAP32[(3336)>>2]|0;
  $60 = ($59|0)!=(0);
  $or$cond3 = $58 | $60;
  if ($or$cond3) {
   ;HEAP32[$$byval_copy30>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(144)+12>>2]|0;
   ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3380)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3380)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3380)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3380)+12>>2]|0;
   $61 = (_CheckCollisionRecs($$byval_copy30,$sndScream$byval_copy34)|0);
   $62 = ($61|0)==(0);
   $63 = HEAP32[(3432)>>2]|0;
   $64 = ($63|0)!=(0);
   $or$cond5 = $62 | $64;
   if ($or$cond5) {
    ;HEAP32[$$byval_copy30>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(144)+12>>2]|0;
    ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3476)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3476)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3476)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3476)+12>>2]|0;
    $65 = (_CheckCollisionRecs($$byval_copy30,$sndScream$byval_copy34)|0);
    $66 = ($65|0)==(0);
    $67 = HEAP32[(3528)>>2]|0;
    $68 = ($67|0)!=(0);
    $or$cond7 = $66 | $68;
    $69 = $or$cond7&1;
    $$20 = $69 ^ 1;
    $storemerge = $$20;
   } else {
    $storemerge = 1;
   }
  } else {
   $storemerge = 1;
  }
 } else {
  $storemerge = 1;
 }
 HEAP32[2664>>2] = $storemerge;
 ;HEAP32[$$byval_copy30>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3140)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3140)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3140)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3140)+12>>2]|0;
 $70 = (_CheckCollisionRecs($$byval_copy30,$sndScream$byval_copy34)|0);
 $71 = ($70|0)==(0);
 $72 = HEAP32[(3192)>>2]|0;
 $73 = ($72|0)!=(0);
 $or$cond9 = $71 | $73;
 do {
  if ($or$cond9) {
   HEAP32[(3196)>>2] = 0;
  } else {
   HEAP32[(3196)>>2] = 1;
   $74 = (_IsKeyPressed(32)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    $76 = (_IsMouseButtonPressed(0)|0);
    $77 = ($76|0)==(0);
    if ($77) {
     break;
    }
    _GetMousePosition($2);
    ;HEAP32[$$byval_copy30>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$2+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3140)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3140)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3140)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3140)+12>>2]|0;
    $78 = (_CheckCollisionPointRec($$byval_copy30,$sndScream$byval_copy34)|0);
    $79 = ($78|0)==(0);
    if ($79) {
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[3584>>2] = 1;
   HEAP32[2960>>2] = 0;
   HEAP32[2672>>2] = 1;
  }
 } while(0);
 ;HEAP32[$$byval_copy30>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3284)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3284)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3284)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3284)+12>>2]|0;
 $80 = (_CheckCollisionRecs($$byval_copy30,$sndScream$byval_copy34)|0);
 $81 = ($80|0)==(0);
 $82 = HEAP32[(3336)>>2]|0;
 $83 = ($82|0)!=(0);
 $or$cond11 = $81 | $83;
 do {
  if ($or$cond11) {
   HEAP32[(3340)>>2] = 0;
  } else {
   HEAP32[(3340)>>2] = 1;
   $84 = (_IsKeyPressed(32)|0);
   $85 = ($84|0)==(0);
   if ($85) {
    $86 = (_IsMouseButtonPressed(0)|0);
    $87 = ($86|0)==(0);
    if ($87) {
     break;
    }
    _GetMousePosition($3);
    ;HEAP32[$$byval_copy30>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$3+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3284)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3284)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3284)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3284)+12>>2]|0;
    $88 = (_CheckCollisionPointRec($$byval_copy30,$sndScream$byval_copy34)|0);
    $89 = ($88|0)==(0);
    if ($89) {
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[3584>>2] = 1;
   HEAP32[2960>>2] = 0;
   HEAP32[2672>>2] = 2;
  }
 } while(0);
 ;HEAP32[$$byval_copy30>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3380)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3380)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3380)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3380)+12>>2]|0;
 $90 = (_CheckCollisionRecs($$byval_copy30,$sndScream$byval_copy34)|0);
 $91 = ($90|0)==(0);
 $92 = HEAP32[(3432)>>2]|0;
 $93 = ($92|0)!=(0);
 $or$cond13 = $91 | $93;
 do {
  if ($or$cond13) {
   HEAP32[(3436)>>2] = 0;
  } else {
   HEAP32[(3436)>>2] = 1;
   $94 = (_IsKeyPressed(32)|0);
   $95 = ($94|0)==(0);
   if ($95) {
    $96 = (_IsMouseButtonPressed(0)|0);
    $97 = ($96|0)==(0);
    if ($97) {
     break;
    }
    _GetMousePosition($4);
    ;HEAP32[$$byval_copy30>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$4+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3380)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3380)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3380)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3380)+12>>2]|0;
    $98 = (_CheckCollisionPointRec($$byval_copy30,$sndScream$byval_copy34)|0);
    $99 = ($98|0)==(0);
    if ($99) {
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[3584>>2] = 1;
   HEAP32[2960>>2] = 0;
   HEAP32[2672>>2] = 3;
  }
 } while(0);
 ;HEAP32[$$byval_copy30>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3476)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3476)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3476)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3476)+12>>2]|0;
 $100 = (_CheckCollisionRecs($$byval_copy30,$sndScream$byval_copy34)|0);
 $101 = ($100|0)==(0);
 $102 = HEAP32[(3528)>>2]|0;
 $103 = ($102|0)!=(0);
 $or$cond15 = $101 | $103;
 do {
  if ($or$cond15) {
   HEAP32[(3532)>>2] = 0;
   label = 42;
  } else {
   HEAP32[(3532)>>2] = 1;
   $104 = (_IsKeyPressed(32)|0);
   $105 = ($104|0)==(0);
   if ($105) {
    $106 = (_IsMouseButtonPressed(0)|0);
    $107 = ($106|0)==(0);
    if ($107) {
     label = 42;
     break;
    }
    _GetMousePosition($5);
    ;HEAP32[$$byval_copy30>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$5+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(3476)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(3476)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(3476)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(3476)+12>>2]|0;
    $108 = (_CheckCollisionPointRec($$byval_copy30,$sndScream$byval_copy34)|0);
    $109 = ($108|0)==(0);
    if ($109) {
     label = 42;
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[3584>>2] = 1;
   HEAP32[2672>>2] = 4;
   HEAP32[2960>>2] = 1;
  }
 } while(0);
 if ((label|0) == 42) {
  $$pr = HEAP32[3584>>2]|0;
  $110 = ($$pr|0)==(0);
  if (!($110)) {
   $$pr21 = HEAP32[2960>>2]|0;
   $111 = (($$pr21) + 1)|0;
   HEAP32[2960>>2] = $111;
   $112 = ($$pr21|0)>(179);
   if ($112) {
    $113 = HEAP32[2672>>2]|0;
    if ((($113|0) == 3)) {
     $118 = HEAP32[(3440)>>2]|0;
     $119 = ($118|0)==(0);
     if ($119) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy34);
     }
     HEAP32[(3432)>>2] = 1;
     HEAP32[(3436)>>2] = 0;
    } else if ((($113|0) == 4)) {
     $120 = HEAP32[(3536)>>2]|0;
     $121 = ($120|0)==(0);
     if ($121) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy34);
     }
     HEAP32[(3528)>>2] = 1;
     HEAP32[(3532)>>2] = 0;
    } else if ((($113|0) == 1)) {
     $114 = HEAP32[(3200)>>2]|0;
     $115 = ($114|0)==(0);
     if ($115) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy34);
     }
     HEAP32[(3192)>>2] = 1;
     HEAP32[(3196)>>2] = 0;
    } else if ((($113|0) == 2)) {
     $116 = HEAP32[(3344)>>2]|0;
     $117 = ($116|0)==(0);
     if ($117) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy34);
     }
     HEAP32[(3336)>>2] = 1;
     HEAP32[(3340)>>2] = 0;
    }
    HEAP32[3584>>2] = 0;
    HEAP32[2960>>2] = 0;
   }
  }
 }
 $122 = HEAP32[2960>>2]|0;
 $123 = (($122) + 1)|0;
 HEAP32[2960>>2] = $123;
 $124 = $123 & 1;
 $125 = ($124|0)==(0);
 if ($125) {
  $126 = HEAP32[2696>>2]|0;
  $127 = (($126) + 1)|0;
  HEAP32[2696>>2] = $127;
 }
 $128 = HEAP32[2680>>2]|0;
 do {
  if ((($128|0) == 1)) {
   $139 = HEAP32[2688>>2]|0;
   $140 = (($139) + 1)|0;
   HEAP32[2688>>2] = $140;
   $141 = (_IsKeyPressed(257)|0);
   $142 = ($141|0)==(0);
   if ($142) {
    $143 = (_IsMouseButtonPressed(0)|0);
    $144 = ($143|0)==(0);
    if ($144) {
     break;
    }
   }
   HEAP32[2680>>2] = 2;
   HEAP32[2688>>2] = 0;
  } else if ((($128|0) == 0)) {
   $129 = HEAP32[2696>>2]|0;
   $130 = ($129|0)<(61);
   if ($130) {
    (_strncpy((2704|0),(3592|0),($129|0))|0);
   } else {
    $131 = (_strlen((2704|0))|0);
    $132 = ($131|0)>(0);
    if ($132) {
     $i$023 = 0;
     while(1) {
      $133 = (2704 + ($i$023)|0);
      HEAP8[$133>>0] = 0;
      $134 = (($i$023) + 1)|0;
      $135 = (_strlen((2704|0))|0);
      $136 = ($134|0)<($135|0);
      if ($136) {
       $i$023 = $134;
      } else {
       break;
      }
     }
    }
    HEAP32[2696>>2] = 0;
    HEAP32[2680>>2] = 1;
   }
   $137 = (_IsKeyPressed(257)|0);
   $138 = ($137|0)==(0);
   if (!($138)) {
    HEAP32[2680>>2] = 1;
   }
  } else {
   $145 = ($128|0)==(2);
   $146 = HEAP32[2688>>2]|0;
   $147 = (($146) + 1)|0;
   HEAP32[2688>>2] = $147;
   $148 = ($146|0)>(179);
   $or$cond17 = $145 & $148;
   if ($or$cond17) {
    HEAP32[2680>>2] = 3;
   }
  }
 } while(0);
 $149 = +HEAPF32[136>>2];
 $150 = $149 > 200.0;
 if (!($150)) {
  STACKTOP = sp;return;
 }
 $151 = $149 + -200.0;
 $152 = (~~(($151)));
 $153 = ($152|0)>(620);
 $$ = $153 ? 620 : $152;
 HEAP32[3048>>2] = $$;
 STACKTOP = sp;return;
}
function _DrawAisle02Screen() {
 var $$byval_copy25 = 0, $$byval_copy29 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $doorScrollPos = 0, $doors$byval_copy2 = 0, $font$byval_copy13 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $$byval_copy29 = sp + 36|0;
 $$byval_copy25 = sp + 164|0;
 $font$byval_copy13 = sp + 184|0;
 $doors$byval_copy2 = sp + 144|0;
 $0 = sp + 32|0;
 $doorScrollPos = sp + 24|0;
 $1 = sp + 268|0;
 $2 = sp + 4|0;
 $3 = sp + 272|0;
 $4 = sp + 276|0;
 $5 = sp + 284|0;
 $6 = sp + 280|0;
 $7 = sp + 16|0;
 $8 = sp;
 $9 = sp + 8|0;
 $10 = sp + 140|0;
 $11 = sp + 264|0;
 $12 = sp + 128|0;
 $13 = sp + 136|0;
 $14 = sp + 260|0;
 $15 = sp + 224|0;
 $16 = sp + 232|0;
 $17 = sp + 236|0;
 $18 = sp + 220|0;
 $19 = sp + 228|0;
 $20 = sp + 240|0;
 $21 = sp + 244|0;
 $22 = sp + 248|0;
 $23 = sp + 252|0;
 $24 = sp + 256|0;
 $25 = HEAP32[3048>>2]|0;
 $26 = (0 - ($25))|0;
 HEAP32[$0>>2] = -1;
 ;HEAP32[$$byval_copy25>>2]=HEAP32[3024>>2]|0;HEAP32[$$byval_copy25+4>>2]=HEAP32[3024+4>>2]|0;HEAP32[$$byval_copy25+8>>2]=HEAP32[3024+8>>2]|0;HEAP32[$$byval_copy25+12>>2]=HEAP32[3024+12>>2]|0;HEAP32[$$byval_copy25+16>>2]=HEAP32[3024+16>>2]|0;
 ;HEAP8[$$byval_copy29>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawTexture($$byval_copy25,$26,0,$$byval_copy29);
 $27 = HEAP32[3048>>2]|0;
 dest=$$byval_copy29; src=3112; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy29,$27);
 $28 = HEAP32[3048>>2]|0;
 dest=$$byval_copy29; src=3448; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy29,$28);
 $29 = HEAP32[3048>>2]|0;
 dest=$$byval_copy29; src=3352; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy29,$29);
 $30 = HEAP32[3048>>2]|0;
 dest=$$byval_copy29; src=3256; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy29,$30);
 $31 = +HEAPF32[3056>>2];
 $32 = HEAP32[3048>>2]|0;
 $33 = (+($32|0));
 $34 = $31 - $33;
 HEAPF32[$doorScrollPos>>2] = $34;
 $35 = ((($doorScrollPos)) + 4|0);
 $36 = HEAP32[(3060)>>2]|0;
 HEAP32[$35>>2] = $36;
 $37 = HEAP32[(3072)>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  HEAP32[$2>>2] = -1;
  ;HEAP32[$doors$byval_copy2>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy2+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy2+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy2+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy2+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy13>>2]=HEAP32[(3076)>>2]|0;HEAP32[$font$byval_copy13+4>>2]=HEAP32[(3076)+4>>2]|0;HEAP32[$font$byval_copy13+8>>2]=HEAP32[(3076)+8>>2]|0;HEAP32[$font$byval_copy13+12>>2]=HEAP32[(3076)+12>>2]|0;
  ;HEAP32[$$byval_copy25>>2]=HEAP32[$doorScrollPos>>2]|0;HEAP32[$$byval_copy25+4>>2]=HEAP32[$doorScrollPos+4>>2]|0;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$2+3>>0]|0;
  _DrawTextureRec($doors$byval_copy2,$font$byval_copy13,$$byval_copy25,$$byval_copy29);
 } else {
  HEAP8[$1>>0] = 0;
  $39 = ((($1)) + 1|0);
  HEAP8[$39>>0] = -28;
  $40 = ((($1)) + 2|0);
  HEAP8[$40>>0] = 48;
  $41 = ((($1)) + 3|0);
  HEAP8[$41>>0] = -1;
  ;HEAP32[$doors$byval_copy2>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy2+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy2+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy2+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy2+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy13>>2]=HEAP32[(3076)>>2]|0;HEAP32[$font$byval_copy13+4>>2]=HEAP32[(3076)+4>>2]|0;HEAP32[$font$byval_copy13+8>>2]=HEAP32[(3076)+8>>2]|0;HEAP32[$font$byval_copy13+12>>2]=HEAP32[(3076)+12>>2]|0;
  ;HEAP32[$$byval_copy25>>2]=HEAP32[$doorScrollPos>>2]|0;HEAP32[$$byval_copy25+4>>2]=HEAP32[$doorScrollPos+4>>2]|0;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$1+3>>0]|0;
  _DrawTextureRec($doors$byval_copy2,$font$byval_copy13,$$byval_copy25,$$byval_copy29);
 }
 $42 = HEAP32[2680>>2]|0;
 $43 = ($42|0)<(2);
 if ($43) {
  $44 = (_GetScreenWidth()|0);
  HEAP8[$4>>0] = -56;
  $45 = ((($4)) + 1|0);
  HEAP8[$45>>0] = -56;
  $46 = ((($4)) + 2|0);
  HEAP8[$46>>0] = -56;
  $47 = ((($4)) + 3|0);
  HEAP8[$47>>0] = -1;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$4+3>>0]|0;
  _Fade($3,$$byval_copy29,0.5);
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$3+3>>0]|0;
  _DrawRectangle(0,40,$44,200,$$byval_copy29);
 } else {
  $48 = ($42|0)==(2);
  if ($48) {
   $49 = (_GetScreenWidth()|0);
   HEAP8[$6>>0] = -56;
   $50 = ((($6)) + 1|0);
   HEAP8[$50>>0] = -56;
   $51 = ((($6)) + 2|0);
   HEAP8[$51>>0] = -56;
   $52 = ((($6)) + 3|0);
   HEAP8[$52>>0] = -1;
   ;HEAP8[$$byval_copy29>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$6+3>>0]|0;
   _Fade($5,$$byval_copy29,0.5);
   ;HEAP8[$$byval_copy29>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$5+3>>0]|0;
   _DrawRectangle(0,80,$49,100,$$byval_copy29);
  }
 }
 $53 = HEAP32[2680>>2]|0;
 if ((($53|0) == 1)) {
  HEAPF32[$9>>2] = 100.0;
  $56 = ((($9)) + 4|0);
  HEAPF32[$56>>2] = 80.0;
  $57 = HEAP32[(68)>>2]|0;
  HEAP32[$10>>2] = -1;
  dest=$font$byval_copy13; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy25>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy25+4>>2]=HEAP32[$9+4>>2]|0;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$10+3>>0]|0;
  _DrawTextEx($font$byval_copy13,3592,$$byval_copy25,$57,2,$$byval_copy29);
  $58 = HEAP32[2688>>2]|0;
  $59 = (($58|0) / 30)&-1;
  $60 = $59 & 1;
  $61 = ($60|0)==(0);
  if ($61) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $62 = (_GetScreenWidth()|0);
  $63 = (($62) + -280)|0;
  HEAP8[$11>>0] = 0;
  $64 = ((($11)) + 1|0);
  HEAP8[$64>>0] = 0;
  $65 = ((($11)) + 2|0);
  HEAP8[$65>>0] = 0;
  $66 = ((($11)) + 3|0);
  HEAP8[$66>>0] = -1;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$11>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$11+3>>0]|0;
  _DrawText(8608,$63,200,20,$$byval_copy29);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($53|0) == 0)) {
  HEAPF32[$7>>2] = 100.0;
  $54 = ((($7)) + 4|0);
  HEAPF32[$54>>2] = 80.0;
  $55 = HEAP32[(68)>>2]|0;
  HEAP32[$8>>2] = -1;
  dest=$font$byval_copy13; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy25>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy25+4>>2]=HEAP32[$7+4>>2]|0;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$8+3>>0]|0;
  _DrawTextEx($font$byval_copy13,2704,$$byval_copy25,$55,2,$$byval_copy29);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($53|0) == 2)) {
  $67 = HEAP32[2688>>2]|0;
  $68 = (($67|0) / 30)&-1;
  $69 = $68 & 1;
  $70 = ($69|0)==(0);
  if ($70) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  HEAPF32[$12>>2] = 300.0;
  $71 = ((($12)) + 4|0);
  HEAPF32[$71>>2] = 95.0;
  $72 = HEAP32[(68)>>2]|0;
  $73 = $72 << 1;
  HEAP32[$13>>2] = -1;
  dest=$font$byval_copy13; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy25>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy25+4>>2]=HEAP32[$12+4>>2]|0;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$13>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$13+3>>0]|0;
  _DrawTextEx($font$byval_copy13,8488,$$byval_copy25,$73,2,$$byval_copy29);
  HEAP8[$15>>0] = -26;
  $74 = ((($15)) + 1|0);
  HEAP8[$74>>0] = 41;
  $75 = ((($15)) + 2|0);
  HEAP8[$75>>0] = 55;
  $76 = ((($15)) + 3|0);
  HEAP8[$76>>0] = -1;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$15+3>>0]|0;
  _Fade($14,$$byval_copy29,0.60000002384185791);
  ;HEAP32[$$byval_copy25>>2]=HEAP32[(3140)>>2]|0;HEAP32[$$byval_copy25+4>>2]=HEAP32[(3140)+4>>2]|0;HEAP32[$$byval_copy25+8>>2]=HEAP32[(3140)+8>>2]|0;HEAP32[$$byval_copy25+12>>2]=HEAP32[(3140)+12>>2]|0;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$14>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$14+3>>0]|0;
  _DrawRectangleRec($$byval_copy25,$$byval_copy29);
  HEAP8[$17>>0] = -26;
  $77 = ((($17)) + 1|0);
  HEAP8[$77>>0] = 41;
  $78 = ((($17)) + 2|0);
  HEAP8[$78>>0] = 55;
  $79 = ((($17)) + 3|0);
  HEAP8[$79>>0] = -1;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$17+3>>0]|0;
  _Fade($16,$$byval_copy29,0.60000002384185791);
  ;HEAP32[$$byval_copy25>>2]=HEAP32[(3476)>>2]|0;HEAP32[$$byval_copy25+4>>2]=HEAP32[(3476)+4>>2]|0;HEAP32[$$byval_copy25+8>>2]=HEAP32[(3476)+8>>2]|0;HEAP32[$$byval_copy25+12>>2]=HEAP32[(3476)+12>>2]|0;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$16>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$16+3>>0]|0;
  _DrawRectangleRec($$byval_copy25,$$byval_copy29);
  HEAP8[$19>>0] = -26;
  $80 = ((($19)) + 1|0);
  HEAP8[$80>>0] = 41;
  $81 = ((($19)) + 2|0);
  HEAP8[$81>>0] = 55;
  $82 = ((($19)) + 3|0);
  HEAP8[$82>>0] = -1;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$19>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$19+3>>0]|0;
  _Fade($18,$$byval_copy29,0.60000002384185791);
  ;HEAP32[$$byval_copy25>>2]=HEAP32[(3284)>>2]|0;HEAP32[$$byval_copy25+4>>2]=HEAP32[(3284)+4>>2]|0;HEAP32[$$byval_copy25+8>>2]=HEAP32[(3284)+8>>2]|0;HEAP32[$$byval_copy25+12>>2]=HEAP32[(3284)+12>>2]|0;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$18>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$18+3>>0]|0;
  _DrawRectangleRec($$byval_copy25,$$byval_copy29);
  HEAP8[$21>>0] = -26;
  $83 = ((($21)) + 1|0);
  HEAP8[$83>>0] = 41;
  $84 = ((($21)) + 2|0);
  HEAP8[$84>>0] = 55;
  $85 = ((($21)) + 3|0);
  HEAP8[$85>>0] = -1;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$21>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$21+3>>0]|0;
  _Fade($20,$$byval_copy29,0.60000002384185791);
  ;HEAP32[$$byval_copy25>>2]=HEAP32[(3380)>>2]|0;HEAP32[$$byval_copy25+4>>2]=HEAP32[(3380)+4>>2]|0;HEAP32[$$byval_copy25+8>>2]=HEAP32[(3380)+8>>2]|0;HEAP32[$$byval_copy25+12>>2]=HEAP32[(3380)+12>>2]|0;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$20>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$20+3>>0]|0;
  _DrawRectangleRec($$byval_copy25,$$byval_copy29);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else {
  $86 = HEAP32[2664>>2]|0;
  $87 = ($86|0)==(0);
  if ($87) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $88 = HEAP32[2688>>2]|0;
  $89 = (($88|0) / 30)&-1;
  $90 = $89 & 1;
  $91 = ($90|0)==(0);
  if ($91) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $92 = (_GetScreenWidth()|0);
  HEAP8[$23>>0] = -56;
  $93 = ((($23)) + 1|0);
  HEAP8[$93>>0] = -56;
  $94 = ((($23)) + 2|0);
  HEAP8[$94>>0] = -56;
  $95 = ((($23)) + 3|0);
  HEAP8[$95>>0] = -1;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$23>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$23+3>>0]|0;
  _Fade($22,$$byval_copy29,0.5);
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$22>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$22+3>>0]|0;
  _DrawRectangle(0,0,$92,50,$$byval_copy29);
  HEAP8[$24>>0] = 0;
  $96 = ((($24)) + 1|0);
  HEAP8[$96>>0] = 0;
  $97 = ((($24)) + 2|0);
  HEAP8[$97>>0] = 0;
  $98 = ((($24)) + 3|0);
  HEAP8[$98>>0] = -1;
  ;HEAP8[$$byval_copy29>>0]=HEAP8[$24>>0]|0;HEAP8[$$byval_copy29+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$$byval_copy29+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$$byval_copy29+3>>0]=HEAP8[$24+3>>0]|0;
  _DrawText(8504,420,15,20,$$byval_copy29);
  _DrawPlayer();
  STACKTOP = sp;return;
 }
}
function _UnloadAisle02Screen() {
 var $arc115$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $arc115$byval_copy = sp;
 ;HEAP32[$arc115$byval_copy>>2]=HEAP32[3024>>2]|0;HEAP32[$arc115$byval_copy+4>>2]=HEAP32[3024+4>>2]|0;HEAP32[$arc115$byval_copy+8>>2]=HEAP32[3024+8>>2]|0;HEAP32[$arc115$byval_copy+12>>2]=HEAP32[3024+12>>2]|0;HEAP32[$arc115$byval_copy+16>>2]=HEAP32[3024+16>>2]|0;
 _UnloadTexture($arc115$byval_copy);
 dest=$arc115$byval_copy; src=3112; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($arc115$byval_copy);
 dest=$arc115$byval_copy; src=3256; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($arc115$byval_copy);
 dest=$arc115$byval_copy; src=3352; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($arc115$byval_copy);
 dest=$arc115$byval_copy; src=3448; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($arc115$byval_copy);
 STACKTOP = sp;return;
}
function _FinishAisle02Screen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2968>>2]|0;
 return ($0|0);
}
function _InitArmoryScreen() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 60|0;
 $1 = sp;
 $2 = sp + 20|0;
 $3 = sp + 40|0;
 _ResetPlayer();
 HEAP32[3848>>2] = 0;
 HEAP32[3856>>2] = -1;
 HEAP32[3864>>2] = 0;
 HEAP32[3872>>2] = 0;
 HEAP32[3880>>2] = 0;
 _memset((3888|0),0,256)|0;
 HEAP32[4144>>2] = 0;
 HEAP32[4152>>2] = 0;
 _LoadTexture($0,4160);
 ;HEAP32[4208>>2]=HEAP32[$0>>2]|0;HEAP32[4208+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[4208+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[4208+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[4208+16>>2]=HEAP32[$0+16>>2]|0;
 HEAPF32[4232>>2] = -50.0;
 HEAPF32[(4236)>>2] = 145.0;
 HEAP32[(4240)>>2] = 0;
 HEAP32[(4244)>>2] = 1;
 $4 = HEAP32[(92)>>2]|0;
 $5 = (($4|0) / 3)&-1;
 $6 = HEAP32[(4240)>>2]|0;
 $7 = Math_imul($6, $5)|0;
 $8 = HEAP32[(96)>>2]|0;
 $9 = (($8|0) / 2)&-1;
 HEAP32[(4252)>>2] = $7;
 HEAP32[(4256)>>2] = $9;
 HEAP32[(4260)>>2] = $5;
 HEAP32[(4264)>>2] = $9;
 $10 = +HEAPF32[4232>>2];
 $11 = (~~(($10)));
 $12 = +HEAPF32[(4236)>>2];
 $13 = (~~(($12)));
 $14 = HEAP32[(92)>>2]|0;
 $15 = (($14|0) / 3)&-1;
 $16 = HEAP32[(96)>>2]|0;
 $17 = (($16|0) / 2)&-1;
 HEAP32[(4268)>>2] = $11;
 HEAP32[(4272)>>2] = $13;
 HEAP32[(4276)>>2] = $15;
 HEAP32[(4280)>>2] = $17;
 HEAP32[(4248)>>2] = 0;
 HEAPF32[4288>>2] = 1074.0;
 HEAPF32[(4292)>>2] = 140.0;
 HEAP32[(4296)>>2] = 2;
 HEAP32[(4300)>>2] = 1;
 $18 = HEAP32[(92)>>2]|0;
 $19 = (($18|0) / 3)&-1;
 $20 = HEAP32[(4296)>>2]|0;
 $21 = Math_imul($20, $19)|0;
 $22 = HEAP32[(96)>>2]|0;
 $23 = (($22|0) / 2)&-1;
 HEAP32[(4308)>>2] = $21;
 HEAP32[(4312)>>2] = $23;
 HEAP32[(4316)>>2] = $19;
 HEAP32[(4320)>>2] = $23;
 $24 = +HEAPF32[4288>>2];
 $25 = (~~(($24)));
 $26 = +HEAPF32[(4292)>>2];
 $27 = (~~(($26)));
 $28 = HEAP32[(92)>>2]|0;
 $29 = (($28|0) / 3)&-1;
 $30 = HEAP32[(96)>>2]|0;
 $31 = (($30|0) / 2)&-1;
 HEAP32[(4324)>>2] = $25;
 HEAP32[(4328)>>2] = $27;
 HEAP32[(4332)>>2] = $29;
 HEAP32[(4336)>>2] = $31;
 HEAP32[(4304)>>2] = 0;
 HEAPF32[4344>>2] = 300.0;
 HEAPF32[(4348)>>2] = 260.0;
 _LoadTexture($1,4440);
 ;HEAP32[(4352)>>2]=HEAP32[$1>>2]|0;HEAP32[(4352)+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[(4352)+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[(4352)+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[(4352)+16>>2]=HEAP32[$1+16>>2]|0;
 HEAP32[(4412)>>2] = 0;
 HEAP32[(4408)>>2] = 0;
 HEAP32[(4420)>>2] = 4;
 $32 = +HEAPF32[4344>>2];
 $33 = (~~(($32)));
 $34 = +HEAPF32[(4348)>>2];
 $35 = $34 + 20.0;
 $36 = (~~(($35)));
 HEAP32[(4372)>>2] = $33;
 HEAP32[(4376)>>2] = $36;
 HEAP32[(4380)>>2] = 160;
 HEAP32[(4384)>>2] = 230;
 $37 = HEAP32[(4356)>>2]|0;
 $38 = HEAP32[(4420)>>2]|0;
 $39 = (($37|0) / ($38|0))&-1;
 $40 = HEAP32[(4360)>>2]|0;
 HEAP32[(4388)>>2] = 0;
 HEAP32[(4392)>>2] = 0;
 HEAP32[(4396)>>2] = $39;
 HEAP32[(4400)>>2] = $40;
 HEAP32[(4428)>>2] = 0;
 HEAP32[(4424)>>2] = 0;
 HEAP32[(4432)>>2] = 1;
 HEAPF32[4480>>2] = 550.0;
 HEAPF32[(4484)>>2] = 260.0;
 _LoadTexture($2,4576);
 ;HEAP32[(4488)>>2]=HEAP32[$2>>2]|0;HEAP32[(4488)+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[(4488)+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[(4488)+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[(4488)+16>>2]=HEAP32[$2+16>>2]|0;
 HEAP32[(4548)>>2] = 0;
 HEAP32[(4544)>>2] = 0;
 HEAP32[(4556)>>2] = 4;
 $41 = +HEAPF32[4480>>2];
 $42 = (~~(($41)));
 $43 = +HEAPF32[(4484)>>2];
 $44 = $43 + 20.0;
 $45 = (~~(($44)));
 HEAP32[(4508)>>2] = $42;
 HEAP32[(4512)>>2] = $45;
 HEAP32[(4516)>>2] = 160;
 HEAP32[(4520)>>2] = 230;
 $46 = HEAP32[(4492)>>2]|0;
 $47 = HEAP32[(4556)>>2]|0;
 $48 = (($46|0) / ($47|0))&-1;
 $49 = HEAP32[(4496)>>2]|0;
 HEAP32[(4524)>>2] = 0;
 HEAP32[(4528)>>2] = 0;
 HEAP32[(4532)>>2] = $48;
 HEAP32[(4536)>>2] = $49;
 HEAP32[(4564)>>2] = 0;
 HEAP32[(4560)>>2] = 0;
 HEAP32[(4568)>>2] = 1;
 HEAPF32[4616>>2] = 800.0;
 HEAPF32[(4620)>>2] = 260.0;
 _LoadTexture($3,4712);
 ;HEAP32[(4624)>>2]=HEAP32[$3>>2]|0;HEAP32[(4624)+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[(4624)+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[(4624)+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[(4624)+16>>2]=HEAP32[$3+16>>2]|0;
 HEAP32[(4684)>>2] = 0;
 HEAP32[(4680)>>2] = 0;
 HEAP32[(4692)>>2] = 4;
 $50 = +HEAPF32[4616>>2];
 $51 = (~~(($50)));
 $52 = +HEAPF32[(4620)>>2];
 $53 = $52 + 20.0;
 $54 = (~~(($53)));
 HEAP32[(4644)>>2] = $51;
 HEAP32[(4648)>>2] = $54;
 HEAP32[(4652)>>2] = 160;
 HEAP32[(4656)>>2] = 230;
 $55 = HEAP32[(4628)>>2]|0;
 $56 = HEAP32[(4692)>>2]|0;
 $57 = (($55|0) / ($56|0))&-1;
 $58 = HEAP32[(4632)>>2]|0;
 HEAP32[(4660)>>2] = 0;
 HEAP32[(4664)>>2] = 0;
 HEAP32[(4668)>>2] = $57;
 HEAP32[(4672)>>2] = $58;
 HEAP32[(4700)>>2] = 0;
 HEAP32[(4696)>>2] = 0;
 HEAP32[(4704)>>2] = 0;
 STACKTOP = sp;return;
}
function _UpdateArmoryScreen() {
 var $$17 = 0, $$byval_copy33 = 0, $$pr = 0, $$pr18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i$020 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $sndScream$byval_copy36 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $sndScream$byval_copy36 = sp + 72|0;
 $$byval_copy33 = sp + 56|0;
 $0 = sp + 48|0;
 $1 = sp + 40|0;
 $2 = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = sp + 24|0;
 $7 = HEAP32[(208)>>2]|0;
 $8 = ($7|0)==(0);
 do {
  if (!($8)) {
   _GetMousePosition($0);
   ;HEAP32[$$byval_copy33>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$0+4>>2]|0;
   ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4268)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4268)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4268)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4268)+12>>2]|0;
   $9 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
    ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4268)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4268)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4268)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4268)+12>>2]|0;
    $11 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     HEAP32[(4248)>>2] = 0;
    } else {
     label = 5;
    }
   } else {
    label = 5;
   }
   do {
    if ((label|0) == 5) {
     HEAP32[(4248)>>2] = 1;
     ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
     ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4268)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4268)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4268)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4268)+12>>2]|0;
     $13 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
     $14 = ($13|0)==(0);
     if (!($14)) {
      $15 = (_IsMouseButtonPressed(0)|0);
      $16 = ($15|0)==(0);
      if ($16) {
       label = 8;
      } else {
       _GetMousePosition($1);
       ;HEAP32[$$byval_copy33>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$1+4>>2]|0;
       ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4268)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4268)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4268)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4268)+12>>2]|0;
       $17 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
       $18 = ($17|0)==(0);
       if ($18) {
        label = 8;
       }
      }
      if ((label|0) == 8) {
       $19 = (_IsKeyPressed(32)|0);
       $20 = ($19|0)==(0);
       if ($20) {
        break;
       }
      }
      $21 = HEAP32[(4244)>>2]|0;
      $22 = ($21|0)==(0);
      if ($22) {
       HEAP32[4152>>2] = 1;
       break;
      } else {
       HEAP32[(4256)>>2] = 0;
       HEAP32[(4244)>>2] = 0;
       ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[112>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[112+4>>2]|0;
       _PlaySound($sndScream$byval_copy36);
       break;
      }
     }
    }
   } while(0);
   _GetMousePosition($2);
   ;HEAP32[$$byval_copy33>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$2+4>>2]|0;
   ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4324)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4324)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4324)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4324)+12>>2]|0;
   $23 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
    ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4324)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4324)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4324)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4324)+12>>2]|0;
    $25 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP32[(4304)>>2] = 0;
     break;
    }
   }
   HEAP32[(4304)>>2] = 1;
   ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
   ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4324)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4324)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4324)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4324)+12>>2]|0;
   $27 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
   $28 = ($27|0)==(0);
   if (!($28)) {
    $29 = (_IsMouseButtonPressed(0)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     label = 18;
    } else {
     _GetMousePosition($3);
     ;HEAP32[$$byval_copy33>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$3+4>>2]|0;
     ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4324)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4324)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4324)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4324)+12>>2]|0;
     $31 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
     $32 = ($31|0)==(0);
     if ($32) {
      label = 18;
     }
    }
    if ((label|0) == 18) {
     $33 = (_IsKeyPressed(32)|0);
     $34 = ($33|0)==(0);
     if ($34) {
      break;
     }
    }
    $35 = HEAP32[(4300)>>2]|0;
    $36 = ($35|0)==(0);
    if ($36) {
     HEAP32[4152>>2] = 2;
     break;
    } else {
     HEAP32[(4312)>>2] = 0;
     HEAP32[(4300)>>2] = 0;
     ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[112>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[112+4>>2]|0;
     _PlaySound($sndScream$byval_copy36);
     break;
    }
   }
  }
 } while(0);
 $37 = HEAP32[3864>>2]|0;
 $38 = ($37|0)>(2);
 if ($38) {
  _UpdatePlayer();
  _UpdateMonster(4344);
  _UpdateMonster(4480);
  _UpdateMonster(4616);
 }
 ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4372)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4372)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4372)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4372)+12>>2]|0;
 $39 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
 $40 = ($39|0)==(0);
 $41 = HEAP32[(4424)>>2]|0;
 $42 = ($41|0)!=(0);
 $or$cond = $40 | $42;
 if ($or$cond) {
  ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
  ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4508)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4508)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4508)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4508)+12>>2]|0;
  $43 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
  $44 = ($43|0)==(0);
  $45 = HEAP32[(4560)>>2]|0;
  $46 = ($45|0)!=(0);
  $or$cond3 = $44 | $46;
  if ($or$cond3) {
   ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
   ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4644)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4644)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4644)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4644)+12>>2]|0;
   $47 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
   $48 = ($47|0)==(0);
   $49 = HEAP32[(4696)>>2]|0;
   $50 = ($49|0)!=(0);
   $or$cond5 = $48 | $50;
   $51 = $or$cond5&1;
   $$17 = $51 ^ 1;
   $storemerge = $$17;
  } else {
   $storemerge = 1;
  }
 } else {
  $storemerge = 1;
 }
 HEAP32[3848>>2] = $storemerge;
 ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4372)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4372)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4372)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4372)+12>>2]|0;
 $52 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
 $53 = ($52|0)==(0);
 $54 = HEAP32[(4424)>>2]|0;
 $55 = ($54|0)!=(0);
 $or$cond7 = $53 | $55;
 do {
  if ($or$cond7) {
   HEAP32[(4428)>>2] = 0;
  } else {
   HEAP32[(4428)>>2] = 1;
   $56 = (_IsKeyPressed(32)|0);
   $57 = ($56|0)==(0);
   if ($57) {
    $58 = (_IsMouseButtonPressed(0)|0);
    $59 = ($58|0)==(0);
    if ($59) {
     break;
    }
    _GetMousePosition($4);
    ;HEAP32[$$byval_copy33>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$4+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4372)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4372)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4372)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4372)+12>>2]|0;
    $60 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
    $61 = ($60|0)==(0);
    if ($61) {
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[4752>>2] = 1;
   HEAP32[4144>>2] = 0;
   HEAP32[3856>>2] = 1;
  }
 } while(0);
 ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4508)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4508)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4508)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4508)+12>>2]|0;
 $62 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
 $63 = ($62|0)==(0);
 $64 = HEAP32[(4560)>>2]|0;
 $65 = ($64|0)!=(0);
 $or$cond9 = $63 | $65;
 do {
  if ($or$cond9) {
   HEAP32[(4564)>>2] = 0;
  } else {
   HEAP32[(4564)>>2] = 1;
   $66 = (_IsKeyPressed(32)|0);
   $67 = ($66|0)==(0);
   if ($67) {
    $68 = (_IsMouseButtonPressed(0)|0);
    $69 = ($68|0)==(0);
    if ($69) {
     break;
    }
    _GetMousePosition($5);
    ;HEAP32[$$byval_copy33>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$5+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4508)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4508)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4508)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4508)+12>>2]|0;
    $70 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
    $71 = ($70|0)==(0);
    if ($71) {
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[4752>>2] = 1;
   HEAP32[4144>>2] = 0;
   HEAP32[3856>>2] = 2;
  }
 } while(0);
 ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4644)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4644)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4644)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4644)+12>>2]|0;
 $72 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
 $73 = ($72|0)==(0);
 $74 = HEAP32[(4696)>>2]|0;
 $75 = ($74|0)!=(0);
 $or$cond11 = $73 | $75;
 do {
  if ($or$cond11) {
   HEAP32[(4700)>>2] = 0;
   label = 45;
  } else {
   HEAP32[(4700)>>2] = 1;
   $76 = (_IsKeyPressed(32)|0);
   $77 = ($76|0)==(0);
   if ($77) {
    $78 = (_IsMouseButtonPressed(0)|0);
    $79 = ($78|0)==(0);
    if ($79) {
     label = 45;
     break;
    }
    _GetMousePosition($6);
    ;HEAP32[$$byval_copy33>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$6+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(4644)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(4644)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(4644)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(4644)+12>>2]|0;
    $80 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
    $81 = ($80|0)==(0);
    if ($81) {
     label = 45;
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[4752>>2] = 1;
   HEAP32[3856>>2] = 3;
   HEAP32[4144>>2] = 1;
  }
 } while(0);
 if ((label|0) == 45) {
  $$pr = HEAP32[4752>>2]|0;
  $82 = ($$pr|0)==(0);
  if (!($82)) {
   $$pr18 = HEAP32[4144>>2]|0;
   $83 = (($$pr18) + 1)|0;
   HEAP32[4144>>2] = $83;
   $84 = ($$pr18|0)>(179);
   if ($84) {
    $85 = HEAP32[3856>>2]|0;
    if ((($85|0) == 1)) {
     $86 = HEAP32[(4432)>>2]|0;
     $87 = ($86|0)==(0);
     if ($87) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy36);
     }
     HEAP32[(4424)>>2] = 1;
     HEAP32[(4428)>>2] = 0;
    } else if ((($85|0) == 3)) {
     $90 = HEAP32[(4704)>>2]|0;
     $91 = ($90|0)==(0);
     if ($91) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy36);
     }
     HEAP32[(4696)>>2] = 1;
     HEAP32[(4700)>>2] = 0;
    } else if ((($85|0) == 2)) {
     $88 = HEAP32[(4568)>>2]|0;
     $89 = ($88|0)==(0);
     if ($89) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy36);
     }
     HEAP32[(4560)>>2] = 1;
     HEAP32[(4564)>>2] = 0;
    }
    HEAP32[4752>>2] = 0;
    HEAP32[4144>>2] = 0;
   }
  }
 }
 $92 = HEAP32[4144>>2]|0;
 $93 = (($92) + 1)|0;
 HEAP32[4144>>2] = $93;
 $94 = $93 & 1;
 $95 = ($94|0)==(0);
 if ($95) {
  $96 = HEAP32[3880>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[3880>>2] = $97;
 }
 $98 = HEAP32[3864>>2]|0;
 if ((($98|0) == 1)) {
  $109 = HEAP32[3872>>2]|0;
  $110 = (($109) + 1)|0;
  HEAP32[3872>>2] = $110;
  $111 = (_IsKeyPressed(257)|0);
  $112 = ($111|0)==(0);
  if ($112) {
   $113 = (_IsMouseButtonPressed(0)|0);
   $114 = ($113|0)==(0);
   if ($114) {
    STACKTOP = sp;return;
   }
  }
  HEAP32[3864>>2] = 2;
  HEAP32[3872>>2] = 0;
  STACKTOP = sp;return;
 } else if ((($98|0) == 0)) {
  $99 = HEAP32[3880>>2]|0;
  $100 = ($99|0)<(38);
  if ($100) {
   (_strncpy((3888|0),(4760|0),($99|0))|0);
  } else {
   $101 = (_strlen((3888|0))|0);
   $102 = ($101|0)>(0);
   if ($102) {
    $i$020 = 0;
    while(1) {
     $103 = (3888 + ($i$020)|0);
     HEAP8[$103>>0] = 0;
     $104 = (($i$020) + 1)|0;
     $105 = (_strlen((3888|0))|0);
     $106 = ($104|0)<($105|0);
     if ($106) {
      $i$020 = $104;
     } else {
      break;
     }
    }
   }
   HEAP32[3880>>2] = 0;
   HEAP32[3864>>2] = 1;
  }
  $107 = (_IsKeyPressed(257)|0);
  $108 = ($107|0)==(0);
  if ($108) {
   STACKTOP = sp;return;
  }
  HEAP32[3864>>2] = 1;
  STACKTOP = sp;return;
 } else {
  $115 = ($98|0)==(2);
  $116 = HEAP32[3872>>2]|0;
  $117 = (($116) + 1)|0;
  HEAP32[3872>>2] = $117;
  $118 = ($116|0)>(179);
  $or$cond13 = $115 & $118;
  if (!($or$cond13)) {
   STACKTOP = sp;return;
  }
  HEAP32[3864>>2] = 3;
  STACKTOP = sp;return;
 }
}
function _DrawArmoryScreen() {
 var $$byval_copy30 = 0, $$byval_copy34 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $doors$byval_copy10 = 0, $font$byval_copy21 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $$byval_copy34 = sp + 12|0;
 $$byval_copy30 = sp + 204|0;
 $font$byval_copy21 = sp + 144|0;
 $doors$byval_copy10 = sp + 180|0;
 $0 = sp + 200|0;
 $1 = sp + 264|0;
 $2 = sp + 8|0;
 $3 = sp + 268|0;
 $4 = sp + 104|0;
 $5 = sp + 284|0;
 $6 = sp + 280|0;
 $7 = sp + 276|0;
 $8 = sp + 272|0;
 $9 = sp;
 $10 = sp + 140|0;
 $11 = sp + 112|0;
 $12 = sp + 120|0;
 $13 = sp + 260|0;
 $14 = sp + 128|0;
 $15 = sp + 136|0;
 $16 = sp + 224|0;
 $17 = sp + 236|0;
 $18 = sp + 240|0;
 $19 = sp + 252|0;
 $20 = sp + 256|0;
 $21 = sp + 248|0;
 $22 = sp + 244|0;
 $23 = sp + 232|0;
 $24 = sp + 228|0;
 HEAP32[$0>>2] = -1;
 ;HEAP32[$$byval_copy30>>2]=HEAP32[4208>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[4208+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[4208+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[4208+12>>2]|0;HEAP32[$$byval_copy30+16>>2]=HEAP32[4208+16>>2]|0;
 ;HEAP8[$$byval_copy34>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawTexture($$byval_copy30,0,0,$$byval_copy34);
 dest=$$byval_copy34; src=4344; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy34,0);
 dest=$$byval_copy34; src=4480; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy34,0);
 dest=$$byval_copy34; src=4616; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy34,0);
 $25 = HEAP32[(4248)>>2]|0;
 $26 = ($25|0)==(0);
 if ($26) {
  HEAP32[$2>>2] = -1;
  ;HEAP32[$doors$byval_copy10>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy10+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy10+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy10+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy10+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy21>>2]=HEAP32[(4252)>>2]|0;HEAP32[$font$byval_copy21+4>>2]=HEAP32[(4252)+4>>2]|0;HEAP32[$font$byval_copy21+8>>2]=HEAP32[(4252)+8>>2]|0;HEAP32[$font$byval_copy21+12>>2]=HEAP32[(4252)+12>>2]|0;
  ;HEAP32[$$byval_copy30>>2]=HEAP32[4232>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[4232+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$2+3>>0]|0;
  _DrawTextureRec($doors$byval_copy10,$font$byval_copy21,$$byval_copy30,$$byval_copy34);
 } else {
  HEAP8[$1>>0] = 0;
  $27 = ((($1)) + 1|0);
  HEAP8[$27>>0] = -28;
  $28 = ((($1)) + 2|0);
  HEAP8[$28>>0] = 48;
  $29 = ((($1)) + 3|0);
  HEAP8[$29>>0] = -1;
  ;HEAP32[$doors$byval_copy10>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy10+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy10+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy10+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy10+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy21>>2]=HEAP32[(4252)>>2]|0;HEAP32[$font$byval_copy21+4>>2]=HEAP32[(4252)+4>>2]|0;HEAP32[$font$byval_copy21+8>>2]=HEAP32[(4252)+8>>2]|0;HEAP32[$font$byval_copy21+12>>2]=HEAP32[(4252)+12>>2]|0;
  ;HEAP32[$$byval_copy30>>2]=HEAP32[4232>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[4232+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$1+3>>0]|0;
  _DrawTextureRec($doors$byval_copy10,$font$byval_copy21,$$byval_copy30,$$byval_copy34);
 }
 $30 = HEAP32[(4304)>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  HEAP32[$4>>2] = -1;
  ;HEAP32[$doors$byval_copy10>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy10+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy10+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy10+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy10+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy21>>2]=HEAP32[(4308)>>2]|0;HEAP32[$font$byval_copy21+4>>2]=HEAP32[(4308)+4>>2]|0;HEAP32[$font$byval_copy21+8>>2]=HEAP32[(4308)+8>>2]|0;HEAP32[$font$byval_copy21+12>>2]=HEAP32[(4308)+12>>2]|0;
  ;HEAP32[$$byval_copy30>>2]=HEAP32[4288>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[4288+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$4+3>>0]|0;
  _DrawTextureRec($doors$byval_copy10,$font$byval_copy21,$$byval_copy30,$$byval_copy34);
 } else {
  HEAP8[$3>>0] = 0;
  $32 = ((($3)) + 1|0);
  HEAP8[$32>>0] = -28;
  $33 = ((($3)) + 2|0);
  HEAP8[$33>>0] = 48;
  $34 = ((($3)) + 3|0);
  HEAP8[$34>>0] = -1;
  ;HEAP32[$doors$byval_copy10>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy10+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy10+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy10+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy10+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy21>>2]=HEAP32[(4308)>>2]|0;HEAP32[$font$byval_copy21+4>>2]=HEAP32[(4308)+4>>2]|0;HEAP32[$font$byval_copy21+8>>2]=HEAP32[(4308)+8>>2]|0;HEAP32[$font$byval_copy21+12>>2]=HEAP32[(4308)+12>>2]|0;
  ;HEAP32[$$byval_copy30>>2]=HEAP32[4288>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[4288+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$3+3>>0]|0;
  _DrawTextureRec($doors$byval_copy10,$font$byval_copy21,$$byval_copy30,$$byval_copy34);
 }
 $35 = HEAP32[3864>>2]|0;
 $36 = ($35|0)<(2);
 if ($36) {
  $37 = (_GetScreenWidth()|0);
  HEAP8[$6>>0] = -56;
  $38 = ((($6)) + 1|0);
  HEAP8[$38>>0] = -56;
  $39 = ((($6)) + 2|0);
  HEAP8[$39>>0] = -56;
  $40 = ((($6)) + 3|0);
  HEAP8[$40>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$6+3>>0]|0;
  _Fade($5,$$byval_copy34,0.5);
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$5+3>>0]|0;
  _DrawRectangle(0,40,$37,200,$$byval_copy34);
 } else {
  $41 = ($35|0)==(2);
  if ($41) {
   $42 = (_GetScreenWidth()|0);
   HEAP8[$8>>0] = -56;
   $43 = ((($8)) + 1|0);
   HEAP8[$43>>0] = -56;
   $44 = ((($8)) + 2|0);
   HEAP8[$44>>0] = -56;
   $45 = ((($8)) + 3|0);
   HEAP8[$45>>0] = -1;
   ;HEAP8[$$byval_copy34>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$8+3>>0]|0;
   _Fade($7,$$byval_copy34,0.5);
   ;HEAP8[$$byval_copy34>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$7+3>>0]|0;
   _DrawRectangle(0,80,$42,100,$$byval_copy34);
  }
 }
 $46 = HEAP32[3864>>2]|0;
 if ((($46|0) == 0)) {
  HEAPF32[$9>>2] = 100.0;
  $47 = ((($9)) + 4|0);
  HEAPF32[$47>>2] = 80.0;
  $48 = HEAP32[(68)>>2]|0;
  HEAP32[$10>>2] = -1;
  dest=$font$byval_copy21; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy30>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$9+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$10+3>>0]|0;
  _DrawTextEx($font$byval_copy21,3888,$$byval_copy30,$48,2,$$byval_copy34);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($46|0) == 1)) {
  HEAPF32[$11>>2] = 100.0;
  $49 = ((($11)) + 4|0);
  HEAPF32[$49>>2] = 80.0;
  $50 = HEAP32[(68)>>2]|0;
  HEAP32[$12>>2] = -1;
  dest=$font$byval_copy21; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy30>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$11+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$12>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$12+3>>0]|0;
  _DrawTextEx($font$byval_copy21,4760,$$byval_copy30,$50,2,$$byval_copy34);
  $51 = HEAP32[3872>>2]|0;
  $52 = (($51|0) / 30)&-1;
  $53 = $52 & 1;
  $54 = ($53|0)==(0);
  if ($54) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $55 = (_GetScreenWidth()|0);
  $56 = (($55) + -280)|0;
  HEAP8[$13>>0] = 0;
  $57 = ((($13)) + 1|0);
  HEAP8[$57>>0] = 0;
  $58 = ((($13)) + 2|0);
  HEAP8[$58>>0] = 0;
  $59 = ((($13)) + 3|0);
  HEAP8[$59>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$13>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$13+3>>0]|0;
  _DrawText(8608,$56,200,20,$$byval_copy34);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($46|0) == 2)) {
  $60 = HEAP32[3872>>2]|0;
  $61 = (($60|0) / 30)&-1;
  $62 = $61 & 1;
  $63 = ($62|0)==(0);
  if ($63) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  HEAPF32[$14>>2] = 300.0;
  $64 = ((($14)) + 4|0);
  HEAPF32[$64>>2] = 95.0;
  $65 = HEAP32[(68)>>2]|0;
  $66 = $65 << 1;
  HEAP32[$15>>2] = -1;
  dest=$font$byval_copy21; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy30>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$14+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$15+3>>0]|0;
  _DrawTextEx($font$byval_copy21,8488,$$byval_copy30,$66,2,$$byval_copy34);
  HEAP8[$17>>0] = -26;
  $67 = ((($17)) + 1|0);
  HEAP8[$67>>0] = 41;
  $68 = ((($17)) + 2|0);
  HEAP8[$68>>0] = 55;
  $69 = ((($17)) + 3|0);
  HEAP8[$69>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$17+3>>0]|0;
  _Fade($16,$$byval_copy34,0.60000002384185791);
  ;HEAP32[$$byval_copy30>>2]=HEAP32[(4372)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(4372)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(4372)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(4372)+12>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$16>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$16+3>>0]|0;
  _DrawRectangleRec($$byval_copy30,$$byval_copy34);
  HEAP8[$19>>0] = -26;
  $70 = ((($19)) + 1|0);
  HEAP8[$70>>0] = 41;
  $71 = ((($19)) + 2|0);
  HEAP8[$71>>0] = 55;
  $72 = ((($19)) + 3|0);
  HEAP8[$72>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$19>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$19+3>>0]|0;
  _Fade($18,$$byval_copy34,0.60000002384185791);
  ;HEAP32[$$byval_copy30>>2]=HEAP32[(4508)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(4508)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(4508)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(4508)+12>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$18>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$18+3>>0]|0;
  _DrawRectangleRec($$byval_copy30,$$byval_copy34);
  HEAP8[$21>>0] = -26;
  $73 = ((($21)) + 1|0);
  HEAP8[$73>>0] = 41;
  $74 = ((($21)) + 2|0);
  HEAP8[$74>>0] = 55;
  $75 = ((($21)) + 3|0);
  HEAP8[$75>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$21>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$21+3>>0]|0;
  _Fade($20,$$byval_copy34,0.60000002384185791);
  ;HEAP32[$$byval_copy30>>2]=HEAP32[(4644)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(4644)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(4644)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(4644)+12>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$20>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$20+3>>0]|0;
  _DrawRectangleRec($$byval_copy30,$$byval_copy34);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else {
  $76 = HEAP32[3848>>2]|0;
  $77 = ($76|0)==(0);
  if ($77) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $78 = HEAP32[3872>>2]|0;
  $79 = (($78|0) / 30)&-1;
  $80 = $79 & 1;
  $81 = ($80|0)==(0);
  if ($81) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $82 = (_GetScreenWidth()|0);
  HEAP8[$23>>0] = -56;
  $83 = ((($23)) + 1|0);
  HEAP8[$83>>0] = -56;
  $84 = ((($23)) + 2|0);
  HEAP8[$84>>0] = -56;
  $85 = ((($23)) + 3|0);
  HEAP8[$85>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$23>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$23+3>>0]|0;
  _Fade($22,$$byval_copy34,0.5);
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$22>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$22+3>>0]|0;
  _DrawRectangle(0,0,$82,50,$$byval_copy34);
  HEAP8[$24>>0] = 0;
  $86 = ((($24)) + 1|0);
  HEAP8[$86>>0] = 0;
  $87 = ((($24)) + 2|0);
  HEAP8[$87>>0] = 0;
  $88 = ((($24)) + 3|0);
  HEAP8[$88>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$24>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$24+3>>0]|0;
  _DrawText(8504,420,15,20,$$byval_copy34);
  _DrawPlayer();
  STACKTOP = sp;return;
 }
}
function _UnloadArmoryScreen() {
 var $blazon03$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $blazon03$byval_copy = sp;
 ;HEAP32[$blazon03$byval_copy>>2]=HEAP32[4208>>2]|0;HEAP32[$blazon03$byval_copy+4>>2]=HEAP32[4208+4>>2]|0;HEAP32[$blazon03$byval_copy+8>>2]=HEAP32[4208+8>>2]|0;HEAP32[$blazon03$byval_copy+12>>2]=HEAP32[4208+12>>2]|0;HEAP32[$blazon03$byval_copy+16>>2]=HEAP32[4208+16>>2]|0;
 _UnloadTexture($blazon03$byval_copy);
 dest=$blazon03$byval_copy; src=4344; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($blazon03$byval_copy);
 dest=$blazon03$byval_copy; src=4480; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($blazon03$byval_copy);
 dest=$blazon03$byval_copy; src=4616; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($blazon03$byval_copy);
 STACKTOP = sp;return;
}
function _FinishArmoryScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4152>>2]|0;
 return ($0|0);
}
function _InitLivingroomScreen() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 60|0;
 $1 = sp;
 $2 = sp + 20|0;
 $3 = sp + 40|0;
 _ResetPlayer();
 HEAP32[5016>>2] = 0;
 HEAP32[5024>>2] = -1;
 HEAP32[5032>>2] = 0;
 HEAP32[5040>>2] = 0;
 HEAP32[5048>>2] = 0;
 _memset((5056|0),0,256)|0;
 HEAP32[5312>>2] = 0;
 HEAP32[5320>>2] = 0;
 _LoadTexture($0,5328);
 ;HEAP32[5376>>2]=HEAP32[$0>>2]|0;HEAP32[5376+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[5376+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[5376+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[5376+16>>2]=HEAP32[$0+16>>2]|0;
 HEAPF32[5400>>2] = -45.0;
 HEAPF32[(5404)>>2] = 140.0;
 HEAP32[(5408)>>2] = 0;
 HEAP32[(5412)>>2] = 1;
 $4 = HEAP32[(92)>>2]|0;
 $5 = (($4|0) / 3)&-1;
 $6 = HEAP32[(5408)>>2]|0;
 $7 = Math_imul($6, $5)|0;
 $8 = HEAP32[(96)>>2]|0;
 $9 = (($8|0) / 2)&-1;
 HEAP32[(5420)>>2] = $7;
 HEAP32[(5424)>>2] = $9;
 HEAP32[(5428)>>2] = $5;
 HEAP32[(5432)>>2] = $9;
 $10 = +HEAPF32[5400>>2];
 $11 = (~~(($10)));
 $12 = +HEAPF32[(5404)>>2];
 $13 = (~~(($12)));
 $14 = HEAP32[(92)>>2]|0;
 $15 = (($14|0) / 3)&-1;
 $16 = HEAP32[(96)>>2]|0;
 $17 = (($16|0) / 2)&-1;
 HEAP32[(5436)>>2] = $11;
 HEAP32[(5440)>>2] = $13;
 HEAP32[(5444)>>2] = $15;
 HEAP32[(5448)>>2] = $17;
 HEAP32[(5416)>>2] = 0;
 HEAPF32[5456>>2] = 830.0;
 HEAPF32[(5460)>>2] = 108.0;
 HEAP32[(5464)>>2] = 1;
 HEAP32[(5468)>>2] = 1;
 $18 = HEAP32[(92)>>2]|0;
 $19 = (($18|0) / 3)&-1;
 $20 = HEAP32[(5464)>>2]|0;
 $21 = Math_imul($20, $19)|0;
 $22 = HEAP32[(96)>>2]|0;
 $23 = (($22|0) / 2)&-1;
 HEAP32[(5476)>>2] = $21;
 HEAP32[(5480)>>2] = $23;
 HEAP32[(5484)>>2] = $19;
 HEAP32[(5488)>>2] = $23;
 $24 = +HEAPF32[5456>>2];
 $25 = (~~(($24)));
 $26 = +HEAPF32[(5460)>>2];
 $27 = (~~(($26)));
 $28 = HEAP32[(92)>>2]|0;
 $29 = (($28|0) / 3)&-1;
 $30 = HEAP32[(96)>>2]|0;
 $31 = (($30|0) / 2)&-1;
 HEAP32[(5492)>>2] = $25;
 HEAP32[(5496)>>2] = $27;
 HEAP32[(5500)>>2] = $29;
 HEAP32[(5504)>>2] = $31;
 HEAP32[(5472)>>2] = 0;
 HEAPF32[5512>>2] = 154.0;
 HEAPF32[(5516)>>2] = 256.0;
 _LoadTexture($1,5608);
 ;HEAP32[(5520)>>2]=HEAP32[$1>>2]|0;HEAP32[(5520)+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[(5520)+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[(5520)+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[(5520)+16>>2]=HEAP32[$1+16>>2]|0;
 HEAP32[(5580)>>2] = 0;
 HEAP32[(5576)>>2] = 0;
 HEAP32[(5588)>>2] = 4;
 $32 = +HEAPF32[5512>>2];
 $33 = $32 + 90.0;
 $34 = (~~(($33)));
 $35 = +HEAPF32[(5516)>>2];
 $36 = $35 + 30.0;
 $37 = (~~(($36)));
 HEAP32[(5540)>>2] = $34;
 HEAP32[(5544)>>2] = $37;
 HEAP32[(5548)>>2] = 185;
 HEAP32[(5552)>>2] = 340;
 $38 = HEAP32[(5524)>>2]|0;
 $39 = HEAP32[(5588)>>2]|0;
 $40 = (($38|0) / ($39|0))&-1;
 $41 = HEAP32[(5528)>>2]|0;
 HEAP32[(5556)>>2] = 0;
 HEAP32[(5560)>>2] = 0;
 HEAP32[(5564)>>2] = $40;
 HEAP32[(5568)>>2] = $41;
 HEAP32[(5596)>>2] = 0;
 HEAP32[(5592)>>2] = 0;
 HEAP32[(5600)>>2] = 0;
 HEAPF32[5648>>2] = 504.0;
 HEAPF32[(5652)>>2] = 164.0;
 _LoadTexture($2,5744);
 ;HEAP32[(5656)>>2]=HEAP32[$2>>2]|0;HEAP32[(5656)+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[(5656)+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[(5656)+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[(5656)+16>>2]=HEAP32[$2+16>>2]|0;
 HEAP32[(5716)>>2] = 0;
 HEAP32[(5712)>>2] = 0;
 HEAP32[(5724)>>2] = 4;
 $42 = +HEAPF32[5648>>2];
 $43 = $42 + 44.0;
 $44 = (~~(($43)));
 $45 = +HEAPF32[(5652)>>2];
 $46 = (~~(($45)));
 HEAP32[(5676)>>2] = $44;
 HEAP32[(5680)>>2] = $46;
 HEAP32[(5684)>>2] = 174;
 HEAP32[(5688)>>2] = 264;
 $47 = HEAP32[(5660)>>2]|0;
 $48 = HEAP32[(5724)>>2]|0;
 $49 = (($47|0) / ($48|0))&-1;
 $50 = HEAP32[(5664)>>2]|0;
 HEAP32[(5692)>>2] = 0;
 HEAP32[(5696)>>2] = 0;
 HEAP32[(5700)>>2] = $49;
 HEAP32[(5704)>>2] = $50;
 HEAP32[(5732)>>2] = 0;
 HEAP32[(5728)>>2] = 0;
 HEAP32[(5736)>>2] = 1;
 HEAPF32[5784>>2] = 1054.0;
 HEAPF32[(5788)>>2] = 404.0;
 _LoadTexture($3,5880);
 ;HEAP32[(5792)>>2]=HEAP32[$3>>2]|0;HEAP32[(5792)+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[(5792)+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[(5792)+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[(5792)+16>>2]=HEAP32[$3+16>>2]|0;
 HEAP32[(5852)>>2] = 0;
 HEAP32[(5848)>>2] = 0;
 HEAP32[(5860)>>2] = 4;
 $51 = +HEAPF32[5784>>2];
 $52 = $51 + 64.0;
 $53 = (~~(($52)));
 $54 = +HEAPF32[(5788)>>2];
 $55 = $54 + 120.0;
 $56 = (~~(($55)));
 HEAP32[(5812)>>2] = $53;
 HEAP32[(5816)>>2] = $56;
 HEAP32[(5820)>>2] = 100;
 HEAP32[(5824)>>2] = 160;
 $57 = HEAP32[(5796)>>2]|0;
 $58 = HEAP32[(5860)>>2]|0;
 $59 = (($57|0) / ($58|0))&-1;
 $60 = HEAP32[(5800)>>2]|0;
 HEAP32[(5828)>>2] = 0;
 HEAP32[(5832)>>2] = 0;
 HEAP32[(5836)>>2] = $59;
 HEAP32[(5840)>>2] = $60;
 HEAP32[(5868)>>2] = 0;
 HEAP32[(5864)>>2] = 0;
 HEAP32[(5872)>>2] = 1;
 STACKTOP = sp;return;
}
function _UpdateLivingroomScreen() {
 var $$17 = 0, $$byval_copy33 = 0, $$pr = 0, $$pr18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $i$020 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $sndScream$byval_copy36 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $sndScream$byval_copy36 = sp + 72|0;
 $$byval_copy33 = sp + 56|0;
 $0 = sp + 48|0;
 $1 = sp + 40|0;
 $2 = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = sp + 24|0;
 $7 = HEAP32[(208)>>2]|0;
 $8 = ($7|0)==(0);
 do {
  if (!($8)) {
   _GetMousePosition($0);
   ;HEAP32[$$byval_copy33>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$0+4>>2]|0;
   ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5436)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5436)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5436)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5436)+12>>2]|0;
   $9 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
    ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5436)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5436)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5436)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5436)+12>>2]|0;
    $11 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     HEAP32[(5416)>>2] = 0;
    } else {
     label = 5;
    }
   } else {
    label = 5;
   }
   do {
    if ((label|0) == 5) {
     HEAP32[(5416)>>2] = 1;
     ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
     ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5436)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5436)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5436)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5436)+12>>2]|0;
     $13 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
     $14 = ($13|0)==(0);
     if (!($14)) {
      $15 = (_IsMouseButtonPressed(0)|0);
      $16 = ($15|0)==(0);
      if ($16) {
       label = 8;
      } else {
       _GetMousePosition($1);
       ;HEAP32[$$byval_copy33>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$1+4>>2]|0;
       ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5436)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5436)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5436)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5436)+12>>2]|0;
       $17 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
       $18 = ($17|0)==(0);
       if ($18) {
        label = 8;
       }
      }
      if ((label|0) == 8) {
       $19 = (_IsKeyPressed(32)|0);
       $20 = ($19|0)==(0);
       if ($20) {
        break;
       }
      }
      $21 = HEAP32[(5412)>>2]|0;
      $22 = ($21|0)==(0);
      if ($22) {
       HEAP32[5320>>2] = 1;
       break;
      } else {
       HEAP32[(5424)>>2] = 0;
       HEAP32[(5412)>>2] = 0;
       ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[112>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[112+4>>2]|0;
       _PlaySound($sndScream$byval_copy36);
       break;
      }
     }
    }
   } while(0);
   _GetMousePosition($2);
   ;HEAP32[$$byval_copy33>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$2+4>>2]|0;
   ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5492)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5492)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5492)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5492)+12>>2]|0;
   $23 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
    ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5492)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5492)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5492)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5492)+12>>2]|0;
    $25 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP32[(5472)>>2] = 0;
     break;
    }
   }
   HEAP32[(5472)>>2] = 1;
   ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
   ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5492)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5492)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5492)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5492)+12>>2]|0;
   $27 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
   $28 = ($27|0)==(0);
   if (!($28)) {
    $29 = (_IsMouseButtonPressed(0)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     label = 18;
    } else {
     _GetMousePosition($3);
     ;HEAP32[$$byval_copy33>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$3+4>>2]|0;
     ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5492)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5492)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5492)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5492)+12>>2]|0;
     $31 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
     $32 = ($31|0)==(0);
     if ($32) {
      label = 18;
     }
    }
    if ((label|0) == 18) {
     $33 = (_IsKeyPressed(32)|0);
     $34 = ($33|0)==(0);
     if ($34) {
      break;
     }
    }
    $35 = HEAP32[(5468)>>2]|0;
    $36 = ($35|0)==(0);
    if ($36) {
     HEAP32[5320>>2] = 2;
     break;
    } else {
     HEAP32[(5480)>>2] = 0;
     HEAP32[(5468)>>2] = 0;
     ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[112>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[112+4>>2]|0;
     _PlaySound($sndScream$byval_copy36);
     break;
    }
   }
  }
 } while(0);
 $37 = HEAP32[5032>>2]|0;
 $38 = ($37|0)>(2);
 if ($38) {
  _UpdatePlayer();
  _UpdateMonster(5512);
  _UpdateMonster(5648);
  _UpdateMonster(5784);
 }
 ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5540)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5540)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5540)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5540)+12>>2]|0;
 $39 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
 $40 = ($39|0)==(0);
 $41 = HEAP32[(5592)>>2]|0;
 $42 = ($41|0)!=(0);
 $or$cond = $40 | $42;
 if ($or$cond) {
  ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
  ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5676)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5676)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5676)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5676)+12>>2]|0;
  $43 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
  $44 = ($43|0)==(0);
  $45 = HEAP32[(5728)>>2]|0;
  $46 = ($45|0)!=(0);
  $or$cond3 = $44 | $46;
  if ($or$cond3) {
   ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
   ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5812)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5812)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5812)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5812)+12>>2]|0;
   $47 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
   $48 = ($47|0)==(0);
   $49 = HEAP32[(5864)>>2]|0;
   $50 = ($49|0)!=(0);
   $or$cond5 = $48 | $50;
   $51 = $or$cond5&1;
   $$17 = $51 ^ 1;
   $storemerge = $$17;
  } else {
   $storemerge = 1;
  }
 } else {
  $storemerge = 1;
 }
 HEAP32[5016>>2] = $storemerge;
 ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5540)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5540)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5540)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5540)+12>>2]|0;
 $52 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
 $53 = ($52|0)==(0);
 $54 = HEAP32[(5592)>>2]|0;
 $55 = ($54|0)!=(0);
 $or$cond7 = $53 | $55;
 do {
  if ($or$cond7) {
   HEAP32[(5596)>>2] = 0;
  } else {
   HEAP32[(5596)>>2] = 1;
   $56 = (_IsKeyPressed(32)|0);
   $57 = ($56|0)==(0);
   if ($57) {
    $58 = (_IsMouseButtonPressed(0)|0);
    $59 = ($58|0)==(0);
    if ($59) {
     break;
    }
    _GetMousePosition($4);
    ;HEAP32[$$byval_copy33>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$4+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5540)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5540)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5540)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5540)+12>>2]|0;
    $60 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
    $61 = ($60|0)==(0);
    if ($61) {
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[5920>>2] = 1;
   HEAP32[5312>>2] = 0;
   HEAP32[5024>>2] = 1;
  }
 } while(0);
 ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5676)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5676)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5676)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5676)+12>>2]|0;
 $62 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
 $63 = ($62|0)==(0);
 $64 = HEAP32[(5728)>>2]|0;
 $65 = ($64|0)!=(0);
 $or$cond9 = $63 | $65;
 do {
  if ($or$cond9) {
   HEAP32[(5732)>>2] = 0;
  } else {
   HEAP32[(5732)>>2] = 1;
   $66 = (_IsKeyPressed(32)|0);
   $67 = ($66|0)==(0);
   if ($67) {
    $68 = (_IsMouseButtonPressed(0)|0);
    $69 = ($68|0)==(0);
    if ($69) {
     break;
    }
    _GetMousePosition($5);
    ;HEAP32[$$byval_copy33>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$5+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5676)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5676)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5676)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5676)+12>>2]|0;
    $70 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
    $71 = ($70|0)==(0);
    if ($71) {
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[5920>>2] = 1;
   HEAP32[5312>>2] = 0;
   HEAP32[5024>>2] = 2;
  }
 } while(0);
 ;HEAP32[$$byval_copy33>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy33+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy33+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5812)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5812)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5812)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5812)+12>>2]|0;
 $72 = (_CheckCollisionRecs($$byval_copy33,$sndScream$byval_copy36)|0);
 $73 = ($72|0)==(0);
 $74 = HEAP32[(5864)>>2]|0;
 $75 = ($74|0)!=(0);
 $or$cond11 = $73 | $75;
 do {
  if ($or$cond11) {
   HEAP32[(5868)>>2] = 0;
   label = 45;
  } else {
   HEAP32[(5868)>>2] = 1;
   $76 = (_IsKeyPressed(32)|0);
   $77 = ($76|0)==(0);
   if ($77) {
    $78 = (_IsMouseButtonPressed(0)|0);
    $79 = ($78|0)==(0);
    if ($79) {
     label = 45;
     break;
    }
    _GetMousePosition($6);
    ;HEAP32[$$byval_copy33>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy33+4>>2]=HEAP32[$6+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[(5812)>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[(5812)+4>>2]|0;HEAP32[$sndScream$byval_copy36+8>>2]=HEAP32[(5812)+8>>2]|0;HEAP32[$sndScream$byval_copy36+12>>2]=HEAP32[(5812)+12>>2]|0;
    $80 = (_CheckCollisionPointRec($$byval_copy33,$sndScream$byval_copy36)|0);
    $81 = ($80|0)==(0);
    if ($81) {
     label = 45;
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[5920>>2] = 1;
   HEAP32[5024>>2] = 3;
   HEAP32[5312>>2] = 1;
  }
 } while(0);
 if ((label|0) == 45) {
  $$pr = HEAP32[5920>>2]|0;
  $82 = ($$pr|0)==(0);
  if (!($82)) {
   $$pr18 = HEAP32[5312>>2]|0;
   $83 = (($$pr18) + 1)|0;
   HEAP32[5312>>2] = $83;
   $84 = ($$pr18|0)>(179);
   if ($84) {
    $85 = HEAP32[5024>>2]|0;
    if ((($85|0) == 2)) {
     $88 = HEAP32[(5736)>>2]|0;
     $89 = ($88|0)==(0);
     if ($89) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy36);
     }
     HEAP32[(5728)>>2] = 1;
     HEAP32[(5732)>>2] = 0;
    } else if ((($85|0) == 3)) {
     $90 = HEAP32[(5872)>>2]|0;
     $91 = ($90|0)==(0);
     if ($91) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy36);
     }
     HEAP32[(5864)>>2] = 1;
     HEAP32[(5868)>>2] = 0;
    } else if ((($85|0) == 1)) {
     $86 = HEAP32[(5600)>>2]|0;
     $87 = ($86|0)==(0);
     if ($87) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy36>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy36+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy36);
     }
     HEAP32[(5592)>>2] = 1;
     HEAP32[(5596)>>2] = 0;
    }
    HEAP32[5920>>2] = 0;
    HEAP32[5312>>2] = 0;
   }
  }
 }
 $92 = HEAP32[5312>>2]|0;
 $93 = (($92) + 1)|0;
 HEAP32[5312>>2] = $93;
 $94 = $93 & 1;
 $95 = ($94|0)==(0);
 if ($95) {
  $96 = HEAP32[5048>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[5048>>2] = $97;
 }
 $98 = HEAP32[5032>>2]|0;
 if ((($98|0) == 1)) {
  $109 = HEAP32[5040>>2]|0;
  $110 = (($109) + 1)|0;
  HEAP32[5040>>2] = $110;
  $111 = (_IsKeyPressed(257)|0);
  $112 = ($111|0)==(0);
  if ($112) {
   $113 = (_IsMouseButtonPressed(0)|0);
   $114 = ($113|0)==(0);
   if ($114) {
    STACKTOP = sp;return;
   }
  }
  HEAP32[5032>>2] = 2;
  HEAP32[5040>>2] = 0;
  STACKTOP = sp;return;
 } else if ((($98|0) == 0)) {
  $99 = HEAP32[5048>>2]|0;
  $100 = ($99|0)<(58);
  if ($100) {
   (_strncpy((5056|0),(5928|0),($99|0))|0);
  } else {
   $101 = (_strlen((5056|0))|0);
   $102 = ($101|0)>(0);
   if ($102) {
    $i$020 = 0;
    while(1) {
     $103 = (5056 + ($i$020)|0);
     HEAP8[$103>>0] = 0;
     $104 = (($i$020) + 1)|0;
     $105 = (_strlen((5056|0))|0);
     $106 = ($104|0)<($105|0);
     if ($106) {
      $i$020 = $104;
     } else {
      break;
     }
    }
   }
   HEAP32[5048>>2] = 0;
   HEAP32[5032>>2] = 1;
  }
  $107 = (_IsKeyPressed(257)|0);
  $108 = ($107|0)==(0);
  if ($108) {
   STACKTOP = sp;return;
  }
  HEAP32[5032>>2] = 1;
  STACKTOP = sp;return;
 } else {
  $115 = ($98|0)==(2);
  $116 = HEAP32[5040>>2]|0;
  $117 = (($116) + 1)|0;
  HEAP32[5040>>2] = $117;
  $118 = ($116|0)>(179);
  $or$cond13 = $115 & $118;
  if (!($or$cond13)) {
   STACKTOP = sp;return;
  }
  HEAP32[5032>>2] = 3;
  STACKTOP = sp;return;
 }
}
function _DrawLivingroomScreen() {
 var $$byval_copy30 = 0, $$byval_copy34 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $doors$byval_copy10 = 0, $font$byval_copy21 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $$byval_copy34 = sp + 12|0;
 $$byval_copy30 = sp + 204|0;
 $font$byval_copy21 = sp + 144|0;
 $doors$byval_copy10 = sp + 180|0;
 $0 = sp + 200|0;
 $1 = sp + 264|0;
 $2 = sp + 8|0;
 $3 = sp + 268|0;
 $4 = sp + 104|0;
 $5 = sp + 284|0;
 $6 = sp + 280|0;
 $7 = sp + 276|0;
 $8 = sp + 272|0;
 $9 = sp;
 $10 = sp + 140|0;
 $11 = sp + 112|0;
 $12 = sp + 120|0;
 $13 = sp + 260|0;
 $14 = sp + 128|0;
 $15 = sp + 136|0;
 $16 = sp + 224|0;
 $17 = sp + 236|0;
 $18 = sp + 240|0;
 $19 = sp + 252|0;
 $20 = sp + 256|0;
 $21 = sp + 248|0;
 $22 = sp + 244|0;
 $23 = sp + 232|0;
 $24 = sp + 228|0;
 HEAP32[$0>>2] = -1;
 ;HEAP32[$$byval_copy30>>2]=HEAP32[5376>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[5376+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[5376+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[5376+12>>2]|0;HEAP32[$$byval_copy30+16>>2]=HEAP32[5376+16>>2]|0;
 ;HEAP8[$$byval_copy34>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawTexture($$byval_copy30,0,0,$$byval_copy34);
 dest=$$byval_copy34; src=5648; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy34,0);
 dest=$$byval_copy34; src=5512; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy34,0);
 dest=$$byval_copy34; src=5784; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy34,0);
 $25 = HEAP32[(5472)>>2]|0;
 $26 = ($25|0)==(0);
 if ($26) {
  HEAP32[$2>>2] = -1;
  ;HEAP32[$doors$byval_copy10>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy10+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy10+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy10+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy10+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy21>>2]=HEAP32[(5476)>>2]|0;HEAP32[$font$byval_copy21+4>>2]=HEAP32[(5476)+4>>2]|0;HEAP32[$font$byval_copy21+8>>2]=HEAP32[(5476)+8>>2]|0;HEAP32[$font$byval_copy21+12>>2]=HEAP32[(5476)+12>>2]|0;
  ;HEAP32[$$byval_copy30>>2]=HEAP32[5456>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[5456+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$2+3>>0]|0;
  _DrawTextureRec($doors$byval_copy10,$font$byval_copy21,$$byval_copy30,$$byval_copy34);
 } else {
  HEAP8[$1>>0] = 0;
  $27 = ((($1)) + 1|0);
  HEAP8[$27>>0] = -28;
  $28 = ((($1)) + 2|0);
  HEAP8[$28>>0] = 48;
  $29 = ((($1)) + 3|0);
  HEAP8[$29>>0] = -1;
  ;HEAP32[$doors$byval_copy10>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy10+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy10+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy10+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy10+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy21>>2]=HEAP32[(5476)>>2]|0;HEAP32[$font$byval_copy21+4>>2]=HEAP32[(5476)+4>>2]|0;HEAP32[$font$byval_copy21+8>>2]=HEAP32[(5476)+8>>2]|0;HEAP32[$font$byval_copy21+12>>2]=HEAP32[(5476)+12>>2]|0;
  ;HEAP32[$$byval_copy30>>2]=HEAP32[5456>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[5456+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$1+3>>0]|0;
  _DrawTextureRec($doors$byval_copy10,$font$byval_copy21,$$byval_copy30,$$byval_copy34);
 }
 $30 = HEAP32[(5416)>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  HEAP32[$4>>2] = -1;
  ;HEAP32[$doors$byval_copy10>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy10+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy10+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy10+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy10+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy21>>2]=HEAP32[(5420)>>2]|0;HEAP32[$font$byval_copy21+4>>2]=HEAP32[(5420)+4>>2]|0;HEAP32[$font$byval_copy21+8>>2]=HEAP32[(5420)+8>>2]|0;HEAP32[$font$byval_copy21+12>>2]=HEAP32[(5420)+12>>2]|0;
  ;HEAP32[$$byval_copy30>>2]=HEAP32[5400>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[5400+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$4+3>>0]|0;
  _DrawTextureRec($doors$byval_copy10,$font$byval_copy21,$$byval_copy30,$$byval_copy34);
 } else {
  HEAP8[$3>>0] = 0;
  $32 = ((($3)) + 1|0);
  HEAP8[$32>>0] = -28;
  $33 = ((($3)) + 2|0);
  HEAP8[$33>>0] = 48;
  $34 = ((($3)) + 3|0);
  HEAP8[$34>>0] = -1;
  ;HEAP32[$doors$byval_copy10>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy10+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy10+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy10+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy10+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy21>>2]=HEAP32[(5420)>>2]|0;HEAP32[$font$byval_copy21+4>>2]=HEAP32[(5420)+4>>2]|0;HEAP32[$font$byval_copy21+8>>2]=HEAP32[(5420)+8>>2]|0;HEAP32[$font$byval_copy21+12>>2]=HEAP32[(5420)+12>>2]|0;
  ;HEAP32[$$byval_copy30>>2]=HEAP32[5400>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[5400+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$3+3>>0]|0;
  _DrawTextureRec($doors$byval_copy10,$font$byval_copy21,$$byval_copy30,$$byval_copy34);
 }
 $35 = HEAP32[5032>>2]|0;
 $36 = ($35|0)<(2);
 if ($36) {
  $37 = (_GetScreenWidth()|0);
  HEAP8[$6>>0] = -56;
  $38 = ((($6)) + 1|0);
  HEAP8[$38>>0] = -56;
  $39 = ((($6)) + 2|0);
  HEAP8[$39>>0] = -56;
  $40 = ((($6)) + 3|0);
  HEAP8[$40>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$6+3>>0]|0;
  _Fade($5,$$byval_copy34,0.5);
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$5+3>>0]|0;
  _DrawRectangle(0,40,$37,200,$$byval_copy34);
 } else {
  $41 = ($35|0)==(2);
  if ($41) {
   $42 = (_GetScreenWidth()|0);
   HEAP8[$8>>0] = -56;
   $43 = ((($8)) + 1|0);
   HEAP8[$43>>0] = -56;
   $44 = ((($8)) + 2|0);
   HEAP8[$44>>0] = -56;
   $45 = ((($8)) + 3|0);
   HEAP8[$45>>0] = -1;
   ;HEAP8[$$byval_copy34>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$8+3>>0]|0;
   _Fade($7,$$byval_copy34,0.5);
   ;HEAP8[$$byval_copy34>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$7+3>>0]|0;
   _DrawRectangle(0,80,$42,100,$$byval_copy34);
  }
 }
 $46 = HEAP32[5032>>2]|0;
 if ((($46|0) == 0)) {
  HEAPF32[$9>>2] = 100.0;
  $47 = ((($9)) + 4|0);
  HEAPF32[$47>>2] = 80.0;
  $48 = HEAP32[(68)>>2]|0;
  HEAP32[$10>>2] = -1;
  dest=$font$byval_copy21; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy30>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$9+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$10+3>>0]|0;
  _DrawTextEx($font$byval_copy21,5056,$$byval_copy30,$48,2,$$byval_copy34);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($46|0) == 1)) {
  HEAPF32[$11>>2] = 100.0;
  $49 = ((($11)) + 4|0);
  HEAPF32[$49>>2] = 80.0;
  $50 = HEAP32[(68)>>2]|0;
  HEAP32[$12>>2] = -1;
  dest=$font$byval_copy21; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy30>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$11+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$12>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$12+3>>0]|0;
  _DrawTextEx($font$byval_copy21,5928,$$byval_copy30,$50,2,$$byval_copy34);
  $51 = HEAP32[5040>>2]|0;
  $52 = (($51|0) / 30)&-1;
  $53 = $52 & 1;
  $54 = ($53|0)==(0);
  if ($54) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $55 = (_GetScreenWidth()|0);
  $56 = (($55) + -280)|0;
  HEAP8[$13>>0] = 0;
  $57 = ((($13)) + 1|0);
  HEAP8[$57>>0] = 0;
  $58 = ((($13)) + 2|0);
  HEAP8[$58>>0] = 0;
  $59 = ((($13)) + 3|0);
  HEAP8[$59>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$13>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$13+3>>0]|0;
  _DrawText(8608,$56,200,20,$$byval_copy34);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($46|0) == 2)) {
  $60 = HEAP32[5040>>2]|0;
  $61 = (($60|0) / 30)&-1;
  $62 = $61 & 1;
  $63 = ($62|0)==(0);
  if ($63) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  HEAPF32[$14>>2] = 300.0;
  $64 = ((($14)) + 4|0);
  HEAPF32[$64>>2] = 95.0;
  $65 = HEAP32[(68)>>2]|0;
  $66 = $65 << 1;
  HEAP32[$15>>2] = -1;
  dest=$font$byval_copy21; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy30>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$14+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$15+3>>0]|0;
  _DrawTextEx($font$byval_copy21,8488,$$byval_copy30,$66,2,$$byval_copy34);
  HEAP8[$17>>0] = -26;
  $67 = ((($17)) + 1|0);
  HEAP8[$67>>0] = 41;
  $68 = ((($17)) + 2|0);
  HEAP8[$68>>0] = 55;
  $69 = ((($17)) + 3|0);
  HEAP8[$69>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$17+3>>0]|0;
  _Fade($16,$$byval_copy34,0.60000002384185791);
  ;HEAP32[$$byval_copy30>>2]=HEAP32[(5540)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(5540)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(5540)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(5540)+12>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$16>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$16+3>>0]|0;
  _DrawRectangleRec($$byval_copy30,$$byval_copy34);
  HEAP8[$19>>0] = -26;
  $70 = ((($19)) + 1|0);
  HEAP8[$70>>0] = 41;
  $71 = ((($19)) + 2|0);
  HEAP8[$71>>0] = 55;
  $72 = ((($19)) + 3|0);
  HEAP8[$72>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$19>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$19+3>>0]|0;
  _Fade($18,$$byval_copy34,0.60000002384185791);
  ;HEAP32[$$byval_copy30>>2]=HEAP32[(5812)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(5812)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(5812)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(5812)+12>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$18>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$18+3>>0]|0;
  _DrawRectangleRec($$byval_copy30,$$byval_copy34);
  HEAP8[$21>>0] = -26;
  $73 = ((($21)) + 1|0);
  HEAP8[$73>>0] = 41;
  $74 = ((($21)) + 2|0);
  HEAP8[$74>>0] = 55;
  $75 = ((($21)) + 3|0);
  HEAP8[$75>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$21>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$21+3>>0]|0;
  _Fade($20,$$byval_copy34,0.60000002384185791);
  ;HEAP32[$$byval_copy30>>2]=HEAP32[(5676)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(5676)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(5676)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(5676)+12>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$20>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$20+3>>0]|0;
  _DrawRectangleRec($$byval_copy30,$$byval_copy34);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else {
  $76 = HEAP32[5016>>2]|0;
  $77 = ($76|0)==(0);
  if ($77) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $78 = HEAP32[5040>>2]|0;
  $79 = (($78|0) / 30)&-1;
  $80 = $79 & 1;
  $81 = ($80|0)==(0);
  if ($81) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $82 = (_GetScreenWidth()|0);
  HEAP8[$23>>0] = -56;
  $83 = ((($23)) + 1|0);
  HEAP8[$83>>0] = -56;
  $84 = ((($23)) + 2|0);
  HEAP8[$84>>0] = -56;
  $85 = ((($23)) + 3|0);
  HEAP8[$85>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$23>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$23+3>>0]|0;
  _Fade($22,$$byval_copy34,0.5);
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$22>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$22+3>>0]|0;
  _DrawRectangle(0,0,$82,50,$$byval_copy34);
  HEAP8[$24>>0] = 0;
  $86 = ((($24)) + 1|0);
  HEAP8[$86>>0] = 0;
  $87 = ((($24)) + 2|0);
  HEAP8[$87>>0] = 0;
  $88 = ((($24)) + 3|0);
  HEAP8[$88>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$24>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$24+3>>0]|0;
  _DrawText(8504,420,15,20,$$byval_copy34);
  _DrawPlayer();
  STACKTOP = sp;return;
 }
}
function _UnloadLivingroomScreen() {
 var $phone$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $phone$byval_copy = sp;
 ;HEAP32[$phone$byval_copy>>2]=HEAP32[5376>>2]|0;HEAP32[$phone$byval_copy+4>>2]=HEAP32[5376+4>>2]|0;HEAP32[$phone$byval_copy+8>>2]=HEAP32[5376+8>>2]|0;HEAP32[$phone$byval_copy+12>>2]=HEAP32[5376+12>>2]|0;HEAP32[$phone$byval_copy+16>>2]=HEAP32[5376+16>>2]|0;
 _UnloadTexture($phone$byval_copy);
 dest=$phone$byval_copy; src=5512; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($phone$byval_copy);
 dest=$phone$byval_copy; src=5648; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($phone$byval_copy);
 dest=$phone$byval_copy; src=5784; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($phone$byval_copy);
 STACKTOP = sp;return;
}
function _FinishLivingroomScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[5320>>2]|0;
 return ($0|0);
}
function _InitKitchenScreen() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 60|0;
 $1 = sp;
 $2 = sp + 20|0;
 $3 = sp + 40|0;
 _ResetPlayer();
 HEAP32[6184>>2] = 0;
 HEAP32[6192>>2] = -1;
 HEAP32[6200>>2] = 0;
 HEAP32[6208>>2] = 0;
 HEAP32[6216>>2] = 0;
 _memset((6224|0),0,256)|0;
 HEAP32[6480>>2] = 0;
 HEAP32[6488>>2] = 0;
 _LoadTexture($0,6496);
 ;HEAP32[6544>>2]=HEAP32[$0>>2]|0;HEAP32[6544+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[6544+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[6544+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[6544+16>>2]=HEAP32[$0+16>>2]|0;
 HEAPF32[6568>>2] = -45.0;
 HEAPF32[(6572)>>2] = 136.0;
 HEAP32[(6576)>>2] = 0;
 HEAP32[(6580)>>2] = 1;
 $4 = HEAP32[(92)>>2]|0;
 $5 = (($4|0) / 3)&-1;
 $6 = HEAP32[(6576)>>2]|0;
 $7 = Math_imul($6, $5)|0;
 $8 = HEAP32[(96)>>2]|0;
 $9 = (($8|0) / 2)&-1;
 HEAP32[(6588)>>2] = $7;
 HEAP32[(6592)>>2] = $9;
 HEAP32[(6596)>>2] = $5;
 HEAP32[(6600)>>2] = $9;
 $10 = +HEAPF32[6568>>2];
 $11 = (~~(($10)));
 $12 = +HEAPF32[(6572)>>2];
 $13 = (~~(($12)));
 $14 = HEAP32[(92)>>2]|0;
 $15 = (($14|0) / 3)&-1;
 $16 = HEAP32[(96)>>2]|0;
 $17 = (($16|0) / 2)&-1;
 HEAP32[(6604)>>2] = $11;
 HEAP32[(6608)>>2] = $13;
 HEAP32[(6612)>>2] = $15;
 HEAP32[(6616)>>2] = $17;
 HEAP32[(6584)>>2] = 0;
 HEAPF32[6624>>2] = 1090.0;
 HEAPF32[(6628)>>2] = 148.0;
 HEAP32[(6632)>>2] = 2;
 HEAP32[(6636)>>2] = 1;
 $18 = HEAP32[(92)>>2]|0;
 $19 = (($18|0) / 3)&-1;
 $20 = HEAP32[(6632)>>2]|0;
 $21 = Math_imul($20, $19)|0;
 $22 = HEAP32[(96)>>2]|0;
 $23 = (($22|0) / 2)&-1;
 HEAP32[(6644)>>2] = $21;
 HEAP32[(6648)>>2] = $23;
 HEAP32[(6652)>>2] = $19;
 HEAP32[(6656)>>2] = $23;
 $24 = +HEAPF32[6624>>2];
 $25 = (~~(($24)));
 $26 = +HEAPF32[(6628)>>2];
 $27 = (~~(($26)));
 $28 = HEAP32[(92)>>2]|0;
 $29 = (($28|0) / 3)&-1;
 $30 = HEAP32[(96)>>2]|0;
 $31 = (($30|0) / 2)&-1;
 HEAP32[(6660)>>2] = $25;
 HEAP32[(6664)>>2] = $27;
 HEAP32[(6668)>>2] = $29;
 HEAP32[(6672)>>2] = $31;
 HEAP32[(6640)>>2] = 0;
 HEAPF32[6680>>2] = 280.0;
 HEAPF32[(6684)>>2] = 260.0;
 _LoadTexture($1,6776);
 ;HEAP32[(6688)>>2]=HEAP32[$1>>2]|0;HEAP32[(6688)+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[(6688)+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[(6688)+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[(6688)+16>>2]=HEAP32[$1+16>>2]|0;
 HEAP32[(6748)>>2] = 0;
 HEAP32[(6744)>>2] = 0;
 HEAP32[(6756)>>2] = 4;
 $32 = +HEAPF32[6680>>2];
 $33 = $32 + 100.0;
 $34 = (~~(($33)));
 $35 = +HEAPF32[(6684)>>2];
 $36 = $35 + 25.0;
 $37 = (~~(($36)));
 HEAP32[(6708)>>2] = $34;
 HEAP32[(6712)>>2] = $37;
 HEAP32[(6716)>>2] = 272;
 HEAP32[(6720)>>2] = 348;
 $38 = HEAP32[(6692)>>2]|0;
 $39 = HEAP32[(6756)>>2]|0;
 $40 = (($38|0) / ($39|0))&-1;
 $41 = HEAP32[(6696)>>2]|0;
 HEAP32[(6724)>>2] = 0;
 HEAP32[(6728)>>2] = 0;
 HEAP32[(6732)>>2] = $40;
 HEAP32[(6736)>>2] = $41;
 HEAP32[(6764)>>2] = 0;
 HEAP32[(6760)>>2] = 0;
 HEAP32[(6768)>>2] = 1;
 HEAPF32[6816>>2] = 230.0;
 HEAPF32[(6820)>>2] = 410.0;
 _LoadTexture($2,6912);
 ;HEAP32[(6824)>>2]=HEAP32[$2>>2]|0;HEAP32[(6824)+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[(6824)+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[(6824)+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[(6824)+16>>2]=HEAP32[$2+16>>2]|0;
 HEAP32[(6884)>>2] = 0;
 HEAP32[(6880)>>2] = 0;
 HEAP32[(6892)>>2] = 4;
 $42 = +HEAPF32[6816>>2];
 $43 = $42 + 30.0;
 $44 = (~~(($43)));
 $45 = +HEAPF32[(6820)>>2];
 $46 = $45 + 60.0;
 $47 = (~~(($46)));
 HEAP32[(6844)>>2] = $44;
 HEAP32[(6848)>>2] = $47;
 HEAP32[(6852)>>2] = 100;
 HEAP32[(6856)>>2] = 160;
 $48 = HEAP32[(6828)>>2]|0;
 $49 = HEAP32[(6892)>>2]|0;
 $50 = (($48|0) / ($49|0))&-1;
 $51 = HEAP32[(6832)>>2]|0;
 HEAP32[(6860)>>2] = 0;
 HEAP32[(6864)>>2] = 0;
 HEAP32[(6868)>>2] = $50;
 HEAP32[(6872)>>2] = $51;
 HEAP32[(6900)>>2] = 0;
 HEAP32[(6896)>>2] = 0;
 HEAP32[(6904)>>2] = 1;
 HEAPF32[6960>>2] = 715.0;
 HEAPF32[(6964)>>2] = 88.0;
 _LoadTexture($3,7056);
 ;HEAP32[(6968)>>2]=HEAP32[$3>>2]|0;HEAP32[(6968)+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[(6968)+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[(6968)+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[(6968)+16>>2]=HEAP32[$3+16>>2]|0;
 HEAP32[(7028)>>2] = 0;
 HEAP32[(7024)>>2] = 0;
 HEAP32[(7036)>>2] = 4;
 $52 = +HEAPF32[6960>>2];
 $53 = $52 + 100.0;
 $54 = (~~(($53)));
 $55 = +HEAPF32[(6964)>>2];
 $56 = $55 + 10.0;
 $57 = (~~(($56)));
 HEAP32[(6988)>>2] = $54;
 HEAP32[(6992)>>2] = $57;
 HEAP32[(6996)>>2] = 200;
 HEAP32[(7000)>>2] = 370;
 $58 = HEAP32[(6972)>>2]|0;
 $59 = HEAP32[(7036)>>2]|0;
 $60 = (($58|0) / ($59|0))&-1;
 $61 = HEAP32[(6976)>>2]|0;
 HEAP32[(7004)>>2] = 0;
 HEAP32[(7008)>>2] = 0;
 HEAP32[(7012)>>2] = $60;
 HEAP32[(7016)>>2] = $61;
 HEAP32[(7044)>>2] = 0;
 HEAP32[(7040)>>2] = 0;
 HEAP32[(7048)>>2] = 0;
 STACKTOP = sp;return;
}
function _UpdateKitchenScreen() {
 var $$15 = 0, $$byval_copy31 = 0, $$pr = 0, $$pr16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$018 = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $sndScream$byval_copy34 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $sndScream$byval_copy34 = sp + 72|0;
 $$byval_copy31 = sp + 56|0;
 $0 = sp + 48|0;
 $1 = sp + 40|0;
 $2 = sp + 32|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = sp + 24|0;
 $7 = HEAP32[(208)>>2]|0;
 $8 = ($7|0)==(0);
 do {
  if (!($8)) {
   _GetMousePosition($0);
   ;HEAP32[$$byval_copy31>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[$0+4>>2]|0;
   ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6604)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6604)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6604)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6604)+12>>2]|0;
   $9 = (_CheckCollisionPointRec($$byval_copy31,$sndScream$byval_copy34)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    ;HEAP32[$$byval_copy31>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy31+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy31+12>>2]=HEAP32[(144)+12>>2]|0;
    ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6604)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6604)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6604)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6604)+12>>2]|0;
    $11 = (_CheckCollisionRecs($$byval_copy31,$sndScream$byval_copy34)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     HEAP32[(6584)>>2] = 0;
    } else {
     label = 5;
    }
   } else {
    label = 5;
   }
   do {
    if ((label|0) == 5) {
     HEAP32[(6584)>>2] = 1;
     ;HEAP32[$$byval_copy31>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy31+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy31+12>>2]=HEAP32[(144)+12>>2]|0;
     ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6604)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6604)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6604)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6604)+12>>2]|0;
     $13 = (_CheckCollisionRecs($$byval_copy31,$sndScream$byval_copy34)|0);
     $14 = ($13|0)==(0);
     if (!($14)) {
      $15 = (_IsMouseButtonPressed(0)|0);
      $16 = ($15|0)==(0);
      if ($16) {
       label = 8;
      } else {
       _GetMousePosition($1);
       ;HEAP32[$$byval_copy31>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[$1+4>>2]|0;
       ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6604)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6604)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6604)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6604)+12>>2]|0;
       $17 = (_CheckCollisionPointRec($$byval_copy31,$sndScream$byval_copy34)|0);
       $18 = ($17|0)==(0);
       if ($18) {
        label = 8;
       }
      }
      if ((label|0) == 8) {
       $19 = (_IsKeyPressed(32)|0);
       $20 = ($19|0)==(0);
       if ($20) {
        break;
       }
      }
      $21 = HEAP32[(6580)>>2]|0;
      $22 = ($21|0)==(0);
      if ($22) {
       HEAP32[6488>>2] = 1;
       break;
      } else {
       HEAP32[(6592)>>2] = 0;
       HEAP32[(6580)>>2] = 0;
       ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[112>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[112+4>>2]|0;
       _PlaySound($sndScream$byval_copy34);
       break;
      }
     }
    }
   } while(0);
   _GetMousePosition($2);
   ;HEAP32[$$byval_copy31>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[$2+4>>2]|0;
   ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6660)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6660)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6660)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6660)+12>>2]|0;
   $23 = (_CheckCollisionPointRec($$byval_copy31,$sndScream$byval_copy34)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    ;HEAP32[$$byval_copy31>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy31+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy31+12>>2]=HEAP32[(144)+12>>2]|0;
    ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6660)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6660)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6660)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6660)+12>>2]|0;
    $25 = (_CheckCollisionRecs($$byval_copy31,$sndScream$byval_copy34)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP32[(6640)>>2] = 0;
     break;
    }
   }
   HEAP32[(6640)>>2] = 1;
   ;HEAP32[$$byval_copy31>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy31+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy31+12>>2]=HEAP32[(144)+12>>2]|0;
   ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6660)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6660)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6660)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6660)+12>>2]|0;
   $27 = (_CheckCollisionRecs($$byval_copy31,$sndScream$byval_copy34)|0);
   $28 = ($27|0)==(0);
   if (!($28)) {
    $29 = (_IsMouseButtonPressed(0)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     label = 18;
    } else {
     _GetMousePosition($3);
     ;HEAP32[$$byval_copy31>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[$3+4>>2]|0;
     ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6660)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6660)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6660)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6660)+12>>2]|0;
     $31 = (_CheckCollisionPointRec($$byval_copy31,$sndScream$byval_copy34)|0);
     $32 = ($31|0)==(0);
     if ($32) {
      label = 18;
     }
    }
    if ((label|0) == 18) {
     $33 = (_IsKeyPressed(32)|0);
     $34 = ($33|0)==(0);
     if ($34) {
      break;
     }
    }
    $35 = HEAP32[(6636)>>2]|0;
    $36 = ($35|0)==(0);
    if ($36) {
     HEAP32[6488>>2] = 2;
     break;
    } else {
     HEAP32[(6648)>>2] = 0;
     HEAP32[(6636)>>2] = 0;
     ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[112>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[112+4>>2]|0;
     _PlaySound($sndScream$byval_copy34);
     break;
    }
   }
  }
 } while(0);
 $37 = HEAP32[6200>>2]|0;
 $38 = ($37|0)>(2);
 if ($38) {
  _UpdatePlayer();
  _UpdateMonster(6680);
  _UpdateMonster(6816);
  _UpdateMonster(6960);
 }
 ;HEAP32[$$byval_copy31>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy31+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy31+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6708)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6708)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6708)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6708)+12>>2]|0;
 $39 = (_CheckCollisionRecs($$byval_copy31,$sndScream$byval_copy34)|0);
 $40 = ($39|0)==(0);
 $41 = HEAP32[(6760)>>2]|0;
 $42 = ($41|0)!=(0);
 $or$cond = $40 | $42;
 if ($or$cond) {
  ;HEAP32[$$byval_copy31>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy31+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy31+12>>2]=HEAP32[(144)+12>>2]|0;
  ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6988)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6988)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6988)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6988)+12>>2]|0;
  $43 = (_CheckCollisionRecs($$byval_copy31,$sndScream$byval_copy34)|0);
  $44 = ($43|0)==(0);
  $45 = HEAP32[(7040)>>2]|0;
  $46 = ($45|0)!=(0);
  $or$cond3 = $44 | $46;
  $47 = $or$cond3&1;
  $$15 = $47 ^ 1;
  $storemerge = $$15;
 } else {
  $storemerge = 1;
 }
 HEAP32[6184>>2] = $storemerge;
 ;HEAP32[$$byval_copy31>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy31+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy31+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6708)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6708)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6708)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6708)+12>>2]|0;
 $48 = (_CheckCollisionRecs($$byval_copy31,$sndScream$byval_copy34)|0);
 $49 = ($48|0)==(0);
 $50 = HEAP32[(6760)>>2]|0;
 $51 = ($50|0)!=(0);
 $or$cond5 = $49 | $51;
 do {
  if ($or$cond5) {
   HEAP32[(6764)>>2] = 0;
  } else {
   HEAP32[(6764)>>2] = 1;
   $52 = (_IsKeyPressed(32)|0);
   $53 = ($52|0)==(0);
   if ($53) {
    $54 = (_IsMouseButtonPressed(0)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     break;
    }
    _GetMousePosition($4);
    ;HEAP32[$$byval_copy31>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[$4+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6708)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6708)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6708)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6708)+12>>2]|0;
    $56 = (_CheckCollisionPointRec($$byval_copy31,$sndScream$byval_copy34)|0);
    $57 = ($56|0)==(0);
    if ($57) {
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[7096>>2] = 1;
   HEAP32[6480>>2] = 0;
   HEAP32[6192>>2] = 1;
  }
 } while(0);
 ;HEAP32[$$byval_copy31>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy31+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy31+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6844)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6844)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6844)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6844)+12>>2]|0;
 $58 = (_CheckCollisionRecs($$byval_copy31,$sndScream$byval_copy34)|0);
 $59 = ($58|0)==(0);
 $60 = HEAP32[(6896)>>2]|0;
 $61 = ($60|0)!=(0);
 $or$cond7 = $59 | $61;
 do {
  if ($or$cond7) {
   HEAP32[(6900)>>2] = 0;
  } else {
   HEAP32[(6900)>>2] = 1;
   $62 = (_IsKeyPressed(32)|0);
   $63 = ($62|0)==(0);
   if ($63) {
    $64 = (_IsMouseButtonPressed(0)|0);
    $65 = ($64|0)==(0);
    if ($65) {
     break;
    }
    _GetMousePosition($5);
    ;HEAP32[$$byval_copy31>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[$5+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6844)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6844)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6844)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6844)+12>>2]|0;
    $66 = (_CheckCollisionPointRec($$byval_copy31,$sndScream$byval_copy34)|0);
    $67 = ($66|0)==(0);
    if ($67) {
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[7096>>2] = 1;
   HEAP32[6480>>2] = 0;
   HEAP32[6192>>2] = 2;
  }
 } while(0);
 ;HEAP32[$$byval_copy31>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy31+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy31+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6988)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6988)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6988)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6988)+12>>2]|0;
 $68 = (_CheckCollisionRecs($$byval_copy31,$sndScream$byval_copy34)|0);
 $69 = ($68|0)==(0);
 $70 = HEAP32[(7040)>>2]|0;
 $71 = ($70|0)!=(0);
 $or$cond9 = $69 | $71;
 do {
  if ($or$cond9) {
   HEAP32[(7044)>>2] = 0;
   label = 44;
  } else {
   HEAP32[(7044)>>2] = 1;
   $72 = (_IsKeyPressed(32)|0);
   $73 = ($72|0)==(0);
   if ($73) {
    $74 = (_IsMouseButtonPressed(0)|0);
    $75 = ($74|0)==(0);
    if ($75) {
     label = 44;
     break;
    }
    _GetMousePosition($6);
    ;HEAP32[$$byval_copy31>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy31+4>>2]=HEAP32[$6+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[(6988)>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[(6988)+4>>2]|0;HEAP32[$sndScream$byval_copy34+8>>2]=HEAP32[(6988)+8>>2]|0;HEAP32[$sndScream$byval_copy34+12>>2]=HEAP32[(6988)+12>>2]|0;
    $76 = (_CheckCollisionPointRec($$byval_copy31,$sndScream$byval_copy34)|0);
    $77 = ($76|0)==(0);
    if ($77) {
     label = 44;
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[7096>>2] = 1;
   HEAP32[6192>>2] = 3;
   HEAP32[6480>>2] = 1;
  }
 } while(0);
 if ((label|0) == 44) {
  $$pr = HEAP32[7096>>2]|0;
  $78 = ($$pr|0)==(0);
  if (!($78)) {
   $$pr16 = HEAP32[6480>>2]|0;
   $79 = (($$pr16) + 1)|0;
   HEAP32[6480>>2] = $79;
   $80 = ($$pr16|0)>(179);
   if ($80) {
    $81 = HEAP32[6192>>2]|0;
    if ((($81|0) == 3)) {
     $86 = HEAP32[(7048)>>2]|0;
     $87 = ($86|0)==(0);
     if ($87) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy34);
     }
     HEAP32[(7040)>>2] = 1;
     HEAP32[(7044)>>2] = 0;
    } else if ((($81|0) == 1)) {
     $82 = HEAP32[(6768)>>2]|0;
     $83 = ($82|0)==(0);
     if ($83) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy34);
     }
     HEAP32[(6760)>>2] = 1;
     HEAP32[(6764)>>2] = 0;
    } else if ((($81|0) == 2)) {
     $84 = HEAP32[(6904)>>2]|0;
     $85 = ($84|0)==(0);
     if ($85) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy34>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy34+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy34);
     }
     HEAP32[(6896)>>2] = 1;
     HEAP32[(6900)>>2] = 0;
    }
    HEAP32[7096>>2] = 0;
    HEAP32[6480>>2] = 0;
   }
  }
 }
 $88 = HEAP32[6480>>2]|0;
 $89 = (($88) + 1)|0;
 HEAP32[6480>>2] = $89;
 $90 = $89 & 1;
 $91 = ($90|0)==(0);
 if ($91) {
  $92 = HEAP32[6216>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[6216>>2] = $93;
 }
 $94 = HEAP32[6200>>2]|0;
 if ((($94|0) == 0)) {
  $95 = HEAP32[6216>>2]|0;
  $96 = ($95|0)<(48);
  if ($96) {
   (_strncpy((6224|0),(7104|0),($95|0))|0);
  } else {
   $97 = (_strlen((6224|0))|0);
   $98 = ($97|0)>(0);
   if ($98) {
    $i$018 = 0;
    while(1) {
     $99 = (6224 + ($i$018)|0);
     HEAP8[$99>>0] = 0;
     $100 = (($i$018) + 1)|0;
     $101 = (_strlen((6224|0))|0);
     $102 = ($100|0)<($101|0);
     if ($102) {
      $i$018 = $100;
     } else {
      break;
     }
    }
   }
   HEAP32[6216>>2] = 0;
   HEAP32[6200>>2] = 1;
  }
  $103 = (_IsKeyPressed(257)|0);
  $104 = ($103|0)==(0);
  if ($104) {
   STACKTOP = sp;return;
  }
  HEAP32[6200>>2] = 1;
  STACKTOP = sp;return;
 } else if ((($94|0) == 1)) {
  $105 = HEAP32[6208>>2]|0;
  $106 = (($105) + 1)|0;
  HEAP32[6208>>2] = $106;
  $107 = (_IsKeyPressed(257)|0);
  $108 = ($107|0)==(0);
  if ($108) {
   $109 = (_IsMouseButtonPressed(0)|0);
   $110 = ($109|0)==(0);
   if ($110) {
    STACKTOP = sp;return;
   }
  }
  HEAP32[6200>>2] = 2;
  HEAP32[6208>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $111 = ($94|0)==(2);
  $112 = HEAP32[6208>>2]|0;
  $113 = (($112) + 1)|0;
  HEAP32[6208>>2] = $113;
  $114 = ($112|0)>(179);
  $or$cond11 = $111 & $114;
  if (!($or$cond11)) {
   STACKTOP = sp;return;
  }
  HEAP32[6200>>2] = 3;
  STACKTOP = sp;return;
 }
}
function _DrawKitchenScreen() {
 var $$byval_copy30 = 0, $$byval_copy34 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $doors$byval_copy10 = 0, $font$byval_copy21 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $$byval_copy34 = sp + 12|0;
 $$byval_copy30 = sp + 204|0;
 $font$byval_copy21 = sp + 144|0;
 $doors$byval_copy10 = sp + 180|0;
 $0 = sp + 200|0;
 $1 = sp + 264|0;
 $2 = sp + 8|0;
 $3 = sp + 268|0;
 $4 = sp + 104|0;
 $5 = sp + 284|0;
 $6 = sp + 280|0;
 $7 = sp + 276|0;
 $8 = sp + 272|0;
 $9 = sp;
 $10 = sp + 140|0;
 $11 = sp + 112|0;
 $12 = sp + 120|0;
 $13 = sp + 260|0;
 $14 = sp + 128|0;
 $15 = sp + 136|0;
 $16 = sp + 224|0;
 $17 = sp + 236|0;
 $18 = sp + 240|0;
 $19 = sp + 252|0;
 $20 = sp + 256|0;
 $21 = sp + 248|0;
 $22 = sp + 244|0;
 $23 = sp + 232|0;
 $24 = sp + 228|0;
 HEAP32[$0>>2] = -1;
 ;HEAP32[$$byval_copy30>>2]=HEAP32[6544>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[6544+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[6544+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[6544+12>>2]|0;HEAP32[$$byval_copy30+16>>2]=HEAP32[6544+16>>2]|0;
 ;HEAP8[$$byval_copy34>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawTexture($$byval_copy30,0,0,$$byval_copy34);
 dest=$$byval_copy34; src=6680; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy34,0);
 dest=$$byval_copy34; src=6816; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy34,0);
 dest=$$byval_copy34; src=6960; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy34,0);
 $25 = HEAP32[(6640)>>2]|0;
 $26 = ($25|0)==(0);
 if ($26) {
  HEAP32[$2>>2] = -1;
  ;HEAP32[$doors$byval_copy10>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy10+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy10+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy10+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy10+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy21>>2]=HEAP32[(6644)>>2]|0;HEAP32[$font$byval_copy21+4>>2]=HEAP32[(6644)+4>>2]|0;HEAP32[$font$byval_copy21+8>>2]=HEAP32[(6644)+8>>2]|0;HEAP32[$font$byval_copy21+12>>2]=HEAP32[(6644)+12>>2]|0;
  ;HEAP32[$$byval_copy30>>2]=HEAP32[6624>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[6624+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$2+3>>0]|0;
  _DrawTextureRec($doors$byval_copy10,$font$byval_copy21,$$byval_copy30,$$byval_copy34);
 } else {
  HEAP8[$1>>0] = 0;
  $27 = ((($1)) + 1|0);
  HEAP8[$27>>0] = -28;
  $28 = ((($1)) + 2|0);
  HEAP8[$28>>0] = 48;
  $29 = ((($1)) + 3|0);
  HEAP8[$29>>0] = -1;
  ;HEAP32[$doors$byval_copy10>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy10+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy10+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy10+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy10+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy21>>2]=HEAP32[(6644)>>2]|0;HEAP32[$font$byval_copy21+4>>2]=HEAP32[(6644)+4>>2]|0;HEAP32[$font$byval_copy21+8>>2]=HEAP32[(6644)+8>>2]|0;HEAP32[$font$byval_copy21+12>>2]=HEAP32[(6644)+12>>2]|0;
  ;HEAP32[$$byval_copy30>>2]=HEAP32[6624>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[6624+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$1+3>>0]|0;
  _DrawTextureRec($doors$byval_copy10,$font$byval_copy21,$$byval_copy30,$$byval_copy34);
 }
 $30 = HEAP32[(6584)>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  HEAP32[$4>>2] = -1;
  ;HEAP32[$doors$byval_copy10>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy10+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy10+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy10+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy10+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy21>>2]=HEAP32[(6588)>>2]|0;HEAP32[$font$byval_copy21+4>>2]=HEAP32[(6588)+4>>2]|0;HEAP32[$font$byval_copy21+8>>2]=HEAP32[(6588)+8>>2]|0;HEAP32[$font$byval_copy21+12>>2]=HEAP32[(6588)+12>>2]|0;
  ;HEAP32[$$byval_copy30>>2]=HEAP32[6568>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[6568+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$4+3>>0]|0;
  _DrawTextureRec($doors$byval_copy10,$font$byval_copy21,$$byval_copy30,$$byval_copy34);
 } else {
  HEAP8[$3>>0] = 0;
  $32 = ((($3)) + 1|0);
  HEAP8[$32>>0] = -28;
  $33 = ((($3)) + 2|0);
  HEAP8[$33>>0] = 48;
  $34 = ((($3)) + 3|0);
  HEAP8[$34>>0] = -1;
  ;HEAP32[$doors$byval_copy10>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy10+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy10+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy10+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy10+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy21>>2]=HEAP32[(6588)>>2]|0;HEAP32[$font$byval_copy21+4>>2]=HEAP32[(6588)+4>>2]|0;HEAP32[$font$byval_copy21+8>>2]=HEAP32[(6588)+8>>2]|0;HEAP32[$font$byval_copy21+12>>2]=HEAP32[(6588)+12>>2]|0;
  ;HEAP32[$$byval_copy30>>2]=HEAP32[6568>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[6568+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$3+3>>0]|0;
  _DrawTextureRec($doors$byval_copy10,$font$byval_copy21,$$byval_copy30,$$byval_copy34);
 }
 $35 = HEAP32[6200>>2]|0;
 $36 = ($35|0)<(2);
 if ($36) {
  $37 = (_GetScreenWidth()|0);
  HEAP8[$6>>0] = -56;
  $38 = ((($6)) + 1|0);
  HEAP8[$38>>0] = -56;
  $39 = ((($6)) + 2|0);
  HEAP8[$39>>0] = -56;
  $40 = ((($6)) + 3|0);
  HEAP8[$40>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$6+3>>0]|0;
  _Fade($5,$$byval_copy34,0.5);
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$5+3>>0]|0;
  _DrawRectangle(0,40,$37,200,$$byval_copy34);
 } else {
  $41 = ($35|0)==(2);
  if ($41) {
   $42 = (_GetScreenWidth()|0);
   HEAP8[$8>>0] = -56;
   $43 = ((($8)) + 1|0);
   HEAP8[$43>>0] = -56;
   $44 = ((($8)) + 2|0);
   HEAP8[$44>>0] = -56;
   $45 = ((($8)) + 3|0);
   HEAP8[$45>>0] = -1;
   ;HEAP8[$$byval_copy34>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$8+3>>0]|0;
   _Fade($7,$$byval_copy34,0.5);
   ;HEAP8[$$byval_copy34>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$7+3>>0]|0;
   _DrawRectangle(0,80,$42,100,$$byval_copy34);
  }
 }
 $46 = HEAP32[6200>>2]|0;
 if ((($46|0) == 0)) {
  HEAPF32[$9>>2] = 100.0;
  $47 = ((($9)) + 4|0);
  HEAPF32[$47>>2] = 80.0;
  $48 = HEAP32[(68)>>2]|0;
  HEAP32[$10>>2] = -1;
  dest=$font$byval_copy21; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy30>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$9+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$10+3>>0]|0;
  _DrawTextEx($font$byval_copy21,6224,$$byval_copy30,$48,2,$$byval_copy34);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($46|0) == 2)) {
  $60 = HEAP32[6208>>2]|0;
  $61 = (($60|0) / 30)&-1;
  $62 = $61 & 1;
  $63 = ($62|0)==(0);
  if ($63) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  HEAPF32[$14>>2] = 300.0;
  $64 = ((($14)) + 4|0);
  HEAPF32[$64>>2] = 95.0;
  $65 = HEAP32[(68)>>2]|0;
  $66 = $65 << 1;
  HEAP32[$15>>2] = -1;
  dest=$font$byval_copy21; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy30>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$14+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$15+3>>0]|0;
  _DrawTextEx($font$byval_copy21,8488,$$byval_copy30,$66,2,$$byval_copy34);
  HEAP8[$17>>0] = -26;
  $67 = ((($17)) + 1|0);
  HEAP8[$67>>0] = 41;
  $68 = ((($17)) + 2|0);
  HEAP8[$68>>0] = 55;
  $69 = ((($17)) + 3|0);
  HEAP8[$69>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$17+3>>0]|0;
  _Fade($16,$$byval_copy34,0.60000002384185791);
  ;HEAP32[$$byval_copy30>>2]=HEAP32[(6708)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(6708)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(6708)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(6708)+12>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$16>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$16+3>>0]|0;
  _DrawRectangleRec($$byval_copy30,$$byval_copy34);
  HEAP8[$19>>0] = -26;
  $70 = ((($19)) + 1|0);
  HEAP8[$70>>0] = 41;
  $71 = ((($19)) + 2|0);
  HEAP8[$71>>0] = 55;
  $72 = ((($19)) + 3|0);
  HEAP8[$72>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$19>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$19+3>>0]|0;
  _Fade($18,$$byval_copy34,0.60000002384185791);
  ;HEAP32[$$byval_copy30>>2]=HEAP32[(6988)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(6988)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(6988)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(6988)+12>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$18>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$18+3>>0]|0;
  _DrawRectangleRec($$byval_copy30,$$byval_copy34);
  HEAP8[$21>>0] = -26;
  $73 = ((($21)) + 1|0);
  HEAP8[$73>>0] = 41;
  $74 = ((($21)) + 2|0);
  HEAP8[$74>>0] = 55;
  $75 = ((($21)) + 3|0);
  HEAP8[$75>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$21>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$21+3>>0]|0;
  _Fade($20,$$byval_copy34,0.60000002384185791);
  ;HEAP32[$$byval_copy30>>2]=HEAP32[(6844)>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[(6844)+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[(6844)+8>>2]|0;HEAP32[$$byval_copy30+12>>2]=HEAP32[(6844)+12>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$20>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$20+3>>0]|0;
  _DrawRectangleRec($$byval_copy30,$$byval_copy34);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($46|0) == 1)) {
  HEAPF32[$11>>2] = 100.0;
  $49 = ((($11)) + 4|0);
  HEAPF32[$49>>2] = 80.0;
  $50 = HEAP32[(68)>>2]|0;
  HEAP32[$12>>2] = -1;
  dest=$font$byval_copy21; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy30>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$11+4>>2]|0;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$12>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$12+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$12+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$12+3>>0]|0;
  _DrawTextEx($font$byval_copy21,7104,$$byval_copy30,$50,2,$$byval_copy34);
  $51 = HEAP32[6208>>2]|0;
  $52 = (($51|0) / 30)&-1;
  $53 = $52 & 1;
  $54 = ($53|0)==(0);
  if ($54) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $55 = (_GetScreenWidth()|0);
  $56 = (($55) + -280)|0;
  HEAP8[$13>>0] = 0;
  $57 = ((($13)) + 1|0);
  HEAP8[$57>>0] = 0;
  $58 = ((($13)) + 2|0);
  HEAP8[$58>>0] = 0;
  $59 = ((($13)) + 3|0);
  HEAP8[$59>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$13>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$13+3>>0]|0;
  _DrawText(8608,$56,200,20,$$byval_copy34);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else {
  $76 = HEAP32[6184>>2]|0;
  $77 = ($76|0)==(0);
  if ($77) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $78 = HEAP32[6208>>2]|0;
  $79 = (($78|0) / 30)&-1;
  $80 = $79 & 1;
  $81 = ($80|0)==(0);
  if ($81) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $82 = (_GetScreenWidth()|0);
  HEAP8[$23>>0] = -56;
  $83 = ((($23)) + 1|0);
  HEAP8[$83>>0] = -56;
  $84 = ((($23)) + 2|0);
  HEAP8[$84>>0] = -56;
  $85 = ((($23)) + 3|0);
  HEAP8[$85>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$23>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$23+3>>0]|0;
  _Fade($22,$$byval_copy34,0.5);
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$22>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$22+3>>0]|0;
  _DrawRectangle(0,0,$82,50,$$byval_copy34);
  HEAP8[$24>>0] = 0;
  $86 = ((($24)) + 1|0);
  HEAP8[$86>>0] = 0;
  $87 = ((($24)) + 2|0);
  HEAP8[$87>>0] = 0;
  $88 = ((($24)) + 3|0);
  HEAP8[$88>>0] = -1;
  ;HEAP8[$$byval_copy34>>0]=HEAP8[$24>>0]|0;HEAP8[$$byval_copy34+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$$byval_copy34+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$$byval_copy34+3>>0]=HEAP8[$24+3>>0]|0;
  _DrawText(8504,420,15,20,$$byval_copy34);
  _DrawPlayer();
  STACKTOP = sp;return;
 }
}
function _UnloadKitchenScreen() {
 var $window$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $window$byval_copy = sp;
 ;HEAP32[$window$byval_copy>>2]=HEAP32[6544>>2]|0;HEAP32[$window$byval_copy+4>>2]=HEAP32[6544+4>>2]|0;HEAP32[$window$byval_copy+8>>2]=HEAP32[6544+8>>2]|0;HEAP32[$window$byval_copy+12>>2]=HEAP32[6544+12>>2]|0;HEAP32[$window$byval_copy+16>>2]=HEAP32[6544+16>>2]|0;
 _UnloadTexture($window$byval_copy);
 dest=$window$byval_copy; src=6680; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($window$byval_copy);
 dest=$window$byval_copy; src=6816; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($window$byval_copy);
 dest=$window$byval_copy; src=6960; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($window$byval_copy);
 STACKTOP = sp;return;
}
function _FinishKitchenScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6488>>2]|0;
 return ($0|0);
}
function _InitBathroomScreen() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 60|0;
 $1 = sp;
 $2 = sp + 20|0;
 $3 = sp + 40|0;
 _ResetPlayer();
 HEAP32[7360>>2] = 0;
 HEAP32[7368>>2] = -1;
 HEAP32[7376>>2] = 0;
 HEAP32[7384>>2] = 0;
 HEAP32[7392>>2] = 0;
 _memset((7400|0),0,256)|0;
 HEAP32[7656>>2] = 0;
 HEAP32[7664>>2] = 0;
 _LoadTexture($0,7672);
 ;HEAP32[7720>>2]=HEAP32[$0>>2]|0;HEAP32[7720+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[7720+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[7720+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[7720+16>>2]=HEAP32[$0+16>>2]|0;
 HEAP32[7360>>2] = 0;
 HEAP32[7368>>2] = -1;
 HEAP32[7376>>2] = 0;
 HEAP32[7384>>2] = 0;
 HEAP32[7392>>2] = 0;
 _memset((7400|0),0,256)|0;
 HEAPF32[7744>>2] = 1070.0;
 HEAPF32[(7748)>>2] = 135.0;
 HEAP32[(7752)>>2] = 2;
 HEAP32[(7756)>>2] = 1;
 $4 = HEAP32[(92)>>2]|0;
 $5 = (($4|0) / 3)&-1;
 $6 = HEAP32[(7752)>>2]|0;
 $7 = Math_imul($6, $5)|0;
 $8 = HEAP32[(96)>>2]|0;
 $9 = (($8|0) / 2)&-1;
 HEAP32[(7764)>>2] = $7;
 HEAP32[(7768)>>2] = $9;
 HEAP32[(7772)>>2] = $5;
 HEAP32[(7776)>>2] = $9;
 $10 = +HEAPF32[7744>>2];
 $11 = (~~(($10)));
 $12 = +HEAPF32[(7748)>>2];
 $13 = (~~(($12)));
 $14 = HEAP32[(92)>>2]|0;
 $15 = (($14|0) / 3)&-1;
 $16 = HEAP32[(96)>>2]|0;
 $17 = (($16|0) / 2)&-1;
 HEAP32[(7780)>>2] = $11;
 HEAP32[(7784)>>2] = $13;
 HEAP32[(7788)>>2] = $15;
 HEAP32[(7792)>>2] = $17;
 HEAP32[(7760)>>2] = 0;
 HEAPF32[7800>>2] = 35.0;
 HEAPF32[(7804)>>2] = 334.0;
 _LoadTexture($1,7896);
 ;HEAP32[(7808)>>2]=HEAP32[$1>>2]|0;HEAP32[(7808)+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[(7808)+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[(7808)+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[(7808)+16>>2]=HEAP32[$1+16>>2]|0;
 HEAP32[(7868)>>2] = 0;
 HEAP32[(7864)>>2] = 0;
 HEAP32[(7876)>>2] = 4;
 $18 = +HEAPF32[7800>>2];
 $19 = $18 + 20.0;
 $20 = (~~(($19)));
 $21 = +HEAPF32[(7804)>>2];
 $22 = $21 + 0.0;
 $23 = (~~(($22)));
 HEAP32[(7828)>>2] = $20;
 HEAP32[(7832)>>2] = $23;
 HEAP32[(7836)>>2] = 90;
 HEAP32[(7840)>>2] = 380;
 $24 = HEAP32[(7812)>>2]|0;
 $25 = HEAP32[(7876)>>2]|0;
 $26 = (($24|0) / ($25|0))&-1;
 $27 = HEAP32[(7816)>>2]|0;
 HEAP32[(7844)>>2] = 0;
 HEAP32[(7848)>>2] = 0;
 HEAP32[(7852)>>2] = $26;
 HEAP32[(7856)>>2] = $27;
 HEAP32[(7884)>>2] = 0;
 HEAP32[(7880)>>2] = 0;
 HEAP32[(7888)>>2] = 1;
 HEAPF32[7944>>2] = 300.0;
 HEAPF32[(7948)>>2] = 200.0;
 _LoadTexture($2,8040);
 ;HEAP32[(7952)>>2]=HEAP32[$2>>2]|0;HEAP32[(7952)+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[(7952)+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[(7952)+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[(7952)+16>>2]=HEAP32[$2+16>>2]|0;
 HEAP32[(8012)>>2] = 0;
 HEAP32[(8008)>>2] = 0;
 HEAP32[(8020)>>2] = 4;
 $28 = +HEAPF32[7944>>2];
 $29 = $28 + 40.0;
 $30 = (~~(($29)));
 $31 = +HEAPF32[(7948)>>2];
 $32 = $31 + 20.0;
 $33 = (~~(($32)));
 HEAP32[(7972)>>2] = $30;
 HEAP32[(7976)>>2] = $33;
 HEAP32[(7980)>>2] = 190;
 HEAP32[(7984)>>2] = 200;
 $34 = HEAP32[(7956)>>2]|0;
 $35 = HEAP32[(8020)>>2]|0;
 $36 = (($34|0) / ($35|0))&-1;
 $37 = HEAP32[(7960)>>2]|0;
 HEAP32[(7988)>>2] = 0;
 HEAP32[(7992)>>2] = 0;
 HEAP32[(7996)>>2] = $36;
 HEAP32[(8000)>>2] = $37;
 HEAP32[(8028)>>2] = 0;
 HEAP32[(8024)>>2] = 0;
 HEAP32[(8032)>>2] = 0;
 HEAPF32[8080>>2] = 760.0;
 HEAPF32[(8084)>>2] = 430.0;
 _LoadTexture($3,8176);
 ;HEAP32[(8088)>>2]=HEAP32[$3>>2]|0;HEAP32[(8088)+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[(8088)+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[(8088)+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[(8088)+16>>2]=HEAP32[$3+16>>2]|0;
 HEAP32[(8148)>>2] = 0;
 HEAP32[(8144)>>2] = 0;
 HEAP32[(8156)>>2] = 4;
 $38 = +HEAPF32[8080>>2];
 $39 = $38 + 30.0;
 $40 = (~~(($39)));
 $41 = +HEAPF32[(8084)>>2];
 $42 = $41 + 30.0;
 $43 = (~~(($42)));
 HEAP32[(8108)>>2] = $40;
 HEAP32[(8112)>>2] = $43;
 HEAP32[(8116)>>2] = 120;
 HEAP32[(8120)>>2] = 190;
 $44 = HEAP32[(8092)>>2]|0;
 $45 = HEAP32[(8156)>>2]|0;
 $46 = (($44|0) / ($45|0))&-1;
 $47 = HEAP32[(8096)>>2]|0;
 HEAP32[(8124)>>2] = 0;
 HEAP32[(8128)>>2] = 0;
 HEAP32[(8132)>>2] = $46;
 HEAP32[(8136)>>2] = $47;
 HEAP32[(8164)>>2] = 0;
 HEAP32[(8160)>>2] = 0;
 HEAP32[(8168)>>2] = 1;
 STACKTOP = sp;return;
}
function _UpdateBathroomScreen() {
 var $$15 = 0, $$byval_copy24 = 0, $$pr = 0, $$pr16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$018 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $sndScream$byval_copy27 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $sndScream$byval_copy27 = sp + 56|0;
 $$byval_copy24 = sp;
 $0 = sp + 16|0;
 $1 = sp + 24|0;
 $2 = sp + 32|0;
 $3 = sp + 40|0;
 $4 = sp + 48|0;
 $5 = HEAP32[(208)>>2]|0;
 $6 = ($5|0)==(0);
 do {
  if (!($6)) {
   _GetMousePosition($0);
   ;HEAP32[$$byval_copy24>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[$0+4>>2]|0;
   ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[(7780)>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[(7780)+4>>2]|0;HEAP32[$sndScream$byval_copy27+8>>2]=HEAP32[(7780)+8>>2]|0;HEAP32[$sndScream$byval_copy27+12>>2]=HEAP32[(7780)+12>>2]|0;
   $7 = (_CheckCollisionPointRec($$byval_copy24,$sndScream$byval_copy27)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    ;HEAP32[$$byval_copy24>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy24+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy24+12>>2]=HEAP32[(144)+12>>2]|0;
    ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[(7780)>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[(7780)+4>>2]|0;HEAP32[$sndScream$byval_copy27+8>>2]=HEAP32[(7780)+8>>2]|0;HEAP32[$sndScream$byval_copy27+12>>2]=HEAP32[(7780)+12>>2]|0;
    $9 = (_CheckCollisionRecs($$byval_copy24,$sndScream$byval_copy27)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     HEAP32[(7760)>>2] = 0;
     break;
    }
   }
   HEAP32[(7760)>>2] = 1;
   ;HEAP32[$$byval_copy24>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy24+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy24+12>>2]=HEAP32[(144)+12>>2]|0;
   ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[(7780)>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[(7780)+4>>2]|0;HEAP32[$sndScream$byval_copy27+8>>2]=HEAP32[(7780)+8>>2]|0;HEAP32[$sndScream$byval_copy27+12>>2]=HEAP32[(7780)+12>>2]|0;
   $11 = (_CheckCollisionRecs($$byval_copy24,$sndScream$byval_copy27)|0);
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = (_IsMouseButtonPressed(0)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     label = 8;
    } else {
     _GetMousePosition($1);
     ;HEAP32[$$byval_copy24>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[$1+4>>2]|0;
     ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[(7780)>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[(7780)+4>>2]|0;HEAP32[$sndScream$byval_copy27+8>>2]=HEAP32[(7780)+8>>2]|0;HEAP32[$sndScream$byval_copy27+12>>2]=HEAP32[(7780)+12>>2]|0;
     $15 = (_CheckCollisionPointRec($$byval_copy24,$sndScream$byval_copy27)|0);
     $16 = ($15|0)==(0);
     if ($16) {
      label = 8;
     }
    }
    if ((label|0) == 8) {
     $17 = (_IsKeyPressed(32)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      break;
     }
    }
    $19 = HEAP32[(7756)>>2]|0;
    $20 = ($19|0)==(0);
    if ($20) {
     HEAP32[7664>>2] = 1;
     break;
    } else {
     HEAP32[(7768)>>2] = 0;
     HEAP32[(7756)>>2] = 0;
     ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[112>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[112+4>>2]|0;
     _PlaySound($sndScream$byval_copy27);
     break;
    }
   }
  }
 } while(0);
 $21 = HEAP32[7376>>2]|0;
 $22 = ($21|0)>(2);
 if ($22) {
  _UpdatePlayer();
  _UpdateMonster(7800);
  _UpdateMonster(7944);
  _UpdateMonster(8080);
 }
 ;HEAP32[$$byval_copy24>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy24+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy24+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[(7828)>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[(7828)+4>>2]|0;HEAP32[$sndScream$byval_copy27+8>>2]=HEAP32[(7828)+8>>2]|0;HEAP32[$sndScream$byval_copy27+12>>2]=HEAP32[(7828)+12>>2]|0;
 $23 = (_CheckCollisionRecs($$byval_copy24,$sndScream$byval_copy27)|0);
 $24 = ($23|0)==(0);
 $25 = HEAP32[(7880)>>2]|0;
 $26 = ($25|0)!=(0);
 $or$cond = $24 | $26;
 if ($or$cond) {
  ;HEAP32[$$byval_copy24>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy24+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy24+12>>2]=HEAP32[(144)+12>>2]|0;
  ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[(7972)>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[(7972)+4>>2]|0;HEAP32[$sndScream$byval_copy27+8>>2]=HEAP32[(7972)+8>>2]|0;HEAP32[$sndScream$byval_copy27+12>>2]=HEAP32[(7972)+12>>2]|0;
  $27 = (_CheckCollisionRecs($$byval_copy24,$sndScream$byval_copy27)|0);
  $28 = ($27|0)==(0);
  $29 = HEAP32[(8024)>>2]|0;
  $30 = ($29|0)!=(0);
  $or$cond3 = $28 | $30;
  if ($or$cond3) {
   ;HEAP32[$$byval_copy24>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy24+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy24+12>>2]=HEAP32[(144)+12>>2]|0;
   ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[(8108)>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[(8108)+4>>2]|0;HEAP32[$sndScream$byval_copy27+8>>2]=HEAP32[(8108)+8>>2]|0;HEAP32[$sndScream$byval_copy27+12>>2]=HEAP32[(8108)+12>>2]|0;
   $31 = (_CheckCollisionRecs($$byval_copy24,$sndScream$byval_copy27)|0);
   $32 = ($31|0)==(0);
   $33 = HEAP32[(8160)>>2]|0;
   $34 = ($33|0)!=(0);
   $or$cond5 = $32 | $34;
   $35 = $or$cond5&1;
   $$15 = $35 ^ 1;
   $storemerge = $$15;
  } else {
   $storemerge = 1;
  }
 } else {
  $storemerge = 1;
 }
 HEAP32[7360>>2] = $storemerge;
 ;HEAP32[$$byval_copy24>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy24+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy24+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[(7828)>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[(7828)+4>>2]|0;HEAP32[$sndScream$byval_copy27+8>>2]=HEAP32[(7828)+8>>2]|0;HEAP32[$sndScream$byval_copy27+12>>2]=HEAP32[(7828)+12>>2]|0;
 $36 = (_CheckCollisionRecs($$byval_copy24,$sndScream$byval_copy27)|0);
 $37 = ($36|0)==(0);
 $38 = HEAP32[(7880)>>2]|0;
 $39 = ($38|0)!=(0);
 $or$cond7 = $37 | $39;
 do {
  if ($or$cond7) {
   HEAP32[(7884)>>2] = 0;
  } else {
   HEAP32[(7884)>>2] = 1;
   $40 = (_IsKeyPressed(32)|0);
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = (_IsMouseButtonPressed(0)|0);
    $43 = ($42|0)==(0);
    if ($43) {
     break;
    }
    _GetMousePosition($2);
    ;HEAP32[$$byval_copy24>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[$2+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[(7828)>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[(7828)+4>>2]|0;HEAP32[$sndScream$byval_copy27+8>>2]=HEAP32[(7828)+8>>2]|0;HEAP32[$sndScream$byval_copy27+12>>2]=HEAP32[(7828)+12>>2]|0;
    $44 = (_CheckCollisionPointRec($$byval_copy24,$sndScream$byval_copy27)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[8224>>2] = 1;
   HEAP32[7656>>2] = 0;
   HEAP32[7368>>2] = 1;
  }
 } while(0);
 ;HEAP32[$$byval_copy24>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy24+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy24+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[(7972)>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[(7972)+4>>2]|0;HEAP32[$sndScream$byval_copy27+8>>2]=HEAP32[(7972)+8>>2]|0;HEAP32[$sndScream$byval_copy27+12>>2]=HEAP32[(7972)+12>>2]|0;
 $46 = (_CheckCollisionRecs($$byval_copy24,$sndScream$byval_copy27)|0);
 $47 = ($46|0)==(0);
 $48 = HEAP32[(8024)>>2]|0;
 $49 = ($48|0)!=(0);
 $or$cond9 = $47 | $49;
 do {
  if ($or$cond9) {
   HEAP32[(8028)>>2] = 0;
  } else {
   HEAP32[(8028)>>2] = 1;
   $50 = (_IsKeyPressed(32)|0);
   $51 = ($50|0)==(0);
   if ($51) {
    $52 = (_IsMouseButtonPressed(0)|0);
    $53 = ($52|0)==(0);
    if ($53) {
     break;
    }
    _GetMousePosition($3);
    ;HEAP32[$$byval_copy24>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[$3+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[(7972)>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[(7972)+4>>2]|0;HEAP32[$sndScream$byval_copy27+8>>2]=HEAP32[(7972)+8>>2]|0;HEAP32[$sndScream$byval_copy27+12>>2]=HEAP32[(7972)+12>>2]|0;
    $54 = (_CheckCollisionPointRec($$byval_copy24,$sndScream$byval_copy27)|0);
    $55 = ($54|0)==(0);
    if ($55) {
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[8224>>2] = 1;
   HEAP32[7656>>2] = 0;
   HEAP32[7368>>2] = 2;
  }
 } while(0);
 ;HEAP32[$$byval_copy24>>2]=HEAP32[(144)>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[(144)+4>>2]|0;HEAP32[$$byval_copy24+8>>2]=HEAP32[(144)+8>>2]|0;HEAP32[$$byval_copy24+12>>2]=HEAP32[(144)+12>>2]|0;
 ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[(8108)>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[(8108)+4>>2]|0;HEAP32[$sndScream$byval_copy27+8>>2]=HEAP32[(8108)+8>>2]|0;HEAP32[$sndScream$byval_copy27+12>>2]=HEAP32[(8108)+12>>2]|0;
 $56 = (_CheckCollisionRecs($$byval_copy24,$sndScream$byval_copy27)|0);
 $57 = ($56|0)==(0);
 $58 = HEAP32[(8160)>>2]|0;
 $59 = ($58|0)!=(0);
 $or$cond11 = $57 | $59;
 do {
  if ($or$cond11) {
   HEAP32[(8164)>>2] = 0;
   label = 35;
  } else {
   HEAP32[(8164)>>2] = 1;
   $60 = (_IsKeyPressed(32)|0);
   $61 = ($60|0)==(0);
   if ($61) {
    $62 = (_IsMouseButtonPressed(0)|0);
    $63 = ($62|0)==(0);
    if ($63) {
     label = 35;
     break;
    }
    _GetMousePosition($4);
    ;HEAP32[$$byval_copy24>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[$4+4>>2]|0;
    ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[(8108)>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[(8108)+4>>2]|0;HEAP32[$sndScream$byval_copy27+8>>2]=HEAP32[(8108)+8>>2]|0;HEAP32[$sndScream$byval_copy27+12>>2]=HEAP32[(8108)+12>>2]|0;
    $64 = (_CheckCollisionPointRec($$byval_copy24,$sndScream$byval_copy27)|0);
    $65 = ($64|0)==(0);
    if ($65) {
     label = 35;
     break;
    }
   }
   _SearchKeyPlayer();
   HEAP32[8224>>2] = 1;
   HEAP32[7368>>2] = 3;
   HEAP32[7656>>2] = 1;
  }
 } while(0);
 if ((label|0) == 35) {
  $$pr = HEAP32[8224>>2]|0;
  $66 = ($$pr|0)==(0);
  if (!($66)) {
   $$pr16 = HEAP32[7656>>2]|0;
   $67 = (($$pr16) + 1)|0;
   HEAP32[7656>>2] = $67;
   $68 = ($$pr16|0)>(179);
   if ($68) {
    $69 = HEAP32[7368>>2]|0;
    if ((($69|0) == 2)) {
     $72 = HEAP32[(8032)>>2]|0;
     $73 = ($72|0)==(0);
     if ($73) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy27);
     }
     HEAP32[(8024)>>2] = 1;
     HEAP32[(8028)>>2] = 0;
    } else if ((($69|0) == 1)) {
     $70 = HEAP32[(7888)>>2]|0;
     $71 = ($70|0)==(0);
     if ($71) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy27);
     }
     HEAP32[(7880)>>2] = 1;
     HEAP32[(7884)>>2] = 0;
    } else if ((($69|0) == 3)) {
     $74 = HEAP32[(8168)>>2]|0;
     $75 = ($74|0)==(0);
     if ($75) {
      _FindKeyPlayer();
     } else {
      _ScarePlayer();
      ;HEAP32[$sndScream$byval_copy27>>2]=HEAP32[120>>2]|0;HEAP32[$sndScream$byval_copy27+4>>2]=HEAP32[120+4>>2]|0;
      _PlaySound($sndScream$byval_copy27);
     }
     HEAP32[(8160)>>2] = 1;
     HEAP32[(8164)>>2] = 0;
    }
    HEAP32[8224>>2] = 0;
    HEAP32[7656>>2] = 0;
   }
  }
 }
 $76 = HEAP32[7656>>2]|0;
 $77 = (($76) + 1)|0;
 HEAP32[7656>>2] = $77;
 $78 = $77 & 1;
 $79 = ($78|0)==(0);
 if ($79) {
  $80 = HEAP32[7392>>2]|0;
  $81 = (($80) + 1)|0;
  HEAP32[7392>>2] = $81;
 }
 $82 = HEAP32[7376>>2]|0;
 if ((($82|0) == 0)) {
  $83 = HEAP32[7392>>2]|0;
  $84 = ($83|0)<(65);
  if ($84) {
   (_strncpy((7400|0),(8232|0),($83|0))|0);
  } else {
   $85 = (_strlen((7400|0))|0);
   $86 = ($85|0)>(0);
   if ($86) {
    $i$018 = 0;
    while(1) {
     $87 = (7400 + ($i$018)|0);
     HEAP8[$87>>0] = 0;
     $88 = (($i$018) + 1)|0;
     $89 = (_strlen((7400|0))|0);
     $90 = ($88|0)<($89|0);
     if ($90) {
      $i$018 = $88;
     } else {
      break;
     }
    }
   }
   HEAP32[7392>>2] = 0;
   HEAP32[7376>>2] = 1;
  }
  $91 = (_IsKeyPressed(257)|0);
  $92 = ($91|0)==(0);
  if ($92) {
   STACKTOP = sp;return;
  }
  HEAP32[7376>>2] = 1;
  STACKTOP = sp;return;
 } else if ((($82|0) == 1)) {
  $93 = HEAP32[7384>>2]|0;
  $94 = (($93) + 1)|0;
  HEAP32[7384>>2] = $94;
  $95 = (_IsKeyPressed(257)|0);
  $96 = ($95|0)==(0);
  if ($96) {
   $97 = (_IsMouseButtonPressed(0)|0);
   $98 = ($97|0)==(0);
   if ($98) {
    STACKTOP = sp;return;
   }
  }
  HEAP32[7376>>2] = 2;
  HEAP32[7384>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $99 = ($82|0)==(2);
  $100 = HEAP32[7384>>2]|0;
  $101 = (($100) + 1)|0;
  HEAP32[7384>>2] = $101;
  $102 = ($100|0)>(179);
  $or$cond13 = $99 & $102;
  if (!($or$cond13)) {
   STACKTOP = sp;return;
  }
  HEAP32[7376>>2] = 3;
  STACKTOP = sp;return;
 }
}
function _DrawBathroomScreen() {
 var $$byval_copy23 = 0, $$byval_copy27 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $9 = 0, $doors$byval_copy3 = 0, $font$byval_copy14 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $$byval_copy27 = sp + 20|0;
 $$byval_copy23 = sp + 172|0;
 $font$byval_copy14 = sp + 136|0;
 $doors$byval_copy3 = sp + 196|0;
 $0 = sp + 192|0;
 $1 = sp + 256|0;
 $2 = sp + 116|0;
 $3 = sp + 260|0;
 $4 = sp + 272|0;
 $5 = sp + 268|0;
 $6 = sp + 264|0;
 $7 = sp + 120|0;
 $8 = sp + 112|0;
 $9 = sp + 128|0;
 $10 = sp + 16|0;
 $11 = sp + 252|0;
 $12 = sp + 8|0;
 $13 = sp;
 $14 = sp + 220|0;
 $15 = sp + 216|0;
 $16 = sp + 228|0;
 $17 = sp + 236|0;
 $18 = sp + 248|0;
 $19 = sp + 244|0;
 $20 = sp + 240|0;
 $21 = sp + 232|0;
 $22 = sp + 224|0;
 HEAP32[$0>>2] = -1;
 ;HEAP32[$$byval_copy23>>2]=HEAP32[7720>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[7720+4>>2]|0;HEAP32[$$byval_copy23+8>>2]=HEAP32[7720+8>>2]|0;HEAP32[$$byval_copy23+12>>2]=HEAP32[7720+12>>2]|0;HEAP32[$$byval_copy23+16>>2]=HEAP32[7720+16>>2]|0;
 ;HEAP8[$$byval_copy27>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawTexture($$byval_copy23,0,0,$$byval_copy27);
 dest=$$byval_copy27; src=7800; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy27,0);
 dest=$$byval_copy27; src=7944; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy27,0);
 dest=$$byval_copy27; src=8080; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _DrawMonster($$byval_copy27,0);
 $23 = HEAP32[(7760)>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  HEAP32[$2>>2] = -1;
  ;HEAP32[$doors$byval_copy3>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy3+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy3+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy3+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy3+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy14>>2]=HEAP32[(7764)>>2]|0;HEAP32[$font$byval_copy14+4>>2]=HEAP32[(7764)+4>>2]|0;HEAP32[$font$byval_copy14+8>>2]=HEAP32[(7764)+8>>2]|0;HEAP32[$font$byval_copy14+12>>2]=HEAP32[(7764)+12>>2]|0;
  ;HEAP32[$$byval_copy23>>2]=HEAP32[7744>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[7744+4>>2]|0;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$2+3>>0]|0;
  _DrawTextureRec($doors$byval_copy3,$font$byval_copy14,$$byval_copy23,$$byval_copy27);
 } else {
  HEAP8[$1>>0] = 0;
  $25 = ((($1)) + 1|0);
  HEAP8[$25>>0] = -28;
  $26 = ((($1)) + 2|0);
  HEAP8[$26>>0] = 48;
  $27 = ((($1)) + 3|0);
  HEAP8[$27>>0] = -1;
  ;HEAP32[$doors$byval_copy3>>2]=HEAP32[88>>2]|0;HEAP32[$doors$byval_copy3+4>>2]=HEAP32[88+4>>2]|0;HEAP32[$doors$byval_copy3+8>>2]=HEAP32[88+8>>2]|0;HEAP32[$doors$byval_copy3+12>>2]=HEAP32[88+12>>2]|0;HEAP32[$doors$byval_copy3+16>>2]=HEAP32[88+16>>2]|0;
  ;HEAP32[$font$byval_copy14>>2]=HEAP32[(7764)>>2]|0;HEAP32[$font$byval_copy14+4>>2]=HEAP32[(7764)+4>>2]|0;HEAP32[$font$byval_copy14+8>>2]=HEAP32[(7764)+8>>2]|0;HEAP32[$font$byval_copy14+12>>2]=HEAP32[(7764)+12>>2]|0;
  ;HEAP32[$$byval_copy23>>2]=HEAP32[7744>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[7744+4>>2]|0;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$1+3>>0]|0;
  _DrawTextureRec($doors$byval_copy3,$font$byval_copy14,$$byval_copy23,$$byval_copy27);
 }
 $28 = HEAP32[7376>>2]|0;
 $29 = ($28|0)<(2);
 if ($29) {
  $30 = (_GetScreenWidth()|0);
  HEAP8[$4>>0] = -56;
  $31 = ((($4)) + 1|0);
  HEAP8[$31>>0] = -56;
  $32 = ((($4)) + 2|0);
  HEAP8[$32>>0] = -56;
  $33 = ((($4)) + 3|0);
  HEAP8[$33>>0] = -1;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$4+3>>0]|0;
  _Fade($3,$$byval_copy27,0.5);
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$3+3>>0]|0;
  _DrawRectangle(0,40,$30,200,$$byval_copy27);
 } else {
  $34 = ($28|0)==(2);
  if ($34) {
   $35 = (_GetScreenWidth()|0);
   HEAP8[$6>>0] = -56;
   $36 = ((($6)) + 1|0);
   HEAP8[$36>>0] = -56;
   $37 = ((($6)) + 2|0);
   HEAP8[$37>>0] = -56;
   $38 = ((($6)) + 3|0);
   HEAP8[$38>>0] = -1;
   ;HEAP8[$$byval_copy27>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$6+3>>0]|0;
   _Fade($5,$$byval_copy27,0.5);
   ;HEAP8[$$byval_copy27>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$5+3>>0]|0;
   _DrawRectangle(0,80,$35,100,$$byval_copy27);
  }
 }
 $39 = HEAP32[7376>>2]|0;
 if ((($39|0) == 2)) {
  $53 = HEAP32[7384>>2]|0;
  $54 = (($53|0) / 30)&-1;
  $55 = $54 & 1;
  $56 = ($55|0)==(0);
  if ($56) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  HEAPF32[$12>>2] = 300.0;
  $57 = ((($12)) + 4|0);
  HEAPF32[$57>>2] = 95.0;
  $58 = HEAP32[(68)>>2]|0;
  $59 = $58 << 1;
  HEAP32[$13>>2] = -1;
  dest=$font$byval_copy14; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy23>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[$12+4>>2]|0;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$13>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$13+3>>0]|0;
  _DrawTextEx($font$byval_copy14,8488,$$byval_copy23,$59,2,$$byval_copy27);
  HEAP8[$15>>0] = -26;
  $60 = ((($15)) + 1|0);
  HEAP8[$60>>0] = 41;
  $61 = ((($15)) + 2|0);
  HEAP8[$61>>0] = 55;
  $62 = ((($15)) + 3|0);
  HEAP8[$62>>0] = -1;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$15>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$15+3>>0]|0;
  _Fade($14,$$byval_copy27,0.60000002384185791);
  ;HEAP32[$$byval_copy23>>2]=HEAP32[(7828)>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[(7828)+4>>2]|0;HEAP32[$$byval_copy23+8>>2]=HEAP32[(7828)+8>>2]|0;HEAP32[$$byval_copy23+12>>2]=HEAP32[(7828)+12>>2]|0;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$14>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$14+3>>0]|0;
  _DrawRectangleRec($$byval_copy23,$$byval_copy27);
  HEAP8[$17>>0] = -26;
  $63 = ((($17)) + 1|0);
  HEAP8[$63>>0] = 41;
  $64 = ((($17)) + 2|0);
  HEAP8[$64>>0] = 55;
  $65 = ((($17)) + 3|0);
  HEAP8[$65>>0] = -1;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$17+3>>0]|0;
  _Fade($16,$$byval_copy27,0.60000002384185791);
  ;HEAP32[$$byval_copy23>>2]=HEAP32[(7972)>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[(7972)+4>>2]|0;HEAP32[$$byval_copy23+8>>2]=HEAP32[(7972)+8>>2]|0;HEAP32[$$byval_copy23+12>>2]=HEAP32[(7972)+12>>2]|0;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$16>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$16+3>>0]|0;
  _DrawRectangleRec($$byval_copy23,$$byval_copy27);
  HEAP8[$19>>0] = -26;
  $66 = ((($19)) + 1|0);
  HEAP8[$66>>0] = 41;
  $67 = ((($19)) + 2|0);
  HEAP8[$67>>0] = 55;
  $68 = ((($19)) + 3|0);
  HEAP8[$68>>0] = -1;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$19>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$19+3>>0]|0;
  _Fade($18,$$byval_copy27,0.60000002384185791);
  ;HEAP32[$$byval_copy23>>2]=HEAP32[(8108)>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[(8108)+4>>2]|0;HEAP32[$$byval_copy23+8>>2]=HEAP32[(8108)+8>>2]|0;HEAP32[$$byval_copy23+12>>2]=HEAP32[(8108)+12>>2]|0;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$18>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$18+3>>0]|0;
  _DrawRectangleRec($$byval_copy23,$$byval_copy27);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($39|0) == 1)) {
  HEAPF32[$9>>2] = 100.0;
  $42 = ((($9)) + 4|0);
  HEAPF32[$42>>2] = 80.0;
  $43 = HEAP32[(68)>>2]|0;
  HEAP32[$10>>2] = -1;
  dest=$font$byval_copy14; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy23>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[$9+4>>2]|0;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$10+3>>0]|0;
  _DrawTextEx($font$byval_copy14,8232,$$byval_copy23,$43,2,$$byval_copy27);
  $44 = HEAP32[7384>>2]|0;
  $45 = (($44|0) / 30)&-1;
  $46 = $45 & 1;
  $47 = ($46|0)==(0);
  if ($47) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $48 = (_GetScreenWidth()|0);
  $49 = (($48) + -280)|0;
  HEAP8[$11>>0] = 0;
  $50 = ((($11)) + 1|0);
  HEAP8[$50>>0] = 0;
  $51 = ((($11)) + 2|0);
  HEAP8[$51>>0] = 0;
  $52 = ((($11)) + 3|0);
  HEAP8[$52>>0] = -1;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$11>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$11+3>>0]|0;
  _DrawText(8608,$49,200,20,$$byval_copy27);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else if ((($39|0) == 0)) {
  HEAPF32[$7>>2] = 100.0;
  $40 = ((($7)) + 4|0);
  HEAPF32[$40>>2] = 80.0;
  $41 = HEAP32[(68)>>2]|0;
  HEAP32[$8>>2] = -1;
  dest=$font$byval_copy14; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  ;HEAP32[$$byval_copy23>>2]=HEAP32[$7>>2]|0;HEAP32[$$byval_copy23+4>>2]=HEAP32[$7+4>>2]|0;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$8+3>>0]|0;
  _DrawTextEx($font$byval_copy14,7400,$$byval_copy23,$41,2,$$byval_copy27);
  _DrawPlayer();
  STACKTOP = sp;return;
 } else {
  $69 = HEAP32[7360>>2]|0;
  $70 = ($69|0)==(0);
  if ($70) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $71 = HEAP32[7384>>2]|0;
  $72 = (($71|0) / 30)&-1;
  $73 = $72 & 1;
  $74 = ($73|0)==(0);
  if ($74) {
   _DrawPlayer();
   STACKTOP = sp;return;
  }
  $75 = (_GetScreenWidth()|0);
  HEAP8[$21>>0] = -56;
  $76 = ((($21)) + 1|0);
  HEAP8[$76>>0] = -56;
  $77 = ((($21)) + 2|0);
  HEAP8[$77>>0] = -56;
  $78 = ((($21)) + 3|0);
  HEAP8[$78>>0] = -1;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$21>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$21+3>>0]|0;
  _Fade($20,$$byval_copy27,0.5);
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$20>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$20+3>>0]|0;
  _DrawRectangle(0,0,$75,50,$$byval_copy27);
  HEAP8[$22>>0] = 0;
  $79 = ((($22)) + 1|0);
  HEAP8[$79>>0] = 0;
  $80 = ((($22)) + 2|0);
  HEAP8[$80>>0] = 0;
  $81 = ((($22)) + 3|0);
  HEAP8[$81>>0] = -1;
  ;HEAP8[$$byval_copy27>>0]=HEAP8[$22>>0]|0;HEAP8[$$byval_copy27+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$$byval_copy27+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$$byval_copy27+3>>0]=HEAP8[$22+3>>0]|0;
  _DrawText(8504,420,15,20,$$byval_copy27);
  _DrawPlayer();
  STACKTOP = sp;return;
 }
}
function _UnloadBathroomScreen() {
 var $mirror$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $mirror$byval_copy = sp;
 ;HEAP32[$mirror$byval_copy>>2]=HEAP32[7720>>2]|0;HEAP32[$mirror$byval_copy+4>>2]=HEAP32[7720+4>>2]|0;HEAP32[$mirror$byval_copy+8>>2]=HEAP32[7720+8>>2]|0;HEAP32[$mirror$byval_copy+12>>2]=HEAP32[7720+12>>2]|0;HEAP32[$mirror$byval_copy+16>>2]=HEAP32[7720+16>>2]|0;
 _UnloadTexture($mirror$byval_copy);
 dest=$mirror$byval_copy; src=7800; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($mirror$byval_copy);
 dest=$mirror$byval_copy; src=8080; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($mirror$byval_copy);
 dest=$mirror$byval_copy; src=7944; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _UnloadMonster($mirror$byval_copy);
 STACKTOP = sp;return;
}
function _FinishBathroomScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7664>>2]|0;
 return ($0|0);
}
function _InitEndingScreen() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8544>>2] = 0;
 HEAP32[8552>>2] = 0;
 HEAPF32[8560>>2] = 0.0;
 return;
}
function _UpdateEndingScreen() {
 var $$inv = 0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8544>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[8544>>2] = $1;
 $2 = +HEAPF32[8560>>2];
 $3 = $2 + 0.004999999888241291;
 $$inv = $3 >= 1.0;
 $storemerge = $$inv ? 1.0 : $3;
 HEAPF32[8560>>2] = $storemerge;
 $4 = (_IsKeyPressed(257)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_IsMouseButtonPressed(0)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   return;
  }
 }
 HEAP32[8552>>2] = 1;
 return;
}
function _DrawEndingScreen() {
 var $$byval_copy4 = 0, $$byval_copy6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $font$byval_copy3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $$byval_copy6 = sp + 88|0;
 $$byval_copy4 = sp;
 $font$byval_copy3 = sp + 8|0;
 $0 = sp + 84|0;
 $1 = sp + 64|0;
 $2 = sp + 72|0;
 $3 = sp + 56|0;
 $4 = sp + 48|0;
 $5 = sp + 76|0;
 $6 = sp + 44|0;
 $7 = sp + 80|0;
 $8 = (_GetScreenWidth()|0);
 $9 = (_GetScreenHeight()|0);
 HEAP8[$0>>0] = 80;
 $10 = ((($0)) + 1|0);
 HEAP8[$10>>0] = 80;
 $11 = ((($0)) + 2|0);
 HEAP8[$11>>0] = 80;
 $12 = ((($0)) + 3|0);
 HEAP8[$12>>0] = -1;
 ;HEAP8[$$byval_copy6>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawRectangle(0,0,$8,$9,$$byval_copy6);
 HEAPF32[$1>>2] = 50.0;
 $13 = ((($1)) + 4|0);
 HEAPF32[$13>>2] = 160.0;
 $14 = HEAP32[(68)>>2]|0;
 $15 = ($14*3)|0;
 HEAP32[$3>>2] = -1;
 $16 = +HEAPF32[8560>>2];
 ;HEAP8[$$byval_copy6>>0]=HEAP8[$3>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$3+3>>0]|0;
 _Fade($2,$$byval_copy6,$16);
 dest=$font$byval_copy3; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$1+4>>2]|0;
 ;HEAP8[$$byval_copy6>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$2+3>>0]|0;
 _DrawTextEx($font$byval_copy3,8568,$$byval_copy4,$15,2,$$byval_copy6);
 HEAPF32[$4>>2] = 100.0;
 $17 = ((($4)) + 4|0);
 HEAPF32[$17>>2] = 300.0;
 $18 = HEAP32[(68)>>2]|0;
 $19 = ($18*3)|0;
 HEAP32[$6>>2] = -1;
 $20 = +HEAPF32[8560>>2];
 ;HEAP8[$$byval_copy6>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$6+3>>0]|0;
 _Fade($5,$$byval_copy6,$20);
 dest=$font$byval_copy3; src=48; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$4+4>>2]|0;
 ;HEAP8[$$byval_copy6>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$5+3>>0]|0;
 _DrawTextEx($font$byval_copy3,8592,$$byval_copy4,$19,2,$$byval_copy6);
 $21 = HEAP32[8544>>2]|0;
 $22 = ($21|0)>(180);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = (($21|0) / 40)&-1;
 $24 = $23 & 1;
 $25 = ($24|0)==(0);
 if ($25) {
  STACKTOP = sp;return;
 }
 HEAP8[$7>>0] = 0;
 $26 = ((($7)) + 1|0);
 HEAP8[$26>>0] = 0;
 $27 = ((($7)) + 2|0);
 HEAP8[$27>>0] = 0;
 $28 = ((($7)) + 3|0);
 HEAP8[$28>>0] = -1;
 ;HEAP8[$$byval_copy6>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy6+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy6+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy6+3>>0]=HEAP8[$7+3>>0]|0;
 _DrawText(8608,380,545,40,$$byval_copy6);
 STACKTOP = sp;return;
}
function _UnloadEndingScreen() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _FinishEndingScreen() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8552>>2]|0;
 return ($0|0);
}
function _InitPlayer() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 20|0;
 $1 = sp;
 _LoadTexture($0,8632);
 ;HEAP32[(160)>>2]=HEAP32[$0>>2]|0;HEAP32[(160)+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[(160)+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[(160)+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[(160)+16>>2]=HEAP32[$0+16>>2]|0;
 HEAPF32[136>>2] = 350.0;
 HEAPF32[(140)>>2] = 400.0;
 HEAP32[(212)>>2] = 4;
 _ResetPlayer();
 HEAP32[8664>>2] = 0;
 _LoadTexture($1,8672);
 ;HEAP32[8712>>2]=HEAP32[$1>>2]|0;HEAP32[8712+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[8712+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[8712+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[8712+16>>2]=HEAP32[$1+16>>2]|0;
 STACKTOP = sp;return;
}
function _ResetPlayer() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(164)>>2]|0;
 $1 = (($0|0) / 4)&-1;
 $2 = HEAP32[(168)>>2]|0;
 $3 = (($2|0) / 6)&-1;
 HEAP32[(184)>>2] = 0;
 HEAP32[(188)>>2] = 0;
 HEAP32[(192)>>2] = $1;
 HEAP32[(196)>>2] = $3;
 HEAP32[(200)>>2] = 0;
 HEAP32[(204)>>2] = 1;
 HEAP32[(208)>>2] = 0;
 HEAP32[(216)>>2] = 0;
 $4 = +HEAPF32[136>>2];
 $5 = $4 < 400.0;
 if ($5) {
  $6 = (_GetScreenWidth()|0);
  $7 = (($6) + -350)|0;
  $8 = (+($7|0));
  HEAPF32[136>>2] = $8;
 }
 $9 = +HEAPF32[136>>2];
 $10 = (_GetScreenWidth()|0);
 $11 = (($10) + -400)|0;
 $12 = (+($11|0));
 $13 = $9 > $12;
 if ($13) {
  HEAPF32[136>>2] = 350.0;
 }
 HEAP32[8736>>2] = 0;
 HEAP32[8744>>2] = -1;
 HEAP32[8752>>2] = 0;
 HEAP32[8664>>2] = 0;
 HEAP32[8760>>2] = 0;
 HEAP32[8768>>2] = 0;
 HEAPF32[8776>>2] = 0.0;
 HEAP32[8784>>2] = 0;
 return;
}
function _UpdatePlayer() {
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = HEAP32[8760>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $3 = (_IsKeyDown(263)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = (_IsKeyDown(262)|0);
    $6 = ($5|0)==(0);
    if (!($6)) {
     label = 4;
    }
   } else {
    label = 4;
   }
   if ((label|0) == 4) {
    HEAP32[8744>>2] = -1;
    HEAP32[8736>>2] = 0;
   }
   $7 = (_IsKeyDown(262)|0);
   $8 = ($7|0)!=(0);
   $9 = HEAP32[8744>>2]|0;
   $10 = ($9|0)==(0);
   $or$cond = $8 | $10;
   if ($or$cond) {
    HEAP32[(204)>>2] = 1;
    $11 = HEAP32[8664>>2]|0;
    $12 = (($11) + 1)|0;
    HEAP32[8664>>2] = $12;
    $13 = ($11|0)>(14);
    if ($13) {
     $14 = HEAP32[(200)>>2]|0;
     $15 = (($14) + 1)|0;
     HEAP32[(200)>>2] = $15;
     HEAP32[8664>>2] = 0;
     $16 = HEAP32[(200)>>2]|0;
     $17 = ($16|0)>(3);
     if ($17) {
      HEAP32[(200)>>2] = 0;
     }
    }
    $18 = +HEAPF32[136>>2];
    $19 = $18 + 4.0;
    HEAPF32[136>>2] = $19;
    break;
   }
   $20 = (_IsKeyDown(263)|0);
   $21 = ($20|0)!=(0);
   $22 = HEAP32[8744>>2]|0;
   $23 = ($22|0)==(1);
   $or$cond3 = $21 | $23;
   if (!($or$cond3)) {
    HEAP32[(200)>>2] = 0;
    break;
   }
   HEAP32[(204)>>2] = 2;
   $24 = HEAP32[8664>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[8664>>2] = $25;
   $26 = ($24|0)>(14);
   if ($26) {
    $27 = HEAP32[(200)>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[(200)>>2] = $28;
    HEAP32[8664>>2] = 0;
    $29 = HEAP32[(200)>>2]|0;
    $30 = ($29|0)>(3);
    if ($30) {
     HEAP32[(200)>>2] = 0;
    }
   }
   $31 = +HEAPF32[136>>2];
   $32 = $31 + -4.0;
   HEAPF32[136>>2] = $32;
  } else {
   $33 = HEAP32[8664>>2]|0;
   $34 = (($33) + 1)|0;
   HEAP32[8664>>2] = $34;
   $35 = HEAP32[8768>>2]|0;
   $36 = (($35) + 1)|0;
   HEAP32[8768>>2] = $36;
   $37 = ($33|0)>(9);
   if ($37) {
    $38 = HEAP32[(200)>>2]|0;
    $39 = (($38) + 1)|0;
    HEAP32[(200)>>2] = $39;
    HEAP32[8664>>2] = 0;
    $40 = HEAP32[(200)>>2]|0;
    $41 = ($40|0)>(3);
    if ($41) {
     HEAP32[(200)>>2] = 0;
    }
    $42 = HEAP32[(204)>>2]|0;
    if ((($42|0) == 4)) {
     $45 = HEAP32[8768>>2]|0;
     $46 = ($45|0)>(240);
     if (!($46)) {
      break;
     }
     HEAP32[8768>>2] = 0;
     HEAP32[8760>>2] = 0;
     HEAP32[(204)>>2] = 1;
     break;
    } else if ((($42|0) == 3)) {
     $43 = HEAP32[8768>>2]|0;
     $44 = ($43|0)>(180);
     if (!($44)) {
      break;
     }
     HEAP32[8768>>2] = 0;
     HEAP32[8760>>2] = 0;
     HEAP32[(204)>>2] = 2;
     break;
    } else if ((($42|0) == 6) | (($42|0) == 5)) {
     $47 = HEAP32[8768>>2]|0;
     $48 = ($47|0)>(240);
     if (!($48)) {
      break;
     }
     HEAP32[8768>>2] = 0;
     HEAP32[8760>>2] = 0;
     HEAP32[(204)>>2] = 1;
     break;
    } else {
     break;
    }
   }
  }
 } while(0);
 $49 = (_IsMouseButtonPressed(0)|0);
 $50 = ($49|0)==(0);
 if ($50) {
  $$pr = HEAP32[8736>>2]|0;
  $63 = ($$pr|0)==(0);
  if (!($63)) {
   label = 29;
  }
 } else {
  _GetMousePosition($0);
  $51 = $0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($51) + 4)|0;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = 8792;
  $58 = $57;
  HEAP32[$58>>2] = $53;
  $59 = (($57) + 4)|0;
  $60 = $59;
  HEAP32[$60>>2] = $56;
  HEAP32[8784>>2] = 1;
  HEAPF32[8776>>2] = 1.0;
  $61 = +HEAPF32[8792>>2];
  $62 = (~~(($61)));
  HEAP32[8752>>2] = $62;
  HEAP32[8736>>2] = 1;
  label = 29;
 }
 do {
  if ((label|0) == 29) {
   $64 = HEAP32[8752>>2]|0;
   $65 = (+($64|0));
   $66 = +HEAPF32[136>>2];
   $67 = HEAP32[(192)>>2]|0;
   $68 = (($67|0) / 2)&-1;
   $69 = (+($68|0));
   $70 = $66 + $69;
   $71 = $70 + 5.0;
   $72 = $65 > $71;
   if ($72) {
    HEAP32[8744>>2] = 0;
    break;
   }
   $73 = $70 + -5.0;
   $74 = $65 < $73;
   if ($74) {
    HEAP32[8744>>2] = 1;
    break;
   } else {
    HEAP32[8744>>2] = -1;
    HEAP32[8736>>2] = 0;
    break;
   }
  }
 } while(0);
 $75 = HEAP32[(200)>>2]|0;
 $76 = HEAP32[(164)>>2]|0;
 $77 = Math_imul($76, $75)|0;
 $78 = (($77|0) / 4)&-1;
 HEAP32[(184)>>2] = $78;
 $79 = HEAP32[(204)>>2]|0;
 $80 = (($79) + -1)|0;
 $81 = HEAP32[(168)>>2]|0;
 $82 = Math_imul($80, $81)|0;
 $83 = (($82|0) / 6)&-1;
 HEAP32[(188)>>2] = $83;
 $84 = +HEAPF32[136>>2];
 $85 = $84 + 50.0;
 $86 = (~~(($85)));
 $87 = +HEAPF32[(140)>>2];
 $88 = $87 + -60.0;
 $89 = (~~(($88)));
 HEAP32[(144)>>2] = $86;
 HEAP32[(148)>>2] = $89;
 HEAP32[(152)>>2] = 100;
 HEAP32[(156)>>2] = 300;
 $90 = HEAP32[8784>>2]|0;
 $91 = ($90|0)==(0);
 if ($91) {
  STACKTOP = sp;return;
 }
 $92 = +HEAPF32[8776>>2];
 $93 = $92 + -0.10000000149011612;
 HEAPF32[8776>>2] = $93;
 $94 = !($93 <= 0.0);
 if ($94) {
  STACKTOP = sp;return;
 }
 HEAPF32[8776>>2] = 0.0;
 HEAP32[8784>>2] = 0;
 STACKTOP = sp;return;
}
function _DrawPlayer() {
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy4 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $pointerPosition$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy4 = sp + 56|0;
 $pointerPosition$byval_copy = sp;
 $$byval_copy1 = sp + 8|0;
 $$byval_copy = sp + 24|0;
 $0 = sp + 44|0;
 $1 = sp + 48|0;
 $2 = sp + 52|0;
 HEAP32[$0>>2] = -1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[(160)>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[(160)+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[(160)+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[(160)+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[(160)+16>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[(184)>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[(184)+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[(184)+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[(184)+12>>2]|0;
 ;HEAP32[$pointerPosition$byval_copy>>2]=HEAP32[136>>2]|0;HEAP32[$pointerPosition$byval_copy+4>>2]=HEAP32[136+4>>2]|0;
 ;HEAP8[$$byval_copy4>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$0+3>>0]|0;
 _DrawTextureRec($$byval_copy,$$byval_copy1,$pointerPosition$byval_copy,$$byval_copy4);
 $3 = HEAP32[8784>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _DrawLifes();
  STACKTOP = sp;return;
 }
 HEAP8[$2>>0] = -26;
 $5 = ((($2)) + 1|0);
 HEAP8[$5>>0] = 41;
 $6 = ((($2)) + 2|0);
 HEAP8[$6>>0] = 55;
 $7 = ((($2)) + 3|0);
 HEAP8[$7>>0] = -1;
 $8 = +HEAPF32[8776>>2];
 ;HEAP8[$$byval_copy4>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$2+3>>0]|0;
 _Fade($1,$$byval_copy4,$8);
 ;HEAP32[$pointerPosition$byval_copy>>2]=HEAP32[8792>>2]|0;HEAP32[$pointerPosition$byval_copy+4>>2]=HEAP32[8792+4>>2]|0;
 ;HEAP8[$$byval_copy4>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$1+3>>0]|0;
 _DrawCircleV($pointerPosition$byval_copy,20.0,$$byval_copy4);
 _DrawLifes();
 STACKTOP = sp;return;
}
function _UnloadPlayer() {
 var $texLife$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $texLife$byval_copy = sp;
 ;HEAP32[$texLife$byval_copy>>2]=HEAP32[(160)>>2]|0;HEAP32[$texLife$byval_copy+4>>2]=HEAP32[(160)+4>>2]|0;HEAP32[$texLife$byval_copy+8>>2]=HEAP32[(160)+8>>2]|0;HEAP32[$texLife$byval_copy+12>>2]=HEAP32[(160)+12>>2]|0;HEAP32[$texLife$byval_copy+16>>2]=HEAP32[(160)+16>>2]|0;
 _UnloadTexture($texLife$byval_copy);
 ;HEAP32[$texLife$byval_copy>>2]=HEAP32[8712>>2]|0;HEAP32[$texLife$byval_copy+4>>2]=HEAP32[8712+4>>2]|0;HEAP32[$texLife$byval_copy+8>>2]=HEAP32[8712+8>>2]|0;HEAP32[$texLife$byval_copy+12>>2]=HEAP32[8712+12>>2]|0;HEAP32[$texLife$byval_copy+16>>2]=HEAP32[8712+16>>2]|0;
 _UnloadTexture($texLife$byval_copy);
 STACKTOP = sp;return;
}
function _ScarePlayer() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(200)>>2] = 0;
 $0 = HEAP32[8744>>2]|0;
 if ((($0|0) == 1)) {
  HEAP32[(204)>>2] = 4;
 } else if ((($0|0) == 0)) {
  HEAP32[(204)>>2] = 3;
 } else {
  HEAP32[(204)>>2] = 3;
 }
 $1 = HEAP32[(212)>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[(212)>>2] = $2;
 $3 = ($1|0)<(2);
 if (!($3)) {
  HEAP32[8760>>2] = 1;
  return;
 }
 HEAP32[(216)>>2] = 1;
 HEAP32[8760>>2] = 1;
 return;
}
function _SearchKeyPlayer() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8744>>2] = -1;
 HEAP32[8736>>2] = 0;
 HEAP32[(200)>>2] = 0;
 HEAP32[(204)>>2] = 5;
 HEAP32[8760>>2] = 1;
 return;
}
function _FindKeyPlayer() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(200)>>2] = 0;
 HEAP32[(204)>>2] = 6;
 HEAP32[(208)>>2] = 1;
 HEAP32[8760>>2] = 1;
 return;
}
function _DrawLifes() {
 var $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $texLife$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp + 28|0;
 $texLife$byval_copy = sp;
 $0 = sp + 20|0;
 $1 = sp + 24|0;
 $2 = HEAP32[(212)>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (_GetScreenHeight()|0);
 $5 = HEAP32[(212)>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($4) + -20)|0;
 $8 = HEAP32[(8720)>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = (+($9|0));
 $11 = (~~(($10)));
 $12 = ((($1)) + 1|0);
 $13 = ((($1)) + 2|0);
 $14 = ((($1)) + 3|0);
 $i$01 = 0;
 while(1) {
  $15 = HEAP32[(8716)>>2]|0;
  $16 = Math_imul($15, $i$01)|0;
  $17 = (+($16|0));
  $18 = $17 + 20.0;
  $19 = (~~(($18)));
  HEAP8[$1>>0] = -11;
  HEAP8[$12>>0] = -11;
  HEAP8[$13>>0] = -11;
  HEAP8[$14>>0] = -1;
  ;HEAP8[$$byval_copy1>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$1+3>>0]|0;
  _Fade($0,$$byval_copy1,0.69999998807907104);
  ;HEAP32[$texLife$byval_copy>>2]=HEAP32[8712>>2]|0;HEAP32[$texLife$byval_copy+4>>2]=HEAP32[8712+4>>2]|0;HEAP32[$texLife$byval_copy+8>>2]=HEAP32[8712+8>>2]|0;HEAP32[$texLife$byval_copy+12>>2]=HEAP32[8712+12>>2]|0;HEAP32[$texLife$byval_copy+16>>2]=HEAP32[8712+16>>2]|0;
  ;HEAP8[$$byval_copy1>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$0+3>>0]|0;
  _DrawTexture($texLife$byval_copy,$19,$11,$$byval_copy1);
  $20 = (($i$01) + 1)|0;
  $21 = HEAP32[(212)>>2]|0;
  $22 = ($20|0)<($21|0);
  if ($22) {
   $i$01 = $20;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _UpdateMonster($monster) {
 $monster = $monster|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp;
 $0 = sp + 8|0;
 $1 = ((($monster)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   _GetMousePosition($0);
   $4 = ((($monster)) + 28|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$4+12>>2]|0;
   $5 = (_CheckCollisionPointRec($$byval_copy,$$byval_copy1)|0);
   $6 = ($5|0)==(0);
   $7 = ((($monster)) + 84|0);
   if ($6) {
    HEAP32[$7>>2] = 0;
    break;
   } else {
    HEAP32[$7>>2] = 1;
    break;
   }
  } else {
   $8 = ((($monster)) + 88|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if (!($10)) {
    $11 = ((($monster)) + 64|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + 1)|0;
    HEAP32[$11>>2] = $13;
    $14 = ((($monster)) + 72|0);
    HEAP32[$14>>2] = 0;
    $15 = HEAP32[$11>>2]|0;
    $16 = ($15|0)>(7);
    if ($16) {
     $17 = ((($monster)) + 68|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($18) + 1)|0;
     HEAP32[$17>>2] = $19;
     HEAP32[$11>>2] = 0;
     $20 = HEAP32[$17>>2]|0;
     $21 = ((($monster)) + 76|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) + -1)|0;
     $24 = ($20|0)>($23|0);
     if ($24) {
      HEAP32[$17>>2] = 1;
     }
    }
   }
  }
 } while(0);
 $25 = ((($monster)) + 68|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($monster)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = Math_imul($28, $26)|0;
 $30 = ((($monster)) + 76|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29|0) / ($31|0))&-1;
 $33 = ((($monster)) + 44|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($monster)) + 72|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($monster)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = Math_imul($37, $35)|0;
 $39 = ((($monster)) + 48|0);
 HEAP32[$39>>2] = $38;
 STACKTOP = sp;return;
}
function _DrawMonster($monster,$scroll) {
 $monster = $monster|0;
 $scroll = $scroll|0;
 var $$byval_copy3 = 0, $$byval_copy4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scrollPos = 0, $scrollPos$byval_copy5 = 0;
 var $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $tmpcast$byval_copy = sp + 64|0;
 $scrollPos$byval_copy5 = sp;
 $$byval_copy4 = sp + 8|0;
 $$byval_copy3 = sp + 24|0;
 $scrollPos = sp + 48|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = +HEAPF32[$monster>>2];
 $3 = (+($scroll|0));
 $4 = $2 - $3;
 HEAPF32[$scrollPos>>2] = $4;
 $5 = ((($scrollPos)) + 4|0);
 $6 = ((($monster)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$5>>2] = $7;
 $8 = ((($monster)) + 84|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 $11 = ((($monster)) + 8|0);
 $12 = ((($monster)) + 44|0);
 if ($10) {
  HEAP32[$1>>2] = -1;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$11+12>>2]|0;HEAP32[$$byval_copy3+16>>2]=HEAP32[$11+16>>2]|0;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$12+12>>2]|0;
  ;HEAP32[$scrollPos$byval_copy5>>2]=HEAP32[$scrollPos>>2]|0;HEAP32[$scrollPos$byval_copy5+4>>2]=HEAP32[$scrollPos+4>>2]|0;
  ;HEAP8[$tmpcast$byval_copy>>0]=HEAP8[$1>>0]|0;HEAP8[$tmpcast$byval_copy+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$tmpcast$byval_copy+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$tmpcast$byval_copy+3>>0]=HEAP8[$1+3>>0]|0;
  _DrawTextureRec($$byval_copy3,$$byval_copy4,$scrollPos$byval_copy5,$tmpcast$byval_copy);
  STACKTOP = sp;return;
 } else {
  HEAP8[$0>>0] = -26;
  $13 = ((($0)) + 1|0);
  HEAP8[$13>>0] = 41;
  $14 = ((($0)) + 2|0);
  HEAP8[$14>>0] = 55;
  $15 = ((($0)) + 3|0);
  HEAP8[$15>>0] = -1;
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$11>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$$byval_copy3+12>>2]=HEAP32[$11+12>>2]|0;HEAP32[$$byval_copy3+16>>2]=HEAP32[$11+16>>2]|0;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$12+12>>2]|0;
  ;HEAP32[$scrollPos$byval_copy5>>2]=HEAP32[$scrollPos>>2]|0;HEAP32[$scrollPos$byval_copy5+4>>2]=HEAP32[$scrollPos+4>>2]|0;
  ;HEAP8[$tmpcast$byval_copy>>0]=HEAP8[$0>>0]|0;HEAP8[$tmpcast$byval_copy+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$tmpcast$byval_copy+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$tmpcast$byval_copy+3>>0]=HEAP8[$0+3>>0]|0;
  _DrawTextureRec($$byval_copy3,$$byval_copy4,$scrollPos$byval_copy5,$tmpcast$byval_copy);
  STACKTOP = sp;return;
 }
}
function _UnloadMonster($monster) {
 $monster = $monster|0;
 var $$byval_copy = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp;
 $0 = ((($monster)) + 8|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$0+16>>2]|0;
 _UnloadTexture($$byval_copy);
 STACKTOP = sp;return;
}
function _InitWindow($width,$height,$title) {
 $width = $width|0;
 $height = $height|0;
 $title = $title|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _TraceLog(0,8816,$vararg_buffer);
 HEAP32[8848>>2] = $title;
 _InitDisplay($width,$height);
 _InitGraphics();
 _LoadDefaultFont();
 _InitTimer();
 _InitGesturesSystem();
 (_emscripten_set_fullscreenchange_callback((0|0),(0|0),1,(2|0))|0);
 $0 = HEAP32[8856>>2]|0;
 $1 = (($0|0) / 2)&-1;
 $2 = (+($1|0));
 HEAPF32[8864>>2] = $2;
 $3 = HEAP32[8872>>2]|0;
 $4 = (($3|0) / 2)&-1;
 $5 = (+($4|0));
 HEAPF32[(8868)>>2] = $5;
 $6 = HEAP32[8880>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 _SetTargetFPS(60);
 _LogoAnimation();
 STACKTOP = sp;return;
}
function _SetTargetFPS($fps) {
 $fps = $fps|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (+($fps|0));
 $1 = 1.0 / $0;
 HEAPF64[8888>>3] = $1;
 $2 = $1;
 $3 = $2 * 1000.0;
 $4 = $3;
 HEAPF64[$vararg_buffer>>3] = $4;
 _TraceLog(0,8896,$vararg_buffer);
 STACKTOP = sp;return;
}
function _CloseWindow() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _UnloadDefaultFont();
 _rlglClose();
 $0 = HEAP32[8944>>2]|0;
 _glfwDestroyWindow(($0|0));
 _glfwTerminate();
 _TraceLog(0,8952,$vararg_buffer);
 STACKTOP = sp;return;
}
function _GetScreenWidth() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8856>>2]|0;
 return ($0|0);
}
function _GetScreenHeight() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8872>>2]|0;
 return ($0|0);
}
function _ClearBackground($color) {
 $color = $color|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$color>>0]|0;
 $1 = ((($color)) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ((($color)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ((($color)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 _rlClearColor($0,$2,$4,$6);
 return;
}
function _BeginDrawing() {
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $downscaleView$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $downscaleView$byval_copy = sp;
 $0 = (+_GetTime());
 HEAPF64[9000>>3] = $0;
 $1 = +HEAPF64[9008>>3];
 $2 = $0 - $1;
 HEAPF64[9016>>3] = $2;
 HEAPF64[9008>>3] = $0;
 $3 = (_IsPosproShaderEnabled()|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _rlEnablePostproFBO();
 }
 _rlClearScreenBuffers();
 _rlLoadIdentity();
 dest=$downscaleView$byval_copy; src=9024; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $5 = (_GetMatrixVector($downscaleView$byval_copy)|0);
 _rlMultMatrixf($5);
 STACKTOP = sp;return;
}
function _EndDrawing() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlglDraw();
 $0 = (_IsPosproShaderEnabled()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _rlglDrawPostpro();
 }
 _SwapBuffers();
 _PollInputEvents();
 $2 = (+_GetTime());
 HEAPF64[9000>>3] = $2;
 $3 = +HEAPF64[9008>>3];
 $4 = $2 - $3;
 HEAPF64[9088>>3] = $4;
 HEAPF64[9008>>3] = $2;
 $5 = +HEAPF64[9016>>3];
 $6 = $5 + $4;
 HEAPF64[9096>>3] = $6;
 $7 = +HEAPF64[8888>>3];
 $8 = $6 < $7;
 if (!($8)) {
  return;
 }
 while(1) {
  $9 = (+_GetTime());
  HEAPF64[9000>>3] = $9;
  $10 = +HEAPF64[9008>>3];
  $11 = $9 - $10;
  HEAPF64[9008>>3] = $9;
  $12 = +HEAPF64[9096>>3];
  $13 = $12 + $11;
  HEAPF64[9096>>3] = $13;
  $14 = +HEAPF64[8888>>3];
  $15 = $13 < $14;
  if (!($15)) {
   break;
  }
 }
 return;
}
function _Fade($agg$result,$color,$alpha) {
 $agg$result = $agg$result|0;
 $color = $color|0;
 $alpha = +$alpha;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $alpha < 0.0;
 if ($0) {
  $$0 = 0.0;
 } else {
  $1 = $alpha > 1.0;
  if ($1) {
   $$0 = 1.0;
  } else {
   $$0 = $alpha;
  }
 }
 $2 = ((($color)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (+($3&255));
 $5 = $$0 * $4;
 $6 = HEAP8[$color>>0]|0;
 HEAP8[$agg$result>>0] = $6;
 $7 = ((($agg$result)) + 1|0);
 $8 = ((($color)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 HEAP8[$7>>0] = $9;
 $10 = ((($agg$result)) + 2|0);
 $11 = ((($color)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 HEAP8[$10>>0] = $12;
 $13 = ((($agg$result)) + 3|0);
 $14 = (~~(($5))&255);
 HEAP8[$13>>0] = $14;
 return;
}
function _IsKeyPressed($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, $pressed$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (9120 + ($key)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = (9632 + ($key)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($1<<24>>24)!=($3<<24>>24);
 $5 = ($1<<24>>24)==(1);
 $or$cond = $5 & $4;
 $pressed$0 = $or$cond&1;
 return ($pressed$0|0);
}
function _IsKeyDown($key) {
 $key = $key|0;
 var $$ = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_GetKeyStatus($key)|0);
 $1 = ($0|0)==(1);
 $$ = $1&1;
 return ($$|0);
}
function _IsMouseButtonPressed($button) {
 $button = $button|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, $pressed$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (10152 + ($button)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = (10160 + ($button)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($1<<24>>24)!=($3<<24>>24);
 $5 = ($1<<24>>24)==(1);
 $or$cond = $5 & $4;
 $pressed$0 = $or$cond&1;
 return ($pressed$0|0);
}
function _GetMousePosition($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 8864;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$result;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function _mystrdup($str) {
 $str = $str|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($str|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($2|0),($str|0),($1|0))|0;
 $$0 = $2;
 return ($$0|0);
}
function _rlMatrixMode($mode) {
 $mode = $mode|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 if ((($mode|0) == 0)) {
  HEAP32[10296>>2] = 10232;
 } else if ((($mode|0) == 1)) {
  HEAP32[10296>>2] = 10304;
 }
 HEAP32[10368>>2] = $mode;
 return;
}
function _rlPushMatrix() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[10376>>2]|0;
 $1 = ($0|0)==(15);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = 16;
  _TraceLog(1,10384,$vararg_buffer);
 }
 $2 = HEAP32[10376>>2]|0;
 $3 = (10424 + ($2<<6)|0);
 $4 = HEAP32[10296>>2]|0;
 dest=$3; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _rlLoadIdentity();
 $5 = HEAP32[10376>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[10376>>2] = $6;
 $7 = HEAP32[10368>>2]|0;
 $8 = ($7|0)==(1);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[11448>>2] = 1;
 STACKTOP = sp;return;
}
function _rlLoadIdentity() {
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp;
 $1 = HEAP32[10296>>2]|0;
 _MatrixIdentity($0);
 dest=$1; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlPopMatrix() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[10376>>2]|0;
 $1 = ($0|0)>(0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[10376>>2]|0;
 $3 = (($2) + -1)|0;
 $4 = (10424 + ($3<<6)|0);
 $5 = HEAP32[10296>>2]|0;
 _memmove(($5|0),($4|0),64)|0;
 $6 = HEAP32[10376>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[10376>>2] = $7;
 return;
}
function _rlTranslatef($x,$y,$z) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $mat = 0, $mat$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $mat$byval_copy = sp + 192|0;
 $$byval_copy = sp;
 $mat = sp + 64|0;
 $0 = sp + 128|0;
 _MatrixTranslate($mat,$x,$y,$z);
 _MatrixTranspose($mat);
 $1 = HEAP32[10296>>2]|0;
 dest=$$byval_copy; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$mat$byval_copy; src=$mat; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($0,$$byval_copy,$mat$byval_copy);
 dest=$1; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlRotatef($angleDeg,$x,$y,$z) {
 $angleDeg = +$angleDeg;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $axis = 0, $rotation = 0, $rotation$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $rotation$byval_copy = sp + 272|0;
 $$byval_copy = sp;
 $rotation = sp + 64|0;
 $axis = sp + 128|0;
 $0 = sp + 144|0;
 $1 = sp + 208|0;
 _MatrixIdentity($rotation);
 HEAPF32[$axis>>2] = $x;
 $2 = ((($axis)) + 4|0);
 HEAPF32[$2>>2] = $y;
 $3 = ((($axis)) + 8|0);
 HEAPF32[$3>>2] = $z;
 _VectorNormalize($axis);
 $4 = $angleDeg;
 $5 = $4 * 0.017453292519943295;
 $6 = $5;
 ;HEAP32[$rotation$byval_copy>>2]=HEAP32[$axis>>2]|0;HEAP32[$rotation$byval_copy+4>>2]=HEAP32[$axis+4>>2]|0;HEAP32[$rotation$byval_copy+8>>2]=HEAP32[$axis+8>>2]|0;
 _MatrixRotate($0,$6,$rotation$byval_copy);
 dest=$rotation; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixTranspose($rotation);
 $7 = HEAP32[10296>>2]|0;
 dest=$$byval_copy; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$rotation$byval_copy; src=$rotation; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($1,$$byval_copy,$rotation$byval_copy);
 dest=$7; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlMultMatrixf($m) {
 $m = $m|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mat = 0, $mat$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $mat$byval_copy = sp + 192|0;
 $$byval_copy = sp;
 $mat = sp + 64|0;
 $0 = sp + 128|0;
 $1 = HEAP32[$m>>2]|0;
 HEAP32[$mat>>2] = $1;
 $2 = ((($mat)) + 4|0);
 $3 = ((($m)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($mat)) + 8|0);
 $6 = ((($m)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$5>>2] = $7;
 $8 = ((($mat)) + 12|0);
 $9 = ((($m)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$8>>2] = $10;
 $11 = ((($mat)) + 16|0);
 $12 = ((($m)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$11>>2] = $13;
 $14 = ((($mat)) + 20|0);
 $15 = ((($m)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$14>>2] = $16;
 $17 = ((($mat)) + 24|0);
 $18 = ((($m)) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $19;
 $20 = ((($mat)) + 28|0);
 $21 = ((($m)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$20>>2] = $22;
 $23 = ((($mat)) + 32|0);
 $24 = ((($m)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$23>>2] = $25;
 $26 = ((($mat)) + 36|0);
 $27 = ((($m)) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[$26>>2] = $28;
 $29 = ((($mat)) + 40|0);
 $30 = ((($m)) + 40|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$29>>2] = $31;
 $32 = ((($mat)) + 44|0);
 $33 = ((($m)) + 44|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$32>>2] = $34;
 $35 = ((($mat)) + 48|0);
 $36 = ((($m)) + 48|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$35>>2] = $37;
 $38 = ((($mat)) + 52|0);
 $39 = ((($m)) + 52|0);
 $40 = HEAP32[$39>>2]|0;
 HEAP32[$38>>2] = $40;
 $41 = ((($mat)) + 56|0);
 $42 = ((($m)) + 56|0);
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = ((($mat)) + 60|0);
 $45 = ((($m)) + 60|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$44>>2] = $46;
 $47 = HEAP32[10296>>2]|0;
 dest=$$byval_copy; src=$47; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$mat$byval_copy; src=$mat; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($0,$$byval_copy,$mat$byval_copy);
 dest=$47; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlOrtho($left,$right,$bottom,$top,$near,$far) {
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $near = +$near;
 $far = +$far;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $matOrtho = 0, $matOrtho$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $matOrtho$byval_copy = sp + 192|0;
 $$byval_copy = sp;
 $matOrtho = sp + 64|0;
 $0 = sp + 128|0;
 _MatrixOrtho($matOrtho,$left,$right,$bottom,$top,$near,$far);
 _MatrixTranspose($matOrtho);
 $1 = HEAP32[10296>>2]|0;
 dest=$$byval_copy; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$matOrtho$byval_copy; src=$matOrtho; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($0,$$byval_copy,$matOrtho$byval_copy);
 dest=$1; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _rlBegin($mode) {
 $mode = $mode|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[11456>>2] = $mode;
 return;
}
function _rlEnd() {
 var $$byval_copy = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0;
 var $150 = 0, $151 = 0.0, $152 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond16 = 0, $exitcond17 = 0, $exitcond18 = 0, $i$013 = 0;
 var $i1$011 = 0, $i2$04 = 0, $i4$05 = 0, $i6$09 = 0, $i7$07 = 0, $quads$1$promoted = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy = sp;
 $0 = HEAP32[11448>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[11464>>2]|0;
  $3 = ($2|0)>(0);
  if ($3) {
   $i$013 = 0;
   while(1) {
    $4 = HEAP32[11472>>2]|0;
    $5 = (($4) + (($i$013*12)|0)|0);
    $6 = HEAP32[10296>>2]|0;
    dest=$$byval_copy; src=$6; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    _VectorTransform($5,$$byval_copy);
    $7 = (($i$013) + 1)|0;
    $8 = HEAP32[11464>>2]|0;
    $9 = ($7|0)<($8|0);
    if ($9) {
     $i$013 = $7;
    } else {
     $$lcssa = $8;
     break;
    }
   }
   HEAP32[11448>>2] = 0;
   $10 = ($$lcssa|0)>(0);
   if ($10) {
    $i1$011 = 0;
    while(1) {
     $11 = HEAP32[11472>>2]|0;
     $12 = (($11) + (($i1$011*12)|0)|0);
     $13 = +HEAPF32[$12>>2];
     $14 = (((($11) + (($i1$011*12)|0)|0)) + 4|0);
     $15 = +HEAPF32[$14>>2];
     $16 = (((($11) + (($i1$011*12)|0)|0)) + 8|0);
     $17 = +HEAPF32[$16>>2];
     _rlVertex3f($13,$15,$17);
     $18 = (($i1$011) + 1)|0;
     $19 = HEAP32[11464>>2]|0;
     $20 = ($18|0)<($19|0);
     if ($20) {
      $i1$011 = $18;
     } else {
      break;
     }
    }
   }
  } else {
   HEAP32[11448>>2] = 0;
  }
  HEAP32[11464>>2] = 0;
 }
 $21 = HEAP32[11456>>2]|0;
 if ((($21|0) == 2)) {
  $98 = HEAP32[11528>>2]|0;
  $99 = HEAP32[11536>>2]|0;
  $100 = ($98|0)>($99|0);
  if ($100) {
   $101 = (($98) - ($99))|0;
   $i6$09 = 0;
   while(1) {
    $102 = HEAP32[11536>>2]|0;
    $103 = $102 << 2;
    $104 = (($103) + -4)|0;
    $105 = HEAP32[11544>>2]|0;
    $106 = (($105) + ($104)|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = (($105) + ($103)|0);
    HEAP8[$108>>0] = $107;
    $109 = HEAP32[11536>>2]|0;
    $110 = $109 << 2;
    $111 = (($110) + -3)|0;
    $112 = HEAP32[11544>>2]|0;
    $113 = (($112) + ($111)|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $110 | 1;
    $116 = (($112) + ($115)|0);
    HEAP8[$116>>0] = $114;
    $117 = HEAP32[11536>>2]|0;
    $118 = $117 << 2;
    $119 = (($118) + -2)|0;
    $120 = HEAP32[11544>>2]|0;
    $121 = (($120) + ($119)|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $118 | 2;
    $124 = (($120) + ($123)|0);
    HEAP8[$124>>0] = $122;
    $125 = HEAP32[11536>>2]|0;
    $126 = $125 << 2;
    $127 = (($126) + -1)|0;
    $128 = HEAP32[11544>>2]|0;
    $129 = (($128) + ($127)|0);
    $130 = HEAP8[$129>>0]|0;
    $131 = $126 | 3;
    $132 = (($128) + ($131)|0);
    HEAP8[$132>>0] = $130;
    $133 = HEAP32[11536>>2]|0;
    $134 = (($133) + 1)|0;
    HEAP32[11536>>2] = $134;
    $135 = (($i6$09) + 1)|0;
    $exitcond18 = ($135|0)==($101|0);
    if ($exitcond18) {
     break;
    } else {
     $i6$09 = $135;
    }
   }
  }
  $136 = HEAP32[11528>>2]|0;
  $137 = HEAP32[11552>>2]|0;
  $138 = ($136|0)>($137|0);
  if (!($138)) {
   $151 = +HEAPF32[11568>>2];
   $152 = $151 + 4.9999998736893758E-5;
   HEAPF32[11568>>2] = $152;
   STACKTOP = sp;return;
  }
  $139 = HEAP32[11560>>2]|0;
  $quads$1$promoted = HEAP32[11552>>2]|0;
  $140 = (($136) + ($quads$1$promoted))|0;
  $141 = (($136) - ($137))|0;
  $143 = $quads$1$promoted;$i7$07 = 0;
  while(1) {
   $142 = $143 << 1;
   $144 = (($139) + ($142<<2)|0);
   HEAPF32[$144>>2] = 0.0;
   $145 = $143 << 1;
   $146 = $145 | 1;
   $147 = (($139) + ($146<<2)|0);
   HEAPF32[$147>>2] = 0.0;
   $148 = (($143) + 1)|0;
   $149 = (($i7$07) + 1)|0;
   $exitcond17 = ($149|0)==($141|0);
   if ($exitcond17) {
    break;
   } else {
    $143 = $148;$i7$07 = $149;
   }
  }
  $150 = (($140) - ($137))|0;
  HEAP32[11552>>2] = $150;
  $151 = +HEAPF32[11568>>2];
  $152 = $151 + 4.9999998736893758E-5;
  HEAPF32[11568>>2] = $152;
  STACKTOP = sp;return;
 } else if ((($21|0) == 1)) {
  $60 = HEAP32[11504>>2]|0;
  $61 = HEAP32[11512>>2]|0;
  $62 = ($60|0)>($61|0);
  if (!($62)) {
   $151 = +HEAPF32[11568>>2];
   $152 = $151 + 4.9999998736893758E-5;
   HEAPF32[11568>>2] = $152;
   STACKTOP = sp;return;
  }
  $63 = (($60) - ($61))|0;
  $i4$05 = 0;
  while(1) {
   $64 = HEAP32[11512>>2]|0;
   $65 = $64 << 2;
   $66 = (($65) + -4)|0;
   $67 = HEAP32[11520>>2]|0;
   $68 = (($67) + ($66)|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = (($67) + ($65)|0);
   HEAP8[$70>>0] = $69;
   $71 = HEAP32[11512>>2]|0;
   $72 = $71 << 2;
   $73 = (($72) + -3)|0;
   $74 = HEAP32[11520>>2]|0;
   $75 = (($74) + ($73)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $72 | 1;
   $78 = (($74) + ($77)|0);
   HEAP8[$78>>0] = $76;
   $79 = HEAP32[11512>>2]|0;
   $80 = $79 << 2;
   $81 = (($80) + -2)|0;
   $82 = HEAP32[11520>>2]|0;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $80 | 2;
   $86 = (($82) + ($85)|0);
   HEAP8[$86>>0] = $84;
   $87 = HEAP32[11512>>2]|0;
   $88 = $87 << 2;
   $89 = (($88) + -1)|0;
   $90 = HEAP32[11520>>2]|0;
   $91 = (($90) + ($89)|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $88 | 3;
   $94 = (($90) + ($93)|0);
   HEAP8[$94>>0] = $92;
   $95 = HEAP32[11512>>2]|0;
   $96 = (($95) + 1)|0;
   HEAP32[11512>>2] = $96;
   $97 = (($i4$05) + 1)|0;
   $exitcond16 = ($97|0)==($63|0);
   if ($exitcond16) {
    break;
   } else {
    $i4$05 = $97;
   }
  }
  $151 = +HEAPF32[11568>>2];
  $152 = $151 + 4.9999998736893758E-5;
  HEAPF32[11568>>2] = $152;
  STACKTOP = sp;return;
 } else if ((($21|0) == 0)) {
  $22 = HEAP32[11480>>2]|0;
  $23 = HEAP32[11488>>2]|0;
  $24 = ($22|0)>($23|0);
  if (!($24)) {
   $151 = +HEAPF32[11568>>2];
   $152 = $151 + 4.9999998736893758E-5;
   HEAPF32[11568>>2] = $152;
   STACKTOP = sp;return;
  }
  $25 = (($22) - ($23))|0;
  $i2$04 = 0;
  while(1) {
   $26 = HEAP32[11488>>2]|0;
   $27 = $26 << 2;
   $28 = (($27) + -4)|0;
   $29 = HEAP32[11496>>2]|0;
   $30 = (($29) + ($28)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = (($29) + ($27)|0);
   HEAP8[$32>>0] = $31;
   $33 = HEAP32[11488>>2]|0;
   $34 = $33 << 2;
   $35 = (($34) + -3)|0;
   $36 = HEAP32[11496>>2]|0;
   $37 = (($36) + ($35)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $34 | 1;
   $40 = (($36) + ($39)|0);
   HEAP8[$40>>0] = $38;
   $41 = HEAP32[11488>>2]|0;
   $42 = $41 << 2;
   $43 = (($42) + -2)|0;
   $44 = HEAP32[11496>>2]|0;
   $45 = (($44) + ($43)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $42 | 2;
   $48 = (($44) + ($47)|0);
   HEAP8[$48>>0] = $46;
   $49 = HEAP32[11488>>2]|0;
   $50 = $49 << 2;
   $51 = (($50) + -1)|0;
   $52 = HEAP32[11496>>2]|0;
   $53 = (($52) + ($51)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $50 | 3;
   $56 = (($52) + ($55)|0);
   HEAP8[$56>>0] = $54;
   $57 = HEAP32[11488>>2]|0;
   $58 = (($57) + 1)|0;
   HEAP32[11488>>2] = $58;
   $59 = (($i2$04) + 1)|0;
   $exitcond = ($59|0)==($25|0);
   if ($exitcond) {
    break;
   } else {
    $i2$04 = $59;
   }
  }
  $151 = +HEAPF32[11568>>2];
  $152 = $151 + 4.9999998736893758E-5;
  HEAPF32[11568>>2] = $152;
  STACKTOP = sp;return;
 } else {
  $151 = +HEAPF32[11568>>2];
  $152 = $151 + 4.9999998736893758E-5;
  HEAPF32[11568>>2] = $152;
  STACKTOP = sp;return;
 }
}
function _rlVertex3f($x,$y,$z) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = HEAP32[11448>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[11464>>2]|0;
  $3 = HEAP32[11472>>2]|0;
  $4 = (($3) + (($2*12)|0)|0);
  HEAPF32[$4>>2] = $x;
  $5 = HEAP32[11464>>2]|0;
  $6 = HEAP32[11472>>2]|0;
  $7 = (((($6) + (($5*12)|0)|0)) + 4|0);
  HEAPF32[$7>>2] = $y;
  $8 = HEAP32[11464>>2]|0;
  $9 = HEAP32[11472>>2]|0;
  $10 = (((($9) + (($8*12)|0)|0)) + 8|0);
  HEAPF32[$10>>2] = $z;
  $11 = HEAP32[11464>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[11464>>2] = $12;
  STACKTOP = sp;return;
 }
 $13 = HEAP32[11456>>2]|0;
 if ((($13|0) == 1)) {
  $31 = HEAP32[11504>>2]|0;
  $32 = ($31|0)<(6144);
  if ($32) {
   $33 = ($31*3)|0;
   $34 = HEAP32[11616>>2]|0;
   $35 = (($34) + ($33<<2)|0);
   HEAPF32[$35>>2] = $x;
   $36 = HEAP32[11504>>2]|0;
   $37 = ($36*3)|0;
   $38 = (($37) + 1)|0;
   $39 = HEAP32[11616>>2]|0;
   $40 = (($39) + ($38<<2)|0);
   HEAPF32[$40>>2] = $y;
   $41 = HEAP32[11504>>2]|0;
   $42 = ($41*3)|0;
   $43 = (($42) + 2)|0;
   $44 = HEAP32[11616>>2]|0;
   $45 = (($44) + ($43<<2)|0);
   HEAPF32[$45>>2] = $z;
   $46 = HEAP32[11504>>2]|0;
   $47 = (($46) + 1)|0;
   HEAP32[11504>>2] = $47;
   STACKTOP = sp;return;
  } else {
   _TraceLog(1,11624,$vararg_buffer1);
   STACKTOP = sp;return;
  }
 } else if ((($13|0) == 2)) {
  $48 = HEAP32[11528>>2]|0;
  $49 = ($48|0)<(4096);
  if ($49) {
   $50 = ($48*3)|0;
   $51 = HEAP32[11656>>2]|0;
   $52 = (($51) + ($50<<2)|0);
   HEAPF32[$52>>2] = $x;
   $53 = HEAP32[11528>>2]|0;
   $54 = ($53*3)|0;
   $55 = (($54) + 1)|0;
   $56 = HEAP32[11656>>2]|0;
   $57 = (($56) + ($55<<2)|0);
   HEAPF32[$57>>2] = $y;
   $58 = HEAP32[11528>>2]|0;
   $59 = ($58*3)|0;
   $60 = (($59) + 2)|0;
   $61 = HEAP32[11656>>2]|0;
   $62 = (($61) + ($60<<2)|0);
   HEAPF32[$62>>2] = $z;
   $63 = HEAP32[11528>>2]|0;
   $64 = (($63) + 1)|0;
   HEAP32[11528>>2] = $64;
   $65 = HEAP32[11664>>2]|0;
   $66 = (($65) + -1)|0;
   $67 = HEAP32[11672>>2]|0;
   $68 = (((($67) + ($66<<3)|0)) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($69) + 1)|0;
   HEAP32[$68>>2] = $70;
   STACKTOP = sp;return;
  } else {
   _TraceLog(1,11680,$vararg_buffer3);
   STACKTOP = sp;return;
  }
 } else if ((($13|0) == 0)) {
  $14 = HEAP32[11480>>2]|0;
  $15 = ($14|0)<(2048);
  if ($15) {
   $16 = ($14*3)|0;
   $17 = HEAP32[11576>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   HEAPF32[$18>>2] = $x;
   $19 = HEAP32[11480>>2]|0;
   $20 = ($19*3)|0;
   $21 = (($20) + 1)|0;
   $22 = HEAP32[11576>>2]|0;
   $23 = (($22) + ($21<<2)|0);
   HEAPF32[$23>>2] = $y;
   $24 = HEAP32[11480>>2]|0;
   $25 = ($24*3)|0;
   $26 = (($25) + 2)|0;
   $27 = HEAP32[11576>>2]|0;
   $28 = (($27) + ($26<<2)|0);
   HEAPF32[$28>>2] = $z;
   $29 = HEAP32[11480>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[11480>>2] = $30;
   STACKTOP = sp;return;
  } else {
   _TraceLog(1,11584,$vararg_buffer);
   STACKTOP = sp;return;
  }
 } else {
  STACKTOP = sp;return;
 }
}
function _rlVertex2f($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[11568>>2];
 _rlVertex3f($x,$y,$0);
 return;
}
function _rlVertex2i($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($x|0));
 $1 = (+($y|0));
 $2 = +HEAPF32[11568>>2];
 _rlVertex3f($0,$1,$2);
 return;
}
function _rlTexCoord2f($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11456>>2]|0;
 $1 = ($0|0)==(2);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[11552>>2]|0;
 $3 = $2 << 1;
 $4 = HEAP32[11560>>2]|0;
 $5 = (($4) + ($3<<2)|0);
 HEAPF32[$5>>2] = $x;
 $6 = HEAP32[11552>>2]|0;
 $7 = $6 << 1;
 $8 = $7 | 1;
 $9 = HEAP32[11560>>2]|0;
 $10 = (($9) + ($8<<2)|0);
 HEAPF32[$10>>2] = $y;
 $11 = HEAP32[11552>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[11552>>2] = $12;
 return;
}
function _rlNormal3f($x,$y,$z) {
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _rlColor4ub($x,$y,$z,$w) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11456>>2]|0;
 if ((($0|0) == 0)) {
  $1 = HEAP32[11488>>2]|0;
  $2 = $1 << 2;
  $3 = HEAP32[11496>>2]|0;
  $4 = (($3) + ($2)|0);
  HEAP8[$4>>0] = $x;
  $5 = HEAP32[11488>>2]|0;
  $6 = $5 << 2;
  $7 = $6 | 1;
  $8 = HEAP32[11496>>2]|0;
  $9 = (($8) + ($7)|0);
  HEAP8[$9>>0] = $y;
  $10 = HEAP32[11488>>2]|0;
  $11 = $10 << 2;
  $12 = $11 | 2;
  $13 = HEAP32[11496>>2]|0;
  $14 = (($13) + ($12)|0);
  HEAP8[$14>>0] = $z;
  $15 = HEAP32[11488>>2]|0;
  $16 = $15 << 2;
  $17 = $16 | 3;
  $18 = HEAP32[11496>>2]|0;
  $19 = (($18) + ($17)|0);
  HEAP8[$19>>0] = $w;
  $20 = HEAP32[11488>>2]|0;
  $21 = (($20) + 1)|0;
  HEAP32[11488>>2] = $21;
  return;
 } else if ((($0|0) == 2)) {
  $43 = HEAP32[11536>>2]|0;
  $44 = $43 << 2;
  $45 = HEAP32[11544>>2]|0;
  $46 = (($45) + ($44)|0);
  HEAP8[$46>>0] = $x;
  $47 = HEAP32[11536>>2]|0;
  $48 = $47 << 2;
  $49 = $48 | 1;
  $50 = HEAP32[11544>>2]|0;
  $51 = (($50) + ($49)|0);
  HEAP8[$51>>0] = $y;
  $52 = HEAP32[11536>>2]|0;
  $53 = $52 << 2;
  $54 = $53 | 2;
  $55 = HEAP32[11544>>2]|0;
  $56 = (($55) + ($54)|0);
  HEAP8[$56>>0] = $z;
  $57 = HEAP32[11536>>2]|0;
  $58 = $57 << 2;
  $59 = $58 | 3;
  $60 = HEAP32[11544>>2]|0;
  $61 = (($60) + ($59)|0);
  HEAP8[$61>>0] = $w;
  $62 = HEAP32[11536>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[11536>>2] = $63;
  return;
 } else if ((($0|0) == 1)) {
  $22 = HEAP32[11512>>2]|0;
  $23 = $22 << 2;
  $24 = HEAP32[11520>>2]|0;
  $25 = (($24) + ($23)|0);
  HEAP8[$25>>0] = $x;
  $26 = HEAP32[11512>>2]|0;
  $27 = $26 << 2;
  $28 = $27 | 1;
  $29 = HEAP32[11520>>2]|0;
  $30 = (($29) + ($28)|0);
  HEAP8[$30>>0] = $y;
  $31 = HEAP32[11512>>2]|0;
  $32 = $31 << 2;
  $33 = $32 | 2;
  $34 = HEAP32[11520>>2]|0;
  $35 = (($34) + ($33)|0);
  HEAP8[$35>>0] = $z;
  $36 = HEAP32[11512>>2]|0;
  $37 = $36 << 2;
  $38 = $37 | 3;
  $39 = HEAP32[11520>>2]|0;
  $40 = (($39) + ($38)|0);
  HEAP8[$40>>0] = $w;
  $41 = HEAP32[11512>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[11512>>2] = $42;
  return;
 } else {
  return;
 }
}
function _rlEnableTexture($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11664>>2]|0;
 $1 = (($0) + -1)|0;
 $2 = HEAP32[11672>>2]|0;
 $3 = (($2) + ($1<<3)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($id|0);
 if ($5) {
  return;
 }
 $6 = (((($2) + ($1<<3)|0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  $9 = (($0) + 1)|0;
  HEAP32[11664>>2] = $9;
 }
 $10 = HEAP32[11664>>2]|0;
 $11 = (($10) + -1)|0;
 $12 = HEAP32[11672>>2]|0;
 $13 = (($12) + ($11<<3)|0);
 HEAP32[$13>>2] = $id;
 $14 = HEAP32[11664>>2]|0;
 $15 = (($14) + -1)|0;
 $16 = HEAP32[11672>>2]|0;
 $17 = (((($16) + ($15<<3)|0)) + 4|0);
 HEAP32[$17>>2] = 0;
 return;
}
function _rlDisableTexture() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _rlDeleteTextures($id) {
 $id = $id|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $id;
 _glDeleteTextures(1,($0|0));
 STACKTOP = sp;return;
}
function _rlEnablePostproFBO() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11712>>2]|0;
 _glBindFramebuffer(36160,($0|0));
 return;
}
function _rlDeleteVertexArrays($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $id;
 $1 = HEAP32[11728>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[11736>>2]|0;
 FUNCTION_TABLE_vii[$3 & 63](1,$0);
 STACKTOP = sp;return;
}
function _rlDeleteBuffers($id) {
 $id = $id|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $id;
 _glDeleteBuffers(1,($0|0));
 STACKTOP = sp;return;
}
function _rlClearColor($r,$g,$b,$a) {
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 $a = $a|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($r&255));
 $1 = $0 / 255.0;
 $2 = (+($g&255));
 $3 = $2 / 255.0;
 $4 = (+($b&255));
 $5 = $4 / 255.0;
 $6 = (+($a&255));
 $7 = $6 / 255.0;
 _glClearColor((+$1),(+$3),(+$5),(+$7));
 return;
}
function _rlClearScreenBuffers() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _glClear(16640);
 return;
}
function _rlGetVersion() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function _rlglInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond10 = 0, $exitcond12 = 0, $i$04 = 0, $i2$02 = 0, $i3$01 = 0, $numExt$0$lcssa = 0;
 var $numExt$05 = 0, $pixels = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2496|0;
 $vararg_buffer34 = sp + 40|0;
 $vararg_buffer31 = sp + 2160|0;
 $vararg_buffer29 = sp + 2152|0;
 $vararg_buffer27 = sp + 2144|0;
 $vararg_buffer25 = sp + 2136|0;
 $vararg_buffer23 = sp + 2128|0;
 $vararg_buffer21 = sp + 24|0;
 $vararg_buffer19 = sp + 16|0;
 $vararg_buffer17 = sp + 8|0;
 $vararg_buffer15 = sp;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer10 = sp + 2120|0;
 $vararg_buffer7 = sp + 48|0;
 $vararg_buffer4 = sp + 2096|0;
 $vararg_buffer1 = sp + 2104|0;
 $vararg_buffer = sp + 2112|0;
 $0 = sp + 2432|0;
 $1 = sp + 2168|0;
 $2 = sp + 2232|0;
 $pixels = sp + 2296|0;
 $3 = sp + 2304|0;
 $4 = sp + 2360|0;
 $5 = sp + 2416|0;
 $6 = (_glGetString(7936)|0);
 HEAP32[$vararg_buffer>>2] = $6;
 _TraceLog(0,11744,$vararg_buffer);
 $7 = (_glGetString(7937)|0);
 HEAP32[$vararg_buffer1>>2] = $7;
 _TraceLog(0,11768,$vararg_buffer1);
 $8 = (_glGetString(7938)|0);
 HEAP32[$vararg_buffer4>>2] = $8;
 _TraceLog(0,11792,$vararg_buffer4);
 $9 = (_glGetString(35724)|0);
 HEAP32[$vararg_buffer7>>2] = $9;
 _TraceLog(0,11816,$vararg_buffer7);
 $10 = (_glGetString(7939)|0);
 $11 = (_mystrdup($10)|0);
 $12 = (_strtok($11,11840)|0);
 HEAP32[$vararg_buffer7>>2] = $12;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $numExt$0$lcssa = -1;
 } else {
  $numExt$05 = 0;
  while(1) {
   $14 = (($numExt$05) + 1)|0;
   $15 = (_strtok(0,11840)|0);
   $16 = (($vararg_buffer7) + ($14<<2)|0);
   HEAP32[$16>>2] = $15;
   $17 = ($15|0)==(0|0);
   if ($17) {
    $numExt$0$lcssa = $numExt$05;
    break;
   } else {
    $numExt$05 = $14;
   }
  }
 }
 _free($11);
 HEAP32[$vararg_buffer10>>2] = $numExt$0$lcssa;
 _TraceLog(0,11848,$vararg_buffer10);
 $18 = ($numExt$0$lcssa|0)>(0);
 if ($18) {
  $i$04 = 0;
  while(1) {
   $19 = (($vararg_buffer7) + ($i$04<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_strcmp($20,11888)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    HEAP32[11728>>2] = 1;
    $23 = (_eglGetProcAddress((11920|0))|0);
    HEAP32[11944>>2] = $23;
    $24 = (_eglGetProcAddress((11952|0))|0);
    HEAP32[11976>>2] = $24;
    $25 = (_eglGetProcAddress((11984|0))|0);
    HEAP32[11736>>2] = $25;
   }
   $26 = HEAP32[$19>>2]|0;
   $27 = (_strcmp($26,12008)|0);
   $28 = ($27|0)==(0);
   if ($28) {
    HEAP32[12032>>2] = 1;
   }
   $29 = HEAP32[$19>>2]|0;
   $30 = (_strcmp($29,12040)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    label = 10;
   } else {
    $32 = (_strcmp($29,12072)|0);
    $33 = ($32|0)==(0);
    if ($33) {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    label = 0;
    HEAP32[12112>>2] = 1;
   }
   $34 = HEAP32[$19>>2]|0;
   $35 = (_strcmp($34,12120)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    HEAP32[12160>>2] = 1;
   }
   $37 = HEAP32[$19>>2]|0;
   $38 = (_strcmp($37,12168)|0);
   $39 = ($38|0)==(0);
   if ($39) {
    HEAP32[12200>>2] = 1;
   }
   $40 = HEAP32[$19>>2]|0;
   $41 = (_strcmp($40,12208)|0);
   $42 = ($41|0)==(0);
   if ($42) {
    HEAP32[12248>>2] = 1;
   }
   $43 = HEAP32[$19>>2]|0;
   $44 = (_strcmp($43,12256)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    HEAP32[12296>>2] = 1;
   }
   $46 = (($i$04) + 1)|0;
   $exitcond12 = ($46|0)==($numExt$0$lcssa|0);
   if ($exitcond12) {
    break;
   } else {
    $i$04 = $46;
   }
  }
 }
 $47 = HEAP32[11728>>2]|0;
 $48 = ($47|0)==(0);
 if ($48) {
  _TraceLog(2,12384,$vararg_buffer15);
 } else {
  _TraceLog(0,12304,$vararg_buffer13);
 }
 $49 = HEAP32[12032>>2]|0;
 $50 = ($49|0)==(0);
 if ($50) {
  _TraceLog(2,12528,$vararg_buffer19);
 } else {
  _TraceLog(0,12448,$vararg_buffer17);
 }
 $51 = HEAP32[12112>>2]|0;
 $52 = ($51|0)==(0);
 if (!($52)) {
  _TraceLog(0,12632,$vararg_buffer21);
 }
 $53 = HEAP32[12160>>2]|0;
 $54 = ($53|0)==(0);
 if (!($54)) {
  _TraceLog(0,12680,$vararg_buffer23);
 }
 $55 = HEAP32[12200>>2]|0;
 $56 = ($55|0)==(0);
 if (!($56)) {
  _TraceLog(0,12728,$vararg_buffer25);
 }
 $57 = HEAP32[12248>>2]|0;
 $58 = ($57|0)==(0);
 if (!($58)) {
  _TraceLog(0,12784,$vararg_buffer27);
 }
 $59 = HEAP32[12296>>2]|0;
 $60 = ($59|0)==(0);
 if (!($60)) {
  _TraceLog(0,12832,$vararg_buffer29);
 }
 HEAP32[11456>>2] = 1;
 _MatrixIdentity($0);
 dest=10232; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($1);
 dest=10304; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[10296>>2] = 10304;
 _MatrixIdentity($2);
 dest=10424; src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(10488); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(10552); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(10616); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(10680); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(10744); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(10808); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(10872); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(10936); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(11000); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(11064); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(11128); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(11192); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(11256); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(11320); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixIdentity($2);
 dest=(11384); src=$2; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$pixels>>2] = -1;
 $61 = (_rlglLoadTexture($pixels,1,1,7,1)|0);
 HEAP32[8800>>2] = $61;
 $62 = ($61|0)==(0);
 if ($62) {
  _TraceLog(2,12936,$vararg_buffer34);
 } else {
  HEAP32[$vararg_buffer31>>2] = $61;
  _TraceLog(0,12880,$vararg_buffer31);
 }
 _LoadDefaultShader($3);
 dest=12976; src=$3; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _LoadSimpleShader($4);
 dest=13032; src=$4; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=13088; src=12976; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _InitializeBuffers();
 _InitializeBuffersGPU();
 $63 = (_malloc(49152)|0);
 HEAP32[11472>>2] = $63;
 $i2$02 = 0;
 while(1) {
  $64 = HEAP32[11472>>2]|0;
  $65 = (($64) + (($i2$02*12)|0)|0);
  _VectorZero($5);
  ;HEAP32[$65>>2]=HEAP32[$5>>2]|0;HEAP32[$65+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$65+8>>2]=HEAP32[$5+8>>2]|0;
  $66 = (($i2$02) + 1)|0;
  $exitcond10 = ($66|0)==(4096);
  if ($exitcond10) {
   break;
  } else {
   $i2$02 = $66;
  }
 }
 $67 = (_malloc(2048)|0);
 HEAP32[11672>>2] = $67;
 $i3$01 = 0;
 while(1) {
  $68 = (($67) + ($i3$01<<3)|0);
  HEAP32[$68>>2] = 0;
  $69 = (((($67) + ($i3$01<<3)|0)) + 4|0);
  HEAP32[$69>>2] = 0;
  $70 = (($i3$01) + 1)|0;
  $exitcond = ($70|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $i3$01 = $70;
  }
 }
 HEAP32[11664>>2] = 1;
 $71 = HEAP32[8800>>2]|0;
 $72 = HEAP32[11672>>2]|0;
 HEAP32[$72>>2] = $71;
 STACKTOP = sp;return;
}
function _rlglLoadTexture($data,$width,$height,$textureFormat,$mipmapCount) {
 $data = $data|0;
 $width = $width|0;
 $height = $height|0;
 $textureFormat = $textureFormat|0;
 $mipmapCount = $mipmapCount|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $id = 0, $or$cond = 0, $or$cond20 = 0, $or$cond22 = 0, $or$cond24 = 0, $or$cond9 = 0, $switch = 0, $textureFormat$off = 0, $textureFormat$off16 = 0, $textureFormat$off17 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0;
 var $vararg_buffer9 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer15 = sp + 32|0;
 $vararg_buffer11 = sp + 56|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $id = sp + 68|0;
 _glBindTexture(3553,0);
 HEAP32[$id>>2] = 0;
 $0 = HEAP32[12112>>2]|0;
 $1 = ($0|0)==(0);
 $2 = $textureFormat & -4;
 $switch = ($2|0)==(8);
 $or$cond24 = $switch & $1;
 if ($or$cond24) {
  _TraceLog(2,13144,$vararg_buffer);
  $$0 = HEAP32[$id>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[12160>>2]|0;
 $4 = ($3|0)==(0);
 $5 = ($textureFormat|0)==(12);
 $or$cond9 = $5 & $4;
 if ($or$cond9) {
  _TraceLog(2,13192,$vararg_buffer1);
  $$0 = HEAP32[$id>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[12200>>2]|0;
 $7 = ($6|0)==(0);
 $textureFormat$off = (($textureFormat) + -13)|0;
 $8 = ($textureFormat$off>>>0)<(2);
 $or$cond = $8 & $7;
 if ($or$cond) {
  _TraceLog(2,13240,$vararg_buffer3);
  $$0 = HEAP32[$id>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[12248>>2]|0;
 $10 = ($9|0)==(0);
 $textureFormat$off16 = (($textureFormat) + -15)|0;
 $11 = ($textureFormat$off16>>>0)<(2);
 $or$cond20 = $11 & $10;
 if ($or$cond20) {
  _TraceLog(2,13288,$vararg_buffer5);
  $$0 = HEAP32[$id>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP32[12296>>2]|0;
 $13 = ($12|0)==(0);
 $textureFormat$off17 = (($textureFormat) + -17)|0;
 $14 = ($textureFormat$off17>>>0)<(2);
 $or$cond22 = $14 & $13;
 if ($or$cond22) {
  _TraceLog(2,13336,$vararg_buffer7);
  $$0 = HEAP32[$id>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 _glGenTextures(1,($id|0));
 $15 = HEAP32[$id>>2]|0;
 _glBindTexture(3553,($15|0));
 do {
  switch ($textureFormat|0) {
  case 2:  {
   _glTexImage2D(3553,0,6410,($width|0),($height|0),0,6410,5121,($data|0));
   break;
  }
  case 4:  {
   _glTexImage2D(3553,0,6407,($width|0),($height|0),0,6407,5121,($data|0));
   break;
  }
  case 7:  {
   _glTexImage2D(3553,0,6408,($width|0),($height|0),0,6408,5121,($data|0));
   break;
  }
  case 9:  {
   $18 = HEAP32[12112>>2]|0;
   $19 = ($18|0)==(0);
   if (!($19)) {
    _LoadCompressedTexture($data,$width,$height,$mipmapCount,33777);
   }
   break;
  }
  case 12:  {
   $24 = HEAP32[12160>>2]|0;
   $25 = ($24|0)==(0);
   if (!($25)) {
    _LoadCompressedTexture($data,$width,$height,$mipmapCount,36196);
   }
   break;
  }
  case 11:  {
   $22 = HEAP32[12112>>2]|0;
   $23 = ($22|0)==(0);
   if (!($23)) {
    _LoadCompressedTexture($data,$width,$height,$mipmapCount,33779);
   }
   break;
  }
  case 3:  {
   _glTexImage2D(3553,0,6407,($width|0),($height|0),0,6407,33635,($data|0));
   break;
  }
  case 13:  {
   $26 = HEAP32[12200>>2]|0;
   $27 = ($26|0)==(0);
   if (!($27)) {
    _LoadCompressedTexture($data,$width,$height,$mipmapCount,37492);
   }
   break;
  }
  case 5:  {
   _glTexImage2D(3553,0,6408,($width|0),($height|0),0,6408,32820,($data|0));
   break;
  }
  case 15:  {
   $30 = HEAP32[12248>>2]|0;
   $31 = ($30|0)==(0);
   if (!($31)) {
    _LoadCompressedTexture($data,$width,$height,$mipmapCount,35840);
   }
   break;
  }
  case 10:  {
   $20 = HEAP32[12112>>2]|0;
   $21 = ($20|0)==(0);
   if (!($21)) {
    _LoadCompressedTexture($data,$width,$height,$mipmapCount,33778);
   }
   break;
  }
  case 6:  {
   _glTexImage2D(3553,0,6408,($width|0),($height|0),0,6408,32819,($data|0));
   break;
  }
  case 17:  {
   $34 = HEAP32[12296>>2]|0;
   $35 = ($34|0)==(0);
   if (!($35)) {
    _LoadCompressedTexture($data,$width,$height,$mipmapCount,37808);
   }
   break;
  }
  case 16:  {
   $32 = HEAP32[12248>>2]|0;
   $33 = ($32|0)==(0);
   if (!($33)) {
    _LoadCompressedTexture($data,$width,$height,$mipmapCount,35842);
   }
   break;
  }
  case 1:  {
   _glTexImage2D(3553,0,6409,($width|0),($height|0),0,6409,5121,($data|0));
   break;
  }
  case 18:  {
   $36 = HEAP32[12296>>2]|0;
   $37 = ($36|0)==(0);
   if (!($37)) {
    _LoadCompressedTexture($data,$width,$height,$mipmapCount,37815);
   }
   break;
  }
  case 14:  {
   $28 = HEAP32[12200>>2]|0;
   $29 = ($28|0)==(0);
   if (!($29)) {
    _LoadCompressedTexture($data,$width,$height,$mipmapCount,37496);
   }
   break;
  }
  case 8:  {
   $16 = HEAP32[12112>>2]|0;
   $17 = ($16|0)==(0);
   if (!($17)) {
    _LoadCompressedTexture($data,$width,$height,$mipmapCount,33776);
   }
   break;
  }
  default: {
   _TraceLog(2,13384,$vararg_buffer9);
  }
  }
 } while(0);
 $38 = HEAP32[12032>>2]|0;
 $39 = ($38|0)==(0);
 if ($39) {
  _glTexParameteri(3553,10242,33071);
  _glTexParameteri(3553,10243,33071);
 } else {
  _glTexParameteri(3553,10242,10497);
  _glTexParameteri(3553,10243,10497);
 }
 _glTexParameteri(3553,10240,9728);
 _glTexParameteri(3553,10241,9728);
 _glBindTexture(3553,0);
 $40 = HEAP32[$id>>2]|0;
 $41 = ($40|0)==(0);
 if ($41) {
  _TraceLog(2,14640,$vararg_buffer15);
  $$0 = HEAP32[$id>>2]|0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer11>>2] = $40;
  $vararg_ptr13 = ((($vararg_buffer11)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $width;
  $vararg_ptr14 = ((($vararg_buffer11)) + 8|0);
  HEAP32[$vararg_ptr14>>2] = $height;
  _TraceLog(0,13416,$vararg_buffer11);
  $$0 = HEAP32[$id>>2]|0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _rlglUnloadFBO($fbo) {
 $fbo = $fbo|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _glDeleteFramebuffers(1,($fbo|0));
 $0 = ((($fbo)) + 4|0);
 _glDeleteTextures(1,($0|0));
 $1 = ((($fbo)) + 8|0);
 _glDeleteTextures(1,($1|0));
 $2 = HEAP32[$fbo>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 _TraceLog(0,13672,$vararg_buffer);
 STACKTOP = sp;return;
}
function _rlglClose() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $postproFbo$byval_copy = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $postproFbo$byval_copy = sp + 8|0;
 $vararg_buffer1 = sp;
 $0 = HEAP32[11728>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[11976>>2]|0;
  FUNCTION_TABLE_vi[$2 & 31](0);
 }
 _glDisableVertexAttribArray(0);
 _glDisableVertexAttribArray(1);
 _glDisableVertexAttribArray(2);
 _glDisableVertexAttribArray(3);
 _glBindBuffer(34962,0);
 _glBindBuffer(34963,0);
 _glUseProgram(0);
 _glDeleteBuffers(1,(13728|0));
 _glDeleteBuffers(1,((13732)|0));
 _glDeleteBuffers(1,(13736|0));
 _glDeleteBuffers(1,((13740)|0));
 _glDeleteBuffers(1,(13744|0));
 _glDeleteBuffers(1,((13748)|0));
 _glDeleteBuffers(1,((13752)|0));
 _glDeleteBuffers(1,((13756)|0));
 $3 = HEAP32[11728>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = HEAP32[11736>>2]|0;
  FUNCTION_TABLE_vii[$5 & 63](1,13760);
  $6 = HEAP32[11736>>2]|0;
  FUNCTION_TABLE_vii[$6 & 63](1,13768);
  $7 = HEAP32[11736>>2]|0;
  FUNCTION_TABLE_vii[$7 & 63](1,13776);
 }
 $8 = HEAP32[12976>>2]|0;
 _glDeleteProgram(($8|0));
 $9 = HEAP32[13032>>2]|0;
 _glDeleteProgram(($9|0));
 $10 = HEAP32[11576>>2]|0;
 _free($10);
 $11 = HEAP32[11496>>2]|0;
 _free($11);
 $12 = HEAP32[11616>>2]|0;
 _free($12);
 $13 = HEAP32[11520>>2]|0;
 _free($13);
 $14 = HEAP32[11656>>2]|0;
 _free($14);
 $15 = HEAP32[11560>>2]|0;
 _free($15);
 $16 = HEAP32[11544>>2]|0;
 _free($16);
 $17 = HEAP32[13784>>2]|0;
 _free($17);
 _glDeleteTextures(1,(8800|0));
 $18 = HEAP32[8800>>2]|0;
 HEAP32[$postproFbo$byval_copy>>2] = $18;
 _TraceLog(0,13792,$postproFbo$byval_copy);
 $19 = HEAP32[11712>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $25 = HEAP32[11672>>2]|0;
  _free($25);
  STACKTOP = sp;return;
 }
 ;HEAP32[$postproFbo$byval_copy>>2]=HEAP32[11712>>2]|0;HEAP32[$postproFbo$byval_copy+4>>2]=HEAP32[11712+4>>2]|0;HEAP32[$postproFbo$byval_copy+8>>2]=HEAP32[11712+8>>2]|0;
 _rlglUnloadFBO($postproFbo$byval_copy);
 $21 = HEAP32[(13512)>>2]|0;
 _rlDeleteBuffers($21);
 $22 = HEAP32[(13516)>>2]|0;
 _rlDeleteBuffers($22);
 $23 = HEAP32[(13520)>>2]|0;
 _rlDeleteBuffers($23);
 $24 = HEAP32[(13508)>>2]|0;
 _rlDeleteVertexArrays($24);
 _TraceLog(0,13864,$vararg_buffer1);
 $25 = HEAP32[11672>>2]|0;
 _free($25);
 STACKTOP = sp;return;
}
function _rlglDraw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $i$05 = 0, $indicesOffset$04 = 0, $modelview$byval_copy = 0, $or$cond = 0, $or$cond3 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $modelview$byval_copy = sp;
 _UpdateBuffers();
 $0 = HEAP32[11480>>2]|0;
 $1 = ($0|0)>(0);
 $2 = HEAP32[11504>>2]|0;
 $3 = ($2|0)>(0);
 $or$cond = $1 | $3;
 $4 = HEAP32[11528>>2]|0;
 $5 = ($4|0)>(0);
 $or$cond3 = $or$cond | $5;
 if ($or$cond3) {
  $6 = HEAP32[13088>>2]|0;
  _glUseProgram(($6|0));
  $7 = HEAP32[(13120)>>2]|0;
  dest=$modelview$byval_copy; src=10232; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $8 = (_GetMatrixVector($modelview$byval_copy)|0);
  _glUniformMatrix4fv(($7|0),1,0,($8|0));
  $9 = HEAP32[(13124)>>2]|0;
  dest=$modelview$byval_copy; src=10304; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $10 = (_GetMatrixVector($modelview$byval_copy)|0);
  _glUniformMatrix4fv(($9|0),1,0,($10|0));
  $11 = HEAP32[(13132)>>2]|0;
  _glUniform1i(($11|0),0);
 }
 $12 = HEAP32[11504>>2]|0;
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = HEAP32[8800>>2]|0;
  _glBindTexture(3553,($14|0));
  $15 = HEAP32[11728>>2]|0;
  $16 = ($15|0)==(0);
  if ($16) {
   $19 = HEAP32[13736>>2]|0;
   _glBindBuffer(34962,($19|0));
   $20 = HEAP32[(13104)>>2]|0;
   _glVertexAttribPointer(($20|0),3,5126,0,0,(0|0));
   $21 = HEAP32[(13104)>>2]|0;
   _glEnableVertexAttribArray(($21|0));
   $22 = HEAP32[(13116)>>2]|0;
   $23 = ($22|0)==(-1);
   if (!($23)) {
    $24 = HEAP32[(13740)>>2]|0;
    _glBindBuffer(34962,($24|0));
    $25 = HEAP32[(13116)>>2]|0;
    _glVertexAttribPointer(($25|0),4,5121,1,0,(0|0));
    $26 = HEAP32[(13116)>>2]|0;
    _glEnableVertexAttribArray(($26|0));
   }
  } else {
   $17 = HEAP32[11976>>2]|0;
   $18 = HEAP32[13768>>2]|0;
   FUNCTION_TABLE_vi[$17 & 31]($18);
  }
  $27 = HEAP32[11504>>2]|0;
  _glDrawArrays(4,0,($27|0));
  $28 = HEAP32[11728>>2]|0;
  $29 = ($28|0)==(0);
  if ($29) {
   _glBindBuffer(34962,0);
  }
  _glBindTexture(3553,0);
 }
 $30 = HEAP32[11528>>2]|0;
 $31 = ($30|0)>(0);
 if ($31) {
  $32 = HEAP32[11728>>2]|0;
  $33 = ($32|0)==(0);
  if ($33) {
   $36 = HEAP32[13744>>2]|0;
   _glBindBuffer(34962,($36|0));
   $37 = HEAP32[(13104)>>2]|0;
   _glVertexAttribPointer(($37|0),3,5126,0,0,(0|0));
   $38 = HEAP32[(13104)>>2]|0;
   _glEnableVertexAttribArray(($38|0));
   $39 = HEAP32[(13748)>>2]|0;
   _glBindBuffer(34962,($39|0));
   $40 = HEAP32[(13108)>>2]|0;
   _glVertexAttribPointer(($40|0),2,5126,0,0,(0|0));
   $41 = HEAP32[(13108)>>2]|0;
   _glEnableVertexAttribArray(($41|0));
   $42 = HEAP32[(13116)>>2]|0;
   $43 = ($42|0)==(-1);
   if (!($43)) {
    $44 = HEAP32[(13752)>>2]|0;
    _glBindBuffer(34962,($44|0));
    $45 = HEAP32[(13116)>>2]|0;
    _glVertexAttribPointer(($45|0),4,5121,1,0,(0|0));
    $46 = HEAP32[(13116)>>2]|0;
    _glEnableVertexAttribArray(($46|0));
   }
   $47 = HEAP32[(13756)>>2]|0;
   _glBindBuffer(34963,($47|0));
  } else {
   $34 = HEAP32[11976>>2]|0;
   $35 = HEAP32[13776>>2]|0;
   FUNCTION_TABLE_vi[$34 & 31]($35);
  }
  $48 = HEAP32[11664>>2]|0;
  $49 = ($48|0)>(0);
  if ($49) {
   $i$05 = 0;$indicesOffset$04 = 0;
   while(1) {
    $50 = HEAP32[11672>>2]|0;
    $51 = (((($50) + ($i$05<<3)|0)) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52|0) / 4)&-1;
    $54 = ($53*6)|0;
    $55 = (($50) + ($i$05<<3)|0);
    $56 = HEAP32[$55>>2]|0;
    _glBindTexture(3553,($56|0));
    $57 = $indicesOffset$04 << 1;
    $58 = $57;
    _glDrawElements(4,($54|0),5123,($58|0));
    $59 = HEAP32[11672>>2]|0;
    $60 = (((($59) + ($i$05<<3)|0)) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61|0) / 4)&-1;
    $63 = ($62*6)|0;
    $64 = (($63) + ($indicesOffset$04))|0;
    $65 = (($i$05) + 1)|0;
    $66 = HEAP32[11664>>2]|0;
    $67 = ($65|0)<($66|0);
    if ($67) {
     $i$05 = $65;$indicesOffset$04 = $64;
    } else {
     break;
    }
   }
  }
  $68 = HEAP32[11728>>2]|0;
  $69 = ($68|0)==(0);
  if ($69) {
   _glBindBuffer(34962,0);
   _glBindBuffer(34963,0);
  }
  _glBindTexture(3553,0);
 }
 $70 = HEAP32[11480>>2]|0;
 $71 = ($70|0)>(0);
 if ($71) {
  $72 = HEAP32[8800>>2]|0;
  _glBindTexture(3553,($72|0));
  $73 = HEAP32[11728>>2]|0;
  $74 = ($73|0)==(0);
  if ($74) {
   $77 = HEAP32[13728>>2]|0;
   _glBindBuffer(34962,($77|0));
   $78 = HEAP32[(13104)>>2]|0;
   _glVertexAttribPointer(($78|0),3,5126,0,0,(0|0));
   $79 = HEAP32[(13104)>>2]|0;
   _glEnableVertexAttribArray(($79|0));
   $80 = HEAP32[(13116)>>2]|0;
   $81 = ($80|0)==(-1);
   if (!($81)) {
    $82 = HEAP32[(13732)>>2]|0;
    _glBindBuffer(34962,($82|0));
    $83 = HEAP32[(13116)>>2]|0;
    _glVertexAttribPointer(($83|0),4,5121,1,0,(0|0));
    $84 = HEAP32[(13116)>>2]|0;
    _glEnableVertexAttribArray(($84|0));
   }
  } else {
   $75 = HEAP32[11976>>2]|0;
   $76 = HEAP32[13760>>2]|0;
   FUNCTION_TABLE_vi[$75 & 31]($76);
  }
  $85 = HEAP32[11480>>2]|0;
  _glDrawArrays(1,0,($85|0));
  $86 = HEAP32[11728>>2]|0;
  $87 = ($86|0)==(0);
  if ($87) {
   _glBindBuffer(34962,0);
  }
  _glBindTexture(3553,0);
 }
 $88 = HEAP32[11728>>2]|0;
 $89 = ($88|0)==(0);
 if ($89) {
  _glUseProgram(0);
  HEAP32[11664>>2] = 1;
  $91 = HEAP32[8800>>2]|0;
  $92 = HEAP32[11672>>2]|0;
  HEAP32[$92>>2] = $91;
  $93 = HEAP32[11672>>2]|0;
  $94 = ((($93)) + 4|0);
  HEAP32[$94>>2] = 0;
  HEAP32[11480>>2] = 0;
  HEAP32[11488>>2] = 0;
  HEAP32[11504>>2] = 0;
  HEAP32[11512>>2] = 0;
  HEAP32[11528>>2] = 0;
  HEAP32[11552>>2] = 0;
  HEAP32[11536>>2] = 0;
  HEAPF32[11568>>2] = -1.0;
  STACKTOP = sp;return;
 }
 $90 = HEAP32[11976>>2]|0;
 FUNCTION_TABLE_vi[$90 & 31](0);
 _glUseProgram(0);
 HEAP32[11664>>2] = 1;
 $91 = HEAP32[8800>>2]|0;
 $92 = HEAP32[11672>>2]|0;
 HEAP32[$92>>2] = $91;
 $93 = HEAP32[11672>>2]|0;
 $94 = ((($93)) + 4|0);
 HEAP32[$94>>2] = 0;
 HEAP32[11480>>2] = 0;
 HEAP32[11488>>2] = 0;
 HEAP32[11504>>2] = 0;
 HEAP32[11512>>2] = 0;
 HEAP32[11528>>2] = 0;
 HEAP32[11552>>2] = 0;
 HEAP32[11536>>2] = 0;
 HEAPF32[11568>>2] = -1.0;
 STACKTOP = sp;return;
}
function _rlglDrawPostpro() {
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $postproQuad$byval_copy = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $tmpcast$byval_copy = sp + 256|0;
 $$byval_copy2 = sp + 244|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 220|0;
 $postproQuad$byval_copy = sp + 40|0;
 $0 = sp + 24|0;
 $1 = sp + 12|0;
 $2 = sp;
 $3 = sp + 36|0;
 _glBindFramebuffer(36160,0);
 HEAPF32[$0>>2] = 0.0;
 $4 = ((($0)) + 4|0);
 HEAPF32[$4>>2] = 0.0;
 $5 = ((($0)) + 8|0);
 HEAPF32[$5>>2] = 0.0;
 HEAPF32[$1>>2] = 0.0;
 $6 = ((($1)) + 4|0);
 HEAPF32[$6>>2] = 0.0;
 $7 = ((($1)) + 8|0);
 HEAPF32[$7>>2] = 0.0;
 HEAPF32[$2>>2] = 1.0;
 $8 = ((($2)) + 4|0);
 HEAPF32[$8>>2] = 1.0;
 $9 = ((($2)) + 8|0);
 HEAPF32[$9>>2] = 1.0;
 HEAP32[$3>>2] = -1;
 _memcpy(($postproQuad$byval_copy|0),(13488|0),180)|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$1+8>>2]|0;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$2+8>>2]|0;
 ;HEAP8[$tmpcast$byval_copy>>0]=HEAP8[$3>>0]|0;HEAP8[$tmpcast$byval_copy+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$tmpcast$byval_copy+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$tmpcast$byval_copy+3>>0]=HEAP8[$3+3>>0]|0;
 _rlglDrawModel($postproQuad$byval_copy,$$byval_copy,0.0,$$byval_copy1,$$byval_copy2,$tmpcast$byval_copy,0);
 STACKTOP = sp;return;
}
function _rlglDrawModel($model,$position,$rotationAngle,$rotationAxis,$scale,$color,$wires) {
 $model = $model|0;
 $position = $position|0;
 $rotationAngle = +$rotationAngle;
 $rotationAxis = $rotationAxis|0;
 $scale = $scale|0;
 $color = $color|0;
 $wires = $wires|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $matScale = 0, $modelviewworld = 0, $modelviewworld$byval_copy = 0, $rotation = 0, $transform = 0, $transform$byval_copy = 0, $translation = 0, $vColor = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $modelviewworld$byval_copy = sp + 528|0;
 $transform$byval_copy = sp + 464|0;
 $modelviewworld = sp + 400|0;
 $rotation = sp + 336|0;
 $matScale = sp + 272|0;
 $translation = sp + 208|0;
 $transform = sp + 128|0;
 $0 = sp + 64|0;
 $1 = sp;
 $vColor = sp + 192|0;
 $2 = ((($model)) + 124|0);
 $3 = HEAP32[$2>>2]|0;
 _glUseProgram(($3|0));
 $4 = ((($model)) + 40|0);
 dest=$transform$byval_copy; src=$4; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$modelviewworld$byval_copy; src=10304; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($modelviewworld,$transform$byval_copy,$modelviewworld$byval_copy);
 $5 = $rotationAngle;
 $6 = $5 * 0.017453292519943295;
 $7 = $6;
 ;HEAP32[$modelviewworld$byval_copy>>2]=HEAP32[$rotationAxis>>2]|0;HEAP32[$modelviewworld$byval_copy+4>>2]=HEAP32[$rotationAxis+4>>2]|0;HEAP32[$modelviewworld$byval_copy+8>>2]=HEAP32[$rotationAxis+8>>2]|0;
 _MatrixRotate($rotation,$7,$modelviewworld$byval_copy);
 $8 = +HEAPF32[$scale>>2];
 $9 = ((($scale)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($scale)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 _MatrixScale($matScale,$8,$10,$12);
 $13 = +HEAPF32[$position>>2];
 $14 = ((($position)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = ((($position)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 _MatrixTranslate($translation,$13,$15,$17);
 dest=$transform$byval_copy; src=$rotation; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$modelviewworld$byval_copy; src=$matScale; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($0,$transform$byval_copy,$modelviewworld$byval_copy);
 dest=$transform$byval_copy; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$modelviewworld$byval_copy; src=$translation; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($transform,$transform$byval_copy,$modelviewworld$byval_copy);
 dest=$transform$byval_copy; src=$transform; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 dest=$modelviewworld$byval_copy; src=10304; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _MatrixMultiply($1,$transform$byval_copy,$modelviewworld$byval_copy);
 dest=$modelviewworld; src=$1; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $18 = ((($model)) + 156|0);
 $19 = HEAP32[$18>>2]|0;
 dest=$modelviewworld$byval_copy; src=10232; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $20 = (_GetMatrixVector($modelviewworld$byval_copy)|0);
 _glUniformMatrix4fv(($19|0),1,0,($20|0));
 $21 = ((($model)) + 160|0);
 $22 = HEAP32[$21>>2]|0;
 dest=$modelviewworld$byval_copy; src=$modelviewworld; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $23 = (_GetMatrixVector($modelviewworld$byval_copy)|0);
 _glUniformMatrix4fv(($22|0),1,0,($23|0));
 $24 = HEAP8[$color>>0]|0;
 $25 = (+($24&255));
 $26 = $25 / 255.0;
 HEAPF32[$vColor>>2] = $26;
 $27 = ((($vColor)) + 4|0);
 $28 = ((($color)) + 1|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = (+($29&255));
 $31 = $30 / 255.0;
 HEAPF32[$27>>2] = $31;
 $32 = ((($vColor)) + 8|0);
 $33 = ((($color)) + 2|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = (+($34&255));
 $36 = $35 / 255.0;
 HEAPF32[$32>>2] = $36;
 $37 = ((($vColor)) + 12|0);
 $38 = ((($color)) + 3|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = (+($39&255));
 $41 = $40 / 255.0;
 HEAPF32[$37>>2] = $41;
 $42 = ((($model)) + 164|0);
 $43 = HEAP32[$42>>2]|0;
 _glUniform4fv(($43|0),1,($vColor|0));
 _glActiveTexture(33984);
 $44 = ((($model)) + 128|0);
 $45 = HEAP32[$44>>2]|0;
 _glBindTexture(3553,($45|0));
 $46 = ((($model)) + 168|0);
 $47 = HEAP32[$46>>2]|0;
 _glUniform1i(($47|0),0);
 $48 = ((($model)) + 132|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0);
 if (!($50)) {
  _glActiveTexture(33985);
  $51 = HEAP32[$48>>2]|0;
  _glBindTexture(3553,($51|0));
 }
 $52 = ((($model)) + 136|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(0);
 if (!($54)) {
  _glActiveTexture(33986);
  $55 = HEAP32[$52>>2]|0;
  _glBindTexture(3553,($55|0));
 }
 $56 = HEAP32[11728>>2]|0;
 $57 = ($56|0)==(0);
 if ($57) {
  $61 = ((($model)) + 24|0);
  $62 = HEAP32[$61>>2]|0;
  _glBindBuffer(34962,($62|0));
  $63 = ((($model)) + 140|0);
  $64 = HEAP32[$63>>2]|0;
  _glVertexAttribPointer(($64|0),3,5126,0,0,(0|0));
  $65 = HEAP32[$63>>2]|0;
  _glEnableVertexAttribArray(($65|0));
  $66 = ((($model)) + 28|0);
  $67 = HEAP32[$66>>2]|0;
  _glBindBuffer(34962,($67|0));
  $68 = ((($model)) + 144|0);
  $69 = HEAP32[$68>>2]|0;
  _glVertexAttribPointer(($69|0),2,5126,0,0,(0|0));
  $70 = HEAP32[$68>>2]|0;
  _glEnableVertexAttribArray(($70|0));
  $71 = ((($model)) + 148|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72|0)==(-1);
  if (!($73)) {
   $74 = ((($model)) + 32|0);
   $75 = HEAP32[$74>>2]|0;
   _glBindBuffer(34962,($75|0));
   $76 = HEAP32[$71>>2]|0;
   _glVertexAttribPointer(($76|0),3,5126,0,0,(0|0));
   $77 = HEAP32[$71>>2]|0;
   _glEnableVertexAttribArray(($77|0));
  }
 } else {
  $58 = HEAP32[11976>>2]|0;
  $59 = ((($model)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  FUNCTION_TABLE_vi[$58 & 31]($60);
 }
 $78 = HEAP32[$model>>2]|0;
 _glDrawArrays(4,0,($78|0));
 $79 = HEAP32[$48>>2]|0;
 $80 = ($79|0)==(0);
 if (!($80)) {
  _glActiveTexture(33985);
  _glBindTexture(3553,0);
 }
 $81 = HEAP32[$52>>2]|0;
 $82 = ($81|0)==(0);
 if (!($82)) {
  _glActiveTexture(33986);
  _glBindTexture(3553,0);
 }
 _glActiveTexture(33984);
 _glBindTexture(3553,0);
 $83 = HEAP32[11728>>2]|0;
 $84 = ($83|0)==(0);
 if ($84) {
  _glBindBuffer(34962,0);
  _glUseProgram(0);
  STACKTOP = sp;return;
 } else {
  $85 = HEAP32[11976>>2]|0;
  FUNCTION_TABLE_vi[$85 & 31](0);
  _glUseProgram(0);
  STACKTOP = sp;return;
 }
}
function _rlglInitGraphics($offsetX,$offsetY,$width,$height) {
 $offsetX = $offsetX|0;
 $offsetY = $offsetY|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[13472>>2] = $width;
 HEAP32[13480>>2] = $height;
 $0 = (($offsetX|0) / 2)&-1;
 $1 = (($offsetY|0) / 2)&-1;
 $2 = (($width) - ($offsetX))|0;
 $3 = (($height) - ($offsetY))|0;
 _glViewport(($0|0),($1|0),($2|0),($3|0));
 _glClearColor(0.0,0.0,0.0,1.0);
 _glClear(16640);
 _glEnable(2929);
 _glDepthFunc(515);
 _glEnable(3042);
 _glBlendFunc(770,771);
 _rlMatrixMode(0);
 _rlLoadIdentity();
 $4 = (+($2|0));
 $5 = (+($3|0));
 _rlOrtho(0.0,$4,$5,0.0,0.0,1.0);
 _rlMatrixMode(1);
 _rlLoadIdentity();
 _glEnable(2884);
 _TraceLog(0,13896,$vararg_buffer);
 STACKTOP = sp;return;
}
function _LoadShaderProgram($vShaderStr,$fShaderStr) {
 $vShaderStr = $vShaderStr|0;
 $fShaderStr = $fShaderStr|0;
 var $$alloca_mul = 0, $$alloca_mul25 = 0, $$alloca_mul27 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $length = 0, $length2 = 0, $length4 = 0, $maxLength = 0, $maxLength1 = 0, $maxLength3 = 0, $pfs = 0, $program$0 = 0, $pvs = 0, $success = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer22 = sp;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer16 = sp + 8|0;
 $vararg_buffer13 = sp + 16|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer4 = sp + 40|0;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 56|0;
 $pvs = sp + 100|0;
 $pfs = sp + 68|0;
 $success = sp + 72|0;
 $maxLength = sp + 76|0;
 $length = sp + 80|0;
 $maxLength1 = sp + 84|0;
 $length2 = sp + 88|0;
 $maxLength3 = sp + 92|0;
 $length4 = sp + 96|0;
 $0 = (_glCreateShader(35633)|0);
 $1 = (_glCreateShader(35632)|0);
 HEAP32[$pvs>>2] = $vShaderStr;
 HEAP32[$pfs>>2] = $fShaderStr;
 _glShaderSource(($0|0),1,($pvs|0),(0|0));
 _glShaderSource(($1|0),1,($pfs|0),(0|0));
 HEAP32[$success>>2] = 0;
 _glCompileShader(($0|0));
 _glGetShaderiv(($0|0),35713,($success|0));
 $2 = HEAP32[$success>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  HEAP32[$vararg_buffer4>>2] = $0;
  _TraceLog(0,14128,$vararg_buffer4);
 } else {
  HEAP32[$vararg_buffer>>2] = $0;
  _TraceLog(2,14064,$vararg_buffer);
  HEAP32[$maxLength>>2] = 0;
  _glGetShaderiv(($0|0),35716,($maxLength|0));
  $4 = HEAP32[$maxLength>>2]|0;
  $5 = (_llvm_stacksave()|0);
  $$alloca_mul = $4;
  $6 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
  $7 = HEAP32[$maxLength>>2]|0;
  _glGetShaderInfoLog(($0|0),($7|0),($length|0),($6|0));
  HEAP32[$vararg_buffer1>>2] = $6;
  _TraceLog(0,14120,$vararg_buffer1);
  _llvm_stackrestore(($5|0));
 }
 _glCompileShader(($1|0));
 _glGetShaderiv(($1|0),35713,($success|0));
 $8 = HEAP32[$success>>2]|0;
 $9 = ($8|0)==(1);
 if ($9) {
  HEAP32[$vararg_buffer13>>2] = $1;
  _TraceLog(0,14240,$vararg_buffer13);
 } else {
  HEAP32[$vararg_buffer7>>2] = $1;
  _TraceLog(2,14184,$vararg_buffer7);
  HEAP32[$maxLength1>>2] = 0;
  _glGetShaderiv(($1|0),35716,($maxLength1|0));
  $10 = HEAP32[$maxLength1>>2]|0;
  $11 = (_llvm_stacksave()|0);
  $$alloca_mul25 = $10;
  $12 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul25)|0)+15)&-16)|0;;
  $13 = HEAP32[$maxLength1>>2]|0;
  _glGetShaderInfoLog(($1|0),($13|0),($length2|0),($12|0));
  HEAP32[$vararg_buffer10>>2] = $12;
  _TraceLog(0,14120,$vararg_buffer10);
  _llvm_stackrestore(($11|0));
 }
 $14 = (_glCreateProgram()|0);
 _glAttachShader(($14|0),($0|0));
 _glAttachShader(($14|0),($1|0));
 _glLinkProgram(($14|0));
 _glGetProgramiv(($14|0),35714,($success|0));
 $15 = HEAP32[$success>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$vararg_buffer16>>2] = $14;
  _TraceLog(2,14296,$vararg_buffer16);
  HEAP32[$maxLength3>>2] = 0;
  _glGetProgramiv(($14|0),35716,($maxLength3|0));
  $17 = HEAP32[$maxLength3>>2]|0;
  $18 = (_llvm_stacksave()|0);
  $$alloca_mul27 = $17;
  $19 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul27)|0)+15)&-16)|0;;
  $20 = HEAP32[$maxLength3>>2]|0;
  _glGetProgramInfoLog(($14|0),($20|0),($length4|0),($19|0));
  HEAP32[$vararg_buffer19>>2] = $19;
  _TraceLog(0,14120,$vararg_buffer19);
  _glDeleteProgram(($14|0));
  _llvm_stackrestore(($18|0));
  $program$0 = 0;
  _glDeleteShader(($0|0));
  _glDeleteShader(($1|0));
  STACKTOP = sp;return ($program$0|0);
 } else {
  HEAP32[$vararg_buffer22>>2] = $14;
  _TraceLog(0,14344,$vararg_buffer22);
  $program$0 = $14;
  _glDeleteShader(($0|0));
  _glDeleteShader(($1|0));
  STACKTOP = sp;return ($program$0|0);
 }
 return (0)|0;
}
function _IsPosproShaderEnabled() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[14392>>2]|0;
 return ($0|0);
}
function _DrawCircleV($center,$radius,$color) {
 $center = $center|0;
 $radius = +$radius;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _rlBegin(1);
 $0 = HEAP8[$color>>0]|0;
 $1 = ((($color)) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ((($color)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ((($color)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = +HEAPF32[$center>>2];
 $8 = (~~(($7)));
 $9 = ((($center)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = (~~(($10)));
 $12 = $7;
 $13 = $radius;
 $14 = $10;
 $15 = +HEAPF32[$center>>2];
 $16 = $15;
 $17 = +HEAPF32[$9>>2];
 $18 = $17;
 $i$01 = 0;
 while(1) {
  _rlColor4ub($0,$2,$4,$6);
  _rlVertex2i($8,$11);
  $19 = (+($i$01|0));
  $20 = $19 * 0.017453292519943295;
  $21 = (+Math_sin((+$20)));
  $22 = $13 * $21;
  $23 = $12 + $22;
  $24 = $23;
  $25 = (+Math_cos((+$20)));
  $26 = $13 * $25;
  $27 = $14 + $26;
  $28 = $27;
  _rlVertex2f($24,$28);
  $29 = (($i$01) + 10)|0;
  $30 = (+($29|0));
  $31 = $30 * 0.017453292519943295;
  $32 = (+Math_sin((+$31)));
  $33 = $13 * $32;
  $34 = $16 + $33;
  $35 = $34;
  $36 = (+Math_cos((+$31)));
  $37 = $13 * $36;
  $38 = $18 + $37;
  $39 = $38;
  _rlVertex2f($35,$39);
  $40 = ($29|0)<(360);
  if ($40) {
   $i$01 = $29;
  } else {
   break;
  }
 }
 _rlEnd();
 return;
}
function _DrawRectangle($posX,$posY,$width,$height,$color) {
 $posX = $posX|0;
 $posY = $posY|0;
 $width = $width|0;
 $height = $height|0;
 $color = $color|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $color$byval_copy = 0, $position = 0, $position$byval_copy = 0, $size = 0, $size$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $color$byval_copy = sp + 32|0;
 $size$byval_copy = sp;
 $position$byval_copy = sp + 8|0;
 $position = sp + 16|0;
 $size = sp + 24|0;
 $0 = (+($posX|0));
 HEAPF32[$position>>2] = $0;
 $1 = ((($position)) + 4|0);
 $2 = (+($posY|0));
 HEAPF32[$1>>2] = $2;
 $3 = (+($width|0));
 HEAPF32[$size>>2] = $3;
 $4 = ((($size)) + 4|0);
 $5 = (+($height|0));
 HEAPF32[$4>>2] = $5;
 ;HEAP32[$position$byval_copy>>2]=HEAP32[$position>>2]|0;HEAP32[$position$byval_copy+4>>2]=HEAP32[$position+4>>2]|0;
 ;HEAP32[$size$byval_copy>>2]=HEAP32[$size>>2]|0;HEAP32[$size$byval_copy+4>>2]=HEAP32[$size+4>>2]|0;
 ;HEAP8[$color$byval_copy>>0]=HEAP8[$color>>0]|0;HEAP8[$color$byval_copy+1>>0]=HEAP8[$color+1>>0]|0;HEAP8[$color$byval_copy+2>>0]=HEAP8[$color+2>>0]|0;HEAP8[$color$byval_copy+3>>0]=HEAP8[$color+3>>0]|0;
 _DrawRectangleV($position$byval_copy,$size$byval_copy,$color$byval_copy);
 STACKTOP = sp;return;
}
function _DrawRectangleV($position,$size,$color) {
 $position = $position|0;
 $size = $size|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_rlGetVersion()|0);
 $1 = ($0|0)==(1);
 if ($1) {
  _rlBegin(1);
  $2 = HEAP8[$color>>0]|0;
  $3 = ((($color)) + 1|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ((($color)) + 2|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($color)) + 3|0);
  $8 = HEAP8[$7>>0]|0;
  _rlColor4ub($2,$4,$6,$8);
  $9 = +HEAPF32[$position>>2];
  $10 = (~~(($9)));
  $11 = ((($position)) + 4|0);
  $12 = +HEAPF32[$11>>2];
  $13 = (~~(($12)));
  _rlVertex2i($10,$13);
  $14 = +HEAPF32[$position>>2];
  $15 = (~~(($14)));
  $16 = +HEAPF32[$11>>2];
  $17 = ((($size)) + 4|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $16 + $18;
  $20 = (~~(($19)));
  _rlVertex2i($15,$20);
  $21 = +HEAPF32[$position>>2];
  $22 = +HEAPF32[$size>>2];
  $23 = $21 + $22;
  $24 = (~~(($23)));
  $25 = +HEAPF32[$11>>2];
  $26 = +HEAPF32[$17>>2];
  $27 = $25 + $26;
  $28 = (~~(($27)));
  _rlVertex2i($24,$28);
  $29 = +HEAPF32[$position>>2];
  $30 = (~~(($29)));
  $31 = +HEAPF32[$11>>2];
  $32 = (~~(($31)));
  _rlVertex2i($30,$32);
  $33 = +HEAPF32[$position>>2];
  $34 = +HEAPF32[$size>>2];
  $35 = $33 + $34;
  $36 = (~~(($35)));
  $37 = +HEAPF32[$11>>2];
  $38 = +HEAPF32[$17>>2];
  $39 = $37 + $38;
  $40 = (~~(($39)));
  _rlVertex2i($36,$40);
  $41 = +HEAPF32[$position>>2];
  $42 = +HEAPF32[$size>>2];
  $43 = $41 + $42;
  $44 = (~~(($43)));
  $45 = +HEAPF32[$11>>2];
  $46 = (~~(($45)));
  _rlVertex2i($44,$46);
  _rlEnd();
  return;
 }
 $47 = (_rlGetVersion()|0);
 $48 = ($47|0)==(2);
 if (!($48)) {
  $49 = (_rlGetVersion()|0);
  $50 = ($49|0)==(3);
  if (!($50)) {
   return;
  }
 }
 $51 = HEAP32[8800>>2]|0;
 _rlEnableTexture($51);
 _rlBegin(2);
 $52 = HEAP8[$color>>0]|0;
 $53 = ((($color)) + 1|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = ((($color)) + 2|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = ((($color)) + 3|0);
 $58 = HEAP8[$57>>0]|0;
 _rlColor4ub($52,$54,$56,$58);
 _rlTexCoord2f(0.0,0.0);
 $59 = +HEAPF32[$position>>2];
 $60 = ((($position)) + 4|0);
 $61 = +HEAPF32[$60>>2];
 _rlVertex2f($59,$61);
 _rlTexCoord2f(0.0,1.0);
 $62 = +HEAPF32[$position>>2];
 $63 = +HEAPF32[$60>>2];
 $64 = ((($size)) + 4|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $63 + $65;
 _rlVertex2f($62,$66);
 _rlTexCoord2f(1.0,1.0);
 $67 = +HEAPF32[$position>>2];
 $68 = +HEAPF32[$size>>2];
 $69 = $67 + $68;
 $70 = +HEAPF32[$60>>2];
 $71 = +HEAPF32[$64>>2];
 $72 = $70 + $71;
 _rlVertex2f($69,$72);
 _rlTexCoord2f(1.0,0.0);
 $73 = +HEAPF32[$position>>2];
 $74 = +HEAPF32[$size>>2];
 $75 = $73 + $74;
 $76 = +HEAPF32[$60>>2];
 _rlVertex2f($75,$76);
 _rlEnd();
 return;
}
function _DrawRectangleRec($rec,$color) {
 $rec = $rec|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $color$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $color$byval_copy = sp;
 $0 = HEAP32[$rec>>2]|0;
 $1 = ((($rec)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($rec)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($rec)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 ;HEAP8[$color$byval_copy>>0]=HEAP8[$color>>0]|0;HEAP8[$color$byval_copy+1>>0]=HEAP8[$color+1>>0]|0;HEAP8[$color$byval_copy+2>>0]=HEAP8[$color+2>>0]|0;HEAP8[$color$byval_copy+3>>0]=HEAP8[$color+3>>0]|0;
 _DrawRectangle($0,$2,$4,$6,$color$byval_copy);
 STACKTOP = sp;return;
}
function _CheckCollisionPointRec($point,$rec) {
 $point = $point|0;
 $rec = $rec|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0;
 var $collision$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$point>>2];
 $1 = HEAP32[$rec>>2]|0;
 $2 = (+($1|0));
 $3 = !($0 >= $2);
 if ($3) {
  $collision$0 = 0;
 } else {
  $4 = ((($rec)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($1))|0;
  $7 = (+($6|0));
  $8 = !($0 <= $7);
  if ($8) {
   $collision$0 = 0;
  } else {
   $9 = ((($point)) + 4|0);
   $10 = +HEAPF32[$9>>2];
   $11 = ((($rec)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (+($12|0));
   $14 = !($10 >= $13);
   if ($14) {
    $collision$0 = 0;
   } else {
    $15 = ((($rec)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + ($12))|0;
    $18 = (+($17|0));
    $19 = !($10 <= $18);
    if ($19) {
     $collision$0 = 0;
    } else {
     $collision$0 = 1;
    }
   }
  }
 }
 return ($collision$0|0);
}
function _CheckCollisionRecs($rec1,$rec2) {
 $rec1 = $rec1|0;
 $rec2 = $rec2|0;
 var $$ = 0, $$neg4 = 0, $$neg7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos1 = 0, $neg = 0, $neg2 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$rec1>>2]|0;
 $1 = ((($rec1)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2|0) / 2)&-1;
 $4 = HEAP32[$rec2>>2]|0;
 $5 = ((($rec2)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6|0) / 2)&-1;
 $$neg4 = (($3) + ($0))|0;
 $8 = (($$neg4) - ($4))|0;
 $9 = (($8) - ($7))|0;
 $ispos = ($9|0)>(-1);
 $neg = (0 - ($9))|0;
 $10 = $ispos ? $9 : $neg;
 $11 = ((($rec1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($rec1)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14|0) / 2)&-1;
 $16 = ((($rec2)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($rec2)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19|0) / 2)&-1;
 $$neg7 = (($15) + ($12))|0;
 $21 = (($$neg7) - ($17))|0;
 $22 = (($21) - ($20))|0;
 $23 = (($7) + ($3))|0;
 $24 = ($10|0)>($23|0);
 if ($24) {
  return 0;
 } else {
  $ispos1 = ($22|0)>(-1);
  $neg2 = (0 - ($22))|0;
  $25 = $ispos1 ? $22 : $neg2;
  $26 = (($20) + ($15))|0;
  $not$ = ($25|0)<=($26|0);
  $$ = $not$&1;
  return ($$|0);
 }
 return (0)|0;
}
function _stbi_load($filename,$x,$y,$comp,$req_comp) {
 $filename = $filename|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__fopen($filename)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _stbi__err(14416);
  $$0 = 0;
  return ($$0|0);
 } else {
  $2 = (_stbi_load_from_file($0,$x,$y,$comp,$req_comp)|0);
  (_fclose(($0|0))|0);
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi_load_from_file($f,$x,$y,$comp,$req_comp) {
 $f = $f|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $s = sp;
 _stbi__start_file($s,$f);
 $0 = (_stbi__load_flip($s,$x,$y,$comp,$req_comp)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return ($0|0);
 }
 $2 = ((($s)) + 172|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($s)) + 168|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($7) - ($6))|0;
 (_fseek(($f|0),($8|0),1)|0);
 STACKTOP = sp;return ($0|0);
}
function _stbi_zlib_decode_malloc_guesssize_headerflag($buffer,$len,$initial_size,$outlen,$parse_header) {
 $buffer = $buffer|0;
 $len = $len|0;
 $initial_size = $initial_size|0;
 $outlen = $outlen|0;
 $parse_header = $parse_header|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4080|0;
 $a = sp;
 $0 = (_stbi__malloc($initial_size)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$a>>2] = $buffer;
 $2 = (($buffer) + ($len)|0);
 $3 = ((($a)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = (_stbi__do_zlib($a,$0,$initial_size,1,$parse_header)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $16 = ((($a)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  _free($17);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($outlen|0)==(0|0);
 if (!($6)) {
  $7 = ((($a)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($a)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $8;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  HEAP32[$outlen>>2] = $13;
 }
 $14 = ((($a)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function _LoadImage($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $image$sroa$0$0 = 0, $image$sroa$0$09 = 0, $image$sroa$12$0 = 0;
 var $image$sroa$12$05 = 0, $image$sroa$12$06 = 0, $image$sroa$15$0 = 0, $image$sroa$15$03 = 0, $image$sroa$15$04 = 0, $image$sroa$17$0 = 0, $image$sroa$17$01 = 0, $image$sroa$17$02 = 0, $image$sroa$9$0 = 0, $image$sroa$9$07 = 0, $image$sroa$9$08 = 0, $imgBpp = 0, $imgHeight = 0, $imgWidth = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $imgWidth = sp + 108|0;
 $imgHeight = sp + 104|0;
 $imgBpp = sp + 100|0;
 $0 = sp + 112|0;
 $1 = sp + 40|0;
 $2 = sp + 20|0;
 $3 = sp + 60|0;
 $4 = sp + 80|0;
 $5 = (_GetExtension($fileName)|0);
 $6 = (_strcmp($5,14448)|0);
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   label = 8;
  } else {
   $8 = (_GetExtension($fileName)|0);
   $9 = (_strcmp($8,14456)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    label = 8;
   } else {
    $11 = (_GetExtension($fileName)|0);
    $12 = (_strcmp($11,14464)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     label = 8;
    } else {
     $14 = (_GetExtension($fileName)|0);
     $15 = (_strcmp($14,14472)|0);
     $16 = ($15|0)==(0);
     if ($16) {
      label = 8;
     } else {
      $17 = (_GetExtension($fileName)|0);
      $18 = (_strcmp($17,14480)|0);
      $19 = ($18|0)==(0);
      if ($19) {
       label = 8;
      } else {
       $20 = (_GetExtension($fileName)|0);
       $21 = (_strcmp($20,14488)|0);
       $22 = ($21|0)==(0);
       if ($22) {
        label = 8;
       } else {
        $23 = (_GetExtension($fileName)|0);
        $24 = (_strcmp($23,14496)|0);
        $25 = ($24|0)==(0);
        if ($25) {
         label = 8;
        } else {
         $31 = (_GetExtension($fileName)|0);
         $32 = (_strcmp($31,14504)|0);
         $33 = ($32|0)==(0);
         if ($33) {
          _LoadDDS($0,$fileName);
          $34 = HEAP32[$0>>2]|0;
          $35 = ((($0)) + 4|0);
          $36 = HEAP32[$35>>2]|0;
          $37 = ((($0)) + 8|0);
          $38 = HEAP32[$37>>2]|0;
          $39 = ((($0)) + 12|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = ((($0)) + 16|0);
          $42 = HEAP32[$41>>2]|0;
          $image$sroa$0$0 = $34;$image$sroa$12$0 = $38;$image$sroa$15$0 = $40;$image$sroa$17$0 = $42;$image$sroa$9$0 = $36;
          label = 22;
          break;
         }
         $43 = (_GetExtension($fileName)|0);
         $44 = (_strcmp($43,14512)|0);
         $45 = ($44|0)==(0);
         if ($45) {
          _LoadPKM($1,$fileName);
          $46 = HEAP32[$1>>2]|0;
          $47 = ((($1)) + 4|0);
          $48 = HEAP32[$47>>2]|0;
          $49 = ((($1)) + 8|0);
          $50 = HEAP32[$49>>2]|0;
          $51 = ((($1)) + 12|0);
          $52 = HEAP32[$51>>2]|0;
          $53 = ((($1)) + 16|0);
          $54 = HEAP32[$53>>2]|0;
          $image$sroa$0$0 = $46;$image$sroa$12$0 = $50;$image$sroa$15$0 = $52;$image$sroa$17$0 = $54;$image$sroa$9$0 = $48;
          label = 22;
          break;
         }
         $55 = (_GetExtension($fileName)|0);
         $56 = (_strcmp($55,14520)|0);
         $57 = ($56|0)==(0);
         if ($57) {
          _LoadKTX($2,$fileName);
          $58 = HEAP32[$2>>2]|0;
          $59 = ((($2)) + 4|0);
          $60 = HEAP32[$59>>2]|0;
          $61 = ((($2)) + 8|0);
          $62 = HEAP32[$61>>2]|0;
          $63 = ((($2)) + 12|0);
          $64 = HEAP32[$63>>2]|0;
          $65 = ((($2)) + 16|0);
          $66 = HEAP32[$65>>2]|0;
          $image$sroa$0$0 = $58;$image$sroa$12$0 = $62;$image$sroa$15$0 = $64;$image$sroa$17$0 = $66;$image$sroa$9$0 = $60;
          label = 22;
          break;
         }
         $67 = (_GetExtension($fileName)|0);
         $68 = (_strcmp($67,14528)|0);
         $69 = ($68|0)==(0);
         if ($69) {
          _LoadPVR($3,$fileName);
          $70 = HEAP32[$3>>2]|0;
          $71 = ((($3)) + 4|0);
          $72 = HEAP32[$71>>2]|0;
          $73 = ((($3)) + 8|0);
          $74 = HEAP32[$73>>2]|0;
          $75 = ((($3)) + 12|0);
          $76 = HEAP32[$75>>2]|0;
          $77 = ((($3)) + 16|0);
          $78 = HEAP32[$77>>2]|0;
          $image$sroa$0$0 = $70;$image$sroa$12$0 = $74;$image$sroa$15$0 = $76;$image$sroa$17$0 = $78;$image$sroa$9$0 = $72;
          label = 22;
          break;
         }
         $79 = (_GetExtension($fileName)|0);
         $80 = (_strcmp($79,14536)|0);
         $81 = ($80|0)==(0);
         if ($81) {
          _LoadASTC($4,$fileName);
          $82 = HEAP32[$4>>2]|0;
          $83 = ((($4)) + 4|0);
          $84 = HEAP32[$83>>2]|0;
          $85 = ((($4)) + 8|0);
          $86 = HEAP32[$85>>2]|0;
          $87 = ((($4)) + 12|0);
          $88 = HEAP32[$87>>2]|0;
          $89 = ((($4)) + 16|0);
          $90 = HEAP32[$89>>2]|0;
          $image$sroa$0$0 = $82;$image$sroa$12$0 = $86;$image$sroa$15$0 = $88;$image$sroa$17$0 = $90;$image$sroa$9$0 = $84;
          label = 22;
         } else {
          $image$sroa$12$06 = 0;$image$sroa$15$04 = 0;$image$sroa$17$02 = 0;$image$sroa$9$08 = 0;
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 8) {
   HEAP32[$imgWidth>>2] = 0;
   HEAP32[$imgHeight>>2] = 0;
   HEAP32[$imgBpp>>2] = 0;
   $26 = (_stbi_load($fileName,$imgWidth,$imgHeight,$imgBpp,0)|0);
   $27 = HEAP32[$imgWidth>>2]|0;
   $28 = HEAP32[$imgHeight>>2]|0;
   $29 = HEAP32[$imgBpp>>2]|0;
   if ((($29|0) == 2)) {
    $image$sroa$0$0 = $26;$image$sroa$12$0 = $28;$image$sroa$15$0 = 1;$image$sroa$17$0 = 2;$image$sroa$9$0 = $27;
    label = 22;
    break;
   } else if ((($29|0) == 1)) {
    $image$sroa$0$0 = $26;$image$sroa$12$0 = $28;$image$sroa$15$0 = 1;$image$sroa$17$0 = 1;$image$sroa$9$0 = $27;
    label = 22;
    break;
   } else if ((($29|0) == 3)) {
    $image$sroa$0$0 = $26;$image$sroa$12$0 = $28;$image$sroa$15$0 = 1;$image$sroa$17$0 = 4;$image$sroa$9$0 = $27;
    label = 22;
    break;
   } else {
    $30 = ($29|0)==(4);
    $$ = $30 ? 7 : 0;
    $image$sroa$0$0 = $26;$image$sroa$12$0 = $28;$image$sroa$15$0 = 1;$image$sroa$17$0 = $$;$image$sroa$9$0 = $27;
    label = 22;
    break;
   }
  }
 } while(0);
 if ((label|0) == 22) {
  $91 = ($image$sroa$0$0|0)==(0|0);
  if ($91) {
   $image$sroa$12$06 = $image$sroa$12$0;$image$sroa$15$04 = $image$sroa$15$0;$image$sroa$17$02 = $image$sroa$17$0;$image$sroa$9$08 = $image$sroa$9$0;
  } else {
   HEAP32[$vararg_buffer>>2] = $fileName;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $image$sroa$9$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $image$sroa$12$0;
   _TraceLog(0,14544,$vararg_buffer);
   $image$sroa$0$09 = $image$sroa$0$0;$image$sroa$12$05 = $image$sroa$12$0;$image$sroa$15$03 = $image$sroa$15$0;$image$sroa$17$01 = $image$sroa$17$0;$image$sroa$9$07 = $image$sroa$9$0;
   HEAP32[$agg$result>>2] = $image$sroa$0$09;
   $92 = ((($agg$result)) + 4|0);
   HEAP32[$92>>2] = $image$sroa$9$07;
   $93 = ((($agg$result)) + 8|0);
   HEAP32[$93>>2] = $image$sroa$12$05;
   $94 = ((($agg$result)) + 12|0);
   HEAP32[$94>>2] = $image$sroa$15$03;
   $95 = ((($agg$result)) + 16|0);
   HEAP32[$95>>2] = $image$sroa$17$01;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$vararg_buffer3>>2] = $fileName;
 _TraceLog(2,14584,$vararg_buffer3);
 $image$sroa$0$09 = 0;$image$sroa$12$05 = $image$sroa$12$06;$image$sroa$15$03 = $image$sroa$15$04;$image$sroa$17$01 = $image$sroa$17$02;$image$sroa$9$07 = $image$sroa$9$08;
 HEAP32[$agg$result>>2] = $image$sroa$0$09;
 $92 = ((($agg$result)) + 4|0);
 HEAP32[$92>>2] = $image$sroa$9$07;
 $93 = ((($agg$result)) + 8|0);
 HEAP32[$93>>2] = $image$sroa$12$05;
 $94 = ((($agg$result)) + 12|0);
 HEAP32[$94>>2] = $image$sroa$15$03;
 $95 = ((($agg$result)) + 16|0);
 HEAP32[$95>>2] = $image$sroa$17$01;
 STACKTOP = sp;return;
}
function _LoadImageEx($agg$result,$pixels,$width,$height) {
 $agg$result = $agg$result|0;
 $pixels = $pixels|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $k$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $width << 2;
 $1 = Math_imul($0, $height)|0;
 $2 = (_malloc($1)|0);
 $3 = ($1|0)>(0);
 if ($3) {
  $4 = Math_imul($height, $width)|0;
  $5 = $4 << 2;
  $6 = (($5) + -1)|0;
  $7 = $6 >>> 2;
  $i$02 = 0;$k$01 = 0;
  while(1) {
   $8 = (($pixels) + ($k$01<<2)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = (($2) + ($i$02)|0);
   HEAP8[$10>>0] = $9;
   $11 = (((($pixels) + ($k$01<<2)|0)) + 1|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $i$02 | 1;
   $14 = (($2) + ($13)|0);
   HEAP8[$14>>0] = $12;
   $15 = (((($pixels) + ($k$01<<2)|0)) + 2|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $i$02 | 2;
   $18 = (($2) + ($17)|0);
   HEAP8[$18>>0] = $16;
   $19 = (((($pixels) + ($k$01<<2)|0)) + 3|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $i$02 | 3;
   $22 = (($2) + ($21)|0);
   HEAP8[$22>>0] = $20;
   $23 = (($k$01) + 1)|0;
   $24 = (($i$02) + 4)|0;
   $exitcond = ($k$01|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $i$02 = $24;$k$01 = $23;
   }
  }
 }
 HEAP32[$agg$result>>2] = $2;
 $25 = ((($agg$result)) + 4|0);
 HEAP32[$25>>2] = $width;
 $26 = ((($agg$result)) + 8|0);
 HEAP32[$26>>2] = $height;
 $27 = ((($agg$result)) + 12|0);
 HEAP32[$27>>2] = 1;
 $28 = ((($agg$result)) + 16|0);
 HEAP32[$28>>2] = 7;
 return;
}
function _LoadTexture($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $image = 0, $image$byval_copy1 = 0, $texture$sroa$0$0 = 0, $texture$sroa$3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $image$byval_copy1 = sp + 64|0;
 $vararg_buffer = sp;
 $texture$sroa$3 = sp + 8|0;
 $image = sp + 24|0;
 $0 = sp + 44|0;
 _LoadImage($image,$fileName);
 $1 = HEAP32[$image>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _TraceLog(2,14640,$vararg_buffer);
  $texture$sroa$0$0 = 0;
 } else {
  ;HEAP32[$image$byval_copy1>>2]=HEAP32[$image>>2]|0;HEAP32[$image$byval_copy1+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy1+8>>2]=HEAP32[$image+8>>2]|0;HEAP32[$image$byval_copy1+12>>2]=HEAP32[$image+12>>2]|0;HEAP32[$image$byval_copy1+16>>2]=HEAP32[$image+16>>2]|0;
  _LoadTextureFromImage($0,$image$byval_copy1);
  $3 = HEAP32[$0>>2]|0;
  $4 = ((($0)) + 4|0);
  ;HEAP32[$texture$sroa$3>>2]=HEAP32[$4>>2]|0;HEAP32[$texture$sroa$3+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$texture$sroa$3+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$texture$sroa$3+12>>2]=HEAP32[$4+12>>2]|0;
  ;HEAP32[$image$byval_copy1>>2]=HEAP32[$image>>2]|0;HEAP32[$image$byval_copy1+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy1+8>>2]=HEAP32[$image+8>>2]|0;HEAP32[$image$byval_copy1+12>>2]=HEAP32[$image+12>>2]|0;HEAP32[$image$byval_copy1+16>>2]=HEAP32[$image+16>>2]|0;
  _UnloadImage($image$byval_copy1);
  $texture$sroa$0$0 = $3;
 }
 HEAP32[$agg$result>>2] = $texture$sroa$0$0;
 $5 = ((($agg$result)) + 4|0);
 ;HEAP32[$5>>2]=HEAP32[$texture$sroa$3>>2]|0;HEAP32[$5+4>>2]=HEAP32[$texture$sroa$3+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$texture$sroa$3+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$texture$sroa$3+12>>2]|0;
 STACKTOP = sp;return;
}
function _LoadTextureFromImage($agg$result,$image) {
 $agg$result = $agg$result|0;
 $image = $image|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$image>>2]|0;
 $1 = ((($image)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($image)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($image)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($image)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_rlglLoadTexture($0,$2,$4,$6,$8)|0);
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$3>>2]|0;
 $12 = HEAP32[$7>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[$agg$result>>2] = $9;
 $14 = ((($agg$result)) + 4|0);
 HEAP32[$14>>2] = $10;
 $15 = ((($agg$result)) + 8|0);
 HEAP32[$15>>2] = $11;
 $16 = ((($agg$result)) + 12|0);
 HEAP32[$16>>2] = $12;
 $17 = ((($agg$result)) + 16|0);
 HEAP32[$17>>2] = $13;
 return;
}
function _UnloadImage($image) {
 $image = $image|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$image>>2]|0;
 _free($0);
 return;
}
function _UnloadTexture($texture) {
 $texture = $texture|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$texture>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 _rlDeleteTextures($0);
 $2 = HEAP32[$texture>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 _TraceLog(0,14672,$vararg_buffer);
 STACKTOP = sp;return;
}
function _GetImageData($image) {
 $image = $image|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $i$01 = 0, $k$02 = 0, $k$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($image)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($image)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1 << 2;
 $5 = Math_imul($4, $3)|0;
 $6 = (_malloc($5)|0);
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = Math_imul($8, $7)|0;
 $10 = ($9|0)>(0);
 if (!($10)) {
  STACKTOP = sp;return ($6|0);
 }
 $11 = ((($image)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$2>>2]|0;
 $15 = Math_imul($14, $13)|0;
 $16 = HEAP32[$image>>2]|0;
 $i$01 = 0;$k$02 = 0;
 while(1) {
  switch ($12|0) {
  case 2:  {
   $28 = (($16) + ($k$02)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = (($6) + ($i$01<<2)|0);
   HEAP8[$30>>0] = $29;
   $31 = (($16) + ($k$02)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = (((($6) + ($i$01<<2)|0)) + 1|0);
   HEAP8[$33>>0] = $32;
   $34 = (($16) + ($k$02)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = (((($6) + ($i$01<<2)|0)) + 2|0);
   HEAP8[$36>>0] = $35;
   $37 = (($k$02) + 1)|0;
   $38 = (($16) + ($37)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = (((($6) + ($i$01<<2)|0)) + 3|0);
   HEAP8[$40>>0] = $39;
   $41 = (($k$02) + 2)|0;
   $k$1 = $41;
   break;
  }
  case 3:  {
   $67 = (($16) + ($k$02<<1)|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68&65535;
   $70 = $69 >>> 11;
   $71 = (+($70|0));
   $72 = $71 * 8.0;
   $73 = (~~(($72))&255);
   $74 = (($6) + ($i$01<<2)|0);
   HEAP8[$74>>0] = $73;
   $75 = $69 >>> 5;
   $76 = $75 & 63;
   $77 = (+($76|0));
   $78 = $77 * 4.0;
   $79 = (~~(($78))&255);
   $80 = (((($6) + ($i$01<<2)|0)) + 1|0);
   HEAP8[$80>>0] = $79;
   $81 = $69 & 31;
   $82 = (+($81|0));
   $83 = $82 * 8.0;
   $84 = (~~(($83))&255);
   $85 = (((($6) + ($i$01<<2)|0)) + 2|0);
   HEAP8[$85>>0] = $84;
   $86 = (((($6) + ($i$01<<2)|0)) + 3|0);
   HEAP8[$86>>0] = -1;
   $87 = (($k$02) + 1)|0;
   $k$1 = $87;
   break;
  }
  case 4:  {
   $130 = (($16) + ($k$02)|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = (($6) + ($i$01<<2)|0);
   HEAP8[$132>>0] = $131;
   $133 = (($k$02) + 1)|0;
   $134 = (($16) + ($133)|0);
   $135 = HEAP8[$134>>0]|0;
   $136 = (((($6) + ($i$01<<2)|0)) + 1|0);
   HEAP8[$136>>0] = $135;
   $137 = (($k$02) + 2)|0;
   $138 = (($16) + ($137)|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = (((($6) + ($i$01<<2)|0)) + 2|0);
   HEAP8[$140>>0] = $139;
   $141 = (((($6) + ($i$01<<2)|0)) + 3|0);
   HEAP8[$141>>0] = -1;
   $142 = (($k$02) + 3)|0;
   $k$1 = $142;
   break;
  }
  case 6:  {
   $88 = (($16) + ($k$02<<1)|0);
   $89 = HEAP16[$88>>1]|0;
   $90 = $89&65535;
   $91 = $90 >>> 12;
   $92 = (+($91|0));
   $93 = $92 * 17.0;
   $94 = (~~(($93))&255);
   $95 = (($6) + ($i$01<<2)|0);
   HEAP8[$95>>0] = $94;
   $96 = $90 >>> 8;
   $97 = $96 & 15;
   $98 = (+($97|0));
   $99 = $98 * 17.0;
   $100 = (~~(($99))&255);
   $101 = (((($6) + ($i$01<<2)|0)) + 1|0);
   HEAP8[$101>>0] = $100;
   $102 = $90 >>> 4;
   $103 = $102 & 15;
   $104 = (+($103|0));
   $105 = $104 * 17.0;
   $106 = (~~(($105))&255);
   $107 = (((($6) + ($i$01<<2)|0)) + 2|0);
   HEAP8[$107>>0] = $106;
   $108 = $90 & 15;
   $109 = (+($108|0));
   $110 = $109 * 17.0;
   $111 = (~~(($110))&255);
   $112 = (((($6) + ($i$01<<2)|0)) + 3|0);
   HEAP8[$112>>0] = $111;
   $113 = (($k$02) + 1)|0;
   $k$1 = $113;
   break;
  }
  case 7:  {
   $114 = (($16) + ($k$02)|0);
   $115 = HEAP8[$114>>0]|0;
   $116 = (($6) + ($i$01<<2)|0);
   HEAP8[$116>>0] = $115;
   $117 = (($k$02) + 1)|0;
   $118 = (($16) + ($117)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = (((($6) + ($i$01<<2)|0)) + 1|0);
   HEAP8[$120>>0] = $119;
   $121 = (($k$02) + 2)|0;
   $122 = (($16) + ($121)|0);
   $123 = HEAP8[$122>>0]|0;
   $124 = (((($6) + ($i$01<<2)|0)) + 2|0);
   HEAP8[$124>>0] = $123;
   $125 = (($k$02) + 3)|0;
   $126 = (($16) + ($125)|0);
   $127 = HEAP8[$126>>0]|0;
   $128 = (((($6) + ($i$01<<2)|0)) + 3|0);
   HEAP8[$128>>0] = $127;
   $129 = (($k$02) + 4)|0;
   $k$1 = $129;
   break;
  }
  case 5:  {
   $42 = (($16) + ($k$02<<1)|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $43&65535;
   $45 = $44 >>> 11;
   $46 = (+($45|0));
   $47 = $46 * 8.0;
   $48 = (~~(($47))&255);
   $49 = (($6) + ($i$01<<2)|0);
   HEAP8[$49>>0] = $48;
   $50 = $44 >>> 6;
   $51 = $50 & 31;
   $52 = (+($51|0));
   $53 = $52 * 8.0;
   $54 = (~~(($53))&255);
   $55 = (((($6) + ($i$01<<2)|0)) + 1|0);
   HEAP8[$55>>0] = $54;
   $56 = $44 >>> 1;
   $57 = $56 & 31;
   $58 = (+($57|0));
   $59 = $58 * 8.0;
   $60 = (~~(($59))&255);
   $61 = (((($6) + ($i$01<<2)|0)) + 2|0);
   HEAP8[$61>>0] = $60;
   $62 = $44 & 1;
   $63 = (0 - ($62))|0;
   $64 = $63&255;
   $65 = (((($6) + ($i$01<<2)|0)) + 3|0);
   HEAP8[$65>>0] = $64;
   $66 = (($k$02) + 1)|0;
   $k$1 = $66;
   break;
  }
  case 1:  {
   $17 = (($16) + ($k$02)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = (($6) + ($i$01<<2)|0);
   HEAP8[$19>>0] = $18;
   $20 = (($16) + ($k$02)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = (((($6) + ($i$01<<2)|0)) + 1|0);
   HEAP8[$22>>0] = $21;
   $23 = (($16) + ($k$02)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = (((($6) + ($i$01<<2)|0)) + 2|0);
   HEAP8[$25>>0] = $24;
   $26 = (((($6) + ($i$01<<2)|0)) + 3|0);
   HEAP8[$26>>0] = -1;
   $27 = (($k$02) + 1)|0;
   $k$1 = $27;
   break;
  }
  default: {
   _TraceLog(2,14728,$vararg_buffer);
   $k$1 = $k$02;
  }
  }
  $143 = (($i$01) + 1)|0;
  $144 = ($143|0)<($15|0);
  if ($144) {
   $i$01 = $143;$k$02 = $k$1;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($6|0);
}
function _ImageFormat($image,$newFormat) {
 $image = $image|0;
 $newFormat = $newFormat|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $i1$019 = 0, $i12$032 = 0;
 var $i13$035 = 0, $i3$025 = 0, $image$byval_copy = 0, $k$018 = 0, $k$120 = 0, $k$223 = 0, $k$326 = 0, $k$429 = 0, $k$634 = 0, $or$cond = 0, $roundf = 0.0, $roundf10 = 0.0, $roundf2 = 0.0, $roundf3 = 0.0, $roundf4 = 0.0, $roundf5 = 0.0, $roundf6 = 0.0, $roundf7 = 0.0, $roundf8 = 0.0, $roundf9 = 0.0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $image$byval_copy = sp + 4|0;
 $vararg_buffer = sp;
 $0 = ((($image)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($newFormat|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ($1|0)<(8);
 $4 = ($newFormat|0)<(8);
 $or$cond = $4 & $3;
 if (!($or$cond)) {
  _TraceLog(2,14776,$vararg_buffer);
  STACKTOP = sp;return;
 }
 ;HEAP32[$image$byval_copy>>2]=HEAP32[$image>>2]|0;HEAP32[$image$byval_copy+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy+8>>2]=HEAP32[$image+8>>2]|0;HEAP32[$image$byval_copy+12>>2]=HEAP32[$image+12>>2]|0;HEAP32[$image$byval_copy+16>>2]=HEAP32[$image+16>>2]|0;
 $5 = (_GetImageData($image$byval_copy)|0);
 $6 = HEAP32[$image>>2]|0;
 _free($6);
 HEAP32[$0>>2] = $newFormat;
 switch ($newFormat|0) {
 case 4:  {
  $124 = ((($image)) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ((($image)) + 8|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($125*3)|0;
  $129 = Math_imul($128, $127)|0;
  $130 = (_malloc($129)|0);
  HEAP32[$image>>2] = $130;
  $131 = HEAP32[$124>>2]|0;
  $132 = HEAP32[$126>>2]|0;
  $133 = ($131*3)|0;
  $134 = Math_imul($133, $132)|0;
  $135 = ($134|0)>(0);
  if ($135) {
   $i3$025 = 0;$k$326 = 0;
   while(1) {
    $136 = (($5) + ($k$326<<2)|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = HEAP32[$image>>2]|0;
    $139 = (($138) + ($i3$025)|0);
    HEAP8[$139>>0] = $137;
    $140 = (((($5) + ($k$326<<2)|0)) + 1|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = (($i3$025) + 1)|0;
    $143 = HEAP32[$image>>2]|0;
    $144 = (($143) + ($142)|0);
    HEAP8[$144>>0] = $141;
    $145 = (((($5) + ($k$326<<2)|0)) + 2|0);
    $146 = HEAP8[$145>>0]|0;
    $147 = (($i3$025) + 2)|0;
    $148 = HEAP32[$image>>2]|0;
    $149 = (($148) + ($147)|0);
    HEAP8[$149>>0] = $146;
    $150 = (($k$326) + 1)|0;
    $151 = (($i3$025) + 3)|0;
    $152 = HEAP32[$124>>2]|0;
    $153 = HEAP32[$126>>2]|0;
    $154 = ($152*3)|0;
    $155 = Math_imul($154, $153)|0;
    $156 = ($151|0)<($155|0);
    if ($156) {
     $i3$025 = $151;$k$326 = $150;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 6:  {
  $207 = ((($image)) + 4|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = ((($image)) + 8|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = $208 << 1;
  $212 = Math_imul($211, $210)|0;
  $213 = (_malloc($212)|0);
  HEAP32[$image>>2] = $213;
  $214 = HEAP32[$207>>2]|0;
  $215 = HEAP32[$209>>2]|0;
  $216 = Math_imul($215, $214)|0;
  $217 = ($216|0)>(0);
  if ($217) {
   $218 = HEAP32[$image>>2]|0;
   $219 = HEAP32[$207>>2]|0;
   $220 = HEAP32[$209>>2]|0;
   $221 = Math_imul($220, $219)|0;
   $i12$032 = 0;
   while(1) {
    $222 = (($5) + ($i12$032<<2)|0);
    $223 = HEAP8[$222>>0]|0;
    $224 = (+($223&255));
    $225 = $224 * 15.0;
    $226 = $225 / 255.0;
    $roundf = (+_roundf($226));
    $227 = (~~(($roundf))&255);
    $228 = (((($5) + ($i12$032<<2)|0)) + 1|0);
    $229 = HEAP8[$228>>0]|0;
    $230 = (+($229&255));
    $231 = $230 * 15.0;
    $232 = $231 / 255.0;
    $roundf2 = (+_roundf($232));
    $233 = (~~(($roundf2))&255);
    $234 = (((($5) + ($i12$032<<2)|0)) + 2|0);
    $235 = HEAP8[$234>>0]|0;
    $236 = (+($235&255));
    $237 = $236 * 15.0;
    $238 = $237 / 255.0;
    $roundf3 = (+_roundf($238));
    $239 = (~~(($roundf3))&255);
    $240 = (((($5) + ($i12$032<<2)|0)) + 3|0);
    $241 = HEAP8[$240>>0]|0;
    $242 = (+($241&255));
    $243 = $242 * 15.0;
    $244 = $243 / 255.0;
    $roundf4 = (+_roundf($244));
    $245 = (~~(($roundf4))&255);
    $246 = $227&255;
    $247 = $246 << 12;
    $248 = $233&255;
    $249 = $248 << 8;
    $250 = $249 | $247;
    $251 = $239&255;
    $252 = $251 << 4;
    $253 = $250 | $252;
    $254 = $245&255;
    $255 = $253 | $254;
    $256 = $255&65535;
    $257 = (($218) + ($i12$032<<1)|0);
    HEAP16[$257>>1] = $256;
    $258 = (($i12$032) + 1)|0;
    $259 = ($258|0)<($221|0);
    if ($259) {
     $i12$032 = $258;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 2:  {
  $39 = ((($image)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($image)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $40 << 1;
  $44 = Math_imul($43, $42)|0;
  $45 = (_malloc($44)|0);
  HEAP32[$image>>2] = $45;
  $46 = HEAP32[$39>>2]|0;
  $47 = HEAP32[$41>>2]|0;
  $48 = $46 << 1;
  $49 = Math_imul($48, $47)|0;
  $50 = ($49|0)>(0);
  if ($50) {
   $i1$019 = 0;$k$120 = 0;
   while(1) {
    $51 = (($5) + ($k$120<<2)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = (+($52&255));
    $54 = $53 * 0.29899999499320984;
    $55 = (((($5) + ($k$120<<2)|0)) + 1|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = (+($56&255));
    $58 = $57 * 0.58700001239776611;
    $59 = $54 + $58;
    $60 = (((($5) + ($k$120<<2)|0)) + 2|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = (+($61&255));
    $63 = $62 * 0.11400000005960464;
    $64 = $59 + $63;
    $65 = (~~(($64))&255);
    $66 = HEAP32[$image>>2]|0;
    $67 = (($66) + ($i1$019)|0);
    HEAP8[$67>>0] = $65;
    $68 = (((($5) + ($k$120<<2)|0)) + 3|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $i1$019 | 1;
    $71 = HEAP32[$image>>2]|0;
    $72 = (($71) + ($70)|0);
    HEAP8[$72>>0] = $69;
    $73 = (($k$120) + 1)|0;
    $74 = (($i1$019) + 2)|0;
    $75 = HEAP32[$39>>2]|0;
    $76 = HEAP32[$41>>2]|0;
    $77 = $75 << 1;
    $78 = Math_imul($77, $76)|0;
    $79 = ($74|0)<($78|0);
    if ($79) {
     $i1$019 = $74;$k$120 = $73;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 7:  {
  $260 = ((($image)) + 4|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = ((($image)) + 8|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = $261 << 2;
  $265 = Math_imul($264, $263)|0;
  $266 = (_malloc($265)|0);
  HEAP32[$image>>2] = $266;
  $267 = HEAP32[$260>>2]|0;
  $268 = HEAP32[$262>>2]|0;
  $269 = $267 << 2;
  $270 = Math_imul($269, $268)|0;
  $271 = ($270|0)>(0);
  if ($271) {
   $i13$035 = 0;$k$634 = 0;
   while(1) {
    $272 = (($5) + ($k$634<<2)|0);
    $273 = HEAP8[$272>>0]|0;
    $274 = HEAP32[$image>>2]|0;
    $275 = (($274) + ($i13$035)|0);
    HEAP8[$275>>0] = $273;
    $276 = (((($5) + ($k$634<<2)|0)) + 1|0);
    $277 = HEAP8[$276>>0]|0;
    $278 = $i13$035 | 1;
    $279 = HEAP32[$image>>2]|0;
    $280 = (($279) + ($278)|0);
    HEAP8[$280>>0] = $277;
    $281 = (((($5) + ($k$634<<2)|0)) + 2|0);
    $282 = HEAP8[$281>>0]|0;
    $283 = $i13$035 | 2;
    $284 = HEAP32[$image>>2]|0;
    $285 = (($284) + ($283)|0);
    HEAP8[$285>>0] = $282;
    $286 = (((($5) + ($k$634<<2)|0)) + 3|0);
    $287 = HEAP8[$286>>0]|0;
    $288 = $i13$035 | 3;
    $289 = HEAP32[$image>>2]|0;
    $290 = (($289) + ($288)|0);
    HEAP8[$290>>0] = $287;
    $291 = (($k$634) + 1)|0;
    $292 = (($i13$035) + 4)|0;
    $293 = HEAP32[$260>>2]|0;
    $294 = HEAP32[$262>>2]|0;
    $295 = $293 << 2;
    $296 = Math_imul($295, $294)|0;
    $297 = ($292|0)<($296|0);
    if ($297) {
     $i13$035 = $292;$k$634 = $291;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 5:  {
  $157 = ((($image)) + 4|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ((($image)) + 8|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $158 << 1;
  $162 = Math_imul($161, $160)|0;
  $163 = (_malloc($162)|0);
  HEAP32[$image>>2] = $163;
  $164 = HEAP32[$157>>2]|0;
  $165 = HEAP32[$159>>2]|0;
  $166 = Math_imul($165, $164)|0;
  $167 = ($166|0)>(0);
  if ($167) {
   $168 = HEAP32[$image>>2]|0;
   $169 = HEAP32[$157>>2]|0;
   $170 = HEAP32[$159>>2]|0;
   $171 = Math_imul($170, $169)|0;
   $k$429 = 0;
   while(1) {
    $172 = (($5) + ($k$429<<2)|0);
    $173 = HEAP8[$172>>0]|0;
    $174 = (+($173&255));
    $175 = $174 * 31.0;
    $176 = $175 / 255.0;
    $roundf5 = (+_roundf($176));
    $177 = (~~(($roundf5))&255);
    $178 = (((($5) + ($k$429<<2)|0)) + 1|0);
    $179 = HEAP8[$178>>0]|0;
    $180 = (+($179&255));
    $181 = $180 * 31.0;
    $182 = $181 / 255.0;
    $roundf6 = (+_roundf($182));
    $183 = (~~(($roundf6))&255);
    $184 = (((($5) + ($k$429<<2)|0)) + 2|0);
    $185 = HEAP8[$184>>0]|0;
    $186 = (+($185&255));
    $187 = $186 * 31.0;
    $188 = $187 / 255.0;
    $roundf7 = (+_roundf($188));
    $189 = (~~(($roundf7))&255);
    $190 = (((($5) + ($k$429<<2)|0)) + 3|0);
    $191 = HEAP8[$190>>0]|0;
    $192 = ($191&255)>(50);
    $193 = $177&255;
    $194 = $193 << 11;
    $195 = $183&255;
    $196 = $195 << 6;
    $197 = $196 | $194;
    $198 = $189&255;
    $199 = $198 << 1;
    $200 = $197 | $199;
    $201 = $192&1;
    $202 = $200 | $201;
    $203 = $202&65535;
    $204 = (($168) + ($k$429<<1)|0);
    HEAP16[$204>>1] = $203;
    $205 = (($k$429) + 1)|0;
    $206 = ($205|0)<($171|0);
    if ($206) {
     $k$429 = $205;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 3:  {
  $80 = ((($image)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($image)) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $81 << 1;
  $85 = Math_imul($84, $83)|0;
  $86 = (_malloc($85)|0);
  HEAP32[$image>>2] = $86;
  $87 = HEAP32[$80>>2]|0;
  $88 = HEAP32[$82>>2]|0;
  $89 = Math_imul($88, $87)|0;
  $90 = ($89|0)>(0);
  if ($90) {
   $91 = HEAP32[$image>>2]|0;
   $92 = HEAP32[$80>>2]|0;
   $93 = HEAP32[$82>>2]|0;
   $94 = Math_imul($93, $92)|0;
   $k$223 = 0;
   while(1) {
    $95 = (($5) + ($k$223<<2)|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = (+($96&255));
    $98 = $97 * 31.0;
    $99 = $98 / 255.0;
    $roundf8 = (+_roundf($99));
    $100 = (~~(($roundf8))&255);
    $101 = (((($5) + ($k$223<<2)|0)) + 1|0);
    $102 = HEAP8[$101>>0]|0;
    $103 = (+($102&255));
    $104 = $103 * 63.0;
    $105 = $104 / 255.0;
    $roundf9 = (+_roundf($105));
    $106 = (~~(($roundf9))&255);
    $107 = (((($5) + ($k$223<<2)|0)) + 2|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = (+($108&255));
    $110 = $109 * 31.0;
    $111 = $110 / 255.0;
    $roundf10 = (+_roundf($111));
    $112 = (~~(($roundf10))&255);
    $113 = $100&255;
    $114 = $113 << 11;
    $115 = $106&255;
    $116 = $115 << 5;
    $117 = $116 | $114;
    $118 = $112&255;
    $119 = $117 | $118;
    $120 = $119&65535;
    $121 = (($91) + ($k$223<<1)|0);
    HEAP16[$121>>1] = $120;
    $122 = (($k$223) + 1)|0;
    $123 = ($122|0)<($94|0);
    if ($123) {
     $k$223 = $122;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 1:  {
  $7 = ((($image)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($image)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = Math_imul($10, $8)|0;
  $12 = (_malloc($11)|0);
  HEAP32[$image>>2] = $12;
  $13 = HEAP32[$7>>2]|0;
  $14 = HEAP32[$9>>2]|0;
  $15 = Math_imul($14, $13)|0;
  $16 = ($15|0)>(0);
  if ($16) {
   $k$018 = 0;
   while(1) {
    $17 = (($5) + ($k$018<<2)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = (+($18&255));
    $20 = $19 * 0.29899999499320984;
    $21 = (((($5) + ($k$018<<2)|0)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = (+($22&255));
    $24 = $23 * 0.58700001239776611;
    $25 = $20 + $24;
    $26 = (((($5) + ($k$018<<2)|0)) + 2|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = (+($27&255));
    $29 = $28 * 0.11400000005960464;
    $30 = $25 + $29;
    $31 = (~~(($30))&255);
    $32 = HEAP32[$image>>2]|0;
    $33 = (($32) + ($k$018)|0);
    HEAP8[$33>>0] = $31;
    $34 = (($k$018) + 1)|0;
    $35 = HEAP32[$7>>2]|0;
    $36 = HEAP32[$9>>2]|0;
    $37 = Math_imul($36, $35)|0;
    $38 = ($34|0)<($37|0);
    if ($38) {
     $k$018 = $34;
    } else {
     break;
    }
   }
  }
  break;
 }
 default: {
 }
 }
 _free($5);
 STACKTOP = sp;return;
}
function _ImageToPOT($image,$fillColor) {
 $image = $image|0;
 $fillColor = $fillColor|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $exitcond6 = 0, $i$01 = 0, $image$byval_copy = 0, $j$03 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $image$byval_copy = sp + 36|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 ;HEAP32[$image$byval_copy>>2]=HEAP32[$image>>2]|0;HEAP32[$image$byval_copy+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy+8>>2]=HEAP32[$image+8>>2]|0;HEAP32[$image$byval_copy+12>>2]=HEAP32[$image+12>>2]|0;HEAP32[$image$byval_copy+16>>2]=HEAP32[$image+16>>2]|0;
 $1 = (_GetImageData($image$byval_copy)|0);
 $2 = ((($image)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_GetNextPOT($3)|0);
 $5 = ((($image)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_GetNextPOT($6)|0);
 $8 = HEAP32[$2>>2]|0;
 $9 = ($4|0)==($8|0);
 if ($9) {
  $10 = HEAP32[$5>>2]|0;
  $11 = ($7|0)==($10|0);
  if ($11) {
   STACKTOP = sp;return;
  }
 }
 $12 = $4 << 2;
 $13 = Math_imul($12, $7)|0;
 $14 = (_malloc($13)|0);
 $15 = ($7|0)>(0);
 if ($15) {
  $16 = ($4|0)>(0);
  $j$03 = 0;
  while(1) {
   if ($16) {
    $17 = HEAP32[$5>>2]|0;
    $18 = ($j$03|0)<($17|0);
    $19 = Math_imul($j$03, $4)|0;
    $20 = Math_imul($j$03, $4)|0;
    $i$01 = 0;
    while(1) {
     if ($18) {
      $21 = HEAP32[$2>>2]|0;
      $22 = ($i$01|0)<($21|0);
      if ($22) {
       $23 = (($i$01) + ($19))|0;
       $24 = Math_imul($21, $j$03)|0;
       $25 = (($24) + ($i$01))|0;
       $26 = (($14) + ($23<<2)|0);
       $27 = (($1) + ($25<<2)|0);
       $28 = HEAPU8[$27>>0]|(HEAPU8[$27+1>>0]<<8)|(HEAPU8[$27+2>>0]<<16)|(HEAPU8[$27+3>>0]<<24);
       HEAP8[$26>>0]=$28&255;HEAP8[$26+1>>0]=($28>>8)&255;HEAP8[$26+2>>0]=($28>>16)&255;HEAP8[$26+3>>0]=$28>>24;
      } else {
       label = 10;
      }
     } else {
      label = 10;
     }
     if ((label|0) == 10) {
      label = 0;
      $29 = (($i$01) + ($20))|0;
      $30 = (($14) + ($29<<2)|0);
      $31 = HEAPU8[$fillColor>>0]|(HEAPU8[$fillColor+1>>0]<<8)|(HEAPU8[$fillColor+2>>0]<<16)|(HEAPU8[$fillColor+3>>0]<<24);
      HEAP8[$30>>0]=$31&255;HEAP8[$30+1>>0]=($31>>8)&255;HEAP8[$30+2>>0]=($31>>16)&255;HEAP8[$30+3>>0]=$31>>24;
     }
     $32 = (($i$01) + 1)|0;
     $exitcond = ($32|0)==($4|0);
     if ($exitcond) {
      break;
     } else {
      $i$01 = $32;
     }
    }
   }
   $33 = (($j$03) + 1)|0;
   $exitcond6 = ($33|0)==($7|0);
   if ($exitcond6) {
    break;
   } else {
    $j$03 = $33;
   }
  }
 }
 $34 = HEAP32[$2>>2]|0;
 $35 = HEAP32[$5>>2]|0;
 HEAP32[$vararg_buffer>>2] = $34;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $35;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $4;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $7;
 _TraceLog(2,14832,$vararg_buffer);
 _free($1);
 $36 = HEAP32[$image>>2]|0;
 _free($36);
 $37 = ((($image)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 _LoadImageEx($0,$14,$4,$7);
 ;HEAP32[$image>>2]=HEAP32[$0>>2]|0;HEAP32[$image+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$image+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$image+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$image+16>>2]=HEAP32[$0+16>>2]|0;
 _free($14);
 _ImageFormat($image,$38);
 STACKTOP = sp;return;
}
function _DrawTexture($texture,$posX,$posY,$tint) {
 $texture = $texture|0;
 $posX = $posX|0;
 $posY = $posY|0;
 $tint = $tint|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $texture$byval_copy = 0, $tint$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $tint$byval_copy = sp + 40|0;
 $$byval_copy = sp;
 $texture$byval_copy = sp + 8|0;
 $0 = sp + 32|0;
 $1 = (+($posX|0));
 $2 = (+($posY|0));
 HEAPF32[$0>>2] = $1;
 $3 = ((($0)) + 4|0);
 HEAPF32[$3>>2] = $2;
 ;HEAP32[$texture$byval_copy>>2]=HEAP32[$texture>>2]|0;HEAP32[$texture$byval_copy+4>>2]=HEAP32[$texture+4>>2]|0;HEAP32[$texture$byval_copy+8>>2]=HEAP32[$texture+8>>2]|0;HEAP32[$texture$byval_copy+12>>2]=HEAP32[$texture+12>>2]|0;HEAP32[$texture$byval_copy+16>>2]=HEAP32[$texture+16>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 ;HEAP8[$tint$byval_copy>>0]=HEAP8[$tint>>0]|0;HEAP8[$tint$byval_copy+1>>0]=HEAP8[$tint+1>>0]|0;HEAP8[$tint$byval_copy+2>>0]=HEAP8[$tint+2>>0]|0;HEAP8[$tint$byval_copy+3>>0]=HEAP8[$tint+3>>0]|0;
 _DrawTextureEx($texture$byval_copy,$$byval_copy,0.0,1.0,$tint$byval_copy);
 STACKTOP = sp;return;
}
function _DrawTextureEx($texture,$position,$rotation,$scale,$tint) {
 $texture = $texture|0;
 $position = $position|0;
 $rotation = +$rotation;
 $scale = +$scale;
 $tint = $tint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $destRec = 0, $destRec$byval_copy = 0, $origin = 0, $sourceRec = 0, $sourceRec$byval_copy = 0, $texture$byval_copy = 0, $tint$byval_copy = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $tint$byval_copy = sp + 104|0;
 $tmpcast$byval_copy = sp + 96|0;
 $destRec$byval_copy = sp + 8|0;
 $sourceRec$byval_copy = sp + 24|0;
 $texture$byval_copy = sp + 40|0;
 $sourceRec = sp + 64|0;
 $destRec = sp + 80|0;
 $origin = sp;
 HEAP32[$sourceRec>>2] = 0;
 $0 = ((($sourceRec)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($sourceRec)) + 8|0);
 $2 = ((($texture)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 $4 = ((($sourceRec)) + 12|0);
 $5 = ((($texture)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = +HEAPF32[$position>>2];
 $8 = (~~(($7)));
 HEAP32[$destRec>>2] = $8;
 $9 = ((($destRec)) + 4|0);
 $10 = ((($position)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (~~(($11)));
 HEAP32[$9>>2] = $12;
 $13 = ((($destRec)) + 8|0);
 $14 = HEAP32[$2>>2]|0;
 $15 = (+($14|0));
 $16 = $15 * $scale;
 $17 = (~~(($16)));
 HEAP32[$13>>2] = $17;
 $18 = ((($destRec)) + 12|0);
 $19 = HEAP32[$5>>2]|0;
 $20 = (+($19|0));
 $21 = $20 * $scale;
 $22 = (~~(($21)));
 HEAP32[$18>>2] = $22;
 $23 = $origin;
 $24 = $23;
 HEAP32[$24>>2] = 0;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = 0;
 ;HEAP32[$texture$byval_copy>>2]=HEAP32[$texture>>2]|0;HEAP32[$texture$byval_copy+4>>2]=HEAP32[$texture+4>>2]|0;HEAP32[$texture$byval_copy+8>>2]=HEAP32[$texture+8>>2]|0;HEAP32[$texture$byval_copy+12>>2]=HEAP32[$texture+12>>2]|0;HEAP32[$texture$byval_copy+16>>2]=HEAP32[$texture+16>>2]|0;
 ;HEAP32[$sourceRec$byval_copy>>2]=HEAP32[$sourceRec>>2]|0;HEAP32[$sourceRec$byval_copy+4>>2]=HEAP32[$sourceRec+4>>2]|0;HEAP32[$sourceRec$byval_copy+8>>2]=HEAP32[$sourceRec+8>>2]|0;HEAP32[$sourceRec$byval_copy+12>>2]=HEAP32[$sourceRec+12>>2]|0;
 ;HEAP32[$destRec$byval_copy>>2]=HEAP32[$destRec>>2]|0;HEAP32[$destRec$byval_copy+4>>2]=HEAP32[$destRec+4>>2]|0;HEAP32[$destRec$byval_copy+8>>2]=HEAP32[$destRec+8>>2]|0;HEAP32[$destRec$byval_copy+12>>2]=HEAP32[$destRec+12>>2]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$origin>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$origin+4>>2]|0;
 ;HEAP8[$tint$byval_copy>>0]=HEAP8[$tint>>0]|0;HEAP8[$tint$byval_copy+1>>0]=HEAP8[$tint+1>>0]|0;HEAP8[$tint$byval_copy+2>>0]=HEAP8[$tint+2>>0]|0;HEAP8[$tint$byval_copy+3>>0]=HEAP8[$tint+3>>0]|0;
 _DrawTexturePro($texture$byval_copy,$sourceRec$byval_copy,$destRec$byval_copy,$tmpcast$byval_copy,$rotation,$tint$byval_copy);
 STACKTOP = sp;return;
}
function _DrawTexturePro($texture,$sourceRec,$destRec,$origin,$rotation,$tint) {
 $texture = $texture|0;
 $sourceRec = $sourceRec|0;
 $destRec = $destRec|0;
 $origin = $origin|0;
 $rotation = +$rotation;
 $tint = $tint|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$texture>>2]|0;
 _rlEnableTexture($0);
 _rlPushMatrix();
 $1 = HEAP32[$destRec>>2]|0;
 $2 = (+($1|0));
 $3 = ((($destRec)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (+($4|0));
 _rlTranslatef($2,$5,0.0);
 _rlRotatef($rotation,0.0,0.0,1.0);
 $6 = +HEAPF32[$origin>>2];
 $7 = -$6;
 $8 = ((($origin)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = -$9;
 _rlTranslatef($7,$10,0.0);
 _rlBegin(2);
 $11 = HEAP8[$tint>>0]|0;
 $12 = ((($tint)) + 1|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ((($tint)) + 2|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ((($tint)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 _rlColor4ub($11,$13,$15,$17);
 $18 = HEAP32[$sourceRec>>2]|0;
 $19 = (+($18|0));
 $20 = ((($texture)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (+($21|0));
 $23 = $19 / $22;
 $24 = ((($sourceRec)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (+($25|0));
 $27 = ((($texture)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (+($28|0));
 $30 = $26 / $29;
 _rlTexCoord2f($23,$30);
 _rlVertex2f(0.0,0.0);
 $31 = HEAP32[$sourceRec>>2]|0;
 $32 = (+($31|0));
 $33 = HEAP32[$20>>2]|0;
 $34 = (+($33|0));
 $35 = $32 / $34;
 $36 = HEAP32[$24>>2]|0;
 $37 = ((($sourceRec)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($36))|0;
 $40 = (+($39|0));
 $41 = HEAP32[$27>>2]|0;
 $42 = (+($41|0));
 $43 = $40 / $42;
 _rlTexCoord2f($35,$43);
 $44 = ((($destRec)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (+($45|0));
 _rlVertex2f(0.0,$46);
 $47 = HEAP32[$sourceRec>>2]|0;
 $48 = ((($sourceRec)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + ($47))|0;
 $51 = (+($50|0));
 $52 = HEAP32[$20>>2]|0;
 $53 = (+($52|0));
 $54 = $51 / $53;
 $55 = HEAP32[$24>>2]|0;
 $56 = HEAP32[$37>>2]|0;
 $57 = (($56) + ($55))|0;
 $58 = (+($57|0));
 $59 = HEAP32[$27>>2]|0;
 $60 = (+($59|0));
 $61 = $58 / $60;
 _rlTexCoord2f($54,$61);
 $62 = ((($destRec)) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (+($63|0));
 $65 = HEAP32[$44>>2]|0;
 $66 = (+($65|0));
 _rlVertex2f($64,$66);
 $67 = HEAP32[$sourceRec>>2]|0;
 $68 = HEAP32[$48>>2]|0;
 $69 = (($68) + ($67))|0;
 $70 = (+($69|0));
 $71 = HEAP32[$20>>2]|0;
 $72 = (+($71|0));
 $73 = $70 / $72;
 $74 = HEAP32[$24>>2]|0;
 $75 = (+($74|0));
 $76 = HEAP32[$27>>2]|0;
 $77 = (+($76|0));
 $78 = $75 / $77;
 _rlTexCoord2f($73,$78);
 $79 = HEAP32[$62>>2]|0;
 $80 = (+($79|0));
 _rlVertex2f($80,0.0);
 _rlEnd();
 _rlPopMatrix();
 return;
}
function _DrawTextureRec($texture,$sourceRec,$position,$tint) {
 $texture = $texture|0;
 $sourceRec = $sourceRec|0;
 $position = $position|0;
 $tint = $tint|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $destRec = 0, $destRec$byval_copy = 0, $origin = 0, $sourceRec$byval_copy = 0;
 var $texture$byval_copy = 0, $tint$byval_copy = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $tint$byval_copy = sp + 88|0;
 $tmpcast$byval_copy = sp + 80|0;
 $destRec$byval_copy = sp + 8|0;
 $sourceRec$byval_copy = sp + 24|0;
 $texture$byval_copy = sp + 40|0;
 $destRec = sp + 64|0;
 $origin = sp;
 $0 = +HEAPF32[$position>>2];
 $1 = (~~(($0)));
 HEAP32[$destRec>>2] = $1;
 $2 = ((($destRec)) + 4|0);
 $3 = ((($position)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = (~~(($4)));
 HEAP32[$2>>2] = $5;
 $6 = ((($destRec)) + 8|0);
 $7 = ((($sourceRec)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($destRec)) + 12|0);
 $10 = ((($sourceRec)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$9>>2] = $11;
 $12 = $origin;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 ;HEAP32[$texture$byval_copy>>2]=HEAP32[$texture>>2]|0;HEAP32[$texture$byval_copy+4>>2]=HEAP32[$texture+4>>2]|0;HEAP32[$texture$byval_copy+8>>2]=HEAP32[$texture+8>>2]|0;HEAP32[$texture$byval_copy+12>>2]=HEAP32[$texture+12>>2]|0;HEAP32[$texture$byval_copy+16>>2]=HEAP32[$texture+16>>2]|0;
 ;HEAP32[$sourceRec$byval_copy>>2]=HEAP32[$sourceRec>>2]|0;HEAP32[$sourceRec$byval_copy+4>>2]=HEAP32[$sourceRec+4>>2]|0;HEAP32[$sourceRec$byval_copy+8>>2]=HEAP32[$sourceRec+8>>2]|0;HEAP32[$sourceRec$byval_copy+12>>2]=HEAP32[$sourceRec+12>>2]|0;
 ;HEAP32[$destRec$byval_copy>>2]=HEAP32[$destRec>>2]|0;HEAP32[$destRec$byval_copy+4>>2]=HEAP32[$destRec+4>>2]|0;HEAP32[$destRec$byval_copy+8>>2]=HEAP32[$destRec+8>>2]|0;HEAP32[$destRec$byval_copy+12>>2]=HEAP32[$destRec+12>>2]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$origin>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$origin+4>>2]|0;
 ;HEAP8[$tint$byval_copy>>0]=HEAP8[$tint>>0]|0;HEAP8[$tint$byval_copy+1>>0]=HEAP8[$tint+1>>0]|0;HEAP8[$tint$byval_copy+2>>0]=HEAP8[$tint+2>>0]|0;HEAP8[$tint$byval_copy+3>>0]=HEAP8[$tint+3>>0]|0;
 _DrawTexturePro($texture$byval_copy,$sourceRec$byval_copy,$destRec$byval_copy,$tmpcast$byval_copy,0.0,$tint$byval_copy);
 STACKTOP = sp;return;
}
function _stb_vorbis_close($p) {
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  return;
 }
 _vorbis_deinit($p);
 _setup_free($p,$p);
 return;
}
function _stb_vorbis_get_info($agg$result,$f) {
 $agg$result = $agg$result|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = ((($f)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($f)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($f)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($f)) + 132|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 >> 1;
 HEAP32[$agg$result>>2] = $2;
 $12 = ((($agg$result)) + 4|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($agg$result)) + 8|0);
 HEAP32[$13>>2] = $4;
 $14 = ((($agg$result)) + 12|0);
 HEAP32[$14>>2] = $6;
 $15 = ((($agg$result)) + 16|0);
 HEAP32[$15>>2] = $8;
 $16 = ((($agg$result)) + 20|0);
 HEAP32[$16>>2] = $11;
 return;
}
function _stb_vorbis_get_file_offset($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($f)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $11 = ((($f)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_ftell(($12|0))|0);
  $14 = ((($f)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) - ($15))|0;
  $$0 = $16;
  return ($$0|0);
 } else {
  $6 = ((($f)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $4;
  $9 = $7;
  $10 = (($8) - ($9))|0;
  $$0 = $10;
  return ($$0|0);
 }
 return (0)|0;
}
function _stb_vorbis_seek_start($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = ((($f)) + 52|0);
  $4 = HEAP32[$3>>2]|0;
  _set_file_offset($f,$4);
  $5 = ((($f)) + 1008|0);
  HEAP32[$5>>2] = 0;
  $6 = ((($f)) + 1393|0);
  HEAP8[$6>>0] = 1;
  $7 = ((($f)) + 1396|0);
  HEAP32[$7>>2] = -1;
  _vorbis_pump_first_frame($f);
  return;
 } else {
  _error($f,2);
  return;
 }
}
function _stb_vorbis_stream_length_in_samples($f) {
 $f = $f|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, $header = 0, $last = 0, $last_page_loc$0$lcssa = 0, $last_page_loc$04 = 0, $previous_safe$0 = 0, $previous_safe$1$lcssa = 0, $previous_safe$13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $end = sp + 4|0;
 $last = sp;
 $header = sp + 8|0;
 $0 = ((($f)) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  _error($f,2);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($f)) + 812|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_stb_vorbis_get_file_offset($f)|0);
  $7 = ((($f)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8>>>0)>(65535);
  if ($9) {
   $10 = (($8) + -65536)|0;
   $11 = ((($f)) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10>>>0)<($12>>>0);
   if ($13) {
    label = 6;
   } else {
    $previous_safe$0 = $10;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   $14 = ((($f)) + 52|0);
   $15 = HEAP32[$14>>2]|0;
   $previous_safe$0 = $15;
  }
  _set_file_offset($f,$previous_safe$0);
  $16 = (_vorbis_find_page($f,$end,$last)|0);
  $17 = ($16|0)==(0);
  do {
   if ($17) {
    $18 = ((($f)) + 116|0);
    HEAP32[$18>>2] = 36;
    HEAP32[$3>>2] = -1;
   } else {
    $19 = (_stb_vorbis_get_file_offset($f)|0);
    $20 = HEAP32[$last>>2]|0;
    $21 = ($20|0)==(0);
    L15: do {
     if ($21) {
      $last_page_loc$04 = $19;$previous_safe$13 = $previous_safe$0;
      while(1) {
       $22 = HEAP32[$end>>2]|0;
       _set_file_offset($f,$22);
       $23 = (_vorbis_find_page($f,$end,$last)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $last_page_loc$0$lcssa = $last_page_loc$04;$previous_safe$1$lcssa = $previous_safe$13;
        break L15;
       }
       $25 = (($last_page_loc$04) + 1)|0;
       $26 = (_stb_vorbis_get_file_offset($f)|0);
       $27 = HEAP32[$last>>2]|0;
       $28 = ($27|0)==(0);
       if ($28) {
        $last_page_loc$04 = $26;$previous_safe$13 = $25;
       } else {
        $last_page_loc$0$lcssa = $26;$previous_safe$1$lcssa = $25;
        break;
       }
      }
     } else {
      $last_page_loc$0$lcssa = $19;$previous_safe$1$lcssa = $previous_safe$0;
     }
    } while(0);
    _set_file_offset($f,$last_page_loc$0$lcssa);
    (_getn($f,$header,6)|0);
    $29 = (_get32($f)|0);
    $30 = (_get32($f)|0);
    $31 = $30 & $29;
    $32 = ($31|0)==(-1);
    if ($32) {
     $33 = ((($f)) + 116|0);
     HEAP32[$33>>2] = 36;
     HEAP32[$3>>2] = -1;
     break;
    } else {
     $34 = ($30|0)==(0);
     $$ = $34 ? $29 : -2;
     HEAP32[$3>>2] = $$;
     $35 = ((($f)) + 76|0);
     HEAP32[$35>>2] = $last_page_loc$0$lcssa;
     $36 = HEAP32[$end>>2]|0;
     $37 = ((($f)) + 80|0);
     HEAP32[$37>>2] = $36;
     $38 = ((($f)) + 92|0);
     HEAP32[$38>>2] = $$;
     $39 = ((($f)) + 88|0);
     HEAP32[$39>>2] = -1;
     $40 = ((($f)) + 84|0);
     HEAP32[$40>>2] = $previous_safe$1$lcssa;
     break;
    }
   }
  } while(0);
  _set_file_offset($f,$6);
 }
 $41 = HEAP32[$3>>2]|0;
 $42 = ($41|0)==(-1);
 $$2 = $42 ? 0 : $41;
 $$0 = $$2;
 STACKTOP = sp;return ($$0|0);
}
function _stb_vorbis_stream_length_in_seconds($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stb_vorbis_stream_length_in_samples($f)|0);
 $1 = (+($0>>>0));
 $2 = HEAP32[$f>>2]|0;
 $3 = (+($2>>>0));
 $4 = $1 / $3;
 return (+$4);
}
function _stb_vorbis_get_frame_float($f,$channels,$output) {
 $f = $f|0;
 $channels = $channels|0;
 $output = $output|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $left = 0, $len = 0, $right = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $len = sp + 8|0;
 $right = sp;
 $left = sp + 4|0;
 $0 = ((($f)) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  _error($f,2);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_vorbis_decode_packet($f,$len,$left,$right)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($f)) + 1524|0);
  HEAP32[$5>>2] = 0;
  $6 = ((($f)) + 1520|0);
  HEAP32[$6>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$len>>2]|0;
 $8 = HEAP32[$left>>2]|0;
 $9 = HEAP32[$right>>2]|0;
 $10 = (_vorbis_finish_frame($f,$7,$8,$9)|0);
 HEAP32[$len>>2] = $10;
 $11 = ((($f)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = HEAP32[$left>>2]|0;
  $i$01 = 0;
  while(1) {
   $15 = (((($f)) + 816|0) + ($i$01<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($14<<2)|0);
   $18 = (((($f)) + 880|0) + ($i$01<<2)|0);
   HEAP32[$18>>2] = $17;
   $19 = (($i$01) + 1)|0;
   $20 = HEAP32[$11>>2]|0;
   $21 = ($19|0)<($20|0);
   if ($21) {
    $i$01 = $19;
   } else {
    break;
   }
  }
 }
 $22 = HEAP32[$left>>2]|0;
 $23 = ((($f)) + 1520|0);
 HEAP32[$23>>2] = $22;
 $24 = HEAP32[$left>>2]|0;
 $25 = HEAP32[$len>>2]|0;
 $26 = (($25) + ($24))|0;
 $27 = ((($f)) + 1524|0);
 HEAP32[$27>>2] = $26;
 $28 = ($channels|0)==(0|0);
 if (!($28)) {
  $29 = HEAP32[$11>>2]|0;
  HEAP32[$channels>>2] = $29;
 }
 $30 = ($output|0)==(0|0);
 if (!($30)) {
  $31 = ((($f)) + 880|0);
  HEAP32[$output>>2] = $31;
 }
 $32 = HEAP32[$len>>2]|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _stb_vorbis_open_file_section($file,$close_on_free,$error,$alloc,$length) {
 $file = $file|0;
 $close_on_free = $close_on_free|0;
 $error = $error|0;
 $alloc = $alloc|0;
 $length = $length|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1536|0;
 $p = sp;
 _vorbis_init($p,$alloc);
 $0 = ((($p)) + 20|0);
 HEAP32[$0>>2] = $file;
 $1 = (_ftell(($file|0))|0);
 $2 = ((($p)) + 24|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($p)) + 44|0);
 HEAP32[$3>>2] = $length;
 $4 = ((($p)) + 28|0);
 HEAP32[$4>>2] = $close_on_free;
 $5 = (_start_decoder($p)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = (_vorbis_alloc($p)|0);
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   _memcpy(($7|0),($p|0),1528)|0;
   _vorbis_pump_first_frame($7);
   $$0 = $7;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $9 = ($error|0)==(0|0);
 if (!($9)) {
  $10 = ((($p)) + 116|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$error>>2] = $11;
 }
 _vorbis_deinit($p);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stb_vorbis_open_file($file,$close_on_free,$error,$alloc) {
 $file = $file|0;
 $close_on_free = $close_on_free|0;
 $error = $error|0;
 $alloc = $alloc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ftell(($file|0))|0);
 (_fseek(($file|0),0,2)|0);
 $1 = (_ftell(($file|0))|0);
 $2 = (($1) - ($0))|0;
 (_fseek(($file|0),($0|0),0)|0);
 $3 = (_stb_vorbis_open_file_section($file,$close_on_free,$error,$alloc,$2)|0);
 return ($3|0);
}
function _stb_vorbis_open_filename($filename,$error,$alloc) {
 $filename = $filename|0;
 $error = $error|0;
 $alloc = $alloc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fopen(($filename|0),(19952|0))|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (_stb_vorbis_open_file($0,1,$error,$alloc)|0);
  $$0 = $2;
  return ($$0|0);
 }
 $3 = ($error|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$error>>2] = 6;
 $$0 = 0;
 return ($$0|0);
}
function _stb_vorbis_get_samples_short_interleaved($f,$channels,$buffer,$num_shorts) {
 $f = $f|0;
 $channels = $channels|0;
 $buffer = $buffer|0;
 $num_shorts = $num_shorts|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $n$1 = 0, $outputs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $outputs = sp;
 $0 = (($num_shorts|0) / ($channels|0))&-1;
 $1 = ((($f)) + 4|0);
 $2 = ((($f)) + 1524|0);
 $3 = ((($f)) + 1520|0);
 $4 = ((($f)) + 816|0);
 $$0 = $buffer;$n$0 = 0;
 while(1) {
  $5 = ($0|0)>($n$0|0);
  if (!($5)) {
   $n$1 = $n$0;
   label = 7;
   break;
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$3>>2]|0;
  $8 = (($6) - ($7))|0;
  $9 = (($8) + ($n$0))|0;
  $10 = ($9|0)<($0|0);
  $11 = (($0) - ($n$0))|0;
  $$ = $10 ? $8 : $11;
  $12 = ($$|0)==(0);
  if (!($12)) {
   $13 = HEAP32[$1>>2]|0;
   _convert_channels_short_interleaved($channels,$$0,$13,$4,$7,$$);
  }
  $14 = (($$) + ($n$0))|0;
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) + ($$))|0;
  HEAP32[$3>>2] = $16;
  $17 = ($14|0)==($0|0);
  if ($17) {
   $n$1 = $14;
   label = 7;
   break;
  }
  $18 = Math_imul($$, $channels)|0;
  $19 = (($$0) + ($18<<1)|0);
  $20 = (_stb_vorbis_get_frame_float($f,0,$outputs)|0);
  $21 = ($20|0)==(0);
  if ($21) {
   $n$1 = $14;
   label = 7;
   break;
  } else {
   $$0 = $19;$n$0 = $14;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($n$1|0);
 }
 return (0)|0;
}
function _stbrp_setup_allow_out_of_mem($context,$allow_out_of_mem) {
 $context = $context|0;
 $allow_out_of_mem = $allow_out_of_mem|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($allow_out_of_mem|0)==(0);
 if ($0) {
  $2 = HEAP32[$context>>2]|0;
  $3 = ((($context)) + 20|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($2) + -1)|0;
  $6 = (($5) + ($4))|0;
  $7 = (($6|0) / ($4|0))&-1;
  $8 = ((($context)) + 8|0);
  HEAP32[$8>>2] = $7;
  return;
 } else {
  $1 = ((($context)) + 8|0);
  HEAP32[$1>>2] = 1;
  return;
 }
}
function _stbrp_init_target($context,$width,$height,$nodes,$num_nodes) {
 $context = $context|0;
 $width = $width|0;
 $height = $height|0;
 $nodes = $nodes|0;
 $num_nodes = $num_nodes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $i$0$lcssa = 0, $i$02 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($width|0)<(65536);
 $1 = ($height|0)<(65536);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  ___assert_fail((14904|0),(14880|0),234,(14944|0));
  // unreachable;
 }
 $2 = ($num_nodes|0)>(1);
 if ($2) {
  $3 = (($num_nodes) + -1)|0;
  $i$02 = 0;
  while(1) {
   $4 = (($i$02) + 1)|0;
   $5 = (($nodes) + ($4<<3)|0);
   $6 = (((($nodes) + ($i$02<<3)|0)) + 4|0);
   HEAP32[$6>>2] = $5;
   $exitcond = ($4|0)==($3|0);
   if ($exitcond) {
    $i$0$lcssa = $3;
    break;
   } else {
    $i$02 = $4;
   }
  }
 } else {
  $i$0$lcssa = 0;
 }
 $7 = (((($nodes) + ($i$0$lcssa<<3)|0)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($context)) + 12|0);
 HEAP32[$8>>2] = 1;
 $9 = ((($context)) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($context)) + 28|0);
 HEAP32[$10>>2] = $nodes;
 $11 = ((($context)) + 32|0);
 $12 = ((($context)) + 24|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$context>>2] = $width;
 $13 = ((($context)) + 4|0);
 HEAP32[$13>>2] = $height;
 $14 = ((($context)) + 20|0);
 HEAP32[$14>>2] = $num_nodes;
 _stbrp_setup_allow_out_of_mem($context,0);
 HEAP16[$11>>1] = 0;
 $15 = ((($context)) + 34|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($context)) + 40|0);
 $17 = ((($context)) + 36|0);
 HEAP32[$17>>2] = $16;
 $18 = $width&65535;
 HEAP16[$16>>1] = $18;
 $19 = ((($context)) + 42|0);
 HEAP16[$19>>1] = -1;
 $20 = ((($context)) + 44|0);
 HEAP32[$20>>2] = 0;
 return;
}
function _stbrp_pack_rects($context,$rects,$num_rects) {
 $context = $context|0;
 $rects = $rects|0;
 $num_rects = $num_rects|0;
 var $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond10 = 0, $exitcond11 = 0, $fr = 0;
 var $i$06 = 0, $i$12 = 0, $i$21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $fr = sp;
 $0 = ($num_rects|0)>(0);
 if ($0) {
  $i$06 = 0;
  while(1) {
   $1 = (((($rects) + ($i$06<<4)|0)) + 12|0);
   HEAP32[$1>>2] = $i$06;
   $2 = (($i$06) + 1)|0;
   $exitcond11 = ($2|0)==($num_rects|0);
   if ($exitcond11) {
    break;
   } else {
    $i$06 = $2;
   }
  }
  _qsort($rects,$num_rects,16,1);
  $3 = ($num_rects|0)>(0);
  if ($3) {
   $4 = ((($fr)) + 8|0);
   $5 = ((($fr)) + 4|0);
   $i$12 = 0;
   while(1) {
    $6 = (((($rects) + ($i$12<<4)|0)) + 4|0);
    $7 = HEAP16[$6>>1]|0;
    $8 = $7&65535;
    $9 = (((($rects) + ($i$12<<4)|0)) + 6|0);
    $10 = HEAP16[$9>>1]|0;
    $11 = $10&65535;
    _stbrp__skyline_pack_rectangle($fr,$context,$8,$11);
    $12 = HEAP32[$4>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $20 = (((($rects) + ($i$12<<4)|0)) + 10|0);
     HEAP16[$20>>1] = -1;
     $21 = (((($rects) + ($i$12<<4)|0)) + 8|0);
     HEAP16[$21>>1] = -1;
    } else {
     $14 = HEAP32[$fr>>2]|0;
     $15 = $14&65535;
     $16 = (((($rects) + ($i$12<<4)|0)) + 8|0);
     HEAP16[$16>>1] = $15;
     $17 = HEAP32[$5>>2]|0;
     $18 = $17&65535;
     $19 = (((($rects) + ($i$12<<4)|0)) + 10|0);
     HEAP16[$19>>1] = $18;
    }
    $22 = (($i$12) + 1)|0;
    $exitcond10 = ($22|0)==($num_rects|0);
    if ($exitcond10) {
     break;
    } else {
     $i$12 = $22;
    }
   }
   _qsort($rects,$num_rects,16,2);
   $23 = ($num_rects|0)>(0);
   if ($23) {
    $i$21 = 0;
   } else {
    STACKTOP = sp;return;
   }
   while(1) {
    $24 = (((($rects) + ($i$21<<4)|0)) + 8|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = ($25<<16>>16)==(-1);
    if ($26) {
     $27 = (((($rects) + ($i$21<<4)|0)) + 10|0);
     $28 = HEAP16[$27>>1]|0;
     $29 = ($28<<16>>16)==(-1);
     $31 = $29;
    } else {
     $31 = 0;
    }
    $30 = $31&1;
    $32 = $30 ^ 1;
    $33 = (((($rects) + ($i$21<<4)|0)) + 12|0);
    HEAP32[$33>>2] = $32;
    $34 = (($i$21) + 1)|0;
    $exitcond = ($34|0)==($num_rects|0);
    if ($exitcond) {
     break;
    } else {
     $i$21 = $34;
    }
   }
   STACKTOP = sp;return;
  } else {
   $$ph = $rects;
  }
 } else {
  _qsort($rects,$num_rects,16,1);
  $$ph = $rects;
 }
 _qsort($$ph,$num_rects,16,2);
 STACKTOP = sp;return;
}
function _stbtt_GetFontOffsetForIndex($font_collection,$index) {
 $font_collection = $font_collection|0;
 $index = $index|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbtt__isfont($font_collection)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $not$ = ($index|0)!=(0);
  $2 = $not$ << 31 >> 31;
  $$0 = $2;
  return ($$0|0);
 }
 $3 = HEAP8[$font_collection>>0]|0;
 $4 = ($3<<24>>24)==(116);
 if (!($4)) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = ((($font_collection)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(116);
 if (!($7)) {
  $$0 = -1;
  return ($$0|0);
 }
 $8 = ((($font_collection)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(99);
 if (!($10)) {
  $$0 = -1;
  return ($$0|0);
 }
 $11 = ((($font_collection)) + 3|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(102);
 if (!($13)) {
  $$0 = -1;
  return ($$0|0);
 }
 $14 = ((($font_collection)) + 4|0);
 $15 = (_ttULONG($14)|0);
 if (!((($15|0) == 131072) | (($15|0) == 65536))) {
  $$0 = -1;
  return ($$0|0);
 }
 $16 = ((($font_collection)) + 8|0);
 $17 = (_ttLONG($16)|0);
 $18 = ($17|0)>($index|0);
 if (!($18)) {
  $$0 = -1;
  return ($$0|0);
 }
 $19 = ($index*14)|0;
 $$sum = (($19) + 12)|0;
 $20 = (($font_collection) + ($$sum)|0);
 $21 = (_ttULONG($20)|0);
 $$0 = $21;
 return ($$0|0);
}
function _stbtt_InitFont($info,$data2,$fontstart) {
 $info = $info|0;
 $data2 = $data2|0;
 $fontstart = $fontstart|0;
 var $$0 = 0, $$pr = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 4|0);
 HEAP32[$0>>2] = $data2;
 $1 = ((($info)) + 8|0);
 HEAP32[$1>>2] = $fontstart;
 $2 = (_stbtt__find_table($data2,$fontstart,14968)|0);
 $3 = (_stbtt__find_table($data2,$fontstart,14976)|0);
 $4 = ((($info)) + 16|0);
 HEAP32[$4>>2] = $3;
 $5 = (_stbtt__find_table($data2,$fontstart,14984)|0);
 $6 = ((($info)) + 20|0);
 HEAP32[$6>>2] = $5;
 $7 = (_stbtt__find_table($data2,$fontstart,14992)|0);
 $8 = ((($info)) + 24|0);
 HEAP32[$8>>2] = $7;
 $9 = (_stbtt__find_table($data2,$fontstart,15000)|0);
 $10 = ((($info)) + 28|0);
 HEAP32[$10>>2] = $9;
 $11 = (_stbtt__find_table($data2,$fontstart,15008)|0);
 $12 = ((($info)) + 32|0);
 HEAP32[$12>>2] = $11;
 $13 = (_stbtt__find_table($data2,$fontstart,15016)|0);
 $14 = ((($info)) + 36|0);
 HEAP32[$14>>2] = $13;
 $15 = ($2|0)==(0);
 if ($15) {
  $$0 = 0;
  return ($$0|0);
 }
 $16 = HEAP32[$4>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 }
 $18 = HEAP32[$6>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = 0;
  return ($$0|0);
 }
 $20 = HEAP32[$8>>2]|0;
 $21 = ($20|0)==(0);
 if ($21) {
  $$0 = 0;
  return ($$0|0);
 }
 $22 = HEAP32[$10>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $$0 = 0;
  return ($$0|0);
 }
 $24 = HEAP32[$12>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  $$0 = 0;
  return ($$0|0);
 }
 $26 = (_stbtt__find_table($data2,$fontstart,15024)|0);
 $27 = ($26|0)==(0);
 if ($27) {
  $32 = ((($info)) + 12|0);
  HEAP32[$32>>2] = 65535;
 } else {
  $$sum5 = (($26) + 4)|0;
  $28 = (($data2) + ($$sum5)|0);
  $29 = (_ttUSHORT($28)|0);
  $30 = $29&65535;
  $31 = ((($info)) + 12|0);
  HEAP32[$31>>2] = $30;
 }
 $$sum = (($2) + 2)|0;
 $33 = (($data2) + ($$sum)|0);
 $34 = (_ttUSHORT($33)|0);
 $35 = ((($info)) + 40|0);
 HEAP32[$35>>2] = 0;
 $36 = ($34<<16>>16)==(0);
 if ($36) {
  $$0 = 0;
  return ($$0|0);
 }
 $37 = (($2) + 4)|0;
 $38 = $34&65535;
 $i$06 = 0;
 while(1) {
  $39 = $i$06 << 3;
  $40 = (($37) + ($39))|0;
  $41 = (($data2) + ($40)|0);
  $42 = (_ttUSHORT($41)|0);
  $43 = $42&65535;
  if ((($43|0) == 0)) {
   $$sum2 = (($40) + 4)|0;
   $50 = (($data2) + ($$sum2)|0);
   $51 = (_ttULONG($50)|0);
   $52 = (($51) + ($2))|0;
   HEAP32[$35>>2] = $52;
  } else if ((($43|0) == 3)) {
   $$sum3 = (($40) + 2)|0;
   $44 = (($data2) + ($$sum3)|0);
   $45 = (_ttUSHORT($44)|0);
   $46 = $45&65535;
   if ((($46|0) == 10) | (($46|0) == 1)) {
    $$sum4 = (($40) + 4)|0;
    $47 = (($data2) + ($$sum4)|0);
    $48 = (_ttULONG($47)|0);
    $49 = (($48) + ($2))|0;
    HEAP32[$35>>2] = $49;
   }
  }
  $53 = (($i$06) + 1)|0;
  $exitcond = ($53|0)==($38|0);
  if ($exitcond) {
   break;
  } else {
   $i$06 = $53;
  }
 }
 $$pr = HEAP32[$35>>2]|0;
 $54 = ($$pr|0)==(0);
 if ($54) {
  $$0 = 0;
  return ($$0|0);
 }
 $55 = HEAP32[$6>>2]|0;
 $$sum1 = (($55) + 50)|0;
 $56 = (($data2) + ($$sum1)|0);
 $57 = (_ttUSHORT($56)|0);
 $58 = $57&65535;
 $59 = ((($info)) + 44|0);
 HEAP32[$59>>2] = $58;
 $$0 = 1;
 return ($$0|0);
}
function _stbtt_FindGlyphIndex($info,$unicode_codepoint) {
 $info = $info|0;
 $unicode_codepoint = $unicode_codepoint|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lcssa50 = 0, $$lcssa50$lcssa = 0, $$neg = 0, $$search$1 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum2$lcssa = 0, $$sum2$lcssa$lcssa = 0;
 var $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0;
 var $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $entrySelector$039 = 0, $high$0 = 0, $high$0$lcssa49 = 0, $high$0$ph = 0, $low$0$ph = 0, $search$1$lcssa = 0, $search$138 = 0, $searchRange$040 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($info)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3)|0);
 $5 = (_ttUSHORT($4)|0);
 if ((($5<<16>>16) == 4)) {
  $$sum5 = (($3) + 6)|0;
  $28 = (($1) + ($$sum5)|0);
  $29 = (_ttUSHORT($28)|0);
  $30 = ($29&65535) >>> 1;
  $31 = (($3) + 14)|0;
  $32 = ($unicode_codepoint|0)>(65535);
  if ($32) {
   $$0 = 0;
   return ($$0|0);
  }
  $$sum8 = (($3) + 12)|0;
  $33 = (($1) + ($$sum8)|0);
  $34 = (_ttUSHORT($33)|0);
  $$sum7 = (($3) + 10)|0;
  $35 = (($1) + ($$sum7)|0);
  $36 = (_ttUSHORT($35)|0);
  $37 = ($34&65535) >>> 1;
  $38 = $37&65535;
  $39 = $38 << 1;
  $$sum9 = (($39) + ($31))|0;
  $40 = (($1) + ($$sum9)|0);
  $41 = (_ttUSHORT($40)|0);
  $42 = $41&65535;
  $43 = ($42|0)>($unicode_codepoint|0);
  $$ = $43 ? $31 : $$sum9;
  $44 = (($$) + -2)|0;
  $45 = ($36<<16>>16)==(0);
  if ($45) {
   $search$1$lcssa = $44;
  } else {
   $$sum6 = (($3) + 8)|0;
   $46 = (($1) + ($$sum6)|0);
   $47 = (_ttUSHORT($46)|0);
   $48 = ($47&65535) >>> 1;
   $entrySelector$039 = $36;$search$138 = $44;$searchRange$040 = $48;
   while(1) {
    $49 = ($searchRange$040&65535) >>> 1;
    $50 = $49&65535;
    $51 = $50 << 1;
    $$sum27 = (($51) + ($search$138))|0;
    $52 = (($1) + ($$sum27)|0);
    $53 = (_ttUSHORT($52)|0);
    $54 = $53&65535;
    $55 = ($54|0)<($unicode_codepoint|0);
    $$search$1 = $55 ? $$sum27 : $search$138;
    $56 = (($entrySelector$039) + -1)<<16>>16;
    $57 = ($56<<16>>16)==(0);
    if ($57) {
     $search$1$lcssa = $$search$1;
     break;
    } else {
     $entrySelector$039 = $56;$search$138 = $$search$1;$searchRange$040 = $49;
    }
   }
  }
  $$neg = (-14 - ($3))|0;
  $58 = (($$neg) + 2)|0;
  $59 = (($58) + ($search$1$lcssa))|0;
  $60 = $59 & 131070;
  $$sum10 = (($60) + ($31))|0;
  $61 = (($1) + ($$sum10)|0);
  $62 = (_ttUSHORT($61)|0);
  $63 = $62&65535;
  $64 = ($63|0)<($unicode_codepoint|0);
  if ($64) {
   ___assert_fail((15080|0),(15032|0),1090,(15056|0));
   // unreachable;
  }
  $65 = $30&65535;
  $66 = $65 << 1;
  $$sum12 = (($3) + 16)|0;
  $$sum13 = (($$sum12) + ($66))|0;
  $$sum14 = (($$sum13) + ($60))|0;
  $67 = (($1) + ($$sum14)|0);
  $68 = (_ttUSHORT($67)|0);
  $69 = $68&65535;
  $70 = ($69|0)>($unicode_codepoint|0);
  if ($70) {
   $$0 = 0;
   return ($$0|0);
  }
  $71 = ($65*6)|0;
  $$sum15 = (($3) + 16)|0;
  $$sum16 = (($$sum15) + ($71))|0;
  $$sum17 = (($$sum16) + ($60))|0;
  $72 = (($1) + ($$sum17)|0);
  $73 = (_ttUSHORT($72)|0);
  $74 = ($73<<16>>16)==(0);
  if ($74) {
   $75 = $65 << 2;
   $$sum24 = (($3) + 16)|0;
   $$sum25 = (($$sum24) + ($75))|0;
   $$sum26 = (($$sum25) + ($60))|0;
   $76 = (($1) + ($$sum26)|0);
   $77 = (_ttSHORT($76)|0);
   $78 = $77&65535;
   $79 = (($78) + ($unicode_codepoint))|0;
   $80 = $79 & 65535;
   $$0 = $80;
   return ($$0|0);
  } else {
   $81 = $73&65535;
   $82 = (($unicode_codepoint) - ($69))|0;
   $83 = $82 << 1;
   $$sum19 = (($3) + 16)|0;
   $$sum20 = (($$sum19) + ($71))|0;
   $$sum21 = (($$sum20) + ($60))|0;
   $$sum22 = (($$sum21) + ($83))|0;
   $$sum23 = (($$sum22) + ($81))|0;
   $84 = (($1) + ($$sum23)|0);
   $85 = (_ttUSHORT($84)|0);
   $86 = $85&65535;
   $$0 = $86;
   return ($$0|0);
  }
 } else if ((($5<<16>>16) == 2)) {
  ___assert_fail((27216|0),(15032|0),1054,(15056|0));
  // unreachable;
 } else if ((($5<<16>>16) == 6)) {
  $$sum28 = (($3) + 6)|0;
  $14 = (($1) + ($$sum28)|0);
  $15 = (_ttUSHORT($14)|0);
  $16 = $15&65535;
  $17 = ($16>>>0)>($unicode_codepoint>>>0);
  if ($17) {
   $$0 = 0;
   return ($$0|0);
  }
  $$sum29 = (($3) + 8)|0;
  $18 = (($1) + ($$sum29)|0);
  $19 = (_ttUSHORT($18)|0);
  $20 = $19&65535;
  $21 = (($20) + ($16))|0;
  $22 = ($21>>>0)>($unicode_codepoint>>>0);
  if (!($22)) {
   $$0 = 0;
   return ($$0|0);
  }
  $$sum30 = (($3) + 10)|0;
  $23 = (($unicode_codepoint) - ($16))|0;
  $24 = $23 << 1;
  $$sum31 = (($$sum30) + ($24))|0;
  $25 = (($1) + ($$sum31)|0);
  $26 = (_ttUSHORT($25)|0);
  $27 = $26&65535;
  $$0 = $27;
  return ($$0|0);
 } else if ((($5<<16>>16) == 0)) {
  $$sum32 = (($3) + 2)|0;
  $6 = (($1) + ($$sum32)|0);
  $7 = (_ttUSHORT($6)|0);
  $8 = $7&65535;
  $9 = (($8) + -6)|0;
  $10 = ($9|0)>($unicode_codepoint|0);
  if (!($10)) {
   $$0 = 0;
   return ($$0|0);
  }
  $$sum33 = (($unicode_codepoint) + 6)|0;
  $$sum34 = (($$sum33) + ($3))|0;
  $11 = (($1) + ($$sum34)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $$0 = $13;
  return ($$0|0);
 } else {
  $87 = ($5<<16>>16)==(12);
  $88 = $5 & -2;
  $switch = ($88<<16>>16)==(12);
  if (!($switch)) {
   ___assert_fail((27216|0),(15032|0),1125,(15056|0));
   // unreachable;
  }
  $$sum = (($3) + 12)|0;
  $89 = (($1) + ($$sum)|0);
  $90 = (_ttULONG($89)|0);
  $$sum1 = (($3) + 16)|0;
  $high$0$ph = $90;$low$0$ph = 0;
  L40: while(1) {
   $high$0 = $high$0$ph;
   while(1) {
    $91 = ($high$0|0)>($low$0$ph|0);
    if (!($91)) {
     $$0 = 0;
     label = 27;
     break L40;
    }
    $92 = (($high$0) - ($low$0$ph))|0;
    $93 = $92 >> 1;
    $94 = (($93) + ($low$0$ph))|0;
    $95 = ($94*12)|0;
    $$sum2 = (($$sum1) + ($95))|0;
    $96 = (($1) + ($$sum2)|0);
    $97 = (_ttULONG($96)|0);
    $98 = ($97>>>0)>($unicode_codepoint>>>0);
    if ($98) {
     $high$0 = $94;
    } else {
     $$lcssa = $94;$$lcssa50 = $97;$$sum2$lcssa = $$sum2;$high$0$lcssa49 = $high$0;
     break;
    }
   }
   $$sum3 = (($$sum2$lcssa) + 4)|0;
   $99 = (($1) + ($$sum3)|0);
   $100 = (_ttULONG($99)|0);
   $101 = ($100>>>0)<($unicode_codepoint>>>0);
   $102 = (($$lcssa) + 1)|0;
   if ($101) {
    $high$0$ph = $high$0$lcssa49;$low$0$ph = $102;
   } else {
    $$lcssa50$lcssa = $$lcssa50;$$sum2$lcssa$lcssa = $$sum2$lcssa;
    break;
   }
  }
  if ((label|0) == 27) {
   return ($$0|0);
  }
  $$sum4 = (($$sum2$lcssa$lcssa) + 8)|0;
  $103 = (($1) + ($$sum4)|0);
  $104 = (_ttULONG($103)|0);
  if (!($87)) {
   $$0 = $104;
   return ($$0|0);
  }
  $105 = (($unicode_codepoint) - ($$lcssa50$lcssa))|0;
  $106 = (($105) + ($104))|0;
  $$0 = $106;
  return ($$0|0);
 }
 return (0)|0;
}
function _stbtt_GetGlyphShape($info,$glyph_index,$pvertices) {
 $info = $info|0;
 $glyph_index = $glyph_index|0;
 $pvertices = $pvertices|0;
 var $$0 = 0, $$sum = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0;
 var $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0.0;
 var $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0;
 var $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $comp$046 = 0, $comp$1 = 0, $comp$2 = 0, $comp_verts = 0, $cx$024 = 0, $cx$1 = 0, $cx$1$lcssa = 0, $cy$025 = 0, $cy$1 = 0, $cy$1$lcssa = 0, $exitcond = 0, $exitcond51 = 0, $exitcond52 = 0, $exitcond53 = 0, $flagcount$043 = 0, $flagcount$1 = 0, $flags$044 = 0;
 var $flags$1 = 0, $i$042 = 0, $i$140 = 0, $i$237 = 0, $i$333 = 0, $i$4 = 0, $i$5 = 0, $i2$045 = 0, $j$032 = 0, $j$1 = 0, $mtx$sroa$0$0 = 0.0, $mtx$sroa$15$0 = 0.0, $mtx$sroa$22$0 = 0.0, $mtx$sroa$29$0 = 0.0, $mtx$sroa$33$0 = 0.0, $mtx$sroa$8$0 = 0.0, $next_move$031 = 0, $next_move$1 = 0, $num_vertices$034 = 0, $num_vertices$1 = 0;
 var $num_vertices$3 = 0, $num_vertices$3$lcssa = 0, $num_vertices$447 = 0, $num_vertices$5 = 0, $num_vertices$6 = 0, $points$041 = 0, $points$1 = 0, $points$1$lcssa = 0, $points$239 = 0, $points$3 = 0, $points$3$lcssa = 0, $points$436 = 0, $points$5 = 0, $scx$028 = 0, $scx$1 = 0, $scx$2 = 0, $scx$2$lcssa = 0, $scy$029 = 0, $scy$1 = 0, $scy$2 = 0;
 var $scy$2$lcssa = 0, $sext = 0, $sext8 = 0, $sqrtf = 0.0, $sqrtf1 = 0.0, $start_off$023 = 0, $start_off$1 = 0, $start_off$1$lcssa = 0, $sx$026 = 0, $sx$1 = 0, $sx$2 = 0, $sx$2$lcssa = 0, $sy$027 = 0, $sy$1 = 0, $sy$2 = 0, $sy$2$lcssa = 0, $vertices$048 = 0, $vertices$048$lcssa60 = 0, $vertices$1 = 0, $vertices$2 = 0;
 var $was_off$030 = 0, $was_off$1 = 0, $was_off$1$lcssa = 0, $x$038 = 0, $x$1 = 0, $y$035 = 0, $y$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $comp_verts = sp;
 $0 = ((($info)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_stbtt__GetGlyfOffset($info,$glyph_index)|0);
 HEAP32[$pvertices>>2] = 0;
 $3 = ($2|0)<(0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($1) + ($2)|0);
 $5 = (_ttSHORT($4)|0);
 $6 = ($5<<16>>16)>(0);
 L4: do {
  if ($6) {
   $7 = $5 << 16 >> 16;
   $$sum2 = (($2) + 10)|0;
   $8 = $7 << 1;
   $$sum3 = (($8) + ($$sum2))|0;
   $9 = (($1) + ($$sum3)|0);
   $10 = (_ttUSHORT($9)|0);
   $$sum6 = (($$sum3) + -2)|0;
   $11 = (($1) + ($$sum6)|0);
   $12 = (_ttUSHORT($11)|0);
   $13 = $12&65535;
   $14 = (($13) + 1)|0;
   $15 = (($14) + ($8))|0;
   $16 = ($15*10)|0;
   $17 = (_malloc($16)|0);
   $18 = ($17|0)==(0|0);
   if ($18) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $$sum4 = (($$sum3) + 2)|0;
   $19 = $10&65535;
   $$sum5 = (($$sum4) + ($19))|0;
   $20 = (($1) + ($$sum5)|0);
   $21 = $12&65535;
   $flagcount$043 = 0;$flags$044 = 0;$i$042 = 0;$points$041 = $20;
   while(1) {
    $23 = ($flagcount$043<<24>>24)==(0);
    if ($23) {
     $24 = ((($points$041)) + 1|0);
     $25 = HEAP8[$points$041>>0]|0;
     $26 = $25 & 8;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      $flagcount$1 = 0;$flags$1 = $25;$points$1 = $24;
     } else {
      $28 = ((($points$041)) + 2|0);
      $29 = HEAP8[$24>>0]|0;
      $flagcount$1 = $29;$flags$1 = $25;$points$1 = $28;
     }
    } else {
     $30 = (($flagcount$043) + -1)<<24>>24;
     $flagcount$1 = $30;$flags$1 = $flags$044;$points$1 = $points$041;
    }
    $31 = (($i$042) + ($8))|0;
    $32 = (((($17) + (($31*10)|0)|0)) + 8|0);
    HEAP8[$32>>0] = $flags$1;
    $33 = (($i$042) + 1)|0;
    $exitcond52 = ($i$042|0)==($21|0);
    if ($exitcond52) {
     $points$1$lcssa = $points$1;
     break;
    } else {
     $flagcount$043 = $flagcount$1;$flags$044 = $flags$1;$i$042 = $33;$points$041 = $points$1;
    }
   }
   $22 = $12&65535;
   $i$140 = 0;$points$239 = $points$1$lcssa;$x$038 = 0;
   while(1) {
    $35 = (($i$140) + ($8))|0;
    $36 = (((($17) + (($35*10)|0)|0)) + 8|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = $38 & 2;
    $40 = ($39|0)==(0);
    if ($40) {
     $49 = $38 & 16;
     $50 = ($49|0)==(0);
     if ($50) {
      $51 = HEAP8[$points$239>>0]|0;
      $52 = $51&255;
      $53 = $52 << 8;
      $54 = ((($points$239)) + 1|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = $53 | $56;
      $sext8 = $57 << 16;
      $58 = $sext8 >> 16;
      $59 = (($58) + ($x$038))|0;
      $60 = ((($points$239)) + 2|0);
      $points$3 = $60;$x$1 = $59;
     } else {
      $points$3 = $points$239;$x$1 = $x$038;
     }
    } else {
     $41 = ((($points$239)) + 1|0);
     $42 = HEAP8[$points$239>>0]|0;
     $43 = $38 & 16;
     $44 = ($43|0)!=(0);
     $45 = $42&255;
     $46 = (0 - ($45))|0;
     $47 = $44 ? $45 : $46;
     $48 = (($47) + ($x$038))|0;
     $points$3 = $41;$x$1 = $48;
    }
    $61 = $x$1&65535;
    $62 = (($17) + (($35*10)|0)|0);
    HEAP16[$62>>1] = $61;
    $63 = (($i$140) + 1)|0;
    $exitcond51 = ($i$140|0)==($22|0);
    if ($exitcond51) {
     $points$3$lcssa = $points$3;
     break;
    } else {
     $i$140 = $63;$points$239 = $points$3;$x$038 = $x$1;
    }
   }
   $34 = $12&65535;
   $i$237 = 0;$points$436 = $points$3$lcssa;$y$035 = 0;
   while(1) {
    $64 = (($i$237) + ($8))|0;
    $65 = (((($17) + (($64*10)|0)|0)) + 8|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = $67 & 4;
    $69 = ($68|0)==(0);
    if ($69) {
     $78 = $67 & 32;
     $79 = ($78|0)==(0);
     if ($79) {
      $80 = HEAP8[$points$436>>0]|0;
      $81 = $80&255;
      $82 = $81 << 8;
      $83 = ((($points$436)) + 1|0);
      $84 = HEAP8[$83>>0]|0;
      $85 = $84&255;
      $86 = $82 | $85;
      $sext = $86 << 16;
      $87 = $sext >> 16;
      $88 = (($87) + ($y$035))|0;
      $89 = ((($points$436)) + 2|0);
      $points$5 = $89;$y$1 = $88;
     } else {
      $points$5 = $points$436;$y$1 = $y$035;
     }
    } else {
     $70 = ((($points$436)) + 1|0);
     $71 = HEAP8[$points$436>>0]|0;
     $72 = $67 & 32;
     $73 = ($72|0)!=(0);
     $74 = $71&255;
     $75 = (0 - ($74))|0;
     $76 = $73 ? $74 : $75;
     $77 = (($76) + ($y$035))|0;
     $points$5 = $70;$y$1 = $77;
    }
    $90 = $y$1&65535;
    $91 = (((($17) + (($64*10)|0)|0)) + 2|0);
    HEAP16[$91>>1] = $90;
    $92 = (($i$237) + 1)|0;
    $exitcond = ($i$237|0)==($34|0);
    if ($exitcond) {
     $cx$024 = 0;$cy$025 = 0;$i$333 = 0;$j$032 = 0;$next_move$031 = 0;$num_vertices$034 = 0;$scx$028 = 0;$scy$029 = 0;$start_off$023 = 0;$sx$026 = 0;$sy$027 = 0;$was_off$030 = 0;
     break;
    } else {
     $i$237 = $92;$points$436 = $points$5;$y$035 = $y$1;
    }
   }
   while(1) {
    $93 = (($i$333) + ($8))|0;
    $94 = (((($17) + (($93*10)|0)|0)) + 8|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = (($17) + (($93*10)|0)|0);
    $97 = HEAP16[$96>>1]|0;
    $98 = $97 << 16 >> 16;
    $99 = (((($17) + (($93*10)|0)|0)) + 2|0);
    $100 = HEAP16[$99>>1]|0;
    $101 = $100 << 16 >> 16;
    $102 = ($next_move$031|0)==($i$333|0);
    do {
     if ($102) {
      $103 = ($i$333|0)==(0);
      if ($103) {
       $num_vertices$1 = $num_vertices$034;
      } else {
       $104 = (_stbtt__close_shape($17,$num_vertices$034,$was_off$030,$start_off$023,$sx$026,$sy$027,$scx$028,$scy$029,$cx$024,$cy$025)|0);
       $num_vertices$1 = $104;
      }
      $105 = $95 & 1;
      $106 = ($105<<24>>24)==(0);
      $107 = $105 ^ 1;
      $108 = $107&255;
      do {
       if ($106) {
        $109 = (($93) + 1)|0;
        $110 = (((($17) + (($109*10)|0)|0)) + 8|0);
        $111 = HEAP8[$110>>0]|0;
        $112 = $111 & 1;
        $113 = ($112<<24>>24)==(0);
        $114 = (($17) + (($109*10)|0)|0);
        $115 = HEAP16[$114>>1]|0;
        $116 = $115 << 16 >> 16;
        if ($113) {
         $117 = (($116) + ($98))|0;
         $118 = $117 >> 1;
         $119 = (((($17) + (($109*10)|0)|0)) + 2|0);
         $120 = HEAP16[$119>>1]|0;
         $121 = $120 << 16 >> 16;
         $122 = (($121) + ($101))|0;
         $123 = $122 >> 1;
         $i$4 = $i$333;$scx$1 = $98;$scy$1 = $101;$sx$1 = $118;$sy$1 = $123;
         break;
        } else {
         $124 = (((($17) + (($109*10)|0)|0)) + 2|0);
         $125 = HEAP16[$124>>1]|0;
         $126 = $125 << 16 >> 16;
         $127 = (($i$333) + 1)|0;
         $i$4 = $127;$scx$1 = $98;$scy$1 = $101;$sx$1 = $116;$sy$1 = $126;
         break;
        }
       } else {
        $i$4 = $i$333;$scx$1 = $scx$028;$scy$1 = $scy$029;$sx$1 = $98;$sy$1 = $101;
       }
      } while(0);
      $128 = (($num_vertices$1) + 1)|0;
      $129 = (($17) + (($num_vertices$1*10)|0)|0);
      _stbtt_setvertex($129,1,$sx$1,$sy$1,0,0);
      $130 = $j$032 << 1;
      $$sum7 = (($130) + ($$sum2))|0;
      $131 = (($1) + ($$sum7)|0);
      $132 = (_ttUSHORT($131)|0);
      $133 = $132&65535;
      $134 = (($133) + 1)|0;
      $135 = (($j$032) + 1)|0;
      $cx$1 = $cx$024;$cy$1 = $cy$025;$i$5 = $i$4;$j$1 = $135;$next_move$1 = $134;$num_vertices$3 = $128;$scx$2 = $scx$1;$scy$2 = $scy$1;$start_off$1 = $108;$sx$2 = $sx$1;$sy$2 = $sy$1;$was_off$1 = 0;
     } else {
      $136 = $95 & 1;
      $137 = ($136<<24>>24)==(0);
      $138 = ($was_off$030|0)!=(0);
      if ($137) {
       if (!($138)) {
        $cx$1 = $98;$cy$1 = $101;$i$5 = $i$333;$j$1 = $j$032;$next_move$1 = $next_move$031;$num_vertices$3 = $num_vertices$034;$scx$2 = $scx$028;$scy$2 = $scy$029;$start_off$1 = $start_off$023;$sx$2 = $sx$026;$sy$2 = $sy$027;$was_off$1 = 1;
        break;
       }
       $139 = (($num_vertices$034) + 1)|0;
       $140 = (($17) + (($num_vertices$034*10)|0)|0);
       $141 = (($98) + ($cx$024))|0;
       $142 = $141 >> 1;
       $143 = (($101) + ($cy$025))|0;
       $144 = $143 >> 1;
       _stbtt_setvertex($140,3,$142,$144,$cx$024,$cy$025);
       $cx$1 = $98;$cy$1 = $101;$i$5 = $i$333;$j$1 = $j$032;$next_move$1 = $next_move$031;$num_vertices$3 = $139;$scx$2 = $scx$028;$scy$2 = $scy$029;$start_off$1 = $start_off$023;$sx$2 = $sx$026;$sy$2 = $sy$027;$was_off$1 = 1;
       break;
      }
      $145 = (($num_vertices$034) + 1)|0;
      $146 = (($17) + (($num_vertices$034*10)|0)|0);
      if ($138) {
       _stbtt_setvertex($146,3,$98,$101,$cx$024,$cy$025);
       $cx$1 = $cx$024;$cy$1 = $cy$025;$i$5 = $i$333;$j$1 = $j$032;$next_move$1 = $next_move$031;$num_vertices$3 = $145;$scx$2 = $scx$028;$scy$2 = $scy$029;$start_off$1 = $start_off$023;$sx$2 = $sx$026;$sy$2 = $sy$027;$was_off$1 = 0;
       break;
      } else {
       _stbtt_setvertex($146,2,$98,$101,0,0);
       $cx$1 = $cx$024;$cy$1 = $cy$025;$i$5 = $i$333;$j$1 = $j$032;$next_move$1 = $next_move$031;$num_vertices$3 = $145;$scx$2 = $scx$028;$scy$2 = $scy$029;$start_off$1 = $start_off$023;$sx$2 = $sx$026;$sy$2 = $sy$027;$was_off$1 = 0;
       break;
      }
     }
    } while(0);
    $147 = (($i$5) + 1)|0;
    $148 = ($147|0)<($14|0);
    if ($148) {
     $cx$024 = $cx$1;$cy$025 = $cy$1;$i$333 = $147;$j$032 = $j$1;$next_move$031 = $next_move$1;$num_vertices$034 = $num_vertices$3;$scx$028 = $scx$2;$scy$029 = $scy$2;$start_off$023 = $start_off$1;$sx$026 = $sx$2;$sy$027 = $sy$2;$was_off$030 = $was_off$1;
    } else {
     $cx$1$lcssa = $cx$1;$cy$1$lcssa = $cy$1;$num_vertices$3$lcssa = $num_vertices$3;$scx$2$lcssa = $scx$2;$scy$2$lcssa = $scy$2;$start_off$1$lcssa = $start_off$1;$sx$2$lcssa = $sx$2;$sy$2$lcssa = $sy$2;$was_off$1$lcssa = $was_off$1;
     break;
    }
   }
   $149 = (_stbtt__close_shape($17,$num_vertices$3$lcssa,$was_off$1$lcssa,$start_off$1$lcssa,$sx$2$lcssa,$sy$2$lcssa,$scx$2$lcssa,$scy$2$lcssa,$cx$1$lcssa,$cy$1$lcssa)|0);
   $num_vertices$6 = $149;$vertices$2 = $17;
  } else {
   $150 = ($5<<16>>16)==(-1);
   if (!($150)) {
    $274 = ($5<<16>>16)<(0);
    if (!($274)) {
     $num_vertices$6 = 0;$vertices$2 = 0;
     break;
    }
    ___assert_fail((27216|0),(15032|0),1420,(15136|0));
    // unreachable;
   }
   $$sum = (($2) + 10)|0;
   $151 = (($1) + ($$sum)|0);
   $comp$046 = $151;$num_vertices$447 = 0;$vertices$048 = 0;
   while(1) {
    HEAP32[$comp_verts>>2] = 0;
    $152 = (_ttSHORT($comp$046)|0);
    $153 = ((($comp$046)) + 2|0);
    $154 = (_ttSHORT($153)|0);
    $155 = ((($comp$046)) + 4|0);
    $156 = $152&65535;
    $157 = $156 & 2;
    $158 = ($157|0)==(0);
    if ($158) {
     label = 44;
     break;
    }
    $159 = $156 & 1;
    $160 = ($159|0)==(0);
    if ($160) {
     $167 = HEAP8[$155>>0]|0;
     $168 = (+($167<<24>>24));
     $169 = ((($comp$046)) + 5|0);
     $170 = HEAP8[$169>>0]|0;
     $171 = (+($170<<24>>24));
     $172 = ((($comp$046)) + 6|0);
     $179 = 8;$190 = 10;$205 = 12;$210 = 14;$comp$1 = $172;$mtx$sroa$29$0 = $168;$mtx$sroa$33$0 = $171;
    } else {
     $161 = (_ttSHORT($155)|0);
     $162 = (+($161<<16>>16));
     $163 = ((($comp$046)) + 6|0);
     $164 = (_ttSHORT($163)|0);
     $165 = (+($164<<16>>16));
     $166 = ((($comp$046)) + 8|0);
     $179 = 10;$190 = 12;$205 = 14;$210 = 16;$comp$1 = $166;$mtx$sroa$29$0 = $162;$mtx$sroa$33$0 = $165;
    }
    $173 = $156 & 8;
    $174 = ($173|0)==(0);
    do {
     if ($174) {
      $180 = $156 & 64;
      $181 = ($180|0)==(0);
      if (!($181)) {
       $182 = (_ttSHORT($comp$1)|0);
       $183 = (+($182<<16>>16));
       $184 = $183 * 6.103515625E-5;
       $185 = (($comp$046) + ($179)|0);
       $186 = (_ttSHORT($185)|0);
       $187 = (+($186<<16>>16));
       $188 = $187 * 6.103515625E-5;
       $189 = (($comp$046) + ($190)|0);
       $comp$2 = $189;$mtx$sroa$0$0 = $184;$mtx$sroa$15$0 = 0.0;$mtx$sroa$22$0 = $188;$mtx$sroa$8$0 = 0.0;
       break;
      }
      $191 = $156 & 128;
      $192 = ($191|0)==(0);
      if ($192) {
       $comp$2 = $comp$1;$mtx$sroa$0$0 = 1.0;$mtx$sroa$15$0 = 0.0;$mtx$sroa$22$0 = 1.0;$mtx$sroa$8$0 = 0.0;
      } else {
       $193 = (_ttSHORT($comp$1)|0);
       $194 = (+($193<<16>>16));
       $195 = $194 * 6.103515625E-5;
       $196 = (($comp$046) + ($179)|0);
       $197 = (_ttSHORT($196)|0);
       $198 = (+($197<<16>>16));
       $199 = $198 * 6.103515625E-5;
       $200 = (($comp$046) + ($190)|0);
       $201 = (_ttSHORT($200)|0);
       $202 = (+($201<<16>>16));
       $203 = $202 * 6.103515625E-5;
       $204 = (($comp$046) + ($205)|0);
       $206 = (_ttSHORT($204)|0);
       $207 = (+($206<<16>>16));
       $208 = $207 * 6.103515625E-5;
       $209 = (($comp$046) + ($210)|0);
       $comp$2 = $209;$mtx$sroa$0$0 = $195;$mtx$sroa$15$0 = $203;$mtx$sroa$22$0 = $208;$mtx$sroa$8$0 = $199;
      }
     } else {
      $175 = (_ttSHORT($comp$1)|0);
      $176 = (+($175<<16>>16));
      $177 = $176 * 6.103515625E-5;
      $178 = (($comp$046) + ($179)|0);
      $comp$2 = $178;$mtx$sroa$0$0 = $177;$mtx$sroa$15$0 = 0.0;$mtx$sroa$22$0 = $177;$mtx$sroa$8$0 = 0.0;
     }
    } while(0);
    $211 = $mtx$sroa$0$0 * $mtx$sroa$0$0;
    $212 = $mtx$sroa$8$0 * $mtx$sroa$8$0;
    $213 = $212 + $211;
    $sqrtf = (+Math_sqrt((+$213)));
    $214 = $mtx$sroa$15$0 * $mtx$sroa$15$0;
    $215 = $mtx$sroa$22$0 * $mtx$sroa$22$0;
    $216 = $215 + $214;
    $sqrtf1 = (+Math_sqrt((+$216)));
    $217 = $154&65535;
    $218 = (_stbtt_GetGlyphShape($info,$217,$comp_verts)|0);
    $219 = ($218|0)>(0);
    if ($219) {
     $220 = HEAP32[$comp_verts>>2]|0;
     $i2$045 = 0;
     while(1) {
      $221 = (($220) + (($i2$045*10)|0)|0);
      $222 = HEAP16[$221>>1]|0;
      $223 = (((($220) + (($i2$045*10)|0)|0)) + 2|0);
      $224 = HEAP16[$223>>1]|0;
      $225 = (+($222<<16>>16));
      $226 = $mtx$sroa$0$0 * $225;
      $227 = (+($224<<16>>16));
      $228 = $mtx$sroa$15$0 * $227;
      $229 = $226 + $228;
      $230 = $mtx$sroa$29$0 + $229;
      $231 = $sqrtf * $230;
      $232 = (~~(($231)));
      HEAP16[$221>>1] = $232;
      $233 = $mtx$sroa$8$0 * $225;
      $234 = $mtx$sroa$22$0 * $227;
      $235 = $233 + $234;
      $236 = $mtx$sroa$33$0 + $235;
      $237 = $sqrtf1 * $236;
      $238 = (~~(($237)));
      HEAP16[$223>>1] = $238;
      $239 = (((($220) + (($i2$045*10)|0)|0)) + 4|0);
      $240 = HEAP16[$239>>1]|0;
      $241 = (((($220) + (($i2$045*10)|0)|0)) + 6|0);
      $242 = HEAP16[$241>>1]|0;
      $243 = (+($240<<16>>16));
      $244 = $mtx$sroa$0$0 * $243;
      $245 = (+($242<<16>>16));
      $246 = $mtx$sroa$15$0 * $245;
      $247 = $244 + $246;
      $248 = $mtx$sroa$29$0 + $247;
      $249 = $sqrtf * $248;
      $250 = (~~(($249)));
      HEAP16[$239>>1] = $250;
      $251 = $mtx$sroa$8$0 * $243;
      $252 = $mtx$sroa$22$0 * $245;
      $253 = $251 + $252;
      $254 = $mtx$sroa$33$0 + $253;
      $255 = $sqrtf1 * $254;
      $256 = (~~(($255)));
      HEAP16[$241>>1] = $256;
      $257 = (($i2$045) + 1)|0;
      $exitcond53 = ($257|0)==($218|0);
      if ($exitcond53) {
       break;
      } else {
       $i2$045 = $257;
      }
     }
     $258 = (($218) + ($num_vertices$447))|0;
     $259 = ($258*10)|0;
     $260 = (_malloc($259)|0);
     $261 = ($260|0)==(0|0);
     if ($261) {
      $vertices$048$lcssa60 = $vertices$048;
      break;
     }
     $265 = ($num_vertices$447|0)>(0);
     if ($265) {
      $266 = ($num_vertices$447*10)|0;
      _memcpy(($260|0),($vertices$048|0),($266|0))|0;
     }
     $267 = (($260) + (($num_vertices$447*10)|0)|0);
     $268 = HEAP32[$comp_verts>>2]|0;
     $269 = ($218*10)|0;
     _memcpy(($267|0),($268|0),($269|0))|0;
     $270 = ($vertices$048|0)==(0|0);
     if (!($270)) {
      _free($vertices$048);
     }
     $271 = HEAP32[$comp_verts>>2]|0;
     _free($271);
     $num_vertices$5 = $258;$vertices$1 = $260;
    } else {
     $num_vertices$5 = $num_vertices$447;$vertices$1 = $vertices$048;
    }
    $272 = $156 & 32;
    $273 = ($272|0)==(0);
    if ($273) {
     $num_vertices$6 = $num_vertices$5;$vertices$2 = $vertices$1;
     break L4;
    } else {
     $comp$046 = $comp$2;$num_vertices$447 = $num_vertices$5;$vertices$048 = $vertices$1;
    }
   }
   if ((label|0) == 44) {
    ___assert_fail((27216|0),(15032|0),1367,(15136|0));
    // unreachable;
   }
   $262 = ($vertices$048$lcssa60|0)==(0|0);
   if (!($262)) {
    _free($vertices$048$lcssa60);
   }
   $263 = HEAP32[$comp_verts>>2]|0;
   $264 = ($263|0)==(0|0);
   if ($264) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   _free($263);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$pvertices>>2] = $vertices$2;
 $$0 = $num_vertices$6;
 STACKTOP = sp;return ($$0|0);
}
function _stbtt_GetGlyphBox($info,$glyph_index,$x0,$y0,$x1,$y1) {
 $info = $info|0;
 $glyph_index = $glyph_index|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $x1 = $x1|0;
 $y1 = $y1|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbtt__GetGlyfOffset($info,$glyph_index)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($x0|0)==(0|0);
 if (!($2)) {
  $3 = ((($info)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $$sum3 = (($0) + 2)|0;
  $5 = (($4) + ($$sum3)|0);
  $6 = (_ttSHORT($5)|0);
  $7 = $6 << 16 >> 16;
  HEAP32[$x0>>2] = $7;
 }
 $8 = ($y0|0)==(0|0);
 if (!($8)) {
  $9 = ((($info)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $$sum2 = (($0) + 4)|0;
  $11 = (($10) + ($$sum2)|0);
  $12 = (_ttSHORT($11)|0);
  $13 = $12 << 16 >> 16;
  HEAP32[$y0>>2] = $13;
 }
 $14 = ($x1|0)==(0|0);
 if (!($14)) {
  $15 = ((($info)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $$sum1 = (($0) + 6)|0;
  $17 = (($16) + ($$sum1)|0);
  $18 = (_ttSHORT($17)|0);
  $19 = $18 << 16 >> 16;
  HEAP32[$x1>>2] = $19;
 }
 $20 = ($y1|0)==(0|0);
 if ($20) {
  $$0 = 1;
  return ($$0|0);
 }
 $21 = ((($info)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $$sum = (($0) + 8)|0;
 $23 = (($22) + ($$sum)|0);
 $24 = (_ttSHORT($23)|0);
 $25 = $24 << 16 >> 16;
 HEAP32[$y1>>2] = $25;
 $$0 = 1;
 return ($$0|0);
}
function _stbtt_GetGlyphHMetrics($info,$glyph_index,$advanceWidth,$leftSideBearing) {
 $info = $info|0;
 $glyph_index = $glyph_index|0;
 $advanceWidth = $advanceWidth|0;
 $leftSideBearing = $leftSideBearing|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum47 = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($info)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 34)|0;
 $4 = (($1) + ($$sum)|0);
 $5 = (_ttUSHORT($4)|0);
 $6 = $5&65535;
 $7 = ($6|0)>($glyph_index|0);
 $8 = ($advanceWidth|0)!=(0|0);
 if ($7) {
  if ($8) {
   $9 = ((($info)) + 32|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $glyph_index << 2;
   $$sum6 = (($10) + ($11))|0;
   $12 = (($1) + ($$sum6)|0);
   $13 = (_ttSHORT($12)|0);
   $14 = $13 << 16 >> 16;
   HEAP32[$advanceWidth>>2] = $14;
  }
  $15 = ($leftSideBearing|0)==(0|0);
  if ($15) {
   return;
  }
  $16 = HEAP32[$0>>2]|0;
  $17 = ((($info)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $glyph_index << 2;
  $$sum47 = $19 | 2;
  $$sum5 = (($$sum47) + ($18))|0;
  $20 = (($16) + ($$sum5)|0);
  $21 = (_ttSHORT($20)|0);
  $22 = $21 << 16 >> 16;
  HEAP32[$leftSideBearing>>2] = $22;
  return;
 } else {
  if ($8) {
   $23 = ((($info)) + 32|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $6 << 2;
   $26 = (($25) + -4)|0;
   $$sum3 = (($26) + ($24))|0;
   $27 = (($1) + ($$sum3)|0);
   $28 = (_ttSHORT($27)|0);
   $29 = $28 << 16 >> 16;
   HEAP32[$advanceWidth>>2] = $29;
  }
  $30 = ($leftSideBearing|0)==(0|0);
  if ($30) {
   return;
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = ((($info)) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $6 << 2;
  $35 = (($glyph_index) - ($6))|0;
  $36 = $35 << 1;
  $$sum1 = (($36) + ($34))|0;
  $$sum2 = (($$sum1) + ($33))|0;
  $37 = (($31) + ($$sum2)|0);
  $38 = (_ttSHORT($37)|0);
  $39 = $38 << 16 >> 16;
  HEAP32[$leftSideBearing>>2] = $39;
  return;
 }
}
function _stbtt_ScaleForPixelHeight($info,$height) {
 $info = $info|0;
 $height = +$height;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($info)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 4)|0;
 $4 = (($1) + ($$sum)|0);
 $5 = (_ttSHORT($4)|0);
 $6 = $5 << 16 >> 16;
 $$sum1 = (($3) + 6)|0;
 $7 = (($1) + ($$sum1)|0);
 $8 = (_ttSHORT($7)|0);
 $9 = $8 << 16 >> 16;
 $10 = (($6) - ($9))|0;
 $11 = (+($10|0));
 $12 = $height / $11;
 return (+$12);
}
function _stbtt_ScaleForMappingEmToPixels($info,$pixels) {
 $info = $info|0;
 $pixels = +$pixels;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($info)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 18)|0;
 $4 = (($1) + ($$sum)|0);
 $5 = (_ttUSHORT($4)|0);
 $6 = $5&65535;
 $7 = (+($6|0));
 $8 = $pixels / $7;
 return (+$8);
}
function _stbtt_GetGlyphBitmapBoxSubpixel($font,$glyph,$scale_x,$scale_y,$shift_x,$shift_y,$ix0,$iy0,$ix1,$iy1) {
 $font = $font|0;
 $glyph = $glyph|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $ix0 = $ix0|0;
 $iy0 = $iy0|0;
 $ix1 = $ix1|0;
 $iy1 = $iy1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $ceilf = 0.0, $ceilf1 = 0.0, $floorf = 0.0, $floorf2 = 0.0, $x0 = 0, $x1 = 0, $y0 = 0, $y1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x0 = sp + 12|0;
 $y0 = sp;
 $x1 = sp + 4|0;
 $y1 = sp + 8|0;
 $0 = (_stbtt_GetGlyphBox($font,$glyph,$x0,$y0,$x1,$y1)|0);
 $1 = ($0|0)==(0);
 $2 = ($ix0|0)!=(0|0);
 if ($1) {
  if ($2) {
   HEAP32[$ix0>>2] = 0;
  }
  $3 = ($iy0|0)==(0|0);
  if (!($3)) {
   HEAP32[$iy0>>2] = 0;
  }
  $4 = ($ix1|0)==(0|0);
  if (!($4)) {
   HEAP32[$ix1>>2] = 0;
  }
  $5 = ($iy1|0)==(0|0);
  if ($5) {
   STACKTOP = sp;return;
  }
  HEAP32[$iy1>>2] = 0;
  STACKTOP = sp;return;
 } else {
  if ($2) {
   $6 = HEAP32[$x0>>2]|0;
   $7 = (+($6|0));
   $8 = $7 * $scale_x;
   $9 = $8 + $shift_x;
   $floorf2 = (+Math_floor((+$9)));
   $10 = (~~(($floorf2)));
   HEAP32[$ix0>>2] = $10;
  }
  $11 = ($iy0|0)==(0|0);
  if (!($11)) {
   $12 = HEAP32[$y1>>2]|0;
   $13 = (0 - ($12))|0;
   $14 = (+($13|0));
   $15 = $14 * $scale_y;
   $16 = $15 + $shift_y;
   $floorf = (+Math_floor((+$16)));
   $17 = (~~(($floorf)));
   HEAP32[$iy0>>2] = $17;
  }
  $18 = ($ix1|0)==(0|0);
  if (!($18)) {
   $19 = HEAP32[$x1>>2]|0;
   $20 = (+($19|0));
   $21 = $20 * $scale_x;
   $22 = $21 + $shift_x;
   $ceilf1 = (+Math_ceil((+$22)));
   $23 = (~~(($ceilf1)));
   HEAP32[$ix1>>2] = $23;
  }
  $24 = ($iy1|0)==(0|0);
  if ($24) {
   STACKTOP = sp;return;
  }
  $25 = HEAP32[$y0>>2]|0;
  $26 = (0 - ($25))|0;
  $27 = (+($26|0));
  $28 = $27 * $scale_y;
  $29 = $28 + $shift_y;
  $ceilf = (+Math_ceil((+$29)));
  $30 = (~~(($ceilf)));
  HEAP32[$iy1>>2] = $30;
  STACKTOP = sp;return;
 }
}
function _stbtt_GetGlyphBitmapBox($font,$glyph,$scale_x,$scale_y,$ix0,$iy0,$ix1,$iy1) {
 $font = $font|0;
 $glyph = $glyph|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $ix0 = $ix0|0;
 $iy0 = $iy0|0;
 $ix1 = $ix1|0;
 $iy1 = $iy1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _stbtt_GetGlyphBitmapBoxSubpixel($font,$glyph,$scale_x,$scale_y,0.0,0.0,$ix0,$iy0,$ix1,$iy1);
 return;
}
function _stbtt_GetCodepointBitmapBoxSubpixel($font,$codepoint,$scale_x,$scale_y,$shift_x,$shift_y,$ix0,$iy0,$ix1,$iy1) {
 $font = $font|0;
 $codepoint = $codepoint|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $ix0 = $ix0|0;
 $iy0 = $iy0|0;
 $ix1 = $ix1|0;
 $iy1 = $iy1|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbtt_FindGlyphIndex($font,$codepoint)|0);
 _stbtt_GetGlyphBitmapBoxSubpixel($font,$0,$scale_x,$scale_y,$shift_x,$shift_y,$ix0,$iy0,$ix1,$iy1);
 return;
}
function _stbtt_Rasterize($result,$flatness_in_pixels,$vertices,$num_verts,$scale_x,$scale_y,$shift_x,$shift_y,$x_off,$y_off,$invert,$userdata) {
 $result = $result|0;
 $flatness_in_pixels = +$flatness_in_pixels;
 $vertices = $vertices|0;
 $num_verts = $num_verts|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $x_off = $x_off|0;
 $y_off = $y_off|0;
 $invert = $invert|0;
 $userdata = $userdata|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $winding_count = 0, $winding_lengths = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $winding_count = sp + 4|0;
 $winding_lengths = sp;
 $0 = $scale_x > $scale_y;
 $1 = $0 ? $scale_y : $scale_x;
 $2 = $flatness_in_pixels / $1;
 $3 = (_stbtt_FlattenCurves($vertices,$num_verts,$2,$winding_lengths,$winding_count)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$winding_lengths>>2]|0;
 $6 = HEAP32[$winding_count>>2]|0;
 _stbtt__rasterize($result,$3,$5,$6,$scale_x,$scale_y,$shift_x,$shift_y,$x_off,$y_off,$invert);
 $7 = HEAP32[$winding_lengths>>2]|0;
 _free($7);
 _free($3);
 STACKTOP = sp;return;
}
function _stbtt_MakeGlyphBitmapSubpixel($info,$output,$out_w,$out_h,$out_stride,$scale_x,$scale_y,$shift_x,$shift_y,$glyph) {
 $info = $info|0;
 $output = $output|0;
 $out_w = $out_w|0;
 $out_h = $out_h|0;
 $out_stride = $out_stride|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $glyph = $glyph|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gbm = 0, $ix0 = 0, $iy0 = 0, $or$cond = 0, $vertices = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $ix0 = sp + 24|0;
 $iy0 = sp;
 $vertices = sp + 4|0;
 $gbm = sp + 8|0;
 $0 = (_stbtt_GetGlyphShape($info,$glyph,$vertices)|0);
 _stbtt_GetGlyphBitmapBoxSubpixel($info,$glyph,$scale_x,$scale_y,$shift_x,$shift_y,$ix0,$iy0,0,0);
 $1 = ((($gbm)) + 12|0);
 HEAP32[$1>>2] = $output;
 HEAP32[$gbm>>2] = $out_w;
 $2 = ((($gbm)) + 4|0);
 HEAP32[$2>>2] = $out_h;
 $3 = ((($gbm)) + 8|0);
 HEAP32[$3>>2] = $out_stride;
 $4 = HEAP32[$gbm>>2]|0;
 $5 = ($4|0)==(0);
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)==(0);
 $or$cond = $5 | $7;
 if ($or$cond) {
  $11 = HEAP32[$vertices>>2]|0;
  _free($11);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$vertices>>2]|0;
 $9 = HEAP32[$ix0>>2]|0;
 $10 = HEAP32[$iy0>>2]|0;
 _stbtt_Rasterize($gbm,0.34999999403953552,$8,$0,$scale_x,$scale_y,$shift_x,$shift_y,$9,$10,1,0);
 $11 = HEAP32[$vertices>>2]|0;
 _free($11);
 STACKTOP = sp;return;
}
function _stbtt_PackBegin($spc,$pixels,$pw,$ph,$stride_in_bytes,$padding,$alloc_context) {
 $spc = $spc|0;
 $pixels = $pixels|0;
 $pw = $pw|0;
 $ph = $ph|0;
 $stride_in_bytes = $stride_in_bytes|0;
 $padding = $padding|0;
 $alloc_context = $alloc_context|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(48)|0);
 $1 = (($pw) - ($padding))|0;
 $2 = $1 << 3;
 $3 = (_malloc($2)|0);
 $4 = ($0|0)==(0|0);
 $5 = ($3|0)==(0|0);
 $or$cond = $4 | $5;
 if (!($or$cond)) {
  HEAP32[$spc>>2] = $alloc_context;
  $6 = ((($spc)) + 8|0);
  HEAP32[$6>>2] = $pw;
  $7 = ((($spc)) + 12|0);
  HEAP32[$7>>2] = $ph;
  $8 = ((($spc)) + 32|0);
  HEAP32[$8>>2] = $pixels;
  $9 = ((($spc)) + 4|0);
  HEAP32[$9>>2] = $0;
  $10 = ((($spc)) + 36|0);
  HEAP32[$10>>2] = $3;
  $11 = ((($spc)) + 20|0);
  HEAP32[$11>>2] = $padding;
  $12 = ($stride_in_bytes|0)!=(0);
  $13 = $12 ? $stride_in_bytes : $pw;
  $14 = ((($spc)) + 16|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($spc)) + 24|0);
  HEAP32[$15>>2] = 1;
  $16 = ((($spc)) + 28|0);
  HEAP32[$16>>2] = 1;
  $17 = (($ph) - ($padding))|0;
  _stbrp_init_target($0,$1,$17,$3,$1);
  $18 = Math_imul($ph, $pw)|0;
  _memset(($pixels|0),0,($18|0))|0;
  $$0 = 1;
  return ($$0|0);
 }
 if (!($4)) {
  _free($0);
 }
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 _free($3);
 $$0 = 0;
 return ($$0|0);
}
function _stbtt_PackEnd($spc) {
 $spc = $spc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($spc)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 _free($1);
 $2 = ((($spc)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 return;
}
function _stbtt_PackSetOversampling($spc,$h_oversample,$v_oversample) {
 $spc = $spc|0;
 $h_oversample = $h_oversample|0;
 $v_oversample = $v_oversample|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($h_oversample>>>0)<(9);
 if (!($0)) {
  ___assert_fail((15160|0),(15032|0),2193,(15184|0));
  // unreachable;
 }
 $1 = ($v_oversample>>>0)<(9);
 if ($1) {
  $2 = ((($spc)) + 24|0);
  HEAP32[$2>>2] = $h_oversample;
  $3 = ((($spc)) + 28|0);
  HEAP32[$3>>2] = $v_oversample;
  return;
 } else {
  ___assert_fail((15216|0),(15032|0),2194,(15184|0));
  // unreachable;
 }
}
function _stbtt_PackFontRanges($spc,$fontdata,$font_index,$ranges,$num_ranges) {
 $spc = $spc|0;
 $fontdata = $fontdata|0;
 $font_index = $font_index|0;
 $ranges = $ranges|0;
 $num_ranges = $num_ranges|0;
 var $$0 = 0, $$lcssa52 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0;
 var $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0.0, $20 = 0, $200 = 0.0;
 var $201 = 0.0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $advance = 0;
 var $exitcond = 0, $exitcond42 = 0, $exitcond43 = 0, $exitcond44 = 0, $i$039 = 0, $i$132 = 0, $i$226 = 0, $i$314 = 0, $info = 0, $j$036 = 0, $j$120 = 0, $j$29 = 0, $k$025 = 0, $k$1$lcssa = 0, $k$1$lcssa$lcssa = 0, $k$119 = 0, $k$213 = 0, $k$3$lcssa = 0, $k$38 = 0, $lsb = 0;
 var $n$0$lcssa = 0, $n$031 = 0, $phitmp = 0, $return_value$0$lcssa = 0, $return_value$012 = 0, $return_value$1$lcssa = 0, $return_value$17 = 0, $return_value$2 = 0, $x0 = 0, $x03 = 0, $x1 = 0, $x15 = 0, $y0 = 0, $y04 = 0, $y1 = 0, $y16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $info = sp + 40|0;
 $x0 = sp + 36|0;
 $y0 = sp + 32|0;
 $x1 = sp + 28|0;
 $y1 = sp + 24|0;
 $advance = sp + 20|0;
 $lsb = sp + 12|0;
 $x03 = sp + 8|0;
 $y04 = sp + 4|0;
 $x15 = sp;
 $y16 = sp + 16|0;
 $0 = ((($spc)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (+($1>>>0));
 $3 = 1.0 / $2;
 $4 = ((($spc)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (+($5>>>0));
 $7 = 1.0 / $6;
 $8 = (+_stbtt__oversample_shift($1));
 $9 = (+_stbtt__oversample_shift($5));
 $10 = ((($spc)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($num_ranges|0)>(0);
 if ($12) {
  $i$039 = 0;
  while(1) {
   $13 = (((($ranges) + ($i$039<<4)|0)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)>(0);
   if ($15) {
    $16 = (((($ranges) + ($i$039<<4)|0)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP32[$13>>2]|0;
    $j$036 = 0;
    while(1) {
     $20 = (($17) + (($j$036*28)|0)|0);
     $21 = (($j$036) + 1)|0;
     $22 = ($21|0)<($18|0);
     $23 = $20;
     $24 = $23;
     HEAP16[$24>>1]=0&65535;HEAP16[$24+2>>1]=0>>>16;
     $25 = (($23) + 4)|0;
     $26 = $25;
     HEAP16[$26>>1]=0&65535;HEAP16[$26+2>>1]=0>>>16;
     if ($22) {
      $j$036 = $21;
     } else {
      break;
     }
    }
   }
   $27 = (($i$039) + 1)|0;
   $exitcond44 = ($27|0)==($num_ranges|0);
   if ($exitcond44) {
    break;
   } else {
    $i$039 = $27;
   }
  }
  $19 = ($num_ranges|0)>(0);
  if ($19) {
   $i$132 = 0;$n$031 = 0;
   while(1) {
    $28 = (((($ranges) + ($i$132<<4)|0)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + ($n$031))|0;
    $31 = (($i$132) + 1)|0;
    $exitcond43 = ($31|0)==($num_ranges|0);
    if ($exitcond43) {
     $$lcssa52 = $30;
     break;
    } else {
     $i$132 = $31;$n$031 = $30;
    }
   }
   $phitmp = $$lcssa52 << 4;
   $n$0$lcssa = $phitmp;
  } else {
   $n$0$lcssa = 0;
  }
 } else {
  $n$0$lcssa = 0;
 }
 $32 = (_malloc($n$0$lcssa)|0);
 $33 = ($32|0)==(0|0);
 if ($33) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (_stbtt_GetFontOffsetForIndex($fontdata,$font_index)|0);
 (_stbtt_InitFont($info,$fontdata,$34)|0);
 $35 = ($num_ranges|0)>(0);
 if ($35) {
  $36 = ((($spc)) + 20|0);
  $i$226 = 0;$k$025 = 0;
  while(1) {
   $37 = (($ranges) + ($i$226<<4)|0);
   $38 = +HEAPF32[$37>>2];
   $39 = $38 > 0.0;
   if ($39) {
    $40 = (+_stbtt_ScaleForPixelHeight($info,$38));
    $52 = $40;
   } else {
    $41 = -$38;
    $42 = (+_stbtt_ScaleForMappingEmToPixels($info,$41));
    $52 = $42;
   }
   $43 = (((($ranges) + ($i$226<<4)|0)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)>(0);
   if ($45) {
    $46 = (((($ranges) + ($i$226<<4)|0)) + 4|0);
    $j$120 = 0;$k$119 = $k$025;
    while(1) {
     $47 = HEAP32[$46>>2]|0;
     $48 = (($47) + ($j$120))|0;
     $49 = HEAP32[$0>>2]|0;
     $50 = (+($49>>>0));
     $51 = $52 * $50;
     $53 = HEAP32[$4>>2]|0;
     $54 = (+($53>>>0));
     $55 = $52 * $54;
     _stbtt_GetCodepointBitmapBoxSubpixel($info,$48,$51,$55,0.0,0.0,$x0,$y0,$x1,$y1);
     $56 = HEAP32[$x1>>2]|0;
     $57 = HEAP32[$x0>>2]|0;
     $58 = HEAP32[$36>>2]|0;
     $59 = HEAP32[$0>>2]|0;
     $60 = (($56) + 65535)|0;
     $61 = (($60) - ($57))|0;
     $62 = (($61) + ($58))|0;
     $63 = (($62) + ($59))|0;
     $64 = $63&65535;
     $65 = (((($32) + ($k$119<<4)|0)) + 4|0);
     HEAP16[$65>>1] = $64;
     $66 = HEAP32[$y1>>2]|0;
     $67 = HEAP32[$y0>>2]|0;
     $68 = HEAP32[$36>>2]|0;
     $69 = HEAP32[$4>>2]|0;
     $70 = (($66) + 65535)|0;
     $71 = (($70) - ($67))|0;
     $72 = (($71) + ($68))|0;
     $73 = (($72) + ($69))|0;
     $74 = $73&65535;
     $75 = (((($32) + ($k$119<<4)|0)) + 6|0);
     HEAP16[$75>>1] = $74;
     $76 = (($k$119) + 1)|0;
     $77 = (($j$120) + 1)|0;
     $78 = HEAP32[$43>>2]|0;
     $79 = ($77|0)<($78|0);
     if ($79) {
      $j$120 = $77;$k$119 = $76;
     } else {
      $k$1$lcssa = $76;
      break;
     }
    }
   } else {
    $k$1$lcssa = $k$025;
   }
   $80 = (($i$226) + 1)|0;
   $exitcond42 = ($80|0)==($num_ranges|0);
   if ($exitcond42) {
    $k$1$lcssa$lcssa = $k$1$lcssa;
    break;
   } else {
    $i$226 = $80;$k$025 = $k$1$lcssa;
   }
  }
  _stbrp_pack_rects($11,$32,$k$1$lcssa$lcssa);
  $81 = ($num_ranges|0)>(0);
  if ($81) {
   $82 = ((($spc)) + 20|0);
   $83 = ((($spc)) + 32|0);
   $84 = ((($spc)) + 16|0);
   $i$314 = 0;$k$213 = 0;$return_value$012 = 1;
   while(1) {
    $85 = (($ranges) + ($i$314<<4)|0);
    $86 = +HEAPF32[$85>>2];
    $87 = $86 > 0.0;
    if ($87) {
     $88 = (+_stbtt_ScaleForPixelHeight($info,$86));
     $127 = $88;
    } else {
     $89 = -$86;
     $90 = (+_stbtt_ScaleForMappingEmToPixels($info,$89));
     $127 = $90;
    }
    $91 = (((($ranges) + ($i$314<<4)|0)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)>(0);
    if ($93) {
     $94 = (((($ranges) + ($i$314<<4)|0)) + 12|0);
     $95 = (((($ranges) + ($i$314<<4)|0)) + 4|0);
     $j$29 = 0;$k$38 = $k$213;$return_value$17 = $return_value$012;
     while(1) {
      $96 = (((($32) + ($k$38<<4)|0)) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($97|0)==(0);
      if ($98) {
       $return_value$2 = 0;
      } else {
       $99 = HEAP32[$94>>2]|0;
       $100 = HEAP32[$95>>2]|0;
       $101 = (($100) + ($j$29))|0;
       $102 = (_stbtt_FindGlyphIndex($info,$101)|0);
       $103 = HEAP32[$82>>2]|0;
       $104 = (((($32) + ($k$38<<4)|0)) + 8|0);
       $105 = HEAP16[$104>>1]|0;
       $106 = $105&65535;
       $107 = (($106) + ($103))|0;
       $108 = $107&65535;
       HEAP16[$104>>1] = $108;
       $109 = (((($32) + ($k$38<<4)|0)) + 10|0);
       $110 = HEAP16[$109>>1]|0;
       $111 = $110&65535;
       $112 = (($111) + ($103))|0;
       $113 = $112&65535;
       HEAP16[$109>>1] = $113;
       $114 = (((($32) + ($k$38<<4)|0)) + 4|0);
       $115 = HEAP16[$114>>1]|0;
       $116 = $115&65535;
       $117 = (($116) - ($103))|0;
       $118 = $117&65535;
       HEAP16[$114>>1] = $118;
       $119 = (((($32) + ($k$38<<4)|0)) + 6|0);
       $120 = HEAP16[$119>>1]|0;
       $121 = $120&65535;
       $122 = (($121) - ($103))|0;
       $123 = $122&65535;
       HEAP16[$119>>1] = $123;
       _stbtt_GetGlyphHMetrics($info,$102,$advance,$lsb);
       $124 = HEAP32[$0>>2]|0;
       $125 = (+($124>>>0));
       $126 = $127 * $125;
       $128 = HEAP32[$4>>2]|0;
       $129 = (+($128>>>0));
       $130 = $127 * $129;
       _stbtt_GetGlyphBitmapBox($info,$102,$126,$130,$x03,$y04,$x15,$y16);
       $131 = HEAP32[$83>>2]|0;
       $132 = HEAP16[$104>>1]|0;
       $133 = $132&65535;
       $134 = HEAP16[$109>>1]|0;
       $135 = $134&65535;
       $136 = HEAP32[$84>>2]|0;
       $137 = Math_imul($135, $136)|0;
       $$sum = (($137) + ($133))|0;
       $138 = (($131) + ($$sum)|0);
       $139 = HEAP16[$114>>1]|0;
       $140 = $139&65535;
       $141 = HEAP32[$0>>2]|0;
       $142 = (1 - ($141))|0;
       $143 = (($142) + ($140))|0;
       $144 = HEAP16[$119>>1]|0;
       $145 = $144&65535;
       $146 = HEAP32[$4>>2]|0;
       $147 = (1 - ($146))|0;
       $148 = (($147) + ($145))|0;
       $149 = (+($141>>>0));
       $150 = $127 * $149;
       $151 = (+($146>>>0));
       $152 = $127 * $151;
       _stbtt_MakeGlyphBitmapSubpixel($info,$138,$143,$148,$136,$150,$152,0.0,0.0,$102);
       $153 = HEAP32[$0>>2]|0;
       $154 = ($153>>>0)>(1);
       if ($154) {
        $155 = HEAP32[$83>>2]|0;
        $156 = HEAP16[$104>>1]|0;
        $157 = $156&65535;
        $158 = HEAP16[$109>>1]|0;
        $159 = $158&65535;
        $160 = HEAP32[$84>>2]|0;
        $161 = Math_imul($159, $160)|0;
        $$sum2 = (($161) + ($157))|0;
        $162 = (($155) + ($$sum2)|0);
        $163 = HEAP16[$114>>1]|0;
        $164 = $163&65535;
        $165 = HEAP16[$119>>1]|0;
        $166 = $165&65535;
        _stbtt__h_prefilter($162,$164,$166,$160,$153);
       }
       $167 = HEAP32[$4>>2]|0;
       $168 = ($167>>>0)>(1);
       if ($168) {
        $169 = HEAP32[$83>>2]|0;
        $170 = HEAP16[$104>>1]|0;
        $171 = $170&65535;
        $172 = HEAP16[$109>>1]|0;
        $173 = $172&65535;
        $174 = HEAP32[$84>>2]|0;
        $175 = Math_imul($173, $174)|0;
        $$sum1 = (($175) + ($171))|0;
        $176 = (($169) + ($$sum1)|0);
        $177 = HEAP16[$114>>1]|0;
        $178 = $177&65535;
        $179 = HEAP16[$119>>1]|0;
        $180 = $179&65535;
        _stbtt__v_prefilter($176,$178,$180,$174,$167);
       }
       $181 = HEAP16[$104>>1]|0;
       $182 = (($99) + (($j$29*28)|0)|0);
       HEAP16[$182>>1] = $181;
       $183 = HEAP16[$109>>1]|0;
       $184 = (((($99) + (($j$29*28)|0)|0)) + 2|0);
       HEAP16[$184>>1] = $183;
       $185 = HEAP16[$104>>1]|0;
       $186 = $185&65535;
       $187 = HEAP16[$114>>1]|0;
       $188 = $187&65535;
       $189 = (($188) + ($186))|0;
       $190 = $189&65535;
       $191 = (((($99) + (($j$29*28)|0)|0)) + 4|0);
       HEAP16[$191>>1] = $190;
       $192 = HEAP16[$109>>1]|0;
       $193 = $192&65535;
       $194 = HEAP16[$119>>1]|0;
       $195 = $194&65535;
       $196 = (($195) + ($193))|0;
       $197 = $196&65535;
       $198 = (((($99) + (($j$29*28)|0)|0)) + 6|0);
       HEAP16[$198>>1] = $197;
       $199 = HEAP32[$advance>>2]|0;
       $200 = (+($199|0));
       $201 = $127 * $200;
       $202 = (((($99) + (($j$29*28)|0)|0)) + 16|0);
       HEAPF32[$202>>2] = $201;
       $203 = HEAP32[$x03>>2]|0;
       $204 = (+($203|0));
       $205 = $3 * $204;
       $206 = $8 + $205;
       $207 = (((($99) + (($j$29*28)|0)|0)) + 8|0);
       HEAPF32[$207>>2] = $206;
       $208 = HEAP32[$y04>>2]|0;
       $209 = (+($208|0));
       $210 = $7 * $209;
       $211 = $9 + $210;
       $212 = (((($99) + (($j$29*28)|0)|0)) + 12|0);
       HEAPF32[$212>>2] = $211;
       $213 = HEAP32[$x03>>2]|0;
       $214 = HEAP16[$114>>1]|0;
       $215 = $214&65535;
       $216 = (($215) + ($213))|0;
       $217 = (+($216|0));
       $218 = $3 * $217;
       $219 = $8 + $218;
       $220 = (((($99) + (($j$29*28)|0)|0)) + 20|0);
       HEAPF32[$220>>2] = $219;
       $221 = HEAP32[$y04>>2]|0;
       $222 = HEAP16[$119>>1]|0;
       $223 = $222&65535;
       $224 = (($223) + ($221))|0;
       $225 = (+($224|0));
       $226 = $7 * $225;
       $227 = $9 + $226;
       $228 = (((($99) + (($j$29*28)|0)|0)) + 24|0);
       HEAPF32[$228>>2] = $227;
       $return_value$2 = $return_value$17;
      }
      $229 = (($k$38) + 1)|0;
      $230 = (($j$29) + 1)|0;
      $231 = HEAP32[$91>>2]|0;
      $232 = ($230|0)<($231|0);
      if ($232) {
       $j$29 = $230;$k$38 = $229;$return_value$17 = $return_value$2;
      } else {
       $k$3$lcssa = $229;$return_value$1$lcssa = $return_value$2;
       break;
      }
     }
    } else {
     $k$3$lcssa = $k$213;$return_value$1$lcssa = $return_value$012;
    }
    $233 = (($i$314) + 1)|0;
    $exitcond = ($233|0)==($num_ranges|0);
    if ($exitcond) {
     $return_value$0$lcssa = $return_value$1$lcssa;
     break;
    } else {
     $i$314 = $233;$k$213 = $k$3$lcssa;$return_value$012 = $return_value$1$lcssa;
    }
   }
  } else {
   $return_value$0$lcssa = 1;
  }
 } else {
  _stbrp_pack_rects($11,$32,0);
  $return_value$0$lcssa = 1;
 }
 _free($32);
 $$0 = $return_value$0$lcssa;
 STACKTOP = sp;return ($$0|0);
}
function _stbtt_PackFontRange($spc,$fontdata,$font_index,$font_size,$first_unicode_char_in_range,$num_chars_in_range,$chardata_for_range) {
 $spc = $spc|0;
 $fontdata = $fontdata|0;
 $font_index = $font_index|0;
 $font_size = +$font_size;
 $first_unicode_char_in_range = $first_unicode_char_in_range|0;
 $num_chars_in_range = $num_chars_in_range|0;
 $chardata_for_range = $chardata_for_range|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $range = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $range = sp;
 $0 = ((($range)) + 4|0);
 HEAP32[$0>>2] = $first_unicode_char_in_range;
 $1 = ((($range)) + 8|0);
 HEAP32[$1>>2] = $num_chars_in_range;
 $2 = ((($range)) + 12|0);
 HEAP32[$2>>2] = $chardata_for_range;
 HEAPF32[$range>>2] = $font_size;
 $3 = (_stbtt_PackFontRanges($spc,$fontdata,$font_index,$range,1)|0);
 STACKTOP = sp;return ($3|0);
}
function _LoadDefaultFont() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $counter$011 = 0, $currentLine$06 = 0;
 var $currentLine$1 = 0, $currentPosX$07 = 0, $currentPosX$1 = 0, $exitcond = 0, $i$012 = 0, $i1$010 = 0, $i2$08 = 0, $image = 0, $image$byval_copy1 = 0, $j$09 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $image$byval_copy1 = sp + 44|0;
 $vararg_buffer = sp;
 $image = sp + 4|0;
 $0 = sp + 24|0;
 HEAP32[(15264)>>2] = 224;
 $1 = (_malloc(65536)|0);
 $i$012 = 0;
 while(1) {
  $2 = (($1) + ($i$012<<2)|0);
  $3 = (($i$012) + 1)|0;
  $exitcond = ($3|0)==(16384);
  HEAP8[$2>>0]=0&255;HEAP8[$2+1>>0]=(0>>8)&255;HEAP8[$2+2>>0]=(0>>16)&255;HEAP8[$2+3>>0]=0>>24;
  if ($exitcond) {
   $counter$011 = 0;$i1$010 = 0;
   break;
  } else {
   $i$012 = $3;
  }
 }
 while(1) {
  $4 = (15280 + ($counter$011<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $j$09 = 31;
  while(1) {
   $6 = 1 << $j$09;
   $7 = $5 & $6;
   $8 = ($7|0)==(0);
   if (!($8)) {
    $9 = (($j$09) + ($i1$010))|0;
    $10 = (($1) + ($9<<2)|0);
    HEAP8[$10>>0]=-1&255;HEAP8[$10+1>>0]=(-1>>8)&255;HEAP8[$10+2>>0]=(-1>>16)&255;HEAP8[$10+3>>0]=-1>>24;
   }
   $11 = (($j$09) + -1)|0;
   $12 = ($j$09|0)>(0);
   if ($12) {
    $j$09 = $11;
   } else {
    break;
   }
  }
  $13 = (($counter$011) + 1)|0;
  $14 = ($counter$011|0)>(511);
  $$ = $14 ? 0 : $13;
  $15 = (($i1$010) + 32)|0;
  $16 = ($15|0)<(16384);
  if ($16) {
   $counter$011 = $$;$i1$010 = $15;
  } else {
   break;
  }
 }
 _LoadImageEx($image,$1,128,128);
 _ImageFormat($image,2);
 _free($1);
 ;HEAP32[$image$byval_copy1>>2]=HEAP32[$image>>2]|0;HEAP32[$image$byval_copy1+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy1+8>>2]=HEAP32[$image+8>>2]|0;HEAP32[$image$byval_copy1+12>>2]=HEAP32[$image+12>>2]|0;HEAP32[$image$byval_copy1+16>>2]=HEAP32[$image+16>>2]|0;
 _LoadTextureFromImage($0,$image$byval_copy1);
 ;HEAP32[15240>>2]=HEAP32[$0>>2]|0;HEAP32[15240+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[15240+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[15240+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[15240+16>>2]=HEAP32[$0+16>>2]|0;
 ;HEAP32[$image$byval_copy1>>2]=HEAP32[$image>>2]|0;HEAP32[$image$byval_copy1+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy1+8>>2]=HEAP32[$image+8>>2]|0;HEAP32[$image$byval_copy1+12>>2]=HEAP32[$image+12>>2]|0;HEAP32[$image$byval_copy1+16>>2]=HEAP32[$image+16>>2]|0;
 _UnloadImage($image$byval_copy1);
 $17 = HEAP32[(15264)>>2]|0;
 $18 = $17 << 2;
 $19 = (_malloc($18)|0);
 HEAP32[(15268)>>2] = $19;
 $20 = HEAP32[(15264)>>2]|0;
 $21 = $20 << 4;
 $22 = (_malloc($21)|0);
 HEAP32[(15272)>>2] = $22;
 $23 = HEAP32[(15264)>>2]|0;
 $24 = ($23|0)>(0);
 if (!($24)) {
  $53 = HEAP32[(15272)>>2]|0;
  $54 = ((($53)) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  HEAP32[(15260)>>2] = $55;
  $56 = HEAP32[15240>>2]|0;
  HEAP32[$vararg_buffer>>2] = $56;
  _TraceLog(0,18224,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $25 = HEAP32[(15268)>>2]|0;
 $26 = HEAP32[(15272)>>2]|0;
 $currentLine$06 = 0;$currentPosX$07 = 1;$i2$08 = 0;
 while(1) {
  $27 = (($i2$08) + 32)|0;
  $28 = (($25) + ($i2$08<<2)|0);
  HEAP32[$28>>2] = $27;
  $29 = (($26) + ($i2$08<<4)|0);
  HEAP32[$29>>2] = $currentPosX$07;
  $30 = ($currentLine$06*11)|0;
  $31 = (($30) + 1)|0;
  $32 = (((($26) + ($i2$08<<4)|0)) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = (17328 + ($i2$08<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (((($26) + ($i2$08<<4)|0)) + 8|0);
  HEAP32[$35>>2] = $34;
  $36 = (((($26) + ($i2$08<<4)|0)) + 12|0);
  HEAP32[$36>>2] = 10;
  $37 = (((($26) + ($i2$08<<4)|0)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($currentPosX$07) + 1)|0;
  $40 = (($39) + ($38))|0;
  $41 = HEAP32[(15244)>>2]|0;
  $42 = ($40|0)<($41|0);
  if ($42) {
   $currentLine$1 = $currentLine$06;$currentPosX$1 = $40;
  } else {
   $43 = (($currentLine$06) + 1)|0;
   $44 = HEAP32[$33>>2]|0;
   $45 = (($44) + 2)|0;
   $46 = (($26) + ($i2$08<<4)|0);
   HEAP32[$46>>2] = 1;
   $47 = ($43*11)|0;
   $48 = (($47) + 1)|0;
   $49 = (((($26) + ($i2$08<<4)|0)) + 4|0);
   HEAP32[$49>>2] = $48;
   $currentLine$1 = $43;$currentPosX$1 = $45;
  }
  $50 = (($i2$08) + 1)|0;
  $51 = HEAP32[(15264)>>2]|0;
  $52 = ($50|0)<($51|0);
  if ($52) {
   $currentLine$06 = $currentLine$1;$currentPosX$07 = $currentPosX$1;$i2$08 = $50;
  } else {
   break;
  }
 }
 $53 = HEAP32[(15272)>>2]|0;
 $54 = ((($53)) + 12|0);
 $55 = HEAP32[$54>>2]|0;
 HEAP32[(15260)>>2] = $55;
 $56 = HEAP32[15240>>2]|0;
 HEAP32[$vararg_buffer>>2] = $56;
 _TraceLog(0,18224,$vararg_buffer);
 STACKTOP = sp;return;
}
function _UnloadDefaultFont() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp;
 ;HEAP32[$$byval_copy>>2]=HEAP32[15240>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[15240+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[15240+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[15240+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[15240+16>>2]|0;
 _UnloadTexture($$byval_copy);
 $0 = HEAP32[(15268)>>2]|0;
 _free($0);
 $1 = HEAP32[(15272)>>2]|0;
 _free($1);
 STACKTOP = sp;return;
}
function _LoadSpriteFont($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $image = 0;
 var $image$byval_copy6 = 0, $spriteFont = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $image$byval_copy6 = sp + 88|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $spriteFont = sp + 12|0;
 $image = sp + 48|0;
 $0 = sp + 108|0;
 $1 = sp + 68|0;
 $2 = (_GetExtension($fileName)|0);
 $3 = (_strcmp($2,18272)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  _LoadRBMF($spriteFont,$fileName);
  dest=$agg$result; src=$spriteFont; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 $5 = (_GetExtension($fileName)|0);
 $6 = (_strcmp($5,18280)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  _LoadTTF($spriteFont,$fileName);
  dest=$agg$result; src=$spriteFont; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 } else {
  _LoadImage($image,$fileName);
  HEAP8[$0>>0] = -1;
  $8 = ((($0)) + 1|0);
  HEAP8[$8>>0] = 0;
  $9 = ((($0)) + 2|0);
  HEAP8[$9>>0] = -1;
  $10 = ((($0)) + 3|0);
  HEAP8[$10>>0] = -1;
  ;HEAP8[$image$byval_copy6>>0]=HEAP8[$0>>0]|0;HEAP8[$image$byval_copy6+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$image$byval_copy6+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$image$byval_copy6+3>>0]=HEAP8[$0+3>>0]|0;
  _ImageToPOT($image,$image$byval_copy6);
  $11 = ((($spriteFont)) + 28|0);
  $12 = ((($spriteFont)) + 32|0);
  ;HEAP32[$image$byval_copy6>>2]=HEAP32[$image>>2]|0;HEAP32[$image$byval_copy6+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy6+8>>2]=HEAP32[$image+8>>2]|0;HEAP32[$image$byval_copy6+12>>2]=HEAP32[$image+12>>2]|0;HEAP32[$image$byval_copy6+16>>2]=HEAP32[$image+16>>2]|0;
  $13 = (_ParseImageData($image$byval_copy6,$11,$12)|0);
  HEAP32[$vararg_buffer>>2] = $fileName;
  _TraceLog(3,18288,$vararg_buffer);
  HEAP32[$vararg_buffer1>>2] = $fileName;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $13;
  _TraceLog(3,18328,$vararg_buffer1);
  $14 = ((($spriteFont)) + 24|0);
  HEAP32[$14>>2] = $13;
  ;HEAP32[$image$byval_copy6>>2]=HEAP32[$image>>2]|0;HEAP32[$image$byval_copy6+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy6+8>>2]=HEAP32[$image+8>>2]|0;HEAP32[$image$byval_copy6+12>>2]=HEAP32[$image+12>>2]|0;HEAP32[$image$byval_copy6+16>>2]=HEAP32[$image+16>>2]|0;
  _LoadTextureFromImage($1,$image$byval_copy6);
  ;HEAP32[$spriteFont>>2]=HEAP32[$1>>2]|0;HEAP32[$spriteFont+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$spriteFont+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$spriteFont+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$spriteFont+16>>2]=HEAP32[$1+16>>2]|0;
  $15 = HEAP32[$12>>2]|0;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($spriteFont)) + 20|0);
  HEAP32[$18>>2] = $17;
  ;HEAP32[$image$byval_copy6>>2]=HEAP32[$image>>2]|0;HEAP32[$image$byval_copy6+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy6+8>>2]=HEAP32[$image+8>>2]|0;HEAP32[$image$byval_copy6+12>>2]=HEAP32[$image+12>>2]|0;HEAP32[$image$byval_copy6+16>>2]=HEAP32[$image+16>>2]|0;
  _UnloadImage($image$byval_copy6);
  dest=$agg$result; src=$spriteFont; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
}
function _UnloadSpriteFont($spriteFont) {
 $spriteFont = $spriteFont|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy = sp + 4|0;
 $vararg_buffer = sp;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$spriteFont>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$spriteFont+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$spriteFont+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$spriteFont+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$spriteFont+16>>2]|0;
 _UnloadTexture($$byval_copy);
 $0 = ((($spriteFont)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 _free($1);
 $2 = ((($spriteFont)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 _TraceLog(0,18368,$vararg_buffer);
 STACKTOP = sp;return;
}
function _DrawText($text,$posX,$posY,$fontSize,$color) {
 $text = $text|0;
 $posX = $posX|0;
 $posY = $posY|0;
 $fontSize = $fontSize|0;
 $color = $color|0;
 var $$fontSize = 0, $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $color$byval_copy = 0, $defaultFont$byval_copy = 0, $position = 0, $position$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $color$byval_copy = sp + 56|0;
 $position$byval_copy = sp;
 $defaultFont$byval_copy = sp + 8|0;
 $position = sp + 48|0;
 $0 = (+($posX|0));
 HEAPF32[$position>>2] = $0;
 $1 = ((($position)) + 4|0);
 $2 = (+($posY|0));
 HEAPF32[$1>>2] = $2;
 $3 = ($fontSize|0)<(10);
 $$fontSize = $3 ? 10 : $fontSize;
 $4 = (($$fontSize|0) / 10)&-1;
 dest=$defaultFont$byval_copy; src=15240; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$position$byval_copy>>2]=HEAP32[$position>>2]|0;HEAP32[$position$byval_copy+4>>2]=HEAP32[$position+4>>2]|0;
 ;HEAP8[$color$byval_copy>>0]=HEAP8[$color>>0]|0;HEAP8[$color$byval_copy+1>>0]=HEAP8[$color+1>>0]|0;HEAP8[$color$byval_copy+2>>0]=HEAP8[$color+2>>0]|0;HEAP8[$color$byval_copy+3>>0]=HEAP8[$color+3>>0]|0;
 _DrawTextEx($defaultFont$byval_copy,$text,$position$byval_copy,$$fontSize,$4,$color$byval_copy);
 STACKTOP = sp;return;
}
function _DrawTextEx($spriteFont,$text,$position,$fontSize,$spacing,$tint) {
 $spriteFont = $spriteFont|0;
 $text = $text|0;
 $position = $position|0;
 $fontSize = $fontSize|0;
 $spacing = $spacing|0;
 $tint = $tint|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0.0, $9 = 0.0, $i$03 = 0, $i$1$ph = 0, $i$16 = 0;
 var $offsetX$05 = 0, $offsetX$2 = 0, $offsetY$04 = 0, $offsetY$17 = 0, $rec = 0, $rec$byval_copy = 0, $tint$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $tint$byval_copy = sp + 104|0;
 $$byval_copy2 = sp;
 $$byval_copy1 = sp + 8|0;
 $rec$byval_copy = sp + 24|0;
 $$byval_copy = sp + 40|0;
 $rec = sp + 64|0;
 $0 = sp + 80|0;
 $1 = sp + 96|0;
 $2 = (_strlen(($text|0))|0);
 $3 = (+($fontSize|0));
 $4 = ((($spriteFont)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (+($7|0));
 $9 = $3 / $8;
 $10 = ($2|0)>(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = +HEAPF32[$position>>2];
 $12 = ((($position)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = ((($rec)) + 8|0);
 $15 = ((($rec)) + 12|0);
 $16 = ((($0)) + 4|0);
 $17 = ((($0)) + 8|0);
 $18 = ((($0)) + 12|0);
 $19 = ((($1)) + 4|0);
 $20 = (+($spacing|0));
 $21 = ((($spriteFont)) + 20|0);
 $i$03 = 0;$offsetX$05 = 0;$offsetY$04 = 0;
 while(1) {
  $22 = (($text) + ($i$03)|0);
  $23 = HEAP8[$22>>0]|0;
  if ((($23<<24>>24) == -62)) {
   $24 = (($i$03) + 1)|0;
   $25 = (($text) + ($24)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = (($27) + -32)|0;
   $29 = HEAP32[$4>>2]|0;
   $30 = (($29) + ($28<<4)|0);
   ;HEAP32[$rec>>2]=HEAP32[$30>>2]|0;HEAP32[$rec+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$rec+8>>2]=HEAP32[$30+8>>2]|0;HEAP32[$rec+12>>2]=HEAP32[$30+12>>2]|0;
   $i$1$ph = $24;
   label = 8;
  } else if ((($23<<24>>24) == 10)) {
   $38 = HEAP32[$21>>2]|0;
   $39 = (($38|0) / 2)&-1;
   $40 = (($39) + ($38))|0;
   $41 = (+($40|0));
   $42 = $9 * $41;
   $43 = (+($offsetY$04|0));
   $44 = $43 + $42;
   $45 = (~~(($44)));
   HEAP32[$rec>>2] = -1;
   $i$16 = $i$03;$offsetX$2 = 0;$offsetY$17 = $45;
  } else if ((($23<<24>>24) == -61)) {
   $31 = (($i$03) + 1)|0;
   $32 = (($text) + ($31)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = (($34) + 32)|0;
   $36 = HEAP32[$4>>2]|0;
   $37 = (($36) + ($35<<4)|0);
   ;HEAP32[$rec>>2]=HEAP32[$37>>2]|0;HEAP32[$rec+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$rec+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$rec+12>>2]=HEAP32[$37+12>>2]|0;
   $i$1$ph = $31;
   label = 8;
  } else {
   $46 = $23 << 24 >> 24;
   $47 = (($46) + -32)|0;
   $48 = HEAP32[$4>>2]|0;
   $49 = (($48) + ($47<<4)|0);
   ;HEAP32[$rec>>2]=HEAP32[$49>>2]|0;HEAP32[$rec+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$rec+8>>2]=HEAP32[$49+8>>2]|0;HEAP32[$rec+12>>2]=HEAP32[$49+12>>2]|0;
   $i$1$ph = $i$03;
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $$pr = HEAP32[$rec>>2]|0;
   $50 = ($$pr|0)>(0);
   if ($50) {
    $51 = (+($offsetX$05|0));
    $52 = $51 + $11;
    $53 = (~~(($52)));
    $54 = (+($offsetY$04|0));
    $55 = $54 + $13;
    $56 = (~~(($55)));
    $57 = HEAP32[$14>>2]|0;
    $58 = (+($57|0));
    $59 = $9 * $58;
    $60 = (~~(($59)));
    $61 = HEAP32[$15>>2]|0;
    $62 = (+($61|0));
    $63 = $9 * $62;
    $64 = (~~(($63)));
    HEAP32[$0>>2] = $53;
    HEAP32[$16>>2] = $56;
    HEAP32[$17>>2] = $60;
    HEAP32[$18>>2] = $64;
    HEAPF32[$1>>2] = 0.0;
    HEAPF32[$19>>2] = 0.0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$spriteFont>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$spriteFont+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$spriteFont+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$spriteFont+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[$spriteFont+16>>2]|0;
    ;HEAP32[$rec$byval_copy>>2]=HEAP32[$rec>>2]|0;HEAP32[$rec$byval_copy+4>>2]=HEAP32[$rec+4>>2]|0;HEAP32[$rec$byval_copy+8>>2]=HEAP32[$rec+8>>2]|0;HEAP32[$rec$byval_copy+12>>2]=HEAP32[$rec+12>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$0+12>>2]|0;
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
    ;HEAP8[$tint$byval_copy>>0]=HEAP8[$tint>>0]|0;HEAP8[$tint$byval_copy+1>>0]=HEAP8[$tint+1>>0]|0;HEAP8[$tint$byval_copy+2>>0]=HEAP8[$tint+2>>0]|0;HEAP8[$tint$byval_copy+3>>0]=HEAP8[$tint+3>>0]|0;
    _DrawTexturePro($$byval_copy,$rec$byval_copy,$$byval_copy1,$$byval_copy2,0.0,$tint$byval_copy);
    $65 = HEAP32[$14>>2]|0;
    $66 = (+($65|0));
    $67 = $9 * $66;
    $68 = $20 + $67;
    $69 = $51 + $68;
    $70 = (~~(($69)));
    $i$16 = $i$1$ph;$offsetX$2 = $70;$offsetY$17 = $offsetY$04;
   } else {
    $i$16 = $i$1$ph;$offsetX$2 = $offsetX$05;$offsetY$17 = $offsetY$04;
   }
  }
  $71 = (($i$16) + 1)|0;
  $72 = ($71|0)<($2|0);
  if ($72) {
   $i$03 = $71;$offsetX$05 = $offsetX$2;$offsetY$04 = $offsetY$17;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _VectorLength($v) {
 $v = $v|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $sqrtf = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$v>>2];
 $1 = $0 * $0;
 $2 = ((($v)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3 * $3;
 $5 = $1 + $4;
 $6 = ((($v)) + 8|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7 * $7;
 $9 = $5 + $8;
 $sqrtf = (+Math_sqrt((+$9)));
 return (+$sqrtf);
}
function _VectorNormalize($v) {
 $v = $v|0;
 var $$op = 0.0, $0 = 0.0, $1 = 0, $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $v$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $v$byval_copy = sp;
 ;HEAP32[$v$byval_copy>>2]=HEAP32[$v>>2]|0;HEAP32[$v$byval_copy+4>>2]=HEAP32[$v+4>>2]|0;HEAP32[$v$byval_copy+8>>2]=HEAP32[$v+8>>2]|0;
 $0 = (+_VectorLength($v$byval_copy));
 $1 = $0 == 0.0;
 $$op = 1.0 / $0;
 $2 = $1 ? 1.0 : $$op;
 $3 = +HEAPF32[$v>>2];
 $4 = $3 * $2;
 HEAPF32[$v>>2] = $4;
 $5 = ((($v)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $2 * $6;
 HEAPF32[$5>>2] = $7;
 $8 = ((($v)) + 8|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $2 * $9;
 HEAPF32[$8>>2] = $10;
 STACKTOP = sp;return;
}
function _VectorTransform($v,$mat) {
 $v = $v|0;
 $mat = $mat|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$v>>2];
 $1 = ((($v)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = ((($v)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = +HEAPF32[$mat>>2];
 $6 = $0 * $5;
 $7 = ((($mat)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $2 * $8;
 $10 = $6 + $9;
 $11 = ((($mat)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = $4 * $12;
 $14 = $10 + $13;
 $15 = ((($mat)) + 12|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $16 + $14;
 HEAPF32[$v>>2] = $17;
 $18 = ((($mat)) + 16|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $0 * $19;
 $21 = ((($mat)) + 20|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $2 * $22;
 $24 = $20 + $23;
 $25 = ((($mat)) + 24|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $4 * $26;
 $28 = $24 + $27;
 $29 = ((($mat)) + 28|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $30 + $28;
 HEAPF32[$1>>2] = $31;
 $32 = ((($mat)) + 32|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $0 * $33;
 $35 = ((($mat)) + 36|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $2 * $36;
 $38 = $34 + $37;
 $39 = ((($mat)) + 40|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $4 * $40;
 $42 = $38 + $41;
 $43 = ((($mat)) + 44|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $44 + $42;
 HEAPF32[$3>>2] = $45;
 return;
}
function _VectorZero($agg$result) {
 $agg$result = $agg$result|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function _GetMatrixVector($mat) {
 $mat = $mat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$mat>>2]|0;
 HEAP32[18400>>2] = $0;
 $1 = ((($mat)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[(18404)>>2] = $2;
 $3 = ((($mat)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[(18408)>>2] = $4;
 $5 = ((($mat)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[(18412)>>2] = $6;
 $7 = ((($mat)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[(18416)>>2] = $8;
 $9 = ((($mat)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[(18420)>>2] = $10;
 $11 = ((($mat)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[(18424)>>2] = $12;
 $13 = ((($mat)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[(18428)>>2] = $14;
 $15 = ((($mat)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[(18432)>>2] = $16;
 $17 = ((($mat)) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[(18436)>>2] = $18;
 $19 = ((($mat)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[(18440)>>2] = $20;
 $21 = ((($mat)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[(18444)>>2] = $22;
 $23 = ((($mat)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[(18448)>>2] = $24;
 $25 = ((($mat)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[(18452)>>2] = $26;
 $27 = ((($mat)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 HEAP32[(18456)>>2] = $28;
 $29 = ((($mat)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[(18460)>>2] = $30;
 return (18400|0);
}
function _MatrixTranspose($mat) {
 $mat = $mat|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($mat)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($mat)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($mat)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($mat)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($mat)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($mat)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($mat)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($mat)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($mat)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($mat)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($mat)) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($mat)) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$0>>2] = $7;
 HEAP32[$2>>2] = $13;
 HEAP32[$4>>2] = $19;
 HEAP32[$6>>2] = $1;
 HEAP32[$8>>2] = $15;
 HEAP32[$10>>2] = $21;
 HEAP32[$12>>2] = $3;
 HEAP32[$14>>2] = $9;
 HEAP32[$16>>2] = $23;
 HEAP32[$18>>2] = $5;
 HEAP32[$20>>2] = $11;
 HEAP32[$22>>2] = $17;
 return;
}
function _MatrixIdentity($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $result$sroa$5 = 0, $result$sroa$6 = 0, $result$sroa$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $result$sroa$5 = sp + 32|0;
 $result$sroa$6 = sp;
 $result$sroa$7 = sp + 16|0;
 ;HEAP32[$result$sroa$5>>2]=0|0;HEAP32[$result$sroa$5+4>>2]=0|0;HEAP32[$result$sroa$5+8>>2]=0|0;HEAP32[$result$sroa$5+12>>2]=0|0;
 ;HEAP32[$result$sroa$6>>2]=0|0;HEAP32[$result$sroa$6+4>>2]=0|0;HEAP32[$result$sroa$6+8>>2]=0|0;HEAP32[$result$sroa$6+12>>2]=0|0;
 ;HEAP32[$result$sroa$7>>2]=0|0;HEAP32[$result$sroa$7+4>>2]=0|0;HEAP32[$result$sroa$7+8>>2]=0|0;HEAP32[$result$sroa$7+12>>2]=0|0;
 HEAPF32[$agg$result>>2] = 1.0;
 $0 = ((($agg$result)) + 4|0);
 ;HEAP32[$0>>2]=HEAP32[$result$sroa$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$result$sroa$5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$result$sroa$5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$result$sroa$5+12>>2]|0;
 $1 = ((($agg$result)) + 20|0);
 HEAPF32[$1>>2] = 1.0;
 $2 = ((($agg$result)) + 24|0);
 ;HEAP32[$2>>2]=HEAP32[$result$sroa$6>>2]|0;HEAP32[$2+4>>2]=HEAP32[$result$sroa$6+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$result$sroa$6+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$result$sroa$6+12>>2]|0;
 $3 = ((($agg$result)) + 40|0);
 HEAPF32[$3>>2] = 1.0;
 $4 = ((($agg$result)) + 44|0);
 ;HEAP32[$4>>2]=HEAP32[$result$sroa$7>>2]|0;HEAP32[$4+4>>2]=HEAP32[$result$sroa$7+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$result$sroa$7+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$result$sroa$7+12>>2]|0;
 $5 = ((($agg$result)) + 60|0);
 HEAPF32[$5>>2] = 1.0;
 STACKTOP = sp;return;
}
function _MatrixTranslate($agg$result,$x,$y,$z) {
 $agg$result = $agg$result|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$agg$result>>2] = 1.0;
 $0 = ((($agg$result)) + 4|0);
 $1 = ((($agg$result)) + 20|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 HEAPF32[$1>>2] = 1.0;
 $2 = ((($agg$result)) + 24|0);
 $3 = ((($agg$result)) + 40|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 HEAPF32[$3>>2] = 1.0;
 $4 = ((($agg$result)) + 44|0);
 HEAPF32[$4>>2] = 0.0;
 $5 = ((($agg$result)) + 48|0);
 HEAPF32[$5>>2] = $x;
 $6 = ((($agg$result)) + 52|0);
 HEAPF32[$6>>2] = $y;
 $7 = ((($agg$result)) + 56|0);
 HEAPF32[$7>>2] = $z;
 $8 = ((($agg$result)) + 60|0);
 HEAPF32[$8>>2] = 1.0;
 return;
}
function _MatrixRotate($agg$result,$angle,$axis) {
 $agg$result = $agg$result|0;
 $angle = +$angle;
 $axis = $axis|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0;
 var $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0;
 var $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $mat = 0, $or$cond = 0, $sqrtf = 0.0, $x$0 = 0.0, $y$0 = 0.0, $z$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $mat = sp;
 _MatrixIdentity($mat);
 $0 = +HEAPF32[$axis>>2];
 $1 = ((($axis)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = ((($axis)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $0 * $0;
 $6 = $2 * $2;
 $7 = $5 + $6;
 $8 = $4 * $4;
 $9 = $7 + $8;
 $sqrtf = (+Math_sqrt((+$9)));
 $10 = $sqrtf != 1.0;
 $11 = $sqrtf != 0.0;
 $or$cond = $10 & $11;
 if ($or$cond) {
  $12 = 1.0 / $sqrtf;
  $13 = $0 * $12;
  $14 = $2 * $12;
  $15 = $4 * $12;
  $x$0 = $13;$y$0 = $14;$z$0 = $15;
 } else {
  $x$0 = $0;$y$0 = $2;$z$0 = $4;
 }
 $16 = (+Math_sin((+$angle)));
 $17 = (+Math_cos((+$angle)));
 $18 = 1.0 - $17;
 $19 = +HEAPF32[$mat>>2];
 $20 = ((($mat)) + 16|0);
 $21 = +HEAPF32[$20>>2];
 $22 = ((($mat)) + 32|0);
 $23 = +HEAPF32[$22>>2];
 $24 = ((($mat)) + 48|0);
 $25 = +HEAPF32[$24>>2];
 $26 = ((($mat)) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = ((($mat)) + 20|0);
 $29 = +HEAPF32[$28>>2];
 $30 = ((($mat)) + 36|0);
 $31 = +HEAPF32[$30>>2];
 $32 = ((($mat)) + 52|0);
 $33 = +HEAPF32[$32>>2];
 $34 = ((($mat)) + 8|0);
 $35 = +HEAPF32[$34>>2];
 $36 = ((($mat)) + 24|0);
 $37 = +HEAPF32[$36>>2];
 $38 = ((($mat)) + 40|0);
 $39 = +HEAPF32[$38>>2];
 $40 = ((($mat)) + 56|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $x$0 * $x$0;
 $43 = $42 * $18;
 $44 = $17 + $43;
 $45 = $y$0 * $x$0;
 $46 = $45 * $18;
 $47 = $z$0 * $16;
 $48 = $47 + $46;
 $49 = $z$0 * $x$0;
 $50 = $49 * $18;
 $51 = $y$0 * $16;
 $52 = $50 - $51;
 $53 = $46 - $47;
 $54 = $y$0 * $y$0;
 $55 = $54 * $18;
 $56 = $17 + $55;
 $57 = $z$0 * $y$0;
 $58 = $57 * $18;
 $59 = $x$0 * $16;
 $60 = $59 + $58;
 $61 = $51 + $50;
 $62 = $58 - $59;
 $63 = $z$0 * $z$0;
 $64 = $63 * $18;
 $65 = $17 + $64;
 $66 = $19 * $44;
 $67 = $48 * $27;
 $68 = $66 + $67;
 $69 = $52 * $35;
 $70 = $68 + $69;
 $71 = $21 * $44;
 $72 = $48 * $29;
 $73 = $71 + $72;
 $74 = $52 * $37;
 $75 = $73 + $74;
 $76 = $23 * $44;
 $77 = $48 * $31;
 $78 = $76 + $77;
 $79 = $52 * $39;
 $80 = $78 + $79;
 $81 = $44 * $25;
 $82 = $48 * $33;
 $83 = $81 + $82;
 $84 = $52 * $41;
 $85 = $83 + $84;
 $86 = $19 * $53;
 $87 = $56 * $27;
 $88 = $86 + $87;
 $89 = $60 * $35;
 $90 = $88 + $89;
 $91 = $21 * $53;
 $92 = $56 * $29;
 $93 = $91 + $92;
 $94 = $60 * $37;
 $95 = $93 + $94;
 $96 = $23 * $53;
 $97 = $56 * $31;
 $98 = $96 + $97;
 $99 = $60 * $39;
 $100 = $98 + $99;
 $101 = $53 * $25;
 $102 = $56 * $33;
 $103 = $101 + $102;
 $104 = $60 * $41;
 $105 = $103 + $104;
 $106 = $19 * $61;
 $107 = $62 * $27;
 $108 = $106 + $107;
 $109 = $65 * $35;
 $110 = $108 + $109;
 $111 = $21 * $61;
 $112 = $62 * $29;
 $113 = $111 + $112;
 $114 = $65 * $37;
 $115 = $113 + $114;
 $116 = $23 * $61;
 $117 = $62 * $31;
 $118 = $116 + $117;
 $119 = $65 * $39;
 $120 = $118 + $119;
 $121 = $61 * $25;
 $122 = $62 * $33;
 $123 = $121 + $122;
 $124 = $65 * $41;
 $125 = $123 + $124;
 $126 = ((($mat)) + 12|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ((($mat)) + 28|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($mat)) + 44|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ((($mat)) + 60|0);
 $133 = HEAP32[$132>>2]|0;
 HEAPF32[$agg$result>>2] = $70;
 $134 = ((($agg$result)) + 4|0);
 HEAPF32[$134>>2] = $90;
 $135 = ((($agg$result)) + 8|0);
 HEAPF32[$135>>2] = $110;
 $136 = ((($agg$result)) + 12|0);
 HEAP32[$136>>2] = $127;
 $137 = ((($agg$result)) + 16|0);
 HEAPF32[$137>>2] = $75;
 $138 = ((($agg$result)) + 20|0);
 HEAPF32[$138>>2] = $95;
 $139 = ((($agg$result)) + 24|0);
 HEAPF32[$139>>2] = $115;
 $140 = ((($agg$result)) + 28|0);
 HEAP32[$140>>2] = $129;
 $141 = ((($agg$result)) + 32|0);
 HEAPF32[$141>>2] = $80;
 $142 = ((($agg$result)) + 36|0);
 HEAPF32[$142>>2] = $100;
 $143 = ((($agg$result)) + 40|0);
 HEAPF32[$143>>2] = $120;
 $144 = ((($agg$result)) + 44|0);
 HEAP32[$144>>2] = $131;
 $145 = ((($agg$result)) + 48|0);
 HEAPF32[$145>>2] = $85;
 $146 = ((($agg$result)) + 52|0);
 HEAPF32[$146>>2] = $105;
 $147 = ((($agg$result)) + 56|0);
 HEAPF32[$147>>2] = $125;
 $148 = ((($agg$result)) + 60|0);
 HEAP32[$148>>2] = $133;
 STACKTOP = sp;return;
}
function _MatrixScale($agg$result,$x,$y,$z) {
 $agg$result = $agg$result|0;
 $x = +$x;
 $y = +$y;
 $z = +$z;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$agg$result>>2] = $x;
 $0 = ((($agg$result)) + 4|0);
 $1 = ((($agg$result)) + 20|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 HEAPF32[$1>>2] = $y;
 $2 = ((($agg$result)) + 24|0);
 $3 = ((($agg$result)) + 40|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 HEAPF32[$3>>2] = $z;
 $4 = ((($agg$result)) + 44|0);
 $5 = ((($agg$result)) + 60|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 HEAPF32[$5>>2] = 1.0;
 return;
}
function _MatrixMultiply($agg$result,$left,$right) {
 $agg$result = $agg$result|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0;
 var $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0;
 var $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$left>>2];
 $1 = ((($left)) + 16|0);
 $2 = +HEAPF32[$1>>2];
 $3 = ((($left)) + 32|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($left)) + 48|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($left)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = ((($left)) + 20|0);
 $10 = +HEAPF32[$9>>2];
 $11 = ((($left)) + 36|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($left)) + 52|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($left)) + 8|0);
 $16 = +HEAPF32[$15>>2];
 $17 = ((($left)) + 24|0);
 $18 = +HEAPF32[$17>>2];
 $19 = ((($left)) + 40|0);
 $20 = +HEAPF32[$19>>2];
 $21 = ((($left)) + 56|0);
 $22 = +HEAPF32[$21>>2];
 $23 = ((($left)) + 12|0);
 $24 = +HEAPF32[$23>>2];
 $25 = ((($left)) + 28|0);
 $26 = +HEAPF32[$25>>2];
 $27 = ((($left)) + 44|0);
 $28 = +HEAPF32[$27>>2];
 $29 = ((($left)) + 60|0);
 $30 = +HEAPF32[$29>>2];
 $31 = +HEAPF32[$right>>2];
 $32 = ((($right)) + 16|0);
 $33 = +HEAPF32[$32>>2];
 $34 = ((($right)) + 32|0);
 $35 = +HEAPF32[$34>>2];
 $36 = ((($right)) + 48|0);
 $37 = +HEAPF32[$36>>2];
 $38 = ((($right)) + 4|0);
 $39 = +HEAPF32[$38>>2];
 $40 = ((($right)) + 20|0);
 $41 = +HEAPF32[$40>>2];
 $42 = ((($right)) + 36|0);
 $43 = +HEAPF32[$42>>2];
 $44 = ((($right)) + 52|0);
 $45 = +HEAPF32[$44>>2];
 $46 = ((($right)) + 8|0);
 $47 = +HEAPF32[$46>>2];
 $48 = ((($right)) + 24|0);
 $49 = +HEAPF32[$48>>2];
 $50 = ((($right)) + 40|0);
 $51 = +HEAPF32[$50>>2];
 $52 = ((($right)) + 56|0);
 $53 = +HEAPF32[$52>>2];
 $54 = ((($right)) + 12|0);
 $55 = +HEAPF32[$54>>2];
 $56 = ((($right)) + 28|0);
 $57 = +HEAPF32[$56>>2];
 $58 = ((($right)) + 44|0);
 $59 = +HEAPF32[$58>>2];
 $60 = ((($right)) + 60|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $0 * $31;
 $63 = $8 * $33;
 $64 = $62 + $63;
 $65 = $16 * $35;
 $66 = $64 + $65;
 $67 = $24 * $37;
 $68 = $66 + $67;
 $69 = $2 * $31;
 $70 = $10 * $33;
 $71 = $69 + $70;
 $72 = $18 * $35;
 $73 = $71 + $72;
 $74 = $26 * $37;
 $75 = $73 + $74;
 $76 = $4 * $31;
 $77 = $12 * $33;
 $78 = $76 + $77;
 $79 = $20 * $35;
 $80 = $78 + $79;
 $81 = $28 * $37;
 $82 = $80 + $81;
 $83 = $6 * $31;
 $84 = $14 * $33;
 $85 = $83 + $84;
 $86 = $22 * $35;
 $87 = $85 + $86;
 $88 = $30 * $37;
 $89 = $87 + $88;
 $90 = $0 * $39;
 $91 = $8 * $41;
 $92 = $90 + $91;
 $93 = $16 * $43;
 $94 = $92 + $93;
 $95 = $24 * $45;
 $96 = $94 + $95;
 $97 = $2 * $39;
 $98 = $10 * $41;
 $99 = $97 + $98;
 $100 = $18 * $43;
 $101 = $99 + $100;
 $102 = $26 * $45;
 $103 = $101 + $102;
 $104 = $4 * $39;
 $105 = $12 * $41;
 $106 = $104 + $105;
 $107 = $20 * $43;
 $108 = $106 + $107;
 $109 = $28 * $45;
 $110 = $108 + $109;
 $111 = $6 * $39;
 $112 = $14 * $41;
 $113 = $111 + $112;
 $114 = $22 * $43;
 $115 = $113 + $114;
 $116 = $30 * $45;
 $117 = $115 + $116;
 $118 = $0 * $47;
 $119 = $8 * $49;
 $120 = $118 + $119;
 $121 = $16 * $51;
 $122 = $120 + $121;
 $123 = $24 * $53;
 $124 = $122 + $123;
 $125 = $2 * $47;
 $126 = $10 * $49;
 $127 = $125 + $126;
 $128 = $18 * $51;
 $129 = $127 + $128;
 $130 = $26 * $53;
 $131 = $129 + $130;
 $132 = $4 * $47;
 $133 = $12 * $49;
 $134 = $132 + $133;
 $135 = $20 * $51;
 $136 = $134 + $135;
 $137 = $28 * $53;
 $138 = $136 + $137;
 $139 = $6 * $47;
 $140 = $14 * $49;
 $141 = $139 + $140;
 $142 = $22 * $51;
 $143 = $141 + $142;
 $144 = $30 * $53;
 $145 = $143 + $144;
 $146 = $0 * $55;
 $147 = $8 * $57;
 $148 = $146 + $147;
 $149 = $16 * $59;
 $150 = $148 + $149;
 $151 = $24 * $61;
 $152 = $150 + $151;
 $153 = $2 * $55;
 $154 = $10 * $57;
 $155 = $153 + $154;
 $156 = $18 * $59;
 $157 = $155 + $156;
 $158 = $26 * $61;
 $159 = $157 + $158;
 $160 = $4 * $55;
 $161 = $12 * $57;
 $162 = $160 + $161;
 $163 = $20 * $59;
 $164 = $162 + $163;
 $165 = $28 * $61;
 $166 = $164 + $165;
 $167 = $6 * $55;
 $168 = $14 * $57;
 $169 = $167 + $168;
 $170 = $22 * $59;
 $171 = $169 + $170;
 $172 = $30 * $61;
 $173 = $171 + $172;
 HEAPF32[$agg$result>>2] = $68;
 $174 = ((($agg$result)) + 4|0);
 HEAPF32[$174>>2] = $96;
 $175 = ((($agg$result)) + 8|0);
 HEAPF32[$175>>2] = $124;
 $176 = ((($agg$result)) + 12|0);
 HEAPF32[$176>>2] = $152;
 $177 = ((($agg$result)) + 16|0);
 HEAPF32[$177>>2] = $75;
 $178 = ((($agg$result)) + 20|0);
 HEAPF32[$178>>2] = $103;
 $179 = ((($agg$result)) + 24|0);
 HEAPF32[$179>>2] = $131;
 $180 = ((($agg$result)) + 28|0);
 HEAPF32[$180>>2] = $159;
 $181 = ((($agg$result)) + 32|0);
 HEAPF32[$181>>2] = $82;
 $182 = ((($agg$result)) + 36|0);
 HEAPF32[$182>>2] = $110;
 $183 = ((($agg$result)) + 40|0);
 HEAPF32[$183>>2] = $138;
 $184 = ((($agg$result)) + 44|0);
 HEAPF32[$184>>2] = $166;
 $185 = ((($agg$result)) + 48|0);
 HEAPF32[$185>>2] = $89;
 $186 = ((($agg$result)) + 52|0);
 HEAPF32[$186>>2] = $117;
 $187 = ((($agg$result)) + 56|0);
 HEAPF32[$187>>2] = $145;
 $188 = ((($agg$result)) + 60|0);
 HEAPF32[$188>>2] = $173;
 return;
}
function _MatrixOrtho($agg$result,$left,$right,$bottom,$top,$near,$far) {
 $agg$result = $agg$result|0;
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $near = +$near;
 $far = +$far;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $right - $left;
 $1 = $0;
 $2 = $top - $bottom;
 $3 = $2;
 $4 = $far - $near;
 $5 = $4;
 $6 = 2.0 / $1;
 $7 = 2.0 / $3;
 $8 = -2.0 / $5;
 $9 = $left + $right;
 $10 = -$9;
 $11 = $1;
 $12 = $10 / $11;
 $13 = $12;
 $14 = $bottom + $top;
 $15 = -$14;
 $16 = $3;
 $17 = $15 / $16;
 $18 = $17;
 $19 = $near + $far;
 $20 = -$19;
 $21 = $5;
 $22 = $20 / $21;
 $23 = $22;
 HEAPF32[$agg$result>>2] = $6;
 $24 = ((($agg$result)) + 4|0);
 HEAPF32[$24>>2] = 0.0;
 $25 = ((($agg$result)) + 8|0);
 HEAPF32[$25>>2] = 0.0;
 $26 = ((($agg$result)) + 12|0);
 HEAPF32[$26>>2] = $13;
 $27 = ((($agg$result)) + 16|0);
 HEAPF32[$27>>2] = 0.0;
 $28 = ((($agg$result)) + 20|0);
 HEAPF32[$28>>2] = $7;
 $29 = ((($agg$result)) + 24|0);
 HEAPF32[$29>>2] = 0.0;
 $30 = ((($agg$result)) + 28|0);
 HEAPF32[$30>>2] = $18;
 $31 = ((($agg$result)) + 32|0);
 HEAPF32[$31>>2] = 0.0;
 $32 = ((($agg$result)) + 36|0);
 HEAPF32[$32>>2] = 0.0;
 $33 = ((($agg$result)) + 40|0);
 HEAPF32[$33>>2] = $8;
 $34 = ((($agg$result)) + 44|0);
 HEAPF32[$34>>2] = $23;
 $35 = ((($agg$result)) + 48|0);
 HEAPF32[$35>>2] = 0.0;
 $36 = ((($agg$result)) + 52|0);
 HEAPF32[$36>>2] = 0.0;
 $37 = ((($agg$result)) + 56|0);
 HEAPF32[$37>>2] = 0.0;
 $38 = ((($agg$result)) + 60|0);
 HEAPF32[$38>>2] = 1.0;
 return;
}
function _TraceLog($msgType,$text,$varargs) {
 $msgType = $msgType|0;
 $text = $text|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $args = sp;
 if ((($msgType|0) == 1)) {
  $1 = HEAP32[_stdout>>2]|0;
  (_fwrite((18472|0),7,1,($1|0))|0);
 } else if ((($msgType|0) == 3)) {
  STACKTOP = sp;return;
 } else if ((($msgType|0) == 2)) {
  $2 = HEAP32[_stdout>>2]|0;
  (_fwrite((18480|0),9,1,($2|0))|0);
 } else if ((($msgType|0) == 0)) {
  $0 = HEAP32[_stdout>>2]|0;
  (_fwrite((18464|0),6,1,($0|0))|0);
 }
 HEAP32[$args>>2] = $varargs;
 $3 = HEAP32[_stdout>>2]|0;
 (_vfprintf(($3|0),($text|0),($args|0))|0);
 $4 = HEAP32[_stdout>>2]|0;
 (_fputc(10,($4|0))|0);
 $5 = ($msgType|0)==(1);
 if ($5) {
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _GetExtension($fileName) {
 $fileName = $fileName|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strrchr($fileName,46)|0);
 $1 = ($0|0)==(0|0);
 $2 = ($0|0)==($fileName|0);
 $or$cond = $1 | $2;
 $3 = ((($0)) + 1|0);
 $$0 = $or$cond ? 24696 : $3;
 return ($$0|0);
}
function _GetNextPOT($num) {
 $num = $num|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (($num) + -1)|0;
 $2 = $1 >> 1;
 $3 = $2 | $1;
 $4 = $3 >> 2;
 $5 = $4 | $3;
 $6 = $5 >> 4;
 $7 = $6 | $5;
 $8 = $7 >> 8;
 $9 = $8 | $7;
 $10 = $9 >> 16;
 $11 = $10 | $9;
 $12 = (($11) + 1)|0;
 $$0 = $12;
 return ($$0|0);
}
function _InitAudioDevice() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = (_alcOpenDevice((0|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _TraceLog(1,18496,$vararg_buffer);
 }
 $2 = (_alcCreateContext(($0|0),(0|0))|0);
 $cond = ($2|0)==(0|0);
 if ($cond) {
  label = 6;
 } else {
  $3 = (_alcMakeContextCurrent(($2|0))|0);
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   _alcDestroyContext(($2|0));
   label = 6;
  }
 }
 if ((label|0) == 6) {
  (_alcCloseDevice(($0|0))|0);
  _TraceLog(1,18536,$vararg_buffer1);
 }
 $5 = (_alcGetString(($0|0),4101)|0);
 HEAP32[$vararg_buffer3>>2] = $5;
 _TraceLog(0,18568,$vararg_buffer3);
 _alListener3f(4100,0.0,0.0,0.0);
 _alListener3f(4102,0.0,0.0,0.0);
 _alListener3f(4111,0.0,0.0,-1.0);
 STACKTOP = sp;return;
}
function _CloseAudioDevice() {
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _StopMusicStream();
 $0 = (_alcGetCurrentContext()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _TraceLog(2,18624,$vararg_buffer);
 }
 $2 = (_alcGetContextsDevice(($0|0))|0);
 (_alcMakeContextCurrent((0|0))|0);
 _alcDestroyContext(($0|0));
 (_alcCloseDevice(($2|0))|0);
 STACKTOP = sp;return;
}
function _StopMusicStream() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8808>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  HEAP32[8808>>2] = 0;
  return;
 }
 $2 = HEAP32[(18684)>>2]|0;
 _alSourceStop(($2|0));
 _EmptyMusicStream();
 _alDeleteSources(1,((18684)|0));
 _alDeleteBuffers(2,((18676)|0));
 $3 = HEAP32[18672>>2]|0;
 _stb_vorbis_close($3);
 HEAP32[8808>>2] = 0;
 return;
}
function _LoadSound($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buffer = 0, $format$0 = 0, $sound$sroa$0$0 = 0, $sound$sroa$2$0 = 0, $source = 0, $vararg_buffer = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $wave = 0, $wave$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $wave$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $wave = sp + 32|0;
 $source = sp + 24|0;
 $buffer = sp + 28|0;
 $0 = ((($wave)) + 4|0);
 $1 = ((($wave)) + 8|0);
 $2 = ((($wave)) + 12|0);
 $3 = ((($wave)) + 14|0);
 ;HEAP32[$wave>>2]=0|0;HEAP32[$wave+4>>2]=0|0;HEAP32[$wave+8>>2]=0|0;HEAP32[$wave+12>>2]=0|0;
 $4 = (_GetExtension($fileName)|0);
 $5 = (_strcmp($4,18712)|0);
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   _LoadWAV($wave,$fileName);
  } else {
   $7 = (_GetExtension($fileName)|0);
   $8 = (_strcmp($7,18720)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    _LoadOGG($wave,$fileName);
    break;
   } else {
    HEAP32[$vararg_buffer>>2] = $fileName;
    _TraceLog(2,18728,$vararg_buffer);
    break;
   }
  }
 } while(0);
 $10 = HEAP32[$wave>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $sound$sroa$0$0 = 0;$sound$sroa$2$0 = 0;
  HEAP32[$agg$result>>2] = $sound$sroa$0$0;
  $37 = ((($agg$result)) + 4|0);
  HEAP32[$37>>2] = $sound$sroa$2$0;
  STACKTOP = sp;return;
 }
 $12 = HEAP16[$3>>1]|0;
 if ((($12<<16>>16) == 2)) {
  $16 = HEAP16[$2>>1]|0;
  $17 = ($16<<16>>16)==(8);
  if ($17) {
   $format$0 = 4354;
  } else {
   $18 = ($16<<16>>16)==(16);
   $$1 = $18 ? 4355 : 0;
   $format$0 = $$1;
  }
 } else if ((($12<<16>>16) == 1)) {
  $13 = HEAP16[$2>>1]|0;
  $14 = ($13<<16>>16)==(8);
  if ($14) {
   $format$0 = 4352;
  } else {
   $15 = ($13<<16>>16)==(16);
   $$ = $15 ? 4353 : 0;
   $format$0 = $$;
  }
 } else {
  $format$0 = 0;
 }
 _alGenSources(1,($source|0));
 $19 = HEAP32[$source>>2]|0;
 _alSourcef(($19|0),4099,1.0);
 $20 = HEAP32[$source>>2]|0;
 _alSourcef(($20|0),4106,1.0);
 $21 = HEAP32[$source>>2]|0;
 _alSource3f(($21|0),4100,0.0,0.0,0.0);
 $22 = HEAP32[$source>>2]|0;
 _alSource3f(($22|0),4102,0.0,0.0,0.0);
 $23 = HEAP32[$source>>2]|0;
 _alSourcei(($23|0),4103,0);
 _alGenBuffers(1,($buffer|0));
 $24 = HEAP32[$buffer>>2]|0;
 $25 = HEAP32[$wave>>2]|0;
 $26 = HEAP32[$0>>2]|0;
 $27 = HEAP32[$1>>2]|0;
 _alBufferData(($24|0),($format$0|0),($25|0),($26|0),($27|0));
 $28 = HEAP32[$source>>2]|0;
 $29 = HEAP32[$buffer>>2]|0;
 _alSourcei(($28|0),4105,($29|0));
 $30 = HEAP32[$1>>2]|0;
 $31 = HEAP16[$2>>1]|0;
 $32 = $31 << 16 >> 16;
 $33 = HEAP16[$3>>1]|0;
 $34 = $33 << 16 >> 16;
 HEAP32[$wave$byval_copy>>2] = $fileName;
 $vararg_ptr4 = ((($wave$byval_copy)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $30;
 $vararg_ptr5 = ((($wave$byval_copy)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $32;
 $vararg_ptr6 = ((($wave$byval_copy)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $34;
 _TraceLog(0,18784,$wave$byval_copy);
 ;HEAP32[$wave$byval_copy>>2]=HEAP32[$wave>>2]|0;HEAP32[$wave$byval_copy+4>>2]=HEAP32[$wave+4>>2]|0;HEAP32[$wave$byval_copy+8>>2]=HEAP32[$wave+8>>2]|0;HEAP32[$wave$byval_copy+12>>2]=HEAP32[$wave+12>>2]|0;
 _UnloadWave($wave$byval_copy);
 $35 = HEAP32[$source>>2]|0;
 $36 = HEAP32[$buffer>>2]|0;
 $sound$sroa$0$0 = $35;$sound$sroa$2$0 = $36;
 HEAP32[$agg$result>>2] = $sound$sroa$0$0;
 $37 = ((($agg$result)) + 4|0);
 HEAP32[$37>>2] = $sound$sroa$2$0;
 STACKTOP = sp;return;
}
function _UnloadSound($sound) {
 $sound = $sound|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _alDeleteSources(1,($sound|0));
 $0 = ((($sound)) + 4|0);
 _alDeleteBuffers(1,($0|0));
 _TraceLog(0,18864,$vararg_buffer);
 STACKTOP = sp;return;
}
function _PlaySound($sound) {
 $sound = $sound|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$sound>>2]|0;
 _alSourcePlay(($0|0));
 return;
}
function _PlayMusicStream($fileName) {
 $fileName = $fileName|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp;
 $vararg_buffer5 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $info = sp + 40|0;
 $0 = (_GetExtension($fileName)|0);
 $1 = (_strcmp($0,18720)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  HEAP32[$vararg_buffer13>>2] = $fileName;
  _TraceLog(2,19016,$vararg_buffer13);
  STACKTOP = sp;return;
 }
 _StopMusicStream();
 $3 = (_stb_vorbis_open_filename($fileName,0,0)|0);
 HEAP32[18672>>2] = $3;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$vararg_buffer>>2] = $fileName;
  _TraceLog(2,18888,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  _stb_vorbis_get_info($info,$3);
  $5 = ((($info)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[(18692)>>2] = $6;
  $7 = HEAP32[$info>>2]|0;
  HEAP32[(18696)>>2] = $7;
  $8 = HEAP32[$info>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $fileName;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $8;
  _TraceLog(0,18928,$vararg_buffer1);
  $9 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $fileName;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $9;
  _TraceLog(0,18960,$vararg_buffer5);
  $10 = ((($info)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer9>>2] = $fileName;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = $11;
  _TraceLog(0,18984,$vararg_buffer9);
  $12 = HEAP32[$5>>2]|0;
  $13 = ($12|0)==(2);
  $$ = $13 ? 4355 : 4353;
  HEAP32[(18688)>>2] = $$;
  HEAP32[(18704)>>2] = 1;
  HEAP32[8808>>2] = 1;
  _alGenSources(1,((18684)|0));
  $14 = HEAP32[(18684)>>2]|0;
  _alSourcef(($14|0),4099,1.0);
  $15 = HEAP32[(18684)>>2]|0;
  _alSourcef(($15|0),4106,1.0);
  $16 = HEAP32[(18684)>>2]|0;
  _alSource3f(($16|0),4100,0.0,0.0,0.0);
  $17 = HEAP32[(18684)>>2]|0;
  _alSource3f(($17|0),4102,0.0,0.0,0.0);
  _alGenBuffers(2,((18676)|0));
  $18 = HEAP32[(18676)>>2]|0;
  (_BufferMusicStream($18)|0);
  $19 = HEAP32[(18680)>>2]|0;
  (_BufferMusicStream($19)|0);
  $20 = HEAP32[(18684)>>2]|0;
  _alSourceQueueBuffers(($20|0),2,((18676)|0));
  $21 = HEAP32[(18684)>>2]|0;
  _alSourcePlay(($21|0));
  $22 = HEAP32[18672>>2]|0;
  $23 = (_stb_vorbis_stream_length_in_samples($22)|0);
  $24 = HEAP32[(18692)>>2]|0;
  $25 = Math_imul($24, $23)|0;
  HEAP32[(18700)>>2] = $25;
  STACKTOP = sp;return;
 }
}
function _UpdateMusicStream() {
 var $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $active$0$lcssa = 0, $active$1 = 0, $buffer = 0, $or$cond = 0, $or$cond3 = 0, $processed = 0, $state = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $buffer = sp + 12|0;
 $processed = sp + 4|0;
 $state = sp + 8|0;
 HEAP32[$buffer>>2] = 0;
 HEAP32[$processed>>2] = 0;
 $0 = HEAP32[8808>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[(18684)>>2]|0;
 _alGetSourcei(($2|0),4118,($processed|0));
 $$pr = HEAP32[$processed>>2]|0;
 $3 = ($$pr|0)>(0);
 $4 = HEAP32[(18684)>>2]|0;
 if ($3) {
  $5 = $4;
  while(1) {
   _alSourceUnqueueBuffers(($5|0),1,($buffer|0));
   $6 = HEAP32[$buffer>>2]|0;
   $7 = (_BufferMusicStream($6)|0);
   $8 = ($7|0)==(0);
   $9 = HEAP32[(18704)>>2]|0;
   $10 = ($9|0)!=(0);
   $or$cond = $8 & $10;
   if ($or$cond) {
    $11 = HEAP32[18672>>2]|0;
    _stb_vorbis_seek_start($11);
    $12 = HEAP32[18672>>2]|0;
    $13 = (_stb_vorbis_stream_length_in_samples($12)|0);
    $14 = HEAP32[(18692)>>2]|0;
    $15 = Math_imul($14, $13)|0;
    HEAP32[(18700)>>2] = $15;
    $16 = HEAP32[$buffer>>2]|0;
    $17 = (_BufferMusicStream($16)|0);
    $active$1 = $17;
   } else {
    $active$1 = $7;
   }
   $18 = HEAP32[(18684)>>2]|0;
   _alSourceQueueBuffers(($18|0),1,($buffer|0));
   $19 = (_alGetError()|0);
   $20 = ($19|0)==(0);
   if (!($20)) {
    _TraceLog(2,19072,$vararg_buffer);
   }
   $21 = HEAP32[$processed>>2]|0;
   $22 = (($21) + -1)|0;
   HEAP32[$processed>>2] = $22;
   $23 = ($21|0)>(1);
   $24 = HEAP32[(18684)>>2]|0;
   if ($23) {
    $5 = $24;
   } else {
    $$lcssa = $24;$active$0$lcssa = $active$1;
    break;
   }
  }
 } else {
  $$lcssa = $4;$active$0$lcssa = 1;
 }
 _alGetSourcei(($$lcssa|0),4112,($state|0));
 $25 = HEAP32[$state>>2]|0;
 $26 = ($25|0)!=(4114);
 $27 = ($active$0$lcssa|0)!=(0);
 $or$cond3 = $27 & $26;
 if ($or$cond3) {
  $28 = HEAP32[(18684)>>2]|0;
  _alSourcePlay(($28|0));
 }
 if ($27) {
  STACKTOP = sp;return;
 }
 _StopMusicStream();
 STACKTOP = sp;return;
}
function _GetRawTouchPosition($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 19112;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$result;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function _InitGesturesSystem() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_emscripten_set_touchstart_callback((19160|0),(0|0),1,(3|0))|0);
 (_emscripten_set_touchend_callback((19160|0),(0|0),1,(3|0))|0);
 (_emscripten_set_touchmove_callback((19160|0),(0|0),1,(3|0))|0);
 (_emscripten_set_touchcancel_callback((19160|0),(0|0),1,(3|0))|0);
 return;
}
function _UpdateGestures() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19168>>2]|0;
 $1 = ($0|0)==(2);
 $2 = HEAP32[19120>>2]|0;
 $3 = ($2|0)==(2);
 $or$cond = $1 & $3;
 if ($or$cond) {
  HEAP32[19120>>2] = 8;
  return;
 }
 $4 = ($2|0)==(8);
 if ($4) {
  return;
 }
 HEAP32[19120>>2] = 1;
 return;
}
function _InitDisplay($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer18 = sp + 32|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer10 = sp + 48|0;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 64|0;
 HEAP32[8856>>2] = $width;
 HEAP32[8872>>2] = $height;
 _MatrixIdentity($0);
 dest=9024; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 (_glfwSetErrorCallback((2|0))|0);
 $1 = (_glfwInit()|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _TraceLog(1,30664,$vararg_buffer);
 }
 $3 = HEAP32[8856>>2]|0;
 HEAP32[10184>>2] = $3;
 $4 = HEAP32[8872>>2]|0;
 HEAP32[10192>>2] = $4;
 _glfwDefaultWindowHints();
 _glfwWindowHint(131075,0);
 $5 = (_rlGetVersion()|0);
 $6 = ($5|0)==(2);
 if ($6) {
  $7 = HEAP8[9104>>0]|0;
  $8 = $7 & 16;
  $9 = ($8<<24>>24)==(0);
  if (!($9)) {
   _glfwWindowHint(135181,4);
   _TraceLog(0,30696,$vararg_buffer1);
  }
  _glfwWindowHint(139266,3);
  _glfwWindowHint(139267,3);
  _glfwWindowHint(139272,204801);
  _glfwWindowHint(139270,0);
 }
 $10 = HEAP32[9112>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $19 = HEAP32[8856>>2]|0;
  $20 = HEAP32[8872>>2]|0;
  $21 = HEAP32[8848>>2]|0;
  $22 = (_glfwCreateWindow(($19|0),($20|0),($21|0),(0|0),(0|0))|0);
  HEAP32[8944>>2] = $22;
  $23 = HEAP32[8856>>2]|0;
  HEAP32[10216>>2] = $23;
  $24 = HEAP32[8872>>2]|0;
  HEAP32[10224>>2] = $24;
  $25 = $22;
 } else {
  $12 = HEAP32[10184>>2]|0;
  $13 = HEAP32[10192>>2]|0;
  _SetupFramebufferSize($12,$13);
  $14 = HEAP32[10216>>2]|0;
  $15 = HEAP32[10224>>2]|0;
  $16 = HEAP32[8848>>2]|0;
  $17 = (_glfwGetPrimaryMonitor()|0);
  $18 = (_glfwCreateWindow(($14|0),($15|0),($16|0),($17|0),(0|0))|0);
  HEAP32[8944>>2] = $18;
  $25 = $18;
 }
 $26 = ($25|0)==(0|0);
 if ($26) {
  _glfwTerminate();
  _TraceLog(1,30728,$vararg_buffer3);
 } else {
  _TraceLog(0,30768,$vararg_buffer5);
  $27 = HEAP32[10216>>2]|0;
  $28 = HEAP32[10224>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $27;
  $vararg_ptr9 = ((($vararg_buffer7)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = $28;
  _TraceLog(0,30808,$vararg_buffer7);
  $29 = HEAP32[8856>>2]|0;
  $30 = HEAP32[8872>>2]|0;
  HEAP32[$vararg_buffer10>>2] = $29;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $30;
  _TraceLog(0,30832,$vararg_buffer10);
  $31 = HEAP32[10200>>2]|0;
  $32 = HEAP32[10208>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $31;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $32;
  _TraceLog(0,30856,$vararg_buffer14);
 }
 $33 = HEAP32[8944>>2]|0;
 (_glfwSetWindowSizeCallback(($33|0),(1|0))|0);
 $34 = HEAP32[8944>>2]|0;
 (_glfwSetCursorEnterCallback(($34|0),(3|0))|0);
 $35 = HEAP32[8944>>2]|0;
 (_glfwSetKeyCallback(($35|0),(1|0))|0);
 $36 = HEAP32[8944>>2]|0;
 (_glfwSetMouseButtonCallback(($36|0),(1|0))|0);
 $37 = HEAP32[8944>>2]|0;
 (_glfwSetCharCallback(($37|0),(4|0))|0);
 $38 = HEAP32[8944>>2]|0;
 (_glfwSetScrollCallback(($38|0),(1|0))|0);
 $39 = HEAP32[8944>>2]|0;
 (_glfwSetWindowIconifyCallback(($39|0),(5|0))|0);
 $40 = HEAP32[8944>>2]|0;
 _glfwMakeContextCurrent(($40|0));
 $41 = HEAP8[9104>>0]|0;
 $42 = $41 & 32;
 $43 = ($42<<24>>24)==(0);
 if ($43) {
  STACKTOP = sp;return;
 }
 _glfwSwapInterval(1);
 _TraceLog(0,30888,$vararg_buffer18);
 STACKTOP = sp;return;
}
function _InitGraphics() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 _rlglInit();
 $1 = HEAP32[10200>>2]|0;
 $2 = HEAP32[10208>>2]|0;
 $3 = HEAP32[10216>>2]|0;
 $4 = HEAP32[10224>>2]|0;
 _rlglInitGraphics($1,$2,$3,$4);
 HEAP8[$0>>0] = -11;
 $5 = ((($0)) + 1|0);
 HEAP8[$5>>0] = -11;
 $6 = ((($0)) + 2|0);
 HEAP8[$6>>0] = -11;
 $7 = ((($0)) + 3|0);
 HEAP8[$7>>0] = -1;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$0+3>>0]|0;
 _ClearBackground($$byval_copy);
 STACKTOP = sp;return;
}
function _InitTimer() {
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_time((0|0))|0);
 _srand($0);
 $1 = (+_GetTime());
 HEAPF64[9008>>3] = $1;
 return;
}
function _EmscriptenFullscreenChangeCallback($eventType,$e,$userData) {
 $eventType = $eventType|0;
 $e = $e|0;
 $userData = $userData|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(0);
 $2 = ((($e)) + 264|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($e)) + 268|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($e)) + 272|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($e)) + 276|0);
 $9 = HEAP32[$8>>2]|0;
 if ($1) {
  HEAP32[$vararg_buffer4>>2] = $3;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $5;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $7;
  $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = $9;
  _TraceLog(0,30592,$vararg_buffer4);
  STACKTOP = sp;return 0;
 } else {
  HEAP32[$vararg_buffer>>2] = $3;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $7;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $9;
  _TraceLog(0,30520,$vararg_buffer);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _LogoAnimation() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8880>>2] = 0;
 return;
}
function _GetTime() {
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_glfwGetTime());
 return (+$0);
}
function _SwapBuffers() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8944>>2]|0;
 _glfwSwapBuffers(($0|0));
 return;
}
function _PollInputEvents() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mouseX = 0, $mouseY = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $mouseX = sp;
 $mouseY = sp + 8|0;
 _GetRawTouchPosition($0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = 10176;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 _UpdateGestures();
 $11 = HEAP32[8944>>2]|0;
 _glfwGetCursorPos(($11|0),($mouseX|0),($mouseY|0));
 $12 = +HEAPF64[$mouseX>>3];
 $13 = $12;
 HEAPF32[8864>>2] = $13;
 $14 = +HEAPF64[$mouseY>>3];
 $15 = $14;
 HEAPF32[(8868)>>2] = $15;
 HEAP32[10144>>2] = -1;
 _memcpy((9632|0),(9120|0),512)|0;
 ;HEAP8[10160>>0]=HEAP8[10152>>0]|0;HEAP8[10160+1>>0]=HEAP8[10152+1>>0]|0;HEAP8[10160+2>>0]=HEAP8[10152+2>>0]|0;
 $16 = HEAP32[30512>>2]|0;
 HEAP32[10168>>2] = $16;
 HEAP32[30512>>2] = 0;
 _glfwPollEvents();
 STACKTOP = sp;return;
}
function _GetKeyStatus($key) {
 $key = $key|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8944>>2]|0;
 $1 = (_glfwGetKey(($0|0),($key|0))|0);
 return ($1|0);
}
function _LoadDefaultShader($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $fShaderStr = 0, $vShaderStr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 928|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $vShaderStr = sp + 388|0;
 $fShaderStr = sp + 12|0;
 _memcpy(($vShaderStr|0),(29488|0),532)|0;
 _memcpy(($fShaderStr|0),(30024|0),373)|0;
 $0 = (_LoadShaderProgram($vShaderStr,$fShaderStr)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  HEAP32[$vararg_buffer1>>2] = $0;
  _TraceLog(2,30448,$vararg_buffer1);
 } else {
  HEAP32[$vararg_buffer>>2] = $0;
  _TraceLog(0,30400,$vararg_buffer);
 }
 $2 = (_glGetAttribLocation(($0|0),(13944|0))|0);
 $3 = (_glGetAttribLocation(($0|0),(13960|0))|0);
 $4 = (_glGetAttribLocation(($0|0),(30496|0))|0);
 $5 = (_glGetUniformLocation(($0|0),(13992|0))|0);
 $6 = (_glGetUniformLocation(($0|0),(14008|0))|0);
 $7 = (_glGetUniformLocation(($0|0),(14048|0))|0);
 $8 = HEAP32[8800>>2]|0;
 HEAP32[$agg$result>>2] = $0;
 $9 = ((($agg$result)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($agg$result)) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($agg$result)) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($agg$result)) + 16|0);
 HEAP32[$12>>2] = $2;
 $13 = ((($agg$result)) + 20|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($agg$result)) + 24|0);
 HEAP32[$14>>2] = -1;
 $15 = ((($agg$result)) + 28|0);
 HEAP32[$15>>2] = $4;
 $16 = ((($agg$result)) + 32|0);
 HEAP32[$16>>2] = $6;
 $17 = ((($agg$result)) + 36|0);
 HEAP32[$17>>2] = $5;
 $18 = ((($agg$result)) + 40|0);
 HEAP32[$18>>2] = -1;
 $19 = ((($agg$result)) + 44|0);
 HEAP32[$19>>2] = $7;
 $20 = ((($agg$result)) + 48|0);
 HEAP32[$20>>2] = -1;
 $21 = ((($agg$result)) + 52|0);
 HEAP32[$21>>2] = -1;
 STACKTOP = sp;return;
}
function _LoadSimpleShader($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $fShaderStr = 0, $vShaderStr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 848|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $vShaderStr = sp + 388|0;
 $fShaderStr = sp + 12|0;
 _memcpy(($vShaderStr|0),(28552|0),460)|0;
 _memcpy(($fShaderStr|0),(29016|0),373)|0;
 $0 = (_LoadShaderProgram($vShaderStr,$fShaderStr)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  HEAP32[$vararg_buffer1>>2] = $0;
  _TraceLog(2,29440,$vararg_buffer1);
 } else {
  HEAP32[$vararg_buffer>>2] = $0;
  _TraceLog(0,29392,$vararg_buffer);
 }
 $2 = (_glGetAttribLocation(($0|0),(13944|0))|0);
 $3 = (_glGetAttribLocation(($0|0),(13960|0))|0);
 $4 = (_glGetAttribLocation(($0|0),(13976|0))|0);
 $5 = (_glGetUniformLocation(($0|0),(13992|0))|0);
 $6 = (_glGetUniformLocation(($0|0),(14008|0))|0);
 $7 = (_glGetUniformLocation(($0|0),(14032|0))|0);
 $8 = (_glGetUniformLocation(($0|0),(14048|0))|0);
 $9 = HEAP32[8800>>2]|0;
 HEAP32[$agg$result>>2] = $0;
 $10 = ((($agg$result)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($agg$result)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($agg$result)) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($agg$result)) + 16|0);
 HEAP32[$13>>2] = $2;
 $14 = ((($agg$result)) + 20|0);
 HEAP32[$14>>2] = $3;
 $15 = ((($agg$result)) + 24|0);
 HEAP32[$15>>2] = $4;
 $16 = ((($agg$result)) + 28|0);
 HEAP32[$16>>2] = -1;
 $17 = ((($agg$result)) + 32|0);
 HEAP32[$17>>2] = $6;
 $18 = ((($agg$result)) + 36|0);
 HEAP32[$18>>2] = $5;
 $19 = ((($agg$result)) + 40|0);
 HEAP32[$19>>2] = $7;
 $20 = ((($agg$result)) + 44|0);
 HEAP32[$20>>2] = $8;
 $21 = ((($agg$result)) + 48|0);
 HEAP32[$21>>2] = -1;
 $22 = ((($agg$result)) + 52|0);
 HEAP32[$22>>2] = -1;
 STACKTOP = sp;return;
}
function _InitializeBuffers() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond14 = 0, $exitcond17 = 0, $exitcond19 = 0, $i1$012 = 0, $i3$010 = 0, $i6$07 = 0, $i7$06 = 0, $k$05 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_malloc(24576)|0);
 HEAP32[11576>>2] = $0;
 $1 = (_malloc(8192)|0);
 HEAP32[11496>>2] = $1;
 $2 = HEAP32[11576>>2]|0;
 _memset(($2|0),0,24576)|0;
 $i1$012 = 0;
 while(1) {
  $3 = HEAP32[11496>>2]|0;
  $4 = (($3) + ($i1$012)|0);
  HEAP8[$4>>0] = 0;
  $5 = (($i1$012) + 1)|0;
  $exitcond19 = ($5|0)==(8192);
  if ($exitcond19) {
   break;
  } else {
   $i1$012 = $5;
  }
 }
 HEAP32[11480>>2] = 0;
 HEAP32[11488>>2] = 0;
 $6 = (_malloc(73728)|0);
 HEAP32[11616>>2] = $6;
 $7 = (_malloc(24576)|0);
 HEAP32[11520>>2] = $7;
 $8 = HEAP32[11616>>2]|0;
 _memset(($8|0),0,73728)|0;
 $i3$010 = 0;
 while(1) {
  $9 = HEAP32[11520>>2]|0;
  $10 = (($9) + ($i3$010)|0);
  HEAP8[$10>>0] = 0;
  $11 = (($i3$010) + 1)|0;
  $exitcond17 = ($11|0)==(24576);
  if ($exitcond17) {
   break;
  } else {
   $i3$010 = $11;
  }
 }
 HEAP32[11504>>2] = 0;
 HEAP32[11512>>2] = 0;
 $12 = (_malloc(49152)|0);
 HEAP32[11656>>2] = $12;
 $13 = (_malloc(32768)|0);
 HEAP32[11560>>2] = $13;
 $14 = (_malloc(16384)|0);
 HEAP32[11544>>2] = $14;
 $15 = (_malloc(12288)|0);
 HEAP32[13784>>2] = $15;
 $16 = HEAP32[11656>>2]|0;
 _memset(($16|0),0,49152)|0;
 $17 = HEAP32[11560>>2]|0;
 _memset(($17|0),0,32768)|0;
 $i6$07 = 0;
 while(1) {
  $19 = HEAP32[11544>>2]|0;
  $20 = (($19) + ($i6$07)|0);
  HEAP8[$20>>0] = 0;
  $21 = (($i6$07) + 1)|0;
  $exitcond14 = ($21|0)==(16384);
  if ($exitcond14) {
   break;
  } else {
   $i6$07 = $21;
  }
 }
 $18 = HEAP32[13784>>2]|0;
 $i7$06 = 0;$k$05 = 0;
 while(1) {
  $22 = $k$05 << 2;
  $23 = $22&65535;
  $24 = (($18) + ($i7$06<<1)|0);
  HEAP16[$24>>1] = $23;
  $25 = $22 | 1;
  $26 = $25&65535;
  $27 = $i7$06 | 1;
  $28 = (($18) + ($27<<1)|0);
  HEAP16[$28>>1] = $26;
  $29 = $22 | 2;
  $30 = $29&65535;
  $31 = (($i7$06) + 2)|0;
  $32 = (($18) + ($31<<1)|0);
  HEAP16[$32>>1] = $30;
  $33 = (($i7$06) + 3)|0;
  $34 = (($18) + ($33<<1)|0);
  HEAP16[$34>>1] = $23;
  $35 = (($i7$06) + 4)|0;
  $36 = (($18) + ($35<<1)|0);
  HEAP16[$36>>1] = $30;
  $37 = $22 | 3;
  $38 = $37&65535;
  $39 = (($i7$06) + 5)|0;
  $40 = (($18) + ($39<<1)|0);
  HEAP16[$40>>1] = $38;
  $41 = (($k$05) + 1)|0;
  $42 = (($i7$06) + 6)|0;
  $exitcond = ($41|0)==(1024);
  if ($exitcond) {
   break;
  } else {
   $i7$06 = $42;$k$05 = $41;
  }
 }
 HEAP32[11528>>2] = 0;
 HEAP32[11552>>2] = 0;
 HEAP32[11536>>2] = 0;
 _TraceLog(0,28488,$vararg_buffer);
 STACKTOP = sp;return;
}
function _InitializeBuffersGPU() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer12 = sp;
 $vararg_buffer8 = sp + 8|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $0 = HEAP32[11728>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[11944>>2]|0;
  FUNCTION_TABLE_vii[$2 & 63](1,13760);
  $3 = HEAP32[11976>>2]|0;
  $4 = HEAP32[13760>>2]|0;
  FUNCTION_TABLE_vi[$3 & 31]($4);
 }
 _glGenBuffers(2,(13728|0));
 $5 = HEAP32[13728>>2]|0;
 _glBindBuffer(34962,($5|0));
 $6 = HEAP32[11576>>2]|0;
 _glBufferData(34962,24576,($6|0),35048);
 $7 = HEAP32[(13104)>>2]|0;
 _glEnableVertexAttribArray(($7|0));
 $8 = HEAP32[(13104)>>2]|0;
 _glVertexAttribPointer(($8|0),3,5126,0,0,(0|0));
 $9 = HEAP32[(13732)>>2]|0;
 _glBindBuffer(34962,($9|0));
 $10 = HEAP32[11496>>2]|0;
 _glBufferData(34962,8192,($10|0),35048);
 $11 = HEAP32[(13116)>>2]|0;
 _glEnableVertexAttribArray(($11|0));
 $12 = HEAP32[(13116)>>2]|0;
 _glVertexAttribPointer(($12|0),4,5121,1,0,(0|0));
 $13 = HEAP32[11728>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $16 = HEAP32[13728>>2]|0;
  $17 = HEAP32[(13732)>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $16;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $17;
  _TraceLog(0,28168,$vararg_buffer1);
 } else {
  $15 = HEAP32[13760>>2]|0;
  HEAP32[$vararg_buffer>>2] = $15;
  _TraceLog(0,28120,$vararg_buffer);
 }
 $18 = HEAP32[11728>>2]|0;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $20 = HEAP32[11944>>2]|0;
  FUNCTION_TABLE_vii[$20 & 63](1,13768);
  $21 = HEAP32[11976>>2]|0;
  $22 = HEAP32[13768>>2]|0;
  FUNCTION_TABLE_vi[$21 & 31]($22);
 }
 _glGenBuffers(2,(13736|0));
 $23 = HEAP32[13736>>2]|0;
 _glBindBuffer(34962,($23|0));
 $24 = HEAP32[11616>>2]|0;
 _glBufferData(34962,73728,($24|0),35048);
 $25 = HEAP32[(13104)>>2]|0;
 _glEnableVertexAttribArray(($25|0));
 $26 = HEAP32[(13104)>>2]|0;
 _glVertexAttribPointer(($26|0),3,5126,0,0,(0|0));
 $27 = HEAP32[(13740)>>2]|0;
 _glBindBuffer(34962,($27|0));
 $28 = HEAP32[11520>>2]|0;
 _glBufferData(34962,24576,($28|0),35048);
 $29 = HEAP32[(13116)>>2]|0;
 _glEnableVertexAttribArray(($29|0));
 $30 = HEAP32[(13116)>>2]|0;
 _glVertexAttribPointer(($30|0),4,5121,1,0,(0|0));
 $31 = HEAP32[11728>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  $34 = HEAP32[13736>>2]|0;
  $35 = HEAP32[(13740)>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $34;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $35;
  _TraceLog(0,28288,$vararg_buffer8);
 } else {
  $33 = HEAP32[13768>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $33;
  _TraceLog(0,28232,$vararg_buffer5);
 }
 $36 = HEAP32[11728>>2]|0;
 $37 = ($36|0)==(0);
 if (!($37)) {
  $38 = HEAP32[11944>>2]|0;
  FUNCTION_TABLE_vii[$38 & 63](1,13776);
  $39 = HEAP32[11976>>2]|0;
  $40 = HEAP32[13776>>2]|0;
  FUNCTION_TABLE_vi[$39 & 31]($40);
 }
 _glGenBuffers(4,(13744|0));
 $41 = HEAP32[13744>>2]|0;
 _glBindBuffer(34962,($41|0));
 $42 = HEAP32[11656>>2]|0;
 _glBufferData(34962,49152,($42|0),35048);
 $43 = HEAP32[(13104)>>2]|0;
 _glEnableVertexAttribArray(($43|0));
 $44 = HEAP32[(13104)>>2]|0;
 _glVertexAttribPointer(($44|0),3,5126,0,0,(0|0));
 $45 = HEAP32[(13748)>>2]|0;
 _glBindBuffer(34962,($45|0));
 $46 = HEAP32[11560>>2]|0;
 _glBufferData(34962,32768,($46|0),35048);
 $47 = HEAP32[(13108)>>2]|0;
 _glEnableVertexAttribArray(($47|0));
 $48 = HEAP32[(13108)>>2]|0;
 _glVertexAttribPointer(($48|0),2,5126,0,0,(0|0));
 $49 = HEAP32[(13752)>>2]|0;
 _glBindBuffer(34962,($49|0));
 $50 = HEAP32[11544>>2]|0;
 _glBufferData(34962,16384,($50|0),35048);
 $51 = HEAP32[(13116)>>2]|0;
 _glEnableVertexAttribArray(($51|0));
 $52 = HEAP32[(13116)>>2]|0;
 _glVertexAttribPointer(($52|0),4,5121,1,0,(0|0));
 $53 = HEAP32[(13756)>>2]|0;
 _glBindBuffer(34963,($53|0));
 $54 = HEAP32[13784>>2]|0;
 _glBufferData(34963,12288,($54|0),35044);
 $55 = HEAP32[11728>>2]|0;
 $56 = ($55|0)==(0);
 if ($56) {
  $58 = HEAP32[13744>>2]|0;
  $59 = HEAP32[(13748)>>2]|0;
  $60 = HEAP32[(13752)>>2]|0;
  $61 = HEAP32[(13756)>>2]|0;
  HEAP32[$vararg_buffer15>>2] = $58;
  $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
  HEAP32[$vararg_ptr18>>2] = $59;
  $vararg_ptr19 = ((($vararg_buffer15)) + 8|0);
  HEAP32[$vararg_ptr19>>2] = $60;
  $vararg_ptr20 = ((($vararg_buffer15)) + 12|0);
  HEAP32[$vararg_ptr20>>2] = $61;
  _TraceLog(0,28400,$vararg_buffer15);
 } else {
  $57 = HEAP32[13776>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $57;
  _TraceLog(0,28352,$vararg_buffer12);
 }
 $62 = HEAP32[11728>>2]|0;
 $63 = ($62|0)==(0);
 if ($63) {
  STACKTOP = sp;return;
 }
 $64 = HEAP32[11976>>2]|0;
 FUNCTION_TABLE_vi[$64 & 31](0);
 STACKTOP = sp;return;
}
function _LoadCompressedTexture($data,$width,$height,$mipmapCount,$compressedFormat) {
 $data = $data|0;
 $width = $width|0;
 $height = $height|0;
 $mipmapCount = $mipmapCount|0;
 $compressedFormat = $compressedFormat|0;
 var $$ = 0, $$013 = 0, $$0610 = 0, $$17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $blockSize$0 = 0, $level$012 = 0, $offset$011 = 0, $or$cond = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _glPixelStorei(3317,1);
 if ((($compressedFormat|0) == 33776) | (($compressedFormat|0) == 33777) | (($compressedFormat|0) == 36196) | (($compressedFormat|0) == 37492)) {
  $blockSize$0 = 8;
 } else {
  $blockSize$0 = 16;
 }
 $0 = ($mipmapCount|0)<(1);
 $1 = $width | $height;
 $2 = ($1|0)==(0);
 $or$cond9 = $0 | $2;
 if ($or$cond9) {
  return;
 } else {
  $$013 = $width;$$0610 = $height;$level$012 = 0;$offset$011 = 0;
 }
 while(1) {
  $3 = (($$013) + 3)|0;
  $4 = (($3|0) / 4)&-1;
  $5 = (($$0610) + 3)|0;
  $6 = (($5|0) / 4)&-1;
  $7 = Math_imul($4, $blockSize$0)|0;
  $8 = Math_imul($7, $6)|0;
  $9 = (($data) + ($offset$011)|0);
  _glCompressedTexImage2D(3553,($level$012|0),($compressedFormat|0),($$013|0),($$0610|0),0,($8|0),($9|0));
  $10 = (($8) + ($offset$011))|0;
  $11 = (($$013|0) / 2)&-1;
  $12 = (($$0610|0) / 2)&-1;
  $13 = ($$013|0)<(2);
  $$ = $13 ? 1 : $11;
  $14 = ($$0610|0)<(2);
  $$17 = $14 ? 1 : $12;
  $15 = (($level$012) + 1)|0;
  $16 = ($15|0)>=($mipmapCount|0);
  $17 = $$ | $$17;
  $18 = ($17|0)==(0);
  $or$cond = $16 | $18;
  if ($or$cond) {
   break;
  } else {
   $$013 = $$;$$0610 = $$17;$level$012 = $15;$offset$011 = $10;
  }
 }
 return;
}
function _UpdateBuffers() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11480>>2]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = HEAP32[11728>>2]|0;
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = HEAP32[11976>>2]|0;
   $5 = HEAP32[13760>>2]|0;
   FUNCTION_TABLE_vi[$4 & 31]($5);
  }
  $6 = HEAP32[13728>>2]|0;
  _glBindBuffer(34962,($6|0));
  $7 = HEAP32[11480>>2]|0;
  $8 = ($7*12)|0;
  $9 = HEAP32[11576>>2]|0;
  _glBufferSubData(34962,0,($8|0),($9|0));
  $10 = HEAP32[(13732)>>2]|0;
  _glBindBuffer(34962,($10|0));
  $11 = HEAP32[11488>>2]|0;
  $12 = $11 << 2;
  $13 = HEAP32[11496>>2]|0;
  _glBufferSubData(34962,0,($12|0),($13|0));
 }
 $14 = HEAP32[11504>>2]|0;
 $15 = ($14|0)>(0);
 if ($15) {
  $16 = HEAP32[11728>>2]|0;
  $17 = ($16|0)==(0);
  if (!($17)) {
   $18 = HEAP32[11976>>2]|0;
   $19 = HEAP32[13768>>2]|0;
   FUNCTION_TABLE_vi[$18 & 31]($19);
  }
  $20 = HEAP32[13736>>2]|0;
  _glBindBuffer(34962,($20|0));
  $21 = HEAP32[11504>>2]|0;
  $22 = ($21*12)|0;
  $23 = HEAP32[11616>>2]|0;
  _glBufferSubData(34962,0,($22|0),($23|0));
  $24 = HEAP32[(13740)>>2]|0;
  _glBindBuffer(34962,($24|0));
  $25 = HEAP32[11512>>2]|0;
  $26 = $25 << 2;
  $27 = HEAP32[11520>>2]|0;
  _glBufferSubData(34962,0,($26|0),($27|0));
 }
 $28 = HEAP32[11528>>2]|0;
 $29 = ($28|0)>(0);
 if ($29) {
  $30 = HEAP32[11728>>2]|0;
  $31 = ($30|0)==(0);
  if (!($31)) {
   $32 = HEAP32[11976>>2]|0;
   $33 = HEAP32[13776>>2]|0;
   FUNCTION_TABLE_vi[$32 & 31]($33);
  }
  $34 = HEAP32[13744>>2]|0;
  _glBindBuffer(34962,($34|0));
  $35 = HEAP32[11528>>2]|0;
  $36 = ($35*12)|0;
  $37 = HEAP32[11656>>2]|0;
  _glBufferSubData(34962,0,($36|0),($37|0));
  $38 = HEAP32[(13748)>>2]|0;
  _glBindBuffer(34962,($38|0));
  $39 = HEAP32[11528>>2]|0;
  $40 = $39 << 3;
  $41 = HEAP32[11560>>2]|0;
  _glBufferSubData(34962,0,($40|0),($41|0));
  $42 = HEAP32[(13752)>>2]|0;
  _glBindBuffer(34962,($42|0));
  $43 = HEAP32[11528>>2]|0;
  $44 = $43 << 2;
  $45 = HEAP32[11544>>2]|0;
  _glBufferSubData(34962,0,($44|0),($45|0));
 }
 $46 = HEAP32[11728>>2]|0;
 $47 = ($46|0)==(0);
 if ($47) {
  return;
 }
 $48 = HEAP32[11976>>2]|0;
 FUNCTION_TABLE_vi[$48 & 31](0);
 return;
}
function _stbi__fopen($filename) {
 $filename = $filename|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fopen(($filename|0),(19952|0))|0);
 return ($0|0);
}
function _stbi__err($str) {
 $str = $str|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[14400>>2] = $str;
 return;
}
function _stbi__start_file($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _stbi__start_callbacks($s,28104,$f);
 return;
}
function _stbi__load_flip($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$04 = 0, $exitcond = 0, $exitcond7 = 0, $exitcond8 = 0, $or$cond = 0, $row$06 = 0, $z$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__load_main($s,$x,$y,$comp,$req_comp)|0);
 $1 = HEAP32[14408>>2]|0;
 $2 = ($1|0)!=(0);
 $3 = ($0|0)!=(0|0);
 $or$cond = $3 & $2;
 if (!($or$cond)) {
  return ($0|0);
 }
 $4 = HEAP32[$x>>2]|0;
 $5 = HEAP32[$y>>2]|0;
 $6 = ($req_comp|0)==(0);
 if ($6) {
  $7 = HEAP32[$comp>>2]|0;
  $11 = $7;
 } else {
  $11 = $req_comp;
 }
 $8 = $5 >> 1;
 $9 = ($8|0)>(0);
 if (!($9)) {
  return ($0|0);
 }
 $10 = ($4|0)>(0);
 $12 = ($11|0)>(0);
 $13 = (($5) + -1)|0;
 $row$06 = 0;
 while(1) {
  if ($10) {
   $14 = Math_imul($row$06, $4)|0;
   $15 = (($13) - ($row$06))|0;
   $16 = Math_imul($15, $4)|0;
   $col$04 = 0;
   while(1) {
    if ($12) {
     $17 = (($col$04) + ($14))|0;
     $18 = Math_imul($17, $11)|0;
     $19 = (($col$04) + ($16))|0;
     $20 = Math_imul($19, $11)|0;
     $z$03 = 0;
     while(1) {
      $21 = (($z$03) + ($18))|0;
      $22 = (($0) + ($21)|0);
      $23 = HEAP8[$22>>0]|0;
      $24 = (($z$03) + ($20))|0;
      $25 = (($0) + ($24)|0);
      $26 = HEAP8[$25>>0]|0;
      HEAP8[$22>>0] = $26;
      HEAP8[$25>>0] = $23;
      $27 = (($z$03) + 1)|0;
      $exitcond = ($27|0)==($11|0);
      if ($exitcond) {
       break;
      } else {
       $z$03 = $27;
      }
     }
    }
    $28 = (($col$04) + 1)|0;
    $exitcond7 = ($28|0)==($4|0);
    if ($exitcond7) {
     break;
    } else {
     $col$04 = $28;
    }
   }
  }
  $29 = (($row$06) + 1)|0;
  $exitcond8 = ($29|0)==($8|0);
  if ($exitcond8) {
   break;
  } else {
   $row$06 = $29;
  }
 }
 return ($0|0);
}
function _stbi__start_callbacks($s,$c,$user) {
 $s = $s|0;
 $c = $c|0;
 $user = $user|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 16|0);
 ;HEAP32[$0>>2]=HEAP32[$c>>2]|0;HEAP32[$0+4>>2]=HEAP32[$c+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$c+8>>2]|0;
 $1 = ((($s)) + 28|0);
 HEAP32[$1>>2] = $user;
 $2 = ((($s)) + 36|0);
 HEAP32[$2>>2] = 128;
 $3 = ((($s)) + 32|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($s)) + 40|0);
 $5 = ((($s)) + 176|0);
 HEAP32[$5>>2] = $4;
 _stbi__refill_buffer($s);
 return;
}
function _stbi__malloc($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($size)|0);
 return ($0|0);
}
function _stbi__do_zlib($a,$obuf,$olen,$exp,$parse_header) {
 $a = $a|0;
 $obuf = $obuf|0;
 $olen = $olen|0;
 $exp = $exp|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 20|0);
 HEAP32[$0>>2] = $obuf;
 $1 = ((($a)) + 16|0);
 HEAP32[$1>>2] = $obuf;
 $2 = (($obuf) + ($olen)|0);
 $3 = ((($a)) + 24|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($a)) + 28|0);
 HEAP32[$4>>2] = $exp;
 $5 = (_stbi__parse_zlib($a,$parse_header)|0);
 return ($5|0);
}
function _LoadDDS($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $bufsize$0 = 0, $exitcond = 0, $exitcond13 = 0, $filecode = 0, $header = 0, $i$09 = 0, $i2$011 = 0, $i3$08 = 0, $image$sroa$0$0 = 0;
 var $image$sroa$0$1 = 0, $image$sroa$0$2 = 0, $image$sroa$0$3 = 0, $image$sroa$26$0 = 0, $image$sroa$26$1 = 0, $image$sroa$41$0 = 0, $image$sroa$41$1 = 0, $image$sroa$56$0 = 0, $image$sroa$56$1 = 0, $image$sroa$56$2 = 0, $image$sroa$59$0 = 0, $image$sroa$59$1 = 0, $image$sroa$59$2 = 0, $image$sroa$59$3 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $vararg_buffer24 = sp + 16|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $filecode = sp + 188|0;
 $header = sp + 64|0;
 $0 = (_fopen(($fileName|0),(19952|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $fileName;
  _TraceLog(2,24344,$vararg_buffer);
  $image$sroa$0$3 = 0;$image$sroa$26$1 = 0;$image$sroa$41$1 = 0;$image$sroa$56$2 = 0;$image$sroa$59$3 = 0;
  HEAP32[$agg$result>>2] = $image$sroa$0$3;
  $86 = ((($agg$result)) + 4|0);
  HEAP32[$86>>2] = $image$sroa$26$1;
  $87 = ((($agg$result)) + 8|0);
  HEAP32[$87>>2] = $image$sroa$41$1;
  $88 = ((($agg$result)) + 12|0);
  HEAP32[$88>>2] = $image$sroa$56$2;
  $89 = ((($agg$result)) + 16|0);
  HEAP32[$89>>2] = $image$sroa$59$3;
  STACKTOP = sp;return;
 }
 (_fread(($filecode|0),1,4,($0|0))|0);
 $2 = (_strncmp($filecode,24384,4)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  (_fread(($header|0),124,1,($0|0))|0);
  HEAP32[$vararg_buffer4>>2] = $fileName;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = 124;
  _TraceLog(3,24440,$vararg_buffer4);
  $4 = ((($header)) + 72|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $fileName;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $5;
  _TraceLog(3,24472,$vararg_buffer8);
  $6 = ((($header)) + 76|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $fileName;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $7;
  _TraceLog(3,24512,$vararg_buffer12);
  $8 = ((($header)) + 80|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer16>>2] = $fileName;
  $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
  HEAP32[$vararg_ptr19>>2] = $9;
  _TraceLog(3,24552,$vararg_buffer16);
  $10 = ((($header)) + 84|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer20>>2] = $fileName;
  $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
  HEAP32[$vararg_ptr23>>2] = $11;
  _TraceLog(3,24584,$vararg_buffer20);
  $12 = ((($header)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($header)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$10>>2]|0;
  $17 = ($16|0)==(16);
  do {
   if ($17) {
    $18 = HEAP32[$6>>2]|0;
    if ((($18|0) == 64)) {
     $19 = $13 << 1;
     $20 = Math_imul($19, $15)|0;
     $21 = (_malloc($20)|0);
     (_fread(($21|0),($20|0),1,($0|0))|0);
     $image$sroa$0$0 = $21;$image$sroa$59$0 = 3;
     break;
    } else if (!((($18|0) == 65))) {
     $image$sroa$0$0 = 0;$image$sroa$59$0 = 0;
     break;
    }
    $22 = ((($header)) + 100|0);
    $23 = HEAP32[$22>>2]|0;
    if ((($23|0) == 32768)) {
     $24 = Math_imul($15, $13)|0;
     $25 = $24 << 1;
     $26 = (_malloc($25)|0);
     (_fread(($26|0),($25|0),1,($0|0))|0);
     $27 = ($24|0)>(0);
     if (!($27)) {
      $image$sroa$0$0 = $26;$image$sroa$59$0 = 5;
      break;
     }
     $28 = Math_imul($15, $13)|0;
     $i$09 = 0;
     while(1) {
      $29 = (($26) + ($i$09<<1)|0);
      $30 = HEAP16[$29>>1]|0;
      $31 = $30&65535;
      $32 = ($30&65535) >>> 15;
      $33 = $32&65535;
      $34 = $31 << 1;
      $35 = $34 | $33;
      $36 = $35&65535;
      HEAP16[$29>>1] = $36;
      $37 = (($i$09) + 1)|0;
      $exitcond = ($37|0)==($28|0);
      if ($exitcond) {
       $image$sroa$0$0 = $26;$image$sroa$59$0 = 5;
       break;
      } else {
       $i$09 = $37;
      }
     }
    } else if ((($23|0) == 61440)) {
     $38 = Math_imul($15, $13)|0;
     $39 = $38 << 1;
     $40 = (_malloc($39)|0);
     (_fread(($40|0),($39|0),1,($0|0))|0);
     $41 = ($38|0)>(0);
     if (!($41)) {
      $image$sroa$0$0 = $40;$image$sroa$59$0 = 6;
      break;
     }
     $42 = Math_imul($15, $13)|0;
     $i2$011 = 0;
     while(1) {
      $43 = (($40) + ($i2$011<<1)|0);
      $44 = HEAP16[$43>>1]|0;
      $45 = $44&65535;
      $46 = ($44&65535) >>> 12;
      $47 = $46&65535;
      $48 = $45 << 4;
      $49 = $48 | $47;
      $50 = $49&65535;
      HEAP16[$43>>1] = $50;
      $51 = (($i2$011) + 1)|0;
      $exitcond13 = ($51|0)==($42|0);
      if ($exitcond13) {
       $image$sroa$0$0 = $40;$image$sroa$59$0 = 6;
       break;
      } else {
       $i2$011 = $51;
      }
     }
    } else {
     $image$sroa$0$0 = 0;$image$sroa$59$0 = 0;
     break;
    }
   } else {
    $image$sroa$0$0 = 0;$image$sroa$59$0 = 0;
   }
  } while(0);
  $52 = HEAP32[$6>>2]|0;
  $53 = ($52|0)==(64);
  $54 = HEAP32[$10>>2]|0;
  $55 = ($54|0)==(24);
  $or$cond = $53 & $55;
  L22: do {
   if ($or$cond) {
    $56 = ($13*3)|0;
    $57 = Math_imul($56, $15)|0;
    $58 = (_malloc($57)|0);
    (_fread(($58|0),($57|0),1,($0|0))|0);
    $image$sroa$0$1 = $58;$image$sroa$56$0 = 1;$image$sroa$59$1 = 4;
   } else {
    $59 = ($52|0)==(65);
    $60 = ($54|0)==(32);
    $or$cond3 = $59 & $60;
    if ($or$cond3) {
     $61 = $13 << 2;
     $62 = Math_imul($61, $15)|0;
     $63 = (_malloc($62)|0);
     (_fread(($63|0),($62|0),1,($0|0))|0);
     $64 = ($62|0)>(0);
     if ($64) {
      $i3$08 = 0;
     } else {
      $image$sroa$0$1 = $63;$image$sroa$56$0 = 1;$image$sroa$59$1 = 7;
      break;
     }
     while(1) {
      $65 = (($63) + ($i3$08)|0);
      $66 = HEAP8[$65>>0]|0;
      $67 = $i3$08 | 2;
      $68 = (($63) + ($67)|0);
      $69 = HEAP8[$68>>0]|0;
      HEAP8[$65>>0] = $69;
      HEAP8[$68>>0] = $66;
      $70 = (($i3$08) + 4)|0;
      $71 = ($70|0)<($62|0);
      if ($71) {
       $i3$08 = $70;
      } else {
       $image$sroa$0$1 = $63;$image$sroa$56$0 = 1;$image$sroa$59$1 = 7;
       break L22;
      }
     }
    }
    $72 = $52 & -2;
    $switch = ($72|0)!=(4);
    $73 = HEAP32[$8>>2]|0;
    $74 = ($73|0)==(0);
    $or$cond5 = $switch | $74;
    if ($or$cond5) {
     $image$sroa$0$1 = $image$sroa$0$0;$image$sroa$56$0 = 1;$image$sroa$59$1 = $image$sroa$59$0;
    } else {
     $75 = ((($header)) + 24|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76>>>0)>(1);
     $78 = ((($header)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = $77&1;
     $bufsize$0 = $79 << $80;
     HEAP32[$vararg_buffer24>>2] = $79;
     _TraceLog(3,24616,$vararg_buffer24);
     $81 = (_malloc($bufsize$0)|0);
     (_fread(($81|0),1,($bufsize$0|0),($0|0))|0);
     $82 = HEAP32[$75>>2]|0;
     $83 = HEAP32[$8>>2]|0;
     if ((($83|0) == 894720068)) {
      $image$sroa$0$1 = $81;$image$sroa$56$0 = $82;$image$sroa$59$1 = 11;
      break;
     } else if ((($83|0) == 827611204)) {
      $84 = HEAP32[$6>>2]|0;
      $85 = ($84|0)==(4);
      $$ = $85 ? 8 : 9;
      $image$sroa$0$1 = $81;$image$sroa$56$0 = $82;$image$sroa$59$1 = $$;
      break;
     } else if ((($83|0) == 861165636)) {
      $image$sroa$0$1 = $81;$image$sroa$56$0 = $82;$image$sroa$59$1 = 10;
      break;
     } else {
      $image$sroa$0$1 = $81;$image$sroa$56$0 = $82;$image$sroa$59$1 = $image$sroa$59$0;
      break;
     }
    }
   }
  } while(0);
  $image$sroa$0$2 = $image$sroa$0$1;$image$sroa$26$0 = $13;$image$sroa$41$0 = $15;$image$sroa$56$1 = $image$sroa$56$0;$image$sroa$59$2 = $image$sroa$59$1;
 } else {
  HEAP32[$vararg_buffer1>>2] = $fileName;
  _TraceLog(2,24392,$vararg_buffer1);
  $image$sroa$0$2 = 0;$image$sroa$26$0 = 0;$image$sroa$41$0 = 0;$image$sroa$56$1 = 0;$image$sroa$59$2 = 0;
 }
 (_fclose(($0|0))|0);
 $image$sroa$0$3 = $image$sroa$0$2;$image$sroa$26$1 = $image$sroa$26$0;$image$sroa$41$1 = $image$sroa$41$0;$image$sroa$56$2 = $image$sroa$56$1;$image$sroa$59$3 = $image$sroa$59$2;
 HEAP32[$agg$result>>2] = $image$sroa$0$3;
 $86 = ((($agg$result)) + 4|0);
 HEAP32[$86>>2] = $image$sroa$26$1;
 $87 = ((($agg$result)) + 8|0);
 HEAP32[$87>>2] = $image$sroa$41$1;
 $88 = ((($agg$result)) + 12|0);
 HEAP32[$88>>2] = $image$sroa$56$2;
 $89 = ((($agg$result)) + 16|0);
 HEAP32[$89>>2] = $image$sroa$59$3;
 STACKTOP = sp;return;
}
function _LoadPKM($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, $image$sroa$0$0 = 0, $image$sroa$0$1 = 0, $image$sroa$10$0 = 0, $image$sroa$10$1 = 0, $image$sroa$12$0 = 0, $image$sroa$12$1 = 0, $image$sroa$4$0 = 0, $image$sroa$4$1 = 0, $image$sroa$7$0 = 0, $image$sroa$7$1 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $header = sp + 40|0;
 $0 = (_fopen(($fileName|0),(19952|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $fileName;
  _TraceLog(2,24152,$vararg_buffer);
  $image$sroa$0$1 = 0;$image$sroa$10$1 = 0;$image$sroa$12$1 = 0;$image$sroa$4$1 = 0;$image$sroa$7$1 = 0;
  HEAP32[$agg$result>>2] = $image$sroa$0$1;
  $43 = ((($agg$result)) + 4|0);
  HEAP32[$43>>2] = $image$sroa$4$1;
  $44 = ((($agg$result)) + 8|0);
  HEAP32[$44>>2] = $image$sroa$7$1;
  $45 = ((($agg$result)) + 12|0);
  HEAP32[$45>>2] = $image$sroa$10$1;
  $46 = ((($agg$result)) + 16|0);
  HEAP32[$46>>2] = $image$sroa$12$1;
  STACKTOP = sp;return;
 }
 (_fread(($header|0),16,1,($0|0))|0);
 $2 = (_strncmp($header,24192,4)|0);
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $4 = ((($header)) + 6|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5&65535;
   $7 = $6 << 8;
   $8 = $6 >>> 8;
   $9 = $7 | $8;
   $10 = $9&65535;
   HEAP16[$4>>1] = $10;
   $11 = ((($header)) + 8|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $12&65535;
   $14 = $13 << 8;
   $15 = $13 >>> 8;
   $16 = $14 | $15;
   $17 = $16&65535;
   HEAP16[$11>>1] = $17;
   $18 = ((($header)) + 10|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   $21 = $20 << 8;
   $22 = $20 >>> 8;
   $23 = $21 | $22;
   $24 = $23&65535;
   HEAP16[$18>>1] = $24;
   $25 = HEAP16[$11>>1]|0;
   $26 = $25&65535;
   HEAP32[$vararg_buffer4>>2] = $26;
   _TraceLog(3,24248,$vararg_buffer4);
   $27 = HEAP16[$18>>1]|0;
   $28 = $27&65535;
   HEAP32[$vararg_buffer7>>2] = $28;
   _TraceLog(3,24280,$vararg_buffer7);
   $29 = HEAP16[$4>>1]|0;
   $30 = $29&65535;
   HEAP32[$vararg_buffer10>>2] = $30;
   _TraceLog(3,24312,$vararg_buffer10);
   $31 = HEAP16[$11>>1]|0;
   $32 = $31&65535;
   $33 = HEAP16[$18>>1]|0;
   $34 = $33&65535;
   $35 = HEAP16[$4>>1]|0;
   $36 = ($35<<16>>16)==(3);
   $$ = $36 ? 8 : 4;
   $37 = Math_imul($34, $32)|0;
   $38 = Math_imul($37, $$)|0;
   $39 = $38 >>> 3;
   $40 = (_malloc($39)|0);
   (_fread(($40|0),1,($39|0),($0|0))|0);
   $41 = HEAP16[$4>>1]|0;
   if ((($41<<16>>16) == 1)) {
    $image$sroa$0$0 = $40;$image$sroa$10$0 = 1;$image$sroa$12$0 = 13;$image$sroa$4$0 = $32;$image$sroa$7$0 = $34;
    break;
   } else if ((($41<<16>>16) == 0)) {
    $image$sroa$0$0 = $40;$image$sroa$10$0 = 1;$image$sroa$12$0 = 12;$image$sroa$4$0 = $32;$image$sroa$7$0 = $34;
    break;
   } else {
    $42 = ($41<<16>>16)==(3);
    $$1 = $42 ? 14 : 0;
    $image$sroa$0$0 = $40;$image$sroa$10$0 = 1;$image$sroa$12$0 = $$1;$image$sroa$4$0 = $32;$image$sroa$7$0 = $34;
    break;
   }
  } else {
   HEAP32[$vararg_buffer1>>2] = $fileName;
   _TraceLog(2,24200,$vararg_buffer1);
   $image$sroa$0$0 = 0;$image$sroa$10$0 = 0;$image$sroa$12$0 = 0;$image$sroa$4$0 = 0;$image$sroa$7$0 = 0;
  }
 } while(0);
 (_fclose(($0|0))|0);
 $image$sroa$0$1 = $image$sroa$0$0;$image$sroa$10$1 = $image$sroa$10$0;$image$sroa$12$1 = $image$sroa$12$0;$image$sroa$4$1 = $image$sroa$4$0;$image$sroa$7$1 = $image$sroa$7$0;
 HEAP32[$agg$result>>2] = $image$sroa$0$1;
 $43 = ((($agg$result)) + 4|0);
 HEAP32[$43>>2] = $image$sroa$4$1;
 $44 = ((($agg$result)) + 8|0);
 HEAP32[$44>>2] = $image$sroa$7$1;
 $45 = ((($agg$result)) + 12|0);
 HEAP32[$45>>2] = $image$sroa$10$1;
 $46 = ((($agg$result)) + 16|0);
 HEAP32[$46>>2] = $image$sroa$12$1;
 STACKTOP = sp;return;
}
function _LoadKTX($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dataSize = 0, $header = 0, $i$01 = 0, $image$sroa$0$0 = 0, $image$sroa$0$1 = 0, $image$sroa$3$0 = 0, $image$sroa$3$1 = 0, $image$sroa$5$0 = 0, $image$sroa$5$1 = 0, $image$sroa$7$0 = 0, $image$sroa$7$1 = 0, $image$sroa$9$0 = 0, $image$sroa$9$1 = 0, $unused = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $header = sp + 40|0;
 $unused = sp + 104|0;
 $dataSize = sp + 36|0;
 $0 = (_fopen(($fileName|0),(19952|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $fileName;
  _TraceLog(2,23968,$vararg_buffer);
  $image$sroa$0$1 = 0;$image$sroa$3$1 = 0;$image$sroa$5$1 = 0;$image$sroa$7$1 = 0;$image$sroa$9$1 = 0;
  HEAP32[$agg$result>>2] = $image$sroa$0$1;
  $40 = ((($agg$result)) + 4|0);
  HEAP32[$40>>2] = $image$sroa$3$1;
  $41 = ((($agg$result)) + 8|0);
  HEAP32[$41>>2] = $image$sroa$5$1;
  $42 = ((($agg$result)) + 12|0);
  HEAP32[$42>>2] = $image$sroa$7$1;
  $43 = ((($agg$result)) + 16|0);
  HEAP32[$43>>2] = $image$sroa$9$1;
  STACKTOP = sp;return;
 }
 (_fread(($header|0),64,1,($0|0))|0);
 $2 = ((($header)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(75);
 do {
  if ($4) {
   $5 = ((($header)) + 2|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(84);
   if ($7) {
    $8 = ((($header)) + 3|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(88);
    if ($10) {
     $11 = ((($header)) + 4|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(32);
     if ($13) {
      $14 = ((($header)) + 5|0);
      $15 = HEAP8[$14>>0]|0;
      $16 = ($15<<24>>24)==(49);
      if ($16) {
       $17 = ((($header)) + 6|0);
       $18 = HEAP8[$17>>0]|0;
       $19 = ($18<<24>>24)==(49);
       if ($19) {
        $20 = ((($header)) + 36|0);
        $21 = HEAP32[$20>>2]|0;
        $22 = ((($header)) + 40|0);
        $23 = HEAP32[$22>>2]|0;
        $24 = ((($header)) + 56|0);
        $25 = HEAP32[$24>>2]|0;
        HEAP32[$vararg_buffer4>>2] = $21;
        _TraceLog(3,24056,$vararg_buffer4);
        $26 = HEAP32[$22>>2]|0;
        HEAP32[$vararg_buffer7>>2] = $26;
        _TraceLog(3,24088,$vararg_buffer7);
        $27 = ((($header)) + 28|0);
        $28 = HEAP32[$27>>2]|0;
        HEAP32[$vararg_buffer10>>2] = $28;
        _TraceLog(3,24120,$vararg_buffer10);
        $29 = ((($header)) + 60|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = ($30|0)==(0);
        if (!($31)) {
         $32 = HEAP32[$29>>2]|0;
         $i$01 = 0;
         while(1) {
          (_fread(($unused|0),1,1,($0|0))|0);
          $33 = (($i$01) + 1)|0;
          $34 = ($33>>>0)<($32>>>0);
          if ($34) {
           $i$01 = $33;
          } else {
           break;
          }
         }
        }
        (_fread(($dataSize|0),4,1,($0|0))|0);
        $35 = HEAP32[$dataSize>>2]|0;
        $36 = (_malloc($35)|0);
        $37 = HEAP32[$dataSize>>2]|0;
        (_fread(($36|0),1,($37|0),($0|0))|0);
        $38 = HEAP32[$27>>2]|0;
        if ((($38|0) == 37492)) {
         $image$sroa$0$0 = $36;$image$sroa$3$0 = $21;$image$sroa$5$0 = $23;$image$sroa$7$0 = $25;$image$sroa$9$0 = 13;
         break;
        } else if ((($38|0) == 36196)) {
         $image$sroa$0$0 = $36;$image$sroa$3$0 = $21;$image$sroa$5$0 = $23;$image$sroa$7$0 = $25;$image$sroa$9$0 = 12;
         break;
        } else {
         $39 = ($38|0)==(37496);
         $$ = $39 ? 14 : 0;
         $image$sroa$0$0 = $36;$image$sroa$3$0 = $21;$image$sroa$5$0 = $23;$image$sroa$7$0 = $25;$image$sroa$9$0 = $$;
         break;
        }
       } else {
        label = 9;
       }
      } else {
       label = 9;
      }
     } else {
      label = 9;
     }
    } else {
     label = 9;
    }
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  HEAP32[$vararg_buffer1>>2] = $fileName;
  _TraceLog(2,24008,$vararg_buffer1);
  $image$sroa$0$0 = 0;$image$sroa$3$0 = 0;$image$sroa$5$0 = 0;$image$sroa$7$0 = 0;$image$sroa$9$0 = 0;
 }
 (_fclose(($0|0))|0);
 $image$sroa$0$1 = $image$sroa$0$0;$image$sroa$3$1 = $image$sroa$3$0;$image$sroa$5$1 = $image$sroa$5$0;$image$sroa$7$1 = $image$sroa$7$0;$image$sroa$9$1 = $image$sroa$9$0;
 HEAP32[$agg$result>>2] = $image$sroa$0$1;
 $40 = ((($agg$result)) + 4|0);
 HEAP32[$40>>2] = $image$sroa$3$1;
 $41 = ((($agg$result)) + 8|0);
 HEAP32[$41>>2] = $image$sroa$5$1;
 $42 = ((($agg$result)) + 12|0);
 HEAP32[$42>>2] = $image$sroa$7$1;
 $43 = ((($agg$result)) + 16|0);
 HEAP32[$43>>2] = $image$sroa$9$1;
 STACKTOP = sp;return;
}
function _LoadPVR($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$pr = 0, $$pr3 = 0, $$pr5 = 0, $$pr7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bpp$0 = 0, $header = 0, $i$08 = 0, $image$sroa$0$0 = 0, $image$sroa$0$1 = 0, $image$sroa$0$2 = 0, $image$sroa$10$0 = 0, $image$sroa$10$1 = 0, $image$sroa$10$2 = 0, $image$sroa$12$0 = 0, $image$sroa$12$1 = 0, $image$sroa$12$2 = 0, $image$sroa$12$3 = 0, $image$sroa$4$0 = 0, $image$sroa$4$1 = 0, $image$sroa$4$2 = 0;
 var $image$sroa$7$0 = 0, $image$sroa$7$1 = 0, $image$sroa$7$2 = 0, $pvrVersion = 0, $unused = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $pvrVersion = sp + 73|0;
 $header = sp + 20|0;
 $unused = sp + 72|0;
 $0 = (_fopen(($fileName|0),(19952|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $fileName;
  _TraceLog(2,23824,$vararg_buffer);
  $image$sroa$0$2 = 0;$image$sroa$10$2 = 0;$image$sroa$12$3 = 0;$image$sroa$4$2 = 0;$image$sroa$7$2 = 0;
  HEAP32[$agg$result>>2] = $image$sroa$0$2;
  $113 = ((($agg$result)) + 4|0);
  HEAP32[$113>>2] = $image$sroa$4$2;
  $114 = ((($agg$result)) + 8|0);
  HEAP32[$114>>2] = $image$sroa$7$2;
  $115 = ((($agg$result)) + 12|0);
  HEAP32[$115>>2] = $image$sroa$10$2;
  $116 = ((($agg$result)) + 16|0);
  HEAP32[$116>>2] = $image$sroa$12$3;
  STACKTOP = sp;return;
 }
 HEAP8[$pvrVersion>>0] = 0;
 (_fread(($pvrVersion|0),1,1,($0|0))|0);
 (_fseek(($0|0),0,0)|0);
 $2 = HEAP8[$pvrVersion>>0]|0;
 if ((($2<<24>>24) == 52)) {
  _TraceLog(0,23912,$vararg_buffer4);
  $image$sroa$0$1 = 0;$image$sroa$10$1 = 0;$image$sroa$12$2 = 0;$image$sroa$4$1 = 0;$image$sroa$7$1 = 0;
 } else if ((($2<<24>>24) == 80)) {
  (_fread(($header|0),52,1,($0|0))|0);
  $3 = HEAP8[$header>>0]|0;
  $4 = ($3<<24>>24)==(80);
  if ($4) {
   $5 = ((($header)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(86);
   if ($7) {
    $8 = ((($header)) + 2|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(82);
    if ($10) {
     $11 = ((($header)) + 3|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(3);
     if ($13) {
      $14 = ((($header)) + 28|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = ((($header)) + 24|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ((($header)) + 44|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = ((($header)) + 8|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(108);
      do {
       if ($22) {
        $23 = ((($header)) + 9|0);
        $24 = HEAP8[$23>>0]|0;
        $25 = ($24<<24>>24)==(0);
        if ($25) {
         $26 = ((($header)) + 12|0);
         $27 = HEAP8[$26>>0]|0;
         $28 = ($27<<24>>24)==(8);
         if ($28) {
          $image$sroa$12$0 = 1;
          break;
         }
        }
        $$pr = HEAP8[$20>>0]|0;
        $29 = ($$pr<<24>>24)==(108);
        if ($29) {
         $30 = ((($header)) + 9|0);
         $31 = HEAP8[$30>>0]|0;
         $32 = ($31<<24>>24)==(97);
         if ($32) {
          $33 = ((($header)) + 12|0);
          $34 = HEAP8[$33>>0]|0;
          $35 = ($34<<24>>24)==(8);
          if ($35) {
           $36 = ((($header)) + 13|0);
           $37 = HEAP8[$36>>0]|0;
           $38 = ($37<<24>>24)==(8);
           if ($38) {
            $image$sroa$12$0 = 2;
           } else {
            label = 16;
           }
          } else {
           label = 16;
          }
         } else {
          label = 16;
         }
        } else {
         $39 = $$pr;
         label = 17;
        }
       } else {
        label = 16;
       }
      } while(0);
      if ((label|0) == 16) {
       $$pr3 = HEAP8[$20>>0]|0;
       $39 = $$pr3;
       label = 17;
      }
      do {
       if ((label|0) == 17) {
        $40 = ($39<<24>>24)==(114);
        if ($40) {
         $41 = ((($header)) + 9|0);
         $42 = HEAP8[$41>>0]|0;
         $43 = ($42<<24>>24)==(103);
         if ($43) {
          $44 = ((($header)) + 10|0);
          $45 = HEAP8[$44>>0]|0;
          $46 = ($45<<24>>24)==(98);
          if ($46) {
           $47 = ((($header)) + 11|0);
           $48 = HEAP8[$47>>0]|0;
           if ((($48<<24>>24) == 0)) {
            $83 = ((($header)) + 12|0);
            $84 = HEAP8[$83>>0]|0;
            $85 = ($84<<24>>24)==(5);
            if ($85) {
             $86 = ((($header)) + 13|0);
             $87 = HEAP8[$86>>0]|0;
             $88 = ($87<<24>>24)==(6);
             if ($88) {
              $89 = ((($header)) + 14|0);
              $90 = HEAP8[$89>>0]|0;
              $91 = ($90<<24>>24)==(5);
              if ($91) {
               $image$sroa$12$0 = 3;
               break;
              }
             }
             $$pr7 = HEAP8[$83>>0]|0;
             $92 = $$pr7;
            } else {
             $92 = $84;
            }
            $93 = ($92<<24>>24)==(8);
            if (!($93)) {
             $image$sroa$12$0 = 0;
             break;
            }
            $94 = ((($header)) + 13|0);
            $95 = HEAP8[$94>>0]|0;
            $96 = ($95<<24>>24)==(8);
            if (!($96)) {
             $image$sroa$12$0 = 0;
             break;
            }
            $97 = ((($header)) + 14|0);
            $98 = HEAP8[$97>>0]|0;
            $99 = ($98<<24>>24)==(8);
            $$1 = $99 ? 4 : 0;
            $image$sroa$12$0 = $$1;
            break;
           } else if (!((($48<<24>>24) == 97))) {
            $image$sroa$12$0 = 0;
            break;
           }
           $49 = ((($header)) + 12|0);
           $50 = HEAP8[$49>>0]|0;
           $51 = ($50<<24>>24)==(5);
           if ($51) {
            $52 = ((($header)) + 13|0);
            $53 = HEAP8[$52>>0]|0;
            $54 = ($53<<24>>24)==(5);
            if ($54) {
             $55 = ((($header)) + 14|0);
             $56 = HEAP8[$55>>0]|0;
             $57 = ($56<<24>>24)==(5);
             if ($57) {
              $58 = ((($header)) + 15|0);
              $59 = HEAP8[$58>>0]|0;
              $60 = ($59<<24>>24)==(1);
              if ($60) {
               $image$sroa$12$0 = 5;
               break;
              }
             }
            }
            $$pr5 = HEAP8[$49>>0]|0;
            $61 = $$pr5;
           } else {
            $61 = $50;
           }
           $62 = ($61<<24>>24)==(4);
           if ($62) {
            $63 = ((($header)) + 13|0);
            $64 = HEAP8[$63>>0]|0;
            $65 = ($64<<24>>24)==(4);
            if ($65) {
             $66 = ((($header)) + 14|0);
             $67 = HEAP8[$66>>0]|0;
             $68 = ($67<<24>>24)==(4);
             if ($68) {
              $69 = ((($header)) + 15|0);
              $70 = HEAP8[$69>>0]|0;
              $71 = ($70<<24>>24)==(4);
              if ($71) {
               $image$sroa$12$0 = 6;
               break;
              }
             }
            }
           }
           $72 = HEAP8[$49>>0]|0;
           $73 = ($72<<24>>24)==(8);
           if (!($73)) {
            $image$sroa$12$0 = 0;
            break;
           }
           $74 = ((($header)) + 13|0);
           $75 = HEAP8[$74>>0]|0;
           $76 = ($75<<24>>24)==(8);
           if (!($76)) {
            $image$sroa$12$0 = 0;
            break;
           }
           $77 = ((($header)) + 14|0);
           $78 = HEAP8[$77>>0]|0;
           $79 = ($78<<24>>24)==(8);
           if (!($79)) {
            $image$sroa$12$0 = 0;
            break;
           }
           $80 = ((($header)) + 15|0);
           $81 = HEAP8[$80>>0]|0;
           $82 = ($81<<24>>24)==(8);
           $$ = $82 ? 7 : 0;
           $image$sroa$12$0 = $$;
           break;
          }
         }
        }
        $100 = HEAP8[$20>>0]|0;
        $101 = ($100<<24>>24)==(2);
        if ($101) {
         $image$sroa$12$0 = 15;
        } else {
         $102 = ($100<<24>>24)==(3);
         $$2 = $102 ? 16 : 0;
         $image$sroa$12$0 = $$2;
        }
       }
      } while(0);
      HEAP8[$unused>>0] = 0;
      $103 = ((($header)) + 48|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = ($104|0)==(0);
      if (!($105)) {
       $i$08 = 0;
       while(1) {
        (_fread(($unused|0),1,1,($0|0))|0);
        $106 = (($i$08) + 1)|0;
        $107 = HEAP32[$103>>2]|0;
        $108 = ($106>>>0)<($107>>>0);
        if ($108) {
         $i$08 = $106;
        } else {
         break;
        }
       }
      }
      switch ($image$sroa$12$0|0) {
      case 1:  {
       $bpp$0 = 8;
       break;
      }
      case 6: case 3: case 5: case 2:  {
       $bpp$0 = 16;
       break;
      }
      case 4:  {
       $bpp$0 = 24;
       break;
      }
      case 16: case 15:  {
       $bpp$0 = 4;
       break;
      }
      case 7:  {
       $bpp$0 = 32;
       break;
      }
      default: {
       $bpp$0 = 0;
      }
      }
      $109 = Math_imul($17, $15)|0;
      $110 = Math_imul($109, $bpp$0)|0;
      $111 = (($110|0) / 8)&-1;
      $112 = (_malloc($111)|0);
      (_fread(($112|0),($111|0),1,($0|0))|0);
      $image$sroa$0$0 = $112;$image$sroa$10$0 = $19;$image$sroa$12$1 = $image$sroa$12$0;$image$sroa$4$0 = $15;$image$sroa$7$0 = $17;
     } else {
      label = 8;
     }
    } else {
     label = 8;
    }
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   HEAP32[$vararg_buffer1>>2] = $fileName;
   _TraceLog(2,23864,$vararg_buffer1);
   $image$sroa$0$0 = 0;$image$sroa$10$0 = 0;$image$sroa$12$1 = 0;$image$sroa$4$0 = 0;$image$sroa$7$0 = 0;
  }
  $image$sroa$0$1 = $image$sroa$0$0;$image$sroa$10$1 = $image$sroa$10$0;$image$sroa$12$2 = $image$sroa$12$1;$image$sroa$4$1 = $image$sroa$4$0;$image$sroa$7$1 = $image$sroa$7$0;
 } else {
  $image$sroa$0$1 = 0;$image$sroa$10$1 = 0;$image$sroa$12$2 = 0;$image$sroa$4$1 = 0;$image$sroa$7$1 = 0;
 }
 (_fclose(($0|0))|0);
 $image$sroa$0$2 = $image$sroa$0$1;$image$sroa$10$2 = $image$sroa$10$1;$image$sroa$12$3 = $image$sroa$12$2;$image$sroa$4$2 = $image$sroa$4$1;$image$sroa$7$2 = $image$sroa$7$1;
 HEAP32[$agg$result>>2] = $image$sroa$0$2;
 $113 = ((($agg$result)) + 4|0);
 HEAP32[$113>>2] = $image$sroa$4$2;
 $114 = ((($agg$result)) + 8|0);
 HEAP32[$114>>2] = $image$sroa$7$2;
 $115 = ((($agg$result)) + 12|0);
 HEAP32[$115>>2] = $image$sroa$10$2;
 $116 = ((($agg$result)) + 16|0);
 HEAP32[$116>>2] = $image$sroa$12$3;
 STACKTOP = sp;return;
}
function _LoadASTC($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $$$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $header = 0, $image$sroa$0$0 = 0, $image$sroa$0$1 = 0, $image$sroa$12$0 = 0, $image$sroa$12$1 = 0, $image$sroa$14$0 = 0, $image$sroa$14$1 = 0, $image$sroa$4$0 = 0, $image$sroa$4$1 = 0, $image$sroa$8$0 = 0, $image$sroa$8$1 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer7 = 0, $vararg_ptr13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer10 = sp;
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $header = sp + 48|0;
 $0 = (_fopen(($fileName|0),(19952|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $fileName;
  _TraceLog(2,23592,$vararg_buffer);
  $image$sroa$0$1 = 0;$image$sroa$12$1 = 0;$image$sroa$14$1 = 0;$image$sroa$4$1 = 0;$image$sroa$8$1 = 0;
  HEAP32[$agg$result>>2] = $image$sroa$0$1;
  $58 = ((($agg$result)) + 4|0);
  HEAP32[$58>>2] = $image$sroa$4$1;
  $59 = ((($agg$result)) + 8|0);
  HEAP32[$59>>2] = $image$sroa$8$1;
  $60 = ((($agg$result)) + 12|0);
  HEAP32[$60>>2] = $image$sroa$12$1;
  $61 = ((($agg$result)) + 16|0);
  HEAP32[$61>>2] = $image$sroa$14$1;
  STACKTOP = sp;return;
 }
 (_fread(($header|0),16,1,($0|0))|0);
 $2 = ((($header)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(92);
 do {
  if ($4) {
   $5 = ((($header)) + 2|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(-95);
   if ($7) {
    $8 = ((($header)) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-85);
    $11 = HEAP8[$header>>0]|0;
    $12 = ($11<<24>>24)==(19);
    $or$cond = $10 & $12;
    if ($or$cond) {
     $13 = ((($header)) + 9|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = $14&255;
     $16 = $15 << 16;
     $17 = ((($header)) + 8|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18&255;
     $20 = $19 << 8;
     $21 = $20 | $16;
     $22 = ((($header)) + 7|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = $23&255;
     $25 = $21 | $24;
     $26 = ((($header)) + 12|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = $28 << 16;
     $30 = ((($header)) + 11|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = $32 << 8;
     $34 = $33 | $29;
     $35 = ((($header)) + 10|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = $34 | $37;
     HEAP32[$vararg_buffer4>>2] = $25;
     _TraceLog(3,23688,$vararg_buffer4);
     HEAP32[$vararg_buffer7>>2] = $38;
     _TraceLog(3,23712,$vararg_buffer7);
     $39 = ((($header)) + 4|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = $40&255;
     $42 = ((($header)) + 5|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43&255;
     HEAP32[$vararg_buffer10>>2] = $41;
     $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
     HEAP32[$vararg_ptr13>>2] = $44;
     _TraceLog(3,23736,$vararg_buffer10);
     $45 = HEAP8[$39>>0]|0;
     $46 = $45&255;
     $47 = HEAP8[$42>>0]|0;
     $48 = $47&255;
     $49 = Math_imul($48, $46)|0;
     $50 = (128 / ($49>>>0))&-1;
     $51 = ($50|0)==(8);
     $52 = ($50|0)==(2);
     if ((($50|0) == 2) | (($50|0) == 8)) {
      $53 = Math_imul($38, $25)|0;
      $54 = Math_imul($53, $50)|0;
      $55 = $54 >>> 3;
      $56 = (_malloc($55)|0);
      (_fread(($56|0),($55|0),1,($0|0))|0);
      $57 = $51 | $52;
      $$$ = $57 ? 17 : 0;
      $image$sroa$0$0 = $56;$image$sroa$12$0 = 1;$image$sroa$14$0 = $$$;$image$sroa$4$0 = $25;$image$sroa$8$0 = $38;
      break;
     } else {
      HEAP32[$vararg_buffer14>>2] = $fileName;
      _TraceLog(2,23768,$vararg_buffer14);
      $image$sroa$0$0 = 0;$image$sroa$12$0 = 1;$image$sroa$14$0 = 0;$image$sroa$4$0 = $25;$image$sroa$8$0 = $38;
      break;
     }
    } else {
     label = 6;
    }
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  HEAP32[$vararg_buffer1>>2] = $fileName;
  _TraceLog(2,23632,$vararg_buffer1);
  $image$sroa$0$0 = 0;$image$sroa$12$0 = 0;$image$sroa$14$0 = 0;$image$sroa$4$0 = 0;$image$sroa$8$0 = 0;
 }
 (_fclose(($0|0))|0);
 $image$sroa$0$1 = $image$sroa$0$0;$image$sroa$12$1 = $image$sroa$12$0;$image$sroa$14$1 = $image$sroa$14$0;$image$sroa$4$1 = $image$sroa$4$0;$image$sroa$8$1 = $image$sroa$8$0;
 HEAP32[$agg$result>>2] = $image$sroa$0$1;
 $58 = ((($agg$result)) + 4|0);
 HEAP32[$58>>2] = $image$sroa$4$1;
 $59 = ((($agg$result)) + 8|0);
 HEAP32[$59>>2] = $image$sroa$8$1;
 $60 = ((($agg$result)) + 12|0);
 HEAP32[$60>>2] = $image$sroa$12$1;
 $61 = ((($agg$result)) + 16|0);
 HEAP32[$61>>2] = $image$sroa$14$1;
 STACKTOP = sp;return;
}
function _vorbis_deinit($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$013 = 0, $i$17 = 0, $i$25 = 0, $i$34 = 0, $j$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 280|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = ((($p)) + 412|0);
  $4 = ((($p)) + 140|0);
  $i$013 = 0;
  while(1) {
   $5 = HEAP32[$3>>2]|0;
   $6 = (((($5) + (($i$013*24)|0)|0)) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = (((($5) + (($i$013*24)|0)|0)) + 13|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    $12 = HEAP32[$4>>2]|0;
    $13 = (((($12) + (($11*2096)|0)|0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)>(0);
    if ($15) {
     $j$010 = 0;
     while(1) {
      $16 = HEAP32[$6>>2]|0;
      $17 = (($16) + ($j$010<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      _setup_free($p,$18);
      $19 = (($j$010) + 1)|0;
      $20 = HEAP8[$9>>0]|0;
      $21 = $20&255;
      $22 = HEAP32[$4>>2]|0;
      $23 = (((($22) + (($21*2096)|0)|0)) + 4|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($19|0)<($24|0);
      if ($25) {
       $j$010 = $19;
      } else {
       break;
      }
     }
    }
    $26 = HEAP32[$6>>2]|0;
    _setup_free($p,$26);
   }
   $27 = (((($5) + (($i$013*24)|0)|0)) + 20|0);
   $28 = HEAP32[$27>>2]|0;
   _setup_free($p,$28);
   $29 = (($i$013) + 1)|0;
   $30 = HEAP32[$0>>2]|0;
   $31 = ($29|0)<($30|0);
   if ($31) {
    $i$013 = $29;
   } else {
    break;
   }
  }
 }
 $32 = ((($p)) + 140|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if (!($34)) {
  $35 = ((($p)) + 136|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)>(0);
  if ($37) {
   $i$17 = 0;
   while(1) {
    $38 = HEAP32[$32>>2]|0;
    $39 = (((($38) + (($i$17*2096)|0)|0)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    _setup_free($p,$40);
    $41 = (((($38) + (($i$17*2096)|0)|0)) + 28|0);
    $42 = HEAP32[$41>>2]|0;
    _setup_free($p,$42);
    $43 = (((($38) + (($i$17*2096)|0)|0)) + 32|0);
    $44 = HEAP32[$43>>2]|0;
    _setup_free($p,$44);
    $45 = (((($38) + (($i$17*2096)|0)|0)) + 2084|0);
    $46 = HEAP32[$45>>2]|0;
    _setup_free($p,$46);
    $47 = (((($38) + (($i$17*2096)|0)|0)) + 2088|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)==(0|0);
    $50 = ((($48)) + -4|0);
    $51 = $49 ? 0 : $50;
    _setup_free($p,$51);
    $52 = (($i$17) + 1)|0;
    $53 = HEAP32[$35>>2]|0;
    $54 = ($52|0)<($53|0);
    if ($54) {
     $i$17 = $52;
    } else {
     break;
    }
   }
  }
  $55 = HEAP32[$32>>2]|0;
  _setup_free($p,$55);
 }
 $56 = ((($p)) + 276|0);
 $57 = HEAP32[$56>>2]|0;
 _setup_free($p,$57);
 $58 = ((($p)) + 412|0);
 $59 = HEAP32[$58>>2]|0;
 _setup_free($p,$59);
 $60 = ((($p)) + 416|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)>(0);
 $63 = ((($p)) + 420|0);
 if ($62) {
  $i$25 = 0;
  while(1) {
   $64 = HEAP32[$63>>2]|0;
   $65 = (((($64) + (($i$25*40)|0)|0)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   _setup_free($p,$66);
   $67 = (($i$25) + 1)|0;
   $68 = HEAP32[$60>>2]|0;
   $69 = ($67|0)<($68|0);
   if ($69) {
    $i$25 = $67;
   } else {
    break;
   }
  }
 }
 $70 = HEAP32[$63>>2]|0;
 _setup_free($p,$70);
 $71 = ((($p)) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)>(0);
 if ($73) {
  $i$34 = 0;
  while(1) {
   $74 = (((($p)) + 816|0) + ($i$34<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   _setup_free($p,$75);
   $76 = (((($p)) + 944|0) + ($i$34<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   _setup_free($p,$77);
   $78 = (((($p)) + 1012|0) + ($i$34<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   _setup_free($p,$79);
   $80 = (($i$34) + 1)|0;
   $81 = HEAP32[$71>>2]|0;
   $82 = ($80|0)<($81|0);
   if ($82) {
    $i$34 = $80;
   } else {
    break;
   }
  }
 }
 $83 = ((($p)) + 1084|0);
 $84 = HEAP32[$83>>2]|0;
 _setup_free($p,$84);
 $85 = ((($p)) + 1092|0);
 $86 = HEAP32[$85>>2]|0;
 _setup_free($p,$86);
 $87 = ((($p)) + 1100|0);
 $88 = HEAP32[$87>>2]|0;
 _setup_free($p,$88);
 $89 = ((($p)) + 1108|0);
 $90 = HEAP32[$89>>2]|0;
 _setup_free($p,$90);
 $91 = ((($p)) + 1116|0);
 $92 = HEAP32[$91>>2]|0;
 _setup_free($p,$92);
 $93 = ((($p)) + 1088|0);
 $94 = HEAP32[$93>>2]|0;
 _setup_free($p,$94);
 $95 = ((($p)) + 1096|0);
 $96 = HEAP32[$95>>2]|0;
 _setup_free($p,$96);
 $97 = ((($p)) + 1104|0);
 $98 = HEAP32[$97>>2]|0;
 _setup_free($p,$98);
 $99 = ((($p)) + 1112|0);
 $100 = HEAP32[$99>>2]|0;
 _setup_free($p,$100);
 $101 = ((($p)) + 1120|0);
 $102 = HEAP32[$101>>2]|0;
 _setup_free($p,$102);
 $103 = ((($p)) + 28|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)==(0);
 if ($105) {
  return;
 }
 $106 = ((($p)) + 20|0);
 $107 = HEAP32[$106>>2]|0;
 (_fclose(($107|0))|0);
 return;
}
function _setup_free($f,$p) {
 $f = $f|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  return;
 }
 _free($p);
 return;
}
function _error($f,$e) {
 $f = $f|0;
 $e = $e|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 116|0);
 HEAP32[$0>>2] = $e;
 return;
}
function _is_whole_packet_present($f,$end_page) {
 $f = $f|0;
 $end_page = $end_page|0;
 var $$0 = 0, $$s$0 = 0, $$s$3 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $first$0 = 0, $first$0$ph = 0, $or$cond = 0, $p$011 = 0, $p$1 = 0, $p$2 = 0, $p$2$ph = 0, $p$35 = 0, $p$4 = 0;
 var $s$0$lcssa = 0, $s$012 = 0, $s$2 = 0, $s$2$ph = 0, $s$3$lcssa = 0, $s$36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 1396|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==(-1);
 if ($4) {
  $first$0$ph = 1;$p$2$ph = $3;$s$2$ph = -1;
 } else {
  $5 = ((($f)) + 1132|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($1|0)<($6|0);
  L3: do {
   if ($7) {
    $p$011 = $3;$s$012 = $1;
    while(1) {
     $8 = (((($f)) + 1136|0) + ($s$012)|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = $9&255;
     $11 = (($p$011) + ($10)|0);
     $12 = ($9<<24>>24)==(-1);
     if (!($12)) {
      $p$1 = $11;$s$0$lcssa = $s$012;
      break L3;
     }
     $13 = (($s$012) + 1)|0;
     $14 = HEAP32[$5>>2]|0;
     $15 = ($13|0)<($14|0);
     if ($15) {
      $p$011 = $11;$s$012 = $13;
     } else {
      $p$1 = $11;$s$0$lcssa = $13;
      break;
     }
    }
   } else {
    $p$1 = $3;$s$0$lcssa = $1;
   }
  } while(0);
  $16 = ($end_page|0)==(0);
  if (!($16)) {
   $17 = HEAP32[$5>>2]|0;
   $18 = (($17) + -1)|0;
   $19 = ($s$0$lcssa|0)<($18|0);
   if ($19) {
    _error($f,21);
    $$0 = 0;
    return ($$0|0);
   }
  }
  $20 = HEAP32[$5>>2]|0;
  $21 = ($s$0$lcssa|0)==($20|0);
  $$s$0 = $21 ? -1 : $s$0$lcssa;
  $22 = ((($f)) + 40|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($p$1>>>0)>($23>>>0);
  if ($24) {
   _error($f,1);
   $$0 = 0;
   return ($$0|0);
  } else {
   $first$0$ph = 0;$p$2$ph = $p$1;$s$2$ph = $$s$0;
  }
 }
 $25 = ((($f)) + 40|0);
 $26 = ($end_page|0)!=(0);
 $27 = ((($f)) + 1008|0);
 $first$0 = $first$0$ph;$p$2 = $p$2$ph;$s$2 = $s$2$ph;
 while(1) {
  $28 = ($s$2|0)==(-1);
  if (!($28)) {
   $$0 = 1;
   label = 33;
   break;
  }
  $29 = ((($p$2)) + 26|0);
  $30 = HEAP32[$25>>2]|0;
  $31 = ($29>>>0)<($30>>>0);
  if (!($31)) {
   label = 13;
   break;
  }
  $32 = (_memcmp($p$2,20680,4)|0);
  $33 = ($32|0)==(0);
  if (!($33)) {
   label = 15;
   break;
  }
  $34 = ((($p$2)) + 4|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if (!($36)) {
   label = 17;
   break;
  }
  $37 = ($first$0|0)==(0);
  if ($37) {
   $44 = ((($p$2)) + 5|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45 & 1;
   $47 = ($46<<24>>24)==(0);
   if ($47) {
    label = 23;
    break;
   }
  } else {
   $38 = HEAP32[$27>>2]|0;
   $39 = ($38|0)==(0);
   if (!($39)) {
    $40 = ((($p$2)) + 5|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41 & 1;
    $43 = ($42<<24>>24)==(0);
    if (!($43)) {
     label = 21;
     break;
    }
   }
  }
  $48 = HEAP8[$29>>0]|0;
  $49 = $48&255;
  $$sum = (($49) + 27)|0;
  $50 = (($p$2) + ($$sum)|0);
  $51 = HEAP32[$25>>2]|0;
  $52 = ($50>>>0)>($51>>>0);
  if ($52) {
   label = 26;
   break;
  }
  $53 = ($48<<24>>24)==(0);
  L28: do {
   if ($53) {
    $p$4 = $50;$s$3$lcssa = 0;
   } else {
    $p$35 = $50;$s$36 = 0;
    while(1) {
     $$sum1 = (($s$36) + 27)|0;
     $54 = (($p$2) + ($$sum1)|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = $55&255;
     $57 = (($p$35) + ($56)|0);
     $58 = ($55<<24>>24)==(-1);
     if (!($58)) {
      $p$4 = $57;$s$3$lcssa = $s$36;
      break L28;
     }
     $59 = (($s$36) + 1)|0;
     $60 = ($59|0)<($49|0);
     if ($60) {
      $p$35 = $57;$s$36 = $59;
     } else {
      $p$4 = $57;$s$3$lcssa = $59;
      break;
     }
    }
   }
  } while(0);
  $61 = (($49) + -1)|0;
  $62 = ($s$3$lcssa|0)<($61|0);
  $or$cond = $26 & $62;
  if ($or$cond) {
   label = 30;
   break;
  }
  $63 = ($s$3$lcssa|0)==($49|0);
  $$s$3 = $63 ? -1 : $s$3$lcssa;
  $64 = HEAP32[$25>>2]|0;
  $65 = ($p$4>>>0)>($64>>>0);
  if ($65) {
   label = 32;
   break;
  } else {
   $first$0 = 0;$p$2 = $p$4;$s$2 = $$s$3;
  }
 }
 if ((label|0) == 13) {
  _error($f,1);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 15) {
  _error($f,21);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 17) {
  _error($f,21);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 21) {
  _error($f,21);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 23) {
  _error($f,21);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 26) {
  _error($f,1);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 30) {
  _error($f,21);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 32) {
  _error($f,1);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 33) {
  return ($$0|0);
 }
 return (0)|0;
}
function _vorbis_decode_packet($f,$len,$p_left,$p_right) {
 $f = $f|0;
 $len = $len|0;
 $p_left = $p_left|0;
 $p_right = $p_right|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $left_end = 0, $mode = 0, $right_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $mode = sp + 8|0;
 $left_end = sp;
 $right_end = sp + 4|0;
 $0 = (_vorbis_decode_initial($f,$p_left,$left_end,$p_right,$right_end,$mode)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$mode>>2]|0;
 $3 = (((($f)) + 428|0) + (($2*6)|0)|0);
 $4 = HEAP32[$p_left>>2]|0;
 $5 = HEAP32[$p_right>>2]|0;
 $6 = HEAP32[$right_end>>2]|0;
 $7 = (_vorbis_decode_packet_rest($f,$len,$3,$4,$5,$6,$p_left)|0);
 $$0 = $7;
 STACKTOP = sp;return ($$0|0);
}
function _get8_packet($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_get8_packet_raw($f)|0);
 $1 = ((($f)) + 1412|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function _vorbis_finish_frame($f,$len,$left,$right) {
 $f = $f|0;
 $len = $len|0;
 $left = $left|0;
 $right = $right|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond10 = 0;
 var $i$04 = 0, $i1$09 = 0, $j$03 = 0, $j2$06 = 0, $len$right = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 1008|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $49 = 0;
 } else {
  $3 = (_get_window($f,$1)|0);
  $4 = ((($f)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)>(0);
  if ($6) {
   $7 = ($1|0)>(0);
   $8 = HEAP32[$4>>2]|0;
   $9 = (($1) + -1)|0;
   $i1$09 = 0;
   while(1) {
    if ($7) {
     $10 = (((($f)) + 816|0) + ($i1$09<<2)|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (((($f)) + 944|0) + ($i1$09<<2)|0);
     $13 = HEAP32[$12>>2]|0;
     $j2$06 = 0;
     while(1) {
      $14 = (($j2$06) + ($left))|0;
      $15 = (($11) + ($14<<2)|0);
      $16 = +HEAPF32[$15>>2];
      $17 = (($3) + ($j2$06<<2)|0);
      $18 = +HEAPF32[$17>>2];
      $19 = $16 * $18;
      $20 = (($13) + ($j2$06<<2)|0);
      $21 = +HEAPF32[$20>>2];
      $22 = (($9) - ($j2$06))|0;
      $23 = (($3) + ($22<<2)|0);
      $24 = +HEAPF32[$23>>2];
      $25 = $21 * $24;
      $26 = $19 + $25;
      HEAPF32[$15>>2] = $26;
      $27 = (($j2$06) + 1)|0;
      $exitcond10 = ($27|0)==($1|0);
      if ($exitcond10) {
       break;
      } else {
       $j2$06 = $27;
      }
     }
    }
    $28 = (($i1$09) + 1)|0;
    $29 = ($28|0)<($8|0);
    if ($29) {
     $i1$09 = $28;
    } else {
     break;
    }
   }
  }
  $$pr = HEAP32[$0>>2]|0;
  $49 = $$pr;
 }
 $30 = (($len) - ($right))|0;
 HEAP32[$0>>2] = $30;
 $31 = ((($f)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)>(0);
 if ($33) {
  $34 = ($len|0)>($right|0);
  $35 = HEAP32[$31>>2]|0;
  $36 = (($len) - ($right))|0;
  $i$04 = 0;
  while(1) {
   if ($34) {
    $37 = (((($f)) + 816|0) + ($i$04<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (((($f)) + 944|0) + ($i$04<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $42 = $right;$j$03 = 0;
    while(1) {
     $41 = (($38) + ($42<<2)|0);
     $43 = HEAP32[$41>>2]|0;
     $44 = (($40) + ($j$03<<2)|0);
     HEAP32[$44>>2] = $43;
     $45 = (($j$03) + 1)|0;
     $46 = (($45) + ($right))|0;
     $exitcond = ($45|0)==($36|0);
     if ($exitcond) {
      break;
     } else {
      $42 = $46;$j$03 = $45;
     }
    }
   }
   $47 = (($i$04) + 1)|0;
   $48 = ($47|0)<($35|0);
   if ($48) {
    $i$04 = $47;
   } else {
    break;
   }
  }
 }
 $50 = ($49|0)==(0);
 if ($50) {
  $$0 = 0;
  return ($$0|0);
 }
 $51 = ($len|0)<($right|0);
 $len$right = $51 ? $len : $right;
 $52 = (($len$right) - ($left))|0;
 $53 = ((($f)) + 1432|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + ($52))|0;
 HEAP32[$53>>2] = $55;
 $$0 = $52;
 return ($$0|0);
}
function _vorbis_init($p,$z) {
 $p = $p|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($p|0),0,1528)|0;
 $0 = ($z|0)==(0|0);
 if (!($0)) {
  $1 = ((($p)) + 96|0);
  $2 = $z;
  $3 = $2;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($2) + 4)|0;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = $8;
  HEAP32[$9>>2] = $4;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $7;
  $12 = ((($p)) + 100|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 3)|0;
  $15 = $14 & -4;
  HEAP32[$12>>2] = $15;
  $16 = ((($p)) + 108|0);
  HEAP32[$16>>2] = $15;
 }
 $17 = ((($p)) + 112|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($p)) + 116|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($p)) + 32|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($p)) + 140|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($p)) + 1436|0);
 HEAP32[$21>>2] = -1;
 $22 = ((($p)) + 28|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($p)) + 20|0);
 HEAP32[$23>>2] = 0;
 return;
}
function _start_decoder($f) {
 $f = $f|0;
 var $$ = 0, $$10 = 0, $$4 = 0, $$lcssa = 0, $$lcssa268 = 0, $$lcssa276 = 0, $$lcssa277 = 0, $$lcssa279 = 0, $$lcssa280 = 0, $$lcssa38 = 0, $$lcssa39 = 0, $$lcssa50 = 0, $$lcssa52 = 0, $$longest_floorlist$0 = 0, $$longest_floorlist$0$lcssa = 0, $$max_class$0 = 0, $$max_class$0$lcssa = 0, $$max_part_read$0 = 0, $$max_part_read$0$lcssa = 0, $$off = 0;
 var $$off7 = 0, $$pr = 0, $$pr15 = 0, $$pr213 = 0, $$pr214 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0;
 var $327 = 0.0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
 var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
 var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
 var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
 var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
 var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
 var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
 var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
 var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
 var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
 var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
 var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
 var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
 var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
 var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
 var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
 var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
 var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $current_entry$0157 = 0, $current_length$0158 = 0, $current_length$0158$in = 0, $div$0174 = 0, $exitcond = 0, $header = 0, $hi = 0, $high_bits$0 = 0, $i$1186 = 0, $i$2148 = 0, $i$3142 = 0, $i$3142$lcssa270 = 0, $i$4107 = 0, $i$584 = 0;
 var $i$669 = 0, $i$765 = 0, $i7$060 = 0, $j$0153 = 0, $j$10130 = 0, $j$11134 = 0, $j$1162 = 0, $j$12137 = 0, $j$1389 = 0, $j$1495 = 0, $j$15103 = 0, $j$1678 = 0, $j$1776 = 0, $j$1880 = 0, $j$2165 = 0, $j$3179 = 0, $j$4169 = 0, $j$5183 = 0, $j$659 = 0, $j$7112 = 0;
 var $j$8119 = 0, $j$9127 = 0, $k$0175 = 0, $k$1116 = 0, $k$2123 = 0, $k$394 = 0, $k$499 = 0, $k$499$in = 0, $k$573 = 0, $lengths$0 = 0, $lengths$112 = 0, $lengths$113$ph = 0, $longest_floorlist$0$lcssa = 0, $longest_floorlist$0141 = 0, $low = 0, $max_class$0111 = 0, $max_part_read$0$lcssa = 0, $max_part_read$061 = 0, $or$cond = 0, $p = 0;
 var $phitmp = 0, $phitmp195 = 0, $phitmp196 = 0, $sext = 0, $sorted_count$0161 = 0, $sorted_count$1 = 0, $sorted_count$2 = 0, $temp$098 = 0, $total$0152 = 0, $total$1 = 0, $total$2 = 0, $values$0 = 0, $values$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $header = sp + 1008|0;
 $p = sp + 8|0;
 $low = sp;
 $hi = sp + 4|0;
 $0 = (_start_page($f)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $2 = ((($f)) + 1391|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 2;
 $6 = ($5|0)==(0);
 if ($6) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $7 = $4 & 4;
 $8 = ($7|0)==(0);
 if (!($8)) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $9 = $4 & 1;
 $10 = ($9|0)==(0);
 if (!($10)) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $11 = ((($f)) + 1132|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $14 = ((($f)) + 1136|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(30);
 if (!($16)) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $17 = (_get8($f)|0);
 $18 = ($17<<24>>24)==(1);
 if (!($18)) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $19 = (_getn($f,$header,6)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  _error($f,10);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $21 = (_vorbis_validate($header)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $23 = (_get32($f)|0);
 $24 = ($23|0)==(0);
 if (!($24)) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $25 = (_get8($f)|0);
 $26 = $25&255;
 $27 = ((($f)) + 4|0);
 HEAP32[$27>>2] = $26;
 $28 = ($25<<24>>24)==(0);
 if ($28) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $29 = ($25&255)>(16);
 if ($29) {
  _error($f,5);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $30 = (_get32($f)|0);
 HEAP32[$f>>2] = $30;
 $31 = ($30|0)==(0);
 if ($31) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 (_get32($f)|0);
 (_get32($f)|0);
 (_get32($f)|0);
 $32 = (_get8($f)|0);
 $33 = $32&255;
 $34 = $33 & 15;
 $35 = $33 >>> 4;
 $36 = 1 << $34;
 $37 = ((($f)) + 128|0);
 HEAP32[$37>>2] = $36;
 $38 = 1 << $35;
 $39 = ((($f)) + 132|0);
 HEAP32[$39>>2] = $38;
 $$off = (($34) + -6)|0;
 $40 = ($$off>>>0)>(7);
 if ($40) {
  _error($f,20);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $$off7 = (($32) + -96)<<24>>24;
 $41 = ($$off7<<24>>24)<(0);
 if ($41) {
  _error($f,20);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $42 = ($34>>>0)>($35>>>0);
 if ($42) {
  _error($f,20);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $43 = (_get8($f)|0);
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  _error($f,34);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $46 = (_start_page($f)|0);
 $47 = ($46|0)==(0);
 if ($47) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $48 = (_start_packet($f)|0);
 $49 = ($48|0)==(0);
 if ($49) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $50 = ((($f)) + 1392|0);
 while(1) {
  $51 = (_next_segment($f)|0);
  _skip($f,$51);
  HEAP8[$50>>0] = 0;
  $52 = ($51|0)==(0);
  if ($52) {
   break;
  }
 }
 $53 = (_start_packet($f)|0);
 $54 = ($53|0)==(0);
 if ($54) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $55 = ((($f)) + 48|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = ($56<<24>>24)==(0);
 do {
  if (!($57)) {
   $58 = (_is_whole_packet_present($f,1)|0);
   $59 = ($58|0)==(0);
   if (!($59)) {
    break;
   }
   $60 = ((($f)) + 116|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(21);
   if (!($62)) {
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   HEAP32[$60>>2] = 20;
   $$4 = 0;
   STACKTOP = sp;return ($$4|0);
  }
 } while(0);
 _crc32_init();
 $63 = (_get8_packet($f)|0);
 $64 = ($63|0)==(5);
 if (!($64)) {
  _error($f,20);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $65 = (_get8_packet($f)|0);
 $66 = $65&255;
 HEAP8[$header>>0] = $66;
 $67 = (_get8_packet($f)|0);
 $68 = $67&255;
 $69 = ((($header)) + 1|0);
 HEAP8[$69>>0] = $68;
 $70 = (_get8_packet($f)|0);
 $71 = $70&255;
 $72 = ((($header)) + 2|0);
 HEAP8[$72>>0] = $71;
 $73 = (_get8_packet($f)|0);
 $74 = $73&255;
 $75 = ((($header)) + 3|0);
 HEAP8[$75>>0] = $74;
 $76 = (_get8_packet($f)|0);
 $77 = $76&255;
 $78 = ((($header)) + 4|0);
 HEAP8[$78>>0] = $77;
 $79 = (_get8_packet($f)|0);
 $80 = $79&255;
 $81 = ((($header)) + 5|0);
 HEAP8[$81>>0] = $80;
 $82 = (_vorbis_validate($header)|0);
 $83 = ($82|0)==(0);
 if ($83) {
  _error($f,20);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $84 = (_get_bits($f,8)|0);
 $85 = (($84) + 1)|0;
 $86 = ((($f)) + 136|0);
 HEAP32[$86>>2] = $85;
 $87 = ($85*2096)|0;
 $88 = (_setup_malloc($f,$87)|0);
 $89 = ((($f)) + 140|0);
 HEAP32[$89>>2] = $88;
 $90 = ($88|0)==(0|0);
 if ($90) {
  _error($f,3);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $91 = HEAP32[$86>>2]|0;
 $92 = ($91*2096)|0;
 _memset(($88|0),0,($92|0))|0;
 $93 = HEAP32[$86>>2]|0;
 $94 = ($93|0)>(0);
 L100: do {
  if ($94) {
   $95 = ((($f)) + 16|0);
   $96 = ((($f)) + 16|0);
   $i$1186 = 0;
   L102: while(1) {
    $97 = HEAP32[$89>>2]|0;
    $98 = (($97) + (($i$1186*2096)|0)|0);
    $99 = (_get_bits($f,8)|0);
    $100 = $99 & 255;
    $101 = ($100|0)==(66);
    if (!($101)) {
     label = 52;
     break;
    }
    $102 = (_get_bits($f,8)|0);
    $103 = $102 & 255;
    $104 = ($103|0)==(67);
    if (!($104)) {
     label = 54;
     break;
    }
    $105 = (_get_bits($f,8)|0);
    $106 = $105 & 255;
    $107 = ($106|0)==(86);
    if (!($107)) {
     label = 56;
     break;
    }
    $108 = (_get_bits($f,8)|0);
    $109 = (_get_bits($f,8)|0);
    $110 = $109 << 8;
    $111 = $108 & 255;
    $112 = $110 | $111;
    HEAP32[$98>>2] = $112;
    $113 = (_get_bits($f,8)|0);
    $114 = (_get_bits($f,8)|0);
    $115 = (_get_bits($f,8)|0);
    $116 = $115 << 16;
    $117 = $114 << 8;
    $118 = $117 & 65280;
    $119 = $113 & 255;
    $120 = $118 | $119;
    $121 = $120 | $116;
    $122 = (((($97) + (($i$1186*2096)|0)|0)) + 4|0);
    HEAP32[$122>>2] = $121;
    $123 = (_get_bits($f,1)|0);
    $124 = ($123|0)!=(0);
    if ($124) {
     $127 = 0;
    } else {
     $125 = (_get_bits($f,1)|0);
     $127 = $125;
    }
    $126 = $127&255;
    $128 = (((($97) + (($i$1186*2096)|0)|0)) + 23|0);
    HEAP8[$128>>0] = $126;
    $129 = ($126<<24>>24)==(0);
    $130 = HEAP32[$122>>2]|0;
    if ($129) {
     $132 = (_setup_malloc($f,$130)|0);
     $133 = (((($97) + (($i$1186*2096)|0)|0)) + 8|0);
     HEAP32[$133>>2] = $132;
     $lengths$0 = $132;
    } else {
     $131 = (_setup_temp_malloc($f,$130)|0);
     $lengths$0 = $131;
    }
    $134 = ($lengths$0|0)==(0|0);
    if ($134) {
     label = 63;
     break;
    }
    do {
     if ($124) {
      $137 = (_get_bits($f,5)|0);
      $138 = HEAP32[$122>>2]|0;
      $139 = ($138|0)>(0);
      if ($139) {
       $141 = $138;$current_entry$0157 = 0;$current_length$0158$in = $137;
      } else {
       $total$2 = 0;
       break;
      }
      while(1) {
       $current_length$0158 = (($current_length$0158$in) + 1)|0;
       $140 = (($141) - ($current_entry$0157))|0;
       $142 = (_ilog($140)|0);
       $143 = (_get_bits($f,$142)|0);
       $144 = (($143) + ($current_entry$0157))|0;
       $145 = HEAP32[$122>>2]|0;
       $146 = ($144|0)>($145|0);
       if ($146) {
        label = 68;
        break L102;
       }
       $147 = (($lengths$0) + ($current_entry$0157)|0);
       $148 = $current_length$0158&255;
       _memset(($147|0),($148|0),($143|0))|0;
       $149 = HEAP32[$122>>2]|0;
       $150 = ($149|0)>($144|0);
       if ($150) {
        $141 = $149;$current_entry$0157 = $144;$current_length$0158$in = $current_length$0158;
       } else {
        $total$2 = 0;
        break;
       }
      }
     } else {
      $135 = HEAP32[$122>>2]|0;
      $136 = ($135|0)>(0);
      if ($136) {
       $j$0153 = 0;$total$0152 = 0;
      } else {
       $total$2 = 0;
       break;
      }
      while(1) {
       $151 = HEAP8[$128>>0]|0;
       $152 = ($151<<24>>24)==(0);
       do {
        if ($152) {
         label = 72;
        } else {
         $153 = (_get_bits($f,1)|0);
         $154 = ($153|0)==(0);
         if (!($154)) {
          label = 72;
          break;
         }
         $160 = (($lengths$0) + ($j$0153)|0);
         HEAP8[$160>>0] = -1;
         $total$1 = $total$0152;
        }
       } while(0);
       if ((label|0) == 72) {
        label = 0;
        $155 = (_get_bits($f,5)|0);
        $156 = (($155) + 1)|0;
        $157 = $156&255;
        $158 = (($lengths$0) + ($j$0153)|0);
        HEAP8[$158>>0] = $157;
        $159 = (($total$0152) + 1)|0;
        $total$1 = $159;
       }
       $161 = (($j$0153) + 1)|0;
       $162 = HEAP32[$122>>2]|0;
       $163 = ($161|0)<($162|0);
       if ($163) {
        $j$0153 = $161;$total$0152 = $total$1;
       } else {
        $total$2 = $total$1;
        break;
       }
      }
     }
    } while(0);
    $164 = HEAP8[$128>>0]|0;
    $165 = ($164<<24>>24)==(0);
    do {
     if ($165) {
      $lengths$113$ph = $lengths$0;
      label = 81;
     } else {
      $166 = HEAP32[$122>>2]|0;
      $167 = $166 >> 2;
      $168 = ($total$2|0)<($167|0);
      if ($168) {
       $$pr = HEAP8[$128>>0]|0;
       $177 = ($$pr<<24>>24)==(0);
       if ($177) {
        $lengths$113$ph = $lengths$0;
        label = 81;
        break;
       } else {
        $lengths$112 = $lengths$0;$sorted_count$2 = $total$2;
        break;
       }
      }
      $169 = HEAP32[$96>>2]|0;
      $170 = ($166|0)>($169|0);
      if ($170) {
       HEAP32[$96>>2] = $166;
      }
      $171 = HEAP32[$122>>2]|0;
      $172 = (_setup_malloc($f,$171)|0);
      $173 = (((($97) + (($i$1186*2096)|0)|0)) + 8|0);
      HEAP32[$173>>2] = $172;
      $174 = HEAP32[$122>>2]|0;
      _memcpy(($172|0),($lengths$0|0),($174|0))|0;
      $175 = HEAP32[$122>>2]|0;
      _setup_temp_free($f,$lengths$0,$175);
      $176 = HEAP32[$173>>2]|0;
      HEAP8[$128>>0] = 0;
      $lengths$113$ph = $176;
      label = 81;
     }
    } while(0);
    do {
     if ((label|0) == 81) {
      label = 0;
      $178 = HEAP32[$122>>2]|0;
      $179 = ($178|0)>(0);
      if (!($179)) {
       $lengths$112 = $lengths$113$ph;$sorted_count$2 = 0;
       break;
      }
      $180 = HEAP32[$122>>2]|0;
      $j$1162 = 0;$sorted_count$0161 = 0;
      while(1) {
       $181 = (($lengths$113$ph) + ($j$1162)|0);
       $182 = HEAP8[$181>>0]|0;
       $183 = ($182&255)<(11);
       $184 = ($182<<24>>24)==(-1);
       $or$cond = $183 | $184;
       $185 = $or$cond&1;
       $186 = $185 ^ 1;
       $sorted_count$1 = (($186) + ($sorted_count$0161))|0;
       $187 = (($j$1162) + 1)|0;
       $188 = ($187|0)<($180|0);
       if ($188) {
        $j$1162 = $187;$sorted_count$0161 = $sorted_count$1;
       } else {
        $lengths$112 = $lengths$113$ph;$sorted_count$2 = $sorted_count$1;
        break;
       }
      }
     }
    } while(0);
    $189 = (((($97) + (($i$1186*2096)|0)|0)) + 2092|0);
    HEAP32[$189>>2] = $sorted_count$2;
    $190 = HEAP8[$128>>0]|0;
    $191 = ($190<<24>>24)==(0);
    do {
     if ($191) {
      $192 = HEAP32[$122>>2]|0;
      $193 = $192 << 2;
      $194 = (_setup_malloc($f,$193)|0);
      $195 = (((($97) + (($i$1186*2096)|0)|0)) + 32|0);
      HEAP32[$195>>2] = $194;
      $196 = ($194|0)==(0|0);
      if ($196) {
       label = 86;
       break L102;
      } else {
       $values$1 = 0;
      }
     } else {
      $197 = ($sorted_count$2|0)==(0);
      if ($197) {
       $values$0 = 0;
      } else {
       $198 = (_setup_malloc($f,$sorted_count$2)|0);
       $199 = (((($97) + (($i$1186*2096)|0)|0)) + 8|0);
       HEAP32[$199>>2] = $198;
       $200 = ($198|0)==(0|0);
       if ($200) {
        label = 89;
        break L102;
       }
       $201 = HEAP32[$189>>2]|0;
       $202 = $201 << 2;
       $203 = (_setup_temp_malloc($f,$202)|0);
       $204 = (((($97) + (($i$1186*2096)|0)|0)) + 32|0);
       HEAP32[$204>>2] = $203;
       $205 = ($203|0)==(0|0);
       if ($205) {
        label = 91;
        break L102;
       }
       $206 = HEAP32[$189>>2]|0;
       $207 = $206 << 2;
       $208 = (_setup_temp_malloc($f,$207)|0);
       $209 = ($208|0)==(0|0);
       if ($209) {
        label = 93;
        break L102;
       } else {
        $values$0 = $208;
       }
      }
      $210 = HEAP32[$122>>2]|0;
      $211 = HEAP32[$189>>2]|0;
      $212 = $211 << 3;
      $213 = (($212) + ($210))|0;
      $214 = HEAP32[$95>>2]|0;
      $215 = ($213>>>0)>($214>>>0);
      if (!($215)) {
       $values$1 = $values$0;
       break;
      }
      HEAP32[$95>>2] = $213;
      $values$1 = $values$0;
     }
    } while(0);
    $216 = HEAP32[$122>>2]|0;
    _compute_codewords($98,$lengths$112,$216,$values$1);
    $217 = HEAP32[$189>>2]|0;
    $218 = ($217|0)==(0);
    if (!($218)) {
     $219 = $217 << 2;
     $220 = (($219) + 4)|0;
     $221 = (_setup_malloc($f,$220)|0);
     $222 = (((($97) + (($i$1186*2096)|0)|0)) + 2084|0);
     HEAP32[$222>>2] = $221;
     $223 = HEAP32[$189>>2]|0;
     $224 = $223 << 2;
     $225 = (($224) + 4)|0;
     $226 = (_setup_malloc($f,$225)|0);
     $227 = (((($97) + (($i$1186*2096)|0)|0)) + 2088|0);
     HEAP32[$227>>2] = $226;
     $228 = ($226|0)==(0|0);
     if (!($228)) {
      $229 = ((($226)) + 4|0);
      HEAP32[$227>>2] = $229;
      HEAP32[$226>>2] = -1;
     }
     _compute_sorted_huffman($98,$lengths$112,$values$1);
    }
    $230 = HEAP8[$128>>0]|0;
    $231 = ($230<<24>>24)==(0);
    if (!($231)) {
     $232 = HEAP32[$189>>2]|0;
     $233 = $232 << 2;
     _setup_temp_free($f,$values$1,$233);
     $234 = (((($97) + (($i$1186*2096)|0)|0)) + 32|0);
     $235 = HEAP32[$234>>2]|0;
     $236 = HEAP32[$189>>2]|0;
     $237 = $236 << 2;
     _setup_temp_free($f,$235,$237);
     $238 = HEAP32[$122>>2]|0;
     _setup_temp_free($f,$lengths$112,$238);
     HEAP32[$234>>2] = 0;
    }
    _compute_accelerated_huffman($98);
    $239 = (_get_bits($f,4)|0);
    $240 = $239&255;
    $241 = (((($97) + (($i$1186*2096)|0)|0)) + 21|0);
    HEAP8[$241>>0] = $240;
    $242 = $239 & 255;
    $243 = ($242>>>0)>(2);
    if ($243) {
     label = 103;
     break;
    }
    $244 = ($242|0)==(0);
    do {
     if (!($244)) {
      $245 = (_get_bits($f,32)|0);
      $246 = (+_float32_unpack($245));
      $247 = (((($97) + (($i$1186*2096)|0)|0)) + 12|0);
      HEAPF32[$247>>2] = $246;
      $248 = (_get_bits($f,32)|0);
      $249 = (+_float32_unpack($248));
      $250 = (((($97) + (($i$1186*2096)|0)|0)) + 16|0);
      HEAPF32[$250>>2] = $249;
      $251 = (_get_bits($f,4)|0);
      $252 = (($251) + 1)|0;
      $253 = $252&255;
      $254 = (((($97) + (($i$1186*2096)|0)|0)) + 20|0);
      HEAP8[$254>>0] = $253;
      $255 = (_get_bits($f,1)|0);
      $256 = $255&255;
      $257 = (((($97) + (($i$1186*2096)|0)|0)) + 22|0);
      HEAP8[$257>>0] = $256;
      $258 = HEAP8[$241>>0]|0;
      $259 = ($258<<24>>24)==(1);
      $260 = HEAP32[$122>>2]|0;
      $261 = HEAP32[$98>>2]|0;
      if ($259) {
       $262 = (_lookup1_values($260,$261)|0);
       $263 = (((($97) + (($i$1186*2096)|0)|0)) + 24|0);
       HEAP32[$263>>2] = $262;
      } else {
       $264 = Math_imul($261, $260)|0;
       $265 = (((($97) + (($i$1186*2096)|0)|0)) + 24|0);
       HEAP32[$265>>2] = $264;
      }
      $266 = (((($97) + (($i$1186*2096)|0)|0)) + 24|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = $267 << 1;
      $269 = (_setup_temp_malloc($f,$268)|0);
      $270 = ($269|0)==(0|0);
      if ($270) {
       label = 110;
       break L102;
      }
      $271 = HEAP32[$266>>2]|0;
      $272 = ($271|0)>(0);
      if ($272) {
       $j$2165 = 0;
       while(1) {
        $273 = HEAP8[$254>>0]|0;
        $274 = $273&255;
        $275 = (_get_bits($f,$274)|0);
        $276 = ($275|0)==(-1);
        if ($276) {
         $$lcssa276 = $266;$$lcssa279 = $269;
         label = 112;
         break L102;
        }
        $279 = $275&65535;
        $280 = (($269) + ($j$2165<<1)|0);
        HEAP16[$280>>1] = $279;
        $281 = (($j$2165) + 1)|0;
        $282 = HEAP32[$266>>2]|0;
        $283 = ($281|0)<($282|0);
        if ($283) {
         $j$2165 = $281;
        } else {
         $$lcssa50 = $282;
         break;
        }
       }
      } else {
       $$lcssa50 = $271;
      }
      $284 = HEAP8[$241>>0]|0;
      $285 = ($284<<24>>24)==(1);
      do {
       if ($285) {
        $286 = HEAP8[$128>>0]|0;
        $287 = ($286<<24>>24)!=(0);
        if ($287) {
         $288 = HEAP32[$189>>2]|0;
         $289 = ($288|0)==(0);
         if ($289) {
          label = 134;
          break;
         }
         $290 = $288 << 2;
         $291 = HEAP32[$98>>2]|0;
         $292 = Math_imul($290, $291)|0;
         $293 = (_setup_malloc($f,$292)|0);
         $294 = (((($97) + (($i$1186*2096)|0)|0)) + 28|0);
         HEAP32[$294>>2] = $293;
        } else {
         $295 = HEAP32[$122>>2]|0;
         $296 = $295 << 2;
         $297 = HEAP32[$98>>2]|0;
         $298 = Math_imul($296, $297)|0;
         $299 = (_setup_malloc($f,$298)|0);
         $300 = (((($97) + (($i$1186*2096)|0)|0)) + 28|0);
         HEAP32[$300>>2] = $299;
        }
        $301 = (((($97) + (($i$1186*2096)|0)|0)) + 28|0);
        $302 = HEAP32[$301>>2]|0;
        $303 = ($302|0)==(0|0);
        if ($303) {
         $$lcssa277 = $266;$$lcssa280 = $269;
         label = 120;
         break L102;
        }
        $$ = $287 ? $189 : $122;
        $306 = HEAP32[$$>>2]|0;
        $307 = ($306|0)>(0);
        if ($307) {
         $308 = (((($97) + (($i$1186*2096)|0)|0)) + 2088|0);
         $309 = HEAP32[$98>>2]|0;
         $310 = ($309|0)>(0);
         $j$3179 = 0;
         while(1) {
          if ($287) {
           $311 = HEAP32[$308>>2]|0;
           $312 = (($311) + ($j$3179<<2)|0);
           $313 = HEAP32[$312>>2]|0;
           $318 = $313;
          } else {
           $318 = $j$3179;
          }
          if ($310) {
           $314 = HEAP32[$266>>2]|0;
           $315 = HEAP32[$301>>2]|0;
           $316 = HEAP32[$98>>2]|0;
           $329 = $309;$div$0174 = 1;$k$0175 = 0;
           while(1) {
            $317 = (($318|0) / ($div$0174|0))&-1;
            $319 = (($317>>>0) % ($314>>>0))&-1;
            $320 = (($269) + ($319<<1)|0);
            $321 = HEAP16[$320>>1]|0;
            $322 = $321&65535;
            $323 = (+($322|0));
            $324 = +HEAPF32[$250>>2];
            $325 = $324 * $323;
            $326 = +HEAPF32[$247>>2];
            $327 = $326 + $325;
            $328 = Math_imul($329, $j$3179)|0;
            $330 = (($328) + ($k$0175))|0;
            $331 = (($315) + ($330<<2)|0);
            HEAPF32[$331>>2] = $327;
            $332 = Math_imul($314, $div$0174)|0;
            $333 = (($k$0175) + 1)|0;
            $334 = ($333|0)<($316|0);
            if ($334) {
             $329 = $316;$div$0174 = $332;$k$0175 = $333;
            } else {
             break;
            }
           }
          }
          $335 = (($j$3179) + 1)|0;
          $exitcond = ($335|0)==($306|0);
          if ($exitcond) {
           break;
          } else {
           $j$3179 = $335;
          }
         }
        }
        $336 = HEAP32[$266>>2]|0;
        $337 = $336 << 1;
        _setup_temp_free($f,$269,$337);
        HEAP8[$241>>0] = 2;
       } else {
        $338 = $$lcssa50 << 2;
        $339 = (_setup_malloc($f,$338)|0);
        $340 = (((($97) + (($i$1186*2096)|0)|0)) + 28|0);
        HEAP32[$340>>2] = $339;
        $341 = HEAP32[$266>>2]|0;
        $342 = ($341|0)>(0);
        if ($342) {
         $343 = HEAP32[$340>>2]|0;
         $344 = HEAP32[$266>>2]|0;
         $j$4169 = 0;
         while(1) {
          $345 = (($269) + ($j$4169<<1)|0);
          $346 = HEAP16[$345>>1]|0;
          $347 = $346&65535;
          $348 = (+($347|0));
          $349 = +HEAPF32[$250>>2];
          $350 = $349 * $348;
          $351 = +HEAPF32[$247>>2];
          $352 = $351 + $350;
          $353 = (($343) + ($j$4169<<2)|0);
          HEAPF32[$353>>2] = $352;
          $354 = (($j$4169) + 1)|0;
          $355 = ($354|0)<($344|0);
          if ($355) {
           $j$4169 = $354;
          } else {
           $$lcssa52 = $344;
           break;
          }
         }
        } else {
         $$lcssa52 = $341;
        }
        $356 = $$lcssa52 << 1;
        _setup_temp_free($f,$269,$356);
        label = 134;
       }
      } while(0);
      if ((label|0) == 134) {
       label = 0;
       $$pr15 = HEAP8[$241>>0]|0;
       $357 = ($$pr15<<24>>24)==(2);
       if (!($357)) {
        break;
       }
      }
      $358 = HEAP8[$257>>0]|0;
      $359 = ($358<<24>>24)==(0);
      if ($359) {
       break;
      }
      $360 = HEAP32[$266>>2]|0;
      $361 = ($360|0)>(1);
      if ($361) {
       $362 = (((($97) + (($i$1186*2096)|0)|0)) + 28|0);
       $363 = HEAP32[$362>>2]|0;
       $364 = HEAP32[$266>>2]|0;
       $j$5183 = 1;
       while(1) {
        $365 = (($j$5183) + -1)|0;
        $366 = (($363) + ($365<<2)|0);
        $367 = HEAP32[$366>>2]|0;
        $368 = (($363) + ($j$5183<<2)|0);
        HEAP32[$368>>2] = $367;
        $369 = (($j$5183) + 1)|0;
        $370 = ($369|0)<($364|0);
        if ($370) {
         $j$5183 = $369;
        } else {
         break;
        }
       }
      }
      HEAP8[$257>>0] = 0;
     }
    } while(0);
    $371 = (($i$1186) + 1)|0;
    $372 = HEAP32[$86>>2]|0;
    $373 = ($371|0)<($372|0);
    if ($373) {
     $i$1186 = $371;
    } else {
     break L100;
    }
   }
   switch (label|0) {
    case 52: {
     _error($f,20);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 54: {
     _error($f,20);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 56: {
     _error($f,20);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 63: {
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 68: {
     _error($f,20);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 86: {
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 89: {
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 91: {
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 93: {
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 103: {
     _error($f,20);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 110: {
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 112: {
     $277 = HEAP32[$$lcssa276>>2]|0;
     $278 = $277 << 1;
     _setup_temp_free($f,$$lcssa279,$278);
     _error($f,20);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
    case 120: {
     $304 = HEAP32[$$lcssa277>>2]|0;
     $305 = $304 << 1;
     _setup_temp_free($f,$$lcssa280,$305);
     _error($f,3);
     $$4 = 0;
     STACKTOP = sp;return ($$4|0);
     break;
    }
   }
  }
 } while(0);
 $374 = (_get_bits($f,6)|0);
 $375 = (($374) + 1)|0;
 $376 = $375 & 255;
 $377 = ($376|0)==(0);
 L241: do {
  if (!($377)) {
   $i$2148 = 0;
   while(1) {
    $380 = (_get_bits($f,16)|0);
    $381 = ($380|0)==(0);
    $378 = (($i$2148) + 1)|0;
    if (!($381)) {
     break;
    }
    $379 = ($378|0)<($376|0);
    if ($379) {
     $i$2148 = $378;
    } else {
     break L241;
    }
   }
   _error($f,20);
   $$4 = 0;
   STACKTOP = sp;return ($$4|0);
  }
 } while(0);
 $382 = (_get_bits($f,6)|0);
 $383 = (($382) + 1)|0;
 $384 = ((($f)) + 144|0);
 HEAP32[$384>>2] = $383;
 $385 = ($383*1596)|0;
 $386 = (_setup_malloc($f,$385)|0);
 $387 = ((($f)) + 276|0);
 HEAP32[$387>>2] = $386;
 $388 = HEAP32[$384>>2]|0;
 $389 = ($388|0)>(0);
 do {
  if ($389) {
   $i$3142 = 0;$longest_floorlist$0141 = 0;
   L250: while(1) {
    $390 = (_get_bits($f,16)|0);
    $391 = $390&65535;
    $392 = (((($f)) + 148|0) + ($i$3142<<1)|0);
    HEAP16[$392>>1] = $391;
    $393 = $390 & 65535;
    $394 = ($393>>>0)>(1);
    if ($394) {
     label = 148;
     break;
    }
    $395 = ($393|0)==(0);
    if ($395) {
     $i$3142$lcssa270 = $i$3142;
     label = 150;
     break;
    }
    $425 = HEAP32[$387>>2]|0;
    $426 = (_get_bits($f,5)|0);
    $427 = $426&255;
    $428 = (($425) + (($i$3142*1596)|0)|0);
    HEAP8[$428>>0] = $427;
    $429 = $426 & 255;
    $430 = ($429|0)==(0);
    do {
     if (!($430)) {
      $j$7112 = 0;$max_class$0111 = -1;
      while(1) {
       $432 = (_get_bits($f,4)|0);
       $433 = $432&255;
       $434 = ((((($425) + (($i$3142*1596)|0)|0)) + 1|0) + ($j$7112)|0);
       HEAP8[$434>>0] = $433;
       $435 = $432 & 255;
       $436 = ($435|0)>($max_class$0111|0);
       $$max_class$0 = $436 ? $435 : $max_class$0111;
       $437 = (($j$7112) + 1)|0;
       $438 = HEAP8[$428>>0]|0;
       $439 = $438&255;
       $440 = ($437|0)<($439|0);
       if ($440) {
        $j$7112 = $437;$max_class$0111 = $$max_class$0;
       } else {
        $$max_class$0$lcssa = $$max_class$0;
        break;
       }
      }
      $431 = ($$max_class$0$lcssa|0)<(0);
      if ($431) {
       break;
      } else {
       $j$8119 = 0;
      }
      while(1) {
       $441 = (_get_bits($f,3)|0);
       $442 = (($441) + 1)|0;
       $443 = $442&255;
       $444 = ((((($425) + (($i$3142*1596)|0)|0)) + 33|0) + ($j$8119)|0);
       HEAP8[$444>>0] = $443;
       $445 = (_get_bits($f,2)|0);
       $446 = $445&255;
       $447 = ((((($425) + (($i$3142*1596)|0)|0)) + 49|0) + ($j$8119)|0);
       HEAP8[$447>>0] = $446;
       $448 = ($446<<24>>24)==(0);
       if ($448) {
        $k$1116 = 0;
        label = 161;
       } else {
        $450 = (_get_bits($f,8)|0);
        $451 = $450&255;
        $452 = ((((($425) + (($i$3142*1596)|0)|0)) + 65|0) + ($j$8119)|0);
        HEAP8[$452>>0] = $451;
        $453 = $450 & 255;
        $454 = HEAP32[$86>>2]|0;
        $455 = ($453|0)<($454|0);
        if (!($455)) {
         label = 159;
         break L250;
        }
        $$pr213 = HEAP8[$447>>0]|0;
        $449 = ($$pr213<<24>>24)==(31);
        if (!($449)) {
         $k$1116 = 0;
         label = 161;
        }
       }
       if ((label|0) == 161) {
        while(1) {
         label = 0;
         $461 = (_get_bits($f,8)|0);
         $462 = (($461) + 65535)|0;
         $463 = $462&65535;
         $464 = (((((($425) + (($i$3142*1596)|0)|0)) + 82|0) + ($j$8119<<4)|0) + ($k$1116<<1)|0);
         HEAP16[$464>>1] = $463;
         $sext = $462 << 16;
         $465 = $sext >> 16;
         $466 = HEAP32[$86>>2]|0;
         $467 = ($465|0)<($466|0);
         $459 = (($k$1116) + 1)|0;
         if (!($467)) {
          label = 162;
          break L250;
         }
         $456 = HEAP8[$447>>0]|0;
         $457 = $456&255;
         $458 = 1 << $457;
         $460 = ($459|0)<($458|0);
         if ($460) {
          $k$1116 = $459;
          label = 161;
         } else {
          break;
         }
        }
       }
       $468 = (($j$8119) + 1)|0;
       $469 = ($j$8119|0)<($$max_class$0$lcssa|0);
       if ($469) {
        $j$8119 = $468;
       } else {
        break;
       }
      }
     }
    } while(0);
    $470 = (_get_bits($f,2)|0);
    $471 = (($470) + 1)|0;
    $472 = $471&255;
    $473 = (((($425) + (($i$3142*1596)|0)|0)) + 1588|0);
    HEAP8[$473>>0] = $472;
    $474 = (_get_bits($f,4)|0);
    $475 = $474&255;
    $476 = (((($425) + (($i$3142*1596)|0)|0)) + 1589|0);
    HEAP8[$476>>0] = $475;
    $477 = (((($425) + (($i$3142*1596)|0)|0)) + 338|0);
    HEAP16[$477>>1] = 0;
    $478 = HEAP8[$476>>0]|0;
    $479 = $478&255;
    $480 = 1 << $479;
    $481 = $480&65535;
    $482 = (((($425) + (($i$3142*1596)|0)|0)) + 340|0);
    HEAP16[$482>>1] = $481;
    $483 = (((($425) + (($i$3142*1596)|0)|0)) + 1592|0);
    HEAP32[$483>>2] = 2;
    $484 = HEAP8[$428>>0]|0;
    $485 = ($484<<24>>24)==(0);
    if ($485) {
     $j$10130 = 0;
     label = 169;
    } else {
     $j$9127 = 0;
     while(1) {
      $487 = ((((($425) + (($i$3142*1596)|0)|0)) + 1|0) + ($j$9127)|0);
      $488 = HEAP8[$487>>0]|0;
      $489 = $488&255;
      $490 = ((((($425) + (($i$3142*1596)|0)|0)) + 33|0) + ($489)|0);
      $491 = HEAP8[$490>>0]|0;
      $492 = ($491<<24>>24)==(0);
      if (!($492)) {
       $k$2123 = 0;
       while(1) {
        $493 = HEAP8[$476>>0]|0;
        $494 = $493&255;
        $495 = (_get_bits($f,$494)|0);
        $496 = $495&65535;
        $497 = HEAP32[$483>>2]|0;
        $498 = ((((($425) + (($i$3142*1596)|0)|0)) + 338|0) + ($497<<1)|0);
        HEAP16[$498>>1] = $496;
        $499 = HEAP32[$483>>2]|0;
        $500 = (($499) + 1)|0;
        HEAP32[$483>>2] = $500;
        $501 = (($k$2123) + 1)|0;
        $502 = HEAP8[$490>>0]|0;
        $503 = $502&255;
        $504 = ($501|0)<($503|0);
        if ($504) {
         $k$2123 = $501;
        } else {
         break;
        }
       }
      }
      $505 = (($j$9127) + 1)|0;
      $506 = HEAP8[$428>>0]|0;
      $507 = $506&255;
      $508 = ($505|0)<($507|0);
      if ($508) {
       $j$9127 = $505;
      } else {
       break;
      }
     }
     $$pr214 = HEAP32[$483>>2]|0;
     $486 = ($$pr214|0)>(0);
     if ($486) {
      $j$10130 = 0;
      label = 169;
     } else {
      $$lcssa38 = $$pr214;
     }
    }
    if ((label|0) == 169) {
     while(1) {
      label = 0;
      $509 = ((((($425) + (($i$3142*1596)|0)|0)) + 338|0) + ($j$10130<<1)|0);
      $510 = HEAP16[$509>>1]|0;
      $511 = (($p) + ($j$10130<<2)|0);
      HEAP16[$511>>1] = $510;
      $512 = $j$10130&65535;
      $513 = (((($p) + ($j$10130<<2)|0)) + 2|0);
      HEAP16[$513>>1] = $512;
      $514 = (($j$10130) + 1)|0;
      $515 = HEAP32[$483>>2]|0;
      $516 = ($514|0)<($515|0);
      if ($516) {
       $j$10130 = $514;
       label = 169;
      } else {
       $$lcssa38 = $515;
       break;
      }
     }
    }
    _qsort($p,$$lcssa38,4,3);
    $517 = HEAP32[$483>>2]|0;
    $518 = ($517|0)>(0);
    do {
     if ($518) {
      $j$11134 = 0;
      while(1) {
       $520 = (((($p) + ($j$11134<<2)|0)) + 2|0);
       $521 = HEAP16[$520>>1]|0;
       $522 = $521&255;
       $523 = ((((($425) + (($i$3142*1596)|0)|0)) + 838|0) + ($j$11134)|0);
       HEAP8[$523>>0] = $522;
       $524 = (($j$11134) + 1)|0;
       $525 = HEAP32[$483>>2]|0;
       $526 = ($524|0)<($525|0);
       if ($526) {
        $j$11134 = $524;
       } else {
        $$lcssa268 = $525;
        break;
       }
      }
      $519 = ($$lcssa268|0)>(2);
      if ($519) {
       $j$12137 = 2;
      } else {
       $$lcssa39 = $$lcssa268;
       break;
      }
      while(1) {
       _neighbors($477,$j$12137,$low,$hi);
       $527 = HEAP32[$low>>2]|0;
       $528 = $527&255;
       $529 = ((((($425) + (($i$3142*1596)|0)|0)) + 1088|0) + ($j$12137<<1)|0);
       HEAP8[$529>>0] = $528;
       $530 = HEAP32[$hi>>2]|0;
       $531 = $530&255;
       $532 = ((((((($425) + (($i$3142*1596)|0)|0)) + 1088|0) + ($j$12137<<1)|0)) + 1|0);
       HEAP8[$532>>0] = $531;
       $533 = (($j$12137) + 1)|0;
       $534 = HEAP32[$483>>2]|0;
       $535 = ($533|0)<($534|0);
       if ($535) {
        $j$12137 = $533;
       } else {
        $$lcssa39 = $534;
        break;
       }
      }
     } else {
      $$lcssa39 = $517;
     }
    } while(0);
    $536 = ($$lcssa39|0)>($longest_floorlist$0141|0);
    $$longest_floorlist$0 = $536 ? $$lcssa39 : $longest_floorlist$0141;
    $537 = (($i$3142) + 1)|0;
    $538 = HEAP32[$384>>2]|0;
    $539 = ($537|0)<($538|0);
    if ($539) {
     $i$3142 = $537;$longest_floorlist$0141 = $$longest_floorlist$0;
    } else {
     $$longest_floorlist$0$lcssa = $$longest_floorlist$0;
     label = 176;
     break;
    }
   }
   if ((label|0) == 148) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 150) {
    $396 = HEAP32[$387>>2]|0;
    $397 = (_get_bits($f,8)|0);
    $398 = $397&255;
    $399 = (($396) + (($i$3142$lcssa270*1596)|0)|0);
    HEAP8[$399>>0] = $398;
    $400 = (_get_bits($f,16)|0);
    $401 = $400&65535;
    $402 = (((($396) + (($i$3142$lcssa270*1596)|0)|0)) + 2|0);
    HEAP16[$402>>1] = $401;
    $403 = (_get_bits($f,16)|0);
    $404 = $403&65535;
    $405 = (((($396) + (($i$3142$lcssa270*1596)|0)|0)) + 4|0);
    HEAP16[$405>>1] = $404;
    $406 = (_get_bits($f,6)|0);
    $407 = $406&255;
    $408 = (((($396) + (($i$3142$lcssa270*1596)|0)|0)) + 6|0);
    HEAP8[$408>>0] = $407;
    $409 = (_get_bits($f,8)|0);
    $410 = $409&255;
    $411 = (((($396) + (($i$3142$lcssa270*1596)|0)|0)) + 7|0);
    HEAP8[$411>>0] = $410;
    $412 = (_get_bits($f,4)|0);
    $413 = (($412) + 1)|0;
    $414 = $413&255;
    $415 = (((($396) + (($i$3142$lcssa270*1596)|0)|0)) + 8|0);
    HEAP8[$415>>0] = $414;
    $416 = $413 & 255;
    $417 = ($416|0)==(0);
    if (!($417)) {
     $j$659 = 0;
     while(1) {
      $418 = (_get_bits($f,8)|0);
      $419 = $418&255;
      $$sum = (($j$659) + 8)|0;
      $420 = ((((($396) + (($i$3142$lcssa270*1596)|0)|0)) + 1|0) + ($$sum)|0);
      HEAP8[$420>>0] = $419;
      $421 = (($j$659) + 1)|0;
      $422 = HEAP8[$415>>0]|0;
      $423 = $422&255;
      $424 = ($421|0)<($423|0);
      if ($424) {
       $j$659 = $421;
      } else {
       break;
      }
     }
    }
    _error($f,4);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 159) {
    _error($f,20);
   }
   else if ((label|0) == 162) {
    _error($f,20);
   }
   else if ((label|0) == 176) {
    $phitmp196 = $$longest_floorlist$0$lcssa << 1;
    $longest_floorlist$0$lcssa = $phitmp196;
    break;
   }
   $$4 = 0;
   STACKTOP = sp;return ($$4|0);
  } else {
   $longest_floorlist$0$lcssa = 0;
  }
 } while(0);
 $540 = (_get_bits($f,6)|0);
 $541 = (($540) + 1)|0;
 $542 = ((($f)) + 280|0);
 HEAP32[$542>>2] = $541;
 $543 = ($541*24)|0;
 $544 = (_setup_malloc($f,$543)|0);
 $545 = ((($f)) + 412|0);
 HEAP32[$545>>2] = $544;
 $546 = HEAP32[$542>>2]|0;
 $547 = ($546|0)>(0);
 L303: do {
  if ($547) {
   $i$4107 = 0;
   L305: while(1) {
    $548 = HEAP32[$545>>2]|0;
    $549 = (_get_bits($f,16)|0);
    $550 = $549&65535;
    $551 = (((($f)) + 284|0) + ($i$4107<<1)|0);
    HEAP16[$551>>1] = $550;
    $552 = $549 & 65535;
    $553 = ($552>>>0)>(2);
    if ($553) {
     label = 180;
     break;
    }
    $554 = (_get_bits($f,24)|0);
    $555 = (($548) + (($i$4107*24)|0)|0);
    HEAP32[$555>>2] = $554;
    $556 = (_get_bits($f,24)|0);
    $557 = (((($548) + (($i$4107*24)|0)|0)) + 4|0);
    HEAP32[$557>>2] = $556;
    $558 = (_get_bits($f,24)|0);
    $559 = (($558) + 1)|0;
    $560 = (((($548) + (($i$4107*24)|0)|0)) + 8|0);
    HEAP32[$560>>2] = $559;
    $561 = (_get_bits($f,6)|0);
    $562 = (($561) + 1)|0;
    $563 = $562&255;
    $564 = (((($548) + (($i$4107*24)|0)|0)) + 12|0);
    HEAP8[$564>>0] = $563;
    $565 = (_get_bits($f,8)|0);
    $566 = $565&255;
    $567 = (((($548) + (($i$4107*24)|0)|0)) + 13|0);
    HEAP8[$567>>0] = $566;
    $568 = HEAP8[$564>>0]|0;
    $569 = $568&255;
    $570 = ($568<<24>>24)==(0);
    if ($570) {
     $$lcssa = $569;
    } else {
     $j$1389 = 0;
     while(1) {
      $571 = (_get_bits($f,3)|0);
      $572 = (_get_bits($f,1)|0);
      $573 = ($572|0)==(0);
      if ($573) {
       $high_bits$0 = 0;
      } else {
       $574 = (_get_bits($f,5)|0);
       $high_bits$0 = $574;
      }
      $575 = $high_bits$0 << 3;
      $576 = (($575) + ($571))|0;
      $577 = $576&255;
      $578 = (($p) + ($j$1389)|0);
      HEAP8[$578>>0] = $577;
      $579 = (($j$1389) + 1)|0;
      $580 = HEAP8[$564>>0]|0;
      $581 = $580&255;
      $582 = ($579|0)<($581|0);
      if ($582) {
       $j$1389 = $579;
      } else {
       $$lcssa = $581;
       break;
      }
     }
    }
    $583 = $$lcssa << 4;
    $584 = (_setup_malloc($f,$583)|0);
    $585 = (((($548) + (($i$4107*24)|0)|0)) + 20|0);
    HEAP32[$585>>2] = $584;
    $586 = HEAP8[$564>>0]|0;
    $587 = ($586<<24>>24)==(0);
    if (!($587)) {
     $j$1495 = 0;
     while(1) {
      $588 = (($p) + ($j$1495)|0);
      $589 = HEAP8[$588>>0]|0;
      $590 = $589&255;
      $k$394 = 0;
      while(1) {
       $591 = 1 << $k$394;
       $592 = $590 & $591;
       $593 = ($592|0)==(0);
       if ($593) {
        $604 = HEAP32[$585>>2]|0;
        $605 = ((($604) + ($j$1495<<4)|0) + ($k$394<<1)|0);
        HEAP16[$605>>1] = -1;
       } else {
        $594 = (_get_bits($f,8)|0);
        $595 = $594&65535;
        $596 = HEAP32[$585>>2]|0;
        $597 = ((($596) + ($j$1495<<4)|0) + ($k$394<<1)|0);
        HEAP16[$597>>1] = $595;
        $598 = HEAP32[$585>>2]|0;
        $599 = ((($598) + ($j$1495<<4)|0) + ($k$394<<1)|0);
        $600 = HEAP16[$599>>1]|0;
        $601 = $600 << 16 >> 16;
        $602 = HEAP32[$86>>2]|0;
        $603 = ($601|0)<($602|0);
        if (!($603)) {
         label = 189;
         break L305;
        }
       }
       $606 = (($k$394) + 1)|0;
       $607 = ($606|0)<(8);
       if ($607) {
        $k$394 = $606;
       } else {
        break;
       }
      }
      $608 = (($j$1495) + 1)|0;
      $609 = HEAP8[$564>>0]|0;
      $610 = $609&255;
      $611 = ($608|0)<($610|0);
      if ($611) {
       $j$1495 = $608;
      } else {
       break;
      }
     }
    }
    $612 = HEAP8[$567>>0]|0;
    $613 = $612&255;
    $614 = HEAP32[$89>>2]|0;
    $615 = (((($614) + (($613*2096)|0)|0)) + 4|0);
    $616 = HEAP32[$615>>2]|0;
    $617 = $616 << 2;
    $618 = (_setup_malloc($f,$617)|0);
    $619 = (((($548) + (($i$4107*24)|0)|0)) + 16|0);
    HEAP32[$619>>2] = $618;
    $620 = ($618|0)==(0|0);
    if ($620) {
     label = 194;
     break;
    }
    $621 = HEAP8[$567>>0]|0;
    $622 = $621&255;
    $623 = HEAP32[$89>>2]|0;
    $624 = (((($623) + (($622*2096)|0)|0)) + 4|0);
    $625 = HEAP32[$624>>2]|0;
    $626 = $625 << 2;
    _memset(($618|0),0,($626|0))|0;
    $627 = HEAP8[$567>>0]|0;
    $628 = $627&255;
    $629 = HEAP32[$89>>2]|0;
    $630 = (((($629) + (($628*2096)|0)|0)) + 4|0);
    $631 = HEAP32[$630>>2]|0;
    $632 = ($631|0)>(0);
    if ($632) {
     $634 = $629;$635 = $628;$j$15103 = 0;
     while(1) {
      $633 = (($634) + (($635*2096)|0)|0);
      $636 = HEAP32[$633>>2]|0;
      $637 = (_setup_malloc($f,$636)|0);
      $638 = HEAP32[$619>>2]|0;
      $639 = (($638) + ($j$15103<<2)|0);
      HEAP32[$639>>2] = $637;
      $640 = ($636|0)>(0);
      if ($640) {
       $k$499$in = $636;$temp$098 = $j$15103;
       while(1) {
        $k$499 = (($k$499$in) + -1)|0;
        $641 = HEAP8[$564>>0]|0;
        $642 = $641&255;
        $643 = (($temp$098|0) % ($642|0))&-1;
        $644 = $643&255;
        $645 = HEAP32[$619>>2]|0;
        $646 = (($645) + ($j$15103<<2)|0);
        $647 = HEAP32[$646>>2]|0;
        $648 = (($647) + ($k$499)|0);
        HEAP8[$648>>0] = $644;
        $649 = HEAP8[$564>>0]|0;
        $650 = $649&255;
        $651 = (($temp$098|0) / ($650|0))&-1;
        $652 = ($k$499$in|0)>(1);
        if ($652) {
         $k$499$in = $k$499;$temp$098 = $651;
        } else {
         break;
        }
       }
      }
      $653 = (($j$15103) + 1)|0;
      $654 = HEAP8[$567>>0]|0;
      $655 = $654&255;
      $656 = HEAP32[$89>>2]|0;
      $657 = (((($656) + (($655*2096)|0)|0)) + 4|0);
      $658 = HEAP32[$657>>2]|0;
      $659 = ($653|0)<($658|0);
      if ($659) {
       $634 = $656;$635 = $655;$j$15103 = $653;
      } else {
       break;
      }
     }
    }
    $660 = (($i$4107) + 1)|0;
    $661 = HEAP32[$542>>2]|0;
    $662 = ($660|0)<($661|0);
    if ($662) {
     $i$4107 = $660;
    } else {
     break L303;
    }
   }
   if ((label|0) == 180) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 189) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 194) {
    _error($f,3);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
  }
 } while(0);
 $663 = (_get_bits($f,6)|0);
 $664 = (($663) + 1)|0;
 $665 = ((($f)) + 416|0);
 HEAP32[$665>>2] = $664;
 $666 = ($664*40)|0;
 $667 = (_setup_malloc($f,$666)|0);
 $668 = ((($f)) + 420|0);
 HEAP32[$668>>2] = $667;
 $669 = HEAP32[$665>>2]|0;
 $670 = ($669|0)>(0);
 L343: do {
  if ($670) {
   $i$584 = 0;
   L344: while(1) {
    $671 = HEAP32[$668>>2]|0;
    $672 = (($671) + (($i$584*40)|0)|0);
    $673 = (_get_bits($f,16)|0);
    $674 = ($673|0)==(0);
    if (!($674)) {
     label = 202;
     break;
    }
    $675 = HEAP32[$27>>2]|0;
    $676 = ($675*3)|0;
    $677 = (_setup_malloc($f,$676)|0);
    $678 = (((($671) + (($i$584*40)|0)|0)) + 4|0);
    HEAP32[$678>>2] = $677;
    $679 = (_get_bits($f,1)|0);
    $680 = ($679|0)==(0);
    if ($680) {
     $685 = (((($671) + (($i$584*40)|0)|0)) + 8|0);
     HEAP8[$685>>0] = 1;
    } else {
     $681 = (_get_bits($f,4)|0);
     $682 = (($681) + 1)|0;
     $683 = $682&255;
     $684 = (((($671) + (($i$584*40)|0)|0)) + 8|0);
     HEAP8[$684>>0] = $683;
    }
    $686 = (((($671) + (($i$584*40)|0)|0)) + 8|0);
    $687 = (_get_bits($f,1)|0);
    $688 = ($687|0)==(0);
    do {
     if ($688) {
      HEAP16[$672>>1] = 0;
     } else {
      $689 = (_get_bits($f,8)|0);
      $690 = (($689) + 1)|0;
      $691 = $690&65535;
      HEAP16[$672>>1] = $691;
      $692 = $690 & 65535;
      $693 = ($692|0)==(0);
      if ($693) {
       break;
      } else {
       $k$573 = 0;
      }
      while(1) {
       $698 = HEAP32[$27>>2]|0;
       $699 = (($698) + -1)|0;
       $700 = (_ilog($699)|0);
       $701 = (_get_bits($f,$700)|0);
       $702 = $701&255;
       $703 = HEAP32[$678>>2]|0;
       $704 = (($703) + (($k$573*3)|0)|0);
       HEAP8[$704>>0] = $702;
       $705 = HEAP32[$27>>2]|0;
       $706 = (($705) + -1)|0;
       $707 = (_ilog($706)|0);
       $708 = (_get_bits($f,$707)|0);
       $709 = $708&255;
       $710 = HEAP32[$678>>2]|0;
       $711 = (((($710) + (($k$573*3)|0)|0)) + 1|0);
       HEAP8[$711>>0] = $709;
       $712 = HEAP32[$678>>2]|0;
       $713 = (($712) + (($k$573*3)|0)|0);
       $714 = HEAP8[$713>>0]|0;
       $715 = $714&255;
       $716 = HEAP32[$27>>2]|0;
       $717 = ($715|0)<($716|0);
       if (!($717)) {
        label = 210;
        break L344;
       }
       $718 = (((($712) + (($k$573*3)|0)|0)) + 1|0);
       $719 = HEAP8[$718>>0]|0;
       $720 = $719&255;
       $721 = ($720|0)<($716|0);
       if (!($721)) {
        label = 212;
        break L344;
       }
       $722 = ($714<<24>>24)==($719<<24>>24);
       $696 = (($k$573) + 1)|0;
       if ($722) {
        label = 214;
        break L344;
       }
       $694 = HEAP16[$672>>1]|0;
       $695 = $694&65535;
       $697 = ($696|0)<($695|0);
       if ($697) {
        $k$573 = $696;
       } else {
        break;
       }
      }
     }
    } while(0);
    $723 = (_get_bits($f,2)|0);
    $724 = ($723|0)==(0);
    if (!($724)) {
     label = 217;
     break;
    }
    $725 = HEAP8[$686>>0]|0;
    $726 = ($725&255)>(1);
    $727 = HEAP32[$27>>2]|0;
    $728 = ($727|0)>(0);
    do {
     if ($726) {
      if ($728) {
       $j$1678 = 0;
      } else {
       break;
      }
      while(1) {
       $736 = (_get_bits($f,4)|0);
       $737 = $736&255;
       $738 = HEAP32[$678>>2]|0;
       $739 = (((($738) + (($j$1678*3)|0)|0)) + 2|0);
       HEAP8[$739>>0] = $737;
       $740 = HEAP32[$678>>2]|0;
       $741 = (((($740) + (($j$1678*3)|0)|0)) + 2|0);
       $742 = HEAP8[$741>>0]|0;
       $743 = HEAP8[$686>>0]|0;
       $744 = ($742&255)<($743&255);
       $732 = (($j$1678) + 1)|0;
       if (!($744)) {
        label = 225;
        break L344;
       }
       $731 = HEAP32[$27>>2]|0;
       $733 = ($732|0)<($731|0);
       if ($733) {
        $j$1678 = $732;
       } else {
        break;
       }
      }
     } else {
      if (!($728)) {
       break;
      }
      $729 = HEAP32[$678>>2]|0;
      $730 = HEAP32[$27>>2]|0;
      $j$1776 = 0;
      while(1) {
       $745 = (((($729) + (($j$1776*3)|0)|0)) + 2|0);
       HEAP8[$745>>0] = 0;
       $746 = (($j$1776) + 1)|0;
       $747 = ($746|0)<($730|0);
       if ($747) {
        $j$1776 = $746;
       } else {
        break;
       }
      }
     }
    } while(0);
    $734 = HEAP8[$686>>0]|0;
    $735 = ($734<<24>>24)==(0);
    if (!($735)) {
     $j$1880 = 0;
     while(1) {
      (_get_bits($f,8)|0);
      $752 = (_get_bits($f,8)|0);
      $753 = $752&255;
      $754 = ((((($671) + (($i$584*40)|0)|0)) + 9|0) + ($j$1880)|0);
      HEAP8[$754>>0] = $753;
      $755 = (_get_bits($f,8)|0);
      $756 = $755&255;
      $757 = ((((($671) + (($i$584*40)|0)|0)) + 24|0) + ($j$1880)|0);
      HEAP8[$757>>0] = $756;
      $758 = HEAP8[$754>>0]|0;
      $759 = $758&255;
      $760 = HEAP32[$384>>2]|0;
      $761 = ($759|0)<($760|0);
      if (!($761)) {
       label = 229;
       break L344;
      }
      $762 = $755 & 255;
      $763 = HEAP32[$542>>2]|0;
      $764 = ($762|0)<($763|0);
      $750 = (($j$1880) + 1)|0;
      if (!($764)) {
       label = 231;
       break L344;
      }
      $748 = HEAP8[$686>>0]|0;
      $749 = $748&255;
      $751 = ($750|0)<($749|0);
      if ($751) {
       $j$1880 = $750;
      } else {
       break;
      }
     }
    }
    $765 = (($i$584) + 1)|0;
    $766 = HEAP32[$665>>2]|0;
    $767 = ($765|0)<($766|0);
    if ($767) {
     $i$584 = $765;
    } else {
     break L343;
    }
   }
   if ((label|0) == 202) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 210) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 212) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 214) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 217) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 225) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 229) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 231) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
  }
 } while(0);
 $768 = (_get_bits($f,6)|0);
 $769 = (($768) + 1)|0;
 $770 = ((($f)) + 424|0);
 HEAP32[$770>>2] = $769;
 $771 = ($769|0)>(0);
 L395: do {
  if ($771) {
   $i$669 = 0;
   while(1) {
    $775 = (_get_bits($f,1)|0);
    $776 = $775&255;
    $777 = (((($f)) + 428|0) + (($i$669*6)|0)|0);
    HEAP8[$777>>0] = $776;
    $778 = (_get_bits($f,16)|0);
    $779 = $778&65535;
    $780 = (((((($f)) + 428|0) + (($i$669*6)|0)|0)) + 2|0);
    HEAP16[$780>>1] = $779;
    $781 = (_get_bits($f,16)|0);
    $782 = $781&65535;
    $783 = (((((($f)) + 428|0) + (($i$669*6)|0)|0)) + 4|0);
    HEAP16[$783>>1] = $782;
    $784 = (_get_bits($f,8)|0);
    $785 = $784&255;
    $786 = (((((($f)) + 428|0) + (($i$669*6)|0)|0)) + 1|0);
    HEAP8[$786>>0] = $785;
    $787 = HEAP16[$780>>1]|0;
    $788 = ($787<<16>>16)==(0);
    if (!($788)) {
     label = 236;
     break;
    }
    $789 = HEAP16[$783>>1]|0;
    $790 = ($789<<16>>16)==(0);
    if (!($790)) {
     label = 238;
     break;
    }
    $791 = $784 & 255;
    $792 = HEAP32[$665>>2]|0;
    $793 = ($791|0)<($792|0);
    $773 = (($i$669) + 1)|0;
    if (!($793)) {
     label = 240;
     break;
    }
    $772 = HEAP32[$770>>2]|0;
    $774 = ($773|0)<($772|0);
    if ($774) {
     $i$669 = $773;
    } else {
     break L395;
    }
   }
   if ((label|0) == 236) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 238) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 240) {
    _error($f,20);
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
  }
 } while(0);
 _flush_packet($f);
 $794 = ((($f)) + 1008|0);
 HEAP32[$794>>2] = 0;
 $795 = HEAP32[$27>>2]|0;
 $796 = ($795|0)>(0);
 if ($796) {
  $i$765 = 0;
  while(1) {
   $797 = HEAP32[$39>>2]|0;
   $798 = $797 << 2;
   $799 = (_setup_malloc($f,$798)|0);
   $800 = (((($f)) + 816|0) + ($i$765<<2)|0);
   HEAP32[$800>>2] = $799;
   $801 = HEAP32[$39>>2]|0;
   $802 = $801 << 1;
   $803 = $802 & 2147483646;
   $804 = (_setup_malloc($f,$803)|0);
   $805 = (((($f)) + 944|0) + ($i$765<<2)|0);
   HEAP32[$805>>2] = $804;
   $806 = (_setup_malloc($f,$longest_floorlist$0$lcssa)|0);
   $807 = (((($f)) + 1012|0) + ($i$765<<2)|0);
   HEAP32[$807>>2] = $806;
   $808 = (($i$765) + 1)|0;
   $809 = HEAP32[$27>>2]|0;
   $810 = ($808|0)<($809|0);
   if ($810) {
    $i$765 = $808;
   } else {
    break;
   }
  }
 }
 $811 = HEAP32[$37>>2]|0;
 $812 = (_init_blocksize($f,0,$811)|0);
 $813 = ($812|0)==(0);
 if ($813) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $814 = HEAP32[$39>>2]|0;
 $815 = (_init_blocksize($f,1,$814)|0);
 $816 = ($815|0)==(0);
 if ($816) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $817 = HEAP32[$37>>2]|0;
 $818 = ((($f)) + 120|0);
 HEAP32[$818>>2] = $817;
 $819 = HEAP32[$39>>2]|0;
 $820 = ((($f)) + 124|0);
 HEAP32[$820>>2] = $819;
 $821 = HEAP32[$39>>2]|0;
 $822 = $821 << 1;
 $823 = $822 & 2147483646;
 $824 = HEAP32[$542>>2]|0;
 $825 = ($824|0)>(0);
 if ($825) {
  $826 = HEAP32[$545>>2]|0;
  $827 = HEAP32[$542>>2]|0;
  $i7$060 = 0;$max_part_read$061 = 0;
  while(1) {
   $828 = (((($826) + (($i7$060*24)|0)|0)) + 4|0);
   $829 = HEAP32[$828>>2]|0;
   $830 = (($826) + (($i7$060*24)|0)|0);
   $831 = HEAP32[$830>>2]|0;
   $832 = (($829) - ($831))|0;
   $833 = (((($826) + (($i7$060*24)|0)|0)) + 8|0);
   $834 = HEAP32[$833>>2]|0;
   $835 = (($832>>>0) / ($834>>>0))&-1;
   $836 = ($835|0)>($max_part_read$061|0);
   $$max_part_read$0 = $836 ? $835 : $max_part_read$061;
   $837 = (($i7$060) + 1)|0;
   $838 = ($837|0)<($827|0);
   if ($838) {
    $i7$060 = $837;$max_part_read$061 = $$max_part_read$0;
   } else {
    $$max_part_read$0$lcssa = $$max_part_read$0;
    break;
   }
  }
  $phitmp = $$max_part_read$0$lcssa << 2;
  $phitmp195 = (($phitmp) + 4)|0;
  $max_part_read$0$lcssa = $phitmp195;
 } else {
  $max_part_read$0$lcssa = 4;
 }
 $839 = HEAP32[$27>>2]|0;
 $840 = Math_imul($839, $max_part_read$0$lcssa)|0;
 $841 = ((($f)) + 12|0);
 $842 = ($823>>>0)>($840>>>0);
 $$10 = $842 ? $823 : $840;
 HEAP32[$841>>2] = $$10;
 $843 = ((($f)) + 1393|0);
 HEAP8[$843>>0] = 1;
 $844 = ((($f)) + 96|0);
 $845 = HEAP32[$844>>2]|0;
 $846 = ($845|0)==(0|0);
 do {
  if (!($846)) {
   $847 = ((($f)) + 108|0);
   $848 = HEAP32[$847>>2]|0;
   $849 = ((($f)) + 100|0);
   $850 = HEAP32[$849>>2]|0;
   $851 = ($848|0)==($850|0);
   if (!($851)) {
    ___assert_fail((21888|0),(20576|0),3734,(21944|0));
    // unreachable;
   }
   $852 = ((($f)) + 104|0);
   $853 = HEAP32[$852>>2]|0;
   $854 = (($853) + 1528)|0;
   $855 = HEAP32[$841>>2]|0;
   $856 = (($854) + ($855))|0;
   $857 = ($856>>>0)>($848>>>0);
   if (!($857)) {
    break;
   }
   _error($f,3);
   $$4 = 0;
   STACKTOP = sp;return ($$4|0);
  }
 } while(0);
 $858 = (_stb_vorbis_get_file_offset($f)|0);
 $859 = ((($f)) + 52|0);
 HEAP32[$859>>2] = $858;
 $$4 = 1;
 STACKTOP = sp;return ($$4|0);
}
function _vorbis_alloc($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_setup_malloc($f,1528)|0);
 return ($0|0);
}
function _set_file_offset($f,$loc) {
 $f = $f|0;
 $loc = $loc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  return;
 }
 $3 = ((($f)) + 112|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($f)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($f)) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($loc)|0);
  $10 = ((($f)) + 40|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9>>>0)>=($11>>>0);
  $13 = ($loc|0)<(0);
  $or$cond1 = $13 | $12;
  if ($or$cond1) {
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$4>>2] = $14;
   HEAP32[$3>>2] = 1;
   return;
  } else {
   HEAP32[$4>>2] = $9;
   return;
  }
 }
 $15 = ((($f)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($loc))|0;
 $18 = ($17>>>0)<($loc>>>0);
 $19 = ($loc|0)<(0);
 $or$cond = $19 | $18;
 if ($or$cond) {
  HEAP32[$3>>2] = 1;
  $$0 = 2147483647;
 } else {
  $$0 = $17;
 }
 $20 = ((($f)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_fseek(($21|0),($$0|0),0)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  return;
 }
 HEAP32[$3>>2] = 1;
 $24 = HEAP32[$20>>2]|0;
 $25 = HEAP32[$15>>2]|0;
 (_fseek(($24|0),($25|0),2)|0);
 return;
}
function _vorbis_pump_first_frame($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $left = 0, $len = 0, $right = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $len = sp + 8|0;
 $right = sp;
 $left = sp + 4|0;
 $0 = (_vorbis_decode_packet($f,$len,$left,$right)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[$len>>2]|0;
 $3 = HEAP32[$left>>2]|0;
 $4 = HEAP32[$right>>2]|0;
 (_vorbis_finish_frame($f,$2,$3,$4)|0);
 STACKTOP = sp;return;
}
function _vorbis_find_page($f,$end,$last) {
 $f = $f|0;
 $end = $end|0;
 $last = $last|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lcssa58 = 0, $$lcssa59 = 0, $$lcssa61 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $crc$011 = 0, $crc$113 = 0, $crc$2$lcssa = 0, $crc$219 = 0, $exitcond = 0, $exitcond40 = 0, $header = 0, $i$0$lcssa = 0, $i1$310 = 0, $i1$412 = 0;
 var $i1$518 = 0, $len$014 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $header = sp;
 $0 = ((($f)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($f)) + 44|0);
 $4 = ((($header)) + 4|0);
 $5 = ((($header)) + 22|0);
 $6 = ((($header)) + 23|0);
 $7 = ((($header)) + 24|0);
 $8 = ((($header)) + 25|0);
 $9 = ((($header)) + 26|0);
 $scevgep = ((($header)) + 22|0);
 $10 = ((($header)) + 4|0);
 $11 = ((($header)) + 5|0);
 $12 = ((($header)) + 6|0);
 $13 = ((($header)) + 7|0);
 $14 = ((($header)) + 8|0);
 $15 = ((($header)) + 9|0);
 $16 = ((($header)) + 10|0);
 $17 = ((($header)) + 11|0);
 $18 = ((($header)) + 12|0);
 $19 = ((($header)) + 13|0);
 $20 = ((($header)) + 14|0);
 $21 = ((($header)) + 15|0);
 $22 = ((($header)) + 16|0);
 $23 = ((($header)) + 17|0);
 $24 = ((($header)) + 18|0);
 $25 = ((($header)) + 19|0);
 $26 = ((($header)) + 20|0);
 $27 = ((($header)) + 21|0);
 $28 = ((($header)) + 22|0);
 $29 = ((($header)) + 23|0);
 $30 = ((($header)) + 24|0);
 $31 = ((($header)) + 25|0);
 $32 = ((($header)) + 26|0);
 while(1) {
  $33 = (_get8($f)|0);
  $34 = ($33<<24>>24)==(79);
  if ($34) {
   $35 = (_stb_vorbis_get_file_offset($f)|0);
   $36 = (($35) + -25)|0;
   $37 = HEAP32[$3>>2]|0;
   $38 = ($36>>>0)>($37>>>0);
   if ($38) {
    $$0 = 0;
    label = 29;
    break;
   }
   $39 = (_get8($f)|0);
   $40 = HEAP8[(20681)>>0]|0;
   $41 = ($39<<24>>24)==($40<<24>>24);
   if ($41) {
    $42 = (_get8($f)|0);
    $43 = HEAP8[(20682)>>0]|0;
    $44 = ($42<<24>>24)==($43<<24>>24);
    if ($44) {
     $121 = (_get8($f)|0);
     $122 = HEAP8[(20683)>>0]|0;
     $123 = ($121<<24>>24)==($122<<24>>24);
     $$ = $123 ? 4 : 3;
     $i$0$lcssa = $$;
    } else {
     $i$0$lcssa = 2;
    }
   } else {
    $i$0$lcssa = 1;
   }
   $45 = HEAP32[$0>>2]|0;
   $46 = ($45|0)==(0);
   if (!($46)) {
    $$0 = 0;
    label = 29;
    break;
   }
   $47 = ($i$0$lcssa|0)==(4);
   if ($47) {
    $48 = HEAP32[20680>>2]|0;
    HEAP32[$header>>2] = $48;
    $49 = (_get8($f)|0);
    HEAP8[$10>>0] = $49;
    $50 = (_get8($f)|0);
    HEAP8[$11>>0] = $50;
    $51 = (_get8($f)|0);
    HEAP8[$12>>0] = $51;
    $52 = (_get8($f)|0);
    HEAP8[$13>>0] = $52;
    $53 = (_get8($f)|0);
    HEAP8[$14>>0] = $53;
    $54 = (_get8($f)|0);
    HEAP8[$15>>0] = $54;
    $55 = (_get8($f)|0);
    HEAP8[$16>>0] = $55;
    $56 = (_get8($f)|0);
    HEAP8[$17>>0] = $56;
    $57 = (_get8($f)|0);
    HEAP8[$18>>0] = $57;
    $58 = (_get8($f)|0);
    HEAP8[$19>>0] = $58;
    $59 = (_get8($f)|0);
    HEAP8[$20>>0] = $59;
    $60 = (_get8($f)|0);
    HEAP8[$21>>0] = $60;
    $61 = (_get8($f)|0);
    HEAP8[$22>>0] = $61;
    $62 = (_get8($f)|0);
    HEAP8[$23>>0] = $62;
    $63 = (_get8($f)|0);
    HEAP8[$24>>0] = $63;
    $64 = (_get8($f)|0);
    HEAP8[$25>>0] = $64;
    $65 = (_get8($f)|0);
    HEAP8[$26>>0] = $65;
    $66 = (_get8($f)|0);
    HEAP8[$27>>0] = $66;
    $67 = (_get8($f)|0);
    HEAP8[$28>>0] = $67;
    $68 = (_get8($f)|0);
    HEAP8[$29>>0] = $68;
    $69 = (_get8($f)|0);
    HEAP8[$30>>0] = $69;
    $70 = (_get8($f)|0);
    HEAP8[$31>>0] = $70;
    $71 = (_get8($f)|0);
    HEAP8[$32>>0] = $71;
    $72 = HEAP32[$0>>2]|0;
    $73 = ($72|0)==(0);
    if (!($73)) {
     $$0 = 0;
     label = 29;
     break;
    }
    $74 = HEAP8[$4>>0]|0;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     $76 = HEAP8[$5>>0]|0;
     $77 = HEAP8[$6>>0]|0;
     $78 = HEAP8[$7>>0]|0;
     $79 = HEAP8[$8>>0]|0;
     $80 = $79&255;
     $81 = $80 << 24;
     HEAP16[$scevgep>>1]=0&65535;HEAP16[$scevgep+2>>1]=0>>>16;
     $82 = $78&255;
     $83 = $82 << 16;
     $84 = $77&255;
     $85 = $84 << 8;
     $86 = $76&255;
     $87 = $85 | $86;
     $88 = $87 | $83;
     $crc$011 = 0;$i1$310 = 0;
     while(1) {
      $94 = (($header) + ($i1$310)|0);
      $95 = HEAP8[$94>>0]|0;
      $96 = (_crc32_update($crc$011,$95)|0);
      $97 = (($i1$310) + 1)|0;
      $exitcond = ($97|0)==(27);
      if ($exitcond) {
       $$lcssa = $96;
       break;
      } else {
       $crc$011 = $96;$i1$310 = $97;
      }
     }
     $89 = $88 | $81;
     $90 = HEAP8[$9>>0]|0;
     $91 = ($90<<24>>24)==(0);
     if ($91) {
      $crc$2$lcssa = $$lcssa;
     } else {
      $92 = HEAP8[$9>>0]|0;
      $93 = $92&255;
      $crc$113 = $$lcssa;$i1$412 = 0;$len$014 = 0;
      while(1) {
       $98 = (_get8($f)|0);
       $99 = $98&255;
       $100 = (_crc32_update($crc$113,$98)|0);
       $101 = (($99) + ($len$014))|0;
       $102 = (($i1$412) + 1)|0;
       $103 = ($102>>>0)<($93>>>0);
       if ($103) {
        $crc$113 = $100;$i1$412 = $102;$len$014 = $101;
       } else {
        $$lcssa58 = $100;$$lcssa59 = $101;
        break;
       }
      }
      $104 = ($$lcssa59|0)==(0);
      if ($104) {
       $crc$2$lcssa = $$lcssa58;
      } else {
       $105 = HEAP32[$0>>2]|0;
       $106 = ($105|0)==(0);
       if ($106) {
        $crc$219 = $$lcssa58;$i1$518 = 0;
       } else {
        $$0 = 0;
        label = 29;
        break;
       }
       while(1) {
        $107 = (_get8($f)|0);
        $108 = (_crc32_update($crc$219,$107)|0);
        $109 = (($i1$518) + 1)|0;
        $exitcond40 = ($109|0)==($$lcssa59|0);
        if ($exitcond40) {
         $crc$2$lcssa = $108;
         break;
        } else {
         $crc$219 = $108;$i1$518 = $109;
        }
       }
      }
     }
     $110 = ($crc$2$lcssa|0)==($89|0);
     if ($110) {
      $$lcssa61 = $35;
      label = 20;
      break;
     }
    }
   }
   _set_file_offset($f,$35);
  }
  $119 = HEAP32[$0>>2]|0;
  $120 = ($119|0)==(0);
  if (!($120)) {
   $$0 = 0;
   label = 29;
   break;
  }
 }
 if ((label|0) == 20) {
  $111 = ($end|0)==(0|0);
  if (!($111)) {
   $112 = (_stb_vorbis_get_file_offset($f)|0);
   HEAP32[$end>>2] = $112;
  }
  $113 = ($last|0)==(0|0);
  do {
   if (!($113)) {
    $114 = ((($header)) + 5|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115 & 4;
    $117 = ($116<<24>>24)==(0);
    if ($117) {
     HEAP32[$last>>2] = 0;
     break;
    } else {
     HEAP32[$last>>2] = 1;
     break;
    }
   }
  } while(0);
  $118 = (($$lcssa61) + -1)|0;
  _set_file_offset($f,$118);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 29) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _getn($z,$data,$n) {
 $z = $z|0;
 $data = $data|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $10 = ((($z)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_fread(($data|0),($n|0),1,($11|0))|0);
  $13 = ($12|0)==(1);
  if ($13) {
   $$0 = 1;
   return ($$0|0);
  }
  $14 = ((($z)) + 112|0);
  HEAP32[$14>>2] = 1;
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (($1) + ($n)|0);
 $4 = ((($z)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)>($5>>>0);
 if ($6) {
  $7 = ((($z)) + 112|0);
  HEAP32[$7>>2] = 1;
  $$0 = 0;
  return ($$0|0);
 } else {
  _memcpy(($data|0),($1|0),($n|0))|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + ($n)|0);
  HEAP32[$0>>2] = $9;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _get32($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_get8($f)|0);
 $1 = $0&255;
 $2 = (_get8($f)|0);
 $3 = $2&255;
 $4 = $3 << 8;
 $5 = $4 | $1;
 $6 = (_get8($f)|0);
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $5 | $8;
 $10 = (_get8($f)|0);
 $11 = $10&255;
 $12 = $11 << 24;
 $13 = $9 | $12;
 return ($13|0);
}
function _convert_channels_short_interleaved($buf_c,$buffer,$data_c,$data,$d_offset,$len) {
 $buf_c = $buf_c|0;
 $buffer = $buffer|0;
 $data_c = $data_c|0;
 $data = $data|0;
 $d_offset = $d_offset|0;
 $len = $len|0;
 var $$017 = 0, $$1$lcssa = 0, $$19 = 0, $$2$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond20 = 0, $exitcond25 = 0, $i$07 = 0, $i$1$lcssa = 0, $i$18 = 0, $j$016 = 0;
 var $or$cond = 0, $or$cond3 = 0, $scevgep = 0, $scevgep21$sum = 0, $scevgep22 = 0, $v$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($buf_c|0)!=($data_c|0);
 $1 = ($buf_c|0)<(3);
 $or$cond = $1 & $0;
 $2 = ($data_c|0)<(7);
 $or$cond3 = $2 & $or$cond;
 if ($or$cond3) {
  $3 = ($buf_c|0)==(2);
  if ($3) {
   $i$07 = 0;
  } else {
   ___assert_fail((20560|0),(20576|0),4816,(20592|0));
   // unreachable;
  }
  while(1) {
   _compute_stereo_samples($buffer,$data_c,$data,$d_offset,$len);
   $4 = (($i$07) + 1)|0;
   $exitcond = ($4|0)==($buf_c|0);
   if ($exitcond) {
    break;
   } else {
    $i$07 = $4;
   }
  }
  return;
 }
 $5 = ($len|0)>(0);
 if (!($5)) {
  return;
 }
 $6 = ($buf_c|0)<($data_c|0);
 $7 = $6 ? $buf_c : $data_c;
 $8 = ($7|0)>(0);
 $9 = ($data_c|0)<($buf_c|0);
 $10 = $9 ? $data_c : $buf_c;
 $$017 = $buffer;$j$016 = 0;
 while(1) {
  if ($8) {
   $11 = (($j$016) + ($d_offset))|0;
   $$19 = $$017;$i$18 = 0;
   while(1) {
    $13 = (($data) + ($i$18<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + ($11<<2)|0);
    $16 = +HEAPF32[$15>>2];
    $17 = $16 + 384.0;
    $18 = (HEAPF32[tempDoublePtr>>2]=$17,HEAP32[tempDoublePtr>>2]|0);
    $19 = (($18) + -1136623616)|0;
    $20 = ($19>>>0)>(65535);
    $21 = ($18|0)<(1136656384);
    $22 = $21 ? 32768 : 32767;
    $v$0 = $20 ? $22 : $18;
    $23 = $v$0&65535;
    $24 = ((($$19)) + 2|0);
    HEAP16[$$19>>1] = $23;
    $25 = (($i$18) + 1)|0;
    $exitcond20 = ($25|0)==($10|0);
    if ($exitcond20) {
     break;
    } else {
     $$19 = $24;$i$18 = $25;
    }
   }
   $scevgep = (($$017) + ($10<<1)|0);
   $$1$lcssa = $scevgep;$i$1$lcssa = $10;
  } else {
   $$1$lcssa = $$017;$i$1$lcssa = 0;
  }
  $12 = ($i$1$lcssa|0)<($buf_c|0);
  if ($12) {
   $26 = (($buf_c) - ($i$1$lcssa))|0;
   $27 = $26 << 1;
   _memset(($$1$lcssa|0),0,($27|0))|0;
   $scevgep21$sum = (($buf_c) - ($i$1$lcssa))|0;
   $scevgep22 = (($$1$lcssa) + ($scevgep21$sum<<1)|0);
   $$2$lcssa = $scevgep22;
  } else {
   $$2$lcssa = $$1$lcssa;
  }
  $28 = (($j$016) + 1)|0;
  $exitcond25 = ($28|0)==($len|0);
  if ($exitcond25) {
   break;
  } else {
   $$017 = $$2$lcssa;$j$016 = $28;
  }
 }
 return;
}
function _rect_height_compare($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ((($b)) + 6|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($1&65535)>($3&65535);
 if ($4) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = ($1&65535)<($3&65535);
 if ($5) {
  $$0 = 1;
  return ($$0|0);
 }
 $6 = ((($a)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ((($b)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($7&65535)>($9&65535);
 $11 = ($7&65535)<($9&65535);
 $12 = $11&1;
 $13 = $10 ? -1 : $12;
 $$0 = $13;
 return ($$0|0);
}
function _stbrp__skyline_pack_rectangle($agg$result,$context,$width,$height) {
 $agg$result = $agg$result|0;
 $context = $context|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur$0$lcssa = 0, $cur$0$ph = 0, $cur$01 = 0, $cur$01$phi = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $res = sp;
 _stbrp__skyline_find_best_pos($res,$context,$width,$height);
 $0 = ((($res)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($res)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + ($height))|0;
  $6 = ((($context)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)>($7|0);
  if (!($8)) {
   $9 = ((($context)) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    $12 = HEAP32[$res>>2]|0;
    $13 = $12&65535;
    HEAP16[$10>>1] = $13;
    $14 = HEAP32[$3>>2]|0;
    $15 = (($14) + ($height))|0;
    $16 = $15&65535;
    $17 = ((($10)) + 2|0);
    HEAP16[$17>>1] = $16;
    $18 = ((($10)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    HEAP32[$9>>2] = $19;
    $20 = HEAP32[$0>>2]|0;
    $21 = HEAP32[$20>>2]|0;
    $22 = HEAP16[$21>>1]|0;
    $23 = $22&65535;
    $24 = HEAP32[$res>>2]|0;
    $25 = ($23|0)<($24|0);
    if ($25) {
     $26 = ((($21)) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     HEAP32[$26>>2] = $10;
     $cur$0$ph = $27;
    } else {
     HEAP32[$20>>2] = $10;
     $cur$0$ph = $21;
    }
    $28 = ((($cur$0$ph)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(0|0);
    L9: do {
     if ($30) {
      $cur$0$lcssa = $cur$0$ph;
     } else {
      $31 = HEAP32[$res>>2]|0;
      $32 = (($31) + ($width))|0;
      $34 = $29;$38 = $28;$cur$01 = $cur$0$ph;
      while(1) {
       $33 = HEAP16[$34>>1]|0;
       $35 = $33&65535;
       $36 = ($35|0)>($32|0);
       if ($36) {
        $cur$0$lcssa = $cur$01;
        break L9;
       }
       $37 = HEAP32[$9>>2]|0;
       HEAP32[$38>>2] = $37;
       HEAP32[$9>>2] = $cur$01;
       $39 = ((($34)) + 4|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(0|0);
       if ($41) {
        $cur$0$lcssa = $34;
        break;
       } else {
        $cur$01$phi = $34;$34 = $40;$38 = $39;$cur$01 = $cur$01$phi;
       }
      }
     }
    } while(0);
    HEAP32[$18>>2] = $cur$0$lcssa;
    $42 = HEAP16[$cur$0$lcssa>>1]|0;
    $43 = $42&65535;
    $44 = HEAP32[$res>>2]|0;
    $45 = (($44) + ($width))|0;
    $46 = ($43|0)<($45|0);
    if ($46) {
     $47 = $45&65535;
     HEAP16[$cur$0$lcssa>>1] = $47;
    }
    ;HEAP32[$agg$result>>2]=HEAP32[$res>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$res+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$res+8>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 HEAP32[$0>>2] = 0;
 ;HEAP32[$agg$result>>2]=HEAP32[$res>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$res+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$res+8>>2]|0;
 STACKTOP = sp;return;
}
function _rect_original_order($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 $5 = ($1|0)>($3|0);
 $6 = $5&1;
 $7 = $4 ? -1 : $6;
 return ($7|0);
}
function _stbtt__isfont($font) {
 $font = $font|0;
 var $$0 = 0, $$pr = 0, $$pr2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$font>>0]|0;
 $1 = ($0<<24>>24)==(49);
 if ($1) {
  $2 = ((($font)) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   $5 = ((($font)) + 2|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $8 = ((($font)) + 3|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $$0 = 1;
     return ($$0|0);
    }
   }
  }
  $$pr = HEAP8[$font>>0]|0;
  $11 = $$pr;
 } else {
  $11 = $0;
 }
 $12 = ($11<<24>>24)==(116);
 if ($12) {
  $13 = ((($font)) + 1|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(121);
  if ($15) {
   $16 = ((($font)) + 2|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(112);
   if ($18) {
    $19 = ((($font)) + 3|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(49);
    if ($21) {
     $$0 = 1;
     return ($$0|0);
    }
   }
  }
 }
 $22 = HEAP8[$font>>0]|0;
 $23 = ($22<<24>>24)==(79);
 if ($23) {
  $24 = ((($font)) + 1|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = ($25<<24>>24)==(84);
  if ($26) {
   $27 = ((($font)) + 2|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = ($28<<24>>24)==(84);
   if ($29) {
    $30 = ((($font)) + 3|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = ($31<<24>>24)==(79);
    if ($32) {
     $$0 = 1;
     return ($$0|0);
    }
   }
  }
  $$pr2 = HEAP8[$font>>0]|0;
  $33 = $$pr2;
 } else {
  $33 = $22;
 }
 $34 = ($33<<24>>24)==(0);
 if ($34) {
  $35 = ((($font)) + 1|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = ($36<<24>>24)==(1);
  if ($37) {
   $38 = ((($font)) + 2|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $41 = ((($font)) + 3|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = ($42<<24>>24)==(0);
    if ($43) {
     $$0 = 1;
     return ($$0|0);
    }
   }
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function _ttULONG($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = $0&255;
 $2 = $1 << 24;
 $3 = ((($p)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 16;
 $7 = $6 | $2;
 $8 = ((($p)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 8;
 $12 = $7 | $11;
 $13 = ((($p)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 return ($16|0);
}
function _ttLONG($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = $0&255;
 $2 = $1 << 24;
 $3 = ((($p)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 16;
 $7 = $6 | $2;
 $8 = ((($p)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 8;
 $12 = $7 | $11;
 $13 = ((($p)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 return ($16|0);
}
function _stbtt__find_table($data,$fontstart,$tag) {
 $data = $data|0;
 $fontstart = $fontstart|0;
 $tag = $tag|0;
 var $$0 = 0, $$lcssa = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sum = (($fontstart) + 4)|0;
 $0 = (($data) + ($$sum)|0);
 $1 = (_ttUSHORT($0)|0);
 $2 = $1&65535;
 $3 = (($fontstart) + 12)|0;
 $4 = ($1<<16>>16)==(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP8[$tag>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = ((($tag)) + 1|0);
 $8 = ((($tag)) + 2|0);
 $9 = ((($tag)) + 3|0);
 $i$05 = 0;
 while(1) {
  $10 = $i$05 << 4;
  $11 = (($3) + ($10))|0;
  $12 = (($data) + ($11)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==($6|0);
  if ($15) {
   $$sum1 = (($11) + 1)|0;
   $16 = (($data) + ($$sum1)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = HEAP8[$7>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($18|0)==($20|0);
   if ($21) {
    $$sum2 = (($11) + 2)|0;
    $22 = (($data) + ($$sum2)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = HEAP8[$8>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($24|0)==($26|0);
    if ($27) {
     $$sum3 = (($11) + 3)|0;
     $28 = (($data) + ($$sum3)|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29&255;
     $31 = HEAP8[$9>>0]|0;
     $32 = $31 << 24 >> 24;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $$lcssa = $11;
      break;
     }
    }
   }
  }
  $36 = (($i$05) + 1)|0;
  $37 = ($36|0)<($2|0);
  if ($37) {
   $i$05 = $36;
  } else {
   $$0 = 0;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($$0|0);
 }
 $$sum4 = (($$lcssa) + 8)|0;
 $34 = (($data) + ($$sum4)|0);
 $35 = (_ttULONG($34)|0);
 $$0 = $35;
 return ($$0|0);
}
function _ttUSHORT($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = $0&255;
 $2 = $1 << 8;
 $3 = ((($p)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2 | $5;
 $7 = $6&65535;
 return ($7|0);
}
function _ttSHORT($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = $0&255;
 $2 = $1 << 8;
 $3 = ((($p)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2 | $5;
 $7 = $6&65535;
 return ($7|0);
}
function _stbtt__GetGlyfOffset($info,$glyph_index) {
 $info = $info|0;
 $glyph_index = $glyph_index|0;
 var $$0 = 0, $$pn = 0, $$sink = 0, $$sum = 0, $$sum2 = 0, $$sum3 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>($glyph_index|0);
 if (!($2)) {
  $$0 = -1;
  return ($$0|0);
 }
 $3 = ((($info)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(1);
 if ($5) {
  $$0 = -1;
  return ($$0|0);
 }
 $6 = ($4|0)==(0);
 $7 = ((($info)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($info)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($info)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 if ($6) {
  $13 = $glyph_index << 1;
  $$sum3 = (($12) + ($13))|0;
  $14 = (($10) + ($$sum3)|0);
  $15 = (_ttUSHORT($14)|0);
  $16 = $15&65535;
  $17 = $16 << 1;
  $$sum5 = (($$sum3) + 2)|0;
  $18 = (($10) + ($$sum5)|0);
  $19 = (_ttUSHORT($18)|0);
  $20 = $19&65535;
  $21 = $20 << 1;
  $$pn = $17;$$sink = $21;
 } else {
  $22 = $glyph_index << 2;
  $$sum = (($12) + ($22))|0;
  $23 = (($10) + ($$sum)|0);
  $24 = (_ttULONG($23)|0);
  $$sum2 = (($$sum) + 4)|0;
  $25 = (($10) + ($$sum2)|0);
  $26 = (_ttULONG($25)|0);
  $$pn = $24;$$sink = $26;
 }
 $27 = (($$sink) + ($8))|0;
 $g1$0 = (($$pn) + ($8))|0;
 $28 = ($g1$0|0)==($27|0);
 $29 = $28 ? -1 : $g1$0;
 $$0 = $29;
 return ($$0|0);
}
function _stbtt__close_shape($vertices,$num_vertices,$was_off,$start_off,$sx,$sy,$scx,$scy,$cx,$cy) {
 $vertices = $vertices|0;
 $num_vertices = $num_vertices|0;
 $was_off = $was_off|0;
 $start_off = $start_off|0;
 $sx = $sx|0;
 $sy = $sy|0;
 $scx = $scx|0;
 $scy = $scy|0;
 $cx = $cx|0;
 $cy = $cy|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($start_off|0)==(0);
 $1 = ($was_off|0)!=(0);
 if (!($0)) {
  if ($1) {
   $2 = (($num_vertices) + 1)|0;
   $3 = (($vertices) + (($num_vertices*10)|0)|0);
   $4 = (($cx) + ($scx))|0;
   $5 = $4 >> 1;
   $6 = (($cy) + ($scy))|0;
   $7 = $6 >> 1;
   _stbtt_setvertex($3,3,$5,$7,$cx,$cy);
   $$0 = $2;
  } else {
   $$0 = $num_vertices;
  }
  $8 = (($$0) + 1)|0;
  $9 = (($vertices) + (($$0*10)|0)|0);
  _stbtt_setvertex($9,3,$sx,$sy,$scx,$scy);
  $$1 = $8;
  return ($$1|0);
 }
 $10 = (($num_vertices) + 1)|0;
 $11 = (($vertices) + (($num_vertices*10)|0)|0);
 if ($1) {
  _stbtt_setvertex($11,3,$sx,$sy,$cx,$cy);
  $$1 = $10;
  return ($$1|0);
 } else {
  _stbtt_setvertex($11,2,$sx,$sy,0,0);
  $$1 = $10;
  return ($$1|0);
 }
 return (0)|0;
}
function _stbtt_setvertex($v,$type,$x,$y,$cx,$cy) {
 $v = $v|0;
 $type = $type|0;
 $x = $x|0;
 $y = $y|0;
 $cx = $cx|0;
 $cy = $cy|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($v)) + 8|0);
 HEAP8[$0>>0] = $type;
 $1 = $x&65535;
 HEAP16[$v>>1] = $1;
 $2 = $y&65535;
 $3 = ((($v)) + 2|0);
 HEAP16[$3>>1] = $2;
 $4 = $cx&65535;
 $5 = ((($v)) + 4|0);
 HEAP16[$5>>1] = $4;
 $6 = $cy&65535;
 $7 = ((($v)) + 6|0);
 HEAP16[$7>>1] = $6;
 return;
}
function _stbtt_FlattenCurves($vertices,$num_verts,$objspace_flatness,$contour_lengths,$num_contours) {
 $vertices = $vertices|0;
 $num_verts = $num_verts|0;
 $objspace_flatness = +$objspace_flatness;
 $contour_lengths = $contour_lengths|0;
 $num_contours = $num_contours|0;
 var $$0 = 0, $$lcssa = 0, $$n$0 = 0, $$n$0$lcssa = 0, $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond18 = 0, $i$012 = 0, $i$12 = 0, $n$013 = 0, $n$2$lcssa = 0, $n$24 = 0, $n$3 = 0, $num_points = 0, $pass$011 = 0, $points$09 = 0, $points$1 = 0;
 var $start$010 = 0, $start$1$lcssa = 0, $start$15 = 0, $start$2 = 0, $x$06 = 0.0, $x$1 = 0.0, $y$07 = 0.0, $y$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $num_points = sp;
 HEAP32[$num_points>>2] = 0;
 $0 = $objspace_flatness * $objspace_flatness;
 $1 = ($num_verts|0)>(0);
 if ($1) {
  $i$012 = 0;$n$013 = 0;
 } else {
  HEAP32[$num_contours>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $2 = (((($vertices) + (($i$012*10)|0)|0)) + 8|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(1);
  $5 = $4&1;
  $$n$0 = (($5) + ($n$013))|0;
  $6 = (($i$012) + 1)|0;
  $exitcond18 = ($6|0)==($num_verts|0);
  if ($exitcond18) {
   $$n$0$lcssa = $$n$0;
   break;
  } else {
   $i$012 = $6;$n$013 = $$n$0;
  }
 }
 HEAP32[$num_contours>>2] = $$n$0$lcssa;
 $7 = ($$n$0$lcssa|0)==(0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = $$n$0$lcssa << 2;
 $9 = (_malloc($8)|0);
 HEAP32[$contour_lengths>>2] = $9;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$num_contours>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($num_verts|0)>(0);
 $pass$011 = 0;$points$09 = 0;$start$010 = 0;
 while(1) {
  $12 = ($pass$011|0)==(1);
  if ($12) {
   $13 = HEAP32[$num_points>>2]|0;
   $14 = $13 << 3;
   $15 = (_malloc($14)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    $$lcssa = $15;
    break;
   } else {
    $points$1 = $15;
   }
  } else {
   $points$1 = $points$09;
  }
  HEAP32[$num_points>>2] = 0;
  if ($11) {
   $i$12 = 0;$n$24 = -1;$start$15 = $start$010;$x$06 = 0.0;$y$07 = 0.0;
   while(1) {
    $17 = (($vertices) + (($i$12*10)|0)|0);
    $18 = (((($vertices) + (($i$12*10)|0)|0)) + 8|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    if ((($20|0) == 1)) {
     $21 = ($n$24|0)>(-1);
     if ($21) {
      $22 = HEAP32[$num_points>>2]|0;
      $23 = (($22) - ($start$15))|0;
      $24 = HEAP32[$contour_lengths>>2]|0;
      $25 = (($24) + ($n$24<<2)|0);
      HEAP32[$25>>2] = $23;
     }
     $26 = (($n$24) + 1)|0;
     $27 = HEAP32[$num_points>>2]|0;
     $28 = HEAP16[$17>>1]|0;
     $29 = (+($28<<16>>16));
     $30 = (((($vertices) + (($i$12*10)|0)|0)) + 2|0);
     $31 = HEAP16[$30>>1]|0;
     $32 = (+($31<<16>>16));
     $33 = (($27) + 1)|0;
     HEAP32[$num_points>>2] = $33;
     _stbtt__add_point($points$1,$27,$29,$32);
     $n$3 = $26;$start$2 = $27;$x$1 = $29;$y$1 = $32;
    } else if ((($20|0) == 3)) {
     $41 = (((($vertices) + (($i$12*10)|0)|0)) + 4|0);
     $42 = HEAP16[$41>>1]|0;
     $43 = (+($42<<16>>16));
     $44 = (((($vertices) + (($i$12*10)|0)|0)) + 6|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = (+($45<<16>>16));
     $47 = HEAP16[$17>>1]|0;
     $48 = (+($47<<16>>16));
     $49 = (((($vertices) + (($i$12*10)|0)|0)) + 2|0);
     $50 = HEAP16[$49>>1]|0;
     $51 = (+($50<<16>>16));
     _stbtt__tesselate_curve($points$1,$num_points,$x$06,$y$07,$43,$46,$48,$51,$0,0);
     $52 = HEAP16[$17>>1]|0;
     $53 = (+($52<<16>>16));
     $54 = HEAP16[$49>>1]|0;
     $55 = (+($54<<16>>16));
     $n$3 = $n$24;$start$2 = $start$15;$x$1 = $53;$y$1 = $55;
    } else if ((($20|0) == 2)) {
     $34 = HEAP16[$17>>1]|0;
     $35 = (+($34<<16>>16));
     $36 = (((($vertices) + (($i$12*10)|0)|0)) + 2|0);
     $37 = HEAP16[$36>>1]|0;
     $38 = (+($37<<16>>16));
     $39 = HEAP32[$num_points>>2]|0;
     $40 = (($39) + 1)|0;
     HEAP32[$num_points>>2] = $40;
     _stbtt__add_point($points$1,$39,$35,$38);
     $n$3 = $n$24;$start$2 = $start$15;$x$1 = $35;$y$1 = $38;
    } else {
     $n$3 = $n$24;$start$2 = $start$15;$x$1 = $x$06;$y$1 = $y$07;
    }
    $56 = (($i$12) + 1)|0;
    $exitcond = ($56|0)==($num_verts|0);
    if ($exitcond) {
     $n$2$lcssa = $n$3;$start$1$lcssa = $start$2;
     break;
    } else {
     $i$12 = $56;$n$24 = $n$3;$start$15 = $start$2;$x$06 = $x$1;$y$07 = $y$1;
    }
   }
  } else {
   $n$2$lcssa = -1;$start$1$lcssa = $start$010;
  }
  $57 = HEAP32[$num_points>>2]|0;
  $58 = (($57) - ($start$1$lcssa))|0;
  $59 = HEAP32[$contour_lengths>>2]|0;
  $60 = (($59) + ($n$2$lcssa<<2)|0);
  HEAP32[$60>>2] = $58;
  $61 = (($pass$011) + 1)|0;
  $62 = ($61|0)<(2);
  if ($62) {
   $pass$011 = $61;$points$09 = $points$1;$start$010 = $start$1$lcssa;
  } else {
   $$0 = $points$1;
   label = 20;
   break;
  }
 }
 if ((label|0) == 20) {
  STACKTOP = sp;return ($$0|0);
 }
 _free($$lcssa);
 $63 = HEAP32[$contour_lengths>>2]|0;
 _free($63);
 HEAP32[$contour_lengths>>2] = 0;
 HEAP32[$num_contours>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stbtt__rasterize($result,$pts,$wcount,$windings,$scale_x,$scale_y,$shift_x,$shift_y,$off_x,$off_y,$invert) {
 $result = $result|0;
 $pts = $pts|0;
 $wcount = $wcount|0;
 $windings = $windings|0;
 $scale_x = +$scale_x;
 $scale_y = +$scale_y;
 $shift_x = +$shift_x;
 $shift_y = +$shift_y;
 $off_x = $off_x|0;
 $off_y = $off_y|0;
 $invert = $invert|0;
 var $$lcssa = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $a$0 = 0, $b$0 = 0, $exitcond = 0, $exitcond20 = 0, $i$013 = 0, $i$18 = 0, $j$04 = 0, $j$04$phi = 0, $k$05 = 0, $m$07 = 0, $n$0$lcssa = 0, $n$014 = 0, $n$1$lcssa = 0, $n$19 = 0, $n$2$lcssa = 0, $n$26 = 0, $n$3 = 0;
 var $phitmp = 0, $phitmp19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($invert|0)!=(0);
 $1 = -$scale_y;
 $2 = $0 ? $1 : $scale_y;
 $3 = ((($result)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(8);
 $6 = $5 ? 15 : 5;
 $7 = ($windings|0)>(0);
 if ($7) {
  $i$013 = 0;$n$014 = 0;
  while(1) {
   $8 = (($wcount) + ($i$013<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + ($n$014))|0;
   $11 = (($i$013) + 1)|0;
   $exitcond20 = ($11|0)==($windings|0);
   if ($exitcond20) {
    $$lcssa = $10;
    break;
   } else {
    $i$013 = $11;$n$014 = $10;
   }
  }
  $phitmp = ($$lcssa*20)|0;
  $phitmp19 = (($phitmp) + 20)|0;
  $n$0$lcssa = $phitmp19;
 } else {
  $n$0$lcssa = 20;
 }
 $12 = (_malloc($n$0$lcssa)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  return;
 }
 $14 = ($windings|0)>(0);
 if ($14) {
  $15 = (+($6|0));
  $i$18 = 0;$m$07 = 0;$n$19 = 0;
  while(1) {
   $16 = (($wcount) + ($i$18<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + ($m$07))|0;
   $19 = ($17|0)>(0);
   if ($19) {
    $20 = (($17) + -1)|0;
    $21 = HEAP32[$16>>2]|0;
    $j$04 = $20;$k$05 = 0;$n$26 = $n$19;
    while(1) {
     $$sum = (($j$04) + ($m$07))|0;
     $22 = (((($pts) + ($$sum<<3)|0)) + 4|0);
     $23 = +HEAPF32[$22>>2];
     $$sum1 = (($k$05) + ($m$07))|0;
     $24 = (((($pts) + ($$sum1<<3)|0)) + 4|0);
     $25 = +HEAPF32[$24>>2];
     $26 = $23 == $25;
     if ($26) {
      $n$3 = $n$26;
     } else {
      $27 = (((($12) + (($n$26*20)|0)|0)) + 16|0);
      HEAP32[$27>>2] = 0;
      $28 = +HEAPF32[$22>>2];
      $29 = +HEAPF32[$24>>2];
      if ($0) {
       $30 = $28 > $29;
       if ($30) {
        label = 13;
       } else {
        $a$0 = $k$05;$b$0 = $j$04;
       }
      } else {
       $31 = $28 < $29;
       if ($31) {
        label = 13;
       } else {
        $a$0 = $k$05;$b$0 = $j$04;
       }
      }
      if ((label|0) == 13) {
       label = 0;
       HEAP32[$27>>2] = 1;
       $a$0 = $j$04;$b$0 = $k$05;
      }
      $$sum2 = (($a$0) + ($m$07))|0;
      $32 = (($pts) + ($$sum2<<3)|0);
      $33 = +HEAPF32[$32>>2];
      $34 = $33 * $scale_x;
      $35 = $34 + $shift_x;
      $36 = (($12) + (($n$26*20)|0)|0);
      HEAPF32[$36>>2] = $35;
      $37 = (((($pts) + ($$sum2<<3)|0)) + 4|0);
      $38 = +HEAPF32[$37>>2];
      $39 = $2 * $38;
      $40 = $39 + $shift_y;
      $41 = $15 * $40;
      $42 = (((($12) + (($n$26*20)|0)|0)) + 4|0);
      HEAPF32[$42>>2] = $41;
      $$sum3 = (($b$0) + ($m$07))|0;
      $43 = (($pts) + ($$sum3<<3)|0);
      $44 = +HEAPF32[$43>>2];
      $45 = $44 * $scale_x;
      $46 = $45 + $shift_x;
      $47 = (((($12) + (($n$26*20)|0)|0)) + 8|0);
      HEAPF32[$47>>2] = $46;
      $48 = (((($pts) + ($$sum3<<3)|0)) + 4|0);
      $49 = +HEAPF32[$48>>2];
      $50 = $2 * $49;
      $51 = $50 + $shift_y;
      $52 = $15 * $51;
      $53 = (((($12) + (($n$26*20)|0)|0)) + 12|0);
      HEAPF32[$53>>2] = $52;
      $54 = (($n$26) + 1)|0;
      $n$3 = $54;
     }
     $55 = (($k$05) + 1)|0;
     $56 = ($55|0)<($21|0);
     if ($56) {
      $j$04$phi = $k$05;$k$05 = $55;$n$26 = $n$3;$j$04 = $j$04$phi;
     } else {
      $n$2$lcssa = $n$3;
      break;
     }
    }
   } else {
    $n$2$lcssa = $n$19;
   }
   $57 = (($i$18) + 1)|0;
   $exitcond = ($57|0)==($windings|0);
   if ($exitcond) {
    $n$1$lcssa = $n$2$lcssa;
    break;
   } else {
    $i$18 = $57;$m$07 = $18;$n$19 = $n$2$lcssa;
   }
  }
 } else {
  $n$1$lcssa = 0;
 }
 _qsort($12,$n$1$lcssa,20,4);
 _stbtt__rasterize_sorted_edges($result,$12,$n$1$lcssa,$6,$off_x,$off_y);
 _free($12);
 return;
}
function _stbtt__oversample_shift($oversample) {
 $oversample = $oversample|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oversample|0)==(0);
 if ($0) {
  $$0 = 0.0;
  return (+$$0);
 }
 $1 = (1 - ($oversample))|0;
 $2 = (+($1|0));
 $3 = (+($oversample|0));
 $4 = $3 * 2.0;
 $5 = $2 / $4;
 $$0 = $5;
 return (+$$0);
}
function _stbtt__h_prefilter($pixels,$w,$h,$stride_in_bytes,$kernel_width) {
 $pixels = $pixels|0;
 $w = $w|0;
 $h = $h|0;
 $stride_in_bytes = $stride_in_bytes|0;
 $kernel_width = $kernel_width|0;
 var $$029 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $buffer = 0, $exitcond = 0, $exitcond45 = 0, $exitcond46 = 0, $exitcond47 = 0, $i$016 = 0, $i$111 = 0, $i$28 = 0, $i$321 = 0, $i$4$ph = 0, $i$426 = 0, $j$034 = 0, $total$017 = 0, $total$112 = 0, $total$29 = 0;
 var $total$322 = 0, $total$4$ph = 0, $total$427 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buffer = sp;
 $0 = (($w) - ($kernel_width))|0;
 $1 = ($h|0)>(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = ($0|0)<(0);
 $3 = ($0|0)<(0);
 $4 = ($0|0)<(0);
 $5 = ($0|0)<(0);
 $6 = (($w) + 1)|0;
 $7 = (($6) - ($kernel_width))|0;
 $$029 = $pixels;$j$034 = 0;
 L4: while(1) {
  _memset(($buffer|0),0,($kernel_width|0))|0;
  if ((($kernel_width|0) == 2)) {
   if ($3) {
    $i$4$ph = 0;$total$4$ph = 0;
   } else {
    $i$016 = 0;$total$017 = 0;
    while(1) {
     $8 = (($$029) + ($i$016)|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = $9&255;
     $11 = $i$016 & 7;
     $12 = (($buffer) + ($11)|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = $13&255;
     $15 = (($10) - ($14))|0;
     $16 = (($15) + ($total$017))|0;
     $17 = (($i$016) + ($kernel_width))|0;
     $18 = $17 & 7;
     $19 = (($buffer) + ($18)|0);
     HEAP8[$19>>0] = $9;
     $20 = $16 >>> 1;
     $21 = $20&255;
     HEAP8[$8>>0] = $21;
     $22 = (($i$016) + 1)|0;
     $exitcond46 = ($22|0)==($7|0);
     if ($exitcond46) {
      $i$4$ph = $7;$total$4$ph = $16;
      break;
     } else {
      $i$016 = $22;$total$017 = $16;
     }
    }
   }
  } else if ((($kernel_width|0) == 4)) {
   if ($5) {
    $i$4$ph = 0;$total$4$ph = 0;
   } else {
    $i$28 = 0;$total$29 = 0;
    while(1) {
     $38 = (($$029) + ($i$28)|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = $39&255;
     $41 = $i$28 & 7;
     $42 = (($buffer) + ($41)|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43&255;
     $45 = (($40) - ($44))|0;
     $46 = (($45) + ($total$29))|0;
     $47 = (($i$28) + ($kernel_width))|0;
     $48 = $47 & 7;
     $49 = (($buffer) + ($48)|0);
     HEAP8[$49>>0] = $39;
     $50 = $46 >>> 2;
     $51 = $50&255;
     HEAP8[$38>>0] = $51;
     $52 = (($i$28) + 1)|0;
     $exitcond = ($52|0)==($7|0);
     if ($exitcond) {
      $i$4$ph = $7;$total$4$ph = $46;
      break;
     } else {
      $i$28 = $52;$total$29 = $46;
     }
    }
   }
  } else if ((($kernel_width|0) == 3)) {
   if ($4) {
    $i$4$ph = 0;$total$4$ph = 0;
   } else {
    $i$111 = 0;$total$112 = 0;
    while(1) {
     $23 = (($$029) + ($i$111)|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = $24&255;
     $26 = $i$111 & 7;
     $27 = (($buffer) + ($26)|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = $28&255;
     $30 = (($25) - ($29))|0;
     $31 = (($30) + ($total$112))|0;
     $32 = (($i$111) + ($kernel_width))|0;
     $33 = $32 & 7;
     $34 = (($buffer) + ($33)|0);
     HEAP8[$34>>0] = $24;
     $35 = (($31>>>0) / 3)&-1;
     $36 = $35&255;
     HEAP8[$23>>0] = $36;
     $37 = (($i$111) + 1)|0;
     $exitcond45 = ($37|0)==($7|0);
     if ($exitcond45) {
      $i$4$ph = $7;$total$4$ph = $31;
      break;
     } else {
      $i$111 = $37;$total$112 = $31;
     }
    }
   }
  } else {
   if ($2) {
    $i$4$ph = 0;$total$4$ph = 0;
   } else {
    $i$321 = 0;$total$322 = 0;
    while(1) {
     $54 = (($$029) + ($i$321)|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = $55&255;
     $57 = $i$321 & 7;
     $58 = (($buffer) + ($57)|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = (($56) - ($60))|0;
     $62 = (($61) + ($total$322))|0;
     $63 = (($i$321) + ($kernel_width))|0;
     $64 = $63 & 7;
     $65 = (($buffer) + ($64)|0);
     HEAP8[$65>>0] = $55;
     $66 = (($62>>>0) / ($kernel_width>>>0))&-1;
     $67 = $66&255;
     HEAP8[$54>>0] = $67;
     $68 = (($i$321) + 1)|0;
     $exitcond47 = ($68|0)==($7|0);
     if ($exitcond47) {
      $i$4$ph = $7;$total$4$ph = $62;
      break;
     } else {
      $i$321 = $68;$total$322 = $62;
     }
    }
   }
  }
  $53 = ($i$4$ph|0)<($w|0);
  if ($53) {
   $i$426 = $i$4$ph;$total$427 = $total$4$ph;
   while(1) {
    $69 = (($$029) + ($i$426)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = ($70<<24>>24)==(0);
    if (!($71)) {
     label = 14;
     break L4;
    }
    $72 = $i$426 & 7;
    $73 = (($buffer) + ($72)|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = (($total$427) - ($75))|0;
    $77 = (($76>>>0) / ($kernel_width>>>0))&-1;
    $78 = $77&255;
    HEAP8[$69>>0] = $78;
    $79 = (($i$426) + 1)|0;
    $80 = ($79|0)<($w|0);
    if ($80) {
     $i$426 = $79;$total$427 = $76;
    } else {
     break;
    }
   }
  }
  $81 = (($$029) + ($stride_in_bytes)|0);
  $82 = (($j$034) + 1)|0;
  $83 = ($82|0)<($h|0);
  if ($83) {
   $$029 = $81;$j$034 = $82;
  } else {
   label = 17;
   break;
  }
 }
 if ((label|0) == 14) {
  ___assert_fail((20248|0),(15032|0),2248,(20264|0));
  // unreachable;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function _stbtt__v_prefilter($pixels,$w,$h,$stride_in_bytes,$kernel_width) {
 $pixels = $pixels|0;
 $w = $w|0;
 $h = $h|0;
 $stride_in_bytes = $stride_in_bytes|0;
 $kernel_width = $kernel_width|0;
 var $$029 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $buffer = 0, $exitcond = 0, $exitcond45 = 0, $exitcond46 = 0, $exitcond47 = 0, $i$016 = 0, $i$111 = 0, $i$28 = 0, $i$321 = 0, $i$4$ph = 0;
 var $i$426 = 0, $j$034 = 0, $total$017 = 0, $total$112 = 0, $total$29 = 0, $total$322 = 0, $total$4$ph = 0, $total$427 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buffer = sp;
 $0 = (($h) - ($kernel_width))|0;
 $1 = ($w|0)>(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = ($0|0)<(0);
 $3 = ($0|0)<(0);
 $4 = ($0|0)<(0);
 $5 = ($0|0)<(0);
 $6 = (($h) + 1)|0;
 $7 = (($6) - ($kernel_width))|0;
 $$029 = $pixels;$j$034 = 0;
 L4: while(1) {
  _memset(($buffer|0),0,($kernel_width|0))|0;
  if ((($kernel_width|0) == 3)) {
   if ($4) {
    $i$4$ph = 0;$total$4$ph = 0;
   } else {
    $i$111 = 0;$total$112 = 0;
    while(1) {
     $24 = Math_imul($i$111, $stride_in_bytes)|0;
     $25 = (($$029) + ($24)|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = $i$111 & 7;
     $29 = (($buffer) + ($28)|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $32 = (($27) - ($31))|0;
     $33 = (($32) + ($total$112))|0;
     $34 = (($i$111) + ($kernel_width))|0;
     $35 = $34 & 7;
     $36 = (($buffer) + ($35)|0);
     HEAP8[$36>>0] = $26;
     $37 = (($33>>>0) / 3)&-1;
     $38 = $37&255;
     HEAP8[$25>>0] = $38;
     $39 = (($i$111) + 1)|0;
     $exitcond45 = ($39|0)==($7|0);
     if ($exitcond45) {
      $i$4$ph = $7;$total$4$ph = $33;
      break;
     } else {
      $i$111 = $39;$total$112 = $33;
     }
    }
   }
  } else if ((($kernel_width|0) == 4)) {
   if ($5) {
    $i$4$ph = 0;$total$4$ph = 0;
   } else {
    $i$28 = 0;$total$29 = 0;
    while(1) {
     $40 = Math_imul($i$28, $stride_in_bytes)|0;
     $41 = (($$029) + ($40)|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $42&255;
     $44 = $i$28 & 7;
     $45 = (($buffer) + ($44)|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = (($43) - ($47))|0;
     $49 = (($48) + ($total$29))|0;
     $50 = (($i$28) + ($kernel_width))|0;
     $51 = $50 & 7;
     $52 = (($buffer) + ($51)|0);
     HEAP8[$52>>0] = $42;
     $53 = $49 >>> 2;
     $54 = $53&255;
     HEAP8[$41>>0] = $54;
     $55 = (($i$28) + 1)|0;
     $exitcond = ($55|0)==($7|0);
     if ($exitcond) {
      $i$4$ph = $7;$total$4$ph = $49;
      break;
     } else {
      $i$28 = $55;$total$29 = $49;
     }
    }
   }
  } else if ((($kernel_width|0) == 2)) {
   if ($3) {
    $i$4$ph = 0;$total$4$ph = 0;
   } else {
    $i$016 = 0;$total$017 = 0;
    while(1) {
     $8 = Math_imul($i$016, $stride_in_bytes)|0;
     $9 = (($$029) + ($8)|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = $10&255;
     $12 = $i$016 & 7;
     $13 = (($buffer) + ($12)|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = $14&255;
     $16 = (($11) - ($15))|0;
     $17 = (($16) + ($total$017))|0;
     $18 = (($i$016) + ($kernel_width))|0;
     $19 = $18 & 7;
     $20 = (($buffer) + ($19)|0);
     HEAP8[$20>>0] = $10;
     $21 = $17 >>> 1;
     $22 = $21&255;
     HEAP8[$9>>0] = $22;
     $23 = (($i$016) + 1)|0;
     $exitcond46 = ($23|0)==($7|0);
     if ($exitcond46) {
      $i$4$ph = $7;$total$4$ph = $17;
      break;
     } else {
      $i$016 = $23;$total$017 = $17;
     }
    }
   }
  } else {
   if ($2) {
    $i$4$ph = 0;$total$4$ph = 0;
   } else {
    $i$321 = 0;$total$322 = 0;
    while(1) {
     $57 = Math_imul($i$321, $stride_in_bytes)|0;
     $58 = (($$029) + ($57)|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = $i$321 & 7;
     $62 = (($buffer) + ($61)|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = $63&255;
     $65 = (($60) - ($64))|0;
     $66 = (($65) + ($total$322))|0;
     $67 = (($i$321) + ($kernel_width))|0;
     $68 = $67 & 7;
     $69 = (($buffer) + ($68)|0);
     HEAP8[$69>>0] = $59;
     $70 = (($66>>>0) / ($kernel_width>>>0))&-1;
     $71 = $70&255;
     HEAP8[$58>>0] = $71;
     $72 = (($i$321) + 1)|0;
     $exitcond47 = ($72|0)==($7|0);
     if ($exitcond47) {
      $i$4$ph = $7;$total$4$ph = $66;
      break;
     } else {
      $i$321 = $72;$total$322 = $66;
     }
    }
   }
  }
  $56 = ($i$4$ph|0)<($h|0);
  if ($56) {
   $i$426 = $i$4$ph;$total$427 = $total$4$ph;
   while(1) {
    $73 = Math_imul($i$426, $stride_in_bytes)|0;
    $74 = (($$029) + ($73)|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = ($75<<24>>24)==(0);
    if (!($76)) {
     label = 14;
     break L4;
    }
    $77 = $i$426 & 7;
    $78 = (($buffer) + ($77)|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = (($total$427) - ($80))|0;
    $82 = (($81>>>0) / ($kernel_width>>>0))&-1;
    $83 = $82&255;
    HEAP8[$74>>0] = $83;
    $84 = (($i$426) + 1)|0;
    $85 = ($84|0)<($h|0);
    if ($85) {
     $i$426 = $84;$total$427 = $81;
    } else {
     break;
    }
   }
  }
  $86 = ((($$029)) + 1|0);
  $87 = (($j$034) + 1)|0;
  $88 = ($87|0)<($w|0);
  if ($88) {
   $$029 = $86;$j$034 = $87;
  } else {
   label = 17;
   break;
  }
 }
 if ((label|0) == 14) {
  ___assert_fail((20192|0),(15032|0),2302,(20224|0));
  // unreachable;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
}
function _LoadRBMF($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $$lcssa = 0, $$lcssa7 = 0, $$op = 0, $$op$op = 0, $$op$op$op = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $counter$012 = 0, $currentLine$08 = 0, $currentLine$1 = 0, $currentPosX$09 = 0, $currentPosX$1 = 0;
 var $exitcond = 0, $exitcond27 = 0, $exitcond28 = 0, $i$023 = 0, $i1$019 = 0, $i2$016 = 0, $i3$013 = 0, $i4$010 = 0, $image = 0, $image$byval_copy14 = 0, $j$011 = 0, $rbmfCharWidthData$0 = 0, $rbmfFileData$0 = 0, $rbmfHeader = 0, $spriteFont$sroa$0$0 = 0, $spriteFont$sroa$12$0 = 0, $spriteFont$sroa$14$0 = 0, $spriteFont$sroa$4$0 = 0, $spriteFont$sroa$5 = 0, $spriteFont$sroa$55$0 = 0;
 var $spriteFont$sroa$6$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $image$byval_copy14 = sp + 56|0;
 $vararg_buffer11 = sp;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp + 32|0;
 $spriteFont$sroa$5 = sp + 40|0;
 $rbmfHeader = sp + 120|0;
 $image = sp + 76|0;
 $0 = sp + 96|0;
 $1 = (_fopen(($fileName|0),(19952|0))|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$vararg_buffer>>2] = $fileName;
  _TraceLog(2,19960,$vararg_buffer);
  $rbmfCharWidthData$0 = 0;$rbmfFileData$0 = 0;$spriteFont$sroa$0$0 = 0;$spriteFont$sroa$12$0 = 0;$spriteFont$sroa$14$0 = 0;$spriteFont$sroa$4$0 = 0;$spriteFont$sroa$55$0 = 0;$spriteFont$sroa$6$0 = 0;
  (_fclose(($1|0))|0);
  _free($rbmfFileData$0);
  _free($rbmfCharWidthData$0);
  HEAP32[$agg$result>>2] = $spriteFont$sroa$0$0;
  $124 = ((($agg$result)) + 4|0);
  HEAP32[$124>>2] = $spriteFont$sroa$4$0;
  $125 = ((($agg$result)) + 8|0);
  ;HEAP32[$125>>2]=HEAP32[$spriteFont$sroa$5>>2]|0;HEAP32[$125+4>>2]=HEAP32[$spriteFont$sroa$5+4>>2]|0;HEAP32[$125+8>>2]=HEAP32[$spriteFont$sroa$5+8>>2]|0;
  $126 = ((($agg$result)) + 20|0);
  HEAP32[$126>>2] = $spriteFont$sroa$55$0;
  $127 = ((($agg$result)) + 24|0);
  HEAP32[$127>>2] = $spriteFont$sroa$6$0;
  $128 = ((($agg$result)) + 28|0);
  HEAP32[$128>>2] = $spriteFont$sroa$12$0;
  $129 = ((($agg$result)) + 32|0);
  HEAP32[$129>>2] = $spriteFont$sroa$14$0;
  STACKTOP = sp;return;
 }
 (_fread(($rbmfHeader|0),16,1,($1|0))|0);
 $3 = ((($rbmfHeader)) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = ((($rbmfHeader)) + 8|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = ((($rbmfHeader)) + 10|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = ((($rbmfHeader)) + 12|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 HEAP32[$vararg_buffer1>>2] = $fileName;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $5;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $8;
 $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
 HEAP32[$vararg_ptr6>>2] = $11;
 $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
 HEAP32[$vararg_ptr7>>2] = $14;
 _TraceLog(3,20000,$vararg_buffer1);
 $15 = HEAP16[$9>>1]|0;
 $16 = $15 << 16 >> 16;
 $17 = HEAP16[$3>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = HEAP16[$6>>1]|0;
 $20 = $19 << 16 >> 16;
 $21 = Math_imul($20, $18)|0;
 $22 = (($21|0) / 32)&-1;
 $23 = $22 << 2;
 $24 = (_malloc($23)|0);
 $25 = ($21|0)>(31);
 if ($25) {
  $i$023 = 0;
  while(1) {
   $26 = (($24) + ($i$023<<2)|0);
   (_fread(($26|0),4,1,($1|0))|0);
   $27 = (($i$023) + 1)|0;
   $28 = ($27|0)<($22|0);
   if ($28) {
    $i$023 = $27;
   } else {
    break;
   }
  }
 }
 $29 = (_malloc($16)|0);
 $30 = ($15<<16>>16)>(0);
 if ($30) {
  $31 = $15 << 16 >> 16;
  $i1$019 = 0;
  while(1) {
   $32 = (($29) + ($i1$019)|0);
   (_fread(($32|0),1,1,($1|0))|0);
   $33 = (($i1$019) + 1)|0;
   $exitcond28 = ($33|0)==($31|0);
   if ($exitcond28) {
    break;
   } else {
    $i1$019 = $33;
   }
  }
 }
 $34 = HEAP16[$3>>1]|0;
 $35 = $34 << 16 >> 16;
 $36 = HEAP16[$6>>1]|0;
 $37 = $36 << 16 >> 16;
 $38 = $35 << 2;
 $39 = Math_imul($38, $37)|0;
 $40 = (_malloc($39)|0);
 $41 = HEAP16[$3>>1]|0;
 $42 = $41 << 16 >> 16;
 $43 = HEAP16[$6>>1]|0;
 $44 = $43 << 16 >> 16;
 $45 = Math_imul($44, $42)|0;
 $46 = ($45|0)>(0);
 if ($46) {
  $47 = HEAP16[$3>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = HEAP16[$6>>1]|0;
  $50 = $49 << 16 >> 16;
  $51 = Math_imul($50, $48)|0;
  $i2$016 = 0;
  while(1) {
   $65 = (($40) + ($i2$016<<2)|0);
   $66 = (($i2$016) + 1)|0;
   $67 = ($66|0)<($51|0);
   HEAP8[$65>>0]=0&255;HEAP8[$65+1>>0]=(0>>8)&255;HEAP8[$65+2>>0]=(0>>16)&255;HEAP8[$65+3>>0]=0>>24;
   if ($67) {
    $i2$016 = $66;
   } else {
    break;
   }
  }
 }
 $52 = HEAP16[$3>>1]|0;
 $53 = $52 << 16 >> 16;
 $54 = HEAP16[$6>>1]|0;
 $55 = $54 << 16 >> 16;
 $56 = Math_imul($55, $53)|0;
 $57 = ($56|0)>(0);
 if ($57) {
  $58 = HEAP16[$3>>1]|0;
  $59 = HEAP16[$6>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = $58 << 16 >> 16;
  $62 = Math_imul($60, $61)|0;
  $63 = ($62|0)>(32);
  $$op = (($62) + -1)|0;
  $$op$op = $$op >>> 5;
  $$op$op$op = (($$op$op) + 1)|0;
  $64 = $63 ? $$op$op$op : 1;
  $counter$012 = 0;$i3$013 = 0;
  while(1) {
   $68 = (($24) + ($counter$012<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $j$011 = 31;
   while(1) {
    $70 = 1 << $j$011;
    $71 = $69 & $70;
    $72 = ($71|0)==(0);
    if (!($72)) {
     $73 = (($j$011) + ($i3$013))|0;
     $74 = (($40) + ($73<<2)|0);
     HEAP8[$74>>0]=-1&255;HEAP8[$74+1>>0]=(-1>>8)&255;HEAP8[$74+2>>0]=(-1>>16)&255;HEAP8[$74+3>>0]=-1>>24;
    }
    $75 = (($j$011) + -1)|0;
    $76 = ($j$011|0)>(0);
    if ($76) {
     $j$011 = $75;
    } else {
     break;
    }
   }
   $77 = (($counter$012) + 1)|0;
   $78 = (($i3$013) + 32)|0;
   $exitcond27 = ($77|0)==($64|0);
   if ($exitcond27) {
    break;
   } else {
    $counter$012 = $77;$i3$013 = $78;
   }
  }
  $79 = $58 << 16 >> 16;
  $80 = $59 << 16 >> 16;
  $$lcssa = $79;$$lcssa7 = $80;
 } else {
  $$lcssa = $53;$$lcssa7 = $55;
 }
 _LoadImageEx($image,$40,$$lcssa,$$lcssa7);
 _ImageFormat($image,2);
 _free($40);
 HEAP32[$image$byval_copy14>>2] = $fileName;
 _TraceLog(3,20072,$image$byval_copy14);
 ;HEAP32[$image$byval_copy14>>2]=HEAP32[$image>>2]|0;HEAP32[$image$byval_copy14+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy14+8>>2]=HEAP32[$image+8>>2]|0;HEAP32[$image$byval_copy14+12>>2]=HEAP32[$image+12>>2]|0;HEAP32[$image$byval_copy14+16>>2]=HEAP32[$image+16>>2]|0;
 _LoadTextureFromImage($0,$image$byval_copy14);
 $81 = HEAP32[$0>>2]|0;
 $82 = ((($0)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ((($0)) + 8|0);
 ;HEAP32[$spriteFont$sroa$5>>2]=HEAP32[$84>>2]|0;HEAP32[$spriteFont$sroa$5+4>>2]=HEAP32[$84+4>>2]|0;HEAP32[$spriteFont$sroa$5+8>>2]=HEAP32[$84+8>>2]|0;
 ;HEAP32[$image$byval_copy14>>2]=HEAP32[$image>>2]|0;HEAP32[$image$byval_copy14+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy14+8>>2]=HEAP32[$image+8>>2]|0;HEAP32[$image$byval_copy14+12>>2]=HEAP32[$image+12>>2]|0;HEAP32[$image$byval_copy14+16>>2]=HEAP32[$image+16>>2]|0;
 _UnloadImage($image$byval_copy14);
 $85 = $16 << 2;
 $86 = (_malloc($85)|0);
 $87 = $16 << 4;
 $88 = (_malloc($87)|0);
 $89 = ($15<<16>>16)>(0);
 if ($89) {
  $90 = ((($rbmfHeader)) + 5|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91 << 24 >> 24;
  $93 = HEAP16[$12>>1]|0;
  $94 = $93 << 16 >> 16;
  $95 = (($94) + 1)|0;
  $96 = $93 << 16 >> 16;
  $97 = $93 << 16 >> 16;
  $98 = (($97) + 1)|0;
  $99 = $15 << 16 >> 16;
  $currentLine$08 = 0;$currentPosX$09 = 1;$i4$010 = 0;
  while(1) {
   $100 = (($92) + ($i4$010))|0;
   $101 = (($86) + ($i4$010<<2)|0);
   HEAP32[$101>>2] = $100;
   $102 = (($88) + ($i4$010<<4)|0);
   HEAP32[$102>>2] = $currentPosX$09;
   $103 = Math_imul($95, $currentLine$08)|0;
   $104 = (($103) + 1)|0;
   $105 = (((($88) + ($i4$010<<4)|0)) + 4|0);
   HEAP32[$105>>2] = $104;
   $106 = (($29) + ($i4$010)|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&255;
   $109 = (((($88) + ($i4$010<<4)|0)) + 8|0);
   HEAP32[$109>>2] = $108;
   $110 = (((($88) + ($i4$010<<4)|0)) + 12|0);
   HEAP32[$110>>2] = $96;
   $111 = HEAP32[$109>>2]|0;
   $112 = (($currentPosX$09) + 1)|0;
   $113 = (($112) + ($111))|0;
   $114 = ($113|0)>($83|0);
   if ($114) {
    $115 = (($currentLine$08) + 1)|0;
    $116 = HEAP8[$106>>0]|0;
    $117 = $116&255;
    $118 = (($117) + 2)|0;
    HEAP32[$102>>2] = 1;
    $119 = Math_imul($98, $115)|0;
    $120 = (($119) + 1)|0;
    HEAP32[$105>>2] = $120;
    $currentLine$1 = $115;$currentPosX$1 = $118;
   } else {
    $currentLine$1 = $currentLine$08;$currentPosX$1 = $113;
   }
   $121 = (($i4$010) + 1)|0;
   $exitcond = ($121|0)==($99|0);
   if ($exitcond) {
    break;
   } else {
    $currentLine$08 = $currentLine$1;$currentPosX$09 = $currentPosX$1;$i4$010 = $121;
   }
  }
 }
 $122 = ((($88)) + 12|0);
 $123 = HEAP32[$122>>2]|0;
 HEAP32[$vararg_buffer11>>2] = $fileName;
 _TraceLog(0,20144,$vararg_buffer11);
 $rbmfCharWidthData$0 = $29;$rbmfFileData$0 = $24;$spriteFont$sroa$0$0 = $81;$spriteFont$sroa$12$0 = $86;$spriteFont$sroa$14$0 = $88;$spriteFont$sroa$4$0 = $83;$spriteFont$sroa$55$0 = $123;$spriteFont$sroa$6$0 = $16;
 (_fclose(($1|0))|0);
 _free($rbmfFileData$0);
 _free($rbmfCharWidthData$0);
 HEAP32[$agg$result>>2] = $spriteFont$sroa$0$0;
 $124 = ((($agg$result)) + 4|0);
 HEAP32[$124>>2] = $spriteFont$sroa$4$0;
 $125 = ((($agg$result)) + 8|0);
 ;HEAP32[$125>>2]=HEAP32[$spriteFont$sroa$5>>2]|0;HEAP32[$125+4>>2]=HEAP32[$spriteFont$sroa$5+4>>2]|0;HEAP32[$125+8>>2]=HEAP32[$spriteFont$sroa$5+8>>2]|0;
 $126 = ((($agg$result)) + 20|0);
 HEAP32[$126>>2] = $spriteFont$sroa$55$0;
 $127 = ((($agg$result)) + 24|0);
 HEAP32[$127>>2] = $spriteFont$sroa$6$0;
 $128 = ((($agg$result)) + 28|0);
 HEAP32[$128>>2] = $spriteFont$sroa$12$0;
 $129 = ((($agg$result)) + 32|0);
 HEAP32[$129>>2] = $spriteFont$sroa$14$0;
 STACKTOP = sp;return;
}
function _LoadTTF($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chardata = 0, $image = 0, $image$byval_copy = 0, $pc = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3680|0;
 $image$byval_copy = sp + 3648|0;
 $image = sp;
 $chardata = sp + 24|0;
 $pc = sp + 3608|0;
 dest=$agg$result; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($image)) + 4|0);
 HEAP32[$0>>2] = 512;
 $1 = ((($image)) + 8|0);
 HEAP32[$1>>2] = 512;
 $2 = (_malloc(33554432)|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = Math_imul($4, $3)|0;
 $6 = (_malloc($5)|0);
 $7 = (_fopen(($fileName|0),(19952|0))|0);
 (_fread(($2|0),1,33554432,($7|0))|0);
 $8 = HEAP32[$0>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 (_stbtt_PackBegin($pc,$6,$8,$9,0,1,0)|0);
 _stbtt_PackSetOversampling($pc,2,2);
 $10 = ((($chardata)) + 896|0);
 (_stbtt_PackFontRange($pc,$2,0,20.0,32,95,$10)|0);
 _stbtt_PackEnd($pc);
 _free($2);
 _free($6);
 ;HEAP32[$image$byval_copy>>2]=HEAP32[$image>>2]|0;HEAP32[$image$byval_copy+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$image$byval_copy+8>>2]=HEAP32[$image+8>>2]|0;HEAP32[$image$byval_copy+12>>2]=HEAP32[$image+12>>2]|0;HEAP32[$image$byval_copy+16>>2]=HEAP32[$image+16>>2]|0;
 _UnloadImage($image$byval_copy);
 STACKTOP = sp;return;
}
function _ParseImageData($image,$charValues,$charRecs) {
 $image = $image|0;
 $charValues = $charValues|0;
 $charRecs = $charRecs|0;
 var $$byval_copy4 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $charWidth$0 = 0, $charWidth$0$lcssa = 0;
 var $exitcond = 0, $i$06 = 0, $index$0$lcssa = 0, $index$012 = 0, $index$1$lcssa = 0, $index$17 = 0, $j$0 = 0, $j$0$lcssa = 0, $lineToRead$013 = 0, $tempCharRecs = 0, $tempCharValues = 0, $x$1$lcssa = 0, $x$116 = 0, $x$2 = 0, $xPosToRead$18 = 0, $y$0$lcssa = 0, $y$024 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2592|0;
 $$byval_copy4 = sp + 2560|0;
 $tempCharValues = sp;
 $tempCharRecs = sp + 512|0;
 ;HEAP32[$$byval_copy4>>2]=HEAP32[$image>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$image+4>>2]|0;HEAP32[$$byval_copy4+8>>2]=HEAP32[$image+8>>2]|0;HEAP32[$$byval_copy4+12>>2]=HEAP32[$image+12>>2]|0;HEAP32[$$byval_copy4+16>>2]=HEAP32[$image+16>>2]|0;
 $0 = (_GetImageData($$byval_copy4)|0);
 $1 = ((($image)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 L1: do {
  if ($3) {
   $4 = ((($image)) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)>(0);
   $7 = HEAP32[$1>>2]|0;
   $y$024 = 0;
   while(1) {
    L5: do {
     if ($6) {
      $8 = Math_imul($5, $y$024)|0;
      $x$116 = 0;
      while(1) {
       $9 = (($8) + ($x$116))|0;
       $10 = (($0) + ($9<<2)|0);
       ;HEAP8[$$byval_copy4>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$10+3>>0]|0;
       $11 = (_PixelIsMagenta($$byval_copy4)|0);
       $12 = ($11|0)==(0);
       if ($12) {
        $x$1$lcssa = $x$116;
        break L5;
       }
       $13 = (($x$116) + 1)|0;
       $14 = ($13|0)<($5|0);
       if ($14) {
        $x$116 = $13;
       } else {
        $x$1$lcssa = $13;
        break;
       }
      }
     } else {
      $x$1$lcssa = 0;
     }
    } while(0);
    $15 = Math_imul($5, $y$024)|0;
    $16 = (($15) + ($x$1$lcssa))|0;
    $17 = (($0) + ($16<<2)|0);
    ;HEAP8[$$byval_copy4>>0]=HEAP8[$17>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$17+3>>0]|0;
    $18 = (_PixelIsMagenta($$byval_copy4)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     $x$2 = $x$1$lcssa;$y$0$lcssa = $y$024;
     break L1;
    }
    $20 = (($y$024) + 1)|0;
    $21 = ($20|0)<($7|0);
    if ($21) {
     $y$024 = $20;
    } else {
     $x$2 = $x$1$lcssa;$y$0$lcssa = $20;
     break;
    }
   }
  } else {
   $x$2 = 0;$y$0$lcssa = 0;
  }
 } while(0);
 $22 = ((($image)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $j$0 = 0;
 while(1) {
  $24 = (($j$0) + ($y$0$lcssa))|0;
  $25 = Math_imul($24, $23)|0;
  $26 = (($25) + ($x$2))|0;
  $27 = (($0) + ($26<<2)|0);
  ;HEAP8[$$byval_copy4>>0]=HEAP8[$27>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$27+3>>0]|0;
  $28 = (_PixelIsMagenta($$byval_copy4)|0);
  $29 = ($28|0)==(0);
  $30 = (($j$0) + 1)|0;
  if ($29) {
   $j$0 = $30;
  } else {
   $$lcssa = $24;$j$0$lcssa = $j$0;
   break;
  }
 }
 $31 = HEAP32[$1>>2]|0;
 $32 = ($y$0$lcssa|0)<($31|0);
 if ($32) {
  $33 = HEAP32[$22>>2]|0;
  $34 = ($x$2|0)<($33|0);
  $35 = HEAP32[$1>>2]|0;
  $37 = $y$0$lcssa;$index$012 = 0;$lineToRead$013 = 0;
  while(1) {
   L20: do {
    if ($34) {
     $36 = Math_imul($33, $37)|0;
     $38 = Math_imul($33, $37)|0;
     $index$17 = $index$012;$xPosToRead$18 = $x$2;
     while(1) {
      $39 = (($38) + ($xPosToRead$18))|0;
      $40 = (($0) + ($39<<2)|0);
      ;HEAP8[$$byval_copy4>>0]=HEAP8[$40>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$40+3>>0]|0;
      $41 = (_PixelIsMagenta($$byval_copy4)|0);
      $42 = ($41|0)==(0);
      if (!($42)) {
       $index$1$lcssa = $index$17;
       break L20;
      }
      $43 = (($index$17) + 32)|0;
      $44 = (($tempCharValues) + ($index$17<<2)|0);
      HEAP32[$44>>2] = $43;
      $45 = (($tempCharRecs) + ($index$17<<4)|0);
      HEAP32[$45>>2] = $xPosToRead$18;
      $46 = (((($tempCharRecs) + ($index$17<<4)|0)) + 4|0);
      HEAP32[$46>>2] = $37;
      $47 = (((($tempCharRecs) + ($index$17<<4)|0)) + 12|0);
      HEAP32[$47>>2] = $j$0$lcssa;
      $charWidth$0 = 0;
      while(1) {
       $48 = (($charWidth$0) + ($xPosToRead$18))|0;
       $49 = (($48) + ($36))|0;
       $50 = (($0) + ($49<<2)|0);
       ;HEAP8[$$byval_copy4>>0]=HEAP8[$50>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$50+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$50+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$50+3>>0]|0;
       $51 = (_PixelIsMagenta($$byval_copy4)|0);
       $52 = ($51|0)==(0);
       $53 = (($charWidth$0) + 1)|0;
       if ($52) {
        $charWidth$0 = $53;
       } else {
        $charWidth$0$lcssa = $charWidth$0;
        break;
       }
      }
      $54 = (((($tempCharRecs) + ($index$17<<4)|0)) + 8|0);
      HEAP32[$54>>2] = $charWidth$0$lcssa;
      $55 = (($index$17) + 1)|0;
      $56 = (($xPosToRead$18) + ($x$2))|0;
      $57 = (($56) + ($charWidth$0$lcssa))|0;
      $58 = ($57|0)<($33|0);
      if ($58) {
       $index$17 = $55;$xPosToRead$18 = $57;
      } else {
       $index$1$lcssa = $55;
       break;
      }
     }
    } else {
     $index$1$lcssa = $index$012;
    }
   } while(0);
   $59 = (($lineToRead$013) + 1)|0;
   $60 = Math_imul($59, $$lcssa)|0;
   $61 = (($60) + ($y$0$lcssa))|0;
   $62 = ($61|0)<($35|0);
   if ($62) {
    $37 = $61;$index$012 = $index$1$lcssa;$lineToRead$013 = $59;
   } else {
    $index$0$lcssa = $index$1$lcssa;
    break;
   }
  }
 } else {
  $index$0$lcssa = 0;
 }
 _free($0);
 $63 = $index$0$lcssa << 4;
 $64 = (_malloc($63)|0);
 HEAP32[$charRecs>>2] = $64;
 $65 = $index$0$lcssa << 2;
 $66 = (_malloc($65)|0);
 HEAP32[$charValues>>2] = $66;
 $67 = ($index$0$lcssa|0)>(0);
 if ($67) {
  $i$06 = 0;
 } else {
  STACKTOP = sp;return ($index$0$lcssa|0);
 }
 while(1) {
  $68 = (($tempCharValues) + ($i$06<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = HEAP32[$charValues>>2]|0;
  $71 = (($70) + ($i$06<<2)|0);
  HEAP32[$71>>2] = $69;
  $72 = HEAP32[$charRecs>>2]|0;
  $73 = (($72) + ($i$06<<4)|0);
  $74 = (($tempCharRecs) + ($i$06<<4)|0);
  ;HEAP32[$73>>2]=HEAP32[$74>>2]|0;HEAP32[$73+4>>2]=HEAP32[$74+4>>2]|0;HEAP32[$73+8>>2]=HEAP32[$74+8>>2]|0;HEAP32[$73+12>>2]=HEAP32[$74+12>>2]|0;
  $75 = (($i$06) + 1)|0;
  $exitcond = ($75|0)==($index$0$lcssa|0);
  if ($exitcond) {
   break;
  } else {
   $i$06 = $75;
  }
 }
 STACKTOP = sp;return ($index$0$lcssa|0);
}
function _EmptyMusicStream() {
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $buffer = 0, $queued = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $buffer = sp + 4|0;
 $queued = sp;
 HEAP32[$buffer>>2] = 0;
 HEAP32[$queued>>2] = 0;
 $0 = HEAP32[(18684)>>2]|0;
 _alGetSourcei(($0|0),4117,($queued|0));
 $$pr = HEAP32[$queued>>2]|0;
 $1 = ($$pr|0)>(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $2 = HEAP32[(18684)>>2]|0;
  _alSourceUnqueueBuffers(($2|0),1,($buffer|0));
  $3 = HEAP32[$queued>>2]|0;
  $4 = (($3) + -1)|0;
  HEAP32[$queued>>2] = $4;
  $5 = ($3|0)>(1);
  if (!($5)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _LoadWAV($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $riffHeader = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $wave$sroa$0$0 = 0, $wave$sroa$0$1 = 0;
 var $wave$sroa$4$0 = 0, $wave$sroa$4$1 = 0, $wave$sroa$5$0 = 0, $wave$sroa$5$1 = 0, $wave$sroa$7$0 = 0, $wave$sroa$7$1 = 0, $wave$sroa$9$0 = 0, $wave$sroa$9$1 = 0, $waveData = 0, $waveFormat = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $riffHeader = sp + 80|0;
 $waveFormat = sp + 48|0;
 $waveData = sp + 72|0;
 $0 = (_fopen(($fileName|0),(19952|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $fileName;
  _TraceLog(2,19712,$vararg_buffer);
  $wave$sroa$0$1 = 0;$wave$sroa$4$1 = 0;$wave$sroa$5$1 = 0;$wave$sroa$7$1 = 0;$wave$sroa$9$1 = 0;
  HEAP32[$agg$result>>2] = $wave$sroa$0$1;
  $45 = ((($agg$result)) + 4|0);
  HEAP32[$45>>2] = $wave$sroa$4$1;
  $46 = ((($agg$result)) + 8|0);
  HEAP32[$46>>2] = $wave$sroa$5$1;
  $47 = ((($agg$result)) + 12|0);
  HEAP16[$47>>1] = $wave$sroa$7$1;
  $48 = ((($agg$result)) + 14|0);
  HEAP16[$48>>1] = $wave$sroa$9$1;
  STACKTOP = sp;return;
 }
 (_fread(($riffHeader|0),12,1,($0|0))|0);
 $2 = (_strncmp($riffHeader,19752,4)|0);
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $4 = ((($riffHeader)) + 8|0);
   $5 = (_strncmp($4,19760,4)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    (_fread(($waveFormat|0),24,1,($0|0))|0);
    $7 = HEAP8[$waveFormat>>0]|0;
    $8 = ($7<<24>>24)==(102);
    if ($8) {
     $9 = ((($waveFormat)) + 1|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(109);
     if ($11) {
      $12 = ((($waveFormat)) + 2|0);
      $13 = HEAP8[$12>>0]|0;
      $14 = ($13<<24>>24)==(116);
      if ($14) {
       $15 = ((($waveFormat)) + 3|0);
       $16 = HEAP8[$15>>0]|0;
       $17 = ($16<<24>>24)==(32);
       if ($17) {
        $18 = ((($waveFormat)) + 4|0);
        $19 = HEAP32[$18>>2]|0;
        $20 = ($19|0)>(16);
        if ($20) {
         (_fseek(($0|0),2,1)|0);
        }
        (_fread(($waveData|0),8,1,($0|0))|0);
        $21 = HEAP8[$waveData>>0]|0;
        $22 = ($21<<24>>24)==(100);
        if ($22) {
         $23 = ((($waveData)) + 1|0);
         $24 = HEAP8[$23>>0]|0;
         $25 = ($24<<24>>24)==(97);
         if ($25) {
          $26 = ((($waveData)) + 2|0);
          $27 = HEAP8[$26>>0]|0;
          $28 = ($27<<24>>24)==(116);
          if ($28) {
           $29 = ((($waveData)) + 3|0);
           $30 = HEAP8[$29>>0]|0;
           $31 = ($30<<24>>24)==(97);
           if ($31) {
            $32 = ((($waveData)) + 4|0);
            $33 = HEAP32[$32>>2]|0;
            $34 = (_malloc($33)|0);
            $35 = HEAP32[$32>>2]|0;
            (_fread(($34|0),($35|0),1,($0|0))|0);
            $36 = HEAP32[$32>>2]|0;
            $37 = ((($waveFormat)) + 12|0);
            $38 = HEAP32[$37>>2]|0;
            $39 = ((($waveFormat)) + 10|0);
            $40 = HEAP16[$39>>1]|0;
            $41 = ((($waveFormat)) + 22|0);
            $42 = HEAP16[$41>>1]|0;
            $43 = $42 << 16 >> 16;
            $44 = $40 << 16 >> 16;
            HEAP32[$vararg_buffer10>>2] = $fileName;
            $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
            HEAP32[$vararg_ptr13>>2] = $38;
            $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
            HEAP32[$vararg_ptr14>>2] = $43;
            $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
            HEAP32[$vararg_ptr15>>2] = $44;
            _TraceLog(0,19872,$vararg_buffer10);
            $wave$sroa$0$0 = $34;$wave$sroa$4$0 = $36;$wave$sroa$5$0 = $38;$wave$sroa$7$0 = $42;$wave$sroa$9$0 = $40;
            break;
           }
          }
         }
        }
        HEAP32[$vararg_buffer7>>2] = $fileName;
        _TraceLog(2,19840,$vararg_buffer7);
        $wave$sroa$0$0 = 0;$wave$sroa$4$0 = 0;$wave$sroa$5$0 = 0;$wave$sroa$7$0 = 0;$wave$sroa$9$0 = 0;
        break;
       }
      }
     }
    }
    HEAP32[$vararg_buffer4>>2] = $fileName;
    _TraceLog(2,19808,$vararg_buffer4);
    $wave$sroa$0$0 = 0;$wave$sroa$4$0 = 0;$wave$sroa$5$0 = 0;$wave$sroa$7$0 = 0;$wave$sroa$9$0 = 0;
   } else {
    label = 5;
   }
  } else {
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  HEAP32[$vararg_buffer1>>2] = $fileName;
  _TraceLog(2,19768,$vararg_buffer1);
  $wave$sroa$0$0 = 0;$wave$sroa$4$0 = 0;$wave$sroa$5$0 = 0;$wave$sroa$7$0 = 0;$wave$sroa$9$0 = 0;
 }
 (_fclose(($0|0))|0);
 $wave$sroa$0$1 = $wave$sroa$0$0;$wave$sroa$4$1 = $wave$sroa$4$0;$wave$sroa$5$1 = $wave$sroa$5$0;$wave$sroa$7$1 = $wave$sroa$7$0;$wave$sroa$9$1 = $wave$sroa$9$0;
 HEAP32[$agg$result>>2] = $wave$sroa$0$1;
 $45 = ((($agg$result)) + 4|0);
 HEAP32[$45>>2] = $wave$sroa$4$1;
 $46 = ((($agg$result)) + 8|0);
 HEAP32[$46>>2] = $wave$sroa$5$1;
 $47 = ((($agg$result)) + 12|0);
 HEAP16[$47>>1] = $wave$sroa$7$1;
 $48 = ((($agg$result)) + 14|0);
 HEAP16[$48>>1] = $wave$sroa$9$1;
 STACKTOP = sp;return;
}
function _LoadOGG($agg$result,$fileName) {
 $agg$result = $agg$result|0;
 $fileName = $fileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, $sext = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $wave$sroa$0$0 = 0, $wave$sroa$4$0 = 0, $wave$sroa$5$0 = 0, $wave$sroa$9$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer29 = sp + 32|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $info = sp + 96|0;
 $0 = (_stb_vorbis_open_filename($fileName,0,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $fileName;
  _TraceLog(2,19360,$vararg_buffer);
  $wave$sroa$0$0 = 0;$wave$sroa$4$0 = 0;$wave$sroa$5$0 = 0;$wave$sroa$9$0 = 0;
  HEAP32[$agg$result>>2] = $wave$sroa$0$0;
  $25 = ((($agg$result)) + 4|0);
  HEAP32[$25>>2] = $wave$sroa$4$0;
  $26 = ((($agg$result)) + 8|0);
  HEAP32[$26>>2] = $wave$sroa$5$0;
  $27 = ((($agg$result)) + 12|0);
  HEAP16[$27>>1] = 16;
  $28 = ((($agg$result)) + 14|0);
  HEAP16[$28>>1] = $wave$sroa$9$0;
  STACKTOP = sp;return;
 }
 _stb_vorbis_get_info($info,$0);
 $2 = HEAP32[$info>>2]|0;
 $3 = ((($info)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4&65535;
 HEAP32[$vararg_buffer1>>2] = $fileName;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 _TraceLog(3,18928,$vararg_buffer1);
 $6 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer5>>2] = $fileName;
 $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
 HEAP32[$vararg_ptr8>>2] = $6;
 _TraceLog(3,18960,$vararg_buffer5);
 $7 = (_stb_vorbis_stream_length_in_samples($0)|0);
 $8 = HEAP32[$3>>2]|0;
 $9 = Math_imul($8, $7)|0;
 $10 = $9 << 1;
 HEAP32[$vararg_buffer9>>2] = $fileName;
 $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
 HEAP32[$vararg_ptr12>>2] = $9;
 _TraceLog(3,19400,$vararg_buffer9);
 $11 = (+_stb_vorbis_stream_length_in_seconds($0));
 $12 = $11;
 HEAP32[$vararg_buffer13>>2] = $fileName;
 $vararg_ptr16 = ((($vararg_buffer13)) + 8|0);
 HEAPF64[$vararg_ptr16>>3] = $12;
 _TraceLog(3,19424,$vararg_buffer13);
 $13 = $11 > 10.0;
 if ($13) {
  HEAP32[$vararg_buffer17>>2] = $fileName;
  $vararg_ptr20 = ((($vararg_buffer17)) + 8|0);
  HEAPF64[$vararg_ptr20>>3] = $12;
  _TraceLog(2,19448,$vararg_buffer17);
 }
 $14 = HEAP32[$info>>2]|0;
 $15 = (+($14>>>0));
 $16 = $11 * $15;
 $17 = HEAP32[$3>>2]|0;
 $18 = (+($17|0));
 $19 = $16 * $18;
 $20 = (~~(($19)));
 HEAP32[$vararg_buffer21>>2] = $fileName;
 $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
 HEAP32[$vararg_ptr24>>2] = $20;
 _TraceLog(3,19560,$vararg_buffer21);
 $21 = (_malloc($10)|0);
 $22 = HEAP32[$3>>2]|0;
 $23 = (_stb_vorbis_get_samples_short_interleaved($0,$22,$21,$9)|0);
 HEAP32[$vararg_buffer25>>2] = $fileName;
 $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
 HEAP32[$vararg_ptr28>>2] = $23;
 _TraceLog(3,19600,$vararg_buffer25);
 $sext = $4 << 16;
 $24 = $sext >> 16;
 HEAP32[$vararg_buffer29>>2] = $fileName;
 $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
 HEAP32[$vararg_ptr32>>2] = $2;
 $vararg_ptr33 = ((($vararg_buffer29)) + 8|0);
 HEAP32[$vararg_ptr33>>2] = 16;
 $vararg_ptr34 = ((($vararg_buffer29)) + 12|0);
 HEAP32[$vararg_ptr34>>2] = $24;
 _TraceLog(0,19632,$vararg_buffer29);
 _stb_vorbis_close($0);
 $wave$sroa$0$0 = $21;$wave$sroa$4$0 = $10;$wave$sroa$5$0 = $2;$wave$sroa$9$0 = $5;
 HEAP32[$agg$result>>2] = $wave$sroa$0$0;
 $25 = ((($agg$result)) + 4|0);
 HEAP32[$25>>2] = $wave$sroa$4$0;
 $26 = ((($agg$result)) + 8|0);
 HEAP32[$26>>2] = $wave$sroa$5$0;
 $27 = ((($agg$result)) + 12|0);
 HEAP16[$27>>1] = 16;
 $28 = ((($agg$result)) + 14|0);
 HEAP16[$28>>1] = $wave$sroa$9$0;
 STACKTOP = sp;return;
}
function _UnloadWave($wave) {
 $wave = $wave|0;
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$wave>>2]|0;
 _free($0);
 _TraceLog(0,19336,$vararg_buffer);
 STACKTOP = sp;return;
}
function _BufferMusicStream($buffer) {
 $buffer = $buffer|0;
 var $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $active$0 = 0, $pcm = 0;
 var $size$0 = 0, $size$0$lcssa = 0, $size$12 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65552|0;
 $vararg_buffer = sp;
 $pcm = sp + 8|0;
 $0 = HEAP32[8808>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $size$0 = 0;
   while(1) {
    $2 = HEAP32[18672>>2]|0;
    $3 = HEAP32[(18692)>>2]|0;
    $4 = (($pcm) + ($size$0<<1)|0);
    $5 = (32768 - ($size$0))|0;
    $6 = (_stb_vorbis_get_samples_short_interleaved($2,$3,$4,$5)|0);
    $7 = ($6|0)>(0);
    if (!($7)) {
     $size$0$lcssa = $size$0;
     label = 4;
     break;
    }
    $8 = HEAP32[(18692)>>2]|0;
    $9 = Math_imul($8, $6)|0;
    $10 = (($9) + ($size$0))|0;
    $$old1 = ($10|0)<(32768);
    if ($$old1) {
     $size$0 = $10;
    } else {
     $size$12 = $10;
     break;
    }
   }
   if ((label|0) == 4) {
    $11 = ($size$0$lcssa|0)>(0);
    if ($11) {
     $size$12 = $size$0$lcssa;
    } else {
     break;
    }
   }
   $12 = HEAP32[(18688)>>2]|0;
   $13 = $size$12 << 1;
   $14 = HEAP32[(18696)>>2]|0;
   _alBufferData(($buffer|0),($12|0),($pcm|0),($13|0),($14|0));
   $15 = HEAP32[(18700)>>2]|0;
   $16 = (($15) - ($size$12))|0;
   HEAP32[(18700)>>2] = $16;
   $active$0 = 1;
   STACKTOP = sp;return ($active$0|0);
  }
 } while(0);
 _TraceLog(2,19296,$vararg_buffer);
 $active$0 = 0;
 STACKTOP = sp;return ($active$0|0);
}
function _EmscriptenInputCallback($eventType,$touchEvent,$userData) {
 $eventType = $eventType|0;
 $touchEvent = $touchEvent|0;
 $userData = $userData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $gestureEvent = 0, $gestureEvent$byval_copy = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $gestureEvent$byval_copy = sp + 56|0;
 $gestureEvent = sp;
 if ((($eventType|0) == 24)) {
  HEAP32[$gestureEvent>>2] = 2;
 } else if ((($eventType|0) == 23)) {
  HEAP32[$gestureEvent>>2] = 0;
 } else if ((($eventType|0) == 22)) {
  HEAP32[$gestureEvent>>2] = 1;
 }
 $0 = HEAP32[$touchEvent>>2]|0;
 $1 = ((($gestureEvent)) + 4|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($touchEvent)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (+($3|0));
 $5 = ((($touchEvent)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (+($6|0));
 $8 = ((($gestureEvent)) + 24|0);
 HEAPF32[$8>>2] = $4;
 $9 = ((($gestureEvent)) + 28|0);
 HEAPF32[$9>>2] = $7;
 $10 = ((($touchEvent)) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11|0));
 $13 = ((($touchEvent)) + 112|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($14|0));
 $16 = ((($gestureEvent)) + 32|0);
 HEAPF32[$16>>2] = $12;
 $17 = ((($gestureEvent)) + 36|0);
 HEAPF32[$17>>2] = $15;
 (_puts((19176|0))|0);
 $18 = ((($gestureEvent)) + 24|0);
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = 19112;
 $26 = $25;
 HEAP32[$26>>2] = $21;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $24;
 dest=$gestureEvent$byval_copy; src=$gestureEvent; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _ProcessMotionEvent($gestureEvent$byval_copy);
 STACKTOP = sp;return 1;
}
function _ProcessMotionEvent($event) {
 $event = $event|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $firstTouchVector = 0, $firstTouchVector$byval_copy = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $pow2 = 0.0;
 var $pow210 = 0.0, $secondTouchVector = 0, $secondTouchVector$byval_copy = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $secondTouchVector$byval_copy = sp + 24|0;
 $firstTouchVector$byval_copy = sp;
 $firstTouchVector = sp + 8|0;
 $secondTouchVector = sp + 16|0;
 HEAPF32[19144>>2] = 0.0;
 HEAPF32[(19148)>>2] = 0.0;
 HEAPF32[19152>>2] = 0.0;
 $0 = HEAP32[19120>>2]|0;
 HEAP32[19168>>2] = $0;
 $1 = HEAP32[19192>>2]|0;
 if ((($1|0) == 1)) {
  $42 = HEAP32[$event>>2]|0;
  if ((($42|0) == 0)) {
   $43 = +HEAPF32[19128>>2];
   $44 = $43 > 20.0;
   do {
    if ($44) {
     $45 = +HEAPF32[19136>>2];
     $46 = $45 < 30.0;
     $47 = $45 > 330.0;
     $or$cond = $46 | $47;
     if ($or$cond) {
      HEAP32[19120>>2] = 32;
      break;
     }
     $48 = $45 > 60.0;
     $49 = $45 < 120.0;
     $or$cond3 = $48 & $49;
     if ($or$cond3) {
      HEAP32[19120>>2] = 128;
      break;
     }
     $50 = $45 > 150.0;
     $51 = $45 < 210.0;
     $or$cond5 = $50 & $51;
     if ($or$cond5) {
      HEAP32[19120>>2] = 64;
      break;
     }
     $52 = $45 > 240.0;
     $53 = $45 < 300.0;
     $or$cond7 = $52 & $53;
     if ($or$cond7) {
      HEAP32[19120>>2] = 256;
     }
    }
   } while(0);
   HEAPF32[19248>>2] = 0.0;
   HEAPF32[19136>>2] = 0.0;
   HEAPF32[19128>>2] = 0.0;
   HEAP32[19192>>2] = 0;
   STACKTOP = sp;return;
  } else if ((($42|0) == 2)) {
   $54 = ((($event)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)>(1);
   if ($56) {
    $57 = ((($event)) + 24|0);
    $58 = ((($event)) + 32|0);
    ;HEAP32[$firstTouchVector$byval_copy>>2]=HEAP32[$57>>2]|0;HEAP32[$firstTouchVector$byval_copy+4>>2]=HEAP32[$57+4>>2]|0;
    ;HEAP32[$secondTouchVector$byval_copy>>2]=HEAP32[$58>>2]|0;HEAP32[$secondTouchVector$byval_copy+4>>2]=HEAP32[$58+4>>2]|0;
    _InitPinchGesture($firstTouchVector$byval_copy,$secondTouchVector$byval_copy);
    STACKTOP = sp;return;
   } else {
    $59 = 19232;
    $60 = $59;
    $61 = HEAP32[$60>>2]|0;
    $62 = (($59) + 4)|0;
    $63 = $62;
    $64 = HEAP32[$63>>2]|0;
    $65 = 19256;
    $66 = $65;
    HEAP32[$66>>2] = $61;
    $67 = (($65) + 4)|0;
    $68 = $67;
    HEAP32[$68>>2] = $64;
    $69 = 19112;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $72 = (($69) + 4)|0;
    $73 = $72;
    $74 = HEAP32[$73>>2]|0;
    $75 = 19232;
    $76 = $75;
    HEAP32[$76>>2] = $71;
    $77 = (($75) + 4)|0;
    $78 = $77;
    HEAP32[$78>>2] = $74;
    $79 = +HEAPF32[19232>>2];
    $80 = +HEAPF32[19256>>2];
    $81 = $79 - $80;
    $82 = +HEAPF32[(19236)>>2];
    $83 = +HEAPF32[(19260)>>2];
    $84 = $82 - $83;
    HEAPF32[19144>>2] = $81;
    HEAPF32[(19148)>>2] = $84;
    $85 = +HEAPF32[19232>>2];
    $86 = +HEAPF32[19224>>2];
    $87 = $85 - $86;
    $88 = $87;
    $pow2 = $88 * $88;
    $89 = +HEAPF32[(19236)>>2];
    $90 = +HEAPF32[(19228)>>2];
    $91 = $89 - $90;
    $92 = $91;
    $pow210 = $92 * $92;
    $93 = $pow2 + $pow210;
    $94 = (+Math_sqrt((+$93)));
    $95 = $94;
    HEAPF32[19248>>2] = $95;
    ;HEAP32[$firstTouchVector$byval_copy>>2]=HEAP32[19224>>2]|0;HEAP32[$firstTouchVector$byval_copy+4>>2]=HEAP32[19224+4>>2]|0;
    ;HEAP32[$secondTouchVector$byval_copy>>2]=HEAP32[19232>>2]|0;HEAP32[$secondTouchVector$byval_copy+4>>2]=HEAP32[19232+4>>2]|0;
    $96 = (+_CalculateAngle($firstTouchVector$byval_copy,$secondTouchVector$byval_copy,$95));
    HEAPF32[19136>>2] = $96;
    $97 = HEAP32[19240>>2]|0;
    $98 = (+($97|0));
    $99 = $95 / $98;
    HEAPF32[19128>>2] = $99;
    HEAP32[19120>>2] = 16;
    $100 = (($97) + 1)|0;
    HEAP32[19240>>2] = $100;
    STACKTOP = sp;return;
   }
  } else {
   STACKTOP = sp;return;
  }
 } else if ((($1|0) == 0)) {
  $2 = HEAP32[$event>>2]|0;
  if ((($2|0) == 1)) {
   $3 = ((($event)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)>(1);
   $6 = ((($event)) + 24|0);
   if ($5) {
    $7 = ((($event)) + 32|0);
    ;HEAP32[$firstTouchVector$byval_copy>>2]=HEAP32[$6>>2]|0;HEAP32[$firstTouchVector$byval_copy+4>>2]=HEAP32[$6+4>>2]|0;
    ;HEAP32[$secondTouchVector$byval_copy>>2]=HEAP32[$7>>2]|0;HEAP32[$secondTouchVector$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;
    _InitPinchGesture($firstTouchVector$byval_copy,$secondTouchVector$byval_copy);
    STACKTOP = sp;return;
   }
   $8 = $6;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = (($8) + 4)|0;
   $12 = $11;
   $13 = HEAP32[$12>>2]|0;
   $14 = 19200;
   $15 = $14;
   HEAP32[$15>>2] = $10;
   $16 = (($14) + 4)|0;
   $17 = $16;
   HEAP32[$17>>2] = $13;
   $18 = HEAP32[19208>>2]|0;
   $19 = ($18|0)==(0);
   if ($19) {
    $$pr = HEAP32[19216>>2]|0;
    $20 = ($$pr|0)==(0);
    if ($20) {
     HEAP32[19120>>2] = 2;
     STACKTOP = sp;return;
    }
   } else {
    HEAP32[19216>>2] = 1;
   }
   HEAP32[19120>>2] = 4;
   STACKTOP = sp;return;
  } else if ((($2|0) == 0)) {
   HEAP32[19120>>2] = 1;
   $21 = HEAP32[19216>>2]|0;
   $22 = $21 ^ 1;
   HEAP32[19208>>2] = $22;
   HEAP32[19216>>2] = 0;
   STACKTOP = sp;return;
  } else if ((($2|0) == 2)) {
   $23 = ((($event)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)>(1);
   if ($25) {
    $26 = ((($event)) + 24|0);
    $27 = ((($event)) + 32|0);
    ;HEAP32[$firstTouchVector$byval_copy>>2]=HEAP32[$26>>2]|0;HEAP32[$firstTouchVector$byval_copy+4>>2]=HEAP32[$26+4>>2]|0;
    ;HEAP32[$secondTouchVector$byval_copy>>2]=HEAP32[$27>>2]|0;HEAP32[$secondTouchVector$byval_copy+4>>2]=HEAP32[$27+4>>2]|0;
    _InitPinchGesture($firstTouchVector$byval_copy,$secondTouchVector$byval_copy);
    STACKTOP = sp;return;
   } else {
    $28 = 19200;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = 19224;
    $35 = $34;
    HEAP32[$35>>2] = $30;
    $36 = (($34) + 4)|0;
    $37 = $36;
    HEAP32[$37>>2] = $33;
    $38 = 19232;
    $39 = $38;
    HEAP32[$39>>2] = $30;
    $40 = (($38) + 4)|0;
    $41 = $40;
    HEAP32[$41>>2] = $33;
    HEAP32[19240>>2] = 0;
    HEAP32[19192>>2] = 1;
    HEAP32[19120>>2] = 1;
    STACKTOP = sp;return;
   }
  } else {
   STACKTOP = sp;return;
  }
 } else if ((($1|0) == 2)) {
  $101 = HEAP32[$event>>2]|0;
  if ((($101|0) == 2)) {
   $116 = ((($event)) + 24|0);
   $117 = $116;
   $118 = $117;
   $119 = HEAP32[$118>>2]|0;
   $120 = (($117) + 4)|0;
   $121 = $120;
   $122 = HEAP32[$121>>2]|0;
   $123 = 19264;
   $124 = $123;
   HEAP32[$124>>2] = $119;
   $125 = (($123) + 4)|0;
   $126 = $125;
   HEAP32[$126>>2] = $122;
   $127 = ((($event)) + 32|0);
   $128 = $127;
   $129 = $128;
   $130 = HEAP32[$129>>2]|0;
   $131 = (($128) + 4)|0;
   $132 = $131;
   $133 = HEAP32[$132>>2]|0;
   $134 = 19272;
   $135 = $134;
   HEAP32[$135>>2] = $130;
   $136 = (($134) + 4)|0;
   $137 = $136;
   HEAP32[$137>>2] = $133;
   $138 = ((($event)) + 4|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ($139|0)==(2);
   do {
    if ($140) {
     ;HEAP32[$firstTouchVector$byval_copy>>2]=HEAP32[19280>>2]|0;HEAP32[$firstTouchVector$byval_copy+4>>2]=HEAP32[19280+4>>2]|0;
     ;HEAP32[$secondTouchVector$byval_copy>>2]=HEAP32[19288>>2]|0;HEAP32[$secondTouchVector$byval_copy+4>>2]=HEAP32[19288+4>>2]|0;
     $141 = (+_VectorDistance387($firstTouchVector$byval_copy,$secondTouchVector$byval_copy));
     ;HEAP32[$firstTouchVector$byval_copy>>2]=HEAP32[19264>>2]|0;HEAP32[$firstTouchVector$byval_copy+4>>2]=HEAP32[19264+4>>2]|0;
     ;HEAP32[$secondTouchVector$byval_copy>>2]=HEAP32[19272>>2]|0;HEAP32[$secondTouchVector$byval_copy+4>>2]=HEAP32[19272+4>>2]|0;
     $142 = (+_VectorDistance387($firstTouchVector$byval_copy,$secondTouchVector$byval_copy));
     $143 = +HEAPF32[19264>>2];
     $144 = +HEAPF32[19280>>2];
     $145 = $143 - $144;
     HEAPF32[$firstTouchVector>>2] = $145;
     $146 = ((($firstTouchVector)) + 4|0);
     $147 = +HEAPF32[(19268)>>2];
     $148 = +HEAPF32[(19284)>>2];
     $149 = $147 - $148;
     HEAPF32[$146>>2] = $149;
     $150 = +HEAPF32[19272>>2];
     $151 = +HEAPF32[19288>>2];
     $152 = $150 - $151;
     HEAPF32[$secondTouchVector>>2] = $152;
     $153 = ((($secondTouchVector)) + 4|0);
     $154 = +HEAPF32[(19276)>>2];
     $155 = +HEAPF32[(19292)>>2];
     $156 = $154 - $155;
     HEAPF32[$153>>2] = $156;
     ;HEAP32[$firstTouchVector$byval_copy>>2]=HEAP32[$firstTouchVector>>2]|0;HEAP32[$firstTouchVector$byval_copy+4>>2]=HEAP32[$firstTouchVector+4>>2]|0;
     ;HEAP32[$secondTouchVector$byval_copy>>2]=HEAP32[$secondTouchVector>>2]|0;HEAP32[$secondTouchVector$byval_copy+4>>2]=HEAP32[$secondTouchVector+4>>2]|0;
     $157 = (+_VectorDotProduct388($firstTouchVector$byval_copy,$secondTouchVector$byval_copy));
     $158 = $157 < -0.5;
     $159 = $141 - $142;
     $storemerge = $158 ? $159 : 0.0;
     HEAPF32[19152>>2] = $storemerge;
     $160 = $storemerge != 0.0;
     if ($160) {
      $161 = $storemerge > 0.0;
      if ($161) {
       HEAP32[19120>>2] = 512;
       break;
      } else {
       HEAP32[19120>>2] = 1024;
       break;
      }
     }
    } else {
     $162 = $116;
     $163 = $162;
     $164 = HEAP32[$163>>2]|0;
     $165 = (($162) + 4)|0;
     $166 = $165;
     $167 = HEAP32[$166>>2]|0;
     $168 = 19200;
     $169 = $168;
     HEAP32[$169>>2] = $164;
     $170 = (($168) + 4)|0;
     $171 = $170;
     HEAP32[$171>>2] = $167;
     HEAP32[19192>>2] = 0;
    }
   } while(0);
   $172 = 19264;
   $173 = $172;
   $174 = HEAP32[$173>>2]|0;
   $175 = (($172) + 4)|0;
   $176 = $175;
   $177 = HEAP32[$176>>2]|0;
   $178 = 19280;
   $179 = $178;
   HEAP32[$179>>2] = $174;
   $180 = (($178) + 4)|0;
   $181 = $180;
   HEAP32[$181>>2] = $177;
   $182 = 19272;
   $183 = $182;
   $184 = HEAP32[$183>>2]|0;
   $185 = (($182) + 4)|0;
   $186 = $185;
   $187 = HEAP32[$186>>2]|0;
   $188 = 19288;
   $189 = $188;
   HEAP32[$189>>2] = $184;
   $190 = (($188) + 4)|0;
   $191 = $190;
   HEAP32[$191>>2] = $187;
   STACKTOP = sp;return;
  } else if ((($101|0) == 0)) {
   $102 = ((($event)) + 4|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==(1);
   if ($104) {
    $105 = ((($event)) + 24|0);
    $106 = $105;
    $107 = $106;
    $108 = HEAP32[$107>>2]|0;
    $109 = (($106) + 4)|0;
    $110 = $109;
    $111 = HEAP32[$110>>2]|0;
    $112 = 19200;
    $113 = $112;
    HEAP32[$113>>2] = $108;
    $114 = (($112) + 4)|0;
    $115 = $114;
    HEAP32[$115>>2] = $111;
   }
   HEAP32[19192>>2] = 0;
   STACKTOP = sp;return;
  } else {
   STACKTOP = sp;return;
  }
 } else {
  STACKTOP = sp;return;
 }
}
function _InitPinchGesture($posA,$posB) {
 $posA = $posA|0;
 $posB = $posB|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[19224>>2] = 0.0;
 HEAPF32[(19228)>>2] = 0.0;
 HEAPF32[19232>>2] = 0.0;
 HEAPF32[(19236)>>2] = 0.0;
 HEAPF32[19256>>2] = 0.0;
 HEAPF32[(19260)>>2] = 0.0;
 $0 = $posA;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = 19280;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = $posB;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = 19288;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $20 = 19264;
 $21 = $20;
 HEAP32[$21>>2] = $2;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $5;
 $24 = 19272;
 $25 = $24;
 HEAP32[$25>>2] = $12;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $15;
 HEAPF32[19248>>2] = 0.0;
 HEAPF32[19136>>2] = 0.0;
 HEAPF32[19128>>2] = 0.0;
 HEAP32[19192>>2] = 2;
 return;
}
function _CalculateAngle($initialPosition,$finalPosition,$magnitude) {
 $initialPosition = $initialPosition|0;
 $finalPosition = $finalPosition|0;
 $magnitude = +$magnitude;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var $angle$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($finalPosition)) + 4|0);
 $1 = +HEAPF32[$0>>2];
 $2 = ((($initialPosition)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $1 - $3;
 $5 = $4 / $magnitude;
 $6 = $5;
 $7 = (+Math_asin((+$6)));
 $8 = $7;
 $9 = $8;
 $10 = $9 * 57.295779513082323;
 $11 = $10;
 $12 = +HEAPF32[$finalPosition>>2];
 $13 = +HEAPF32[$initialPosition>>2];
 $14 = $12 - $13;
 $15 = !($14 >= 0.0);
 if ($15) {
  $19 = $11 + 180.0;
  $angle$0 = $19;
  return (+$angle$0);
 }
 $16 = !($4 >= 0.0);
 $17 = -$11;
 if ($16) {
  $angle$0 = $17;
  return (+$angle$0);
 }
 $18 = 360.0 - $11;
 $angle$0 = $18;
 return (+$angle$0);
}
function _VectorDistance387($v1,$v2) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $sqrtf = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$v2>>2];
 $1 = +HEAPF32[$v1>>2];
 $2 = $0 - $1;
 $3 = ((($v2)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($v1)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $4 - $6;
 $8 = $2 * $2;
 $9 = $7 * $7;
 $10 = $8 + $9;
 $sqrtf = (+Math_sqrt((+$10)));
 return (+$sqrtf);
}
function _VectorDotProduct388($v1,$v2) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $sqrtf = 0.0;
 var $sqrtf1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$v1>>2];
 $1 = $0 * $0;
 $2 = ((($v1)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3 * $3;
 $5 = $1 + $4;
 $sqrtf = (+Math_sqrt((+$5)));
 $6 = +HEAPF32[$v2>>2];
 $7 = $6 * $6;
 $8 = ((($v2)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $9 * $9;
 $11 = $7 + $10;
 $sqrtf1 = (+Math_sqrt((+$11)));
 $12 = $0 / $sqrtf;
 $13 = $3 / $sqrtf;
 $14 = $6 / $sqrtf1;
 $15 = $9 / $sqrtf1;
 $16 = $12 * $14;
 $17 = $13 * $15;
 $18 = $16 + $17;
 return (+$18);
}
function _PixelIsMagenta($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = ($0<<24>>24)==(-1);
 if ($1) {
  $2 = ((($p)) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   $5 = ((($p)) + 2|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(-1);
   if ($7) {
    $8 = ((($p)) + 3|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-1);
    $12 = $10;
   } else {
    $12 = 0;
   }
  } else {
   $12 = 0;
  }
 } else {
  $12 = 0;
 }
 $11 = $12&1;
 return ($11|0);
}
function _stbtt__edge_compare($p,$q) {
 $p = $p|0;
 $q = $q|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = +HEAPF32[$0>>2];
 $2 = ((($q)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $1 < $3;
 $5 = $1 > $3;
 $$ = $5&1;
 $$0 = $4 ? -1 : $$;
 return ($$0|0);
}
function _stbtt__rasterize_sorted_edges($result,$e,$n,$vsubsample,$off_x,$off_y) {
 $result = $result|0;
 $e = $e|0;
 $n = $n|0;
 $vsubsample = $vsubsample|0;
 $off_x = $off_x|0;
 $off_y = $off_y|0;
 var $$025 = 0, $$1$lcssa = 0, $$117 = 0, $$2$lcssa = 0, $$212 = 0, $$lcssa = 0, $$lcssa58 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $active$sroa$0 = 0;
 var $changed$0 = 0, $changed$1 = 0, $j$023 = 0, $p$0 = 0, $s$015 = 0, $scanline$0 = 0, $scanline_data = 0, $step$0$ph11 = 0, $step$1 = 0, $y$024 = 0, $y$1$lcssa = 0, $y$116 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0;
 $active$sroa$0 = sp;
 $scanline_data = sp + 8|0;
 HEAP32[$active$sroa$0>>2] = 0;
 $0 = (255 / ($vsubsample|0))&-1;
 $1 = HEAP32[$result>>2]|0;
 $2 = ($1|0)>(512);
 if ($2) {
  $3 = (_malloc($1)|0);
  $scanline$0 = $3;
 } else {
  $scanline$0 = $scanline_data;
 }
 $4 = ((($result)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($off_y))|0;
 $7 = (+($6|0));
 $8 = (+($vsubsample|0));
 $9 = $8 * $7;
 $10 = $9 + 1.0;
 $11 = (((($e) + (($n*20)|0)|0)) + 4|0);
 HEAPF32[$11>>2] = $10;
 $12 = HEAP32[$4>>2]|0;
 $13 = ($12|0)>(0);
 L4: do {
  if ($13) {
   $14 = Math_imul($off_y, $vsubsample)|0;
   $15 = ($vsubsample|0)>(0);
   $16 = ((($result)) + 12|0);
   $17 = ((($result)) + 8|0);
   $$025 = $e;$j$023 = 0;$y$024 = $14;
   L6: while(1) {
    $20 = HEAP32[$result>>2]|0;
    _memset(($scanline$0|0),0,($20|0))|0;
    if ($15) {
     $$117 = $$025;$s$015 = 0;$y$116 = $y$024;
     while(1) {
      $21 = (+($y$116|0));
      $22 = $21 + 0.5;
      $23 = HEAP32[$active$sroa$0>>2]|0;
      $24 = ($23|0)==(0|0);
      L11: do {
       if ($24) {
        $changed$0 = 0;$step$1 = $active$sroa$0;
       } else {
        $111 = $23;$step$0$ph11 = $active$sroa$0;
        while(1) {
         $26 = $111;
         while(1) {
          $25 = ((($26)) + 8|0);
          $27 = +HEAPF32[$25>>2];
          $28 = !($27 <= $22);
          if ($28) {
           $$lcssa = $26;
           break;
          }
          $29 = ((($26)) + 12|0);
          $30 = HEAP32[$29>>2]|0;
          HEAP32[$step$0$ph11>>2] = $30;
          $31 = ((($26)) + 16|0);
          $32 = HEAP32[$31>>2]|0;
          $33 = ($32|0)==(0);
          if ($33) {
           break L6;
          }
          _free($26);
          $34 = HEAP32[$step$0$ph11>>2]|0;
          $35 = ($34|0)==(0|0);
          if ($35) {
           $changed$0 = 0;$step$1 = $active$sroa$0;
           break L11;
          } else {
           $26 = $34;
          }
         }
         $36 = ((($$lcssa)) + 4|0);
         $37 = HEAP32[$36>>2]|0;
         $38 = HEAP32[$$lcssa>>2]|0;
         $39 = (($38) + ($37))|0;
         HEAP32[$$lcssa>>2] = $39;
         $40 = HEAP32[$step$0$ph11>>2]|0;
         $41 = ((($40)) + 12|0);
         $42 = HEAP32[$41>>2]|0;
         $43 = ($42|0)==(0|0);
         if ($43) {
          $changed$0 = 0;$step$1 = $active$sroa$0;
          break;
         } else {
          $111 = $42;$step$0$ph11 = $41;
         }
        }
       }
      } while(0);
      while(1) {
       $44 = HEAP32[$step$1>>2]|0;
       $45 = ($44|0)==(0|0);
       if (!($45)) {
        $46 = ((($44)) + 12|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = ($47|0)==(0|0);
        if (!($48)) {
         $49 = HEAP32[$44>>2]|0;
         $50 = HEAP32[$47>>2]|0;
         $51 = ($49|0)>($50|0);
         if ($51) {
          $52 = ((($47)) + 12|0);
          $53 = HEAP32[$52>>2]|0;
          HEAP32[$46>>2] = $53;
          HEAP32[$52>>2] = $44;
          HEAP32[$step$1>>2] = $47;
          $changed$1 = 1;
         } else {
          $changed$1 = $changed$0;
         }
         $54 = HEAP32[$step$1>>2]|0;
         $55 = ((($54)) + 12|0);
         $changed$0 = $changed$1;$step$1 = $55;
         continue;
        }
       }
       $56 = ($changed$0|0)==(0);
       if ($56) {
        break;
       } else {
        $changed$0 = 0;$step$1 = $active$sroa$0;
       }
      }
      $57 = ((($$117)) + 4|0);
      $58 = +HEAPF32[$57>>2];
      $59 = !($58 <= $22);
      if ($59) {
       $$2$lcssa = $$117;
      } else {
       $$212 = $$117;
       while(1) {
        $60 = ((($$212)) + 12|0);
        $61 = +HEAPF32[$60>>2];
        $62 = $61 > $22;
        do {
         if ($62) {
          $63 = (_new_active($$212,$off_x,$22)|0);
          $64 = HEAP32[$active$sroa$0>>2]|0;
          $65 = $64;
          $66 = ($64|0)==(0);
          if ($66) {
           $67 = $63;
           HEAP32[$active$sroa$0>>2] = $67;
           break;
          }
          $68 = HEAP32[$63>>2]|0;
          $69 = HEAP32[$65>>2]|0;
          $70 = ($68|0)<($69|0);
          if ($70) {
           $71 = ((($63)) + 12|0);
           HEAP32[$71>>2] = $65;
           $72 = $63;
           HEAP32[$active$sroa$0>>2] = $72;
           break;
          } else {
           $p$0 = $65;
          }
          while(1) {
           $73 = ((($p$0)) + 12|0);
           $74 = HEAP32[$73>>2]|0;
           $75 = ($74|0)==(0|0);
           if ($75) {
            $$lcssa58 = $73;
            label = 27;
            break;
           }
           $77 = HEAP32[$74>>2]|0;
           $78 = HEAP32[$63>>2]|0;
           $79 = ($77|0)<($78|0);
           $80 = HEAP32[$73>>2]|0;
           if ($79) {
            $p$0 = $80;
           } else {
            $82 = $80;$83 = $73;
            break;
           }
          }
          if ((label|0) == 27) {
           label = 0;
           $76 = HEAP32[$$lcssa58>>2]|0;
           $82 = $76;$83 = $$lcssa58;
          }
          $81 = ((($63)) + 12|0);
          HEAP32[$81>>2] = $82;
          HEAP32[$83>>2] = $63;
         }
        } while(0);
        $84 = ((($$212)) + 20|0);
        $85 = ((($$212)) + 24|0);
        $86 = +HEAPF32[$85>>2];
        $87 = !($86 <= $22);
        if ($87) {
         $$2$lcssa = $84;
         break;
        } else {
         $$212 = $84;
        }
       }
      }
      $88 = HEAP32[$active$sroa$0>>2]|0;
      $89 = ($88|0)==(0);
      if (!($89)) {
       $90 = $88;
       $91 = HEAP32[$result>>2]|0;
       _stbtt__fill_active_edges($scanline$0,$91,$90,$0);
      }
      $92 = (($y$116) + 1)|0;
      $93 = (($s$015) + 1)|0;
      $94 = ($93|0)<($vsubsample|0);
      if ($94) {
       $$117 = $$2$lcssa;$s$015 = $93;$y$116 = $92;
      } else {
       $$1$lcssa = $$2$lcssa;$y$1$lcssa = $92;
       break;
      }
     }
    } else {
     $$1$lcssa = $$025;$y$1$lcssa = $y$024;
    }
    $95 = HEAP32[$16>>2]|0;
    $96 = HEAP32[$17>>2]|0;
    $97 = Math_imul($96, $j$023)|0;
    $98 = (($95) + ($97)|0);
    $99 = HEAP32[$result>>2]|0;
    _memcpy(($98|0),($scanline$0|0),($99|0))|0;
    $100 = (($j$023) + 1)|0;
    $101 = HEAP32[$4>>2]|0;
    $102 = ($100|0)<($101|0);
    if ($102) {
     $$025 = $$1$lcssa;$j$023 = $100;$y$024 = $y$1$lcssa;
    } else {
     break L4;
    }
   }
   ___assert_fail((20288|0),(15032|0),1663,(20304|0));
   // unreachable;
  }
 } while(0);
 $18 = HEAP32[$active$sroa$0>>2]|0;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $103 = $18;
  while(1) {
   $104 = $103;
   $105 = ((($104)) + 12|0);
   $106 = HEAP32[$105>>2]|0;
   HEAP32[$active$sroa$0>>2] = $106;
   $107 = $103;
   _free($107);
   $108 = HEAP32[$active$sroa$0>>2]|0;
   $109 = ($108|0)==(0);
   if ($109) {
    break;
   } else {
    $103 = $108;
   }
  }
 }
 $110 = ($scanline$0|0)==($scanline_data|0);
 if ($110) {
  STACKTOP = sp;return;
 }
 _free($scanline$0);
 STACKTOP = sp;return;
}
function _new_active($e,$off_x,$start_point) {
 $e = $e|0;
 $off_x = $off_x|0;
 $start_point = +$start_point;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $floorf = 0.0, $floorf1 = 0.0;
 var $floorf2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(20)|0);
 $1 = ((($e)) + 8|0);
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$e>>2];
 $4 = $2 - $3;
 $5 = ((($e)) + 12|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($e)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 - $8;
 $10 = $4 / $9;
 $11 = !($8 <= $start_point);
 if ($11) {
  ___assert_fail((20336|0),(15032|0),1574,(20360|0));
  // unreachable;
 }
 $12 = ($0|0)==(0|0);
 if ($12) {
  return ($0|0);
 }
 $13 = $10 < 0.0;
 if ($13) {
  $14 = $10 * -1024.0;
  $floorf2 = (+Math_floor((+$14)));
  $15 = (~~(($floorf2)));
  $16 = (0 - ($15))|0;
  $17 = ((($0)) + 4|0);
  HEAP32[$17>>2] = $16;
 } else {
  $18 = $10 * 1024.0;
  $floorf = (+Math_floor((+$18)));
  $19 = (~~(($floorf)));
  $20 = ((($0)) + 4|0);
  HEAP32[$20>>2] = $19;
 }
 $21 = +HEAPF32[$e>>2];
 $22 = +HEAPF32[$7>>2];
 $23 = $start_point - $22;
 $24 = $10 * $23;
 $25 = $21 + $24;
 $26 = $25 * 1024.0;
 $floorf1 = (+Math_floor((+$26)));
 $27 = (~~(($floorf1)));
 $28 = $off_x << 10;
 $29 = (($27) - ($28))|0;
 HEAP32[$0>>2] = $29;
 $30 = HEAP32[$5>>2]|0;
 $31 = ((($0)) + 8|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($0)) + 12|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($e)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0);
 $36 = $35 ? 1 : -1;
 $37 = ((($0)) + 16|0);
 HEAP32[$37>>2] = $36;
 return ($0|0);
}
function _stbtt__fill_active_edges($scanline,$len,$e,$max_weight) {
 $scanline = $scanline|0;
 $len = $len|0;
 $e = $e|0;
 $max_weight = $max_weight|0;
 var $$06 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$0 = 0, $i$1 = 0, $i$12 = 0, $i$13 = 0, $j$0 = 0, $or$cond = 0, $w$05 = 0, $x0$04 = 0, $x0$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($e|0)==(0|0);
 if ($0) {
  return;
 } else {
  $$06 = $e;$w$05 = 0;$x0$04 = 0;
 }
 while(1) {
  $1 = ($w$05|0)==(0);
  $2 = HEAP32[$$06>>2]|0;
  $3 = ((($$06)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + ($w$05))|0;
  do {
   if ($1) {
    $x0$1 = $2;
   } else {
    $6 = ($5|0)==(0);
    if ($6) {
     $7 = $x0$04 >> 10;
     $8 = $2 >> 10;
     $9 = ($7|0)<($len|0);
     $10 = ($8|0)>(-1);
     $or$cond = $9 & $10;
     if ($or$cond) {
      $11 = ($7|0)==($8|0);
      if ($11) {
       $12 = (($scanline) + ($7)|0);
       $13 = HEAP8[$12>>0]|0;
       $14 = $13&255;
       $15 = (($2) - ($x0$04))|0;
       $16 = Math_imul($15, $max_weight)|0;
       $17 = $16 >>> 10;
       $18 = (($14) + ($17))|0;
       $19 = $18&255;
       HEAP8[$12>>0] = $19;
       $x0$1 = $x0$04;
       break;
      }
      $20 = ($7|0)>(-1);
      if ($20) {
       $21 = (($scanline) + ($7)|0);
       $22 = HEAP8[$21>>0]|0;
       $23 = $22&255;
       $24 = $x0$04 & 1023;
       $25 = (1024 - ($24))|0;
       $26 = Math_imul($25, $max_weight)|0;
       $27 = $26 >>> 10;
       $28 = (($23) + ($27))|0;
       $29 = $28&255;
       HEAP8[$21>>0] = $29;
       $i$0 = $7;
      } else {
       $i$0 = -1;
      }
      $30 = ($8|0)<($len|0);
      if ($30) {
       $31 = (($scanline) + ($8)|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $2 & 1023;
       $35 = Math_imul($34, $max_weight)|0;
       $36 = $35 >>> 10;
       $37 = (($33) + ($36))|0;
       $38 = $37&255;
       HEAP8[$31>>0] = $38;
       $j$0 = $8;
      } else {
       $j$0 = $len;
      }
      $i$12 = (($i$0) + 1)|0;
      $39 = ($i$12|0)<($j$0|0);
      if ($39) {
       $i$13 = $i$12;
       while(1) {
        $40 = (($scanline) + ($i$13)|0);
        $41 = HEAP8[$40>>0]|0;
        $42 = $41&255;
        $43 = (($42) + ($max_weight))|0;
        $44 = $43&255;
        HEAP8[$40>>0] = $44;
        $i$1 = (($i$13) + 1)|0;
        $exitcond = ($i$1|0)==($j$0|0);
        if ($exitcond) {
         $x0$1 = $x0$04;
         break;
        } else {
         $i$13 = $i$1;
        }
       }
      } else {
       $x0$1 = $x0$04;
      }
     } else {
      $x0$1 = $x0$04;
     }
    } else {
     $x0$1 = $x0$04;
    }
   }
  } while(0);
  $45 = ((($$06)) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0|0);
  if ($47) {
   break;
  } else {
   $$06 = $46;$w$05 = $5;$x0$04 = $x0$1;
  }
 }
 return;
}
function _stbtt__add_point($points,$n,$x,$y) {
 $points = $points|0;
 $n = $n|0;
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($points|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($points) + ($n<<3)|0);
 HEAPF32[$1>>2] = $x;
 $2 = (((($points) + ($n<<3)|0)) + 4|0);
 HEAPF32[$2>>2] = $y;
 return;
}
function _stbtt__tesselate_curve($points,$num_points,$x0,$y0,$x1,$y1,$x2,$y2,$objspace_flatness_squared,$n) {
 $points = $points|0;
 $num_points = $num_points|0;
 $x0 = +$x0;
 $y0 = +$y0;
 $x1 = +$x1;
 $y1 = +$y1;
 $x2 = +$x2;
 $y2 = +$y2;
 $objspace_flatness_squared = +$objspace_flatness_squared;
 $n = $n|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $n$tr5 = 0, $x0$tr1 = 0.0, $x0$tr1$phi = 0.0, $x1$tr3 = 0.0, $y0$tr2 = 0.0, $y0$tr2$phi = 0.0, $y1$tr4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x1 * 2.0;
 $1 = $0 + $x0;
 $2 = $1 + $x2;
 $3 = $2 * 0.25;
 $4 = $y1 * 2.0;
 $5 = $4 + $y0;
 $6 = $5 + $y2;
 $7 = $6 * 0.25;
 $8 = ($n|0)>(16);
 if ($8) {
  return;
 }
 $9 = $y2 + $y0;
 $10 = $9 * 0.5;
 $11 = $10 - $7;
 $12 = $x2 + $x0;
 $13 = $12 * 0.5;
 $14 = $13 - $3;
 $16 = $14;$18 = $11;$26 = $3;$27 = $7;$n$tr5 = $n;$x0$tr1 = $x0;$x1$tr3 = $x1;$y0$tr2 = $y0;$y1$tr4 = $y1;
 while(1) {
  $15 = $16 * $16;
  $17 = $18 * $18;
  $19 = $15 + $17;
  $20 = $19 > $objspace_flatness_squared;
  if (!($20)) {
   break;
  }
  $21 = $x0$tr1 + $x1$tr3;
  $22 = $21 * 0.5;
  $23 = $y0$tr2 + $y1$tr4;
  $24 = $23 * 0.5;
  $25 = (($n$tr5) + 1)|0;
  _stbtt__tesselate_curve($points,$num_points,$x0$tr1,$y0$tr2,$22,$24,$26,$27,$objspace_flatness_squared,$25);
  $28 = $x1$tr3 + $x2;
  $29 = $28 * 0.5;
  $30 = $y1$tr4 + $y2;
  $31 = $30 * 0.5;
  $32 = $29 * 2.0;
  $33 = $26 + $32;
  $34 = $33 + $x2;
  $35 = $34 * 0.25;
  $36 = $31 * 2.0;
  $37 = $27 + $36;
  $38 = $37 + $y2;
  $39 = $38 * 0.25;
  $40 = $26 + $x2;
  $41 = $40 * 0.5;
  $42 = $41 - $35;
  $43 = $27 + $y2;
  $44 = $43 * 0.5;
  $45 = $44 - $39;
  $46 = ($n$tr5|0)>(15);
  if ($46) {
   label = 6;
   break;
  } else {
   $y0$tr2$phi = $27;$x0$tr1$phi = $26;$16 = $42;$18 = $45;$26 = $35;$27 = $39;$n$tr5 = $25;$x1$tr3 = $29;$y1$tr4 = $31;$y0$tr2 = $y0$tr2$phi;$x0$tr1 = $x0$tr1$phi;
  }
 }
 if ((label|0) == 6) {
  return;
 }
 $47 = HEAP32[$num_points>>2]|0;
 _stbtt__add_point($points,$47,$x2,$y2);
 $48 = HEAP32[$num_points>>2]|0;
 $49 = (($48) + 1)|0;
 HEAP32[$num_points>>2] = $49;
 return;
}
function _stbrp__skyline_find_best_pos($agg$result,$c,$width,$height) {
 $agg$result = $agg$result|0;
 $c = $c|0;
 $width = $width|0;
 $height = $height|0;
 var $$best_y$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $9 = 0, $best$0$lcssa35 = 0, $best$026 = 0, $best$1 = 0, $best$1$lcssa = 0, $best$215 = 0, $best$3 = 0, $best$4 = 0, $best_waste$0$lcssa34 = 0, $best_waste$027 = 0, $best_waste$1 = 0, $best_waste$1$lcssa = 0, $best_waste$217 = 0, $best_waste$3 = 0, $best_x$016 = 0, $best_x$1 = 0, $best_x$2 = 0, $best_y$0$lcssa36 = 0;
 var $best_y$024 = 0, $best_y$1 = 0, $best_y$1$lcssa = 0, $best_y$211 = 0, $best_y$3 = 0, $best_y$4 = 0, $node$0 = 0, $node$023 = 0, $node$028 = 0, $node$113 = 0, $node$2 = 0, $node$2$lcssa = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $prev$0$best$0 = 0, $prev$025 = 0, $prev$112 = 0, $prev$2 = 0, $prev$2$lcssa = 0;
 var $tail$0$lcssa = 0, $tail$020 = 0, $tail$114 = 0, $waste = 0, $waste2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $waste = sp + 4|0;
 $waste2 = sp;
 $0 = ((($c)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($width) + -1)|0;
 $3 = (($2) + ($1))|0;
 $4 = (($3|0) % ($1|0))&-1;
 $5 = (($3) - ($4))|0;
 $6 = (($5|0) % ($1|0))&-1;
 $7 = ($6|0)==(0);
 if (!($7)) {
  ___assert_fail((20376|0),(14880|0),325,(20400|0));
  // unreachable;
 }
 $8 = ((($c)) + 24|0);
 $node$023 = HEAP32[$8>>2]|0;
 $9 = HEAP16[$node$023>>1]|0;
 $10 = $9&65535;
 $11 = (($10) + ($5))|0;
 $12 = HEAP32[$c>>2]|0;
 $13 = ($11|0)>($12|0);
 if ($13) {
  $81 = 0;$best$0$lcssa35 = 0;$best_waste$0$lcssa34 = 1073741824;$best_y$0$lcssa36 = 1073741824;
 } else {
  $14 = ((($c)) + 16|0);
  $15 = ((($c)) + 4|0);
  $16 = $10;$best$026 = 0;$best_waste$027 = 1073741824;$best_y$024 = 1073741824;$node$028 = $node$023;$prev$025 = $8;
  while(1) {
   $17 = (_stbrp__skyline_find_min_y($node$028,$16,$5,$waste)|0);
   $18 = HEAP32[$14>>2]|0;
   $19 = ($18|0)==(0);
   do {
    if ($19) {
     $20 = ($17|0)<($best_y$024|0);
     $$best_y$0 = $20 ? $17 : $best_y$024;
     $prev$0$best$0 = $20 ? $prev$025 : $best$026;
     $best$1 = $prev$0$best$0;$best_waste$1 = $best_waste$027;$best_y$1 = $$best_y$0;
    } else {
     $21 = (($17) + ($height))|0;
     $22 = HEAP32[$15>>2]|0;
     $23 = ($21|0)>($22|0);
     if ($23) {
      $best$1 = $best$026;$best_waste$1 = $best_waste$027;$best_y$1 = $best_y$024;
     } else {
      $24 = ($17|0)<($best_y$024|0);
      if (!($24)) {
       $25 = ($17|0)==($best_y$024|0);
       $26 = HEAP32[$waste>>2]|0;
       $27 = ($26|0)<($best_waste$027|0);
       $or$cond = $25 & $27;
       if (!($or$cond)) {
        $best$1 = $best$026;$best_waste$1 = $best_waste$027;$best_y$1 = $best_y$024;
        break;
       }
      }
      $28 = HEAP32[$waste>>2]|0;
      $best$1 = $prev$025;$best_waste$1 = $28;$best_y$1 = $17;
     }
    }
   } while(0);
   $29 = ((($node$028)) + 4|0);
   $node$0 = HEAP32[$29>>2]|0;
   $30 = HEAP16[$node$0>>1]|0;
   $31 = $30&65535;
   $32 = (($31) + ($5))|0;
   $33 = HEAP32[$c>>2]|0;
   $34 = ($32|0)>($33|0);
   if ($34) {
    $best$1$lcssa = $best$1;$best_waste$1$lcssa = $best_waste$1;$best_y$1$lcssa = $best_y$1;
    break;
   } else {
    $16 = $31;$best$026 = $best$1;$best_waste$027 = $best_waste$1;$best_y$024 = $best_y$1;$node$028 = $node$0;$prev$025 = $29;
   }
  }
  $35 = ($best$1$lcssa|0)==(0|0);
  if ($35) {
   $81 = 0;$best$0$lcssa35 = 0;$best_waste$0$lcssa34 = $best_waste$1$lcssa;$best_y$0$lcssa36 = $best_y$1$lcssa;
  } else {
   $36 = HEAP32[$best$1$lcssa>>2]|0;
   $37 = HEAP16[$36>>1]|0;
   $38 = $37&65535;
   $81 = $38;$best$0$lcssa35 = $best$1$lcssa;$best_waste$0$lcssa34 = $best_waste$1$lcssa;$best_y$0$lcssa36 = $best_y$1$lcssa;
  }
 }
 $39 = ((($c)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(1);
 if (!($41)) {
  $best$4 = $best$0$lcssa35;$best_x$2 = $81;$best_y$4 = $best_y$0$lcssa36;
  HEAP32[$agg$result>>2] = $best_x$2;
  $79 = ((($agg$result)) + 4|0);
  HEAP32[$79>>2] = $best_y$4;
  $80 = ((($agg$result)) + 8|0);
  HEAP32[$80>>2] = $best$4;
  STACKTOP = sp;return;
 }
 $42 = HEAP32[$8>>2]|0;
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = ($44|0)<($5|0);
 if ($45) {
  $tail$020 = $42;
  while(1) {
   $48 = ((($tail$020)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = HEAP16[$49>>1]|0;
   $51 = $50&65535;
   $52 = ($51|0)<($5|0);
   if ($52) {
    $tail$020 = $49;
   } else {
    $tail$0$lcssa = $49;
    break;
   }
  }
 } else {
  $tail$0$lcssa = $42;
 }
 $46 = ($tail$0$lcssa|0)==(0|0);
 if ($46) {
  $best$4 = $best$0$lcssa35;$best_x$2 = $81;$best_y$4 = $best_y$0$lcssa36;
  HEAP32[$agg$result>>2] = $best_x$2;
  $79 = ((($agg$result)) + 4|0);
  HEAP32[$79>>2] = $best_y$4;
  $80 = ((($agg$result)) + 8|0);
  HEAP32[$80>>2] = $best$4;
  STACKTOP = sp;return;
 }
 $47 = ((($c)) + 4|0);
 $best$215 = $best$0$lcssa35;$best_waste$217 = $best_waste$0$lcssa34;$best_x$016 = $81;$best_y$211 = $best_y$0$lcssa36;$node$113 = $42;$prev$112 = $8;$tail$114 = $tail$0$lcssa;
 while(1) {
  $53 = HEAP16[$tail$114>>1]|0;
  $54 = $53&65535;
  $55 = (($54) - ($5))|0;
  $56 = ($55|0)>(-1);
  if ($56) {
   $node$2 = $node$113;$prev$2 = $prev$112;
  } else {
   label = 20;
   break;
  }
  while(1) {
   $57 = ((($node$2)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = HEAP16[$58>>1]|0;
   $60 = $59&65535;
   $61 = ($60|0)>($55|0);
   if ($61) {
    $node$2$lcssa = $node$2;$prev$2$lcssa = $prev$2;
    break;
   } else {
    $node$2 = $58;$prev$2 = $57;
   }
  }
  $62 = HEAP16[$node$2$lcssa>>1]|0;
  $63 = $62&65535;
  $64 = ($63|0)>($55|0);
  if ($64) {
   label = 23;
   break;
  }
  $65 = (_stbrp__skyline_find_min_y($node$2$lcssa,$55,$5,$waste2)|0);
  $66 = (($65) + ($height))|0;
  $67 = HEAP32[$47>>2]|0;
  $68 = ($66|0)<($67|0);
  $69 = ($65|0)<=($best_y$211|0);
  $or$cond3 = $69 & $68;
  do {
   if ($or$cond3) {
    $70 = ($65|0)<($best_y$211|0);
    if (!($70)) {
     $71 = HEAP32[$waste2>>2]|0;
     $72 = ($71|0)<($best_waste$217|0);
     if (!($72)) {
      $73 = ($71|0)==($best_waste$217|0);
      $74 = ($55|0)<($best_x$016|0);
      $or$cond2 = $74 & $73;
      if (!($or$cond2)) {
       $best$3 = $best$215;$best_waste$3 = $best_waste$217;$best_x$1 = $best_x$016;$best_y$3 = $best_y$211;
       break;
      }
     }
    }
    $75 = HEAP32[$waste2>>2]|0;
    $best$3 = $prev$2$lcssa;$best_waste$3 = $75;$best_x$1 = $55;$best_y$3 = $65;
   } else {
    $best$3 = $best$215;$best_waste$3 = $best_waste$217;$best_x$1 = $best_x$016;$best_y$3 = $best_y$211;
   }
  } while(0);
  $76 = ((($tail$114)) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)==(0|0);
  if ($78) {
   $best$4 = $best$3;$best_x$2 = $best_x$1;$best_y$4 = $best_y$3;
   label = 30;
   break;
  } else {
   $best$215 = $best$3;$best_waste$217 = $best_waste$3;$best_x$016 = $best_x$1;$best_y$211 = $best_y$3;$node$113 = $node$2$lcssa;$prev$112 = $prev$2$lcssa;$tail$114 = $77;
  }
 }
 if ((label|0) == 20) {
  ___assert_fail((20432|0),(14880|0),382,(20400|0));
  // unreachable;
 }
 else if ((label|0) == 23) {
  ___assert_fail((20448|0),(14880|0),388,(20400|0));
  // unreachable;
 }
 else if ((label|0) == 30) {
  HEAP32[$agg$result>>2] = $best_x$2;
  $79 = ((($agg$result)) + 4|0);
  HEAP32[$79>>2] = $best_y$4;
  $80 = ((($agg$result)) + 8|0);
  HEAP32[$80>>2] = $best$4;
  STACKTOP = sp;return;
 }
}
function _stbrp__skyline_find_min_y($first,$x0,$width,$pwaste) {
 $first = $first|0;
 $x0 = $x0|0;
 $width = $width|0;
 $pwaste = $pwaste|0;
 var $$ = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $min_y$0$lcssa = 0, $min_y$02 = 0, $min_y$1 = 0, $node$01 = 0, $visited_width$03 = 0, $visited_width$1 = 0, $waste_area$0$lcssa = 0, $waste_area$04 = 0, $waste_area$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($width) + ($x0))|0;
 $1 = HEAP16[$first>>1]|0;
 $2 = $1&65535;
 $3 = ($2|0)>($x0|0);
 if ($3) {
  ___assert_fail((20488|0),(14880|0),268,(20504|0));
  // unreachable;
 }
 $4 = ((($first)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ($7|0)>($x0|0);
 if (!($8)) {
  ___assert_fail((20536|0),(14880|0),275,(20504|0));
  // unreachable;
 }
 $9 = HEAP16[$first>>1]|0;
 $10 = $9&65535;
 $11 = ($10|0)<($0|0);
 if ($11) {
  $19 = $10;$min_y$02 = 0;$node$01 = $first;$visited_width$03 = 0;$waste_area$04 = 0;
 } else {
  $min_y$0$lcssa = 0;$waste_area$0$lcssa = 0;
  HEAP32[$pwaste>>2] = $waste_area$0$lcssa;
  return ($min_y$0$lcssa|0);
 }
 while(1) {
  $12 = ((($node$01)) + 2|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = ($14|0)>($min_y$02|0);
  do {
   if ($15) {
    $16 = (($14) - ($min_y$02))|0;
    $17 = Math_imul($16, $visited_width$03)|0;
    $18 = (($17) + ($waste_area$04))|0;
    $20 = ($19|0)<($x0|0);
    $21 = ((($node$01)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP16[$22>>1]|0;
    $24 = $23&65535;
    if ($20) {
     $25 = (($24) - ($x0))|0;
     $$pn = $25;$min_y$1 = $14;$waste_area$1 = $18;
     break;
    } else {
     $26 = (($24) - ($19))|0;
     $$pn = $26;$min_y$1 = $14;$waste_area$1 = $18;
     break;
    }
   } else {
    $27 = ((($node$01)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = HEAP16[$28>>1]|0;
    $30 = $29&65535;
    $31 = (($30) - ($19))|0;
    $32 = (($31) + ($visited_width$03))|0;
    $33 = ($32|0)>($width|0);
    $34 = (($width) - ($visited_width$03))|0;
    $$ = $33 ? $34 : $31;
    $35 = (($min_y$02) - ($14))|0;
    $36 = Math_imul($$, $35)|0;
    $37 = (($36) + ($waste_area$04))|0;
    $$pn = $$;$min_y$1 = $min_y$02;$waste_area$1 = $37;
   }
  } while(0);
  $visited_width$1 = (($$pn) + ($visited_width$03))|0;
  $38 = ((($node$01)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = ($41|0)<($0|0);
  if ($42) {
   $19 = $41;$min_y$02 = $min_y$1;$node$01 = $39;$visited_width$03 = $visited_width$1;$waste_area$04 = $waste_area$1;
  } else {
   $min_y$0$lcssa = $min_y$1;$waste_area$0$lcssa = $waste_area$1;
   break;
  }
 }
 HEAP32[$pwaste>>2] = $waste_area$0$lcssa;
 return ($min_y$0$lcssa|0);
}
function _compute_stereo_samples($output,$num_c,$data,$d_offset,$len) {
 $output = $output|0;
 $num_c = $num_c|0;
 $data = $data|0;
 $d_offset = $d_offset|0;
 $len = $len|0;
 var $$n$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0;
 var $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $buffer = 0, $exitcond = 0, $exitcond23 = 0, $exitcond27 = 0, $exitcond28 = 0, $exitcond34 = 0, $i$09 = 0, $i$17 = 0, $i$26 = 0, $i$313 = 0, $indvars$iv$next30 = 0, $indvars$iv$next32 = 0, $indvars$iv29 = 0, $indvars$iv31 = 0, $j$011 = 0;
 var $n$015 = 0, $o$016 = 0, $smax = 0, $smax22 = 0, $smax26 = 0, $smax33 = 0, $v$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $buffer = sp;
 $0 = ($len|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = ($num_c|0)>(0);
 $2 = $len ^ -1;
 $indvars$iv29 = -2;$indvars$iv31 = -1;$n$015 = 16;$o$016 = 0;
 while(1) {
  $3 = $o$016 << 1;
  dest=$buffer; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $4 = (($o$016) + ($n$015))|0;
  $5 = ($4|0)>($len|0);
  $6 = (($len) - ($o$016))|0;
  $$n$0 = $5 ? $6 : $n$015;
  if ($1) {
   $7 = ($$n$0|0)>(0);
   $8 = (($o$016) + ($d_offset))|0;
   $9 = ($$n$0|0)>(0);
   $10 = (($o$016) + ($d_offset))|0;
   $11 = ($$n$0|0)>(0);
   $12 = (($o$016) + ($d_offset))|0;
   $13 = (($indvars$iv31) - ($n$015))|0;
   $14 = ($13|0)>($2|0);
   $smax = $14 ? $13 : $2;
   $15 = (($indvars$iv31) - ($smax))|0;
   $16 = (($indvars$iv31) - ($n$015))|0;
   $17 = ($16|0)>($2|0);
   $smax22 = $17 ? $16 : $2;
   $18 = (($indvars$iv31) - ($smax22))|0;
   $19 = (($indvars$iv31) - ($n$015))|0;
   $20 = ($19|0)>($2|0);
   $smax26 = $20 ? $19 : $2;
   $21 = (($indvars$iv31) - ($smax26))|0;
   $j$011 = 0;
   while(1) {
    $28 = ((20632 + (($num_c*6)|0)|0) + ($j$011)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = $30 & 6;
    if ((($31|0) == 6)) {
     if ($7) {
      $36 = (($data) + ($j$011<<2)|0);
      $37 = HEAP32[$36>>2]|0;
      $i$09 = 0;
      while(1) {
       $38 = (($8) + ($i$09))|0;
       $39 = (($37) + ($38<<2)|0);
       $40 = +HEAPF32[$39>>2];
       $41 = $i$09 << 1;
       $42 = (($buffer) + ($41<<2)|0);
       $43 = +HEAPF32[$42>>2];
       $44 = $40 + $43;
       HEAPF32[$42>>2] = $44;
       $45 = (($37) + ($38<<2)|0);
       $46 = +HEAPF32[$45>>2];
       $47 = $41 | 1;
       $48 = (($buffer) + ($47<<2)|0);
       $49 = +HEAPF32[$48>>2];
       $50 = $46 + $49;
       HEAPF32[$48>>2] = $50;
       $51 = (($i$09) + 1)|0;
       $exitcond27 = ($51|0)==($21|0);
       if ($exitcond27) {
        break;
       } else {
        $i$09 = $51;
       }
      }
     }
    } else if ((($31|0) == 2)) {
     if ($9) {
      $34 = (($data) + ($j$011<<2)|0);
      $35 = HEAP32[$34>>2]|0;
      $i$17 = 0;
      while(1) {
       $52 = (($10) + ($i$17))|0;
       $53 = (($35) + ($52<<2)|0);
       $54 = +HEAPF32[$53>>2];
       $55 = $i$17 << 1;
       $56 = (($buffer) + ($55<<2)|0);
       $57 = +HEAPF32[$56>>2];
       $58 = $54 + $57;
       HEAPF32[$56>>2] = $58;
       $59 = (($i$17) + 1)|0;
       $exitcond23 = ($59|0)==($18|0);
       if ($exitcond23) {
        break;
       } else {
        $i$17 = $59;
       }
      }
     }
    } else if ((($31|0) == 4)) {
     if ($11) {
      $32 = (($data) + ($j$011<<2)|0);
      $33 = HEAP32[$32>>2]|0;
      $i$26 = 0;
      while(1) {
       $60 = (($12) + ($i$26))|0;
       $61 = (($33) + ($60<<2)|0);
       $62 = +HEAPF32[$61>>2];
       $63 = $i$26 << 1;
       $64 = $63 | 1;
       $65 = (($buffer) + ($64<<2)|0);
       $66 = +HEAPF32[$65>>2];
       $67 = $62 + $66;
       HEAPF32[$65>>2] = $67;
       $68 = (($i$26) + 1)|0;
       $exitcond = ($68|0)==($15|0);
       if ($exitcond) {
        break;
       } else {
        $i$26 = $68;
       }
      }
     }
    }
    $69 = (($j$011) + 1)|0;
    $exitcond28 = ($69|0)==($num_c|0);
    if ($exitcond28) {
     break;
    } else {
     $j$011 = $69;
    }
   }
  }
  $22 = $$n$0 << 1;
  $23 = ($22|0)>(0);
  if ($23) {
   $24 = (($indvars$iv31) - ($n$015))|0;
   $25 = ($24|0)>($2|0);
   $smax33 = $25 ? $24 : $2;
   $26 = $smax33 << 1;
   $27 = (($indvars$iv29) - ($26))|0;
   $i$313 = 0;
   while(1) {
    $70 = (($buffer) + ($i$313<<2)|0);
    $71 = +HEAPF32[$70>>2];
    $72 = $71 + 384.0;
    $73 = (HEAPF32[tempDoublePtr>>2]=$72,HEAP32[tempDoublePtr>>2]|0);
    $74 = (($73) + -1136623616)|0;
    $75 = ($74>>>0)>(65535);
    $76 = ($73|0)<(1136656384);
    $77 = $76 ? 32768 : 32767;
    $v$0 = $75 ? $77 : $73;
    $78 = $v$0&65535;
    $79 = (($i$313) + ($3))|0;
    $80 = (($output) + ($79<<1)|0);
    HEAP16[$80>>1] = $78;
    $81 = (($i$313) + 1)|0;
    $exitcond34 = ($81|0)==($27|0);
    if ($exitcond34) {
     break;
    } else {
     $i$313 = $81;
    }
   }
  }
  $82 = (($o$016) + 16)|0;
  $83 = ($82|0)<($len|0);
  $indvars$iv$next32 = (($indvars$iv31) + -16)|0;
  $indvars$iv$next30 = (($indvars$iv29) + -32)|0;
  if ($83) {
   $indvars$iv29 = $indvars$iv$next30;$indvars$iv31 = $indvars$iv$next32;$n$015 = $$n$0;$o$016 = $82;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _get8($z) {
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $9 = ((($z)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_fgetc(($10|0))|0);
  $12 = ($11|0)==(-1);
  if ($12) {
   $13 = ((($z)) + 112|0);
   HEAP32[$13>>2] = 1;
   $$0 = 0;
   return ($$0|0);
  } else {
   $14 = $11&255;
   $$0 = $14;
   return ($$0|0);
  }
 } else {
  $3 = ((($z)) + 40|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($1>>>0)<($4>>>0);
  if ($5) {
   $7 = ((($1)) + 1|0);
   HEAP32[$0>>2] = $7;
   $8 = HEAP8[$1>>0]|0;
   $$0 = $8;
   return ($$0|0);
  } else {
   $6 = ((($z)) + 112|0);
   HEAP32[$6>>2] = 1;
   $$0 = 0;
   return ($$0|0);
  }
 }
 return (0)|0;
}
function _crc32_update($crc,$byte) {
 $crc = $crc|0;
 $byte = $byte|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $crc << 8;
 $1 = $byte&255;
 $2 = $crc >>> 24;
 $3 = $1 ^ $2;
 $4 = (20688 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 ^ $0;
 return ($6|0);
}
function _ilog($n) {
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(16384);
 if ($0) {
  $1 = ($n|0)<(16);
  if ($1) {
   $2 = (21712 + ($n)|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = $3 << 24 >> 24;
   $$0 = $4;
   return ($$0|0);
  }
  $5 = ($n|0)<(512);
  if ($5) {
   $6 = $n >> 5;
   $7 = (21712 + ($6)|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($9) + 5)|0;
   $$0 = $10;
   return ($$0|0);
  } else {
   $11 = $n >> 10;
   $12 = (21712 + ($11)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (($14) + 10)|0;
   $$0 = $15;
   return ($$0|0);
  }
 }
 $16 = ($n|0)<(16777216);
 if (!($16)) {
  $28 = ($n|0)<(536870912);
  if (!($28)) {
   $$0 = 0;
   return ($$0|0);
  }
  $29 = $n >> 25;
  $30 = (21712 + ($29)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = (($32) + 25)|0;
  $$0 = $33;
  return ($$0|0);
 }
 $17 = ($n|0)<(524288);
 if ($17) {
  $18 = $n >> 15;
  $19 = (21712 + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = (($21) + 15)|0;
  $$0 = $22;
  return ($$0|0);
 } else {
  $23 = $n >> 20;
  $24 = (21712 + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = (($26) + 20)|0;
  $$0 = $27;
  return ($$0|0);
 }
 return (0)|0;
}
function _skip($z,$n) {
 $z = $z|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $8 = ((($z)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_ftell(($9|0))|0);
  $11 = HEAP32[$8>>2]|0;
  $12 = (($10) + ($n))|0;
  (_fseek(($11|0),($12|0),0)|0);
  return;
 }
 $3 = (($1) + ($n)|0);
 HEAP32[$0>>2] = $3;
 $4 = ((($z)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  return;
 }
 $7 = ((($z)) + 112|0);
 HEAP32[$7>>2] = 1;
 return;
}
function _vorbis_decode_initial($f,$p_left_start,$p_left_end,$p_right_start,$p_right_end,$mode) {
 $f = $f|0;
 $p_left_start = $p_left_start|0;
 $p_left_end = $p_left_end|0;
 $p_right_start = $p_right_start|0;
 $p_right_end = $p_right_end|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $next$0 = 0, $or$cond = 0, $or$cond3 = 0, $phitmp = 0, $prev$0 = 0, $storemerge = 0, $storemerge4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 1524|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($f)) + 1520|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($f)) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($f)) + 48|0);
 while(1) {
  $8 = (_maybe_start_packet($f)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = 0;
   label = 24;
   break;
  }
  $10 = (_get_bits($f,1)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   label = 9;
   break;
  }
  $12 = HEAP8[$5>>0]|0;
  $13 = ($12<<24>>24)==(0);
  if (!($13)) {
   label = 7;
   break;
  }
  while(1) {
   $14 = (_get8_packet($f)|0);
   $15 = ($14|0)==(-1);
   if ($15) {
    break;
   }
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $$0 = 0;
   label = 24;
   break;
  }
 }
 if ((label|0) == 7) {
  _error($f,35);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 9) {
  $16 = ((($f)) + 96|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $19 = ((($f)) + 100|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($f)) + 108|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if (!($23)) {
    ___assert_fail((21808|0),(20576|0),2795,(21864|0));
    // unreachable;
   }
  }
  $24 = ((($f)) + 424|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + -1)|0;
  $27 = (_ilog($26)|0);
  $28 = (_get_bits($f,$27)|0);
  $29 = ($28|0)==(-1);
  if ($29) {
   $$0 = 0;
   return ($$0|0);
  }
  $30 = HEAP32[$24>>2]|0;
  $31 = ($28|0)<($30|0);
  if (!($31)) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$mode>>2] = $28;
  $32 = (((($f)) + 428|0) + (($28*6)|0)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = ($33<<24>>24)==(0);
  if ($34) {
   $39 = ((($f)) + 128|0);
   $40 = HEAP32[$39>>2]|0;
   $n$0 = $40;$next$0 = 0;$prev$0 = 0;
  } else {
   $35 = ((($f)) + 132|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_get_bits($f,1)|0);
   $38 = (_get_bits($f,1)|0);
   $phitmp = ($37|0)!=(0);
   $n$0 = $36;$next$0 = $38;$prev$0 = $phitmp;
  }
  $41 = $n$0 >> 1;
  $42 = HEAP8[$32>>0]|0;
  $43 = ($42<<24>>24)==(0);
  $or$cond = $prev$0 | $43;
  if ($or$cond) {
   HEAP32[$p_left_start>>2] = 0;
   $storemerge = $41;
  } else {
   $44 = ((($f)) + 128|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($n$0) - ($45))|0;
   $47 = $46 >> 2;
   HEAP32[$p_left_start>>2] = $47;
   $48 = HEAP32[$44>>2]|0;
   $49 = (($48) + ($n$0))|0;
   $50 = $49 >> 2;
   $storemerge = $50;
  }
  HEAP32[$p_left_end>>2] = $storemerge;
  $51 = HEAP8[$32>>0]|0;
  $52 = ($51<<24>>24)==(0);
  $53 = ($next$0|0)!=(0);
  $or$cond3 = $53 | $52;
  if ($or$cond3) {
   HEAP32[$p_right_start>>2] = $41;
   $storemerge4 = $n$0;
  } else {
   $54 = ($n$0*3)|0;
   $55 = ((($f)) + 128|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) - ($56))|0;
   $58 = $57 >> 2;
   HEAP32[$p_right_start>>2] = $58;
   $59 = HEAP32[$55>>2]|0;
   $60 = (($59) + ($54))|0;
   $61 = $60 >> 2;
   $storemerge4 = $61;
  }
  HEAP32[$p_right_end>>2] = $storemerge4;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 24) {
  return ($$0|0);
 }
 return (0)|0;
}
function _flush_packet($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 while(1) {
  $0 = (_get8_packet_raw($f)|0);
  $1 = ($0|0)==(-1);
  if ($1) {
   break;
  }
 }
 return;
}
function _maybe_start_packet($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 1396|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  $3 = (_get8($f)|0);
  $4 = ((($f)) + 112|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $$0 = 0;
   return ($$0|0);
  }
  $7 = ($3<<24>>24)==(79);
  if (!($7)) {
   _error($f,30);
   $$0 = 0;
   return ($$0|0);
  }
  $8 = (_get8($f)|0);
  $9 = ($8<<24>>24)==(103);
  if (!($9)) {
   _error($f,30);
   $$0 = 0;
   return ($$0|0);
  }
  $10 = (_get8($f)|0);
  $11 = ($10<<24>>24)==(103);
  if (!($11)) {
   _error($f,30);
   $$0 = 0;
   return ($$0|0);
  }
  $12 = (_get8($f)|0);
  $13 = ($12<<24>>24)==(83);
  if (!($13)) {
   _error($f,30);
   $$0 = 0;
   return ($$0|0);
  }
  $14 = (_start_page_no_capturepattern($f)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$0 = 0;
   return ($$0|0);
  }
  $16 = ((($f)) + 1391|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 & 1;
  $19 = ($18<<24>>24)==(0);
  if (!($19)) {
   $20 = ((($f)) + 1400|0);
   HEAP32[$20>>2] = 0;
   $21 = ((($f)) + 1392|0);
   HEAP8[$21>>0] = 0;
   _error($f,32);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $22 = (_start_packet($f)|0);
 $$0 = $22;
 return ($$0|0);
}
function _start_page_no_capturepattern($f) {
 $f = $f|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$in = 0, $i$0$lcssa15 = 0, $i1$04 = 0, $len$0$lcssa = 0, $len$03 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_get8($f)|0);
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  _error($f,31);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_get8($f)|0);
 $3 = ((($f)) + 1391|0);
 HEAP8[$3>>0] = $2;
 $4 = (_get32($f)|0);
 $5 = (_get32($f)|0);
 (_get32($f)|0);
 $6 = (_get32($f)|0);
 $7 = ((($f)) + 1128|0);
 HEAP32[$7>>2] = $6;
 (_get32($f)|0);
 $8 = (_get8($f)|0);
 $9 = $8&255;
 $10 = ((($f)) + 1132|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($f)) + 1136|0);
 $12 = (_getn($f,$11,$9)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  _error($f,10);
  $$0 = 0;
  return ($$0|0);
 }
 $14 = ((($f)) + 1420|0);
 HEAP32[$14>>2] = -2;
 $15 = $5 & $4;
 $16 = ($15|0)==(-1);
 L9: do {
  if (!($16)) {
   $17 = HEAP32[$10>>2]|0;
   $i$0$in = $17;
   while(1) {
    $i$0 = (($i$0$in) + -1)|0;
    $18 = ($i$0$in|0)>(0);
    if (!($18)) {
     break L9;
    }
    $19 = (((($f)) + 1136|0) + ($i$0)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(-1);
    if ($21) {
     $i$0$in = $i$0;
    } else {
     $i$0$lcssa15 = $i$0;
     break;
    }
   }
   HEAP32[$14>>2] = $i$0$lcssa15;
   $22 = ((($f)) + 1424|0);
   HEAP32[$22>>2] = $4;
  }
 } while(0);
 $23 = ((($f)) + 1393|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ($24<<24>>24)==(0);
 if (!($25)) {
  $26 = HEAP32[$10>>2]|0;
  $27 = ($26|0)>(0);
  if ($27) {
   $28 = HEAP32[$10>>2]|0;
   $i1$04 = 0;$len$03 = 0;
   while(1) {
    $29 = (((($f)) + 1136|0) + ($i1$04)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = (($31) + ($len$03))|0;
    $33 = (($i1$04) + 1)|0;
    $34 = ($33|0)<($28|0);
    if ($34) {
     $i1$04 = $33;$len$03 = $32;
    } else {
     $$lcssa14 = $32;
     break;
    }
   }
   $phitmp = (($$lcssa14) + 27)|0;
   $$lcssa = $28;$len$0$lcssa = $phitmp;
  } else {
   $$lcssa = $26;$len$0$lcssa = 27;
  }
  $35 = ((($f)) + 52|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($len$0$lcssa) + ($$lcssa))|0;
  $38 = (($37) + ($36))|0;
  $39 = ((($f)) + 56|0);
  HEAP32[$39>>2] = $36;
  $40 = ((($f)) + 60|0);
  HEAP32[$40>>2] = $38;
  $41 = ((($f)) + 64|0);
  HEAP32[$41>>2] = $36;
  $42 = ((($f)) + 68|0);
  HEAP32[$42>>2] = 0;
  $43 = ((($f)) + 72|0);
  HEAP32[$43>>2] = $4;
 }
 $44 = ((($f)) + 1396|0);
 HEAP32[$44>>2] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _start_packet($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 1396|0);
 $1 = ((($f)) + 1391|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(-1);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (_start_page($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$0 = 0;
   label = 7;
   break;
  }
  $6 = HEAP8[$1>>0]|0;
  $7 = $6 & 1;
  $8 = ($7<<24>>24)==(0);
  if (!($8)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  _error($f,32);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 6) {
  $9 = ((($f)) + 1400|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($f)) + 1412|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 1416|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 1392|0);
  HEAP8[$12>>0] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 7) {
  return ($$0|0);
 }
 return (0)|0;
}
function _start_page($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_capture_pattern($f)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _error($f,30);
  $$0 = 0;
  return ($$0|0);
 } else {
  $2 = (_start_page_no_capturepattern($f)|0);
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _capture_pattern($f) {
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_get8($f)|0);
 $1 = ($0<<24>>24)==(79);
 if ($1) {
  $2 = (_get8($f)|0);
  $3 = ($2<<24>>24)==(103);
  if ($3) {
   $4 = (_get8($f)|0);
   $5 = ($4<<24>>24)==(103);
   if ($5) {
    $6 = (_get8($f)|0);
    $7 = ($6<<24>>24)==(83);
    $$ = $7&1;
    $$0 = $$;
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _get8_packet_raw($f) {
 $f = $f|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 1392|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = ((($f)) + 1400|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   $$0 = -1;
   return ($$0|0);
  }
  $6 = (_next_segment($f)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $$0 = -1;
   return ($$0|0);
  }
  $$pr = HEAP8[$0>>0]|0;
  $8 = ($$pr<<24>>24)==(0);
  if ($8) {
   ___assert_fail((21728|0),(20576|0),1129,(21752|0));
   // unreachable;
  } else {
   $10 = $$pr;
  }
 } else {
  $10 = $1;
 }
 $9 = (($10) + -1)<<24>>24;
 HEAP8[$0>>0] = $9;
 $11 = ((($f)) + 1416|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$11>>2] = $13;
 $14 = (_get8($f)|0);
 $15 = $14&255;
 $$0 = $15;
 return ($$0|0);
}
function _next_segment($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 1400|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($f)) + 1396|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  $6 = ((($f)) + 1132|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + -1)|0;
  $9 = ((($f)) + 1404|0);
  HEAP32[$9>>2] = $8;
  $10 = (_start_page($f)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   HEAP32[$0>>2] = 1;
   $$0 = 0;
   return ($$0|0);
  }
  $12 = ((($f)) + 1391|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 & 1;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   _error($f,32);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $16 = HEAP32[$3>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$3>>2] = $17;
 $18 = (((($f)) + 1136|0) + ($16)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($19<<24>>24)==(-1);
 if (!($21)) {
  HEAP32[$0>>2] = 1;
  $22 = HEAP32[$3>>2]|0;
  $23 = (($22) + -1)|0;
  $24 = ((($f)) + 1404|0);
  HEAP32[$24>>2] = $23;
 }
 $25 = HEAP32[$3>>2]|0;
 $26 = ((($f)) + 1132|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($25|0)<($27|0);
 if (!($28)) {
  HEAP32[$3>>2] = -1;
 }
 $29 = ((($f)) + 1392|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  ___assert_fail((21768|0),(20576|0),1115,(21792|0));
  // unreachable;
 }
 HEAP8[$29>>0] = $19;
 $$0 = $20;
 return ($$0|0);
}
function _get_bits($f,$n) {
 $f = $f|0;
 $n = $n|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 1412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($1|0)<($n|0);
 L4: do {
  if ($3) {
   $4 = ($n|0)>(24);
   if ($4) {
    $5 = (_get_bits($f,24)|0);
    $6 = (($n) + -24)|0;
    $7 = (_get_bits($f,$6)|0);
    $8 = $7 << 24;
    $9 = (($8) + ($5))|0;
    return ($9|0);
   }
   $10 = ($1|0)==(0);
   if ($10) {
    $11 = ((($f)) + 1408|0);
    HEAP32[$11>>2] = 0;
   }
   $12 = HEAP32[$0>>2]|0;
   $13 = ($12|0)<($n|0);
   if ($13) {
    $14 = ((($f)) + 1408|0);
    while(1) {
     $15 = (_get8_packet_raw($f)|0);
     $16 = ($15|0)==(-1);
     if ($16) {
      break;
     }
     $17 = HEAP32[$0>>2]|0;
     $18 = $15 << $17;
     $19 = HEAP32[$14>>2]|0;
     $20 = (($19) + ($18))|0;
     HEAP32[$14>>2] = $20;
     $21 = HEAP32[$0>>2]|0;
     $22 = (($21) + 8)|0;
     HEAP32[$0>>2] = $22;
     $23 = ($22|0)<($n|0);
     if (!($23)) {
      $24 = $22;
      break L4;
     }
    }
    HEAP32[$0>>2] = -1;
    $$0 = 0;
    return ($$0|0);
   } else {
    $24 = $12;
   }
  } else {
   $$pr = HEAP32[$0>>2]|0;
   $24 = $$pr;
  }
 } while(0);
 $25 = ($24|0)<(0);
 if ($25) {
  $$0 = 0;
  return ($$0|0);
 }
 $26 = ((($f)) + 1408|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = 1 << $n;
 $29 = (($28) + -1)|0;
 $30 = $27 & $29;
 $31 = $27 >>> $n;
 HEAP32[$26>>2] = $31;
 $32 = HEAP32[$0>>2]|0;
 $33 = (($32) - ($n))|0;
 HEAP32[$0>>2] = $33;
 $$0 = $30;
 return ($$0|0);
}
function _setup_malloc($f,$sz) {
 $f = $f|0;
 $sz = $sz|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($sz) + 3)|0;
 $1 = $0 & -4;
 $2 = ((($f)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($f)) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $15 = ($1|0)==(0);
  if ($15) {
   $$0 = 0;
   return ($$0|0);
  }
  $16 = (_malloc($1)|0);
  $$0 = $16;
  return ($$0|0);
 } else {
  $8 = ((($f)) + 104|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($1))|0;
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)>($12|0);
  if ($13) {
   $$0 = 0;
   return ($$0|0);
  }
  $14 = (($6) + ($9)|0);
  HEAP32[$8>>2] = $10;
  $$0 = $14;
  return ($$0|0);
 }
 return (0)|0;
}
function _vorbis_validate($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_memcmp($data,22240,6)|0);
 $1 = ($0|0)==(0);
 $2 = $1&1;
 return ($2|0);
}
function _crc32_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $0 = $i$03 << 24;
  $1 = $i$03 << 25;
  $2 = $0 >> 31;
  $3 = $2 & 79764919;
  $4 = $3 ^ $1;
  $5 = $4 << 1;
  $6 = $1 >> 31;
  $7 = $6 & 79764919;
  $8 = $7 ^ $5;
  $9 = $8 << 1;
  $10 = $5 >> 31;
  $11 = $10 & 79764919;
  $12 = $11 ^ $9;
  $13 = $12 << 1;
  $14 = $9 >> 31;
  $15 = $14 & 79764919;
  $16 = $15 ^ $13;
  $17 = $16 << 1;
  $18 = $13 >> 31;
  $19 = $18 & 79764919;
  $20 = $19 ^ $17;
  $21 = $20 << 1;
  $22 = $17 >> 31;
  $23 = $22 & 79764919;
  $24 = $23 ^ $21;
  $25 = $24 << 1;
  $26 = $21 >> 31;
  $27 = $26 & 79764919;
  $28 = $27 ^ $25;
  $29 = $28 << 1;
  $30 = $25 >> 31;
  $31 = $30 & 79764919;
  $32 = $31 ^ $29;
  $33 = (20688 + ($i$03<<2)|0);
  HEAP32[$33>>2] = $32;
  $34 = (($i$03) + 1)|0;
  $exitcond = ($34|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $i$03 = $34;
  }
 }
 return;
}
function _setup_temp_malloc($f,$sz) {
 $f = $f|0;
 $sz = $sz|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($sz) + 3)|0;
 $1 = $0 & -4;
 $2 = ((($f)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $13 = (_malloc($1)|0);
  $$0 = $13;
  return ($$0|0);
 }
 $5 = ((($f)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - ($1))|0;
 $8 = ((($f)) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)<($9|0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$5>>2] = $7;
 $11 = HEAP32[$2>>2]|0;
 $12 = (($11) + ($7)|0);
 $$0 = $12;
 return ($$0|0);
}
function _setup_temp_free($f,$p,$sz) {
 $f = $f|0;
 $p = $p|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _free($p);
  return;
 } else {
  $3 = (($sz) + 3)|0;
  $4 = $3 & -4;
  $5 = ((($f)) + 108|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($4))|0;
  HEAP32[$5>>2] = $7;
  return;
 }
}
function _compute_codewords($c,$len,$n,$values) {
 $c = $c|0;
 $len = $len|0;
 $n = $n|0;
 $values = $values|0;
 var $$lcssa = 0, $$lcssa32 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $available = 0, $i$012 = 0, $i$1 = 0, $i$1$in = 0, $i$1$in$ph = 0, $i$1$lcssa31 = 0, $k$0$lcssa = 0;
 var $k$014 = 0, $m$0$ph = 0, $y$010 = 0, $z$0$lcssa = 0, $z$07 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $available = sp;
 dest=$available; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ($n|0)>(0);
 L1: do {
  if ($0) {
   $k$014 = 0;
   while(1) {
    $1 = (($len) + ($k$014)|0);
    $2 = HEAP8[$1>>0]|0;
    $3 = ($2<<24>>24)==(-1);
    if (!($3)) {
     $k$0$lcssa = $k$014;
     break L1;
    }
    $4 = (($k$014) + 1)|0;
    $5 = ($4|0)<($n|0);
    if ($5) {
     $k$014 = $4;
    } else {
     $k$0$lcssa = $4;
     break;
    }
   }
  } else {
   $k$0$lcssa = 0;
  }
 } while(0);
 $6 = ($k$0$lcssa|0)==($n|0);
 if ($6) {
  $7 = ((($c)) + 2092|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   STACKTOP = sp;return;
  } else {
   ___assert_fail((22168|0),(20576|0),656,(22192|0));
   // unreachable;
  }
 }
 $10 = (($len) + ($k$0$lcssa)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 _add_entry($c,0,$k$0$lcssa,0,$12,$values);
 $13 = HEAP8[$10>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  $i$1$in$ph = $k$0$lcssa;$m$0$ph = 1;
 } else {
  $15 = HEAP8[$10>>0]|0;
  $16 = $15&255;
  $i$012 = 1;
  while(1) {
   $17 = (32 - ($i$012))|0;
   $18 = 1 << $17;
   $19 = (($available) + ($i$012<<2)|0);
   HEAP32[$19>>2] = $18;
   $20 = (($i$012) + 1)|0;
   $21 = ($i$012|0)<($16|0);
   if ($21) {
    $i$012 = $20;
   } else {
    $i$1$in$ph = $k$0$lcssa;$m$0$ph = 1;
    break;
   }
  }
 }
 L16: while(1) {
  $i$1$in = $i$1$in$ph;
  while(1) {
   $i$1 = (($i$1$in) + 1)|0;
   $22 = ($i$1|0)<($n|0);
   if (!($22)) {
    label = 22;
    break L16;
   }
   $23 = (($len) + ($i$1)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = ($24<<24>>24)==(-1);
   if ($25) {
    $i$1$in = $i$1;
   } else {
    $$lcssa = $23;$$lcssa32 = $24;$i$1$lcssa31 = $i$1;
    break;
   }
  }
  $26 = $$lcssa32&255;
  $27 = ($$lcssa32<<24>>24)==(0);
  L22: do {
   if ($27) {
    $z$0$lcssa = $26;
   } else {
    $z$07 = $26;
    while(1) {
     $28 = (($available) + ($z$07<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(0);
     if (!($30)) {
      $z$0$lcssa = $z$07;
      break L22;
     }
     $31 = (($z$07) + -1)|0;
     $32 = ($z$07|0)>(1);
     if ($32) {
      $z$07 = $31;
     } else {
      $z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $33 = ($z$0$lcssa|0)==(0);
  if ($33) {
   label = 17;
   break;
  }
  $34 = (($available) + ($z$0$lcssa<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$34>>2] = 0;
  $36 = (_bit_reverse($35)|0);
  $37 = (($m$0$ph) + 1)|0;
  $38 = HEAP8[$$lcssa>>0]|0;
  $39 = $38&255;
  _add_entry($c,$36,$i$1$lcssa31,$m$0$ph,$39,$values);
  $40 = HEAP8[$$lcssa>>0]|0;
  $41 = $40&255;
  $42 = ($41|0)>($z$0$lcssa|0);
  if ($42) {
   $y$010 = $41;
  } else {
   $i$1$in$ph = $i$1$lcssa31;$m$0$ph = $37;
   continue;
  }
  while(1) {
   $43 = (($available) + ($y$010<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0);
   if (!($45)) {
    label = 20;
    break L16;
   }
   $46 = (32 - ($y$010))|0;
   $47 = 1 << $46;
   $48 = (($47) + ($35))|0;
   HEAP32[$43>>2] = $48;
   $49 = (($y$010) + -1)|0;
   $50 = ($49|0)>($z$0$lcssa|0);
   if ($50) {
    $y$010 = $49;
   } else {
    $i$1$in$ph = $i$1$lcssa31;$m$0$ph = $37;
    continue L16;
   }
  }
 }
 if ((label|0) == 17) {
  ___assert_fail((27216|0),(20576|0),677,(22192|0));
  // unreachable;
 }
 else if ((label|0) == 20) {
  ___assert_fail((22216|0),(20576|0),684,(22192|0));
  // unreachable;
 }
 else if ((label|0) == 22) {
  STACKTOP = sp;return;
 }
}
function _compute_sorted_huffman($c,$lengths,$values) {
 $c = $c|0;
 $lengths = $lengths|0;
 $values = $values|0;
 var $$ = 0, $$in = 0, $$pn = 0, $$sink$in = 0, $$sink1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $i$010 = 0, $i$114 = 0, $i$25 = 0, $k$0$lcssa = 0;
 var $k$09 = 0, $k$1 = 0, $n$04 = 0, $x$0$ = 0, $x$0$lcssa = 0, $x$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 23|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $10 = ((($c)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)>(0);
  if ($12) {
   $13 = ((($c)) + 32|0);
   $14 = ((($c)) + 2084|0);
   $i$010 = 0;$k$09 = 0;
   while(1) {
    $15 = (($lengths) + ($i$010)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = (_include_in_sort($c,$16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     $k$1 = $k$09;
    } else {
     $19 = HEAP32[$13>>2]|0;
     $20 = (($19) + ($i$010<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (_bit_reverse($21)|0);
     $23 = (($k$09) + 1)|0;
     $24 = HEAP32[$14>>2]|0;
     $25 = (($24) + ($k$09<<2)|0);
     HEAP32[$25>>2] = $22;
     $k$1 = $23;
    }
    $26 = (($i$010) + 1)|0;
    $27 = HEAP32[$10>>2]|0;
    $28 = ($26|0)<($27|0);
    if ($28) {
     $i$010 = $26;$k$09 = $k$1;
    } else {
     $k$0$lcssa = $k$1;
     break;
    }
   }
  } else {
   $k$0$lcssa = 0;
  }
  $29 = ((($c)) + 2092|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($k$0$lcssa|0)==($30|0);
  if (!($31)) {
   ___assert_fail((22056|0),(20576|0),751,(22080|0));
   // unreachable;
  }
 } else {
  $3 = ((($c)) + 2092|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>(0);
  if ($5) {
   $6 = ((($c)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($c)) + 2084|0);
   $9 = HEAP32[$8>>2]|0;
   $i$114 = 0;
   while(1) {
    $32 = (($7) + ($i$114<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (_bit_reverse($33)|0);
    $35 = (($9) + ($i$114<<2)|0);
    HEAP32[$35>>2] = $34;
    $36 = (($i$114) + 1)|0;
    $37 = HEAP32[$3>>2]|0;
    $38 = ($36|0)<($37|0);
    if ($38) {
     $i$114 = $36;
    } else {
     break;
    }
   }
  }
 }
 $39 = ((($c)) + 2084|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($c)) + 2092|0);
 $42 = HEAP32[$41>>2]|0;
 _qsort($40,$42,4,5);
 $43 = HEAP32[$41>>2]|0;
 $44 = HEAP32[$39>>2]|0;
 $45 = (($44) + ($43<<2)|0);
 HEAP32[$45>>2] = -1;
 $46 = HEAP8[$0>>0]|0;
 $47 = ($46<<24>>24)==(0);
 $48 = ((($c)) + 4|0);
 $$in = $47 ? $48 : $41;
 $49 = HEAP32[$$in>>2]|0;
 $50 = ($49|0)>(0);
 if (!($50)) {
  return;
 }
 $51 = ((($c)) + 32|0);
 $52 = ((($c)) + 2088|0);
 $53 = ((($c)) + 2088|0);
 $54 = ((($c)) + 8|0);
 $i$25 = 0;
 L20: while(1) {
  $55 = HEAP8[$0>>0]|0;
  $56 = ($55<<24>>24)==(0);
  if ($56) {
   $$pn = $i$25;
  } else {
   $57 = (($values) + ($i$25<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $$pn = $58;
  }
  $$sink$in = (($lengths) + ($$pn)|0);
  $$sink1 = HEAP8[$$sink$in>>0]|0;
  $59 = (_include_in_sort($c,$$sink1)|0);
  $60 = ($59|0)==(0);
  do {
   if (!($60)) {
    $61 = HEAP32[$51>>2]|0;
    $62 = (($61) + ($i$25<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (_bit_reverse($63)|0);
    $65 = HEAP32[$41>>2]|0;
    $66 = ($65|0)>(1);
    if ($66) {
     $67 = HEAP32[$39>>2]|0;
     $n$04 = $65;$x$03 = 0;
     while(1) {
      $68 = $n$04 >> 1;
      $69 = (($68) + ($x$03))|0;
      $70 = (($67) + ($69<<2)|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71>>>0)>($64>>>0);
      $73 = (($n$04) - ($68))|0;
      $x$0$ = $72 ? $x$03 : $69;
      $$ = $72 ? $68 : $73;
      $74 = ($$|0)>(1);
      if ($74) {
       $n$04 = $$;$x$03 = $x$0$;
      } else {
       $x$0$lcssa = $x$0$;
       break;
      }
     }
    } else {
     $x$0$lcssa = 0;
    }
    $75 = HEAP32[$39>>2]|0;
    $76 = (($75) + ($x$0$lcssa<<2)|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==($64|0);
    if (!($78)) {
     label = 21;
     break L20;
    }
    $79 = HEAP8[$0>>0]|0;
    $80 = ($79<<24>>24)==(0);
    if ($80) {
     $87 = HEAP32[$52>>2]|0;
     $88 = (($87) + ($x$0$lcssa<<2)|0);
     HEAP32[$88>>2] = $i$25;
     break;
    } else {
     $81 = (($values) + ($i$25<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = HEAP32[$53>>2]|0;
     $84 = (($83) + ($x$0$lcssa<<2)|0);
     HEAP32[$84>>2] = $82;
     $85 = HEAP32[$54>>2]|0;
     $86 = (($85) + ($x$0$lcssa)|0);
     HEAP8[$86>>0] = $$sink1;
     break;
    }
   }
  } while(0);
  $89 = (($i$25) + 1)|0;
  $90 = ($89|0)<($49|0);
  if ($90) {
   $i$25 = $89;
  } else {
   label = 26;
   break;
  }
 }
 if ((label|0) == 21) {
  ___assert_fail((22104|0),(20576|0),781,(22080|0));
  // unreachable;
 }
 else if ((label|0) == 26) {
  return;
 }
}
function _compute_accelerated_huffman($c) {
 $c = $c|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$12 = 0, $scevgep = 0;
 var $z$0$ph = 0, $z$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $scevgep = ((($c)) + 36|0);
 _memset(($scevgep|0),-1,2048)|0;
 $0 = ((($c)) + 23|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($c)) + 2092|0);
 $4 = ((($c)) + 4|0);
 $$in = $2 ? $4 : $3;
 $5 = HEAP32[$$in>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  return;
 }
 $7 = ((($c)) + 8|0);
 $8 = ((($c)) + 32|0);
 $9 = ((($c)) + 2084|0);
 $10 = ($5|0)<(32767);
 $11 = $10 ? $5 : 32767;
 $i$12 = 0;
 while(1) {
  $12 = HEAP32[$7>>2]|0;
  $13 = (($12) + ($i$12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14&255)<(11);
  if ($15) {
   $16 = HEAP8[$0>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $22 = HEAP32[$8>>2]|0;
    $23 = (($22) + ($i$12<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $z$0$ph = $24;
   } else {
    $18 = HEAP32[$9>>2]|0;
    $19 = (($18) + ($i$12<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_bit_reverse($20)|0);
    $z$0$ph = $21;
   }
   $25 = ($z$0$ph>>>0)<(1024);
   if ($25) {
    $26 = $i$12&65535;
    $z$01 = $z$0$ph;
    while(1) {
     $27 = (((($c)) + 36|0) + ($z$01<<1)|0);
     HEAP16[$27>>1] = $26;
     $28 = HEAP32[$7>>2]|0;
     $29 = (($28) + ($i$12)|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $32 = 1 << $31;
     $33 = (($32) + ($z$01))|0;
     $34 = ($33>>>0)<(1024);
     if ($34) {
      $z$01 = $33;
     } else {
      break;
     }
    }
   }
  }
  $35 = (($i$12) + 1)|0;
  $exitcond = ($35|0)==($11|0);
  if ($exitcond) {
   break;
  } else {
   $i$12 = $35;
  }
 }
 return;
}
function _float32_unpack($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x & 2097151;
 $1 = $x >>> 21;
 $2 = $1 & 1023;
 $3 = ($x|0)<(0);
 $4 = (+($0>>>0));
 $5 = -$4;
 $6 = $3 ? $5 : $4;
 $7 = $6;
 $8 = $7;
 $9 = (($2) + -788)|0;
 $10 = (+_ldexp($8,$9));
 $11 = $10;
 return (+$11);
}
function _lookup1_values($entries,$dim) {
 $entries = $entries|0;
 $dim = $dim|0;
 var $$ = 0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+($entries|0));
 $1 = $0;
 $2 = (+Math_log((+$1)));
 $3 = $2;
 $4 = (+($dim|0));
 $5 = $3 / $4;
 $6 = $5;
 $7 = (+Math_exp((+$6)));
 $8 = (+Math_floor((+$7)));
 $9 = (~~(($8)));
 $10 = (+($9|0));
 $11 = $10 + 1.0;
 $12 = $11;
 $13 = (+($dim|0));
 $14 = (+Math_pow((+$12),(+$13)));
 $15 = (+Math_floor((+$14)));
 $16 = (~~(($15)));
 $not$ = ($16|0)<=($entries|0);
 $17 = $not$&1;
 $$ = (($17) + ($9))|0;
 $18 = (+($$|0));
 $19 = $18 + 1.0;
 $20 = $19;
 $21 = (+Math_pow((+$20),(+$13)));
 $22 = (+($entries|0));
 $23 = $21 > $22;
 if (!($23)) {
  ___assert_fail((21960|0),(20576|0),806,(21992|0));
  // unreachable;
 }
 $24 = $18;
 $25 = (+Math_pow((+$24),(+$13)));
 $26 = (+Math_floor((+$25)));
 $27 = (~~(($26)));
 $28 = ($27|0)>($entries|0);
 if ($28) {
  ___assert_fail((22008|0),(20576|0),807,(21992|0));
  // unreachable;
 } else {
  return ($$|0);
 }
 return (0)|0;
}
function _point_compare($p,$q) {
 $p = $p|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$p>>1]|0;
 $1 = HEAP16[$q>>1]|0;
 $2 = ($0&65535)<($1&65535);
 $3 = ($0&65535)>($1&65535);
 $4 = $3&1;
 $5 = $2 ? -1 : $4;
 return ($5|0);
}
function _neighbors($x,$n,$plow,$phigh) {
 $x = $x|0;
 $n = $n|0;
 $plow = $plow|0;
 $phigh = $phigh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $high$02 = 0, $high$1 = 0, $i$03 = 0, $low$01 = 0, $low$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(0);
 if (!($0)) {
  return;
 }
 $1 = (($x) + ($n<<1)|0);
 $2 = (($x) + ($n<<1)|0);
 $high$02 = 65536;$i$03 = 0;$low$01 = -1;
 while(1) {
  $3 = (($x) + ($i$03<<1)|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&65535;
  $6 = ($5|0)>($low$01|0);
  if ($6) {
   $7 = HEAP16[$1>>1]|0;
   $8 = ($4&65535)<($7&65535);
   if ($8) {
    HEAP32[$plow>>2] = $i$03;
    $9 = HEAP16[$3>>1]|0;
    $10 = $9&65535;
    $low$1 = $10;
   } else {
    $low$1 = $low$01;
   }
  } else {
   $low$1 = $low$01;
  }
  $11 = HEAP16[$3>>1]|0;
  $12 = $11&65535;
  $13 = ($12|0)<($high$02|0);
  if ($13) {
   $14 = HEAP16[$2>>1]|0;
   $15 = ($11&65535)>($14&65535);
   if ($15) {
    HEAP32[$phigh>>2] = $i$03;
    $16 = HEAP16[$3>>1]|0;
    $17 = $16&65535;
    $high$1 = $17;
   } else {
    $high$1 = $high$02;
   }
  } else {
   $high$1 = $high$02;
  }
  $18 = (($i$03) + 1)|0;
  $exitcond = ($18|0)==($n|0);
  if ($exitcond) {
   break;
  } else {
   $high$02 = $high$1;$i$03 = $18;$low$01 = $low$1;
  }
 }
 return;
}
function _init_blocksize($f,$b,$n) {
 $f = $f|0;
 $b = $b|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >>> 1;
 $1 = $n & -4;
 $2 = $n >> 3;
 $3 = $0 << 2;
 $4 = (_setup_malloc($f,$3)|0);
 $5 = (((($f)) + 1084|0) + ($b<<2)|0);
 HEAP32[$5>>2] = $4;
 $6 = (_setup_malloc($f,$3)|0);
 $7 = (((($f)) + 1092|0) + ($b<<2)|0);
 HEAP32[$7>>2] = $6;
 $8 = (_setup_malloc($f,$1)|0);
 $9 = (((($f)) + 1100|0) + ($b<<2)|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$5>>2]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = HEAP32[$7>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = ($8|0)==(0|0);
  $or$cond = $14 | $13;
  if (!($or$cond)) {
   _compute_twiddle_factors($n,$10,$12,$8);
   $15 = (_setup_malloc($f,$3)|0);
   $16 = (((($f)) + 1108|0) + ($b<<2)|0);
   HEAP32[$16>>2] = $15;
   $17 = ($15|0)==(0|0);
   if ($17) {
    _error($f,3);
    $$0 = 0;
    return ($$0|0);
   }
   _compute_window($n,$15);
   $18 = $2 << 1;
   $19 = (_setup_malloc($f,$18)|0);
   $20 = (((($f)) + 1116|0) + ($b<<2)|0);
   HEAP32[$20>>2] = $19;
   $21 = ($19|0)==(0|0);
   if ($21) {
    _error($f,3);
    $$0 = 0;
    return ($$0|0);
   } else {
    _compute_bitreverse($n,$19);
    $$0 = 1;
    return ($$0|0);
   }
  }
 }
 _error($f,3);
 $$0 = 0;
 return ($$0|0);
}
function _compute_twiddle_factors($n,$A,$B,$C) {
 $n = $n|0;
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $exitcond7 = 0, $k$03 = 0, $k$11 = 0, $k2$04 = 0, $k2$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >> 2;
 $1 = $n >> 3;
 $2 = ($0|0)>(0);
 if ($2) {
  $3 = (+($n|0));
  $k$03 = 0;$k2$04 = 0;
  while(1) {
   $6 = $k$03 << 2;
   $7 = (+($6|0));
   $8 = $7 * 3.1415926535897931;
   $9 = $8 / $3;
   $10 = (+Math_cos((+$9)));
   $11 = $10;
   $12 = (($A) + ($k2$04<<2)|0);
   HEAPF32[$12>>2] = $11;
   $13 = (+Math_sin((+$9)));
   $14 = $13;
   $15 = -$14;
   $16 = $k2$04 | 1;
   $17 = (($A) + ($16<<2)|0);
   HEAPF32[$17>>2] = $15;
   $18 = (+($16|0));
   $19 = $18 * 3.1415926535897931;
   $20 = $19 / $3;
   $21 = $20 * 0.5;
   $22 = (+Math_cos((+$21)));
   $23 = $22;
   $24 = $23 * 0.5;
   $25 = (($B) + ($k2$04<<2)|0);
   HEAPF32[$25>>2] = $24;
   $26 = (+Math_sin((+$21)));
   $27 = $26;
   $28 = $27 * 0.5;
   $29 = (($B) + ($16<<2)|0);
   HEAPF32[$29>>2] = $28;
   $30 = (($k$03) + 1)|0;
   $31 = (($k2$04) + 2)|0;
   $exitcond7 = ($30|0)==($0|0);
   if ($exitcond7) {
    break;
   } else {
    $k$03 = $30;$k2$04 = $31;
   }
  }
 }
 $4 = ($1|0)>(0);
 if (!($4)) {
  return;
 }
 $5 = (+($n|0));
 $k$11 = 0;$k2$12 = 0;
 while(1) {
  $32 = $k2$12 | 1;
  $33 = $32 << 1;
  $34 = (+($33|0));
  $35 = $34 * 3.1415926535897931;
  $36 = $35 / $5;
  $37 = (+Math_cos((+$36)));
  $38 = $37;
  $39 = (($C) + ($k2$12<<2)|0);
  HEAPF32[$39>>2] = $38;
  $40 = (+Math_sin((+$36)));
  $41 = $40;
  $42 = -$41;
  $43 = (($C) + ($32<<2)|0);
  HEAPF32[$43>>2] = $42;
  $44 = (($k$11) + 1)|0;
  $45 = (($k2$12) + 2)|0;
  $exitcond = ($44|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $k$11 = $44;$k2$12 = $45;
  }
 }
 return;
}
function _compute_window($n,$window) {
 $n = $n|0;
 $window = $window|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $i$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $n >> 1;
 $1 = ($0|0)>(0);
 if (!($1)) {
  return;
 }
 $2 = (+($0|0));
 $i$01 = 0;
 while(1) {
  $3 = (+($i$01|0));
  $4 = $3 + 0.5;
  $5 = $4 / $2;
  $6 = $5 * 0.5;
  $7 = $6 * 3.1415926535897931;
  $8 = (+Math_sin((+$7)));
  $9 = $8;
  $10 = (+_square($9));
  $11 = $10;
  $12 = $11 * 1.5707963267948966;
  $13 = (+Math_sin((+$12)));
  $14 = $13;
  $15 = (($window) + ($i$01<<2)|0);
  HEAPF32[$15>>2] = $14;
  $16 = (($i$01) + 1)|0;
  $exitcond = ($16|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $16;
  }
 }
 return;
}
function _compute_bitreverse($n,$rev) {
 $n = $n|0;
 $rev = $rev|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >> 3;
 $1 = ($0|0)>(0);
 if (!($1)) {
  return;
 }
 $2 = (_ilog($n)|0);
 $3 = (36 - ($2))|0;
 $i$01 = 0;
 while(1) {
  $4 = (_bit_reverse($i$01)|0);
  $5 = $4 >>> $3;
  $6 = $5 << 2;
  $7 = $6&65535;
  $8 = (($rev) + ($i$01<<1)|0);
  HEAP16[$8>>1] = $7;
  $9 = (($i$01) + 1)|0;
  $exitcond = ($9|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $9;
  }
 }
 return;
}
function _bit_reverse($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >>> 1;
 $1 = $0 & 1431655765;
 $2 = $n << 1;
 $3 = $2 & -1431655766;
 $4 = $1 | $3;
 $5 = $4 >>> 2;
 $6 = $5 & 858993459;
 $7 = $4 << 2;
 $8 = $7 & -858993460;
 $9 = $6 | $8;
 $10 = $9 >>> 4;
 $11 = $10 & 252645135;
 $12 = $9 << 4;
 $13 = $12 & -252645136;
 $14 = $11 | $13;
 $15 = $14 >>> 8;
 $16 = $15 & 16711935;
 $17 = $14 << 8;
 $18 = $17 & -16711936;
 $19 = $16 | $18;
 $20 = $19 >>> 16;
 $21 = $19 << 16;
 $22 = $20 | $21;
 return ($22|0);
}
function _square($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 return (+$0);
}
function _include_in_sort($c,$len) {
 $c = $c|0;
 $len = $len|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 23|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = ($len<<24>>24)==(-1);
 if (!($2)) {
  if ($3) {
   ___assert_fail((22136|0),(20576|0),731,(22152|0));
   // unreachable;
  } else {
   $$0 = 1;
   return ($$0|0);
  }
 }
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ($len&255)>(10);
 $$ = $4&1;
 $$0 = $$;
 return ($$0|0);
}
function _uint32_compare($p,$q) {
 $p = $p|0;
 $q = $q|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = HEAP32[$q>>2]|0;
 $2 = ($0>>>0)<($1>>>0);
 $3 = ($0>>>0)>($1>>>0);
 $4 = $3&1;
 $5 = $2 ? -1 : $4;
 return ($5|0);
}
function _add_entry($c,$huff_code,$symbol,$count,$len,$values) {
 $c = $c|0;
 $huff_code = $huff_code|0;
 $symbol = $symbol|0;
 $count = $count|0;
 $len = $len|0;
 $values = $values|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 23|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($c)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $5 = (($4) + ($symbol<<2)|0);
  HEAP32[$5>>2] = $huff_code;
  return;
 } else {
  $6 = (($4) + ($count<<2)|0);
  HEAP32[$6>>2] = $huff_code;
  $7 = $len&255;
  $8 = ((($c)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($count)|0);
  HEAP8[$10>>0] = $7;
  $11 = (($values) + ($count<<2)|0);
  HEAP32[$11>>2] = $symbol;
  return;
 }
}
function _get_window($f,$len) {
 $f = $f|0;
 $len = $len|0;
 var $$0 = 0, $$0$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $len << 1;
 $1 = ((($f)) + 128|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)==($2|0);
 if ($3) {
  $4 = ((($f)) + 1108|0);
  $$0$in = $4;
  $$0 = HEAP32[$$0$in>>2]|0;
  return ($$0|0);
 }
 $5 = ((($f)) + 132|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 if (!($7)) {
  ___assert_fail((27216|0),(20576|0),2734,(22248|0));
  // unreachable;
 }
 $8 = ((($f)) + 1112|0);
 $$0$in = $8;
 $$0 = HEAP32[$$0$in>>2]|0;
 return ($$0|0);
}
function _vorbis_decode_packet_rest($f,$len,$m,$left_start,$right_start,$right_end,$p_left) {
 $f = $f|0;
 $len = $len|0;
 $m = $m|0;
 $left_start = $left_start|0;
 $right_start = $right_start|0;
 $right_end = $right_end|0;
 $p_left = $p_left|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a2$0 = 0.0;
 var $ch$0$lcssa = 0, $ch$022 = 0, $ch$1 = 0, $cval$0 = 0, $cval$2$ph = 0, $cval$235 = 0, $do_not_decode = 0, $exitcond = 0, $exitcond57 = 0, $i$052 = 0, $i$130 = 0, $i$227 = 0, $i$319 = 0, $i$319$in = 0, $i$413 = 0, $i$512 = 0, $j$042 = 0, $j$146 = 0, $j$250 = 0, $j$323 = 0;
 var $j$415 = 0, $k$037 = 0, $m2$0 = 0.0, $offset$041 = 0, $offset$1$lcssa = 0, $offset$136 = 0, $offset$2 = 0, $really_zero_channel = 0, $room$0 = 0, $step2_flag = 0, $storemerge = 0, $temp$0 = 0, $temp$1 = 0, $zero_channel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2560|0;
 $zero_channel = sp + 1280|0;
 $really_zero_channel = sp;
 $step2_flag = sp + 1024|0;
 $do_not_decode = sp + 2304|0;
 $0 = HEAP8[$m>>0]|0;
 $1 = $0&255;
 $2 = (((($f)) + 120|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($m)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((($f)) + 420|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($6*40)|0)|0);
 $10 = $3 >> 1;
 $11 = (0 - ($10))|0;
 $12 = ((($f)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 L1: do {
  if ($14) {
   $15 = (((($8) + (($6*40)|0)|0)) + 4|0);
   $16 = ((($f)) + 276|0);
   $17 = ((($f)) + 1412|0);
   $18 = ((($step2_flag)) + 1|0);
   $19 = ((($f)) + 140|0);
   $20 = ((($f)) + 1412|0);
   $21 = ((($f)) + 1408|0);
   $22 = ((($f)) + 140|0);
   $23 = ((($f)) + 1412|0);
   $24 = ((($f)) + 1408|0);
   $i$052 = 0;
   while(1) {
    $25 = HEAP32[$15>>2]|0;
    $26 = (((($25) + (($i$052*3)|0)|0)) + 2|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = (($zero_channel) + ($i$052<<2)|0);
    HEAP32[$29>>2] = 0;
    $30 = ((((($8) + (($6*40)|0)|0)) + 9|0) + ($28)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = (((($f)) + 148|0) + ($32<<1)|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = ($34<<16>>16)==(0);
    if ($35) {
     break;
    }
    $36 = HEAP32[$16>>2]|0;
    $37 = (_get_bits($f,1)|0);
    $38 = ($37|0)==(0);
    do {
     if ($38) {
      label = 50;
     } else {
      $39 = (((($36) + (($32*1596)|0)|0)) + 1588|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = $40&255;
      $42 = (($41) + -1)|0;
      $43 = (22264 + ($42<<2)|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = (((($f)) + 1012|0) + ($i$052<<2)|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = (_ilog($44)|0);
      $48 = (($47) + -1)|0;
      $49 = (_get_bits($f,$48)|0);
      $50 = $49&65535;
      HEAP16[$46>>1] = $50;
      $51 = (_get_bits($f,$48)|0);
      $52 = $51&65535;
      $53 = ((($46)) + 2|0);
      HEAP16[$53>>1] = $52;
      $54 = (($36) + (($32*1596)|0)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = ($55<<24>>24)==(0);
      if (!($56)) {
       $j$042 = 0;$offset$041 = 2;
       while(1) {
        $57 = ((((($36) + (($32*1596)|0)|0)) + 1|0) + ($j$042)|0);
        $58 = HEAP8[$57>>0]|0;
        $59 = $58&255;
        $60 = ((((($36) + (($32*1596)|0)|0)) + 33|0) + ($59)|0);
        $61 = HEAP8[$60>>0]|0;
        $62 = ((((($36) + (($32*1596)|0)|0)) + 49|0) + ($59)|0);
        $63 = HEAP8[$62>>0]|0;
        $64 = $63&255;
        $65 = 1 << $64;
        $66 = (($65) + -1)|0;
        $67 = ($63<<24>>24)==(0);
        if ($67) {
         $cval$2$ph = 0;
        } else {
         $68 = HEAP32[$19>>2]|0;
         $69 = ((((($36) + (($32*1596)|0)|0)) + 65|0) + ($59)|0);
         $70 = HEAP8[$69>>0]|0;
         $71 = $70&255;
         $72 = (($68) + (($71*2096)|0)|0);
         $73 = HEAP32[$20>>2]|0;
         $74 = ($73|0)<(10);
         if ($74) {
          _prep_huffman($f);
         }
         $75 = HEAP32[$21>>2]|0;
         $76 = $75 & 1023;
         $77 = ((((($68) + (($71*2096)|0)|0)) + 36|0) + ($76<<1)|0);
         $78 = HEAP16[$77>>1]|0;
         $79 = $78 << 16 >> 16;
         $80 = ($78<<16>>16)>(-1);
         if ($80) {
          $81 = (((($68) + (($71*2096)|0)|0)) + 8|0);
          $82 = HEAP32[$81>>2]|0;
          $83 = (($82) + ($79)|0);
          $84 = HEAP8[$83>>0]|0;
          $85 = $84&255;
          $86 = $75 >>> $85;
          HEAP32[$21>>2] = $86;
          $87 = HEAP32[$20>>2]|0;
          $88 = (($87) - ($85))|0;
          $89 = ($88|0)<(0);
          $$ = $89 ? 0 : $88;
          HEAP32[$20>>2] = $$;
          $$1 = $89 ? -1 : $79;
          $cval$0 = $$1;
         } else {
          $90 = (_codebook_decode_scalar_raw($f,$72)|0);
          $cval$0 = $90;
         }
         $91 = (((($68) + (($71*2096)|0)|0)) + 23|0);
         $92 = HEAP8[$91>>0]|0;
         $93 = ($92<<24>>24)==(0);
         if ($93) {
          $cval$2$ph = $cval$0;
         } else {
          $94 = (((($68) + (($71*2096)|0)|0)) + 2088|0);
          $95 = HEAP32[$94>>2]|0;
          $96 = (($95) + ($cval$0<<2)|0);
          $97 = HEAP32[$96>>2]|0;
          $cval$2$ph = $97;
         }
        }
        $98 = ($61<<24>>24)==(0);
        if ($98) {
         $offset$1$lcssa = $offset$041;
        } else {
         $99 = $61&255;
         $cval$235 = $cval$2$ph;$k$037 = 0;$offset$136 = $offset$041;
         while(1) {
          $100 = $cval$235 & $66;
          $101 = (((((($36) + (($32*1596)|0)|0)) + 82|0) + ($59<<4)|0) + ($100<<1)|0);
          $102 = HEAP16[$101>>1]|0;
          $103 = $cval$235 >> $64;
          $104 = ($102<<16>>16)>(-1);
          if ($104) {
           $105 = $102 << 16 >> 16;
           $106 = HEAP32[$22>>2]|0;
           $107 = (($106) + (($105*2096)|0)|0);
           $108 = HEAP32[$23>>2]|0;
           $109 = ($108|0)<(10);
           if ($109) {
            _prep_huffman($f);
           }
           $110 = HEAP32[$24>>2]|0;
           $111 = $110 & 1023;
           $112 = ((((($106) + (($105*2096)|0)|0)) + 36|0) + ($111<<1)|0);
           $113 = HEAP16[$112>>1]|0;
           $114 = $113 << 16 >> 16;
           $115 = ($113<<16>>16)>(-1);
           if ($115) {
            $116 = (((($106) + (($105*2096)|0)|0)) + 8|0);
            $117 = HEAP32[$116>>2]|0;
            $118 = (($117) + ($114)|0);
            $119 = HEAP8[$118>>0]|0;
            $120 = $119&255;
            $121 = $110 >>> $120;
            HEAP32[$24>>2] = $121;
            $122 = HEAP32[$23>>2]|0;
            $123 = (($122) - ($120))|0;
            $124 = ($123|0)<(0);
            $$2 = $124 ? 0 : $123;
            HEAP32[$23>>2] = $$2;
            $$3 = $124 ? -1 : $114;
            $temp$0 = $$3;
           } else {
            $125 = (_codebook_decode_scalar_raw($f,$107)|0);
            $temp$0 = $125;
           }
           $126 = (((($106) + (($105*2096)|0)|0)) + 23|0);
           $127 = HEAP8[$126>>0]|0;
           $128 = ($127<<24>>24)==(0);
           if ($128) {
            $temp$1 = $temp$0;
           } else {
            $129 = (((($106) + (($105*2096)|0)|0)) + 2088|0);
            $130 = HEAP32[$129>>2]|0;
            $131 = (($130) + ($temp$0<<2)|0);
            $132 = HEAP32[$131>>2]|0;
            $temp$1 = $132;
           }
           $133 = $temp$1&65535;
           $134 = (($46) + ($offset$136<<1)|0);
           HEAP16[$134>>1] = $133;
          } else {
           $135 = (($46) + ($offset$136<<1)|0);
           HEAP16[$135>>1] = 0;
          }
          $offset$2 = (($offset$136) + 1)|0;
          $136 = (($k$037) + 1)|0;
          $exitcond57 = ($136|0)==($99|0);
          if ($exitcond57) {
           break;
          } else {
           $cval$235 = $103;$k$037 = $136;$offset$136 = $offset$2;
          }
         }
         $137 = (($offset$041) + ($99))|0;
         $offset$1$lcssa = $137;
        }
        $138 = (($j$042) + 1)|0;
        $139 = HEAP8[$54>>0]|0;
        $140 = $139&255;
        $141 = ($138|0)<($140|0);
        if ($141) {
         $j$042 = $138;$offset$041 = $offset$1$lcssa;
        } else {
         break;
        }
       }
      }
      $142 = HEAP32[$17>>2]|0;
      $143 = ($142|0)==(-1);
      if ($143) {
       label = 50;
       break;
      }
      HEAP8[$18>>0] = 1;
      HEAP8[$step2_flag>>0] = 1;
      $144 = (((($36) + (($32*1596)|0)|0)) + 1592|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = ($145|0)>(2);
      if ($146) {
       $147 = (($44) + 65535)|0;
       $j$146 = 2;
       while(1) {
        $151 = ((((($36) + (($32*1596)|0)|0)) + 1088|0) + ($j$146<<1)|0);
        $152 = HEAP8[$151>>0]|0;
        $153 = $152&255;
        $154 = ((((((($36) + (($32*1596)|0)|0)) + 1088|0) + ($j$146<<1)|0)) + 1|0);
        $155 = HEAP8[$154>>0]|0;
        $156 = $155&255;
        $157 = ((((($36) + (($32*1596)|0)|0)) + 338|0) + ($j$146<<1)|0);
        $158 = HEAP16[$157>>1]|0;
        $159 = $158&65535;
        $160 = ((((($36) + (($32*1596)|0)|0)) + 338|0) + ($153<<1)|0);
        $161 = HEAP16[$160>>1]|0;
        $162 = $161&65535;
        $163 = ((((($36) + (($32*1596)|0)|0)) + 338|0) + ($156<<1)|0);
        $164 = HEAP16[$163>>1]|0;
        $165 = $164&65535;
        $166 = (($46) + ($153<<1)|0);
        $167 = HEAP16[$166>>1]|0;
        $168 = $167 << 16 >> 16;
        $169 = (($46) + ($156<<1)|0);
        $170 = HEAP16[$169>>1]|0;
        $171 = $170 << 16 >> 16;
        $172 = (_predict_point($159,$162,$165,$168,$171)|0);
        $173 = (($46) + ($j$146<<1)|0);
        $174 = HEAP16[$173>>1]|0;
        $175 = $174 << 16 >> 16;
        $176 = (($44) - ($172))|0;
        $177 = ($174<<16>>16)==(0);
        do {
         if ($177) {
          $195 = (($step2_flag) + ($j$146)|0);
          HEAP8[$195>>0] = 0;
          $196 = $172&65535;
          HEAP16[$173>>1] = $196;
         } else {
          $178 = ($176|0)<($172|0);
          $$4 = $178 ? $176 : $172;
          $room$0 = $$4 << 1;
          $179 = (($step2_flag) + ($156)|0);
          HEAP8[$179>>0] = 1;
          $180 = (($step2_flag) + ($153)|0);
          HEAP8[$180>>0] = 1;
          $181 = (($step2_flag) + ($j$146)|0);
          HEAP8[$181>>0] = 1;
          $182 = ($175|0)<($room$0|0);
          if ($182) {
           $186 = $175 & 1;
           $187 = ($186|0)==(0);
           if ($187) {
            $192 = $175 >>> 1;
            $193 = (($192) + ($172))|0;
            $194 = $193&65535;
            HEAP16[$173>>1] = $194;
            break;
           } else {
            $188 = (($175) + 1)|0;
            $189 = $188 >>> 1;
            $190 = (($172) - ($189))|0;
            $191 = $190&65535;
            HEAP16[$173>>1] = $191;
            break;
           }
          } else {
           $183 = ($176|0)>($172|0);
           if ($183) {
            HEAP16[$173>>1] = $174;
            break;
           } else {
            $184 = (($147) - ($175))|0;
            $185 = $184&65535;
            HEAP16[$173>>1] = $185;
            break;
           }
          }
         }
        } while(0);
        $197 = (($j$146) + 1)|0;
        $198 = HEAP32[$144>>2]|0;
        $199 = ($197|0)<($198|0);
        if ($199) {
         $j$146 = $197;
        } else {
         $148 = $198;
         break;
        }
       }
      } else {
       $148 = $145;
      }
      $149 = ($148|0)>(0);
      if ($149) {
       $150 = HEAP32[$144>>2]|0;
       $j$250 = 0;
       while(1) {
        $200 = (($step2_flag) + ($j$250)|0);
        $201 = HEAP8[$200>>0]|0;
        $202 = ($201<<24>>24)==(0);
        if ($202) {
         $203 = (($46) + ($j$250<<1)|0);
         HEAP16[$203>>1] = -1;
        }
        $204 = (($j$250) + 1)|0;
        $205 = ($204|0)<($150|0);
        if ($205) {
         $j$250 = $204;
        } else {
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 50) {
     label = 0;
     HEAP32[$29>>2] = 1;
    }
    $206 = (($i$052) + 1)|0;
    $207 = HEAP32[$12>>2]|0;
    $208 = ($206|0)<($207|0);
    if ($208) {
     $i$052 = $206;
    } else {
     break L1;
    }
   }
   _error($f,21);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $209 = ((($f)) + 96|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = ($210|0)==(0|0);
 if (!($211)) {
  $212 = ((($f)) + 100|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = ((($f)) + 108|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = ($213|0)==($215|0);
  if (!($216)) {
   ___assert_fail((21808|0),(20576|0),2942,(22280|0));
   // unreachable;
  }
 }
 $217 = HEAP32[$12>>2]|0;
 $218 = $217 << 2;
 _memcpy(($really_zero_channel|0),($zero_channel|0),($218|0))|0;
 $219 = HEAP16[$9>>1]|0;
 $220 = ($219<<16>>16)==(0);
 if (!($220)) {
  $221 = (((($8) + (($6*40)|0)|0)) + 4|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = HEAP16[$9>>1]|0;
  $224 = $223&65535;
  $i$130 = 0;
  while(1) {
   $229 = (($222) + (($i$130*3)|0)|0);
   $230 = HEAP8[$229>>0]|0;
   $231 = $230&255;
   $232 = (($zero_channel) + ($231<<2)|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = ($233|0)==(0);
   if ($234) {
    label = 61;
   } else {
    $235 = (((($222) + (($i$130*3)|0)|0)) + 1|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = (($zero_channel) + ($237<<2)|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = ($239|0)==(0);
    if ($240) {
     label = 61;
    }
   }
   if ((label|0) == 61) {
    label = 0;
    $241 = HEAP32[$221>>2]|0;
    $242 = (((($241) + (($i$130*3)|0)|0)) + 1|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    $245 = (($zero_channel) + ($244<<2)|0);
    HEAP32[$245>>2] = 0;
    $246 = HEAP32[$221>>2]|0;
    $247 = (($246) + (($i$130*3)|0)|0);
    $248 = HEAP8[$247>>0]|0;
    $249 = $248&255;
    $250 = (($zero_channel) + ($249<<2)|0);
    HEAP32[$250>>2] = 0;
   }
   $251 = (($i$130) + 1)|0;
   $252 = ($251|0)<($224|0);
   if ($252) {
    $i$130 = $251;
   } else {
    break;
   }
  }
 }
 $225 = (((($8) + (($6*40)|0)|0)) + 8|0);
 $226 = HEAP8[$225>>0]|0;
 $227 = ($226<<24>>24)==(0);
 if (!($227)) {
  $228 = (((($8) + (($6*40)|0)|0)) + 4|0);
  $i$227 = 0;
  while(1) {
   $253 = HEAP32[$12>>2]|0;
   $254 = ($253|0)>(0);
   if ($254) {
    $255 = HEAP32[$228>>2]|0;
    $256 = HEAP32[$12>>2]|0;
    $ch$022 = 0;$j$323 = 0;
    while(1) {
     $257 = (((($255) + (($j$323*3)|0)|0)) + 2|0);
     $258 = HEAP8[$257>>0]|0;
     $259 = $258&255;
     $260 = ($259|0)==($i$227|0);
     if ($260) {
      $261 = (($zero_channel) + ($j$323<<2)|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = ($262|0)==(0);
      $264 = (($do_not_decode) + ($ch$022)|0);
      if ($263) {
       HEAP8[$264>>0] = 0;
       $266 = (((($f)) + 816|0) + ($j$323<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (($step2_flag) + ($ch$022<<2)|0);
       HEAP32[$268>>2] = $267;
      } else {
       HEAP8[$264>>0] = 1;
       $265 = (($step2_flag) + ($ch$022<<2)|0);
       HEAP32[$265>>2] = 0;
      }
      $269 = (($ch$022) + 1)|0;
      $ch$1 = $269;
     } else {
      $ch$1 = $ch$022;
     }
     $270 = (($j$323) + 1)|0;
     $271 = ($270|0)<($256|0);
     if ($271) {
      $ch$022 = $ch$1;$j$323 = $270;
     } else {
      $ch$0$lcssa = $ch$1;
      break;
     }
    }
   } else {
    $ch$0$lcssa = 0;
   }
   $272 = ((((($8) + (($6*40)|0)|0)) + 24|0) + ($i$227)|0);
   $273 = HEAP8[$272>>0]|0;
   $274 = $273&255;
   _decode_residue($f,$step2_flag,$ch$0$lcssa,$10,$274,$do_not_decode);
   $275 = (($i$227) + 1)|0;
   $276 = HEAP8[$225>>0]|0;
   $277 = $276&255;
   $278 = ($275|0)<($277|0);
   if ($278) {
    $i$227 = $275;
   } else {
    break;
   }
  }
 }
 $279 = HEAP32[$209>>2]|0;
 $280 = ($279|0)==(0|0);
 if (!($280)) {
  $281 = ((($f)) + 100|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = ((($f)) + 108|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = ($282|0)==($284|0);
  if (!($285)) {
   ___assert_fail((21808|0),(20576|0),2974,(22280|0));
   // unreachable;
  }
 }
 $286 = HEAP16[$9>>1]|0;
 $287 = ($286<<16>>16)==(0);
 if (!($287)) {
  $288 = $286&65535;
  $289 = (((($8) + (($6*40)|0)|0)) + 4|0);
  $290 = HEAP32[$289>>2]|0;
  $291 = ($10|0)>(0);
  $i$319$in = $288;
  while(1) {
   $i$319 = (($i$319$in) + -1)|0;
   $296 = (($290) + (($i$319*3)|0)|0);
   $297 = HEAP8[$296>>0]|0;
   $298 = $297&255;
   $299 = (((($f)) + 816|0) + ($298<<2)|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = (((($290) + (($i$319*3)|0)|0)) + 1|0);
   $302 = HEAP8[$301>>0]|0;
   $303 = $302&255;
   $304 = (((($f)) + 816|0) + ($303<<2)|0);
   $305 = HEAP32[$304>>2]|0;
   if ($291) {
    $j$415 = 0;
    while(1) {
     $306 = (($300) + ($j$415<<2)|0);
     $307 = +HEAPF32[$306>>2];
     $308 = $307 > 0.0;
     $309 = (($305) + ($j$415<<2)|0);
     $310 = +HEAPF32[$309>>2];
     $311 = $310 > 0.0;
     do {
      if ($308) {
       if ($311) {
        $312 = $307 - $310;
        $a2$0 = $312;$m2$0 = $307;
        break;
       } else {
        $313 = $307 + $310;
        $a2$0 = $307;$m2$0 = $313;
        break;
       }
      } else {
       if ($311) {
        $314 = $307 + $310;
        $a2$0 = $314;$m2$0 = $307;
        break;
       } else {
        $315 = $307 - $310;
        $a2$0 = $307;$m2$0 = $315;
        break;
       }
      }
     } while(0);
     HEAPF32[$306>>2] = $m2$0;
     HEAPF32[$309>>2] = $a2$0;
     $316 = (($j$415) + 1)|0;
     $exitcond = ($316|0)==($10|0);
     if ($exitcond) {
      break;
     } else {
      $j$415 = $316;
     }
    }
   }
   $292 = ($i$319$in|0)>(1);
   if ($292) {
    $i$319$in = $i$319;
   } else {
    break;
   }
  }
 }
 $293 = HEAP32[$12>>2]|0;
 $294 = ($293|0)>(0);
 if ($294) {
  $295 = $10 << 2;
  $i$413 = 0;
  while(1) {
   $318 = (($really_zero_channel) + ($i$413<<2)|0);
   $319 = HEAP32[$318>>2]|0;
   $320 = ($319|0)==(0);
   $321 = (((($f)) + 816|0) + ($i$413<<2)|0);
   if ($320) {
    $323 = HEAP32[$321>>2]|0;
    $324 = (((($f)) + 1012|0) + ($i$413<<2)|0);
    $325 = HEAP32[$324>>2]|0;
    _do_floor($f,$9,$i$413,$3,$323,$325);
   } else {
    $322 = HEAP32[$321>>2]|0;
    _memset(($322|0),0,($295|0))|0;
   }
   $326 = (($i$413) + 1)|0;
   $327 = HEAP32[$12>>2]|0;
   $328 = ($326|0)<($327|0);
   if ($328) {
    $i$413 = $326;
   } else {
    $$lcssa = $327;
    break;
   }
  }
  $317 = ($$lcssa|0)>(0);
  if ($317) {
   $i$512 = 0;
   while(1) {
    $329 = (((($f)) + 816|0) + ($i$512<<2)|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = HEAP8[$m>>0]|0;
    $332 = $331&255;
    _inverse_mdct($330,$3,$f,$332);
    $333 = (($i$512) + 1)|0;
    $334 = HEAP32[$12>>2]|0;
    $335 = ($333|0)<($334|0);
    if ($335) {
     $i$512 = $333;
    } else {
     break;
    }
   }
  }
 }
 _flush_packet($f);
 $336 = ((($f)) + 1393|0);
 $337 = HEAP8[$336>>0]|0;
 $338 = ($337<<24>>24)==(0);
 if ($338) {
  $343 = ((($f)) + 1428|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = ($344|0)==(0);
  if ($345) {
   $$01 = $left_start;
  } else {
   $346 = (($344) + ($left_start))|0;
   HEAP32[$p_left>>2] = $346;
   HEAP32[$343>>2] = 0;
   $$01 = $346;
  }
 } else {
  $339 = ((($f)) + 1076|0);
  HEAP32[$339>>2] = $11;
  $340 = (($3) - ($right_end))|0;
  $341 = ((($f)) + 1428|0);
  HEAP32[$341>>2] = $340;
  $342 = ((($f)) + 1080|0);
  HEAP32[$342>>2] = 1;
  HEAP8[$336>>0] = 0;
  $$01 = $left_start;
 }
 $347 = ((($f)) + 1404|0);
 $348 = HEAP32[$347>>2]|0;
 $349 = ((($f)) + 1420|0);
 $350 = HEAP32[$349>>2]|0;
 $351 = ($348|0)==($350|0);
 if ($351) {
  $352 = ((($f)) + 1080|0);
  $353 = HEAP32[$352>>2]|0;
  $354 = ($353|0)==(0);
  if (!($354)) {
   $355 = ((($f)) + 1391|0);
   $356 = HEAP8[$355>>0]|0;
   $357 = $356 & 4;
   $358 = ($357<<24>>24)==(0);
   if (!($358)) {
    $359 = ((($f)) + 1424|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = (($right_end) - ($3))|0;
    $362 = (($360) + ($361))|0;
    $363 = ((($f)) + 1076|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = (($364) + ($right_end))|0;
    $366 = ($362>>>0)<($365>>>0);
    if ($366) {
     $367 = ($362>>>0)<($364>>>0);
     $368 = (($362) - ($364))|0;
     $storemerge = $367 ? 0 : $368;
     $369 = (($storemerge) + ($$01))|0;
     HEAP32[$len>>2] = $369;
     $370 = HEAP32[$363>>2]|0;
     $371 = (($370) + ($369))|0;
     HEAP32[$363>>2] = $371;
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
  $372 = ((($f)) + 1424|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = (($$01) - ($10))|0;
  $375 = (($374) + ($373))|0;
  $376 = ((($f)) + 1076|0);
  HEAP32[$376>>2] = $375;
  HEAP32[$352>>2] = 1;
 }
 $377 = ((($f)) + 1080|0);
 $378 = HEAP32[$377>>2]|0;
 $379 = ($378|0)==(0);
 if (!($379)) {
  $380 = (($right_start) - ($$01))|0;
  $381 = ((($f)) + 1076|0);
  $382 = HEAP32[$381>>2]|0;
  $383 = (($380) + ($382))|0;
  HEAP32[$381>>2] = $383;
 }
 $384 = HEAP32[$209>>2]|0;
 $385 = ($384|0)==(0|0);
 if (!($385)) {
  $386 = ((($f)) + 100|0);
  $387 = HEAP32[$386>>2]|0;
  $388 = ((($f)) + 108|0);
  $389 = HEAP32[$388>>2]|0;
  $390 = ($387|0)==($389|0);
  if (!($390)) {
   ___assert_fail((21808|0),(20576|0),3083,(22280|0));
   // unreachable;
  }
 }
 HEAP32[$len>>2] = $right_end;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _prep_huffman($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 1412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(25);
 if (!($2)) {
  return;
 }
 $3 = ($1|0)==(0);
 if ($3) {
  $4 = ((($f)) + 1408|0);
  HEAP32[$4>>2] = 0;
 }
 $5 = ((($f)) + 1392|0);
 $6 = ((($f)) + 1400|0);
 $7 = ((($f)) + 1408|0);
 while(1) {
  $8 = HEAP32[$6>>2]|0;
  $9 = ($8|0)==(0);
  if (!($9)) {
   $10 = HEAP8[$5>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    label = 9;
    break;
   }
  }
  $12 = (_get8_packet_raw($f)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   label = 9;
   break;
  }
  $14 = HEAP32[$0>>2]|0;
  $15 = $12 << $14;
  $16 = HEAP32[$7>>2]|0;
  $17 = (($16) + ($15))|0;
  HEAP32[$7>>2] = $17;
  $18 = HEAP32[$0>>2]|0;
  $19 = (($18) + 8)|0;
  HEAP32[$0>>2] = $19;
  $20 = ($19|0)<(25);
  if (!($20)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return;
 }
}
function _codebook_decode_scalar_raw($f,$c) {
 $f = $f|0;
 $c = $c|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lcssa25 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $i$05 = 0, $i$05$lcssa = 0, $n$07 = 0, $x$0$ = 0, $x$0$lcssa = 0, $x$06 = 0, $x$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _prep_huffman($f);
 $0 = ((($c)) + 2084|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = ((($c)) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   ___assert_fail((23504|0),(20576|0),1210,(23544|0));
   // unreachable;
  }
 }
 $6 = ((($c)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(8);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   label = 7;
  }
 } else {
  $11 = ((($c)) + 32|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = ((($f)) + 1408|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_bit_reverse($15)|0);
  $17 = ((($c)) + 2092|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)>(1);
  if ($19) {
   $20 = HEAP32[$0>>2]|0;
   $n$07 = $18;$x$06 = 0;
   while(1) {
    $21 = $n$07 >> 1;
    $22 = (($21) + ($x$06))|0;
    $23 = (($20) + ($22<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24>>>0)>($16>>>0);
    $26 = (($n$07) - ($21))|0;
    $x$0$ = $25 ? $x$06 : $22;
    $$ = $25 ? $21 : $26;
    $27 = ($$|0)>(1);
    if ($27) {
     $n$07 = $$;$x$06 = $x$0$;
    } else {
     $x$0$lcssa = $x$0$;
     break;
    }
   }
  } else {
   $x$0$lcssa = 0;
  }
  $28 = ((($c)) + 23|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $31 = ((($c)) + 2088|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($x$0$lcssa<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $x$1 = $34;
  } else {
   $x$1 = $x$0$lcssa;
  }
  $35 = ((($c)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($x$1)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = ((($f)) + 1412|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)<($39|0);
  if ($42) {
   HEAP32[$40>>2] = 0;
   $$0 = -1;
   return ($$0|0);
  } else {
   $43 = HEAP32[$14>>2]|0;
   $44 = $43 >>> $39;
   HEAP32[$14>>2] = $44;
   $45 = HEAP32[$40>>2]|0;
   $46 = (($45) - ($39))|0;
   HEAP32[$40>>2] = $46;
   $$0 = $x$1;
   return ($$0|0);
  }
 }
 $47 = ((($c)) + 23|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = ($48<<24>>24)==(0);
 if (!($49)) {
  ___assert_fail((23576|0),(20576|0),1243,(23544|0));
  // unreachable;
 }
 $50 = HEAP32[$6>>2]|0;
 $51 = ($50|0)>(0);
 L27: do {
  if ($51) {
   $52 = ((($c)) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($c)) + 32|0);
   $55 = ((($f)) + 1408|0);
   $i$05 = 0;
   while(1) {
    $56 = (($53) + ($i$05)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = ($57<<24>>24)==(-1);
    if (!($59)) {
     $60 = HEAP32[$54>>2]|0;
     $61 = (($60) + ($i$05<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = HEAP32[$55>>2]|0;
     $64 = 1 << $58;
     $65 = (($64) + -1)|0;
     $66 = $63 & $65;
     $67 = ($62|0)==($66|0);
     if ($67) {
      $$lcssa = $58;$$lcssa25 = $63;$i$05$lcssa = $i$05;
      break;
     }
    }
    $78 = (($i$05) + 1)|0;
    $79 = HEAP32[$6>>2]|0;
    $80 = ($78|0)<($79|0);
    if ($80) {
     $i$05 = $78;
    } else {
     break L27;
    }
   }
   $68 = ((($f)) + 1412|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)<($$lcssa|0);
   if ($70) {
    HEAP32[$68>>2] = 0;
    $$0 = -1;
    return ($$0|0);
   } else {
    $71 = $$lcssa25 >>> $$lcssa;
    HEAP32[$55>>2] = $71;
    $72 = HEAP32[$52>>2]|0;
    $73 = (($72) + ($i$05$lcssa)|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = HEAP32[$68>>2]|0;
    $77 = (($76) - ($75))|0;
    HEAP32[$68>>2] = $77;
    $$0 = $i$05$lcssa;
    return ($$0|0);
   }
  }
 } while(0);
 _error($f,21);
 $81 = ((($f)) + 1412|0);
 HEAP32[$81>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _predict_point($x,$x0,$x1,$y0,$y1) {
 $x = $x|0;
 $x0 = $x0|0;
 $x1 = $x1|0;
 $y0 = $y0|0;
 $y1 = $y1|0;
 var $$p = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $ispos = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($y1) - ($y0))|0;
 $1 = (($x1) - ($x0))|0;
 $ispos = ($0|0)>(-1);
 $neg = (0 - ($0))|0;
 $2 = $ispos ? $0 : $neg;
 $3 = (($x) - ($x0))|0;
 $4 = Math_imul($2, $3)|0;
 $5 = (($4|0) / ($1|0))&-1;
 $6 = ($0|0)<(0);
 $7 = (0 - ($5))|0;
 $$p = $6 ? $7 : $5;
 $8 = (($$p) + ($y0))|0;
 return ($8|0);
}
function _decode_residue($f,$residue_buffers,$ch,$n,$rn,$do_not_decode) {
 $f = $f|0;
 $residue_buffers = $residue_buffers|0;
 $ch = $ch|0;
 $n = $n|0;
 $rn = $rn|0;
 $do_not_decode = $do_not_decode|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$13 = 0, $$14 = 0, $$5 = 0, $$7 = 0, $$8 = 0, $$alloca_mul = 0, $$not = 0, $$not115 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $c_inter = 0, $c_inter16 = 0, $c_inter6 = 0;
 var $class_set$055 = 0, $class_set$147 = 0, $class_set$263 = 0, $class_set26$087 = 0, $exitcond = 0, $i$092 = 0, $i$152 = 0, $i$246 = 0, $i$360 = 0, $i$484 = 0, $j$0$lcssa = 0, $j$070 = 0, $j$175 = 0, $j$278 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond1258 = 0, $or$cond15 = 0, $or$cond1581 = 0, $or$cond6 = 0;
 var $or$cond650 = 0, $or$cond9 = 0, $or$cond944 = 0, $p_inter = 0, $p_inter17 = 0, $p_inter7 = 0, $pass$066 = 0, $pass$190 = 0, $pcount$056 = 0, $pcount$1$lcssa = 0, $pcount$151 = 0, $pcount$248 = 0, $pcount$3$lcssa = 0, $pcount$345 = 0, $pcount$464 = 0, $pcount$5$lcssa = 0, $pcount$559 = 0, $pcount25$086 = 0, $pcount25$1$lcssa = 0, $pcount25$182 = 0;
 var $q$0 = 0, $q$1 = 0, $q19$0 = 0, $q19$1 = 0, $q9$0 = 0, $q9$1 = 0, $temp$0 = 0, $temp$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $c_inter = sp + 20|0;
 $p_inter = sp;
 $c_inter6 = sp + 4|0;
 $p_inter7 = sp + 8|0;
 $c_inter16 = sp + 12|0;
 $p_inter17 = sp + 16|0;
 $0 = ((($f)) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($f)) + 284|0) + ($rn<<1)|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (((($1) + (($rn*24)|0)|0)) + 13|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ((($f)) + 140|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + (($7*2096)|0)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (((($1) + (($rn*24)|0)|0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($1) + (($rn*24)|0)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) - ($15))|0;
 $17 = (((($1) + (($rn*24)|0)|0)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16>>>0) / ($18>>>0))&-1;
 $20 = ((($f)) + 108|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($f)) + 96|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 $25 = ((($f)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $19 << 2;
 $28 = (($27) + 4)|0;
 $29 = Math_imul($26, $28)|0;
 if ($24) {
  $$alloca_mul = $29;
  $31 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
  $33 = $31;
 } else {
  $30 = (_setup_temp_malloc($f,$29)|0);
  $33 = $30;
 }
 $32 = HEAP32[$25>>2]|0;
 $34 = (_make_block_array($33,$32,$27)|0);
 $35 = ($ch|0)>(0);
 if ($35) {
  $36 = $n << 2;
  $i$092 = 0;
  while(1) {
   $37 = (($do_not_decode) + ($i$092)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = ($38<<24>>24)==(0);
   if ($39) {
    $40 = (($residue_buffers) + ($i$092<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    _memset(($41|0),0,($36|0))|0;
   }
   $42 = (($i$092) + 1)|0;
   $exitcond = ($42|0)==($ch|0);
   if ($exitcond) {
    break;
   } else {
    $i$092 = $42;
   }
  }
 }
 $43 = ($3<<16>>16)==(2);
 $44 = ($ch|0)!=(1);
 $or$cond = $44 & $43;
 if (!($or$cond)) {
  $45 = ($19|0)>(0);
  $46 = ($11|0)>(0);
  $47 = ($ch|0)>(0);
  $48 = (((($1) + (($rn*24)|0)|0)) + 20|0);
  $49 = ((($f)) + 1412|0);
  $50 = ((($f)) + 1408|0);
  $51 = (((($1) + (($rn*24)|0)|0)) + 16|0);
  $$not115 = ($ch|0)<(1);
  $pass$190 = 0;
  L15: while(1) {
   if ($45) {
    $$not = ($pass$190|0)!=(0);
    $brmerge = $$not | $$not115;
    $class_set26$087 = 0;$pcount25$086 = 0;
    while(1) {
     if (!($brmerge)) {
      $j$175 = 0;
      while(1) {
       $289 = (($do_not_decode) + ($j$175)|0);
       $290 = HEAP8[$289>>0]|0;
       $291 = ($290<<24>>24)==(0);
       if ($291) {
        $292 = HEAP32[$8>>2]|0;
        $293 = HEAP8[$5>>0]|0;
        $294 = $293&255;
        $295 = (($292) + (($294*2096)|0)|0);
        $296 = HEAP32[$49>>2]|0;
        $297 = ($296|0)<(10);
        if ($297) {
         _prep_huffman($f);
        }
        $298 = HEAP32[$50>>2]|0;
        $299 = $298 & 1023;
        $300 = ((((($292) + (($294*2096)|0)|0)) + 36|0) + ($299<<1)|0);
        $301 = HEAP16[$300>>1]|0;
        $302 = $301 << 16 >> 16;
        $303 = ($301<<16>>16)>(-1);
        if ($303) {
         $304 = (((($292) + (($294*2096)|0)|0)) + 8|0);
         $305 = HEAP32[$304>>2]|0;
         $306 = (($305) + ($302)|0);
         $307 = HEAP8[$306>>0]|0;
         $308 = $307&255;
         $309 = $298 >>> $308;
         HEAP32[$50>>2] = $309;
         $310 = HEAP32[$49>>2]|0;
         $311 = (($310) - ($308))|0;
         $312 = ($311|0)<(0);
         $$13 = $312 ? 0 : $311;
         HEAP32[$49>>2] = $$13;
         $$14 = $312 ? -1 : $302;
         $temp$0 = $$14;
        } else {
         $313 = (_codebook_decode_scalar_raw($f,$295)|0);
         $temp$0 = $313;
        }
        $314 = (((($292) + (($294*2096)|0)|0)) + 23|0);
        $315 = HEAP8[$314>>0]|0;
        $316 = ($315<<24>>24)==(0);
        if ($316) {
         $temp$1 = $temp$0;
        } else {
         $317 = (((($292) + (($294*2096)|0)|0)) + 2088|0);
         $318 = HEAP32[$317>>2]|0;
         $319 = (($318) + ($temp$0<<2)|0);
         $320 = HEAP32[$319>>2]|0;
         $temp$1 = $320;
        }
        $321 = ($temp$1|0)==(-1);
        if ($321) {
         label = 95;
         break L15;
        }
        $322 = HEAP32[$51>>2]|0;
        $323 = (($322) + ($temp$1<<2)|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = (($34) + ($j$175<<2)|0);
        $326 = HEAP32[$325>>2]|0;
        $327 = (($326) + ($class_set26$087<<2)|0);
        HEAP32[$327>>2] = $324;
       }
       $328 = (($j$175) + 1)|0;
       $329 = ($328|0)<($ch|0);
       if ($329) {
        $j$175 = $328;
       } else {
        break;
       }
      }
     }
     $288 = ($pcount25$086|0)<($19|0);
     $or$cond1581 = $288 & $46;
     if ($or$cond1581) {
      $i$484 = 0;$pcount25$182 = $pcount25$086;
      while(1) {
       if ($47) {
        $j$278 = 0;
        while(1) {
         $330 = (($do_not_decode) + ($j$278)|0);
         $331 = HEAP8[$330>>0]|0;
         $332 = ($331<<24>>24)==(0);
         if ($332) {
          $333 = (($34) + ($j$278<<2)|0);
          $334 = HEAP32[$333>>2]|0;
          $335 = (($334) + ($class_set26$087<<2)|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = (($336) + ($i$484)|0);
          $338 = HEAP8[$337>>0]|0;
          $339 = $338&255;
          $340 = HEAP32[$48>>2]|0;
          $341 = ((($340) + ($339<<4)|0) + ($pass$190<<1)|0);
          $342 = HEAP16[$341>>1]|0;
          $343 = ($342<<16>>16)>(-1);
          if ($343) {
           $344 = $342 << 16 >> 16;
           $345 = (($residue_buffers) + ($j$278<<2)|0);
           $346 = HEAP32[$345>>2]|0;
           $347 = HEAP32[$14>>2]|0;
           $348 = HEAP32[$17>>2]|0;
           $349 = Math_imul($348, $pcount25$182)|0;
           $350 = (($349) + ($347))|0;
           $351 = HEAP32[$8>>2]|0;
           $352 = (($351) + (($344*2096)|0)|0);
           $353 = (_residue_decode($f,$352,$346,$350,$348,$4)|0);
           $354 = ($353|0)==(0);
           if ($354) {
            label = 95;
            break L15;
           }
          }
         }
         $355 = (($j$278) + 1)|0;
         $356 = ($355|0)<($ch|0);
         if ($356) {
          $j$278 = $355;
         } else {
          break;
         }
        }
       }
       $357 = (($i$484) + 1)|0;
       $358 = (($pcount25$182) + 1)|0;
       $359 = ($357|0)<($11|0);
       $360 = ($358|0)<($19|0);
       $or$cond15 = $360 & $359;
       if ($or$cond15) {
        $i$484 = $357;$pcount25$182 = $358;
       } else {
        $pcount25$1$lcssa = $358;
        break;
       }
      }
     } else {
      $pcount25$1$lcssa = $pcount25$086;
     }
     $361 = (($class_set26$087) + 1)|0;
     $362 = ($pcount25$1$lcssa|0)<($19|0);
     if ($362) {
      $class_set26$087 = $361;$pcount25$086 = $pcount25$1$lcssa;
     } else {
      break;
     }
    }
   }
   $363 = (($pass$190) + 1)|0;
   $364 = ($363|0)<(8);
   if ($364) {
    $pass$190 = $363;
   } else {
    label = 95;
    break;
   }
  }
  if ((label|0) == 95) {
   HEAP32[$20>>2] = $21;
   STACKTOP = sp;return;
  }
 }
 $52 = ($ch|0)>(0);
 L57: do {
  if ($52) {
   $j$070 = 0;
   while(1) {
    $53 = (($do_not_decode) + ($j$070)|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = ($54<<24>>24)==(0);
    if ($55) {
     $j$0$lcssa = $j$070;
     break L57;
    }
    $56 = (($j$070) + 1)|0;
    $57 = ($56|0)<($ch|0);
    if ($57) {
     $j$070 = $56;
    } else {
     $j$0$lcssa = $56;
     break;
    }
   }
  } else {
   $j$0$lcssa = 0;
  }
 } while(0);
 $58 = ($j$0$lcssa|0)==($ch|0);
 if ($58) {
  HEAP32[$20>>2] = $21;
  STACKTOP = sp;return;
 }
 $59 = ($19|0)>(0);
 $60 = ((($f)) + 1412|0);
 $61 = ((($f)) + 1408|0);
 $62 = (((($1) + (($rn*24)|0)|0)) + 16|0);
 $63 = ($11|0)>(0);
 $64 = (((($1) + (($rn*24)|0)|0)) + 20|0);
 $65 = ($19|0)>(0);
 $66 = ((($f)) + 1412|0);
 $67 = ((($f)) + 1408|0);
 $68 = (((($1) + (($rn*24)|0)|0)) + 16|0);
 $69 = ($11|0)>(0);
 $70 = (((($1) + (($rn*24)|0)|0)) + 20|0);
 $71 = ($19|0)>(0);
 $72 = ((($f)) + 1412|0);
 $73 = ((($f)) + 1408|0);
 $74 = (((($1) + (($rn*24)|0)|0)) + 16|0);
 $75 = ($11|0)>(0);
 $76 = (((($1) + (($rn*24)|0)|0)) + 20|0);
 $pass$066 = 0;
 L65: while(1) {
  if ((($ch|0) == 2)) {
   if ($65) {
    $78 = ($pass$066|0)==(0);
    $class_set$055 = 0;$pcount$056 = 0;
    while(1) {
     $80 = HEAP32[$14>>2]|0;
     $81 = HEAP32[$17>>2]|0;
     $82 = Math_imul($81, $pcount$056)|0;
     $83 = (($82) + ($80))|0;
     $84 = $83 & 1;
     HEAP32[$c_inter>>2] = $84;
     $85 = $83 >> 1;
     HEAP32[$p_inter>>2] = $85;
     if ($78) {
      $86 = HEAP32[$8>>2]|0;
      $87 = HEAP8[$5>>0]|0;
      $88 = $87&255;
      $89 = (($86) + (($88*2096)|0)|0);
      $90 = HEAP32[$66>>2]|0;
      $91 = ($90|0)<(10);
      if ($91) {
       _prep_huffman($f);
      }
      $92 = HEAP32[$67>>2]|0;
      $93 = $92 & 1023;
      $94 = ((((($86) + (($88*2096)|0)|0)) + 36|0) + ($93<<1)|0);
      $95 = HEAP16[$94>>1]|0;
      $96 = $95 << 16 >> 16;
      $97 = ($95<<16>>16)>(-1);
      if ($97) {
       $98 = (((($86) + (($88*2096)|0)|0)) + 8|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (($99) + ($96)|0);
       $101 = HEAP8[$100>>0]|0;
       $102 = $101&255;
       $103 = $92 >>> $102;
       HEAP32[$67>>2] = $103;
       $104 = HEAP32[$66>>2]|0;
       $105 = (($104) - ($102))|0;
       $106 = ($105|0)<(0);
       $$ = $106 ? 0 : $105;
       HEAP32[$66>>2] = $$;
       $$5 = $106 ? -1 : $96;
       $q$0 = $$5;
      } else {
       $107 = (_codebook_decode_scalar_raw($f,$89)|0);
       $q$0 = $107;
      }
      $108 = (((($86) + (($88*2096)|0)|0)) + 23|0);
      $109 = HEAP8[$108>>0]|0;
      $110 = ($109<<24>>24)==(0);
      if ($110) {
       $q$1 = $q$0;
      } else {
       $111 = (((($86) + (($88*2096)|0)|0)) + 2088|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = (($112) + ($q$0<<2)|0);
       $114 = HEAP32[$113>>2]|0;
       $q$1 = $114;
      }
      $115 = ($q$1|0)==(-1);
      if ($115) {
       label = 95;
       break L65;
      }
      $116 = HEAP32[$68>>2]|0;
      $117 = (($116) + ($q$1<<2)|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = HEAP32[$34>>2]|0;
      $120 = (($119) + ($class_set$055<<2)|0);
      HEAP32[$120>>2] = $118;
     }
     $121 = ($pcount$056|0)<($19|0);
     $or$cond650 = $121 & $69;
     if ($or$cond650) {
      $i$152 = 0;$pcount$151 = $pcount$056;
      while(1) {
       $122 = HEAP32[$17>>2]|0;
       $123 = HEAP32[$34>>2]|0;
       $124 = (($123) + ($class_set$055<<2)|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = (($125) + ($i$152)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = $127&255;
       $129 = HEAP32[$70>>2]|0;
       $130 = ((($129) + ($128<<4)|0) + ($pass$066<<1)|0);
       $131 = HEAP16[$130>>1]|0;
       $132 = ($131<<16>>16)>(-1);
       if ($132) {
        $133 = $131 << 16 >> 16;
        $134 = HEAP32[$8>>2]|0;
        $135 = (($134) + (($133*2096)|0)|0);
        $136 = (_codebook_decode_deinterleave_repeat_2($f,$135,$residue_buffers,$c_inter,$p_inter,$n,$122)|0);
        $137 = ($136|0)==(0);
        if ($137) {
         label = 95;
         break L65;
        }
       } else {
        $138 = HEAP32[$14>>2]|0;
        $139 = Math_imul($122, $pcount$151)|0;
        $140 = (($139) + ($122))|0;
        $141 = (($140) + ($138))|0;
        $142 = $141 & 1;
        HEAP32[$c_inter>>2] = $142;
        $143 = $141 >> 1;
        HEAP32[$p_inter>>2] = $143;
       }
       $144 = (($i$152) + 1)|0;
       $145 = (($pcount$151) + 1)|0;
       $146 = ($144|0)<($11|0);
       $147 = ($145|0)<($19|0);
       $or$cond6 = $147 & $146;
       if ($or$cond6) {
        $i$152 = $144;$pcount$151 = $145;
       } else {
        $pcount$1$lcssa = $145;
        break;
       }
      }
     } else {
      $pcount$1$lcssa = $pcount$056;
     }
     $148 = (($class_set$055) + 1)|0;
     $149 = ($pcount$1$lcssa|0)<($19|0);
     if ($149) {
      $class_set$055 = $148;$pcount$056 = $pcount$1$lcssa;
     } else {
      break;
     }
    }
   }
  } else if ((($ch|0) == 1)) {
   if ($71) {
    $77 = ($pass$066|0)==(0);
    $class_set$147 = 0;$pcount$248 = 0;
    while(1) {
     $150 = HEAP32[$14>>2]|0;
     $151 = HEAP32[$17>>2]|0;
     $152 = Math_imul($151, $pcount$248)|0;
     $153 = (($152) + ($150))|0;
     HEAP32[$c_inter6>>2] = 0;
     HEAP32[$p_inter7>>2] = $153;
     if ($77) {
      $154 = HEAP32[$8>>2]|0;
      $155 = HEAP8[$5>>0]|0;
      $156 = $155&255;
      $157 = (($154) + (($156*2096)|0)|0);
      $158 = HEAP32[$72>>2]|0;
      $159 = ($158|0)<(10);
      if ($159) {
       _prep_huffman($f);
      }
      $160 = HEAP32[$73>>2]|0;
      $161 = $160 & 1023;
      $162 = ((((($154) + (($156*2096)|0)|0)) + 36|0) + ($161<<1)|0);
      $163 = HEAP16[$162>>1]|0;
      $164 = $163 << 16 >> 16;
      $165 = ($163<<16>>16)>(-1);
      if ($165) {
       $166 = (((($154) + (($156*2096)|0)|0)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = (($167) + ($164)|0);
       $169 = HEAP8[$168>>0]|0;
       $170 = $169&255;
       $171 = $160 >>> $170;
       HEAP32[$73>>2] = $171;
       $172 = HEAP32[$72>>2]|0;
       $173 = (($172) - ($170))|0;
       $174 = ($173|0)<(0);
       $$7 = $174 ? 0 : $173;
       HEAP32[$72>>2] = $$7;
       $$8 = $174 ? -1 : $164;
       $q9$0 = $$8;
      } else {
       $175 = (_codebook_decode_scalar_raw($f,$157)|0);
       $q9$0 = $175;
      }
      $176 = (((($154) + (($156*2096)|0)|0)) + 23|0);
      $177 = HEAP8[$176>>0]|0;
      $178 = ($177<<24>>24)==(0);
      if ($178) {
       $q9$1 = $q9$0;
      } else {
       $179 = (((($154) + (($156*2096)|0)|0)) + 2088|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = (($180) + ($q9$0<<2)|0);
       $182 = HEAP32[$181>>2]|0;
       $q9$1 = $182;
      }
      $183 = ($q9$1|0)==(-1);
      if ($183) {
       label = 95;
       break L65;
      }
      $184 = HEAP32[$74>>2]|0;
      $185 = (($184) + ($q9$1<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = HEAP32[$34>>2]|0;
      $188 = (($187) + ($class_set$147<<2)|0);
      HEAP32[$188>>2] = $186;
     }
     $189 = ($pcount$248|0)<($19|0);
     $or$cond944 = $189 & $75;
     if ($or$cond944) {
      $i$246 = 0;$pcount$345 = $pcount$248;
      while(1) {
       $190 = HEAP32[$17>>2]|0;
       $191 = HEAP32[$34>>2]|0;
       $192 = (($191) + ($class_set$147<<2)|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = (($193) + ($i$246)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = HEAP32[$76>>2]|0;
       $198 = ((($197) + ($196<<4)|0) + ($pass$066<<1)|0);
       $199 = HEAP16[$198>>1]|0;
       $200 = ($199<<16>>16)>(-1);
       if ($200) {
        $201 = $199 << 16 >> 16;
        $202 = HEAP32[$8>>2]|0;
        $203 = (($202) + (($201*2096)|0)|0);
        $204 = (_codebook_decode_deinterleave_repeat($f,$203,$residue_buffers,$ch,$c_inter6,$p_inter7,$n,$190)|0);
        $205 = ($204|0)==(0);
        if ($205) {
         label = 95;
         break L65;
        }
       } else {
        $206 = HEAP32[$14>>2]|0;
        $207 = Math_imul($190, $pcount$345)|0;
        $208 = (($207) + ($190))|0;
        $209 = (($208) + ($206))|0;
        HEAP32[$c_inter6>>2] = 0;
        HEAP32[$p_inter7>>2] = $209;
       }
       $210 = (($i$246) + 1)|0;
       $211 = (($pcount$345) + 1)|0;
       $212 = ($210|0)<($11|0);
       $213 = ($211|0)<($19|0);
       $or$cond9 = $213 & $212;
       if ($or$cond9) {
        $i$246 = $210;$pcount$345 = $211;
       } else {
        $pcount$3$lcssa = $211;
        break;
       }
      }
     } else {
      $pcount$3$lcssa = $pcount$248;
     }
     $214 = (($class_set$147) + 1)|0;
     $215 = ($pcount$3$lcssa|0)<($19|0);
     if ($215) {
      $class_set$147 = $214;$pcount$248 = $pcount$3$lcssa;
     } else {
      break;
     }
    }
   }
  } else {
   if ($59) {
    $79 = ($pass$066|0)==(0);
    $class_set$263 = 0;$pcount$464 = 0;
    while(1) {
     $216 = HEAP32[$14>>2]|0;
     $217 = HEAP32[$17>>2]|0;
     $218 = Math_imul($217, $pcount$464)|0;
     $219 = (($218) + ($216))|0;
     $220 = (($219|0) % ($ch|0))&-1;
     HEAP32[$c_inter16>>2] = $220;
     $221 = (($219|0) / ($ch|0))&-1;
     HEAP32[$p_inter17>>2] = $221;
     if ($79) {
      $222 = HEAP32[$8>>2]|0;
      $223 = HEAP8[$5>>0]|0;
      $224 = $223&255;
      $225 = (($222) + (($224*2096)|0)|0);
      $226 = HEAP32[$60>>2]|0;
      $227 = ($226|0)<(10);
      if ($227) {
       _prep_huffman($f);
      }
      $228 = HEAP32[$61>>2]|0;
      $229 = $228 & 1023;
      $230 = ((((($222) + (($224*2096)|0)|0)) + 36|0) + ($229<<1)|0);
      $231 = HEAP16[$230>>1]|0;
      $232 = $231 << 16 >> 16;
      $233 = ($231<<16>>16)>(-1);
      if ($233) {
       $234 = (((($222) + (($224*2096)|0)|0)) + 8|0);
       $235 = HEAP32[$234>>2]|0;
       $236 = (($235) + ($232)|0);
       $237 = HEAP8[$236>>0]|0;
       $238 = $237&255;
       $239 = $228 >>> $238;
       HEAP32[$61>>2] = $239;
       $240 = HEAP32[$60>>2]|0;
       $241 = (($240) - ($238))|0;
       $242 = ($241|0)<(0);
       $$10 = $242 ? 0 : $241;
       HEAP32[$60>>2] = $$10;
       $$11 = $242 ? -1 : $232;
       $q19$0 = $$11;
      } else {
       $243 = (_codebook_decode_scalar_raw($f,$225)|0);
       $q19$0 = $243;
      }
      $244 = (((($222) + (($224*2096)|0)|0)) + 23|0);
      $245 = HEAP8[$244>>0]|0;
      $246 = ($245<<24>>24)==(0);
      if ($246) {
       $q19$1 = $q19$0;
      } else {
       $247 = (((($222) + (($224*2096)|0)|0)) + 2088|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = (($248) + ($q19$0<<2)|0);
       $250 = HEAP32[$249>>2]|0;
       $q19$1 = $250;
      }
      $251 = ($q19$1|0)==(-1);
      if ($251) {
       label = 95;
       break L65;
      }
      $252 = HEAP32[$62>>2]|0;
      $253 = (($252) + ($q19$1<<2)|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = HEAP32[$34>>2]|0;
      $256 = (($255) + ($class_set$263<<2)|0);
      HEAP32[$256>>2] = $254;
     }
     $257 = ($pcount$464|0)<($19|0);
     $or$cond1258 = $257 & $63;
     if ($or$cond1258) {
      $i$360 = 0;$pcount$559 = $pcount$464;
      while(1) {
       $258 = HEAP32[$17>>2]|0;
       $259 = HEAP32[$34>>2]|0;
       $260 = (($259) + ($class_set$263<<2)|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = (($261) + ($i$360)|0);
       $263 = HEAP8[$262>>0]|0;
       $264 = $263&255;
       $265 = HEAP32[$64>>2]|0;
       $266 = ((($265) + ($264<<4)|0) + ($pass$066<<1)|0);
       $267 = HEAP16[$266>>1]|0;
       $268 = ($267<<16>>16)>(-1);
       if ($268) {
        $269 = $267 << 16 >> 16;
        $270 = HEAP32[$8>>2]|0;
        $271 = (($270) + (($269*2096)|0)|0);
        $272 = (_codebook_decode_deinterleave_repeat($f,$271,$residue_buffers,$ch,$c_inter16,$p_inter17,$n,$258)|0);
        $273 = ($272|0)==(0);
        if ($273) {
         label = 95;
         break L65;
        }
       } else {
        $274 = HEAP32[$14>>2]|0;
        $275 = Math_imul($258, $pcount$559)|0;
        $276 = (($275) + ($258))|0;
        $277 = (($276) + ($274))|0;
        $278 = (($277|0) % ($ch|0))&-1;
        HEAP32[$c_inter16>>2] = $278;
        $279 = (($277|0) / ($ch|0))&-1;
        HEAP32[$p_inter17>>2] = $279;
       }
       $280 = (($i$360) + 1)|0;
       $281 = (($pcount$559) + 1)|0;
       $282 = ($280|0)<($11|0);
       $283 = ($281|0)<($19|0);
       $or$cond12 = $283 & $282;
       if ($or$cond12) {
        $i$360 = $280;$pcount$559 = $281;
       } else {
        $pcount$5$lcssa = $281;
        break;
       }
      }
     } else {
      $pcount$5$lcssa = $pcount$464;
     }
     $284 = (($class_set$263) + 1)|0;
     $285 = ($pcount$5$lcssa|0)<($19|0);
     if ($285) {
      $class_set$263 = $284;$pcount$464 = $pcount$5$lcssa;
     } else {
      break;
     }
    }
   }
  }
  $286 = (($pass$066) + 1)|0;
  $287 = ($286|0)<(8);
  if ($287) {
   $pass$066 = $286;
  } else {
   label = 95;
   break;
  }
 }
 if ((label|0) == 95) {
  HEAP32[$20>>2] = $21;
  STACKTOP = sp;return;
 }
}
function _do_floor($f,$map,$i,$n,$target,$finalY) {
 $f = $f|0;
 $map = $map|0;
 $i = $i|0;
 $n = $n|0;
 $target = $target|0;
 $finalY = $finalY|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $j$01 = 0, $lx$0$lcssa = 0, $lx$03 = 0, $lx$1 = 0, $ly$0$lcssa = 0, $ly$04 = 0, $ly$1 = 0, $q$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >> 1;
 $1 = ((($map)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (((($2) + (($i*3)|0)|0)) + 2|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (((($map)) + 9|0) + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (((($f)) + 148|0) + ($8<<1)|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($10<<16>>16)==(0);
 if ($11) {
  _error($f,21);
  return;
 }
 $12 = ((($f)) + 276|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP16[$finalY>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = (((($13) + (($8*1596)|0)|0)) + 1588|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = Math_imul($18, $15)|0;
 $20 = (((($13) + (($8*1596)|0)|0)) + 1592|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)>(1);
 if ($22) {
  $lx$03 = 0;$ly$04 = $19;$q$02 = 1;
  while(1) {
   $23 = ((((($13) + (($8*1596)|0)|0)) + 838|0) + ($q$02)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = (($finalY) + ($25<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = ($27<<16>>16)>(-1);
   if ($28) {
    $29 = $27 << 16 >> 16;
    $30 = HEAP8[$16>>0]|0;
    $31 = $30&255;
    $32 = Math_imul($31, $29)|0;
    $33 = ((((($13) + (($8*1596)|0)|0)) + 338|0) + ($25<<1)|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34&65535;
    _draw_line($target,$lx$03,$ly$04,$35,$32,$0);
    $lx$1 = $35;$ly$1 = $32;
   } else {
    $lx$1 = $lx$03;$ly$1 = $ly$04;
   }
   $36 = (($q$02) + 1)|0;
   $37 = HEAP32[$20>>2]|0;
   $38 = ($36|0)<($37|0);
   if ($38) {
    $lx$03 = $lx$1;$ly$04 = $ly$1;$q$02 = $36;
   } else {
    $lx$0$lcssa = $lx$1;$ly$0$lcssa = $ly$1;
    break;
   }
  }
 } else {
  $lx$0$lcssa = 0;$ly$0$lcssa = $19;
 }
 $39 = ($lx$0$lcssa|0)<($0|0);
 if (!($39)) {
  return;
 }
 $40 = (22352 + ($ly$0$lcssa<<2)|0);
 $41 = +HEAPF32[$40>>2];
 $j$01 = $lx$0$lcssa;
 while(1) {
  $42 = (($target) + ($j$01<<2)|0);
  $43 = +HEAPF32[$42>>2];
  $44 = $41 * $43;
  HEAPF32[$42>>2] = $44;
  $45 = (($j$01) + 1)|0;
  $exitcond = ($45|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $j$01 = $45;
  }
 }
 return;
}
function _inverse_mdct($buffer,$n,$f,$blocktype) {
 $buffer = $buffer|0;
 $n = $n|0;
 $f = $f|0;
 $blocktype = $blocktype|0;
 var $$alloca_mul = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0;
 var $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0;
 var $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0.0, $259 = 0.0;
 var $26 = 0.0, $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0;
 var $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0;
 var $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0.0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0.0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0.0, $349 = 0;
 var $35 = 0.0, $350 = 0, $351 = 0, $352 = 0.0, $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0, $366 = 0.0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0;
 var $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $A0$024 = 0, $AA$0$lcssa = 0, $AA$050 = 0, $AA$144 = 0;
 var $AA1$040 = 0, $B$08 = 0, $C$010 = 0, $bitrev$016 = 0, $d$0$lcssa = 0, $d$052 = 0, $d$146 = 0, $d0$039 = 0, $d05$017 = 0, $d09$04 = 0, $d1$038 = 0, $d110$05 = 0, $d16$018 = 0, $d2$06 = 0, $d3$07 = 0, $d7$011 = 0, $e$051 = 0, $e$145 = 0, $e0$037 = 0, $e1$036 = 0;
 var $e11$09 = 0, $e8$012 = 0, $exitcond = 0, $exitcond60 = 0, $i$030 = 0, $i_off$023 = 0, $l$0$lcssa = 0, $l$033 = 0, $l$127 = 0, $r$022 = 0, $scevgep = 0, $scevgep61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n >> 1;
 $1 = $n >> 2;
 $2 = $n >> 3;
 $3 = ((($f)) + 108|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($f)) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 $8 = $0 << 2;
 if ($7) {
  $$alloca_mul = $8;
  $10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
  $15 = $10;
 } else {
  $9 = (_setup_temp_malloc($f,$8)|0);
  $15 = $9;
 }
 $11 = (((($f)) + 1084|0) + ($blocktype<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($0) + -2)|0;
 $14 = (($15) + ($13<<2)|0);
 $16 = (($buffer) + ($0<<2)|0);
 $17 = ($0|0)==(0);
 if ($17) {
  $AA$0$lcssa = $12;$d$0$lcssa = $14;
 } else {
  $18 = $0 << 2;
  $19 = (($18) + -16)|0;
  $20 = $19 >>> 4;
  $21 = $20 << 1;
  $22 = (($21) + 2)|0;
  $23 = $20 << 3;
  $24 = (($19) - ($23))|0;
  $scevgep61 = (($15) + ($24)|0);
  $AA$050 = $12;$d$052 = $14;$e$051 = $buffer;
  while(1) {
   $25 = +HEAPF32[$e$051>>2];
   $26 = +HEAPF32[$AA$050>>2];
   $27 = $25 * $26;
   $28 = ((($e$051)) + 8|0);
   $29 = +HEAPF32[$28>>2];
   $30 = ((($AA$050)) + 4|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $29 * $31;
   $33 = $27 - $32;
   $34 = ((($d$052)) + 4|0);
   HEAPF32[$34>>2] = $33;
   $35 = +HEAPF32[$e$051>>2];
   $36 = +HEAPF32[$30>>2];
   $37 = $35 * $36;
   $38 = +HEAPF32[$28>>2];
   $39 = +HEAPF32[$AA$050>>2];
   $40 = $38 * $39;
   $41 = $37 + $40;
   HEAPF32[$d$052>>2] = $41;
   $42 = ((($d$052)) + -8|0);
   $43 = ((($AA$050)) + 8|0);
   $44 = ((($e$051)) + 16|0);
   $45 = ($44|0)==($16|0);
   if ($45) {
    break;
   } else {
    $AA$050 = $43;$d$052 = $42;$e$051 = $44;
   }
  }
  $scevgep = (($12) + ($22<<2)|0);
  $AA$0$lcssa = $scevgep;$d$0$lcssa = $scevgep61;
 }
 $46 = ($d$0$lcssa>>>0)<($15>>>0);
 if (!($46)) {
  $47 = (($0) + -3)|0;
  $48 = (($buffer) + ($47<<2)|0);
  $AA$144 = $AA$0$lcssa;$d$146 = $d$0$lcssa;$e$145 = $48;
  while(1) {
   $49 = ((($e$145)) + 8|0);
   $50 = +HEAPF32[$49>>2];
   $51 = +HEAPF32[$AA$144>>2];
   $52 = $50 * $51;
   $53 = +HEAPF32[$e$145>>2];
   $54 = ((($AA$144)) + 4|0);
   $55 = +HEAPF32[$54>>2];
   $56 = $53 * $55;
   $57 = $56 - $52;
   $58 = ((($d$146)) + 4|0);
   HEAPF32[$58>>2] = $57;
   $59 = +HEAPF32[$49>>2];
   $60 = +HEAPF32[$54>>2];
   $61 = $59 * $60;
   $62 = +HEAPF32[$e$145>>2];
   $63 = +HEAPF32[$AA$144>>2];
   $64 = $62 * $63;
   $65 = -$64;
   $66 = $65 - $61;
   HEAPF32[$d$146>>2] = $66;
   $67 = ((($d$146)) + -8|0);
   $68 = ((($AA$144)) + 8|0);
   $69 = ((($e$145)) + -16|0);
   $70 = ($67>>>0)<($15>>>0);
   if ($70) {
    break;
   } else {
    $AA$144 = $68;$d$146 = $67;$e$145 = $69;
   }
  }
 }
 $71 = (($0) + -8)|0;
 $72 = ($0|0)<(8);
 if (!($72)) {
  $73 = (($12) + ($71<<2)|0);
  $74 = (($buffer) + ($1<<2)|0);
  $75 = (($15) + ($1<<2)|0);
  $AA1$040 = $73;$d0$039 = $74;$d1$038 = $buffer;$e0$037 = $75;$e1$036 = $15;
  while(1) {
   $76 = ((($e0$037)) + 4|0);
   $77 = +HEAPF32[$76>>2];
   $78 = ((($e1$036)) + 4|0);
   $79 = +HEAPF32[$78>>2];
   $80 = $77 - $79;
   $81 = +HEAPF32[$e0$037>>2];
   $82 = +HEAPF32[$e1$036>>2];
   $83 = $81 - $82;
   $84 = $77 + $79;
   $85 = ((($d0$039)) + 4|0);
   HEAPF32[$85>>2] = $84;
   $86 = +HEAPF32[$e0$037>>2];
   $87 = +HEAPF32[$e1$036>>2];
   $88 = $86 + $87;
   HEAPF32[$d0$039>>2] = $88;
   $89 = ((($AA1$040)) + 16|0);
   $90 = +HEAPF32[$89>>2];
   $91 = $80 * $90;
   $92 = ((($AA1$040)) + 20|0);
   $93 = +HEAPF32[$92>>2];
   $94 = $83 * $93;
   $95 = $91 - $94;
   $96 = ((($d1$038)) + 4|0);
   HEAPF32[$96>>2] = $95;
   $97 = +HEAPF32[$89>>2];
   $98 = $83 * $97;
   $99 = +HEAPF32[$92>>2];
   $100 = $80 * $99;
   $101 = $98 + $100;
   HEAPF32[$d1$038>>2] = $101;
   $102 = ((($e0$037)) + 12|0);
   $103 = +HEAPF32[$102>>2];
   $104 = ((($e1$036)) + 12|0);
   $105 = +HEAPF32[$104>>2];
   $106 = $103 - $105;
   $107 = ((($e0$037)) + 8|0);
   $108 = +HEAPF32[$107>>2];
   $109 = ((($e1$036)) + 8|0);
   $110 = +HEAPF32[$109>>2];
   $111 = $108 - $110;
   $112 = $103 + $105;
   $113 = ((($d0$039)) + 12|0);
   HEAPF32[$113>>2] = $112;
   $114 = +HEAPF32[$107>>2];
   $115 = +HEAPF32[$109>>2];
   $116 = $114 + $115;
   $117 = ((($d0$039)) + 8|0);
   HEAPF32[$117>>2] = $116;
   $118 = +HEAPF32[$AA1$040>>2];
   $119 = $106 * $118;
   $120 = ((($AA1$040)) + 4|0);
   $121 = +HEAPF32[$120>>2];
   $122 = $111 * $121;
   $123 = $119 - $122;
   $124 = ((($d1$038)) + 12|0);
   HEAPF32[$124>>2] = $123;
   $125 = +HEAPF32[$AA1$040>>2];
   $126 = $111 * $125;
   $127 = +HEAPF32[$120>>2];
   $128 = $106 * $127;
   $129 = $126 + $128;
   $130 = ((($d1$038)) + 8|0);
   HEAPF32[$130>>2] = $129;
   $131 = ((($AA1$040)) + -32|0);
   $132 = ((($d0$039)) + 16|0);
   $133 = ((($d1$038)) + 16|0);
   $134 = ((($e0$037)) + 16|0);
   $135 = ((($e1$036)) + 16|0);
   $136 = ($131>>>0)<($12>>>0);
   if ($136) {
    break;
   } else {
    $AA1$040 = $131;$d0$039 = $132;$d1$038 = $133;$e0$037 = $134;$e1$036 = $135;
   }
  }
 }
 $137 = (_ilog($n)|0);
 $138 = $n >> 4;
 $139 = (($0) + -1)|0;
 $140 = (0 - ($2))|0;
 _imdct_step3_iter0_loop($138,$buffer,$139,$140,$12);
 $141 = (($139) - ($1))|0;
 _imdct_step3_iter0_loop($138,$buffer,$141,$140,$12);
 $142 = $n >> 5;
 $143 = (0 - ($138))|0;
 _imdct_step3_inner_r_loop($142,$buffer,$139,$143,$12,16);
 $144 = (($139) - ($2))|0;
 _imdct_step3_inner_r_loop($142,$buffer,$144,$143,$12,16);
 $145 = $2 << 1;
 $146 = (($139) - ($145))|0;
 _imdct_step3_inner_r_loop($142,$buffer,$146,$143,$12,16);
 $147 = Math_imul($2, -3)|0;
 $148 = (($139) + ($147))|0;
 _imdct_step3_inner_r_loop($142,$buffer,$148,$143,$12,16);
 $149 = (($137) + -4)|0;
 $150 = $149 >> 1;
 $151 = ($150|0)>(2);
 if ($151) {
  $l$033 = 2;
  while(1) {
   $156 = (($l$033) + 2)|0;
   $157 = $n >> $156;
   $152 = (($l$033) + 1)|0;
   $158 = 1 << $152;
   $159 = ($152|0)==(31);
   if (!($159)) {
    $160 = $157 >> 1;
    $161 = (($l$033) + 4)|0;
    $162 = $n >> $161;
    $163 = (0 - ($160))|0;
    $164 = (($l$033) + 3)|0;
    $165 = 1 << $164;
    $i$030 = 0;
    while(1) {
     $166 = Math_imul($i$030, $157)|0;
     $167 = (($139) - ($166))|0;
     _imdct_step3_inner_r_loop($162,$buffer,$167,$163,$12,$165);
     $168 = (($i$030) + 1)|0;
     $169 = ($168|0)<($158|0);
     if ($169) {
      $i$030 = $168;
     } else {
      break;
     }
    }
   }
   $exitcond60 = ($152|0)==($150|0);
   if ($exitcond60) {
    $l$0$lcssa = $150;
    break;
   } else {
    $l$033 = $152;
   }
  }
 } else {
  $l$0$lcssa = 2;
 }
 $153 = (($137) + -7)|0;
 $154 = ($l$0$lcssa|0)<($153|0);
 if ($154) {
  $155 = (($137) + -7)|0;
  $l$127 = $l$0$lcssa;
  while(1) {
   $171 = (($l$127) + 2)|0;
   $172 = $n >> $171;
   $173 = (($l$127) + 3)|0;
   $174 = 1 << $173;
   $175 = (($l$127) + 6)|0;
   $176 = $n >> $175;
   $170 = (($l$127) + 1)|0;
   $177 = 1 << $170;
   $178 = ($176|0)>(0);
   if ($178) {
    $179 = $172 >> 1;
    $180 = (0 - ($179))|0;
    $181 = $174 << 2;
    $A0$024 = $12;$i_off$023 = $139;$r$022 = $176;
    while(1) {
     _imdct_step3_inner_s_loop($177,$buffer,$i_off$023,$180,$A0$024,$174,$172);
     $182 = (($A0$024) + ($181<<2)|0);
     $183 = (($i_off$023) + -8)|0;
     $184 = (($r$022) + -1)|0;
     $185 = ($r$022|0)>(1);
     if ($185) {
      $A0$024 = $182;$i_off$023 = $183;$r$022 = $184;
     } else {
      break;
     }
    }
   }
   $exitcond = ($170|0)==($155|0);
   if ($exitcond) {
    break;
   } else {
    $l$127 = $170;
   }
  }
 }
 _imdct_step3_inner_s_loop_ld654($142,$buffer,$139,$12,$n);
 $186 = (($1) + -4)|0;
 $187 = (($15) + ($186<<2)|0);
 $188 = (($0) + -4)|0;
 $189 = (($15) + ($188<<2)|0);
 $190 = ($187>>>0)<($15>>>0);
 if (!($190)) {
  $191 = (((($f)) + 1116|0) + ($blocktype<<2)|0);
  $192 = HEAP32[$191>>2]|0;
  $bitrev$016 = $192;$d05$017 = $187;$d16$018 = $189;
  while(1) {
   $193 = HEAP16[$bitrev$016>>1]|0;
   $194 = $193&65535;
   $195 = (($buffer) + ($194<<2)|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = ((($d16$018)) + 12|0);
   HEAP32[$197>>2] = $196;
   $198 = (($194) + 1)|0;
   $199 = (($buffer) + ($198<<2)|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ((($d16$018)) + 8|0);
   HEAP32[$201>>2] = $200;
   $202 = (($194) + 2)|0;
   $203 = (($buffer) + ($202<<2)|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = ((($d05$017)) + 12|0);
   HEAP32[$205>>2] = $204;
   $206 = (($194) + 3)|0;
   $207 = (($buffer) + ($206<<2)|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = ((($d05$017)) + 8|0);
   HEAP32[$209>>2] = $208;
   $210 = ((($bitrev$016)) + 2|0);
   $211 = HEAP16[$210>>1]|0;
   $212 = $211&65535;
   $213 = (($buffer) + ($212<<2)|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ((($d16$018)) + 4|0);
   HEAP32[$215>>2] = $214;
   $216 = (($212) + 1)|0;
   $217 = (($buffer) + ($216<<2)|0);
   $218 = HEAP32[$217>>2]|0;
   HEAP32[$d16$018>>2] = $218;
   $219 = (($212) + 2)|0;
   $220 = (($buffer) + ($219<<2)|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = ((($d05$017)) + 4|0);
   HEAP32[$222>>2] = $221;
   $223 = (($212) + 3)|0;
   $224 = (($buffer) + ($223<<2)|0);
   $225 = HEAP32[$224>>2]|0;
   HEAP32[$d05$017>>2] = $225;
   $226 = ((($d05$017)) + -16|0);
   $227 = ((($d16$018)) + -16|0);
   $228 = ((($bitrev$016)) + 4|0);
   $229 = ($226>>>0)<($15>>>0);
   if ($229) {
    break;
   } else {
    $bitrev$016 = $228;$d05$017 = $226;$d16$018 = $227;
   }
  }
 }
 $230 = ($15>>>0)<($189>>>0);
 if ($230) {
  $231 = (((($f)) + 1100|0) + ($blocktype<<2)|0);
  $232 = HEAP32[$231>>2]|0;
  $C$010 = $232;$d7$011 = $15;$e8$012 = $189;
  while(1) {
   $233 = +HEAPF32[$d7$011>>2];
   $234 = ((($e8$012)) + 8|0);
   $235 = +HEAPF32[$234>>2];
   $236 = $233 - $235;
   $237 = ((($d7$011)) + 4|0);
   $238 = +HEAPF32[$237>>2];
   $239 = ((($e8$012)) + 12|0);
   $240 = +HEAPF32[$239>>2];
   $241 = $238 + $240;
   $242 = ((($C$010)) + 4|0);
   $243 = +HEAPF32[$242>>2];
   $244 = $236 * $243;
   $245 = +HEAPF32[$C$010>>2];
   $246 = $241 * $245;
   $247 = $244 + $246;
   $248 = $243 * $241;
   $249 = $236 * $245;
   $250 = $248 - $249;
   $251 = $233 + $235;
   $252 = $238 - $240;
   $253 = $251 + $247;
   HEAPF32[$d7$011>>2] = $253;
   $254 = $252 + $250;
   HEAPF32[$237>>2] = $254;
   $255 = $251 - $247;
   HEAPF32[$234>>2] = $255;
   $256 = $250 - $252;
   HEAPF32[$239>>2] = $256;
   $257 = ((($d7$011)) + 8|0);
   $258 = +HEAPF32[$257>>2];
   $259 = +HEAPF32[$e8$012>>2];
   $260 = $258 - $259;
   $261 = ((($d7$011)) + 12|0);
   $262 = +HEAPF32[$261>>2];
   $263 = ((($e8$012)) + 4|0);
   $264 = +HEAPF32[$263>>2];
   $265 = $262 + $264;
   $266 = ((($C$010)) + 12|0);
   $267 = +HEAPF32[$266>>2];
   $268 = $260 * $267;
   $269 = ((($C$010)) + 8|0);
   $270 = +HEAPF32[$269>>2];
   $271 = $265 * $270;
   $272 = $268 + $271;
   $273 = $267 * $265;
   $274 = $260 * $270;
   $275 = $273 - $274;
   $276 = $258 + $259;
   $277 = $262 - $264;
   $278 = $276 + $272;
   HEAPF32[$257>>2] = $278;
   $279 = $277 + $275;
   HEAPF32[$261>>2] = $279;
   $280 = $276 - $272;
   HEAPF32[$e8$012>>2] = $280;
   $281 = $275 - $277;
   HEAPF32[$263>>2] = $281;
   $282 = ((($C$010)) + 16|0);
   $283 = ((($d7$011)) + 16|0);
   $284 = ((($e8$012)) + -16|0);
   $285 = ($283>>>0)<($284>>>0);
   if ($285) {
    $C$010 = $282;$d7$011 = $283;$e8$012 = $284;
   } else {
    break;
   }
  }
 }
 $286 = (($15) + ($71<<2)|0);
 $287 = ($286>>>0)<($15>>>0);
 if ($287) {
  HEAP32[$3>>2] = $4;
  STACKTOP = sp;return;
 }
 $288 = (($n) + -4)|0;
 $289 = (($buffer) + ($288<<2)|0);
 $290 = (($buffer) + ($188<<2)|0);
 $291 = (((($f)) + 1092|0) + ($blocktype<<2)|0);
 $292 = HEAP32[$291>>2]|0;
 $293 = (($292) + ($71<<2)|0);
 $B$08 = $293;$d09$04 = $buffer;$d110$05 = $290;$d2$06 = $16;$d3$07 = $289;$e11$09 = $286;
 while(1) {
  $294 = ((($e11$09)) + 24|0);
  $295 = +HEAPF32[$294>>2];
  $296 = ((($B$08)) + 28|0);
  $297 = +HEAPF32[$296>>2];
  $298 = $295 * $297;
  $299 = ((($e11$09)) + 28|0);
  $300 = +HEAPF32[$299>>2];
  $301 = ((($B$08)) + 24|0);
  $302 = +HEAPF32[$301>>2];
  $303 = $300 * $302;
  $304 = $298 - $303;
  $305 = $295 * $302;
  $306 = -$305;
  $307 = $297 * $300;
  $308 = $306 - $307;
  HEAPF32[$d09$04>>2] = $304;
  $309 = -$304;
  $310 = ((($d110$05)) + 12|0);
  HEAPF32[$310>>2] = $309;
  HEAPF32[$d2$06>>2] = $308;
  $311 = ((($d3$07)) + 12|0);
  HEAPF32[$311>>2] = $308;
  $312 = ((($e11$09)) + 16|0);
  $313 = +HEAPF32[$312>>2];
  $314 = ((($B$08)) + 20|0);
  $315 = +HEAPF32[$314>>2];
  $316 = $313 * $315;
  $317 = ((($e11$09)) + 20|0);
  $318 = +HEAPF32[$317>>2];
  $319 = ((($B$08)) + 16|0);
  $320 = +HEAPF32[$319>>2];
  $321 = $318 * $320;
  $322 = $316 - $321;
  $323 = $313 * $320;
  $324 = -$323;
  $325 = $315 * $318;
  $326 = $324 - $325;
  $327 = ((($d09$04)) + 4|0);
  HEAPF32[$327>>2] = $322;
  $328 = -$322;
  $329 = ((($d110$05)) + 8|0);
  HEAPF32[$329>>2] = $328;
  $330 = ((($d2$06)) + 4|0);
  HEAPF32[$330>>2] = $326;
  $331 = ((($d3$07)) + 8|0);
  HEAPF32[$331>>2] = $326;
  $332 = ((($e11$09)) + 8|0);
  $333 = +HEAPF32[$332>>2];
  $334 = ((($B$08)) + 12|0);
  $335 = +HEAPF32[$334>>2];
  $336 = $333 * $335;
  $337 = ((($e11$09)) + 12|0);
  $338 = +HEAPF32[$337>>2];
  $339 = ((($B$08)) + 8|0);
  $340 = +HEAPF32[$339>>2];
  $341 = $338 * $340;
  $342 = $336 - $341;
  $343 = $333 * $340;
  $344 = -$343;
  $345 = $335 * $338;
  $346 = $344 - $345;
  $347 = ((($d09$04)) + 8|0);
  HEAPF32[$347>>2] = $342;
  $348 = -$342;
  $349 = ((($d110$05)) + 4|0);
  HEAPF32[$349>>2] = $348;
  $350 = ((($d2$06)) + 8|0);
  HEAPF32[$350>>2] = $346;
  $351 = ((($d3$07)) + 4|0);
  HEAPF32[$351>>2] = $346;
  $352 = +HEAPF32[$e11$09>>2];
  $353 = ((($B$08)) + 4|0);
  $354 = +HEAPF32[$353>>2];
  $355 = $352 * $354;
  $356 = ((($e11$09)) + 4|0);
  $357 = +HEAPF32[$356>>2];
  $358 = +HEAPF32[$B$08>>2];
  $359 = $357 * $358;
  $360 = $355 - $359;
  $361 = $352 * $358;
  $362 = -$361;
  $363 = $354 * $357;
  $364 = $362 - $363;
  $365 = ((($d09$04)) + 12|0);
  HEAPF32[$365>>2] = $360;
  $366 = -$360;
  HEAPF32[$d110$05>>2] = $366;
  $367 = ((($d2$06)) + 12|0);
  HEAPF32[$367>>2] = $364;
  HEAPF32[$d3$07>>2] = $364;
  $368 = ((($B$08)) + -32|0);
  $369 = ((($e11$09)) + -32|0);
  $370 = ((($d09$04)) + 16|0);
  $371 = ((($d2$06)) + 16|0);
  $372 = ((($d110$05)) + -16|0);
  $373 = ((($d3$07)) + -16|0);
  $374 = ($369>>>0)<($15>>>0);
  if ($374) {
   break;
  } else {
   $B$08 = $368;$d09$04 = $370;$d110$05 = $372;$d2$06 = $371;$d3$07 = $373;$e11$09 = $369;
  }
 }
 HEAP32[$3>>2] = $4;
 STACKTOP = sp;return;
}
function _imdct_step3_iter0_loop($n,$e,$i_off,$k_off,$A) {
 $n = $n|0;
 $e = $e|0;
 $i_off = $i_off|0;
 $k_off = $k_off|0;
 $A = $A|0;
 var $$04 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0.0, $13 = 0.0;
 var $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0;
 var $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0;
 var $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $ee0$03 = 0, $ee2$01 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n & 3;
 $1 = ($0|0)==(0);
 if (!($1)) {
  ___assert_fail((22312|0),(20576|0),2084,(22328|0));
  // unreachable;
 }
 $2 = $n >> 2;
 $3 = ($2|0)>(0);
 if (!($3)) {
  return;
 }
 $$sum = (($k_off) + ($i_off))|0;
 $4 = (($e) + ($$sum<<2)|0);
 $5 = (($e) + ($i_off<<2)|0);
 $$04 = $A;$ee0$03 = $5;$ee2$01 = $4;$i$02 = $2;
 while(1) {
  $6 = +HEAPF32[$ee0$03>>2];
  $7 = +HEAPF32[$ee2$01>>2];
  $8 = $6 - $7;
  $9 = ((($ee0$03)) + -4|0);
  $10 = +HEAPF32[$9>>2];
  $11 = ((($ee2$01)) + -4|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $10 - $12;
  $14 = $6 + $7;
  HEAPF32[$ee0$03>>2] = $14;
  $15 = +HEAPF32[$11>>2];
  $16 = +HEAPF32[$9>>2];
  $17 = $15 + $16;
  HEAPF32[$9>>2] = $17;
  $18 = +HEAPF32[$$04>>2];
  $19 = $8 * $18;
  $20 = ((($$04)) + 4|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $13 * $21;
  $23 = $19 - $22;
  HEAPF32[$ee2$01>>2] = $23;
  $24 = +HEAPF32[$$04>>2];
  $25 = $13 * $24;
  $26 = +HEAPF32[$20>>2];
  $27 = $8 * $26;
  $28 = $25 + $27;
  HEAPF32[$11>>2] = $28;
  $29 = ((($$04)) + 32|0);
  $30 = ((($ee0$03)) + -8|0);
  $31 = +HEAPF32[$30>>2];
  $32 = ((($ee2$01)) + -8|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $31 - $33;
  $35 = ((($ee0$03)) + -12|0);
  $36 = +HEAPF32[$35>>2];
  $37 = ((($ee2$01)) + -12|0);
  $38 = +HEAPF32[$37>>2];
  $39 = $36 - $38;
  $40 = $31 + $33;
  HEAPF32[$30>>2] = $40;
  $41 = +HEAPF32[$37>>2];
  $42 = +HEAPF32[$35>>2];
  $43 = $41 + $42;
  HEAPF32[$35>>2] = $43;
  $44 = +HEAPF32[$29>>2];
  $45 = $34 * $44;
  $46 = ((($$04)) + 36|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $39 * $47;
  $49 = $45 - $48;
  HEAPF32[$32>>2] = $49;
  $50 = +HEAPF32[$29>>2];
  $51 = $39 * $50;
  $52 = +HEAPF32[$46>>2];
  $53 = $34 * $52;
  $54 = $51 + $53;
  HEAPF32[$37>>2] = $54;
  $55 = ((($$04)) + 64|0);
  $56 = ((($ee0$03)) + -16|0);
  $57 = +HEAPF32[$56>>2];
  $58 = ((($ee2$01)) + -16|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $57 - $59;
  $61 = ((($ee0$03)) + -20|0);
  $62 = +HEAPF32[$61>>2];
  $63 = ((($ee2$01)) + -20|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $62 - $64;
  $66 = $57 + $59;
  HEAPF32[$56>>2] = $66;
  $67 = +HEAPF32[$63>>2];
  $68 = +HEAPF32[$61>>2];
  $69 = $67 + $68;
  HEAPF32[$61>>2] = $69;
  $70 = +HEAPF32[$55>>2];
  $71 = $60 * $70;
  $72 = ((($$04)) + 68|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $65 * $73;
  $75 = $71 - $74;
  HEAPF32[$58>>2] = $75;
  $76 = +HEAPF32[$55>>2];
  $77 = $65 * $76;
  $78 = +HEAPF32[$72>>2];
  $79 = $60 * $78;
  $80 = $77 + $79;
  HEAPF32[$63>>2] = $80;
  $81 = ((($$04)) + 96|0);
  $82 = ((($ee0$03)) + -24|0);
  $83 = +HEAPF32[$82>>2];
  $84 = ((($ee2$01)) + -24|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $83 - $85;
  $87 = ((($ee0$03)) + -28|0);
  $88 = +HEAPF32[$87>>2];
  $89 = ((($ee2$01)) + -28|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $88 - $90;
  $92 = $83 + $85;
  HEAPF32[$82>>2] = $92;
  $93 = +HEAPF32[$89>>2];
  $94 = +HEAPF32[$87>>2];
  $95 = $93 + $94;
  HEAPF32[$87>>2] = $95;
  $96 = +HEAPF32[$81>>2];
  $97 = $86 * $96;
  $98 = ((($$04)) + 100|0);
  $99 = +HEAPF32[$98>>2];
  $100 = $91 * $99;
  $101 = $97 - $100;
  HEAPF32[$84>>2] = $101;
  $102 = +HEAPF32[$81>>2];
  $103 = $91 * $102;
  $104 = +HEAPF32[$98>>2];
  $105 = $86 * $104;
  $106 = $103 + $105;
  HEAPF32[$89>>2] = $106;
  $107 = ((($$04)) + 128|0);
  $108 = ((($ee0$03)) + -32|0);
  $109 = ((($ee2$01)) + -32|0);
  $110 = (($i$02) + -1)|0;
  $111 = ($i$02|0)>(1);
  if ($111) {
   $$04 = $107;$ee0$03 = $108;$ee2$01 = $109;$i$02 = $110;
  } else {
   break;
  }
 }
 return;
}
function _imdct_step3_inner_r_loop($lim,$e,$d0,$k_off,$A,$k1) {
 $lim = $lim|0;
 $e = $e|0;
 $d0 = $d0|0;
 $k_off = $k_off|0;
 $A = $A|0;
 $k1 = $k1|0;
 var $$09 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum34 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0;
 var $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $e0$010 = 0, $e2$011 = 0;
 var $i$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $lim >> 2;
 $1 = ($0|0)>(0);
 if (!($1)) {
  return;
 }
 $$sum = (($k_off) + ($d0))|0;
 $2 = (($e) + ($$sum<<2)|0);
 $3 = (($e) + ($d0<<2)|0);
 $$sum1 = (($k1) + 1)|0;
 $$sum2 = $k1 << 1;
 $$sum34 = $$sum2 | 1;
 $$sum5 = ($k1*3)|0;
 $$sum6 = (($$sum5) + 1)|0;
 $$sum7 = $k1 << 2;
 $$09 = $A;$e0$010 = $3;$e2$011 = $2;$i$08 = $0;
 while(1) {
  $4 = +HEAPF32[$e0$010>>2];
  $5 = +HEAPF32[$e2$011>>2];
  $6 = $4 - $5;
  $7 = ((($e0$010)) + -4|0);
  $8 = +HEAPF32[$7>>2];
  $9 = ((($e2$011)) + -4|0);
  $10 = +HEAPF32[$9>>2];
  $11 = $8 - $10;
  $12 = $4 + $5;
  HEAPF32[$e0$010>>2] = $12;
  $13 = +HEAPF32[$9>>2];
  $14 = +HEAPF32[$7>>2];
  $15 = $13 + $14;
  HEAPF32[$7>>2] = $15;
  $16 = +HEAPF32[$$09>>2];
  $17 = $6 * $16;
  $18 = ((($$09)) + 4|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $11 * $19;
  $21 = $17 - $20;
  HEAPF32[$e2$011>>2] = $21;
  $22 = +HEAPF32[$$09>>2];
  $23 = $11 * $22;
  $24 = +HEAPF32[$18>>2];
  $25 = $6 * $24;
  $26 = $23 + $25;
  HEAPF32[$9>>2] = $26;
  $27 = (($$09) + ($k1<<2)|0);
  $28 = ((($e0$010)) + -8|0);
  $29 = +HEAPF32[$28>>2];
  $30 = ((($e2$011)) + -8|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $29 - $31;
  $33 = ((($e0$010)) + -12|0);
  $34 = +HEAPF32[$33>>2];
  $35 = ((($e2$011)) + -12|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $34 - $36;
  $38 = $29 + $31;
  HEAPF32[$28>>2] = $38;
  $39 = +HEAPF32[$35>>2];
  $40 = +HEAPF32[$33>>2];
  $41 = $39 + $40;
  HEAPF32[$33>>2] = $41;
  $42 = +HEAPF32[$27>>2];
  $43 = $32 * $42;
  $44 = (($$09) + ($$sum1<<2)|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $37 * $45;
  $47 = $43 - $46;
  HEAPF32[$30>>2] = $47;
  $48 = +HEAPF32[$27>>2];
  $49 = $37 * $48;
  $50 = +HEAPF32[$44>>2];
  $51 = $32 * $50;
  $52 = $49 + $51;
  HEAPF32[$35>>2] = $52;
  $53 = (($$09) + ($$sum2<<2)|0);
  $54 = ((($e0$010)) + -16|0);
  $55 = +HEAPF32[$54>>2];
  $56 = ((($e2$011)) + -16|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $55 - $57;
  $59 = ((($e0$010)) + -20|0);
  $60 = +HEAPF32[$59>>2];
  $61 = ((($e2$011)) + -20|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $60 - $62;
  $64 = $55 + $57;
  HEAPF32[$54>>2] = $64;
  $65 = +HEAPF32[$61>>2];
  $66 = +HEAPF32[$59>>2];
  $67 = $65 + $66;
  HEAPF32[$59>>2] = $67;
  $68 = +HEAPF32[$53>>2];
  $69 = $58 * $68;
  $70 = (($$09) + ($$sum34<<2)|0);
  $71 = +HEAPF32[$70>>2];
  $72 = $63 * $71;
  $73 = $69 - $72;
  HEAPF32[$56>>2] = $73;
  $74 = +HEAPF32[$53>>2];
  $75 = $63 * $74;
  $76 = +HEAPF32[$70>>2];
  $77 = $58 * $76;
  $78 = $75 + $77;
  HEAPF32[$61>>2] = $78;
  $79 = (($$09) + ($$sum5<<2)|0);
  $80 = ((($e0$010)) + -24|0);
  $81 = +HEAPF32[$80>>2];
  $82 = ((($e2$011)) + -24|0);
  $83 = +HEAPF32[$82>>2];
  $84 = $81 - $83;
  $85 = ((($e0$010)) + -28|0);
  $86 = +HEAPF32[$85>>2];
  $87 = ((($e2$011)) + -28|0);
  $88 = +HEAPF32[$87>>2];
  $89 = $86 - $88;
  $90 = $81 + $83;
  HEAPF32[$80>>2] = $90;
  $91 = +HEAPF32[$87>>2];
  $92 = +HEAPF32[$85>>2];
  $93 = $91 + $92;
  HEAPF32[$85>>2] = $93;
  $94 = +HEAPF32[$79>>2];
  $95 = $84 * $94;
  $96 = (($$09) + ($$sum6<<2)|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $89 * $97;
  $99 = $95 - $98;
  HEAPF32[$82>>2] = $99;
  $100 = +HEAPF32[$79>>2];
  $101 = $89 * $100;
  $102 = +HEAPF32[$96>>2];
  $103 = $84 * $102;
  $104 = $101 + $103;
  HEAPF32[$87>>2] = $104;
  $105 = ((($e0$010)) + -32|0);
  $106 = ((($e2$011)) + -32|0);
  $107 = (($$09) + ($$sum7<<2)|0);
  $108 = (($i$08) + -1)|0;
  $109 = ($i$08|0)>(1);
  if ($109) {
   $$09 = $107;$e0$010 = $105;$e2$011 = $106;$i$08 = $108;
  } else {
   break;
  }
 }
 return;
}
function _imdct_step3_inner_s_loop($n,$e,$i_off,$k_off,$A,$a_off,$k0) {
 $n = $n|0;
 $e = $e|0;
 $i_off = $i_off|0;
 $k_off = $k_off|0;
 $A = $A|0;
 $a_off = $a_off|0;
 $k0 = $k0|0;
 var $$sum = 0, $0 = 0.0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0;
 var $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0;
 var $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $ee0$02 = 0, $ee2$03 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$A>>2];
 $1 = ((($A)) + 4|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (($A) + ($a_off<<2)|0);
 $4 = +HEAPF32[$3>>2];
 $5 = (($a_off) + 1)|0;
 $6 = (($A) + ($5<<2)|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $a_off << 1;
 $9 = (($A) + ($8<<2)|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $8 | 1;
 $12 = (($A) + ($11<<2)|0);
 $13 = +HEAPF32[$12>>2];
 $14 = ($a_off*3)|0;
 $15 = (($A) + ($14<<2)|0);
 $16 = +HEAPF32[$15>>2];
 $17 = (($14) + 1)|0;
 $18 = (($A) + ($17<<2)|0);
 $19 = +HEAPF32[$18>>2];
 $20 = ($n|0)>(0);
 if (!($20)) {
  return;
 }
 $$sum = (($k_off) + ($i_off))|0;
 $21 = (($e) + ($$sum<<2)|0);
 $22 = (($e) + ($i_off<<2)|0);
 $23 = (0 - ($k0))|0;
 $ee0$02 = $22;$ee2$03 = $21;$i$01 = $n;
 while(1) {
  $24 = +HEAPF32[$ee0$02>>2];
  $25 = +HEAPF32[$ee2$03>>2];
  $26 = $24 - $25;
  $27 = ((($ee0$02)) + -4|0);
  $28 = +HEAPF32[$27>>2];
  $29 = ((($ee2$03)) + -4|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $28 - $30;
  $32 = $24 + $25;
  HEAPF32[$ee0$02>>2] = $32;
  $33 = +HEAPF32[$27>>2];
  $34 = +HEAPF32[$29>>2];
  $35 = $33 + $34;
  HEAPF32[$27>>2] = $35;
  $36 = $0 * $26;
  $37 = $2 * $31;
  $38 = $36 - $37;
  HEAPF32[$ee2$03>>2] = $38;
  $39 = $0 * $31;
  $40 = $2 * $26;
  $41 = $40 + $39;
  HEAPF32[$29>>2] = $41;
  $42 = ((($ee0$02)) + -8|0);
  $43 = +HEAPF32[$42>>2];
  $44 = ((($ee2$03)) + -8|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $43 - $45;
  $47 = ((($ee0$02)) + -12|0);
  $48 = +HEAPF32[$47>>2];
  $49 = ((($ee2$03)) + -12|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $48 - $50;
  $52 = $43 + $45;
  HEAPF32[$42>>2] = $52;
  $53 = +HEAPF32[$47>>2];
  $54 = +HEAPF32[$49>>2];
  $55 = $53 + $54;
  HEAPF32[$47>>2] = $55;
  $56 = $4 * $46;
  $57 = $7 * $51;
  $58 = $56 - $57;
  HEAPF32[$44>>2] = $58;
  $59 = $4 * $51;
  $60 = $7 * $46;
  $61 = $60 + $59;
  HEAPF32[$49>>2] = $61;
  $62 = ((($ee0$02)) + -16|0);
  $63 = +HEAPF32[$62>>2];
  $64 = ((($ee2$03)) + -16|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $63 - $65;
  $67 = ((($ee0$02)) + -20|0);
  $68 = +HEAPF32[$67>>2];
  $69 = ((($ee2$03)) + -20|0);
  $70 = +HEAPF32[$69>>2];
  $71 = $68 - $70;
  $72 = $63 + $65;
  HEAPF32[$62>>2] = $72;
  $73 = +HEAPF32[$67>>2];
  $74 = +HEAPF32[$69>>2];
  $75 = $73 + $74;
  HEAPF32[$67>>2] = $75;
  $76 = $10 * $66;
  $77 = $13 * $71;
  $78 = $76 - $77;
  HEAPF32[$64>>2] = $78;
  $79 = $10 * $71;
  $80 = $13 * $66;
  $81 = $80 + $79;
  HEAPF32[$69>>2] = $81;
  $82 = ((($ee0$02)) + -24|0);
  $83 = +HEAPF32[$82>>2];
  $84 = ((($ee2$03)) + -24|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $83 - $85;
  $87 = ((($ee0$02)) + -28|0);
  $88 = +HEAPF32[$87>>2];
  $89 = ((($ee2$03)) + -28|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $88 - $90;
  $92 = $83 + $85;
  HEAPF32[$82>>2] = $92;
  $93 = +HEAPF32[$87>>2];
  $94 = +HEAPF32[$89>>2];
  $95 = $93 + $94;
  HEAPF32[$87>>2] = $95;
  $96 = $16 * $86;
  $97 = $19 * $91;
  $98 = $96 - $97;
  HEAPF32[$84>>2] = $98;
  $99 = $16 * $91;
  $100 = $19 * $86;
  $101 = $100 + $99;
  HEAPF32[$89>>2] = $101;
  $102 = (($ee0$02) + ($23<<2)|0);
  $103 = (($ee2$03) + ($23<<2)|0);
  $104 = (($i$01) + -1)|0;
  $105 = ($i$01|0)>(1);
  if ($105) {
   $ee0$02 = $102;$ee2$03 = $103;$i$01 = $104;
  } else {
   break;
  }
 }
 return;
}
function _imdct_step3_inner_s_loop_ld654($n,$e,$i_off,$A,$base_n) {
 $n = $n|0;
 $e = $e|0;
 $i_off = $i_off|0;
 $A = $A|0;
 $base_n = $base_n|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0;
 var $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $8 = 0, $9 = 0.0, $z$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $base_n >> 3;
 $1 = (($A) + ($0<<2)|0);
 $2 = +HEAPF32[$1>>2];
 $3 = $n << 4;
 $$sum = (($i_off) - ($3))|0;
 $4 = (($e) + ($$sum<<2)|0);
 $5 = ($$sum|0)<($i_off|0);
 if (!($5)) {
  return;
 }
 $6 = (($e) + ($i_off<<2)|0);
 $z$01 = $6;
 while(1) {
  $7 = +HEAPF32[$z$01>>2];
  $8 = ((($z$01)) + -32|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $7 - $9;
  $11 = ((($z$01)) + -4|0);
  $12 = +HEAPF32[$11>>2];
  $13 = ((($z$01)) + -36|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $12 - $14;
  $16 = $7 + $9;
  HEAPF32[$z$01>>2] = $16;
  $17 = +HEAPF32[$11>>2];
  $18 = +HEAPF32[$13>>2];
  $19 = $17 + $18;
  HEAPF32[$11>>2] = $19;
  HEAPF32[$8>>2] = $10;
  HEAPF32[$13>>2] = $15;
  $20 = ((($z$01)) + -8|0);
  $21 = +HEAPF32[$20>>2];
  $22 = ((($z$01)) + -40|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $21 - $23;
  $25 = ((($z$01)) + -12|0);
  $26 = +HEAPF32[$25>>2];
  $27 = ((($z$01)) + -44|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $26 - $28;
  $30 = $21 + $23;
  HEAPF32[$20>>2] = $30;
  $31 = +HEAPF32[$25>>2];
  $32 = +HEAPF32[$27>>2];
  $33 = $31 + $32;
  HEAPF32[$25>>2] = $33;
  $34 = $24 + $29;
  $35 = $2 * $34;
  HEAPF32[$22>>2] = $35;
  $36 = $29 - $24;
  $37 = $2 * $36;
  HEAPF32[$27>>2] = $37;
  $38 = ((($z$01)) + -48|0);
  $39 = +HEAPF32[$38>>2];
  $40 = ((($z$01)) + -16|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $39 - $41;
  $43 = ((($z$01)) + -20|0);
  $44 = +HEAPF32[$43>>2];
  $45 = ((($z$01)) + -52|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $44 - $46;
  $48 = $39 + $41;
  HEAPF32[$40>>2] = $48;
  $49 = +HEAPF32[$43>>2];
  $50 = +HEAPF32[$45>>2];
  $51 = $49 + $50;
  HEAPF32[$43>>2] = $51;
  HEAPF32[$38>>2] = $47;
  HEAPF32[$45>>2] = $42;
  $52 = ((($z$01)) + -56|0);
  $53 = +HEAPF32[$52>>2];
  $54 = ((($z$01)) + -24|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $53 - $55;
  $57 = ((($z$01)) + -28|0);
  $58 = +HEAPF32[$57>>2];
  $59 = ((($z$01)) + -60|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $58 - $60;
  $62 = $53 + $55;
  HEAPF32[$54>>2] = $62;
  $63 = +HEAPF32[$57>>2];
  $64 = +HEAPF32[$59>>2];
  $65 = $63 + $64;
  HEAPF32[$57>>2] = $65;
  $66 = $56 + $61;
  $67 = $2 * $66;
  HEAPF32[$52>>2] = $67;
  $68 = $56 - $61;
  $69 = $2 * $68;
  HEAPF32[$59>>2] = $69;
  _iter_54($z$01);
  _iter_54($8);
  $70 = ((($z$01)) + -64|0);
  $71 = ($70>>>0)>($4>>>0);
  if ($71) {
   $z$01 = $70;
  } else {
   break;
  }
 }
 return;
}
function _iter_54($z) {
 $z = $z|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$z>>2];
 $1 = ((($z)) + -16|0);
 $2 = +HEAPF32[$1>>2];
 $3 = $0 - $2;
 $4 = $0 + $2;
 $5 = ((($z)) + -8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($z)) + -24|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 + $8;
 $10 = $6 - $8;
 $11 = $4 + $9;
 HEAPF32[$z>>2] = $11;
 $12 = $4 - $9;
 HEAPF32[$5>>2] = $12;
 $13 = ((($z)) + -12|0);
 $14 = +HEAPF32[$13>>2];
 $15 = ((($z)) + -28|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $14 - $16;
 $18 = $3 + $17;
 HEAPF32[$1>>2] = $18;
 $19 = $3 - $17;
 HEAPF32[$7>>2] = $19;
 $20 = ((($z)) + -4|0);
 $21 = +HEAPF32[$20>>2];
 $22 = ((($z)) + -20|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $21 - $23;
 $25 = $21 + $23;
 $26 = +HEAPF32[$13>>2];
 $27 = +HEAPF32[$15>>2];
 $28 = $26 + $27;
 $29 = $25 + $28;
 HEAPF32[$20>>2] = $29;
 $30 = $25 - $28;
 HEAPF32[$13>>2] = $30;
 $31 = $24 - $10;
 HEAPF32[$22>>2] = $31;
 $32 = $10 + $24;
 HEAPF32[$15>>2] = $32;
 return;
}
function _draw_line($output,$x0,$y0,$x1,$y1,$n) {
 $output = $output|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $x1 = $x1|0;
 $y1 = $y1|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err$05 = 0, $err$1 = 0, $exitcond = 0, $ispos = 0, $ispos1 = 0, $n$x1 = 0, $neg = 0, $neg2 = 0, $sy$0 = 0, $sy$0$pn = 0, $x$0 = 0, $x$03 = 0, $x$06 = 0, $y$04 = 0;
 var $y$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($y1) - ($y0))|0;
 $1 = (($x1) - ($x0))|0;
 $ispos = ($0|0)>(-1);
 $neg = (0 - ($0))|0;
 $2 = $ispos ? $0 : $neg;
 $3 = (($0|0) / ($1|0))&-1;
 $4 = $0 >> 31;
 $5 = $4 | 1;
 $ispos1 = ($3|0)>(-1);
 $neg2 = (0 - ($3))|0;
 $6 = $ispos1 ? $3 : $neg2;
 $7 = Math_imul($6, $1)|0;
 $8 = (($2) - ($7))|0;
 $9 = ($x1|0)>($n|0);
 $n$x1 = $9 ? $n : $x1;
 $10 = (22352 + ($y0<<2)|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (($output) + ($x0<<2)|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $11 * $13;
 HEAPF32[$12>>2] = $14;
 $x$03 = (($x0) + 1)|0;
 $15 = ($x$03|0)<($n$x1|0);
 if (!($15)) {
  return;
 }
 $16 = ($n|0)<($x1|0);
 $17 = $16 ? $n : $x1;
 $err$05 = 0;$x$06 = $x$03;$y$04 = $y0;
 while(1) {
  $18 = (($err$05) + ($8))|0;
  $19 = ($18|0)<($1|0);
  $sy$0 = $19 ? 0 : $5;
  $20 = $19 ? 0 : $1;
  $err$1 = (($18) - ($20))|0;
  $sy$0$pn = (($y$04) + ($3))|0;
  $y$1 = (($sy$0$pn) + ($sy$0))|0;
  $21 = (22352 + ($y$1<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = (($output) + ($x$06<<2)|0);
  $24 = +HEAPF32[$23>>2];
  $25 = $22 * $24;
  HEAPF32[$23>>2] = $25;
  $x$0 = (($x$06) + 1)|0;
  $exitcond = ($x$0|0)==($17|0);
  if ($exitcond) {
   break;
  } else {
   $err$05 = $err$1;$x$06 = $x$0;$y$04 = $y$1;
  }
 }
 return;
}
function _make_block_array($mem,$count,$size) {
 $mem = $mem|0;
 $count = $count|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond = 0, $i$01 = 0, $q$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count|0)>(0);
 if (!($0)) {
  return ($mem|0);
 }
 $1 = (($mem) + ($count<<2)|0);
 $i$01 = 0;$q$02 = $1;
 while(1) {
  $2 = (($mem) + ($i$01<<2)|0);
  HEAP32[$2>>2] = $q$02;
  $3 = (($q$02) + ($size)|0);
  $4 = (($i$01) + 1)|0;
  $exitcond = ($4|0)==($count|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $4;$q$02 = $3;
  }
 }
 return ($mem|0);
}
function _codebook_decode_deinterleave_repeat_2($f,$c,$outputs,$c_inter_p,$p_inter_p,$len,$total_decode) {
 $f = $f|0;
 $c = $c|0;
 $outputs = $outputs|0;
 $c_inter_p = $c_inter_p|0;
 $p_inter_p = $p_inter_p|0;
 $len = $len|0;
 $total_decode = $total_decode|0;
 var $$ = 0, $$0 = 0, $$0121 = 0, $$3 = 0, $$4 = 0, $$p_inter$1 = 0, $$p_inter$4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0;
 var $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0;
 var $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $c_inter$0$lcssa = 0, $c_inter$020 = 0, $c_inter$111 = 0, $c_inter$3 = 0, $c_inter$4 = 0, $effective$018 = 0, $effective$1 = 0, $exitcond = 0, $i$09 = 0, $i$1 = 0, $i$2$lcssa = 0, $i$213 = 0;
 var $last$08 = 0.0, $p_inter$0$lcssa = 0, $p_inter$019 = 0, $p_inter$110 = 0, $p_inter$3 = 0, $p_inter$4$lcssa = 0, $p_inter$414 = 0, $p_inter$5 = 0, $z$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$c_inter_p>>2]|0;
 $1 = HEAP32[$p_inter_p>>2]|0;
 $2 = HEAP32[$c>>2]|0;
 $3 = ((($c)) + 21|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  _error($f,21);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ($total_decode|0)>(0);
 L5: do {
  if ($6) {
   $7 = ((($f)) + 1412|0);
   $8 = ((($f)) + 1408|0);
   $9 = ((($c)) + 8|0);
   $10 = $len << 1;
   $11 = ((($c)) + 22|0);
   $12 = ((($c)) + 28|0);
   $13 = ((($outputs)) + 4|0);
   $14 = ((($c)) + 28|0);
   $15 = ((($c)) + 28|0);
   $16 = ((($c)) + 28|0);
   $$0121 = $total_decode;$c_inter$020 = $0;$effective$018 = $2;$p_inter$019 = $1;
   while(1) {
    $17 = HEAP32[$7>>2]|0;
    $18 = ($17|0)<(10);
    if ($18) {
     _prep_huffman($f);
    }
    $19 = HEAP32[$8>>2]|0;
    $20 = $19 & 1023;
    $21 = (((($c)) + 36|0) + ($20<<1)|0);
    $22 = HEAP16[$21>>1]|0;
    $23 = $22 << 16 >> 16;
    $24 = ($22<<16>>16)>(-1);
    if ($24) {
     $25 = HEAP32[$9>>2]|0;
     $26 = (($25) + ($23)|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = $19 >>> $28;
     HEAP32[$8>>2] = $29;
     $30 = HEAP32[$7>>2]|0;
     $31 = (($30) - ($28))|0;
     $32 = ($31|0)<(0);
     $$ = $32 ? 0 : $31;
     HEAP32[$7>>2] = $$;
     if ($32) {
      break;
     } else {
      $z$0 = $23;
     }
    } else {
     $33 = (_codebook_decode_scalar_raw($f,$c)|0);
     $z$0 = $33;
    }
    $34 = ($z$0|0)<(0);
    if ($34) {
     break;
    }
    $41 = $p_inter$019 << 1;
    $42 = (($41) + ($effective$018))|0;
    $43 = (($42) + ($c_inter$020))|0;
    $44 = ($43|0)>($10|0);
    $45 = (($10) - ($41))|0;
    $46 = (($45) + ($c_inter$020))|0;
    $effective$1 = $44 ? $46 : $effective$018;
    $47 = HEAP32[$c>>2]|0;
    $48 = Math_imul($47, $z$0)|0;
    $49 = HEAP8[$11>>0]|0;
    $50 = ($49<<24>>24)==(0);
    if ($50) {
     $67 = ($c_inter$020|0)==(1);
     if ($67) {
      $68 = (($outputs) + ($c_inter$020<<2)|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if (!($70)) {
       $71 = HEAP32[$12>>2]|0;
       $72 = (($71) + ($48<<2)|0);
       $73 = +HEAPF32[$72>>2];
       $74 = $73 + 0.0;
       $75 = (($69) + ($p_inter$019<<2)|0);
       $76 = +HEAPF32[$75>>2];
       $77 = $76 + $74;
       HEAPF32[$75>>2] = $77;
      }
      $78 = (($p_inter$019) + 1)|0;
      $c_inter$3 = 0;$i$1 = 1;$p_inter$3 = $78;
     } else {
      $c_inter$3 = $c_inter$020;$i$1 = 0;$p_inter$3 = $p_inter$019;
     }
     $79 = HEAP32[$outputs>>2]|0;
     $80 = HEAP32[$13>>2]|0;
     $81 = (($i$1) + 1)|0;
     $82 = ($81|0)<($effective$1|0);
     if ($82) {
      $83 = HEAP32[$15>>2]|0;
      $84 = ($79|0)==(0|0);
      $85 = ($80|0)==(0|0);
      $i$213 = $i$1;$p_inter$414 = $p_inter$3;
      while(1) {
       $86 = (($i$213) + ($48))|0;
       $87 = (($86) + 1)|0;
       $88 = (($83) + ($87<<2)|0);
       $89 = +HEAPF32[$88>>2];
       $90 = $89 + 0.0;
       if (!($84)) {
        $91 = (($83) + ($86<<2)|0);
        $92 = +HEAPF32[$91>>2];
        $93 = $92 + 0.0;
        $94 = (($79) + ($p_inter$414<<2)|0);
        $95 = +HEAPF32[$94>>2];
        $96 = $95 + $93;
        HEAPF32[$94>>2] = $96;
       }
       if (!($85)) {
        $97 = (($80) + ($p_inter$414<<2)|0);
        $98 = +HEAPF32[$97>>2];
        $99 = $90 + $98;
        HEAPF32[$97>>2] = $99;
       }
       $100 = (($p_inter$414) + 1)|0;
       $101 = (($i$213) + 2)|0;
       $102 = (($i$213) + 3)|0;
       $103 = ($102|0)<($effective$1|0);
       if ($103) {
        $i$213 = $101;$p_inter$414 = $100;
       } else {
        $i$2$lcssa = $101;$p_inter$4$lcssa = $100;
        break;
       }
      }
     } else {
      $i$2$lcssa = $i$1;$p_inter$4$lcssa = $p_inter$3;
     }
     $104 = ($i$2$lcssa|0)<($effective$1|0);
     if ($104) {
      $105 = (($outputs) + ($c_inter$3<<2)|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = ($106|0)==(0|0);
      if (!($107)) {
       $108 = HEAP32[$14>>2]|0;
       $109 = (($i$2$lcssa) + ($48))|0;
       $110 = (($108) + ($109<<2)|0);
       $111 = +HEAPF32[$110>>2];
       $112 = $111 + 0.0;
       $113 = (($106) + ($p_inter$4$lcssa<<2)|0);
       $114 = +HEAPF32[$113>>2];
       $115 = $114 + $112;
       HEAPF32[$113>>2] = $115;
      }
      $116 = (($c_inter$3) + 1)|0;
      $117 = ($116|0)==(2);
      $118 = $117&1;
      $$p_inter$4 = (($p_inter$4$lcssa) + ($118))|0;
      $$4 = $117 ? 0 : $116;
      $c_inter$4 = $$4;$p_inter$5 = $$p_inter$4;
     } else {
      $c_inter$4 = $c_inter$3;$p_inter$5 = $p_inter$4$lcssa;
     }
    } else {
     $51 = ($effective$1|0)>(0);
     if ($51) {
      $52 = HEAP32[$16>>2]|0;
      $c_inter$111 = $c_inter$020;$i$09 = 0;$last$08 = 0.0;$p_inter$110 = $p_inter$019;
      while(1) {
       $53 = (($i$09) + ($48))|0;
       $54 = (($52) + ($53<<2)|0);
       $55 = +HEAPF32[$54>>2];
       $56 = $last$08 + $55;
       $57 = (($outputs) + ($c_inter$111<<2)|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = ($58|0)==(0|0);
       if (!($59)) {
        $60 = (($58) + ($p_inter$110<<2)|0);
        $61 = +HEAPF32[$60>>2];
        $62 = $56 + $61;
        HEAPF32[$60>>2] = $62;
       }
       $63 = (($c_inter$111) + 1)|0;
       $64 = ($63|0)==(2);
       $65 = $64&1;
       $$p_inter$1 = (($65) + ($p_inter$110))|0;
       $$3 = $64 ? 0 : $63;
       $66 = (($i$09) + 1)|0;
       $exitcond = ($66|0)==($effective$1|0);
       if ($exitcond) {
        $c_inter$4 = $$3;$p_inter$5 = $$p_inter$1;
        break;
       } else {
        $c_inter$111 = $$3;$i$09 = $66;$last$08 = $56;$p_inter$110 = $$p_inter$1;
       }
      }
     } else {
      $c_inter$4 = $c_inter$020;$p_inter$5 = $p_inter$019;
     }
    }
    $119 = (($$0121) - ($effective$1))|0;
    $120 = ($119|0)>(0);
    if ($120) {
     $$0121 = $119;$c_inter$020 = $c_inter$4;$effective$018 = $effective$1;$p_inter$019 = $p_inter$5;
    } else {
     $c_inter$0$lcssa = $c_inter$4;$p_inter$0$lcssa = $p_inter$5;
     break L5;
    }
   }
   $35 = ((($f)) + 1392|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $38 = ((($f)) + 1400|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $$0 = 0;
     return ($$0|0);
    }
   }
   _error($f,21);
   $$0 = 0;
   return ($$0|0);
  } else {
   $c_inter$0$lcssa = $0;$p_inter$0$lcssa = $1;
  }
 } while(0);
 HEAP32[$c_inter_p>>2] = $c_inter$0$lcssa;
 HEAP32[$p_inter_p>>2] = $p_inter$0$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _codebook_decode_deinterleave_repeat($f,$c,$outputs,$ch,$c_inter_p,$p_inter_p,$len,$total_decode) {
 $f = $f|0;
 $c = $c|0;
 $outputs = $outputs|0;
 $ch = $ch|0;
 $c_inter_p = $c_inter_p|0;
 $p_inter_p = $p_inter_p|0;
 $len = $len|0;
 $total_decode = $total_decode|0;
 var $$ = 0, $$0 = 0, $$0126 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$p_inter$1 = 0, $$p_inter$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $c_inter$0$lcssa = 0, $c_inter$025 = 0, $c_inter$115 = 0, $c_inter$319 = 0, $c_inter$5 = 0;
 var $effective$024 = 0, $effective$1 = 0, $exitcond = 0, $exitcond30 = 0, $i$013 = 0, $i$118 = 0, $last$014 = 0.0, $p_inter$0$lcssa = 0, $p_inter$023 = 0, $p_inter$112 = 0, $p_inter$317 = 0, $p_inter$5 = 0, $z$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$c_inter_p>>2]|0;
 $1 = HEAP32[$p_inter_p>>2]|0;
 $2 = HEAP32[$c>>2]|0;
 $3 = ((($c)) + 21|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  _error($f,21);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ($total_decode|0)>(0);
 L5: do {
  if ($6) {
   $7 = ((($f)) + 1412|0);
   $8 = ((($f)) + 1408|0);
   $9 = ((($c)) + 8|0);
   $10 = ((($c)) + 23|0);
   $11 = Math_imul($len, $ch)|0;
   $12 = ((($c)) + 22|0);
   $13 = ((($c)) + 28|0);
   $14 = ((($c)) + 28|0);
   $15 = ((($c)) + 2092|0);
   $$0126 = $total_decode;$c_inter$025 = $0;$effective$024 = $2;$p_inter$023 = $1;
   while(1) {
    $16 = HEAP32[$7>>2]|0;
    $17 = ($16|0)<(10);
    if ($17) {
     _prep_huffman($f);
    }
    $18 = HEAP32[$8>>2]|0;
    $19 = $18 & 1023;
    $20 = (((($c)) + 36|0) + ($19<<1)|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21 << 16 >> 16;
    $23 = ($21<<16>>16)>(-1);
    if ($23) {
     $24 = HEAP32[$9>>2]|0;
     $25 = (($24) + ($22)|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = $18 >>> $27;
     HEAP32[$8>>2] = $28;
     $29 = HEAP32[$7>>2]|0;
     $30 = (($29) - ($27))|0;
     $31 = ($30|0)<(0);
     $$ = $31 ? 0 : $30;
     HEAP32[$7>>2] = $$;
     $$2 = $31 ? -1 : $22;
     $z$0 = $$2;
    } else {
     $32 = (_codebook_decode_scalar_raw($f,$c)|0);
     $z$0 = $32;
    }
    $33 = HEAP8[$10>>0]|0;
    $34 = ($33<<24>>24)==(0);
    if (!($34)) {
     $35 = HEAP32[$15>>2]|0;
     $36 = ($z$0|0)<($35|0);
     if (!($36)) {
      label = 12;
      break;
     }
    }
    $37 = ($z$0|0)<(0);
    if ($37) {
     break;
    }
    $44 = Math_imul($p_inter$023, $ch)|0;
    $45 = (($effective$024) + ($44))|0;
    $46 = (($45) + ($c_inter$025))|0;
    $47 = ($46|0)>($11|0);
    $48 = (($11) - ($44))|0;
    $49 = (($48) + ($c_inter$025))|0;
    $effective$1 = $47 ? $49 : $effective$024;
    $50 = HEAP32[$c>>2]|0;
    $51 = Math_imul($50, $z$0)|0;
    $52 = HEAP8[$12>>0]|0;
    $53 = ($52<<24>>24)==(0);
    $54 = ($effective$1|0)>(0);
    if ($53) {
     if ($54) {
      $c_inter$319 = $c_inter$025;$i$118 = 0;$p_inter$317 = $p_inter$023;
      while(1) {
       $70 = (($outputs) + ($c_inter$319<<2)|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = ($71|0)==(0|0);
       if (!($72)) {
        $73 = HEAP32[$13>>2]|0;
        $74 = (($i$118) + ($51))|0;
        $75 = (($73) + ($74<<2)|0);
        $76 = +HEAPF32[$75>>2];
        $77 = $76 + 0.0;
        $78 = (($71) + ($p_inter$317<<2)|0);
        $79 = +HEAPF32[$78>>2];
        $80 = $79 + $77;
        HEAPF32[$78>>2] = $80;
       }
       $81 = (($c_inter$319) + 1)|0;
       $82 = ($81|0)==($ch|0);
       $83 = $82&1;
       $$p_inter$3 = (($83) + ($p_inter$317))|0;
       $$4 = $82 ? 0 : $81;
       $84 = (($i$118) + 1)|0;
       $exitcond30 = ($84|0)==($effective$1|0);
       if ($exitcond30) {
        $c_inter$5 = $$4;$p_inter$5 = $$p_inter$3;
        break;
       } else {
        $c_inter$319 = $$4;$i$118 = $84;$p_inter$317 = $$p_inter$3;
       }
      }
     } else {
      $c_inter$5 = $c_inter$025;$p_inter$5 = $p_inter$023;
     }
    } else {
     if ($54) {
      $55 = HEAP32[$14>>2]|0;
      $c_inter$115 = $c_inter$025;$i$013 = 0;$last$014 = 0.0;$p_inter$112 = $p_inter$023;
      while(1) {
       $56 = (($i$013) + ($51))|0;
       $57 = (($55) + ($56<<2)|0);
       $58 = +HEAPF32[$57>>2];
       $59 = $last$014 + $58;
       $60 = (($outputs) + ($c_inter$115<<2)|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)==(0|0);
       if (!($62)) {
        $63 = (($61) + ($p_inter$112<<2)|0);
        $64 = +HEAPF32[$63>>2];
        $65 = $59 + $64;
        HEAPF32[$63>>2] = $65;
       }
       $66 = (($c_inter$115) + 1)|0;
       $67 = ($66|0)==($ch|0);
       $68 = $67&1;
       $$p_inter$1 = (($68) + ($p_inter$112))|0;
       $$3 = $67 ? 0 : $66;
       $69 = (($i$013) + 1)|0;
       $exitcond = ($69|0)==($effective$1|0);
       if ($exitcond) {
        $c_inter$5 = $$3;$p_inter$5 = $$p_inter$1;
        break;
       } else {
        $c_inter$115 = $$3;$i$013 = $69;$last$014 = $59;$p_inter$112 = $$p_inter$1;
       }
      }
     } else {
      $c_inter$5 = $c_inter$025;$p_inter$5 = $p_inter$023;
     }
    }
    $85 = (($$0126) - ($effective$1))|0;
    $86 = ($85|0)>(0);
    if ($86) {
     $$0126 = $85;$c_inter$025 = $c_inter$5;$effective$024 = $effective$1;$p_inter$023 = $p_inter$5;
    } else {
     $c_inter$0$lcssa = $c_inter$5;$p_inter$0$lcssa = $p_inter$5;
     break L5;
    }
   }
   if ((label|0) == 12) {
    ___assert_fail((23424|0),(20576|0),1431,(23464|0));
    // unreachable;
   }
   $38 = ((($f)) + 1392|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $41 = ((($f)) + 1400|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)==(0);
    if (!($43)) {
     $$0 = 0;
     return ($$0|0);
    }
   }
   _error($f,21);
   $$0 = 0;
   return ($$0|0);
  } else {
   $c_inter$0$lcssa = $0;$p_inter$0$lcssa = $1;
  }
 } while(0);
 HEAP32[$c_inter_p>>2] = $c_inter$0$lcssa;
 HEAP32[$p_inter_p>>2] = $p_inter$0$lcssa;
 $$0 = 1;
 return ($$0|0);
}
function _residue_decode($f,$book,$target,$offset,$n,$rtype) {
 $f = $f|0;
 $book = $book|0;
 $target = $target|0;
 $offset = $offset|0;
 $n = $n|0;
 $rtype = $rtype|0;
 var $$0 = 0, $$017 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $k$04 = 0, $k$18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($rtype|0)==(0);
 if ($0) {
  $2 = HEAP32[$book>>2]|0;
  $3 = (($n|0) / ($2|0))&-1;
  $4 = ($3|0)>(0);
  if (!($4)) {
   $$0 = 1;
   return ($$0|0);
  }
  $5 = (($n) - ($offset))|0;
  $k$04 = 0;
  while(1) {
   $$sum = (($k$04) + ($offset))|0;
   $8 = (($target) + ($$sum<<2)|0);
   $9 = (($5) - ($k$04))|0;
   $10 = (_codebook_decode_step($f,$book,$8,$9,$3)|0);
   $11 = ($10|0)==(0);
   $6 = (($k$04) + 1)|0;
   if ($11) {
    $$0 = 0;
    label = 10;
    break;
   }
   $7 = ($6|0)<($3|0);
   if ($7) {
    $k$04 = $6;
   } else {
    $$0 = 1;
    label = 10;
    break;
   }
  }
  if ((label|0) == 10) {
   return ($$0|0);
  }
 } else {
  $1 = ($n|0)>(0);
  if (!($1)) {
   $$0 = 1;
   return ($$0|0);
  }
  $$017 = $offset;$k$18 = 0;
  while(1) {
   $12 = (($target) + ($$017<<2)|0);
   $13 = (($n) - ($k$18))|0;
   $14 = (_codebook_decode($f,$book,$12,$13)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $$0 = 0;
    label = 10;
    break;
   }
   $16 = HEAP32[$book>>2]|0;
   $17 = (($16) + ($k$18))|0;
   $18 = (($16) + ($$017))|0;
   $19 = ($17|0)<($n|0);
   if ($19) {
    $$017 = $18;$k$18 = $17;
   } else {
    $$0 = 1;
    label = 10;
    break;
   }
  }
  if ((label|0) == 10) {
   return ($$0|0);
  }
 }
 return (0)|0;
}
function _codebook_decode_step($f,$c,$output,$len,$step) {
 $f = $f|0;
 $c = $c|0;
 $output = $output|0;
 $len = $len|0;
 $step = $step|0;
 var $$0 = 0, $$len = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $last$0$ = 0.0, $last$03 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_codebook_decode_start($f,$c)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[$c>>2]|0;
 $3 = ($2|0)<($len|0);
 $$len = $3 ? $2 : $len;
 $4 = Math_imul($2, $0)|0;
 $5 = ($$len|0)>(0);
 if (!($5)) {
  $$0 = 1;
  return ($$0|0);
 }
 $6 = ((($c)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($c)) + 22|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 $11 = ($2|0)<($len|0);
 $12 = $11 ? $2 : $len;
 $i$02 = 0;$last$03 = 0.0;
 while(1) {
  $13 = (($i$02) + ($4))|0;
  $14 = (($7) + ($13<<2)|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $last$03 + $15;
  $17 = Math_imul($i$02, $step)|0;
  $18 = (($output) + ($17<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $19 + $16;
  HEAPF32[$18>>2] = $20;
  $last$0$ = $10 ? $last$03 : $16;
  $21 = (($i$02) + 1)|0;
  $exitcond = ($21|0)==($12|0);
  if ($exitcond) {
   $$0 = 1;
   break;
  } else {
   $i$02 = $21;$last$03 = $last$0$;
  }
 }
 return ($$0|0);
}
function _codebook_decode($f,$c,$output,$len) {
 $f = $f|0;
 $c = $c|0;
 $output = $output|0;
 $len = $len|0;
 var $$0 = 0, $$len = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond9 = 0;
 var $i$05 = 0, $i$14 = 0, $last$06 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_codebook_decode_start($f,$c)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[$c>>2]|0;
 $3 = ($2|0)<($len|0);
 $$len = $3 ? $2 : $len;
 $4 = Math_imul($2, $0)|0;
 $5 = ((($c)) + 22|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 $8 = ($$len|0)>(0);
 if ($7) {
  if (!($8)) {
   $$0 = 1;
   return ($$0|0);
  }
  $14 = ((($c)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($2|0)<($len|0);
  $17 = $16 ? $2 : $len;
  $i$14 = 0;
  while(1) {
   $28 = (($i$14) + ($4))|0;
   $29 = (($15) + ($28<<2)|0);
   $30 = +HEAPF32[$29>>2];
   $31 = $30 + 0.0;
   $32 = (($output) + ($i$14<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $34 = $33 + $31;
   HEAPF32[$32>>2] = $34;
   $35 = (($i$14) + 1)|0;
   $exitcond = ($35|0)==($17|0);
   if ($exitcond) {
    $$0 = 1;
    break;
   } else {
    $i$14 = $35;
   }
  }
  return ($$0|0);
 } else {
  if (!($8)) {
   $$0 = 1;
   return ($$0|0);
  }
  $9 = ((($c)) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($c)) + 12|0);
  $12 = ($2|0)<($len|0);
  $13 = $12 ? $2 : $len;
  $i$05 = 0;$last$06 = 0.0;
  while(1) {
   $18 = (($i$05) + ($4))|0;
   $19 = (($10) + ($18<<2)|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $last$06 + $20;
   $22 = (($output) + ($i$05<<2)|0);
   $23 = +HEAPF32[$22>>2];
   $24 = $23 + $21;
   HEAPF32[$22>>2] = $24;
   $25 = +HEAPF32[$11>>2];
   $26 = $21 + $25;
   $27 = (($i$05) + 1)|0;
   $exitcond9 = ($27|0)==($13|0);
   if ($exitcond9) {
    $$0 = 1;
    break;
   } else {
    $i$05 = $27;$last$06 = $26;
   }
  }
  return ($$0|0);
 }
 return (0)|0;
}
function _codebook_decode_start($f,$c) {
 $f = $f|0;
 $c = $c|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $z$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($c)) + 21|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  _error($f,21);
  $$0 = -1;
  return ($$0|0);
 }
 $3 = ((($f)) + 1412|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(10);
 if ($5) {
  _prep_huffman($f);
 }
 $6 = ((($f)) + 1408|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1023;
 $9 = (((($c)) + 36|0) + ($8<<1)|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = ($10<<16>>16)>(-1);
 if ($12) {
  $13 = ((($c)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $7 >>> $17;
  HEAP32[$6>>2] = $18;
  $19 = HEAP32[$3>>2]|0;
  $20 = (($19) - ($17))|0;
  $21 = ($20|0)<(0);
  $$ = $21 ? 0 : $20;
  HEAP32[$3>>2] = $$;
  $$1 = $21 ? -1 : $11;
  $z$0 = $$1;
 } else {
  $22 = (_codebook_decode_scalar_raw($f,$c)|0);
  $z$0 = $22;
 }
 $23 = ((($c)) + 23|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ($24<<24>>24)==(0);
 if (!($25)) {
  $26 = ((($c)) + 2092|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($z$0|0)<($27|0);
  if (!($28)) {
   ___assert_fail((23376|0),(20576|0),1337,(23400|0));
   // unreachable;
  }
 }
 $29 = ($z$0|0)<(0);
 if (!($29)) {
  $$0 = $z$0;
  return ($$0|0);
 }
 $30 = ((($f)) + 1392|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)==(0);
 if ($32) {
  $33 = ((($f)) + 1400|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0);
  if (!($35)) {
   $$0 = $z$0;
   return ($$0|0);
  }
 }
 _error($f,21);
 $$0 = $z$0;
 return ($$0|0);
}
function _stbi__pnm_info($s,$x,$y,$comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $or$cond = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 _stbi__rewind($s);
 $0 = (_stbi__get8($s)|0);
 $1 = (_stbi__get8($s)|0);
 $2 = ($0<<24>>24)==(80);
 $$off = (($1) + -53)<<24>>24;
 $switch = ($$off&255)<(2);
 $or$cond = $2 & $switch;
 if (!($or$cond)) {
  _stbi__rewind($s);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($1<<24>>24)==(54);
 $4 = $3 ? 3 : 1;
 HEAP32[$comp>>2] = $4;
 $5 = (_stbi__get8($s)|0);
 HEAP8[$c>>0] = $5;
 _stbi__pnm_skip_whitespace($s,$c);
 $6 = (_stbi__pnm_getinteger($s,$c)|0);
 HEAP32[$x>>2] = $6;
 _stbi__pnm_skip_whitespace($s,$c);
 $7 = (_stbi__pnm_getinteger($s,$c)|0);
 HEAP32[$y>>2] = $7;
 _stbi__pnm_skip_whitespace($s,$c);
 $8 = (_stbi__pnm_getinteger($s,$c)|0);
 $9 = ($8|0)>(255);
 if (!($9)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _stbi__err(24672);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__get8($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 168|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($s)) + 172|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $$0 = $6;
  return ($$0|0);
 }
 $7 = ((($s)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 _stbi__refill_buffer($s);
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($10)) + 1|0);
 HEAP32[$0>>2] = $11;
 $12 = HEAP8[$10>>0]|0;
 $$0 = $12;
 return ($$0|0);
}
function _stbi__rewind($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 176|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($s)) + 168|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _stbi__skip($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(0);
 if ($0) {
  $1 = ((($s)) + 172|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($s)) + 168|0);
  HEAP32[$3>>2] = $2;
  return;
 }
 $4 = ((($s)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($s)) + 172|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($s)) + 168|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $8;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  $14 = ($13|0)<($n|0);
  if ($14) {
   HEAP32[$9>>2] = $8;
   $15 = ((($s)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($s)) + 28|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($n) - ($13))|0;
   FUNCTION_TABLE_vii[$16 & 63]($18,$19);
   return;
  }
 }
 $20 = ((($s)) + 168|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($n)|0);
 HEAP32[$20>>2] = $22;
 return;
}
function _stbi__get16le($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = $0&255;
 $2 = (_stbi__get8($s)|0);
 $3 = $2&255;
 $4 = $3 << 8;
 $5 = $4 | $1;
 return ($5|0);
}
function _stbi__refill_buffer($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($s)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($s)) + 40|0);
 $5 = ((($s)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iiii[$1 & 3]($3,$4,$6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = ((($s)) + 32|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($s)) + 168|0);
  HEAP32[$10>>2] = $4;
  $11 = ((($s)) + 41|0);
  $12 = ((($s)) + 172|0);
  HEAP32[$12>>2] = $11;
  $13 = HEAP32[$10>>2]|0;
  HEAP8[$13>>0] = 0;
  return;
 } else {
  $14 = ((($s)) + 168|0);
  HEAP32[$14>>2] = $4;
  $15 = (((($s)) + 40|0) + ($7)|0);
  $16 = ((($s)) + 172|0);
  HEAP32[$16>>2] = $15;
  return;
 }
}
function _stbi__pnm_skip_whitespace($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__at_eof($s)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  return;
 }
 while(1) {
  $2 = HEAP8[$c>>0]|0;
  $3 = (_stbi__pnm_isspace($2)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 4;
   break;
  }
  $5 = (_stbi__get8($s)|0);
  HEAP8[$c>>0] = $5;
  $6 = (_stbi__at_eof($s)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return;
 }
}
function _stbi__pnm_getinteger($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value$0$lcssa = 0, $value$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__at_eof($s)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $value$01 = 0;
 } else {
  $value$0$lcssa = 0;
  return ($value$0$lcssa|0);
 }
 while(1) {
  $2 = HEAP8[$c>>0]|0;
  $3 = (_stbi__pnm_isdigit($2)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $value$0$lcssa = $value$01;
   label = 4;
   break;
  }
  $5 = ($value$01*10)|0;
  $6 = $2 << 24 >> 24;
  $7 = (($5) + -48)|0;
  $8 = (($7) + ($6))|0;
  $9 = (_stbi__get8($s)|0);
  HEAP8[$c>>0] = $9;
  $10 = (_stbi__at_eof($s)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $value$01 = $8;
  } else {
   $value$0$lcssa = $8;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($value$0$lcssa|0);
 }
 return (0)|0;
}
function _stbi__at_eof($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($s)) + 24|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($s)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_ii[$4 & 15]($6)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = 0;
   return ($$0|0);
  }
  $9 = ((($s)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $12 = ((($s)) + 168|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($s)) + 172|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13>>>0)>=($15>>>0);
 $17 = $16&1;
 $$0 = $17;
 return ($$0|0);
}
function _stbi__pnm_isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $c$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $c$off = (($c) + -48)<<24>>24;
 $0 = ($c$off&255)<(10);
 $1 = $0&1;
 return ($1|0);
}
function _stbi__pnm_isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $phitmp = 0, $switch$cast = 0, $switch$cast$clear = 0, $switch$downshift = 0, $switch$masked = 0, $switch$tableidx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $switch$tableidx = (($c) + -9)<<24>>24;
 $0 = ($switch$tableidx&255)<(24);
 if (!($0)) {
  $1 = 0;
  return ($1|0);
 }
 $switch$cast = $switch$tableidx&255;
 $switch$cast$clear = $switch$cast & 16777215;
 $switch$downshift = 8388639 >>> $switch$cast$clear;
 $switch$masked = $switch$downshift & 16777215;
 $phitmp = $switch$masked & 1;
 $1 = $phitmp;
 return ($1|0);
}
function _stbi__get16be($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = $0&255;
 $2 = $1 << 8;
 $3 = (_stbi__get8($s)|0);
 $4 = $3&255;
 $5 = $2 | $4;
 return ($5|0);
}
function _stbi__get32be($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get16be($s)|0);
 $1 = $0 << 16;
 $2 = (_stbi__get16be($s)|0);
 $3 = (($1) + ($2))|0;
 return ($3|0);
}
function _stbi__get32le($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get16le($s)|0);
 $1 = (_stbi__get16le($s)|0);
 $2 = $1 << 16;
 $3 = (($2) + ($0))|0;
 return ($3|0);
}
function _stbi__gif_header($s,$g,$comp,$is_info) {
 $s = $s|0;
 $g = $g|0;
 $comp = $comp|0;
 $is_info = $is_info|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = ($0<<24>>24)==(71);
 if ($1) {
  $2 = (_stbi__get8($s)|0);
  $3 = ($2<<24>>24)==(73);
  if ($3) {
   $4 = (_stbi__get8($s)|0);
   $5 = ($4<<24>>24)==(70);
   if ($5) {
    $6 = (_stbi__get8($s)|0);
    $7 = ($6<<24>>24)==(56);
    if ($7) {
     $8 = (_stbi__get8($s)|0);
     if (!((($8<<24>>24) == 57) | (($8<<24>>24) == 55))) {
      _stbi__err(24688);
      $$0 = 0;
      return ($$0|0);
     }
     $9 = (_stbi__get8($s)|0);
     $10 = ($9<<24>>24)==(97);
     if (!($10)) {
      _stbi__err(24688);
      $$0 = 0;
      return ($$0|0);
     }
     HEAP32[14400>>2] = 24696;
     $11 = (_stbi__get16le($s)|0);
     HEAP32[$g>>2] = $11;
     $12 = (_stbi__get16le($s)|0);
     $13 = ((($g)) + 4|0);
     HEAP32[$13>>2] = $12;
     $14 = (_stbi__get8($s)|0);
     $15 = $14&255;
     $16 = ((($g)) + 12|0);
     HEAP32[$16>>2] = $15;
     $17 = (_stbi__get8($s)|0);
     $18 = $17&255;
     $19 = ((($g)) + 16|0);
     HEAP32[$19>>2] = $18;
     $20 = (_stbi__get8($s)|0);
     $21 = $20&255;
     $22 = ((($g)) + 20|0);
     HEAP32[$22>>2] = $21;
     $23 = ((($g)) + 24|0);
     HEAP32[$23>>2] = -1;
     $24 = ($comp|0)==(0|0);
     if (!($24)) {
      HEAP32[$comp>>2] = 4;
     }
     $25 = ($is_info|0)==(0);
     if (!($25)) {
      $$0 = 1;
      return ($$0|0);
     }
     $26 = HEAP32[$16>>2]|0;
     $27 = $26 & 128;
     $28 = ($27|0)==(0);
     if ($28) {
      $$0 = 1;
      return ($$0|0);
     }
     $29 = ((($g)) + 32|0);
     $30 = $26 & 7;
     $31 = 2 << $30;
     _stbi__gif_parse_colortable($s,$29,$31,-1);
     $$0 = 1;
     return ($$0|0);
    }
   }
  }
 }
 _stbi__err(24688);
 $$0 = 0;
 return ($$0|0);
}
function _stbi__gif_parse_colortable($s,$pal,$num_entries,$transp) {
 $s = $s|0;
 $pal = $pal|0;
 $num_entries = $num_entries|0;
 $transp = $transp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($num_entries|0)>(0);
 if ($0) {
  $i$01 = 0;
 } else {
  return;
 }
 while(1) {
  $1 = (_stbi__get8($s)|0);
  $2 = (((($pal) + ($i$01<<2)|0)) + 2|0);
  HEAP8[$2>>0] = $1;
  $3 = (_stbi__get8($s)|0);
  $4 = (((($pal) + ($i$01<<2)|0)) + 1|0);
  HEAP8[$4>>0] = $3;
  $5 = (_stbi__get8($s)|0);
  $6 = (($pal) + ($i$01<<2)|0);
  HEAP8[$6>>0] = $5;
  $not$ = ($i$01|0)!=($transp|0);
  $7 = $not$ << 31 >> 31;
  $8 = (((($pal) + ($i$01<<2)|0)) + 3|0);
  HEAP8[$8>>0] = $7;
  $9 = (($i$01) + 1)|0;
  $exitcond = ($9|0)==($num_entries|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $9;
  }
 }
 return;
}
function _stbi__parse_png_file($z,$scan,$req_comp) {
 $z = $z|0;
 $scan = $scan|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $$0 = 0, $$lcssa1740 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $c = 0, $color$0 = 0, $color$0$lcssa = 0, $color$1 = 0, $depth$0 = 0, $depth$0$lcssa = 0, $depth$1 = 0, $first$0 = 0, $first$0$lcssa = 0, $first$1 = 0, $has_trans$0 = 0, $has_trans$0$lcssa = 0, $has_trans$1 = 0, $i$0337 = 0, $i$1334 = 0, $idata_limit$0 = 0, $idata_limit$1 = 0, $idata_limit$1$lcssa = 0, $idata_limit$1$ph = 0, $idata_limit$2 = 0;
 var $idata_limit$3 = 0, $interlace$0 = 0, $interlace$0$lcssa = 0, $interlace$1 = 0, $ioff$0 = 0, $ioff$0$lcssa = 0, $ioff$1 = 0, $is_iphone$0 = 0, $is_iphone$0$lcssa = 0, $is_iphone$1 = 0, $k$0335 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond7 = 0, $or$cond9$not = 0, $pal_img_n$0 = 0, $pal_img_n$0$lcssa = 0;
 var $pal_img_n$0$lcssa1681 = 0, $pal_img_n$1 = 0, $pal_img_n$2 = 0, $pal_len$0 = 0, $pal_len$1 = 0, $palette = 0, $raw_len = 0, $req_comp$ = 0, $tc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $palette = sp + 16|0;
 $tc = sp + 12|0;
 $c = sp;
 $raw_len = sp + 8|0;
 $0 = HEAP32[$z>>2]|0;
 $1 = ((($z)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($z)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($z)) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = (_stbi__check_png_header($0)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($scan|0)==(1);
 if ($6) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($c)) + 4|0);
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 8|0);
 $10 = ($scan|0)==(2);
 $11 = ((($0)) + 8|0);
 $12 = ((($0)) + 8|0);
 $13 = ($scan|0)==(2);
 $14 = ($scan|0)==(2);
 $color$0 = 0;$depth$0 = 0;$first$0 = 1;$has_trans$0 = 0;$idata_limit$0 = 0;$interlace$0 = 0;$ioff$0 = 0;$is_iphone$0 = 0;$pal_img_n$0 = 0;$pal_len$0 = 0;
 L7: while(1) {
  _stbi__get_chunk_header($c,$0);
  $15 = HEAP32[$7>>2]|0;
  L9: do {
   if ((($15|0) == 1951551059)) {
    $78 = ($first$0|0)==(0);
    if (!($78)) {
     label = 45;
     break L7;
    }
    $79 = HEAP32[$2>>2]|0;
    $80 = ($79|0)==(0|0);
    if (!($80)) {
     label = 47;
     break L7;
    }
    $81 = ($pal_img_n$0<<24>>24)==(0);
    if ($81) {
     $95 = HEAP32[$12>>2]|0;
     $96 = $95 & 1;
     $97 = ($96|0)==(0);
     if ($97) {
      label = 59;
      break L7;
     }
     $98 = HEAP32[$c>>2]|0;
     $99 = $95 << 1;
     $100 = ($98|0)==($99|0);
     if (!($100)) {
      label = 63;
      break L7;
     }
     $101 = HEAP32[$12>>2]|0;
     $102 = ($101|0)>(0);
     if (!($102)) {
      $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = 0;$has_trans$1 = 1;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = 0;$pal_len$1 = $pal_len$0;
      break;
     }
     $103 = (24976 + ($depth$0)|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = $104&255;
     $k$0335 = 0;
     while(1) {
      $106 = (_stbi__get16be($0)|0);
      $107 = $106 & 255;
      $108 = Math_imul($105, $107)|0;
      $109 = $108&255;
      $110 = (($tc) + ($k$0335)|0);
      HEAP8[$110>>0] = $109;
      $111 = (($k$0335) + 1)|0;
      $112 = HEAP32[$12>>2]|0;
      $113 = ($111|0)<($112|0);
      if ($113) {
       $k$0335 = $111;
      } else {
       $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = 1;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$0;$pal_len$1 = $pal_len$0;
       break L9;
      }
     }
    }
    if ($13) {
     label = 50;
     break L7;
    }
    $83 = ($pal_len$0|0)==(0);
    if ($83) {
     label = 52;
     break L7;
    }
    $84 = HEAP32[$c>>2]|0;
    $85 = ($84>>>0)>($pal_len$0>>>0);
    if ($85) {
     label = 56;
     break L7;
    }
    $86 = HEAP32[$c>>2]|0;
    $87 = ($86|0)==(0);
    if ($87) {
     $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = 0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = 4;$pal_len$1 = $pal_len$0;
    } else {
     $88 = HEAP32[$c>>2]|0;
     $i$1334 = 0;
     while(1) {
      $89 = (_stbi__get8($0)|0);
      $90 = $i$1334 << 2;
      $91 = $90 | 3;
      $92 = (($palette) + ($91)|0);
      HEAP8[$92>>0] = $89;
      $93 = (($i$1334) + 1)|0;
      $94 = ($93>>>0)<($88>>>0);
      if ($94) {
       $i$1334 = $93;
      } else {
       $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = 4;$pal_len$1 = $pal_len$0;
       break;
      }
     }
    }
   } else if ((($15|0) == 1347179589)) {
    $58 = ($first$0|0)==(0);
    if (!($58)) {
     label = 37;
     break L7;
    }
    $59 = HEAP32[$c>>2]|0;
    $60 = ($59>>>0)>(768);
    if ($60) {
     label = 39;
     break L7;
    }
    $61 = (($59>>>0) / 3)&-1;
    $62 = ($61*3)|0;
    $63 = ($62|0)==($59|0);
    if (!($63)) {
     label = 42;
     break L7;
    }
    $64 = ($59>>>0)>(2);
    if ($64) {
     $i$0337 = 0;
     while(1) {
      $65 = (_stbi__get8($0)|0);
      $66 = $i$0337 << 2;
      $67 = (($palette) + ($66)|0);
      HEAP8[$67>>0] = $65;
      $68 = (_stbi__get8($0)|0);
      $69 = $66 | 1;
      $70 = (($palette) + ($69)|0);
      HEAP8[$70>>0] = $68;
      $71 = (_stbi__get8($0)|0);
      $72 = $66 | 2;
      $73 = (($palette) + ($72)|0);
      HEAP8[$73>>0] = $71;
      $74 = $66 | 3;
      $75 = (($palette) + ($74)|0);
      HEAP8[$75>>0] = -1;
      $76 = (($i$0337) + 1)|0;
      $77 = ($76>>>0)<($61>>>0);
      if ($77) {
       $i$0337 = $76;
      } else {
       $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$0;$pal_len$1 = $61;
       break;
      }
     }
    } else {
     $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = 0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$0;$pal_len$1 = $61;
    }
   } else if ((($15|0) == 1130840649)) {
    $16 = HEAP32[$c>>2]|0;
    _stbi__skip($0,$16);
    $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = 1;$pal_img_n$2 = $pal_img_n$0;$pal_len$1 = $pal_len$0;
   } else if ((($15|0) == 1229472850)) {
    $17 = ($first$0|0)==(0);
    if ($17) {
     label = 7;
     break L7;
    }
    $18 = HEAP32[$c>>2]|0;
    $19 = ($18|0)==(13);
    if (!($19)) {
     label = 9;
     break L7;
    }
    $20 = (_stbi__get32be($0)|0);
    HEAP32[$0>>2] = $20;
    $21 = ($20>>>0)>(16777216);
    if ($21) {
     label = 11;
     break L7;
    }
    $22 = (_stbi__get32be($0)|0);
    HEAP32[$8>>2] = $22;
    $23 = ($22>>>0)>(16777216);
    if ($23) {
     label = 13;
     break L7;
    }
    $24 = (_stbi__get8($0)|0);
    $25 = $24&255;
    if (!((($24<<24>>24) == 1) | (($24<<24>>24) == 2) | (($24<<24>>24) == 4) | (($24<<24>>24) == 8))) {
     label = 15;
     break L7;
    }
    $26 = (_stbi__get8($0)|0);
    $27 = $26&255;
    $28 = ($26&255)>(6);
    if ($28) {
     label = 17;
     break L7;
    }
    $29 = ($26<<24>>24)==(3);
    if ($29) {
     $pal_img_n$1 = 3;
    } else {
     $30 = $27 & 1;
     $31 = ($30|0)==(0);
     if ($31) {
      $pal_img_n$1 = $pal_img_n$0;
     } else {
      label = 20;
      break L7;
     }
    }
    $32 = (_stbi__get8($0)|0);
    $33 = ($32<<24>>24)==(0);
    if (!($33)) {
     label = 22;
     break L7;
    }
    $34 = (_stbi__get8($0)|0);
    $35 = ($34<<24>>24)==(0);
    if (!($35)) {
     label = 24;
     break L7;
    }
    $36 = (_stbi__get8($0)|0);
    $37 = $36&255;
    $38 = ($36&255)>(1);
    if ($38) {
     label = 26;
     break L7;
    }
    $39 = HEAP32[$0>>2]|0;
    $40 = ($39|0)==(0);
    if ($40) {
     label = 29;
     break L7;
    }
    $41 = HEAP32[$8>>2]|0;
    $42 = ($41|0)==(0);
    if ($42) {
     label = 29;
     break L7;
    }
    $43 = ($pal_img_n$1<<24>>24)==(0);
    if (!($43)) {
     HEAP32[$11>>2] = 1;
     $53 = HEAP32[$0>>2]|0;
     $54 = (1073741824 / ($53>>>0))&-1;
     $55 = $54 >>> 2;
     $56 = HEAP32[$8>>2]|0;
     $57 = ($55>>>0)<($56>>>0);
     if ($57) {
      label = 35;
      break L7;
     } else {
      $color$1 = $27;$depth$1 = $25;$first$1 = 0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $37;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$1;$pal_len$1 = $pal_len$0;
      break;
     }
    }
    $44 = $27 & 2;
    $45 = $44 | 1;
    $46 = $27 >>> 2;
    $$lobit = $46 & 1;
    $47 = (($45) + ($$lobit))|0;
    HEAP32[$9>>2] = $47;
    $48 = HEAP32[$0>>2]|0;
    $49 = (1073741824 / ($48>>>0))&-1;
    $50 = (($49>>>0) / ($47>>>0))&-1;
    $51 = HEAP32[$8>>2]|0;
    $52 = ($50>>>0)<($51>>>0);
    if ($52) {
     label = 32;
     break L7;
    }
    if ($10) {
     $$0 = 1;
     label = 102;
     break L7;
    } else {
     $color$1 = $27;$depth$1 = $25;$first$1 = 0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $37;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = 0;$pal_len$1 = $pal_len$0;
    }
   } else if ((($15|0) == 1229209940)) {
    $114 = ($first$0|0)==(0);
    if (!($114)) {
     label = 66;
     break L7;
    }
    $115 = ($pal_img_n$0<<24>>24)==(0);
    $116 = ($pal_len$0|0)!=(0);
    $or$cond7 = $116 | $115;
    if (!($or$cond7)) {
     label = 68;
     break L7;
    }
    if ($14) {
     $pal_img_n$0$lcssa1681 = $pal_img_n$0;
     label = 70;
     break L7;
    }
    $119 = HEAP32[$c>>2]|0;
    $120 = (($119) + ($ioff$0))|0;
    $121 = ($120|0)<($ioff$0|0);
    if ($121) {
     $$0 = 0;
     label = 102;
     break L7;
    }
    $122 = ($120>>>0)>($idata_limit$0>>>0);
    if ($122) {
     $123 = ($idata_limit$0|0)==(0);
     $124 = ($119>>>0)>(4096);
     $125 = $124 ? $119 : 4096;
     $idata_limit$1$ph = $123 ? $125 : $idata_limit$0;
     $126 = HEAP32[$c>>2]|0;
     $127 = (($126) + ($ioff$0))|0;
     $idata_limit$1 = $idata_limit$1$ph;
     while(1) {
      $128 = ($127>>>0)>($idata_limit$1>>>0);
      $129 = $idata_limit$1 << 1;
      if ($128) {
       $idata_limit$1 = $129;
      } else {
       $idata_limit$1$lcssa = $idata_limit$1;
       break;
      }
     }
     $130 = HEAP32[$2>>2]|0;
     $131 = (_realloc($130,$idata_limit$1$lcssa)|0);
     $132 = ($131|0)==(0|0);
     if ($132) {
      label = 76;
      break L7;
     }
     HEAP32[$2>>2] = $131;
     $idata_limit$2 = $idata_limit$1$lcssa;
    } else {
     $idata_limit$2 = $idata_limit$0;
    }
    $133 = HEAP32[$2>>2]|0;
    $134 = (($133) + ($ioff$0)|0);
    $135 = HEAP32[$c>>2]|0;
    $136 = (_stbi__getn($0,$134,$135)|0);
    $137 = ($136|0)==(0);
    if ($137) {
     label = 79;
     break L7;
    }
    $138 = HEAP32[$c>>2]|0;
    $139 = (($138) + ($ioff$0))|0;
    $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = $first$0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$2;$interlace$1 = $interlace$0;$ioff$1 = $139;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$0;$pal_len$1 = $pal_len$0;
   } else if ((($15|0) == 1229278788)) {
    $color$0$lcssa = $color$0;$depth$0$lcssa = $depth$0;$first$0$lcssa = $first$0;$has_trans$0$lcssa = $has_trans$0;$interlace$0$lcssa = $interlace$0;$ioff$0$lcssa = $ioff$0;$is_iphone$0$lcssa = $is_iphone$0;$pal_img_n$0$lcssa = $pal_img_n$0;
    label = 81;
    break L7;
   } else {
    $182 = ($first$0|0)==(0);
    if (!($182)) {
     label = 97;
     break L7;
    }
    $183 = $15 & 536870912;
    $184 = ($183|0)==(0);
    if ($184) {
     $$lcssa1740 = $15;
     label = 99;
     break L7;
    }
    $195 = HEAP32[$c>>2]|0;
    _stbi__skip($0,$195);
    $color$1 = $color$0;$depth$1 = $depth$0;$first$1 = 0;$has_trans$1 = $has_trans$0;$idata_limit$3 = $idata_limit$0;$interlace$1 = $interlace$0;$ioff$1 = $ioff$0;$is_iphone$1 = $is_iphone$0;$pal_img_n$2 = $pal_img_n$0;$pal_len$1 = $pal_len$0;
   }
  } while(0);
  (_stbi__get32be($0)|0);
  $color$0 = $color$1;$depth$0 = $depth$1;$first$0 = $first$1;$has_trans$0 = $has_trans$1;$idata_limit$0 = $idata_limit$3;$interlace$0 = $interlace$1;$ioff$0 = $ioff$1;$is_iphone$0 = $is_iphone$1;$pal_img_n$0 = $pal_img_n$2;$pal_len$0 = $pal_len$1;
 }
 switch (label|0) {
  case 7: {
   _stbi__err(24704);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 9: {
   _stbi__err(24720);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 11: {
   _stbi__err(24736);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 13: {
   _stbi__err(24736);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 15: {
   _stbi__err(24752);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 17: {
   _stbi__err(24776);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 20: {
   _stbi__err(24776);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 22: {
   _stbi__err(24792);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 24: {
   _stbi__err(24808);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 26: {
   _stbi__err(24832);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 29: {
   _stbi__err(24856);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 32: {
   _stbi__err(24736);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 35: {
   _stbi__err(24736);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 37: {
   _stbi__err(24872);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 39: {
   _stbi__err(24888);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 42: {
   _stbi__err(24888);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 45: {
   _stbi__err(24872);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 47: {
   _stbi__err(24904);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 50: {
   $82 = ((($0)) + 8|0);
   HEAP32[$82>>2] = 4;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 52: {
   _stbi__err(24920);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 56: {
   _stbi__err(24944);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 59: {
   _stbi__err(24960);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 63: {
   _stbi__err(24944);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 66: {
   _stbi__err(24872);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 68: {
   _stbi__err(24992);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 70: {
   $117 = $pal_img_n$0$lcssa1681&255;
   $118 = ((($0)) + 8|0);
   HEAP32[$118>>2] = $117;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 76: {
   _stbi__err(25000);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 79: {
   _stbi__err(25016);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 81: {
   $140 = ($first$0$lcssa|0)==(0);
   if (!($140)) {
    _stbi__err(24872);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $141 = ($scan|0)==(0);
   if (!($141)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $142 = HEAP32[$2>>2]|0;
   $143 = ($142|0)==(0|0);
   if ($143) {
    _stbi__err(25032);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $144 = HEAP32[$0>>2]|0;
   $145 = Math_imul($144, $depth$0$lcssa)|0;
   $146 = (($145) + 7)|0;
   $147 = $146 >>> 3;
   $148 = ((($0)) + 4|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ((($0)) + 8|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = Math_imul($151, $149)|0;
   $153 = Math_imul($152, $147)|0;
   $154 = (($153) + ($149))|0;
   HEAP32[$raw_len>>2] = $154;
   $155 = HEAP32[$2>>2]|0;
   $156 = ($is_iphone$0$lcssa|0)!=(0);
   $157 = $156&1;
   $158 = $157 ^ 1;
   $159 = (_stbi_zlib_decode_malloc_guesssize_headerflag($155,$ioff$0$lcssa,$154,$raw_len,$158)|0);
   HEAP32[$1>>2] = $159;
   $160 = ($159|0)==(0|0);
   if ($160) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $161 = HEAP32[$2>>2]|0;
   _free($161);
   HEAP32[$2>>2] = 0;
   $162 = HEAP32[$150>>2]|0;
   $163 = (($162) + 1)|0;
   $notlhs = ($163|0)!=($req_comp|0);
   $notrhs = ($req_comp|0)==(3);
   $or$cond9$not = $notrhs | $notlhs;
   $164 = ($pal_img_n$0$lcssa<<24>>24)!=(0);
   $or$cond11 = $164 | $or$cond9$not;
   $165 = ($has_trans$0$lcssa<<24>>24)==(0);
   $or$cond = $165 & $or$cond11;
   $166 = ((($0)) + 12|0);
   $$ = $or$cond ? $162 : $163;
   HEAP32[$166>>2] = $$;
   $167 = HEAP32[$1>>2]|0;
   $168 = HEAP32[$raw_len>>2]|0;
   $169 = ((($0)) + 12|0);
   $170 = (_stbi__create_png_image($z,$167,$168,$$,$depth$0$lcssa,$color$0$lcssa,$interlace$0$lcssa)|0);
   $171 = ($170|0)==(0);
   if ($171) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   if (!($165)) {
    $172 = HEAP32[$169>>2]|0;
    _stbi__compute_transparency($z,$tc,$172);
   }
   $173 = HEAP32[14440>>2]|0;
   $174 = ($173|0)!=(0);
   $or$cond13 = $156 & $174;
   if ($or$cond13) {
    $175 = HEAP32[$169>>2]|0;
    $176 = ($175|0)>(2);
    if ($176) {
     _stbi__de_iphone($z);
    }
   }
   if ($164) {
    $177 = $pal_img_n$0$lcssa&255;
    HEAP32[$150>>2] = $177;
    $178 = ($req_comp|0)>(2);
    $req_comp$ = $178 ? $req_comp : $177;
    HEAP32[$169>>2] = $req_comp$;
    $179 = (_stbi__expand_png_palette($z,$palette,$req_comp$)|0);
    $180 = ($179|0)==(0);
    if ($180) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $181 = HEAP32[$1>>2]|0;
   _free($181);
   HEAP32[$1>>2] = 0;
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 97: {
   _stbi__err(24872);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 99: {
   $185 = $$lcssa1740 >>> 24;
   $186 = $185&255;
   HEAP8[25040>>0] = $186;
   $187 = HEAP32[$7>>2]|0;
   $188 = $187 >>> 16;
   $189 = $188&255;
   HEAP8[(25041)>>0] = $189;
   $190 = HEAP32[$7>>2]|0;
   $191 = $190 >>> 8;
   $192 = $191&255;
   HEAP8[(25042)>>0] = $192;
   $193 = HEAP32[$7>>2]|0;
   $194 = $193&255;
   HEAP8[(25043)>>0] = $194;
   _stbi__err(25040);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 102: {
   STACKTOP = sp;return ($$0|0);
   break;
  }
 }
 return (0)|0;
}
function _stbi__check_png_header($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = ($0<<24>>24)==(-119);
 if ($1) {
  $2 = (_stbi__get8($s)|0);
  $3 = ($2<<24>>24)==(80);
  if ($3) {
   $4 = (_stbi__get8($s)|0);
   $5 = ($4<<24>>24)==(78);
   if ($5) {
    $6 = (_stbi__get8($s)|0);
    $7 = ($6<<24>>24)==(71);
    if ($7) {
     $8 = (_stbi__get8($s)|0);
     $9 = ($8<<24>>24)==(13);
     if ($9) {
      $10 = (_stbi__get8($s)|0);
      $11 = ($10<<24>>24)==(10);
      if ($11) {
       $12 = (_stbi__get8($s)|0);
       $13 = ($12<<24>>24)==(26);
       if ($13) {
        $14 = (_stbi__get8($s)|0);
        $15 = ($14<<24>>24)==(10);
        if ($15) {
         $$0 = 1;
         return ($$0|0);
        }
       }
      }
     }
    }
   }
  }
 }
 _stbi__err(25512);
 $$0 = 0;
 return ($$0|0);
}
function _stbi__get_chunk_header($agg$result,$s) {
 $agg$result = $agg$result|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get32be($s)|0);
 $1 = (_stbi__get32be($s)|0);
 HEAP32[$agg$result>>2] = $0;
 $2 = ((($agg$result)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _stbi__getn($s,$buffer,$n) {
 $s = $s|0;
 $buffer = $buffer|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($s)) + 172|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($s)) + 168|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $4;
  $8 = $6;
  $9 = (($7) - ($8))|0;
  $10 = ($9|0)<($n|0);
  if ($10) {
   _memcpy(($buffer|0),($6|0),($9|0))|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = ((($s)) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($buffer) + ($9)|0);
   $15 = (($n) - ($9))|0;
   $16 = (FUNCTION_TABLE_iiii[$11 & 3]($13,$14,$15)|0);
   $17 = ($16|0)==($15|0);
   $18 = $17&1;
   $19 = HEAP32[$3>>2]|0;
   HEAP32[$5>>2] = $19;
   $$0 = $18;
   return ($$0|0);
  }
 }
 $20 = ((($s)) + 168|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($n)|0);
 $23 = ((($s)) + 172|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($22>>>0)>($24>>>0);
 if ($25) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($buffer|0),($21|0),($n|0))|0;
 $26 = HEAP32[$20>>2]|0;
 $27 = (($26) + ($n)|0);
 HEAP32[$20>>2] = $27;
 $$0 = 1;
 return ($$0|0);
}
function _stbi__create_png_image($a,$image_data,$image_data_len,$out_n,$depth,$color,$interlaced) {
 $a = $a|0;
 $image_data = $image_data|0;
 $image_data_len = $image_data_len|0;
 $out_n = $out_n|0;
 $depth = $depth|0;
 $color = $color|0;
 $interlaced = $interlaced|0;
 var $$0 = 0, $$0212 = 0, $$0311 = 0, $$1 = 0, $$14 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $i$07 = 0;
 var $j$08 = 0, $or$cond = 0, $p$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($interlaced|0)==(0);
 $1 = HEAP32[$a>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 if ($0) {
  $5 = (_stbi__create_png_image_raw($a,$image_data,$image_data_len,$out_n,$2,$4,$depth,$color)|0);
  $$0 = $5;
  return ($$0|0);
 }
 $6 = Math_imul($2, $out_n)|0;
 $7 = Math_imul($6, $4)|0;
 $8 = (_stbi__malloc($7)|0);
 $9 = ((($a)) + 12|0);
 $10 = ((($a)) + 12|0);
 $$0212 = $image_data;$$0311 = $image_data_len;$p$010 = 0;
 while(1) {
  $11 = HEAP32[$a>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = (25192 + ($p$010<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (25224 + ($p$010<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($12) + -1)|0;
  $18 = (($17) - ($14))|0;
  $19 = (($18) + ($16))|0;
  $20 = (($19>>>0) / ($16>>>0))&-1;
  $21 = ((($11)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (25256 + ($p$010<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (25288 + ($p$010<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($22) + -1)|0;
  $28 = (($27) - ($24))|0;
  $29 = (($28) + ($26))|0;
  $30 = (($29>>>0) / ($26>>>0))&-1;
  $31 = ($20|0)!=(0);
  $32 = ($30|0)!=(0);
  $or$cond = $31 & $32;
  if ($or$cond) {
   $33 = ((($11)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = Math_imul($20, $depth)|0;
   $36 = Math_imul($35, $34)|0;
   $37 = (($36) + 7)|0;
   $38 = $37 >> 3;
   $39 = (($38) + 1)|0;
   $40 = Math_imul($39, $30)|0;
   $41 = (_stbi__create_png_image_raw($a,$$0212,$$0311,$out_n,$20,$30,$depth,$color)|0);
   $42 = ($41|0)==(0);
   if ($42) {
    label = 8;
    break;
   }
   $43 = ($30|0)>(0);
   if ($43) {
    $44 = ($20|0)>(0);
    $j$08 = 0;
    while(1) {
     if ($44) {
      $45 = HEAP32[$25>>2]|0;
      $46 = Math_imul($45, $j$08)|0;
      $47 = HEAP32[$23>>2]|0;
      $48 = (($46) + ($47))|0;
      $49 = HEAP32[$15>>2]|0;
      $50 = HEAP32[$13>>2]|0;
      $51 = Math_imul($j$08, $20)|0;
      $i$07 = 0;
      while(1) {
       $52 = Math_imul($49, $i$07)|0;
       $53 = (($52) + ($50))|0;
       $54 = HEAP32[$a>>2]|0;
       $55 = HEAP32[$54>>2]|0;
       $56 = Math_imul($55, $48)|0;
       $57 = (($53) + ($56))|0;
       $$sum = Math_imul($57, $out_n)|0;
       $58 = (($8) + ($$sum)|0);
       $59 = HEAP32[$10>>2]|0;
       $60 = (($i$07) + ($51))|0;
       $61 = Math_imul($60, $out_n)|0;
       $62 = (($59) + ($61)|0);
       _memcpy(($58|0),($62|0),($out_n|0))|0;
       $63 = (($i$07) + 1)|0;
       $64 = ($63|0)<($20|0);
       if ($64) {
        $i$07 = $63;
       } else {
        break;
       }
      }
     }
     $65 = (($j$08) + 1)|0;
     $66 = ($65|0)<($30|0);
     if ($66) {
      $j$08 = $65;
     } else {
      break;
     }
    }
   }
   $67 = HEAP32[$9>>2]|0;
   _free($67);
   $68 = (($$0212) + ($40)|0);
   $69 = (($$0311) - ($40))|0;
   $$1 = $68;$$14 = $69;
  } else {
   $$1 = $$0212;$$14 = $$0311;
  }
  $70 = (($p$010) + 1)|0;
  $71 = ($70|0)<(7);
  if ($71) {
   $$0212 = $$1;$$0311 = $$14;$p$010 = $70;
  } else {
   label = 15;
   break;
  }
 }
 if ((label|0) == 8) {
  _free($8);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 15) {
  $72 = ((($a)) + 12|0);
  HEAP32[$72>>2] = $8;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__compute_transparency($z,$tc,$out_n) {
 $z = $z|0;
 $tc = $tc|0;
 $out_n = $out_n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond8 = 0, $i$03 = 0, $i$15 = 0, $not$ = 0, $p$04 = 0, $p$16 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$z>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = ((($z)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 if ((($out_n|0) == 2)) {
  $11 = ($4|0)==(0);
  if ($11) {
   return;
  }
  $12 = Math_imul($3, $1)|0;
  $i$03 = 0;$p$04 = $6;
  while(1) {
   $13 = HEAP8[$p$04>>0]|0;
   $14 = HEAP8[$tc>>0]|0;
   $not$ = ($13<<24>>24)!=($14<<24>>24);
   $15 = $not$ << 31 >> 31;
   $16 = ((($p$04)) + 1|0);
   HEAP8[$16>>0] = $15;
   $17 = ((($p$04)) + 2|0);
   $18 = (($i$03) + 1)|0;
   $exitcond = ($18|0)==($12|0);
   if ($exitcond) {
    break;
   } else {
    $i$03 = $18;$p$04 = $17;
   }
  }
  return;
 } else if ((($out_n|0) == 4)) {
  $7 = ($4|0)==(0);
  if ($7) {
   return;
  }
  $8 = ((($tc)) + 1|0);
  $9 = ((($tc)) + 2|0);
  $10 = Math_imul($3, $1)|0;
  $i$15 = 0;$p$16 = $6;
  while(1) {
   $19 = HEAP8[$p$16>>0]|0;
   $20 = HEAP8[$tc>>0]|0;
   $21 = ($19<<24>>24)==($20<<24>>24);
   if ($21) {
    $22 = ((($p$16)) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = HEAP8[$8>>0]|0;
    $25 = ($23<<24>>24)==($24<<24>>24);
    if ($25) {
     $26 = ((($p$16)) + 2|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = HEAP8[$9>>0]|0;
     $29 = ($27<<24>>24)==($28<<24>>24);
     if ($29) {
      $30 = ((($p$16)) + 3|0);
      HEAP8[$30>>0] = 0;
     }
    }
   }
   $31 = ((($p$16)) + 4|0);
   $32 = (($i$15) + 1)|0;
   $exitcond8 = ($32|0)==($10|0);
   if ($exitcond8) {
    break;
   } else {
    $i$15 = $32;$p$16 = $31;
   }
  }
  return;
 } else {
  ___assert_fail((25128|0),(25096|0),4194,(25160|0));
  // unreachable;
 }
}
function _stbi__de_iphone($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond13 = 0, $exitcond14 = 0, $i$06 = 0, $i$111 = 0, $i$28 = 0, $p$05 = 0, $p$110 = 0, $p$27 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$z>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = ((($z)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 if ((($8|0) == 4)) {
  $16 = HEAP32[14432>>2]|0;
  $17 = ($16|0)==(0);
  $18 = ($4|0)==(0);
  if ($17) {
   if ($18) {
    return;
   }
   $20 = Math_imul($3, $1)|0;
   $i$28 = 0;$p$27 = $6;
   while(1) {
    $44 = HEAP8[$p$27>>0]|0;
    $45 = ((($p$27)) + 2|0);
    $46 = HEAP8[$45>>0]|0;
    HEAP8[$p$27>>0] = $46;
    HEAP8[$45>>0] = $44;
    $47 = ((($p$27)) + 4|0);
    $48 = (($i$28) + 1)|0;
    $exitcond13 = ($48|0)==($20|0);
    if ($exitcond13) {
     break;
    } else {
     $i$28 = $48;$p$27 = $47;
    }
   }
   return;
  }
  if ($18) {
   return;
  }
  $19 = Math_imul($3, $1)|0;
  $i$111 = 0;$p$110 = $6;
  while(1) {
   $21 = ((($p$110)) + 3|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = HEAP8[$p$110>>0]|0;
   $24 = ($22<<24>>24)==(0);
   $25 = ((($p$110)) + 2|0);
   $26 = HEAP8[$25>>0]|0;
   if ($24) {
    HEAP8[$p$110>>0] = $26;
    $storemerge = $23;
   } else {
    $27 = $26&255;
    $28 = ($27*255)|0;
    $29 = $22&255;
    $30 = (($28>>>0) / ($29>>>0))&-1;
    $31 = $30&255;
    HEAP8[$p$110>>0] = $31;
    $32 = ((($p$110)) + 1|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = ($34*255)|0;
    $36 = (($35>>>0) / ($29>>>0))&-1;
    $37 = $36&255;
    HEAP8[$32>>0] = $37;
    $38 = $23&255;
    $39 = ($38*255)|0;
    $40 = (($39>>>0) / ($29>>>0))&-1;
    $41 = $40&255;
    $storemerge = $41;
   }
   HEAP8[$25>>0] = $storemerge;
   $42 = ((($p$110)) + 4|0);
   $43 = (($i$111) + 1)|0;
   $exitcond14 = ($43|0)==($19|0);
   if ($exitcond14) {
    break;
   } else {
    $i$111 = $43;$p$110 = $42;
   }
  }
  return;
 } else if ((($8|0) == 3)) {
  $9 = ($4|0)==(0);
  if ($9) {
   return;
  }
  $10 = Math_imul($3, $1)|0;
  $i$06 = 0;$p$05 = $6;
  while(1) {
   $11 = HEAP8[$p$05>>0]|0;
   $12 = ((($p$05)) + 2|0);
   $13 = HEAP8[$12>>0]|0;
   HEAP8[$p$05>>0] = $13;
   HEAP8[$12>>0] = $11;
   $14 = ((($p$05)) + 3|0);
   $15 = (($i$06) + 1)|0;
   $exitcond = ($15|0)==($10|0);
   if ($exitcond) {
    break;
   } else {
    $i$06 = $15;$p$05 = $14;
   }
  }
  return;
 } else {
  ___assert_fail((25072|0),(25096|0),4275,(25112|0));
  // unreachable;
 }
}
function _stbi__expand_png_palette($a,$palette,$pal_img_n) {
 $a = $a|0;
 $palette = $palette|0;
 $pal_img_n = $pal_img_n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond8 = 0, $i$04 = 0, $i$16 = 0, $p$03 = 0, $p$15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $1)|0;
 $5 = ((($a)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($4, $pal_img_n)|0;
 $8 = (_stbi__malloc($7)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  _stbi__err(25000);
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ($pal_img_n|0)==(3);
 $11 = ($4|0)==(0);
 if ($10) {
  if (!($11)) {
   $13 = Math_imul($3, $1)|0;
   $i$04 = 0;$p$03 = $8;
   while(1) {
    $14 = (($6) + ($i$04)|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = $16 << 2;
    $18 = (($palette) + ($17)|0);
    $19 = HEAP8[$18>>0]|0;
    HEAP8[$p$03>>0] = $19;
    $20 = $17 | 1;
    $21 = (($palette) + ($20)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ((($p$03)) + 1|0);
    HEAP8[$23>>0] = $22;
    $24 = $17 | 2;
    $25 = (($palette) + ($24)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ((($p$03)) + 2|0);
    HEAP8[$27>>0] = $26;
    $28 = ((($p$03)) + 3|0);
    $29 = (($i$04) + 1)|0;
    $exitcond = ($29|0)==($13|0);
    if ($exitcond) {
     break;
    } else {
     $i$04 = $29;$p$03 = $28;
    }
   }
  }
 } else {
  if (!($11)) {
   $12 = Math_imul($3, $1)|0;
   $i$16 = 0;$p$15 = $8;
   while(1) {
    $30 = (($6) + ($i$16)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&255;
    $33 = $32 << 2;
    $34 = (($palette) + ($33)|0);
    $35 = HEAP8[$34>>0]|0;
    HEAP8[$p$15>>0] = $35;
    $36 = $33 | 1;
    $37 = (($palette) + ($36)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ((($p$15)) + 1|0);
    HEAP8[$39>>0] = $38;
    $40 = $33 | 2;
    $41 = (($palette) + ($40)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = ((($p$15)) + 2|0);
    HEAP8[$43>>0] = $42;
    $44 = $33 | 3;
    $45 = (($palette) + ($44)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = ((($p$15)) + 3|0);
    HEAP8[$47>>0] = $46;
    $48 = ((($p$15)) + 4|0);
    $49 = (($i$16) + 1)|0;
    $exitcond8 = ($49|0)==($12|0);
    if ($exitcond8) {
     break;
    } else {
     $i$16 = $49;$p$15 = $48;
    }
   }
  }
 }
 $50 = HEAP32[$5>>2]|0;
 _free($50);
 HEAP32[$5>>2] = $8;
 $$0 = 1;
 return ($$0|0);
}
function _stbi__create_png_image_raw($a,$raw,$raw_len,$out_n,$x,$y,$depth,$color) {
 $a = $a|0;
 $raw = $raw|0;
 $raw_len = $raw_len|0;
 $out_n = $out_n|0;
 $x = $x|0;
 $y = $y|0;
 $depth = $depth|0;
 $color = $color|0;
 var $$0 = 0, $$01229 = 0, $$1 = 0, $$2213 = 0, $$3205 = 0, $$4197 = 0, $$5188 = 0, $$6179 = 0, $$7170 = 0, $$8162 = 0, $$9 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0;
 var $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27$pn = 0, $$sum290 = 0, $$sum291 = 0, $$sum292 = 0, $$sum293 = 0, $$sum294 = 0, $$sum295 = 0, $$sum296 = 0, $$sum297 = 0, $$sum298 = 0, $$sum299 = 0;
 var $$sum3 = 0, $$sum300 = 0, $$sum301 = 0, $$sum302 = 0, $$sum303 = 0, $$sum304 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum38 = 0, $$sum39 = 0, $$sum4 = 0, $$sum40 = 0, $$sum41 = 0, $$sum41$pn = 0, $$sum5 = 0;
 var $$sum6 = 0, $$sum63 = 0, $$sum64 = 0, $$sum65 = 0, $$sum66 = 0, $$sum67 = 0, $$sum68 = 0, $$sum69 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $cur$0$sum = 0;
 var $cur$0$sum42 = 0, $cur$0$sum43 = 0, $cur$0$sum44 = 0, $cur$0$sum45 = 0, $cur$0$sum46 = 0, $cur$0$sum47 = 0, $cur$0$sum48 = 0, $cur$0$sum49 = 0, $cur$0$sum50 = 0, $cur$0$sum51 = 0, $cur$0$sum53$pn = 0, $cur$0$sum54 = 0, $cur$0$sum55 = 0, $cur$0$sum56 = 0, $cur$0$sum57 = 0, $cur$0$sum58 = 0, $cur$0$sum59 = 0, $cur$0$sum60 = 0, $cur$0$sum61 = 0, $cur$1 = 0;
 var $cur$2212 = 0, $cur$3204 = 0, $cur$4195 = 0, $cur$5186 = 0, $cur$6177 = 0, $cur$7169 = 0, $cur$8161 = 0, $cur1$0$lcssa = 0, $cur1$0138 = 0, $cur1$1$lcssa = 0, $cur1$1130 = 0, $cur1$4$lcssa = 0, $cur1$4125 = 0, $exitcond = 0, $exitcond269 = 0, $exitcond271 = 0, $exitcond273 = 0, $exitcond275 = 0, $exitcond277 = 0, $exitcond279 = 0;
 var $exitcond281 = 0, $exitcond284 = 0, $exitcond285 = 0, $exitcond286 = 0, $exitcond287 = 0, $exitcond288 = 0, $exitcond289 = 0, $filter$0 = 0, $filter_bytes$0 = 0, $i$0 = 0, $i$0211 = 0, $i$0214 = 0, $i$1 = 0, $i$1203 = 0, $i$1206 = 0, $i$2 = 0, $i$2194 = 0, $i$2198 = 0, $i$3 = 0, $i$3185 = 0;
 var $i$3189 = 0, $i$4 = 0, $i$4176 = 0, $i$4180 = 0, $i$5 = 0, $i$5168 = 0, $i$5171 = 0, $i$6 = 0, $i$6160 = 0, $i$6163 = 0, $i3$0 = 0, $i3$0148 = 0, $i3$0149 = 0, $i3$1 = 0, $i3$1145 = 0, $i3$1146 = 0, $in$0$lcssa = 0, $in$0139 = 0, $in$1$lcssa = 0, $in$1131 = 0;
 var $in$2$lcssa = 0, $in$2126 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $indvars$iv$next255 = 0, $indvars$iv$next258 = 0, $indvars$iv$next261 = 0, $indvars$iv$next264 = 0, $indvars$iv$next267 = 0, $indvars$iv254 = 0, $indvars$iv257 = 0, $indvars$iv260 = 0, $indvars$iv263 = 0, $indvars$iv266 = 0, $j$0228 = 0, $j$1151 = 0, $k$0153 = 0, $k$10182 = 0, $k$11173 = 0, $k$12165 = 0;
 var $k$1226 = 0, $k$13157 = 0, $k$14$lcssa = 0, $k$14137 = 0, $k$15$lcssa = 0, $k$15129 = 0, $k$16$lcssa = 0, $k$16124 = 0, $k$2224 = 0, $k$3222 = 0, $k$4220 = 0, $k$5218 = 0, $k$6216 = 0, $k$7208 = 0, $k$8200 = 0, $k$9191 = 0, $or$cond = 0, $or$cond311 = 0, $prior$0 = 0, $prior$0$sum = 0;
 var $prior$0$sum28 = 0, $prior$0$sum29 = 0, $prior$0$sum30 = 0, $prior$3196 = 0, $prior$4187 = 0, $prior$5178 = 0, $scevgep = 0, $scevgep256 = 0, $scevgep259 = 0, $scevgep262 = 0, $scevgep265 = 0, $scevgep268 = 0, $scevgep270 = 0, $scevgep272 = 0, $scevgep274 = 0, $scevgep276 = 0, $scevgep278 = 0, $scevgep280 = 0, $scevgep283 = 0, $width$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = Math_imul($x, $out_n)|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($out_n|0);
 $5 = (($3) + 1)|0;
 $6 = ($5|0)==($out_n|0);
 $or$cond = $4 | $6;
 if (!($or$cond)) {
  ___assert_fail((25320|0),(25096|0),3974,(25368|0));
  // unreachable;
 }
 $7 = Math_imul($x, $out_n)|0;
 $8 = Math_imul($7, $y)|0;
 $9 = (_stbi__malloc($8)|0);
 $10 = ((($a)) + 12|0);
 HEAP32[$10>>2] = $9;
 $11 = ($9|0)==(0|0);
 if ($11) {
  _stbi__err(25000);
  $$0 = 0;
  return ($$0|0);
 }
 $12 = Math_imul($3, $x)|0;
 $13 = Math_imul($12, $depth)|0;
 $14 = (($13) + 7)|0;
 $15 = $14 >>> 3;
 $16 = (($15) + 1)|0;
 $17 = Math_imul($16, $y)|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = ($18|0)==($x|0);
 if ($19) {
  $20 = ((($0)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==($y|0);
  if ($22) {
   $23 = ($17|0)==($raw_len|0);
   if (!($23)) {
    _stbi__err(25400);
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   label = 9;
  }
 } else {
  label = 9;
 }
 if ((label|0) == 9) {
  $24 = ($17>>>0)>($raw_len>>>0);
  if ($24) {
   _stbi__err(25400);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $25 = ($y|0)==(0);
 L18: do {
  if (!($25)) {
   $26 = ($depth|0)<(8);
   $27 = ($15>>>0)>($x>>>0);
   $28 = (($1) - ($15))|0;
   $29 = ($depth|0)==(8);
   $$sum26 = (($3) + 1)|0;
   $brmerge = $26 | $4;
   $i$0211 = (($x) + -1)|0;
   $30 = ($i$0211|0)==(0);
   $31 = ($3|0)>(0);
   $i$1203 = (($x) + -1)|0;
   $32 = ($i$1203|0)==(0);
   $33 = ($3|0)>(0);
   $i$2194 = (($x) + -1)|0;
   $34 = ($i$2194|0)==(0);
   $35 = ($3|0)>(0);
   $i$3185 = (($x) + -1)|0;
   $36 = ($i$3185|0)==(0);
   $37 = ($3|0)>(0);
   $i$4176 = (($x) + -1)|0;
   $38 = ($i$4176|0)==(0);
   $39 = ($3|0)>(0);
   $i$5168 = (($x) + -1)|0;
   $40 = ($i$5168|0)==(0);
   $41 = ($3|0)>(0);
   $i$6160 = (($x) + -1)|0;
   $42 = ($i$6160|0)==(0);
   $43 = ($3|0)>(0);
   $44 = Math_imul($3, $i$6160)|0;
   $$01229 = $raw;$j$0228 = 0;
   L20: while(1) {
    $45 = HEAP32[$10>>2]|0;
    $46 = Math_imul($j$0228, $1)|0;
    $$sum13 = (($46) - ($1))|0;
    $47 = HEAP8[$$01229>>0]|0;
    $48 = $47&255;
    $49 = ($47&255)>(4);
    if ($49) {
     label = 14;
     break;
    }
    if ($26) {
     if ($27) {
      label = 17;
      break;
     }
     $$sum41 = (($28) + ($46))|0;
     $$sum41$pn = $$sum41;$filter_bytes$0 = 1;$width$0 = $15;
    } else {
     $$sum41$pn = $46;$filter_bytes$0 = $3;$width$0 = $x;
    }
    $50 = ($j$0228|0)==(0);
    if ($50) {
     $51 = (25464 + ($48)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $filter$0 = $53;
    } else {
     $filter$0 = $48;
    }
    $54 = ($filter_bytes$0|0)>(0);
    L30: do {
     if ($54) {
      $k$0153 = 0;
      while(1) {
       switch ($filter$0|0) {
       case 1:  {
        $$sum39 = (($k$0153) + 1)|0;
        $58 = (($$01229) + ($$sum39)|0);
        $59 = HEAP8[$58>>0]|0;
        $cur$0$sum56 = (($k$0153) + ($$sum41$pn))|0;
        $60 = (($45) + ($cur$0$sum56)|0);
        HEAP8[$60>>0] = $59;
        break;
       }
       case 0:  {
        $$sum40 = (($k$0153) + 1)|0;
        $55 = (($$01229) + ($$sum40)|0);
        $56 = HEAP8[$55>>0]|0;
        $cur$0$sum55 = (($k$0153) + ($$sum41$pn))|0;
        $57 = (($45) + ($cur$0$sum55)|0);
        HEAP8[$57>>0] = $56;
        break;
       }
       case 4:  {
        $$sum33 = (($k$0153) + 1)|0;
        $80 = (($$01229) + ($$sum33)|0);
        $81 = HEAP8[$80>>0]|0;
        $82 = $81&255;
        $$sum34 = (($k$0153) + ($$sum13))|0;
        $83 = (($45) + ($$sum34)|0);
        $84 = HEAP8[$83>>0]|0;
        $85 = $84&255;
        $86 = (_stbi__paeth(0,$85,0)|0);
        $87 = (($86) + ($82))|0;
        $88 = $87&255;
        $cur$0$sum59 = (($k$0153) + ($$sum41$pn))|0;
        $89 = (($45) + ($cur$0$sum59)|0);
        HEAP8[$89>>0] = $88;
        break;
       }
       case 5:  {
        $$sum32 = (($k$0153) + 1)|0;
        $90 = (($$01229) + ($$sum32)|0);
        $91 = HEAP8[$90>>0]|0;
        $cur$0$sum60 = (($k$0153) + ($$sum41$pn))|0;
        $92 = (($45) + ($cur$0$sum60)|0);
        HEAP8[$92>>0] = $91;
        break;
       }
       case 6:  {
        $$sum31 = (($k$0153) + 1)|0;
        $93 = (($$01229) + ($$sum31)|0);
        $94 = HEAP8[$93>>0]|0;
        $cur$0$sum61 = (($k$0153) + ($$sum41$pn))|0;
        $95 = (($45) + ($cur$0$sum61)|0);
        HEAP8[$95>>0] = $94;
        break;
       }
       case 2:  {
        $$sum37 = (($k$0153) + 1)|0;
        $61 = (($$01229) + ($$sum37)|0);
        $62 = HEAP8[$61>>0]|0;
        $63 = $62&255;
        $$sum38 = (($k$0153) + ($$sum13))|0;
        $64 = (($45) + ($$sum38)|0);
        $65 = HEAP8[$64>>0]|0;
        $66 = $65&255;
        $67 = (($66) + ($63))|0;
        $68 = $67&255;
        $cur$0$sum57 = (($k$0153) + ($$sum41$pn))|0;
        $69 = (($45) + ($cur$0$sum57)|0);
        HEAP8[$69>>0] = $68;
        break;
       }
       case 3:  {
        $$sum35 = (($k$0153) + 1)|0;
        $70 = (($$01229) + ($$sum35)|0);
        $71 = HEAP8[$70>>0]|0;
        $72 = $71&255;
        $$sum36 = (($k$0153) + ($$sum13))|0;
        $73 = (($45) + ($$sum36)|0);
        $74 = HEAP8[$73>>0]|0;
        $75 = $74&255;
        $76 = $75 >>> 1;
        $77 = (($76) + ($72))|0;
        $78 = $77&255;
        $cur$0$sum58 = (($k$0153) + ($$sum41$pn))|0;
        $79 = (($45) + ($cur$0$sum58)|0);
        HEAP8[$79>>0] = $78;
        break;
       }
       default: {
       }
       }
       $96 = (($k$0153) + 1)|0;
       $exitcond = ($96|0)==($filter_bytes$0|0);
       if ($exitcond) {
        break L30;
       } else {
        $k$0153 = $96;
       }
      }
     }
    } while(0);
    if ($29) {
     if (!($4)) {
      $cur$0$sum54 = (($$sum41$pn) + ($3))|0;
      $97 = (($45) + ($cur$0$sum54)|0);
      HEAP8[$97>>0] = -1;
     }
     $98 = (($$01229) + ($$sum26)|0);
     $$1 = $98;$100 = $out_n;$125 = $$sum26;
    } else {
     $99 = ((($$01229)) + 2|0);
     $$1 = $99;$100 = 1;$125 = 2;
    }
    $$sum27$pn = (($100) + ($$sum13))|0;
    $cur$0$sum53$pn = (($100) + ($$sum41$pn))|0;
    $cur$1 = (($45) + ($cur$0$sum53$pn)|0);
    $prior$0 = (($45) + ($$sum27$pn)|0);
    L50: do {
     if ($brmerge) {
      $101 = (($width$0) + -1)|0;
      $102 = Math_imul($101, $3)|0;
      switch ($filter$0|0) {
      case 2:  {
       $118 = ($102|0)>(0);
       if ($118) {
        $$sum23 = (($100) + ($$sum41$pn))|0;
        $119 = (($width$0) + -1)|0;
        $120 = Math_imul($3, $119)|0;
        $k$2224 = 0;
        while(1) {
         $$sum68 = (($k$2224) + ($125))|0;
         $136 = (($$01229) + ($$sum68)|0);
         $137 = HEAP8[$136>>0]|0;
         $138 = $137&255;
         $prior$0$sum = (($k$2224) + ($$sum27$pn))|0;
         $139 = (($45) + ($prior$0$sum)|0);
         $140 = HEAP8[$139>>0]|0;
         $141 = $140&255;
         $142 = (($141) + ($138))|0;
         $143 = $142&255;
         $cur$0$sum43 = (($$sum23) + ($k$2224))|0;
         $144 = (($45) + ($cur$0$sum43)|0);
         HEAP8[$144>>0] = $143;
         $145 = (($k$2224) + 1)|0;
         $exitcond288 = ($145|0)==($120|0);
         if ($exitcond288) {
          break;
         } else {
          $k$2224 = $145;
         }
        }
       }
       break;
      }
      case 1:  {
       $121 = ($102|0)>(0);
       if ($121) {
        $122 = (($$sum41$pn) - ($filter_bytes$0))|0;
        $$sum24 = (($122) + ($100))|0;
        $$sum25 = (($100) + ($$sum41$pn))|0;
        $123 = (($width$0) + -1)|0;
        $124 = Math_imul($3, $123)|0;
        $k$1226 = 0;
        while(1) {
         $$sum69 = (($k$1226) + ($125))|0;
         $126 = (($$01229) + ($$sum69)|0);
         $127 = HEAP8[$126>>0]|0;
         $128 = $127&255;
         $cur$0$sum42 = (($$sum24) + ($k$1226))|0;
         $129 = (($45) + ($cur$0$sum42)|0);
         $130 = HEAP8[$129>>0]|0;
         $131 = $130&255;
         $132 = (($131) + ($128))|0;
         $133 = $132&255;
         $cur$0$sum = (($$sum25) + ($k$1226))|0;
         $134 = (($45) + ($cur$0$sum)|0);
         HEAP8[$134>>0] = $133;
         $135 = (($k$1226) + 1)|0;
         $exitcond289 = ($135|0)==($124|0);
         if ($exitcond289) {
          break;
         } else {
          $k$1226 = $135;
         }
        }
       }
       break;
      }
      case 3:  {
       $114 = ($102|0)>(0);
       if ($114) {
        $115 = (($$sum41$pn) - ($filter_bytes$0))|0;
        $$sum21 = (($115) + ($100))|0;
        $$sum22 = (($100) + ($$sum41$pn))|0;
        $116 = (($width$0) + -1)|0;
        $117 = Math_imul($3, $116)|0;
        $k$3222 = 0;
        while(1) {
         $$sum67 = (($k$3222) + ($125))|0;
         $146 = (($$01229) + ($$sum67)|0);
         $147 = HEAP8[$146>>0]|0;
         $148 = $147&255;
         $prior$0$sum28 = (($k$3222) + ($$sum27$pn))|0;
         $149 = (($45) + ($prior$0$sum28)|0);
         $150 = HEAP8[$149>>0]|0;
         $151 = $150&255;
         $cur$0$sum45 = (($$sum21) + ($k$3222))|0;
         $152 = (($45) + ($cur$0$sum45)|0);
         $153 = HEAP8[$152>>0]|0;
         $154 = $153&255;
         $155 = (($154) + ($151))|0;
         $156 = $155 >>> 1;
         $157 = (($156) + ($148))|0;
         $158 = $157&255;
         $cur$0$sum44 = (($$sum22) + ($k$3222))|0;
         $159 = (($45) + ($cur$0$sum44)|0);
         HEAP8[$159>>0] = $158;
         $160 = (($k$3222) + 1)|0;
         $exitcond287 = ($160|0)==($117|0);
         if ($exitcond287) {
          break;
         } else {
          $k$3222 = $160;
         }
        }
       }
       break;
      }
      case 0:  {
       _memcpy(($cur$1|0),($$1|0),($102|0))|0;
       break;
      }
      case 4:  {
       $111 = ($102|0)>(0);
       if ($111) {
        $$sum19 = (($100) + ($$sum41$pn))|0;
        $$sum20 = (($100) + ($$sum41$pn))|0;
        $112 = (($width$0) + -1)|0;
        $113 = Math_imul($3, $112)|0;
        $k$4220 = 0;
        while(1) {
         $$sum66 = (($k$4220) + ($125))|0;
         $161 = (($$01229) + ($$sum66)|0);
         $162 = HEAP8[$161>>0]|0;
         $163 = $162&255;
         $164 = (($k$4220) - ($filter_bytes$0))|0;
         $cur$0$sum47 = (($$sum19) + ($164))|0;
         $165 = (($45) + ($cur$0$sum47)|0);
         $166 = HEAP8[$165>>0]|0;
         $167 = $166&255;
         $prior$0$sum30 = (($k$4220) + ($$sum27$pn))|0;
         $168 = (($45) + ($prior$0$sum30)|0);
         $169 = HEAP8[$168>>0]|0;
         $170 = $169&255;
         $prior$0$sum29 = (($164) + ($$sum27$pn))|0;
         $171 = (($45) + ($prior$0$sum29)|0);
         $172 = HEAP8[$171>>0]|0;
         $173 = $172&255;
         $174 = (_stbi__paeth($167,$170,$173)|0);
         $175 = (($174) + ($163))|0;
         $176 = $175&255;
         $cur$0$sum46 = (($$sum20) + ($k$4220))|0;
         $177 = (($45) + ($cur$0$sum46)|0);
         HEAP8[$177>>0] = $176;
         $178 = (($k$4220) + 1)|0;
         $exitcond286 = ($178|0)==($113|0);
         if ($exitcond286) {
          break;
         } else {
          $k$4220 = $178;
         }
        }
       }
       break;
      }
      case 6:  {
       $103 = ($102|0)>(0);
       if ($103) {
        $104 = (($$sum41$pn) - ($filter_bytes$0))|0;
        $$sum15 = (($104) + ($100))|0;
        $$sum16 = (($100) + ($$sum41$pn))|0;
        $105 = (($width$0) + -1)|0;
        $106 = Math_imul($3, $105)|0;
        $k$6216 = 0;
        while(1) {
         $$sum64 = (($k$6216) + ($125))|0;
         $190 = (($$01229) + ($$sum64)|0);
         $191 = HEAP8[$190>>0]|0;
         $192 = $191&255;
         $cur$0$sum51 = (($$sum15) + ($k$6216))|0;
         $193 = (($45) + ($cur$0$sum51)|0);
         $194 = HEAP8[$193>>0]|0;
         $195 = $194&255;
         $196 = (_stbi__paeth($195,0,0)|0);
         $197 = (($196) + ($192))|0;
         $198 = $197&255;
         $cur$0$sum50 = (($$sum16) + ($k$6216))|0;
         $199 = (($45) + ($cur$0$sum50)|0);
         HEAP8[$199>>0] = $198;
         $200 = (($k$6216) + 1)|0;
         $exitcond284 = ($200|0)==($106|0);
         if ($exitcond284) {
          break;
         } else {
          $k$6216 = $200;
         }
        }
       }
       break;
      }
      case 5:  {
       $107 = ($102|0)>(0);
       if ($107) {
        $108 = (($$sum41$pn) - ($filter_bytes$0))|0;
        $$sum17 = (($108) + ($100))|0;
        $$sum18 = (($100) + ($$sum41$pn))|0;
        $109 = (($width$0) + -1)|0;
        $110 = Math_imul($3, $109)|0;
        $k$5218 = 0;
        while(1) {
         $$sum65 = (($k$5218) + ($125))|0;
         $179 = (($$01229) + ($$sum65)|0);
         $180 = HEAP8[$179>>0]|0;
         $181 = $180&255;
         $cur$0$sum49 = (($$sum17) + ($k$5218))|0;
         $182 = (($45) + ($cur$0$sum49)|0);
         $183 = HEAP8[$182>>0]|0;
         $184 = $183&255;
         $185 = $184 >>> 1;
         $186 = (($185) + ($181))|0;
         $187 = $186&255;
         $cur$0$sum48 = (($$sum18) + ($k$5218))|0;
         $188 = (($45) + ($cur$0$sum48)|0);
         HEAP8[$188>>0] = $187;
         $189 = (($k$5218) + 1)|0;
         $exitcond285 = ($189|0)==($110|0);
         if ($exitcond285) {
          break;
         } else {
          $k$5218 = $189;
         }
        }
       }
       break;
      }
      default: {
      }
      }
      $$sum63 = (($125) + ($102))|0;
      $201 = (($$01229) + ($$sum63)|0);
      $$9 = $201;
     } else {
      if (!($6)) {
       label = 59;
       break L20;
      }
      switch ($filter$0|0) {
      case 6:  {
       if ($42) {
        $$9 = $$1;
        break L50;
       } else {
        $$8162 = $$1;$cur$8161 = $cur$1;$i$6163 = $i$6160;
       }
       while(1) {
        if ($43) {
         $k$13157 = 0;
         while(1) {
          $300 = (($$8162) + ($k$13157)|0);
          $301 = HEAP8[$300>>0]|0;
          $302 = $301&255;
          $303 = (($k$13157) - ($out_n))|0;
          $304 = (($cur$8161) + ($303)|0);
          $305 = HEAP8[$304>>0]|0;
          $306 = $305&255;
          $307 = (_stbi__paeth($306,0,0)|0);
          $308 = (($307) + ($302))|0;
          $309 = $308&255;
          $310 = (($cur$8161) + ($k$13157)|0);
          HEAP8[$310>>0] = $309;
          $311 = (($k$13157) + 1)|0;
          $exitcond269 = ($311|0)==($3|0);
          if ($exitcond269) {
           break;
          } else {
           $k$13157 = $311;
          }
         }
        }
        $312 = (($cur$8161) + ($3)|0);
        HEAP8[$312>>0] = -1;
        $313 = (($$8162) + ($3)|0);
        $314 = (($cur$8161) + ($out_n)|0);
        $i$6 = (($i$6163) + -1)|0;
        $315 = ($i$6|0)==(0);
        if ($315) {
         break;
        } else {
         $$8162 = $313;$cur$8161 = $314;$i$6163 = $i$6;
        }
       }
       $$sum290 = (($125) + ($44))|0;
       $scevgep270 = (($$01229) + ($$sum290)|0);
       $$9 = $scevgep270;
       break L50;
       break;
      }
      case 5:  {
       if ($40) {
        $$9 = $$1;
        break L50;
       } else {
        $$7170 = $$1;$cur$7169 = $cur$1;$i$5171 = $i$5168;
       }
       while(1) {
        if ($41) {
         $k$12165 = 0;
         while(1) {
          $284 = (($$7170) + ($k$12165)|0);
          $285 = HEAP8[$284>>0]|0;
          $286 = $285&255;
          $287 = (($k$12165) - ($out_n))|0;
          $288 = (($cur$7169) + ($287)|0);
          $289 = HEAP8[$288>>0]|0;
          $290 = $289&255;
          $291 = $290 >>> 1;
          $292 = (($291) + ($286))|0;
          $293 = $292&255;
          $294 = (($cur$7169) + ($k$12165)|0);
          HEAP8[$294>>0] = $293;
          $295 = (($k$12165) + 1)|0;
          $exitcond271 = ($295|0)==($3|0);
          if ($exitcond271) {
           break;
          } else {
           $k$12165 = $295;
          }
         }
        }
        $296 = (($cur$7169) + ($3)|0);
        HEAP8[$296>>0] = -1;
        $297 = (($$7170) + ($3)|0);
        $298 = (($cur$7169) + ($out_n)|0);
        $i$5 = (($i$5171) + -1)|0;
        $299 = ($i$5|0)==(0);
        if ($299) {
         break;
        } else {
         $$7170 = $297;$cur$7169 = $298;$i$5171 = $i$5;
        }
       }
       $$sum299 = (($125) + ($44))|0;
       $scevgep272 = (($$01229) + ($$sum299)|0);
       $$9 = $scevgep272;
       break L50;
       break;
      }
      case 4:  {
       if ($38) {
        $$9 = $$1;
        break L50;
       } else {
        $$6179 = $$1;$cur$6177 = $cur$1;$i$4180 = $i$4176;$prior$5178 = $prior$0;
       }
       while(1) {
        if ($39) {
         $k$11173 = 0;
         while(1) {
          $261 = (($$6179) + ($k$11173)|0);
          $262 = HEAP8[$261>>0]|0;
          $263 = $262&255;
          $264 = (($k$11173) - ($out_n))|0;
          $265 = (($cur$6177) + ($264)|0);
          $266 = HEAP8[$265>>0]|0;
          $267 = $266&255;
          $268 = (($prior$5178) + ($k$11173)|0);
          $269 = HEAP8[$268>>0]|0;
          $270 = $269&255;
          $271 = (($prior$5178) + ($264)|0);
          $272 = HEAP8[$271>>0]|0;
          $273 = $272&255;
          $274 = (_stbi__paeth($267,$270,$273)|0);
          $275 = (($274) + ($263))|0;
          $276 = $275&255;
          $277 = (($cur$6177) + ($k$11173)|0);
          HEAP8[$277>>0] = $276;
          $278 = (($k$11173) + 1)|0;
          $exitcond273 = ($278|0)==($3|0);
          if ($exitcond273) {
           break;
          } else {
           $k$11173 = $278;
          }
         }
        }
        $279 = (($cur$6177) + ($3)|0);
        HEAP8[$279>>0] = -1;
        $280 = (($$6179) + ($3)|0);
        $281 = (($cur$6177) + ($out_n)|0);
        $282 = (($prior$5178) + ($out_n)|0);
        $i$4 = (($i$4180) + -1)|0;
        $283 = ($i$4|0)==(0);
        if ($283) {
         break;
        } else {
         $$6179 = $280;$cur$6177 = $281;$i$4180 = $i$4;$prior$5178 = $282;
        }
       }
       $$sum300 = (($125) + ($44))|0;
       $scevgep274 = (($$01229) + ($$sum300)|0);
       $$9 = $scevgep274;
       break L50;
       break;
      }
      case 1:  {
       if ($32) {
        $$9 = $$1;
        break L50;
       } else {
        $$3205 = $$1;$cur$3204 = $cur$1;$i$1206 = $i$1203;
       }
       while(1) {
        if ($33) {
         $k$8200 = 0;
         while(1) {
          $210 = (($$3205) + ($k$8200)|0);
          $211 = HEAP8[$210>>0]|0;
          $212 = $211&255;
          $213 = (($k$8200) - ($out_n))|0;
          $214 = (($cur$3204) + ($213)|0);
          $215 = HEAP8[$214>>0]|0;
          $216 = $215&255;
          $217 = (($216) + ($212))|0;
          $218 = $217&255;
          $219 = (($cur$3204) + ($k$8200)|0);
          HEAP8[$219>>0] = $218;
          $220 = (($k$8200) + 1)|0;
          $exitcond279 = ($220|0)==($3|0);
          if ($exitcond279) {
           break;
          } else {
           $k$8200 = $220;
          }
         }
        }
        $221 = (($cur$3204) + ($3)|0);
        HEAP8[$221>>0] = -1;
        $222 = (($$3205) + ($3)|0);
        $223 = (($cur$3204) + ($out_n)|0);
        $i$1 = (($i$1206) + -1)|0;
        $224 = ($i$1|0)==(0);
        if ($224) {
         break;
        } else {
         $$3205 = $222;$cur$3204 = $223;$i$1206 = $i$1;
        }
       }
       $$sum303 = (($125) + ($44))|0;
       $scevgep280 = (($$01229) + ($$sum303)|0);
       $$9 = $scevgep280;
       break L50;
       break;
      }
      case 2:  {
       if ($34) {
        $$9 = $$1;
        break L50;
       } else {
        $$4197 = $$1;$cur$4195 = $cur$1;$i$2198 = $i$2194;$prior$3196 = $prior$0;
       }
       while(1) {
        if ($35) {
         $k$9191 = 0;
         while(1) {
          $225 = (($$4197) + ($k$9191)|0);
          $226 = HEAP8[$225>>0]|0;
          $227 = $226&255;
          $228 = (($prior$3196) + ($k$9191)|0);
          $229 = HEAP8[$228>>0]|0;
          $230 = $229&255;
          $231 = (($230) + ($227))|0;
          $232 = $231&255;
          $233 = (($cur$4195) + ($k$9191)|0);
          HEAP8[$233>>0] = $232;
          $234 = (($k$9191) + 1)|0;
          $exitcond277 = ($234|0)==($3|0);
          if ($exitcond277) {
           break;
          } else {
           $k$9191 = $234;
          }
         }
        }
        $235 = (($cur$4195) + ($3)|0);
        HEAP8[$235>>0] = -1;
        $236 = (($$4197) + ($3)|0);
        $237 = (($cur$4195) + ($out_n)|0);
        $238 = (($prior$3196) + ($out_n)|0);
        $i$2 = (($i$2198) + -1)|0;
        $239 = ($i$2|0)==(0);
        if ($239) {
         break;
        } else {
         $$4197 = $236;$cur$4195 = $237;$i$2198 = $i$2;$prior$3196 = $238;
        }
       }
       $$sum302 = (($125) + ($44))|0;
       $scevgep278 = (($$01229) + ($$sum302)|0);
       $$9 = $scevgep278;
       break L50;
       break;
      }
      case 0:  {
       if ($30) {
        $$9 = $$1;
        break L50;
       } else {
        $$2213 = $$1;$cur$2212 = $cur$1;$i$0214 = $i$0211;
       }
       while(1) {
        if ($31) {
         $k$7208 = 0;
         while(1) {
          $202 = (($$2213) + ($k$7208)|0);
          $203 = HEAP8[$202>>0]|0;
          $204 = (($cur$2212) + ($k$7208)|0);
          HEAP8[$204>>0] = $203;
          $205 = (($k$7208) + 1)|0;
          $exitcond281 = ($205|0)==($3|0);
          if ($exitcond281) {
           break;
          } else {
           $k$7208 = $205;
          }
         }
        }
        $206 = (($cur$2212) + ($3)|0);
        HEAP8[$206>>0] = -1;
        $207 = (($$2213) + ($3)|0);
        $208 = (($cur$2212) + ($out_n)|0);
        $i$0 = (($i$0214) + -1)|0;
        $209 = ($i$0|0)==(0);
        if ($209) {
         break;
        } else {
         $$2213 = $207;$cur$2212 = $208;$i$0214 = $i$0;
        }
       }
       $$sum304 = (($125) + ($44))|0;
       $scevgep283 = (($$01229) + ($$sum304)|0);
       $$9 = $scevgep283;
       break L50;
       break;
      }
      case 3:  {
       if ($36) {
        $$9 = $$1;
        break L50;
       } else {
        $$5188 = $$1;$cur$5186 = $cur$1;$i$3189 = $i$3185;$prior$4187 = $prior$0;
       }
       while(1) {
        if ($37) {
         $k$10182 = 0;
         while(1) {
          $240 = (($$5188) + ($k$10182)|0);
          $241 = HEAP8[$240>>0]|0;
          $242 = $241&255;
          $243 = (($prior$4187) + ($k$10182)|0);
          $244 = HEAP8[$243>>0]|0;
          $245 = $244&255;
          $246 = (($k$10182) - ($out_n))|0;
          $247 = (($cur$5186) + ($246)|0);
          $248 = HEAP8[$247>>0]|0;
          $249 = $248&255;
          $250 = (($249) + ($245))|0;
          $251 = $250 >>> 1;
          $252 = (($251) + ($242))|0;
          $253 = $252&255;
          $254 = (($cur$5186) + ($k$10182)|0);
          HEAP8[$254>>0] = $253;
          $255 = (($k$10182) + 1)|0;
          $exitcond275 = ($255|0)==($3|0);
          if ($exitcond275) {
           break;
          } else {
           $k$10182 = $255;
          }
         }
        }
        $256 = (($cur$5186) + ($3)|0);
        HEAP8[$256>>0] = -1;
        $257 = (($$5188) + ($3)|0);
        $258 = (($cur$5186) + ($out_n)|0);
        $259 = (($prior$4187) + ($out_n)|0);
        $i$3 = (($i$3189) + -1)|0;
        $260 = ($i$3|0)==(0);
        if ($260) {
         break;
        } else {
         $$5188 = $257;$cur$5186 = $258;$i$3189 = $i$3;$prior$4187 = $259;
        }
       }
       $$sum301 = (($125) + ($44))|0;
       $scevgep276 = (($$01229) + ($$sum301)|0);
       $$9 = $scevgep276;
       break L50;
       break;
      }
      default: {
       $$9 = $$1;
       break L50;
      }
      }
     }
    } while(0);
    $316 = (($j$0228) + 1)|0;
    $317 = ($316>>>0)<($y>>>0);
    if ($317) {
     $$01229 = $$9;$j$0228 = $316;
    } else {
     break L18;
    }
   }
   if ((label|0) == 14) {
    _stbi__err(25424);
    $$0 = 0;
    return ($$0|0);
   }
   else if ((label|0) == 17) {
    ___assert_fail((25440|0),(25096|0),3996,(25368|0));
    // unreachable;
   }
   else if ((label|0) == 59) {
    ___assert_fail((25472|0),(25096|0),4049,(25368|0));
    // unreachable;
   }
  }
 } while(0);
 $318 = ($depth|0)>(7);
 $319 = ($y|0)==(0);
 $or$cond311 = $318 | $319;
 if ($or$cond311) {
  $$0 = 1;
  return ($$0|0);
 }
 $$sum = (($1) - ($15))|0;
 $320 = ($color|0)==(0);
 $321 = (24976 + ($depth)|0);
 $i3$0148 = (($x) + -1)|0;
 $322 = ($i3$0148|0)>(-1);
 $i3$1145 = (($x) + -1)|0;
 $323 = ($i3$1145|0)>(-1);
 $324 = ($12|0)>(1);
 $325 = ($12|0)>(3);
 $326 = ($12|0)>(7);
 $327 = Math_imul($3, $x)|0;
 $328 = (($327) + -8)|0;
 $329 = $328 >>> 3;
 $330 = Math_imul($x, $out_n)|0;
 $331 = (($329) + ($330))|0;
 $332 = (($331) + 1)|0;
 $333 = Math_imul($3, $depth)|0;
 $334 = Math_imul($333, $x)|0;
 $335 = (($334) + 7)|0;
 $336 = $335 >>> 3;
 $337 = (($332) - ($336))|0;
 $338 = (($327) + -8)|0;
 $339 = $329 << 3;
 $340 = (($338) - ($339))|0;
 $341 = (($339) + 8)|0;
 $342 = Math_imul($3, $x)|0;
 $343 = (($342) + -4)|0;
 $344 = $343 >>> 2;
 $345 = Math_imul($x, $out_n)|0;
 $346 = (($344) + ($345))|0;
 $347 = (($346) + 1)|0;
 $348 = Math_imul($3, $depth)|0;
 $349 = Math_imul($348, $x)|0;
 $350 = (($349) + 7)|0;
 $351 = $350 >>> 3;
 $352 = (($347) - ($351))|0;
 $353 = (($342) + -4)|0;
 $354 = $344 << 2;
 $355 = (($353) - ($354))|0;
 $356 = (($354) + 4)|0;
 $357 = Math_imul($3, $x)|0;
 $358 = (($357) + -2)|0;
 $359 = $358 >>> 1;
 $360 = Math_imul($x, $out_n)|0;
 $361 = (($359) + ($360))|0;
 $362 = (($361) + 1)|0;
 $363 = Math_imul($3, $depth)|0;
 $364 = Math_imul($363, $x)|0;
 $365 = (($364) + 7)|0;
 $366 = $365 >>> 3;
 $367 = (($362) - ($366))|0;
 $368 = (($357) + -2)|0;
 $369 = $359 << 1;
 $370 = (($368) - ($369))|0;
 $371 = (($369) + 2)|0;
 $indvars$iv = $337;$indvars$iv254 = $341;$indvars$iv257 = $352;$indvars$iv260 = $356;$indvars$iv263 = $367;$indvars$iv266 = $371;$j$1151 = 0;
 L148: while(1) {
  $372 = HEAP32[$10>>2]|0;
  $373 = Math_imul($j$1151, $1)|0;
  $374 = (($372) + ($373)|0);
  $$sum2 = (($$sum) + ($373))|0;
  $375 = (($372) + ($$sum2)|0);
  if ($320) {
   $376 = HEAP8[$321>>0]|0;
   $377 = $376&255;
   $382 = $377;
  } else {
   $382 = 1;
  }
  if ((($depth|0) == 1)) {
   if ($326) {
    $scevgep = (($372) + ($indvars$iv)|0);
    $cur1$4125 = $374;$in$2126 = $375;$k$16124 = $12;
    while(1) {
     $452 = HEAP8[$in$2126>>0]|0;
     $453 = $452&255;
     $454 = $453 >>> 7;
     $455 = (0 - ($454))|0;
     $456 = $382 & $455;
     $457 = $456&255;
     $458 = ((($cur1$4125)) + 1|0);
     HEAP8[$cur1$4125>>0] = $457;
     $459 = HEAP8[$in$2126>>0]|0;
     $460 = $459&255;
     $461 = $460 >>> 6;
     $462 = $461 & 1;
     $463 = (0 - ($462))|0;
     $464 = $382 & $463;
     $465 = $464&255;
     $466 = ((($cur1$4125)) + 2|0);
     HEAP8[$458>>0] = $465;
     $467 = HEAP8[$in$2126>>0]|0;
     $468 = $467&255;
     $469 = $468 >>> 5;
     $470 = $469 & 1;
     $471 = (0 - ($470))|0;
     $472 = $382 & $471;
     $473 = $472&255;
     $474 = ((($cur1$4125)) + 3|0);
     HEAP8[$466>>0] = $473;
     $475 = HEAP8[$in$2126>>0]|0;
     $476 = $475&255;
     $477 = $476 >>> 4;
     $478 = $477 & 1;
     $479 = (0 - ($478))|0;
     $480 = $382 & $479;
     $481 = $480&255;
     $482 = ((($cur1$4125)) + 4|0);
     HEAP8[$474>>0] = $481;
     $483 = HEAP8[$in$2126>>0]|0;
     $484 = $483&255;
     $485 = $484 >>> 3;
     $486 = $485 & 1;
     $487 = (0 - ($486))|0;
     $488 = $382 & $487;
     $489 = $488&255;
     $490 = ((($cur1$4125)) + 5|0);
     HEAP8[$482>>0] = $489;
     $491 = HEAP8[$in$2126>>0]|0;
     $492 = $491&255;
     $493 = $492 >>> 2;
     $494 = $493 & 1;
     $495 = (0 - ($494))|0;
     $496 = $382 & $495;
     $497 = $496&255;
     $498 = ((($cur1$4125)) + 6|0);
     HEAP8[$490>>0] = $497;
     $499 = HEAP8[$in$2126>>0]|0;
     $500 = $499&255;
     $501 = $500 >>> 1;
     $502 = $501 & 1;
     $503 = (0 - ($502))|0;
     $504 = $382 & $503;
     $505 = $504&255;
     $506 = ((($cur1$4125)) + 7|0);
     HEAP8[$498>>0] = $505;
     $507 = HEAP8[$in$2126>>0]|0;
     $508 = $507&255;
     $509 = $508 & 1;
     $510 = (0 - ($509))|0;
     $511 = $382 & $510;
     $512 = $511&255;
     $513 = ((($cur1$4125)) + 8|0);
     HEAP8[$506>>0] = $512;
     $514 = (($k$16124) + -8)|0;
     $515 = ((($in$2126)) + 1|0);
     $516 = ($514|0)>(7);
     if ($516) {
      $cur1$4125 = $513;$in$2126 = $515;$k$16124 = $514;
     } else {
      break;
     }
    }
    $scevgep256 = (($372) + ($indvars$iv254)|0);
    $525 = $indvars$iv254;$cur1$4$lcssa = $scevgep256;$in$2$lcssa = $scevgep;$k$16$lcssa = $340;
   } else {
    $525 = $373;$cur1$4$lcssa = $374;$in$2$lcssa = $375;$k$16$lcssa = $12;
   }
   $517 = ($k$16$lcssa|0)>(0);
   if ($517) {
    $518 = HEAP8[$in$2$lcssa>>0]|0;
    $519 = $518&255;
    $520 = $519 >>> 7;
    $521 = (0 - ($520))|0;
    $522 = $382 & $521;
    $523 = $522&255;
    HEAP8[$cur1$4$lcssa>>0] = $523;
    $524 = ($k$16$lcssa|0)>(1);
    if ($524) {
     $$sum291 = (($525) + 1)|0;
     $526 = (($372) + ($$sum291)|0);
     $527 = HEAP8[$in$2$lcssa>>0]|0;
     $528 = $527&255;
     $529 = $528 >>> 6;
     $530 = $529 & 1;
     $531 = (0 - ($530))|0;
     $532 = $382 & $531;
     $533 = $532&255;
     HEAP8[$526>>0] = $533;
     $534 = ($k$16$lcssa|0)>(2);
     if ($534) {
      $$sum292 = (($525) + 2)|0;
      $535 = (($372) + ($$sum292)|0);
      $536 = HEAP8[$in$2$lcssa>>0]|0;
      $537 = $536&255;
      $538 = $537 >>> 5;
      $539 = $538 & 1;
      $540 = (0 - ($539))|0;
      $541 = $382 & $540;
      $542 = $541&255;
      HEAP8[$535>>0] = $542;
      $543 = ($k$16$lcssa|0)>(3);
      if ($543) {
       $$sum293 = (($525) + 3)|0;
       $544 = (($372) + ($$sum293)|0);
       $545 = HEAP8[$in$2$lcssa>>0]|0;
       $546 = $545&255;
       $547 = $546 >>> 4;
       $548 = $547 & 1;
       $549 = (0 - ($548))|0;
       $550 = $382 & $549;
       $551 = $550&255;
       HEAP8[$544>>0] = $551;
       $552 = ($k$16$lcssa|0)>(4);
       if ($552) {
        $$sum294 = (($525) + 4)|0;
        $553 = (($372) + ($$sum294)|0);
        $554 = HEAP8[$in$2$lcssa>>0]|0;
        $555 = $554&255;
        $556 = $555 >>> 3;
        $557 = $556 & 1;
        $558 = (0 - ($557))|0;
        $559 = $382 & $558;
        $560 = $559&255;
        HEAP8[$553>>0] = $560;
        $561 = ($k$16$lcssa|0)>(5);
        if ($561) {
         $$sum295 = (($525) + 5)|0;
         $562 = (($372) + ($$sum295)|0);
         $563 = HEAP8[$in$2$lcssa>>0]|0;
         $564 = $563&255;
         $565 = $564 >>> 2;
         $566 = $565 & 1;
         $567 = (0 - ($566))|0;
         $568 = $382 & $567;
         $569 = $568&255;
         HEAP8[$562>>0] = $569;
         $570 = ($k$16$lcssa|0)>(6);
         if ($570) {
          $$sum296 = (($525) + 6)|0;
          $571 = (($372) + ($$sum296)|0);
          $572 = HEAP8[$in$2$lcssa>>0]|0;
          $573 = $572&255;
          $574 = $573 >>> 1;
          $575 = $574 & 1;
          $576 = (0 - ($575))|0;
          $577 = $382 & $576;
          $578 = $577&255;
          HEAP8[$571>>0] = $578;
         }
        }
       }
      }
     }
    }
   }
  } else if ((($depth|0) == 4)) {
   if ($324) {
    $scevgep265 = (($372) + ($indvars$iv263)|0);
    $cur1$0138 = $374;$in$0139 = $375;$k$14137 = $12;
    while(1) {
     $378 = HEAP8[$in$0139>>0]|0;
     $379 = $378&255;
     $380 = $379 >>> 4;
     $381 = Math_imul($380, $382)|0;
     $383 = $381&255;
     $384 = ((($cur1$0138)) + 1|0);
     HEAP8[$cur1$0138>>0] = $383;
     $385 = HEAP8[$in$0139>>0]|0;
     $386 = $385&255;
     $387 = $386 & 15;
     $388 = Math_imul($387, $382)|0;
     $389 = $388&255;
     $390 = ((($cur1$0138)) + 2|0);
     HEAP8[$384>>0] = $389;
     $391 = (($k$14137) + -2)|0;
     $392 = ((($in$0139)) + 1|0);
     $393 = ($391|0)>(1);
     if ($393) {
      $cur1$0138 = $390;$in$0139 = $392;$k$14137 = $391;
     } else {
      break;
     }
    }
    $scevgep268 = (($372) + ($indvars$iv266)|0);
    $cur1$0$lcssa = $scevgep268;$in$0$lcssa = $scevgep265;$k$14$lcssa = $370;
   } else {
    $cur1$0$lcssa = $374;$in$0$lcssa = $375;$k$14$lcssa = $12;
   }
   $394 = ($k$14$lcssa|0)>(0);
   if ($394) {
    $395 = HEAP8[$in$0$lcssa>>0]|0;
    $396 = $395&255;
    $397 = $396 >>> 4;
    $398 = Math_imul($397, $382)|0;
    $399 = $398&255;
    HEAP8[$cur1$0$lcssa>>0] = $399;
   }
  } else if ((($depth|0) == 2)) {
   if ($325) {
    $scevgep259 = (($372) + ($indvars$iv257)|0);
    $cur1$1130 = $374;$in$1131 = $375;$k$15129 = $12;
    while(1) {
     $400 = HEAP8[$in$1131>>0]|0;
     $401 = $400&255;
     $402 = $401 >>> 6;
     $403 = Math_imul($402, $382)|0;
     $404 = $403&255;
     $405 = ((($cur1$1130)) + 1|0);
     HEAP8[$cur1$1130>>0] = $404;
     $406 = HEAP8[$in$1131>>0]|0;
     $407 = $406&255;
     $408 = $407 >>> 4;
     $409 = $408 & 3;
     $410 = Math_imul($409, $382)|0;
     $411 = $410&255;
     $412 = ((($cur1$1130)) + 2|0);
     HEAP8[$405>>0] = $411;
     $413 = HEAP8[$in$1131>>0]|0;
     $414 = $413&255;
     $415 = $414 >>> 2;
     $416 = $415 & 3;
     $417 = Math_imul($416, $382)|0;
     $418 = $417&255;
     $419 = ((($cur1$1130)) + 3|0);
     HEAP8[$412>>0] = $418;
     $420 = HEAP8[$in$1131>>0]|0;
     $421 = $420&255;
     $422 = $421 & 3;
     $423 = Math_imul($422, $382)|0;
     $424 = $423&255;
     $425 = ((($cur1$1130)) + 4|0);
     HEAP8[$419>>0] = $424;
     $426 = (($k$15129) + -4)|0;
     $427 = ((($in$1131)) + 1|0);
     $428 = ($426|0)>(3);
     if ($428) {
      $cur1$1130 = $425;$in$1131 = $427;$k$15129 = $426;
     } else {
      break;
     }
    }
    $scevgep262 = (($372) + ($indvars$iv260)|0);
    $436 = $indvars$iv260;$cur1$1$lcssa = $scevgep262;$in$1$lcssa = $scevgep259;$k$15$lcssa = $355;
   } else {
    $436 = $373;$cur1$1$lcssa = $374;$in$1$lcssa = $375;$k$15$lcssa = $12;
   }
   $429 = ($k$15$lcssa|0)>(0);
   if ($429) {
    $430 = HEAP8[$in$1$lcssa>>0]|0;
    $431 = $430&255;
    $432 = $431 >>> 6;
    $433 = Math_imul($432, $382)|0;
    $434 = $433&255;
    HEAP8[$cur1$1$lcssa>>0] = $434;
    $435 = ($k$15$lcssa|0)>(1);
    if ($435) {
     $$sum297 = (($436) + 1)|0;
     $437 = (($372) + ($$sum297)|0);
     $438 = HEAP8[$in$1$lcssa>>0]|0;
     $439 = $438&255;
     $440 = $439 >>> 4;
     $441 = $440 & 3;
     $442 = Math_imul($441, $382)|0;
     $443 = $442&255;
     HEAP8[$437>>0] = $443;
     $444 = ($k$15$lcssa|0)>(2);
     if ($444) {
      $$sum298 = (($436) + 2)|0;
      $445 = (($372) + ($$sum298)|0);
      $446 = HEAP8[$in$1$lcssa>>0]|0;
      $447 = $446&255;
      $448 = $447 >>> 2;
      $449 = $448 & 3;
      $450 = Math_imul($449, $382)|0;
      $451 = $450&255;
      HEAP8[$445>>0] = $451;
     }
    }
   }
  }
  L187: do {
   if (!($4)) {
    $579 = HEAP32[$10>>2]|0;
    if ((($3|0) == 1)) {
     if ($322) {
      $i3$0149 = $i3$0148;
     } else {
      break;
     }
     while(1) {
      $582 = $i3$0149 << 1;
      $583 = $582 | 1;
      $$sum10 = (($583) + ($373))|0;
      $584 = (($579) + ($$sum10)|0);
      HEAP8[$584>>0] = -1;
      $$sum11 = (($i3$0149) + ($373))|0;
      $585 = (($579) + ($$sum11)|0);
      $586 = HEAP8[$585>>0]|0;
      $$sum12 = (($582) + ($373))|0;
      $587 = (($579) + ($$sum12)|0);
      HEAP8[$587>>0] = $586;
      $i3$0 = (($i3$0149) + -1)|0;
      $588 = ($i3$0|0)>(-1);
      if ($588) {
       $i3$0149 = $i3$0;
      } else {
       break L187;
      }
     }
    } else if (!((($3|0) == 3))) {
     label = 134;
     break L148;
    }
    if ($323) {
     $580 = (($373) + 2)|0;
     $581 = (($373) + 1)|0;
     $i3$1146 = $i3$1145;
     while(1) {
      $589 = $i3$1146 << 2;
      $590 = $589 | 3;
      $$sum3 = (($590) + ($373))|0;
      $591 = (($579) + ($$sum3)|0);
      HEAP8[$591>>0] = -1;
      $592 = ($i3$1146*3)|0;
      $$sum4 = (($580) + ($592))|0;
      $593 = (($579) + ($$sum4)|0);
      $594 = HEAP8[$593>>0]|0;
      $595 = $589 | 2;
      $$sum5 = (($595) + ($373))|0;
      $596 = (($579) + ($$sum5)|0);
      HEAP8[$596>>0] = $594;
      $$sum6 = (($581) + ($592))|0;
      $597 = (($579) + ($$sum6)|0);
      $598 = HEAP8[$597>>0]|0;
      $599 = $589 | 1;
      $$sum7 = (($599) + ($373))|0;
      $600 = (($579) + ($$sum7)|0);
      HEAP8[$600>>0] = $598;
      $$sum8 = (($592) + ($373))|0;
      $601 = (($579) + ($$sum8)|0);
      $602 = HEAP8[$601>>0]|0;
      $$sum9 = (($589) + ($373))|0;
      $603 = (($579) + ($$sum9)|0);
      HEAP8[$603>>0] = $602;
      $i3$1 = (($i3$1146) + -1)|0;
      $604 = ($i3$1|0)>(-1);
      if ($604) {
       $i3$1146 = $i3$1;
      } else {
       break;
      }
     }
    }
   }
  } while(0);
  $605 = (($j$1151) + 1)|0;
  $606 = ($605>>>0)<($y>>>0);
  $indvars$iv$next = (($indvars$iv) + ($330))|0;
  $indvars$iv$next255 = (($indvars$iv254) + ($330))|0;
  $indvars$iv$next258 = (($indvars$iv257) + ($345))|0;
  $indvars$iv$next261 = (($indvars$iv260) + ($345))|0;
  $indvars$iv$next264 = (($indvars$iv263) + ($360))|0;
  $indvars$iv$next267 = (($indvars$iv266) + ($360))|0;
  if ($606) {
   $indvars$iv = $indvars$iv$next;$indvars$iv254 = $indvars$iv$next255;$indvars$iv257 = $indvars$iv$next258;$indvars$iv260 = $indvars$iv$next261;$indvars$iv263 = $indvars$iv$next264;$indvars$iv266 = $indvars$iv$next267;$j$1151 = $605;
  } else {
   $$0 = 1;
   label = 137;
   break;
  }
 }
 if ((label|0) == 134) {
  ___assert_fail((25496|0),(25096|0),4129,(25368|0));
  // unreachable;
 }
 else if ((label|0) == 137) {
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__paeth($a,$b,$c) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$b = 0, $ispos = 0, $ispos1 = 0, $ispos3 = 0, $neg = 0, $neg2 = 0, $neg4 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($b) + ($a))|0;
 $1 = (($0) - ($c))|0;
 $2 = (($1) - ($a))|0;
 $ispos = ($2|0)>(-1);
 $neg = (0 - ($2))|0;
 $3 = $ispos ? $2 : $neg;
 $4 = (($1) - ($b))|0;
 $ispos1 = ($4|0)>(-1);
 $neg2 = (0 - ($4))|0;
 $5 = $ispos1 ? $4 : $neg2;
 $6 = (($1) - ($c))|0;
 $ispos3 = ($6|0)>(-1);
 $neg4 = (0 - ($6))|0;
 $7 = $ispos3 ? $6 : $neg4;
 $8 = ($3|0)>($5|0);
 $9 = ($3|0)>($7|0);
 $or$cond = $8 | $9;
 $10 = ($5|0)>($7|0);
 $c$b = $10 ? $c : $b;
 $$0 = $or$cond ? $c$b : $a;
 return ($$0|0);
}
function _stbi__decode_jpeg_header($z,$scan) {
 $z = $z|0;
 $scan = $scan|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$9 = 0, $$lcssa = 0, $$lcssa20 = 0, $$lcssa5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m$010 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 18116|0);
 HEAP8[$0>>0] = -1;
 $1 = (_stbi__get_marker($z)|0);
 $2 = ($1<<24>>24)==(-40);
 if (!($2)) {
  _stbi__err(25528);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($scan|0)==(1);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = (_stbi__get_marker($z)|0);
 $5 = $4&255;
 $6 = $5 & 254;
 $7 = ($6|0)==(192);
 $8 = ($4<<24>>24)==(-62);
 $$9 = $8 | $7;
 L8: do {
  if ($$9) {
   $$lcssa5 = $8;
  } else {
   $m$010 = $5;
   L10: while(1) {
    $13 = (_stbi__process_marker($z,$m$010)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $$0 = 0;
     label = 14;
     break;
    }
    $15 = (_stbi__get_marker($z)|0);
    $16 = $15&255;
    $17 = ($15<<24>>24)==(-1);
    if ($17) {
     while(1) {
      $18 = HEAP32[$z>>2]|0;
      $19 = (_stbi__at_eof($18)|0);
      $20 = ($19|0)==(0);
      if (!($20)) {
       break L10;
      }
      $21 = (_stbi__get_marker($z)|0);
      $22 = ($21<<24>>24)==(-1);
      if (!($22)) {
       $$lcssa20 = $21;
       break;
      }
     }
     $9 = $$lcssa20&255;
     $$lcssa = $9;
    } else {
     $$lcssa = $16;
    }
    $10 = $$lcssa & 254;
    $11 = ($10|0)==(192);
    $12 = ($$lcssa|0)==(194);
    $$ = $12 | $11;
    if ($$) {
     $$lcssa5 = $12;
     break L8;
    } else {
     $m$010 = $$lcssa;
    }
   }
   if ((label|0) == 14) {
    return ($$0|0);
   }
   _stbi__err(25536);
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $23 = $$lcssa5&1;
 $24 = ((($z)) + 18124|0);
 HEAP32[$24>>2] = $23;
 $25 = (_stbi__process_frame_header($z,$scan)|0);
 $not$ = ($25|0)!=(0);
 $$2 = $not$&1;
 $$0 = $$2;
 return ($$0|0);
}
function _stbi__get_marker($j) {
 $j = $j|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($j)) + 18116|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(-1);
 if (!($2)) {
  HEAP8[$0>>0] = -1;
  $$0 = $1;
  return ($$0|0);
 }
 $3 = HEAP32[$j>>2]|0;
 $4 = (_stbi__get8($3)|0);
 $5 = ($4<<24>>24)==(-1);
 if (!($5)) {
  $$0 = -1;
  return ($$0|0);
 }
 while(1) {
  $6 = HEAP32[$j>>2]|0;
  $7 = (_stbi__get8($6)|0);
  $8 = ($7<<24>>24)==(-1);
  if (!($8)) {
   $$0 = $7;
   break;
  }
 }
 return ($$0|0);
}
function _stbi__process_marker($z,$m) {
 $z = $z|0;
 $m = $m|0;
 var $$2 = 0, $$mask = 0, $$mask7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $L$0$lcssa = 0, $L$015 = 0, $L$1$lcssa = 0, $L$122 = 0;
 var $exitcond = 0, $exitcond30 = 0, $i$014 = 0, $i1$118 = 0, $or$cond = 0, $or$cond5 = 0, $sizes = 0, $v$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $sizes = sp;
 if ((($m|0) == 219)) {
  $6 = HEAP32[$z>>2]|0;
  $7 = (_stbi__get16be($6)|0);
  $8 = (($7) + -2)|0;
  $9 = ($7|0)>(2);
  L3: do {
   if ($9) {
    $L$015 = $8;
    while(1) {
     $10 = HEAP32[$z>>2]|0;
     $11 = (_stbi__get8($10)|0);
     $12 = $11&255;
     $13 = $12 & 15;
     $$mask = $12 & 240;
     $14 = ($$mask|0)==(0);
     if (!($14)) {
      label = 8;
      break;
     }
     $15 = ($13>>>0)>(3);
     if ($15) {
      label = 10;
      break;
     } else {
      $i$014 = 0;
     }
     while(1) {
      $16 = HEAP32[$z>>2]|0;
      $17 = (_stbi__get8($16)|0);
      $18 = (25744 + ($i$014)|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = $19&255;
      $21 = ((((($z)) + 13444|0) + ($13<<6)|0) + ($20)|0);
      HEAP8[$21>>0] = $17;
      $22 = (($i$014) + 1)|0;
      $exitcond = ($22|0)==(64);
      if ($exitcond) {
       break;
      } else {
       $i$014 = $22;
      }
     }
     $23 = (($L$015) + -65)|0;
     $24 = ($L$015|0)>(65);
     if ($24) {
      $L$015 = $23;
     } else {
      $L$0$lcssa = $23;
      break L3;
     }
    }
    if ((label|0) == 8) {
     _stbi__err(25712);
     $$2 = 0;
     STACKTOP = sp;return ($$2|0);
    }
    else if ((label|0) == 10) {
     _stbi__err(25728);
     $$2 = 0;
     STACKTOP = sp;return ($$2|0);
    }
   } else {
    $L$0$lcssa = $8;
   }
  } while(0);
  $25 = ($L$0$lcssa|0)==(0);
  $26 = $25&1;
  $$2 = $26;
  STACKTOP = sp;return ($$2|0);
 } else if ((($m|0) == 221)) {
  $0 = HEAP32[$z>>2]|0;
  $1 = (_stbi__get16be($0)|0);
  $2 = ($1|0)==(4);
  if ($2) {
   $3 = HEAP32[$z>>2]|0;
   $4 = (_stbi__get16be($3)|0);
   $5 = ((($z)) + 18168|0);
   HEAP32[$5>>2] = $4;
   $$2 = 1;
   STACKTOP = sp;return ($$2|0);
  } else {
   _stbi__err(25696);
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
 } else if ((($m|0) == 196)) {
  $27 = HEAP32[$z>>2]|0;
  $28 = (_stbi__get16be($27)|0);
  $29 = (($28) + -2)|0;
  $30 = ($28|0)>(2);
  L24: do {
   if ($30) {
    $31 = ((($sizes)) + 4|0);
    $32 = ((($sizes)) + 8|0);
    $33 = ((($sizes)) + 12|0);
    $34 = ((($sizes)) + 16|0);
    $35 = ((($sizes)) + 20|0);
    $36 = ((($sizes)) + 24|0);
    $37 = ((($sizes)) + 28|0);
    $38 = ((($sizes)) + 32|0);
    $39 = ((($sizes)) + 36|0);
    $40 = ((($sizes)) + 40|0);
    $41 = ((($sizes)) + 44|0);
    $42 = ((($sizes)) + 48|0);
    $43 = ((($sizes)) + 52|0);
    $44 = ((($sizes)) + 56|0);
    $45 = ((($sizes)) + 60|0);
    $L$122 = $29;
    while(1) {
     $46 = HEAP32[$z>>2]|0;
     $47 = (_stbi__get8($46)|0);
     $48 = $47&255;
     $49 = $48 & 15;
     $50 = ($47&255)>(31);
     $51 = ($49>>>0)>(3);
     $or$cond = $50 | $51;
     if ($or$cond) {
      label = 17;
      break;
     }
     $52 = HEAP32[$z>>2]|0;
     $53 = (_stbi__get8($52)|0);
     $54 = $53&255;
     HEAP32[$sizes>>2] = $54;
     $55 = HEAP32[$z>>2]|0;
     $56 = (_stbi__get8($55)|0);
     $57 = $56&255;
     HEAP32[$31>>2] = $57;
     $58 = (($57) + ($54))|0;
     $59 = HEAP32[$z>>2]|0;
     $60 = (_stbi__get8($59)|0);
     $61 = $60&255;
     HEAP32[$32>>2] = $61;
     $62 = (($61) + ($58))|0;
     $63 = HEAP32[$z>>2]|0;
     $64 = (_stbi__get8($63)|0);
     $65 = $64&255;
     HEAP32[$33>>2] = $65;
     $66 = (($65) + ($62))|0;
     $67 = HEAP32[$z>>2]|0;
     $68 = (_stbi__get8($67)|0);
     $69 = $68&255;
     HEAP32[$34>>2] = $69;
     $70 = (($69) + ($66))|0;
     $71 = HEAP32[$z>>2]|0;
     $72 = (_stbi__get8($71)|0);
     $73 = $72&255;
     HEAP32[$35>>2] = $73;
     $74 = (($73) + ($70))|0;
     $75 = HEAP32[$z>>2]|0;
     $76 = (_stbi__get8($75)|0);
     $77 = $76&255;
     HEAP32[$36>>2] = $77;
     $78 = (($77) + ($74))|0;
     $79 = HEAP32[$z>>2]|0;
     $80 = (_stbi__get8($79)|0);
     $81 = $80&255;
     HEAP32[$37>>2] = $81;
     $82 = (($81) + ($78))|0;
     $83 = HEAP32[$z>>2]|0;
     $84 = (_stbi__get8($83)|0);
     $85 = $84&255;
     HEAP32[$38>>2] = $85;
     $86 = (($85) + ($82))|0;
     $87 = HEAP32[$z>>2]|0;
     $88 = (_stbi__get8($87)|0);
     $89 = $88&255;
     HEAP32[$39>>2] = $89;
     $90 = (($89) + ($86))|0;
     $91 = HEAP32[$z>>2]|0;
     $92 = (_stbi__get8($91)|0);
     $93 = $92&255;
     HEAP32[$40>>2] = $93;
     $94 = (($93) + ($90))|0;
     $95 = HEAP32[$z>>2]|0;
     $96 = (_stbi__get8($95)|0);
     $97 = $96&255;
     HEAP32[$41>>2] = $97;
     $98 = (($97) + ($94))|0;
     $99 = HEAP32[$z>>2]|0;
     $100 = (_stbi__get8($99)|0);
     $101 = $100&255;
     HEAP32[$42>>2] = $101;
     $102 = (($101) + ($98))|0;
     $103 = HEAP32[$z>>2]|0;
     $104 = (_stbi__get8($103)|0);
     $105 = $104&255;
     HEAP32[$43>>2] = $105;
     $106 = (($105) + ($102))|0;
     $107 = HEAP32[$z>>2]|0;
     $108 = (_stbi__get8($107)|0);
     $109 = $108&255;
     HEAP32[$44>>2] = $109;
     $110 = (($109) + ($106))|0;
     $111 = HEAP32[$z>>2]|0;
     $112 = (_stbi__get8($111)|0);
     $113 = $112&255;
     HEAP32[$45>>2] = $113;
     $114 = (($113) + ($110))|0;
     $115 = (($L$122) + -17)|0;
     $$mask7 = $48 & 240;
     $116 = ($$mask7|0)==(0);
     if ($116) {
      $117 = (((($z)) + 4|0) + (($49*1680)|0)|0);
      $118 = (_stbi__build_huffman($117,$sizes)|0);
      $119 = ($118|0)==(0);
      if ($119) {
       break;
      }
      $120 = (((((($z)) + 4|0) + (($49*1680)|0)|0)) + 1024|0);
      $v$0 = $120;
     } else {
      $121 = (((($z)) + 6724|0) + (($49*1680)|0)|0);
      $122 = (_stbi__build_huffman($121,$sizes)|0);
      $123 = ($122|0)==(0);
      if ($123) {
       break;
      }
      $124 = (((((($z)) + 6724|0) + (($49*1680)|0)|0)) + 1024|0);
      $v$0 = $124;
     }
     $125 = ($114|0)>(0);
     if ($125) {
      $126 = $56&255;
      $127 = $53&255;
      $128 = (($126) + ($127))|0;
      $129 = $60&255;
      $130 = (($128) + ($129))|0;
      $131 = $64&255;
      $132 = (($130) + ($131))|0;
      $133 = $68&255;
      $134 = (($132) + ($133))|0;
      $135 = $72&255;
      $136 = (($134) + ($135))|0;
      $137 = $76&255;
      $138 = (($136) + ($137))|0;
      $139 = $80&255;
      $140 = (($138) + ($139))|0;
      $141 = $84&255;
      $142 = (($140) + ($141))|0;
      $143 = $88&255;
      $144 = (($142) + ($143))|0;
      $145 = $92&255;
      $146 = (($144) + ($145))|0;
      $147 = $96&255;
      $148 = (($146) + ($147))|0;
      $149 = $100&255;
      $150 = (($148) + ($149))|0;
      $151 = $104&255;
      $152 = (($150) + ($151))|0;
      $153 = $108&255;
      $154 = (($152) + ($153))|0;
      $155 = $112&255;
      $156 = (($154) + ($155))|0;
      $i1$118 = 0;
      while(1) {
       $157 = HEAP32[$z>>2]|0;
       $158 = (_stbi__get8($157)|0);
       $159 = (($v$0) + ($i1$118)|0);
       HEAP8[$159>>0] = $158;
       $160 = (($i1$118) + 1)|0;
       $exitcond30 = ($160|0)==($156|0);
       if ($exitcond30) {
        break;
       } else {
        $i1$118 = $160;
       }
      }
     }
     if (!($116)) {
      $161 = (((($z)) + 13700|0) + ($49<<10)|0);
      $162 = (((($z)) + 6724|0) + (($49*1680)|0)|0);
      _stbi__build_fast_ac($161,$162);
     }
     $163 = (($115) - ($114))|0;
     $164 = ($163|0)>(0);
     if ($164) {
      $L$122 = $163;
     } else {
      $L$1$lcssa = $163;
      break L24;
     }
    }
    if ((label|0) == 17) {
     _stbi__err(25824);
    }
    $$2 = 0;
    STACKTOP = sp;return ($$2|0);
   } else {
    $L$1$lcssa = $29;
   }
  } while(0);
  $165 = ($L$1$lcssa|0)==(0);
  $166 = $165&1;
  $$2 = $166;
  STACKTOP = sp;return ($$2|0);
 } else if ((($m|0) == 255)) {
  _stbi__err(25680);
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 } else {
  $167 = $m & -16;
  $168 = ($167|0)==(224);
  $169 = ($m|0)==(254);
  $or$cond5 = $169 | $168;
  if (!($or$cond5)) {
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $170 = HEAP32[$z>>2]|0;
  $171 = (_stbi__get16be($170)|0);
  $172 = (($171) + -2)|0;
  _stbi__skip($170,$172);
  $$2 = 1;
  STACKTOP = sp;return ($$2|0);
 }
 return (0)|0;
}
function _stbi__process_frame_header($z,$scan) {
 $z = $z|0;
 $scan = $scan|0;
 var $$0 = 0, $$h_max$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $h_max$0$lcssa = 0, $h_max$017 = 0, $i$022 = 0, $i$1 = 0, $i$216 = 0, $i$313 = 0;
 var $i$313$lcssa = 0, $i$412 = 0, $i$412$in = 0, $or$cond = 0, $or$cond2 = 0, $v_max$0$lcssa = 0, $v_max$018 = 0, $v_max$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$z>>2]|0;
 $1 = (_stbi__get16be($0)|0);
 $2 = ($1|0)<(11);
 if ($2) {
  _stbi__err(25544);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_stbi__get8($0)|0);
 $4 = ($3<<24>>24)==(8);
 if (!($4)) {
  _stbi__err(25560);
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_stbi__get16be($0)|0);
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0);
 if ($7) {
  _stbi__err(25576);
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_stbi__get16be($0)|0);
 HEAP32[$0>>2] = $8;
 $9 = ($8|0)==(0);
 if ($9) {
  _stbi__err(25600);
  $$0 = 0;
  return ($$0|0);
 }
 $10 = (_stbi__get8($0)|0);
 $11 = $10&255;
 if (!((($10<<24>>24) == 1) | (($10<<24>>24) == 3))) {
  _stbi__err(25608);
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ((($0)) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = $10&255;
 $i$022 = 0;
 while(1) {
  $14 = (((((($z)) + 17820|0) + (($i$022*72)|0)|0)) + 44|0);
  HEAP32[$14>>2] = 0;
  $15 = (((((($z)) + 17820|0) + (($i$022*72)|0)|0)) + 56|0);
  HEAP32[$15>>2] = 0;
  $16 = (($i$022) + 1)|0;
  $exitcond = ($16|0)==($13|0);
  if ($exitcond) {
   break;
  } else {
   $i$022 = $16;
  }
 }
 $17 = HEAP32[$12>>2]|0;
 $18 = ($17*3)|0;
 $19 = (($18) + 8)|0;
 $20 = ($1|0)==($19|0);
 if ($20) {
  $i$1 = 0;
 } else {
  _stbi__err(25544);
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $21 = HEAP32[$12>>2]|0;
  $22 = ($i$1|0)<($21|0);
  if (!($22)) {
   $$lcssa = $21;
   label = 24;
   break;
  }
  $23 = (_stbi__get8($0)|0);
  $24 = $23&255;
  $25 = (((($z)) + 17820|0) + (($i$1*72)|0)|0);
  HEAP32[$25>>2] = $24;
  $26 = (($i$1) + 1)|0;
  $27 = ($24|0)==($26|0);
  $28 = ($24|0)==($i$1|0);
  $or$cond = $27 | $28;
  if (!($or$cond)) {
   label = 17;
   break;
  }
  $29 = (_stbi__get8($0)|0);
  $30 = $29&255;
  $31 = $30 >>> 4;
  $32 = (((((($z)) + 17820|0) + (($i$1*72)|0)|0)) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = ($31|0)==(0);
  $34 = ($29&255)>(79);
  $or$cond2 = $34 | $33;
  if ($or$cond2) {
   label = 19;
   break;
  }
  $35 = $30 & 15;
  $36 = (((((($z)) + 17820|0) + (($i$1*72)|0)|0)) + 8|0);
  HEAP32[$36>>2] = $35;
  $37 = (($35) + -1)|0;
  $38 = ($37>>>0)>(3);
  if ($38) {
   label = 21;
   break;
  }
  $39 = (_stbi__get8($0)|0);
  $40 = $39&255;
  $41 = (((((($z)) + 17820|0) + (($i$1*72)|0)|0)) + 12|0);
  HEAP32[$41>>2] = $40;
  $42 = ($39&255)>(3);
  if ($42) {
   label = 23;
   break;
  } else {
   $i$1 = $26;
  }
 }
 if ((label|0) == 17) {
  _stbi__err(25632);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 19) {
  _stbi__err(25656);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 21) {
  _stbi__err(25664);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 23) {
  _stbi__err(25672);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 24) {
  $43 = ($scan|0)==(0);
  if (!($43)) {
   $$0 = 1;
   return ($$0|0);
  }
  $44 = HEAP32[$0>>2]|0;
  $45 = (1073741824 / ($44>>>0))&-1;
  $46 = (($45>>>0) / ($$lcssa>>>0))&-1;
  $47 = HEAP32[$6>>2]|0;
  $48 = ($46>>>0)<($47>>>0);
  if ($48) {
   _stbi__err(24736);
   $$0 = 0;
   return ($$0|0);
  }
  $49 = HEAP32[$12>>2]|0;
  $50 = ($49|0)>(0);
  if ($50) {
   $51 = HEAP32[$12>>2]|0;
   $h_max$017 = 1;$i$216 = 0;$v_max$018 = 1;
   while(1) {
    $52 = (((((($z)) + 17820|0) + (($i$216*72)|0)|0)) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)>($h_max$017|0);
    $$h_max$0 = $54 ? $53 : $h_max$017;
    $55 = (((((($z)) + 17820|0) + (($i$216*72)|0)|0)) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)>($v_max$018|0);
    $v_max$1 = $57 ? $56 : $v_max$018;
    $58 = (($i$216) + 1)|0;
    $59 = ($58|0)<($51|0);
    if ($59) {
     $h_max$017 = $$h_max$0;$i$216 = $58;$v_max$018 = $v_max$1;
    } else {
     $h_max$0$lcssa = $$h_max$0;$v_max$0$lcssa = $v_max$1;
     break;
    }
   }
  } else {
   $h_max$0$lcssa = 1;$v_max$0$lcssa = 1;
  }
  $60 = ((($z)) + 17796|0);
  HEAP32[$60>>2] = $h_max$0$lcssa;
  $61 = ((($z)) + 17800|0);
  HEAP32[$61>>2] = $v_max$0$lcssa;
  $62 = $h_max$0$lcssa << 3;
  $63 = ((($z)) + 17812|0);
  HEAP32[$63>>2] = $62;
  $64 = $v_max$0$lcssa << 3;
  $65 = ((($z)) + 17816|0);
  HEAP32[$65>>2] = $64;
  $66 = HEAP32[$0>>2]|0;
  $67 = HEAP32[$63>>2]|0;
  $68 = (($66) + -1)|0;
  $69 = (($68) + ($67))|0;
  $70 = (($69>>>0) / ($67>>>0))&-1;
  $71 = ((($z)) + 17804|0);
  HEAP32[$71>>2] = $70;
  $72 = HEAP32[$6>>2]|0;
  $73 = HEAP32[$65>>2]|0;
  $74 = (($72) + -1)|0;
  $75 = (($74) + ($73))|0;
  $76 = (($75>>>0) / ($73>>>0))&-1;
  $77 = ((($z)) + 17808|0);
  HEAP32[$77>>2] = $76;
  $78 = HEAP32[$12>>2]|0;
  $79 = ($78|0)>(0);
  if (!($79)) {
   $$0 = 1;
   return ($$0|0);
  }
  $80 = (($h_max$0$lcssa) + -1)|0;
  $81 = (($v_max$0$lcssa) + -1)|0;
  $82 = ((($z)) + 18124|0);
  $i$313 = 0;
  while(1) {
   $83 = HEAP32[$0>>2]|0;
   $84 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = Math_imul($85, $83)|0;
   $87 = (($80) + ($86))|0;
   $88 = (($87>>>0) / ($h_max$0$lcssa>>>0))&-1;
   $89 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 28|0);
   HEAP32[$89>>2] = $88;
   $90 = HEAP32[$6>>2]|0;
   $91 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 8|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = Math_imul($92, $90)|0;
   $94 = (($81) + ($93))|0;
   $95 = (($94>>>0) / ($v_max$0$lcssa>>>0))&-1;
   $96 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 32|0);
   HEAP32[$96>>2] = $95;
   $97 = HEAP32[$71>>2]|0;
   $98 = HEAP32[$84>>2]|0;
   $99 = $97 << 3;
   $100 = Math_imul($99, $98)|0;
   $101 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 36|0);
   HEAP32[$101>>2] = $100;
   $102 = HEAP32[$77>>2]|0;
   $103 = HEAP32[$91>>2]|0;
   $104 = $102 << 3;
   $105 = Math_imul($104, $103)|0;
   $106 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 40|0);
   HEAP32[$106>>2] = $105;
   $107 = HEAP32[$101>>2]|0;
   $108 = Math_imul($105, $107)|0;
   $109 = (($108) + 15)|0;
   $110 = (_stbi__malloc($109)|0);
   $111 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 48|0);
   HEAP32[$111>>2] = $110;
   $112 = ($110|0)==(0|0);
   if ($112) {
    $i$313$lcssa = $i$313;
    break;
   }
   $118 = $110;
   $119 = (($118) + 15)|0;
   $120 = $119 & -16;
   $121 = $120;
   $122 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 44|0);
   HEAP32[$122>>2] = $121;
   $123 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 56|0);
   HEAP32[$123>>2] = 0;
   $124 = HEAP32[$82>>2]|0;
   $125 = ($124|0)==(0);
   if ($125) {
    $145 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 60|0);
    HEAP32[$145>>2] = 0;
    $146 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 52|0);
    HEAP32[$146>>2] = 0;
   } else {
    $126 = HEAP32[$101>>2]|0;
    $127 = (($126) + 7)|0;
    $128 = $127 >> 3;
    $129 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 64|0);
    HEAP32[$129>>2] = $128;
    $130 = HEAP32[$106>>2]|0;
    $131 = (($130) + 7)|0;
    $132 = $131 >> 3;
    $133 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 68|0);
    HEAP32[$133>>2] = $132;
    $134 = HEAP32[$129>>2]|0;
    $135 = $134 << 7;
    $136 = Math_imul($135, $132)|0;
    $137 = $136 | 15;
    $138 = (_malloc($137)|0);
    $139 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 52|0);
    HEAP32[$139>>2] = $138;
    $140 = $138;
    $141 = (($140) + 15)|0;
    $142 = $141 & -16;
    $143 = $142;
    $144 = (((((($z)) + 17820|0) + (($i$313*72)|0)|0)) + 60|0);
    HEAP32[$144>>2] = $143;
   }
   $147 = (($i$313) + 1)|0;
   $148 = HEAP32[$12>>2]|0;
   $149 = ($147|0)<($148|0);
   if ($149) {
    $i$313 = $147;
   } else {
    $$0 = 1;
    label = 40;
    break;
   }
  }
  if ((label|0) == 40) {
   return ($$0|0);
  }
  $113 = ($i$313$lcssa|0)>(0);
  if ($113) {
   $i$412$in = $i$313$lcssa;
   while(1) {
    $i$412 = (($i$412$in) + -1)|0;
    $114 = (((((($z)) + 17820|0) + (($i$412*72)|0)|0)) + 48|0);
    $115 = HEAP32[$114>>2]|0;
    _free($115);
    $116 = (((((($z)) + 17820|0) + (($i$412*72)|0)|0)) + 44|0);
    HEAP32[$116>>2] = 0;
    $117 = ($i$412$in|0)>(1);
    if ($117) {
     $i$412$in = $i$412;
    } else {
     break;
    }
   }
  }
  _stbi__err(25000);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__build_huffman($h,$count) {
 $h = $h|0;
 $count = $count|0;
 var $$0 = 0, $$lcssa37 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code$014 = 0, $code$1$lcssa = 0, $code$110 = 0, $code$2 = 0, $exitcond = 0;
 var $exitcond26 = 0, $i$022 = 0, $i$17 = 0, $j$017 = 0, $j$115 = 0, $k$021 = 0, $k$1$lcssa = 0, $k$1$lcssa$lcssa = 0, $k$116 = 0, $k$213 = 0, $k$3$lcssa = 0, $k$39 = 0, $k$4 = 0, $k$4$lcssa = 0, $scevgep = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$022 = 0;$k$021 = 0;
 while(1) {
  $1 = (($count) + ($i$022<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)>(0);
  $0 = (($i$022) + 1)|0;
  if ($3) {
   $4 = $0&255;
   $j$017 = 0;$k$116 = $k$021;
   while(1) {
    $5 = (($k$116) + 1)|0;
    $6 = (((($h)) + 1280|0) + ($k$116)|0);
    HEAP8[$6>>0] = $4;
    $7 = (($j$017) + 1)|0;
    $8 = HEAP32[$1>>2]|0;
    $9 = ($7|0)<($8|0);
    if ($9) {
     $j$017 = $7;$k$116 = $5;
    } else {
     $k$1$lcssa = $5;
     break;
    }
   }
  } else {
   $k$1$lcssa = $k$021;
  }
  $exitcond26 = ($0|0)==(16);
  if ($exitcond26) {
   $k$1$lcssa$lcssa = $k$1$lcssa;
   break;
  } else {
   $i$022 = $0;$k$021 = $k$1$lcssa;
  }
 }
 $10 = (((($h)) + 1280|0) + ($k$1$lcssa$lcssa)|0);
 HEAP8[$10>>0] = 0;
 $code$014 = 0;$j$115 = 1;$k$213 = 0;
 while(1) {
  $11 = (($k$213) - ($code$014))|0;
  $12 = (((($h)) + 1612|0) + ($j$115<<2)|0);
  HEAP32[$12>>2] = $11;
  $13 = (((($h)) + 1280|0) + ($k$213)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==($j$115|0);
  if ($16) {
   $17 = (((($h)) + 1280|0) + ($k$213)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = ($19|0)==($j$115|0);
   if ($20) {
    $code$110 = $code$014;$k$39 = $k$213;
    while(1) {
     $21 = (($code$110) + 1)|0;
     $22 = $code$110&65535;
     $23 = (($k$39) + 1)|0;
     $24 = (((($h)) + 512|0) + ($k$39<<1)|0);
     HEAP16[$24>>1] = $22;
     $25 = (((($h)) + 1280|0) + ($23)|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = ($27|0)==($j$115|0);
     if ($28) {
      $code$110 = $21;$k$39 = $23;
     } else {
      $code$1$lcssa = $21;$k$3$lcssa = $23;
      break;
     }
    }
   } else {
    $code$1$lcssa = $code$014;$k$3$lcssa = $k$213;
   }
   $29 = 1 << $j$115;
   $30 = ($code$1$lcssa|0)>($29|0);
   if ($30) {
    label = 11;
    break;
   } else {
    $code$2 = $code$1$lcssa;$k$4 = $k$3$lcssa;
   }
  } else {
   $code$2 = $code$014;$k$4 = $k$213;
  }
  $31 = (16 - ($j$115))|0;
  $32 = $code$2 << $31;
  $33 = (((($h)) + 1540|0) + ($j$115<<2)|0);
  HEAP32[$33>>2] = $32;
  $34 = $code$2 << 1;
  $35 = (($j$115) + 1)|0;
  $36 = ($35|0)<(17);
  if ($36) {
   $code$014 = $34;$j$115 = $35;$k$213 = $k$4;
  } else {
   $$lcssa37 = $35;$k$4$lcssa = $k$4;
   break;
  }
 }
 if ((label|0) == 11) {
  _stbi__err(25840);
  $$0 = 0;
  return ($$0|0);
 }
 $37 = (((($h)) + 1540|0) + ($$lcssa37<<2)|0);
 HEAP32[$37>>2] = -1;
 _memset(($h|0),-1,512)|0;
 $38 = ($k$4$lcssa|0)>(0);
 if ($38) {
  $i$17 = 0;
 } else {
  $$0 = 1;
  return ($$0|0);
 }
 while(1) {
  $39 = (((($h)) + 1280|0) + ($i$17)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40&255)<(10);
  if ($41) {
   $42 = $40&255;
   $43 = (9 - ($42))|0;
   $44 = 1 << $43;
   $45 = ($43|0)==(31);
   if (!($45)) {
    $46 = (((($h)) + 512|0) + ($i$17<<1)|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47&65535;
    $49 = $48 << $43;
    $50 = $i$17&255;
    $scevgep = (($h) + ($49)|0);
    $51 = ($44|0)>(1);
    $smax = $51 ? $44 : 1;
    _memset(($scevgep|0),($50|0),($smax|0))|0;
   }
  }
  $52 = (($i$17) + 1)|0;
  $exitcond = ($52|0)==($k$4$lcssa|0);
  if ($exitcond) {
   $$0 = 1;
   break;
  } else {
   $i$17 = $52;
  }
 }
 return ($$0|0);
}
function _stbi__build_fast_ac($fast_ac,$h) {
 $fast_ac = $fast_ac|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $k$0 = 0, $k$0$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$02 = 0;
 while(1) {
  $0 = (($h) + ($i$02)|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = (($fast_ac) + ($i$02<<1)|0);
  HEAP16[$2>>1] = 0;
  $3 = $1&255;
  $4 = ($1<<24>>24)==(-1);
  if (!($4)) {
   $5 = (((($h)) + 1024|0) + ($3)|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $8 = $7 & 240;
   $9 = $7 & 15;
   $10 = (((($h)) + 1280|0) + ($3)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = ($9|0)==(0);
   if (!($13)) {
    $14 = (($12) + ($9))|0;
    $15 = ($14|0)<(10);
    if ($15) {
     $16 = $i$02 << $12;
     $17 = $16 & 511;
     $18 = (9 - ($9))|0;
     $19 = $17 >>> $18;
     $20 = (($9) + -1)|0;
     $21 = 1 << $20;
     $22 = ($19|0)<($21|0);
     if ($22) {
      $23 = -1 << $9;
      $24 = (($23) + 1)|0;
      $25 = (($24) + ($19))|0;
      $k$0 = $25;
     } else {
      $k$0 = $19;
     }
     $k$0$off = (($k$0) + 128)|0;
     $26 = ($k$0$off>>>0)<(256);
     if ($26) {
      $27 = $k$0 << 8;
      $28 = $27 | $8;
      $29 = (($28) + ($14))|0;
      $30 = $29&65535;
      HEAP16[$2>>1] = $30;
     }
    }
   }
  }
  $31 = (($i$02) + 1)|0;
  $exitcond = ($31|0)==(512);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $31;
  }
 }
 return;
}
function _stbi__parse_zlib($a,$parse_header) {
 $a = $a|0;
 $parse_header = $parse_header|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($parse_header|0)==(0);
 if (!($0)) {
  $1 = (_stbi__parse_zlib_header($a)|0);
  $2 = ($1|0)==(0);
  if ($2) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $3 = ((($a)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($a)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($a)) + 2052|0);
 $6 = ((($a)) + 32|0);
 while(1) {
  $7 = (_stbi__zreceive($a,1)|0);
  $8 = (_stbi__zreceive($a,2)|0);
  if ((($8|0) == 0)) {
   $9 = (_stbi__parse_uncomperssed_block($a)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $$0 = 0;
    label = 13;
    break;
   }
  } else if ((($8|0) == 3)) {
   $$0 = 0;
   label = 13;
   break;
  } else if ((($8|0) == 1)) {
   $11 = HEAP8[(25895)>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    _stbi__init_zdefaults();
   }
   $13 = (_stbi__zbuild_huffman($6,25896,288)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $$0 = 0;
    label = 13;
    break;
   }
   $15 = (_stbi__zbuild_huffman($5,25864,32)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0 = 0;
    label = 13;
    break;
   } else {
    label = 11;
   }
  } else {
   $17 = (_stbi__compute_huffman_codes($a)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$0 = 0;
    label = 13;
    break;
   } else {
    label = 11;
   }
  }
  if ((label|0) == 11) {
   label = 0;
   $19 = (_stbi__parse_huffman_block($a)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $$0 = 0;
    label = 13;
    break;
   }
  }
  $21 = ($7|0)==(0);
  if (!($21)) {
   $$0 = 1;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__parse_zlib_header($a) {
 $a = $a|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__zget8($a)|0);
 $1 = $0&255;
 $2 = $1 & 15;
 $3 = (_stbi__zget8($a)|0);
 $4 = $3&255;
 $5 = $1 << 8;
 $6 = $5 | $4;
 $7 = (($6>>>0) % 31)&-1;
 $8 = ($7|0)==(0);
 if (!($8)) {
  _stbi__err(27096);
  $$0 = 0;
  return ($$0|0);
 }
 $9 = $4 & 32;
 $10 = ($9|0)==(0);
 if (!($10)) {
  _stbi__err(27112);
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ($2|0)==(8);
 if ($11) {
  $$0 = 1;
  return ($$0|0);
 }
 _stbi__err(27128);
 $$0 = 0;
 return ($$0|0);
}
function _stbi__zreceive($z,$n) {
 $z = $z|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($n|0);
 if ($2) {
  _stbi__fill_bits($z);
 }
 $3 = ((($z)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = 1 << $n;
 $6 = (($5) + -1)|0;
 $7 = $4 & $6;
 $8 = $4 >>> $n;
 HEAP32[$3>>2] = $8;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) - ($n))|0;
 HEAP32[$0>>2] = $10;
 return ($7|0);
}
function _stbi__parse_uncomperssed_block($a) {
 $a = $a|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa17 = 0, $$op = 0, $$ph = 0, $$pr = 0, $$promoted = 0, $$promoted8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond13 = 0, $header = 0, $k$0$lcssa = 0, $k$03 = 0, $k$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $header = sp;
 $0 = ((($a)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 7;
 $3 = ($2|0)==(0);
 if ($3) {
  $$ph = $1;
 } else {
  (_stbi__zreceive($a,$2)|0);
  $$pr = HEAP32[$0>>2]|0;
  $$ph = $$pr;
 }
 $4 = ($$ph|0)>(0);
 if ($4) {
  $5 = ((($a)) + 12|0);
  $$promoted = HEAP32[$5>>2]|0;
  $$promoted8 = HEAP32[$0>>2]|0;
  $6 = ($$promoted8|0)<(8);
  $$op = $$promoted8 ^ -1;
  $7 = $6 ? $$op : -9;
  $8 = (($$promoted8) + ($7))|0;
  $9 = (($8) + 8)|0;
  $10 = $9 >>> 3;
  $11 = $10 << 3;
  $12 = (($10) + 1)|0;
  $14 = $$promoted;$k$03 = 0;
  while(1) {
   $13 = $14&255;
   $15 = (($k$03) + 1)|0;
   $16 = (($header) + ($k$03)|0);
   HEAP8[$16>>0] = $13;
   $17 = $14 >>> 8;
   $exitcond13 = ($15|0)==($12|0);
   if ($exitcond13) {
    $$lcssa17 = $17;
    break;
   } else {
    $14 = $17;$k$03 = $15;
   }
  }
  $18 = (($$promoted8) + -8)|0;
  $19 = (($18) - ($11))|0;
  HEAP32[$5>>2] = $$lcssa17;
  HEAP32[$0>>2] = $19;
  $$lcssa = $19;$k$0$lcssa = $12;
 } else {
  $$lcssa = $$ph;$k$0$lcssa = 0;
 }
 $20 = ($$lcssa|0)==(0);
 if (!($20)) {
  ___assert_fail((27000|0),(25096|0),3734,(27024|0));
  // unreachable;
 }
 $21 = ($k$0$lcssa|0)<(4);
 if ($21) {
  $k$12 = $k$0$lcssa;
  while(1) {
   $22 = (_stbi__zget8($a)|0);
   $23 = (($k$12) + 1)|0;
   $24 = (($header) + ($k$12)|0);
   HEAP8[$24>>0] = $22;
   $exitcond = ($23|0)==(4);
   if ($exitcond) {
    break;
   } else {
    $k$12 = $23;
   }
  }
 }
 $25 = ((($header)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 << 8;
 $29 = HEAP8[$header>>0]|0;
 $30 = $29&255;
 $31 = $28 | $30;
 $32 = ((($header)) + 3|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 << 8;
 $36 = ((($header)) + 2|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $35 | $38;
 $40 = $31 ^ 65535;
 $41 = ($39|0)==($40|0);
 if (!($41)) {
  _stbi__err(27056);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = HEAP32[$a>>2]|0;
 $43 = (($42) + ($31)|0);
 $44 = ((($a)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($43>>>0)>($45>>>0);
 if ($46) {
  _stbi__err(27072);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $47 = ((($a)) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + ($31)|0);
 $50 = ((($a)) + 24|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($49>>>0)>($51>>>0);
 if ($52) {
  $53 = (_stbi__zexpand($a,$48,$31)|0);
  $54 = ($53|0)==(0);
  if ($54) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $55 = HEAP32[$47>>2]|0;
 $56 = HEAP32[$a>>2]|0;
 _memcpy(($55|0),($56|0),($31|0))|0;
 $57 = HEAP32[$a>>2]|0;
 $58 = (($57) + ($31)|0);
 HEAP32[$a>>2] = $58;
 $59 = HEAP32[$47>>2]|0;
 $60 = (($59) + ($31)|0);
 HEAP32[$47>>2] = $60;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__init_zdefaults() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 _memset((25896|0),8,144)|0;
 dest=(26040); stop=dest+112|0; do { HEAP8[dest>>0]=9|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=(26152); stop=dest+24|0; do { HEAP8[dest>>0]=7|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $0 = (26176);
 $1 = $0;
 HEAP8[$1>>0]=134744072&255;HEAP8[$1+1>>0]=(134744072>>8)&255;HEAP8[$1+2>>0]=(134744072>>16)&255;HEAP8[$1+3>>0]=134744072>>24;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP8[$3>>0]=134744072&255;HEAP8[$3+1>>0]=(134744072>>8)&255;HEAP8[$3+2>>0]=(134744072>>16)&255;HEAP8[$3+3>>0]=134744072>>24;
 dest=25864; stop=dest+32|0; do { HEAP8[dest>>0]=5|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 return;
}
function _stbi__zbuild_huffman($z,$sizelist,$num) {
 $z = $z|0;
 $sizelist = $sizelist|0;
 $num = $num|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $code$06 = 0, $exitcond = 0, $exitcond13 = 0, $i$010 = 0, $i$28 = 0, $i$34 = 0, $k$07 = 0, $k1$03 = 0, $next_code = 0, $or$cond = 0, $sizes = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $next_code = sp + 72|0;
 $sizes = sp;
 dest=$sizes; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _memset(($z|0),0,1024)|0;
 $0 = ($num|0)>(0);
 if ($0) {
  $i$010 = 0;
  while(1) {
   $1 = (($sizelist) + ($i$010)|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = $2&255;
   $4 = (($sizes) + ($3<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + 1)|0;
   HEAP32[$4>>2] = $6;
   $7 = (($i$010) + 1)|0;
   $exitcond13 = ($7|0)==($num|0);
   if ($exitcond13) {
    break;
   } else {
    $i$010 = $7;
   }
  }
 }
 HEAP32[$sizes>>2] = 0;
 $11 = ((($sizes)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(2);
 if (!($13)) {
  $8 = ((($sizes)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>(4);
  if (!($10)) {
   $66 = ((($sizes)) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)>(8);
   if (!($68)) {
    $69 = ((($sizes)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)>(16);
    if (!($71)) {
     $72 = ((($sizes)) + 20|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)>(32);
     if (!($74)) {
      $75 = ((($sizes)) + 24|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($76|0)>(64);
      if (!($77)) {
       $78 = ((($sizes)) + 28|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)>(128);
       if (!($80)) {
        $81 = ((($sizes)) + 32|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = ($82|0)>(256);
        if (!($83)) {
         $84 = ((($sizes)) + 36|0);
         $85 = HEAP32[$84>>2]|0;
         $86 = ($85|0)>(512);
         if (!($86)) {
          $87 = ((($sizes)) + 40|0);
          $88 = HEAP32[$87>>2]|0;
          $89 = ($88|0)>(1024);
          if (!($89)) {
           $90 = ((($sizes)) + 44|0);
           $91 = HEAP32[$90>>2]|0;
           $92 = ($91|0)>(2048);
           if (!($92)) {
            $93 = ((($sizes)) + 48|0);
            $94 = HEAP32[$93>>2]|0;
            $95 = ($94|0)>(4096);
            if (!($95)) {
             $96 = ((($sizes)) + 52|0);
             $97 = HEAP32[$96>>2]|0;
             $98 = ($97|0)>(8192);
             if (!($98)) {
              $99 = ((($sizes)) + 56|0);
              $100 = HEAP32[$99>>2]|0;
              $101 = ($100|0)>(16384);
              if (!($101)) {
               $102 = ((($sizes)) + 60|0);
               $103 = HEAP32[$102>>2]|0;
               $104 = ($103|0)>(32768);
               if (!($104)) {
                $code$06 = 0;$i$28 = 1;$k$07 = 0;
                while(1) {
                 $14 = (($next_code) + ($i$28<<2)|0);
                 HEAP32[$14>>2] = $code$06;
                 $15 = $code$06&65535;
                 $16 = (((($z)) + 1024|0) + ($i$28<<1)|0);
                 HEAP16[$16>>1] = $15;
                 $17 = $k$07&65535;
                 $18 = (((($z)) + 1124|0) + ($i$28<<1)|0);
                 HEAP16[$18>>1] = $17;
                 $19 = (($sizes) + ($i$28<<2)|0);
                 $20 = HEAP32[$19>>2]|0;
                 $21 = (($20) + ($code$06))|0;
                 $22 = ($20|0)!=(0);
                 $23 = 1 << $i$28;
                 $24 = ($21|0)>($23|0);
                 $or$cond = $22 & $24;
                 if ($or$cond) {
                  label = 7;
                  break;
                 }
                 $25 = (16 - ($i$28))|0;
                 $26 = $21 << $25;
                 $27 = (((($z)) + 1056|0) + ($i$28<<2)|0);
                 HEAP32[$27>>2] = $26;
                 $28 = $21 << 1;
                 $29 = HEAP32[$19>>2]|0;
                 $30 = (($29) + ($k$07))|0;
                 $31 = (($i$28) + 1)|0;
                 $32 = ($31|0)<(16);
                 if ($32) {
                  $code$06 = $28;$i$28 = $31;$k$07 = $30;
                 } else {
                  break;
                 }
                }
                if ((label|0) == 7) {
                 _stbi__err(26928);
                 $$0 = 0;
                 STACKTOP = sp;return ($$0|0);
                }
                $33 = ((($z)) + 1120|0);
                HEAP32[$33>>2] = 65536;
                $34 = ($num|0)>(0);
                if ($34) {
                 $i$34 = 0;
                } else {
                 $$0 = 1;
                 STACKTOP = sp;return ($$0|0);
                }
                while(1) {
                 $35 = (($sizelist) + ($i$34)|0);
                 $36 = HEAP8[$35>>0]|0;
                 $37 = $36&255;
                 $38 = ($36<<24>>24)==(0);
                 if (!($38)) {
                  $39 = (($next_code) + ($37<<2)|0);
                  $40 = HEAP32[$39>>2]|0;
                  $41 = (((($z)) + 1024|0) + ($37<<1)|0);
                  $42 = HEAP16[$41>>1]|0;
                  $43 = $42&65535;
                  $44 = (($40) - ($43))|0;
                  $45 = (((($z)) + 1124|0) + ($37<<1)|0);
                  $46 = HEAP16[$45>>1]|0;
                  $47 = $46&65535;
                  $48 = (($44) + ($47))|0;
                  $49 = $37 << 9;
                  $50 = $49 | $i$34;
                  $51 = $50&65535;
                  $52 = (((($z)) + 1156|0) + ($48)|0);
                  HEAP8[$52>>0] = $36;
                  $53 = $i$34&65535;
                  $54 = (((($z)) + 1444|0) + ($48<<1)|0);
                  HEAP16[$54>>1] = $53;
                  $55 = ($36&255)<(10);
                  do {
                   if ($55) {
                    $56 = HEAP32[$39>>2]|0;
                    $57 = (_stbi__bit_reverse($56,$37)|0);
                    $58 = ($57|0)<(512);
                    if (!($58)) {
                     break;
                    }
                    $59 = 1 << $37;
                    $k1$03 = $57;
                    while(1) {
                     $60 = (($z) + ($k1$03<<1)|0);
                     HEAP16[$60>>1] = $51;
                     $61 = (($k1$03) + ($59))|0;
                     $62 = ($61|0)<(512);
                     if ($62) {
                      $k1$03 = $61;
                     } else {
                      break;
                     }
                    }
                   }
                  } while(0);
                  $63 = HEAP32[$39>>2]|0;
                  $64 = (($63) + 1)|0;
                  HEAP32[$39>>2] = $64;
                 }
                 $65 = (($i$34) + 1)|0;
                 $exitcond = ($65|0)==($num|0);
                 if ($exitcond) {
                  $$0 = 1;
                  break;
                 } else {
                  $i$34 = $65;
                 }
                }
                STACKTOP = sp;return ($$0|0);
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 _stbi__err(26984);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__compute_huffman_codes($a) {
 $a = $a|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $codelength_sizes = 0, $exitcond = 0, $i$08 = 0, $lencodes = 0, $n$0$be = 0, $n$0$lcssa = 0, $n$06 = 0, $not$ = 0, $z_codelength = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2496|0;
 $z_codelength = sp;
 $lencodes = sp + 2039|0;
 $codelength_sizes = sp + 2020|0;
 $0 = (_stbi__zreceive($a,5)|0);
 $1 = (($0) + 257)|0;
 $2 = (_stbi__zreceive($a,5)|0);
 $3 = (($2) + 1)|0;
 $4 = (_stbi__zreceive($a,4)|0);
 $5 = (($4) + 4)|0;
 dest=$codelength_sizes; stop=dest+19|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = (($4) + 3)|0;
  $i$08 = 0;
  while(1) {
   $8 = (_stbi__zreceive($a,3)|0);
   $9 = $8&255;
   $10 = (26904 + ($i$08)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = (($codelength_sizes) + ($12)|0);
   HEAP8[$13>>0] = $9;
   $14 = (($i$08) + 1)|0;
   $exitcond = ($i$08|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $i$08 = $14;
   }
  }
 }
 $15 = (_stbi__zbuild_huffman($z_codelength,$codelength_sizes,19)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (($3) + ($1))|0;
 $18 = ($17|0)>(0);
 L9: do {
  if ($18) {
   $n$06 = 0;
   L10: while(1) {
    $19 = (_stbi__zhuffman_decode($a,$z_codelength)|0);
    $20 = ($19>>>0)>(18);
    if ($20) {
     break;
    }
    $21 = ($19|0)<(16);
    do {
     if ($21) {
      $22 = $19&255;
      $23 = (($n$06) + 1)|0;
      $24 = (($lencodes) + ($n$06)|0);
      HEAP8[$24>>0] = $22;
      $n$0$be = $23;
     } else {
      if ((($19|0) == 16)) {
       $25 = (_stbi__zreceive($a,2)|0);
       $26 = (($25) + 3)|0;
       $27 = (($lencodes) + ($n$06)|0);
       $28 = (($n$06) + -1)|0;
       $29 = (($lencodes) + ($28)|0);
       $30 = HEAP8[$29>>0]|0;
       _memset(($27|0),($30|0),($26|0))|0;
       $31 = (($26) + ($n$06))|0;
       $n$0$be = $31;
       break;
      } else if ((($19|0) == 17)) {
       $33 = (_stbi__zreceive($a,3)|0);
       $34 = (($33) + 3)|0;
       $35 = (($lencodes) + ($n$06)|0);
       _memset(($35|0),0,($34|0))|0;
       $36 = (($34) + ($n$06))|0;
       $n$0$be = $36;
       break;
      } else if ((($19|0) == 18)) {
       $37 = (_stbi__zreceive($a,7)|0);
       $38 = (($37) + 11)|0;
       $39 = (($lencodes) + ($n$06)|0);
       _memset(($39|0),0,($38|0))|0;
       $40 = (($38) + ($n$06))|0;
       $n$0$be = $40;
       break;
      } else {
       label = 14;
       break L10;
      }
     }
    } while(0);
    $32 = ($n$0$be|0)<($17|0);
    if ($32) {
     $n$06 = $n$0$be;
    } else {
     $n$0$lcssa = $n$0$be;
     break L9;
    }
   }
   if ((label|0) == 14) {
    ___assert_fail((26944|0),(25096|0),3709,(26952|0));
    // unreachable;
   }
   _stbi__err(26928);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $n$0$lcssa = 0;
  }
 } while(0);
 $41 = ($n$0$lcssa|0)==($17|0);
 if (!($41)) {
  _stbi__err(26928);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $42 = ((($a)) + 32|0);
 $43 = (_stbi__zbuild_huffman($42,$lencodes,$1)|0);
 $44 = ($43|0)==(0);
 if ($44) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = ((($a)) + 2052|0);
 $46 = (($lencodes) + ($1)|0);
 $47 = (_stbi__zbuild_huffman($45,$46,$3)|0);
 $not$ = ($47|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__parse_huffman_block($a) {
 $a = $a|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dist$0 = 0;
 var $len$0 = 0, $len$2 = 0, $p$0 = 0, $scevgep = 0, $scevgep14 = 0, $zout$0 = 0, $zout$0$lcssa = 0, $zout$1 = 0, $zout$2 = 0, $zout$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($a)) + 32|0);
 $3 = ((($a)) + 24|0);
 $4 = ((($a)) + 2052|0);
 $5 = ((($a)) + 20|0);
 $6 = ((($a)) + 24|0);
 $zout$0 = $1;
 while(1) {
  $9 = (_stbi__zhuffman_decode($a,$2)|0);
  $10 = ($9|0)<(256);
  if ($10) {
   $11 = ($9|0)<(0);
   if ($11) {
    label = 6;
    break;
   }
   $12 = HEAP32[$3>>2]|0;
   $13 = ($zout$0>>>0)<($12>>>0);
   if ($13) {
    $zout$1 = $zout$0;
   } else {
    $14 = (_stbi__zexpand($a,$zout$0,1)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$0 = 0;
     label = 28;
     break;
    }
    $16 = HEAP32[$0>>2]|0;
    $zout$1 = $16;
   }
   $17 = $9&255;
   $18 = ((($zout$1)) + 1|0);
   HEAP8[$zout$1>>0] = $17;
   $zout$0 = $18;
   continue;
  }
  $19 = ($9|0)==(256);
  if ($19) {
   $zout$0$lcssa = $zout$0;
   label = 12;
   break;
  }
  $20 = (($9) + -257)|0;
  $21 = (26208 + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($9) + -265)|0;
  $24 = ($23>>>0)<(20);
  if ($24) {
   $25 = (26336 + ($20<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_stbi__zreceive($a,$26)|0);
   $28 = (($27) + ($22))|0;
   $len$0 = $28;
  } else {
   $len$0 = $22;
  }
  $29 = (_stbi__zhuffman_decode($a,$4)|0);
  $30 = ($29|0)<(0);
  if ($30) {
   label = 16;
   break;
  }
  $31 = (26464 + ($29<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + -4)|0;
  $34 = ($33>>>0)<(26);
  if ($34) {
   $35 = (26592 + ($29<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (_stbi__zreceive($a,$36)|0);
   $38 = (($37) + ($32))|0;
   $dist$0 = $38;
  } else {
   $dist$0 = $32;
  }
  $39 = HEAP32[$5>>2]|0;
  $40 = $zout$0;
  $41 = $39;
  $42 = (($40) - ($41))|0;
  $43 = ($42|0)<($dist$0|0);
  if ($43) {
   label = 20;
   break;
  }
  $44 = (($zout$0) + ($len$0)|0);
  $45 = HEAP32[$6>>2]|0;
  $46 = ($44>>>0)>($45>>>0);
  if ($46) {
   $47 = (_stbi__zexpand($a,$zout$0,$len$0)|0);
   $48 = ($47|0)==(0);
   if ($48) {
    $$0 = 0;
    label = 28;
    break;
   }
   $49 = HEAP32[$0>>2]|0;
   $zout$2 = $49;
  } else {
   $zout$2 = $zout$0;
  }
  $50 = (0 - ($dist$0))|0;
  $8 = (($zout$2) + ($50)|0);
  $51 = ($dist$0|0)==(1);
  $52 = ($len$0|0)==(0);
  if ($51) {
   if ($52) {
    $zout$0 = $zout$2;
    continue;
   }
   $7 = HEAP8[$8>>0]|0;
   _memset(($zout$2|0),($7|0),($len$0|0))|0;
   $scevgep14 = (($zout$2) + ($len$0)|0);
   $zout$0 = $scevgep14;
   continue;
  }
  if ($52) {
   $zout$0 = $zout$2;
   continue;
  } else {
   $len$2 = $len$0;$p$0 = $8;$zout$4 = $zout$2;
  }
  while(1) {
   $53 = ((($p$0)) + 1|0);
   $54 = HEAP8[$p$0>>0]|0;
   $55 = ((($zout$4)) + 1|0);
   HEAP8[$zout$4>>0] = $54;
   $56 = (($len$2) + -1)|0;
   $57 = ($56|0)==(0);
   if ($57) {
    break;
   } else {
    $len$2 = $56;$p$0 = $53;$zout$4 = $55;
   }
  }
  $scevgep = (($zout$2) + ($len$0)|0);
  $zout$0 = $scevgep;
 }
 if ((label|0) == 6) {
  _stbi__err(26184);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 12) {
  HEAP32[$0>>2] = $zout$0$lcssa;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 16) {
  _stbi__err(26184);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 20) {
  _stbi__err(26720);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 28) {
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__zhuffman_decode($a,$z) {
 $a = $a|0;
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(16);
 if ($2) {
  _stbi__fill_bits($a);
 }
 $3 = ((($a)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 511;
 $6 = (($z) + ($5<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ($7<<16>>16)==(0);
 if ($9) {
  $15 = (_stbi__zhuffman_decode_slowpath($a,$z)|0);
  $$0 = $15;
  return ($$0|0);
 } else {
  $10 = $8 >>> 9;
  $11 = $4 >>> $10;
  HEAP32[$3>>2] = $11;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) - ($10))|0;
  HEAP32[$0>>2] = $13;
  $14 = $8 & 511;
  $$0 = $14;
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__zexpand($z,$zout,$n) {
 $z = $z|0;
 $zout = $zout|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $limit$0 = 0, $limit$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 16|0);
 HEAP32[$0>>2] = $zout;
 $1 = ((($z)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  _stbi__err(26736);
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($z)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $zout;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = ((($z)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10;
 $12 = (($11) - ($7))|0;
 $13 = (($8) + ($n))|0;
 $limit$0 = $12;
 while(1) {
  $14 = ($13|0)>($limit$0|0);
  $15 = $limit$0 << 1;
  if ($14) {
   $limit$0 = $15;
  } else {
   $limit$0$lcssa = $limit$0;
   break;
  }
 }
 $16 = HEAP32[$4>>2]|0;
 $17 = (_realloc($16,$limit$0$lcssa)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  _stbi__err(25000);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$4>>2] = $17;
  $19 = (($17) + ($8)|0);
  HEAP32[$0>>2] = $19;
  $20 = (($17) + ($limit$0$lcssa)|0);
  HEAP32[$9>>2] = $20;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__fill_bits($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 12|0);
 $1 = ((($z)) + 8|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = 1 << $3;
  $5 = ($2>>>0)<($4>>>0);
  if (!($5)) {
   label = 3;
   break;
  }
  $6 = (_stbi__zget8($z)|0);
  $7 = $6&255;
  $8 = HEAP32[$1>>2]|0;
  $9 = $7 << $8;
  $10 = HEAP32[$0>>2]|0;
  $11 = $10 | $9;
  HEAP32[$0>>2] = $11;
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + 8)|0;
  HEAP32[$1>>2] = $13;
  $14 = ($13|0)<(25);
  if (!($14)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  ___assert_fail((26848|0),(25096|0),3553,(26888|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  return;
 }
}
function _stbi__zhuffman_decode_slowpath($a,$z) {
 $a = $a|0;
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s$0 = 0, $s$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_stbi__bit_reverse($1,16)|0);
 $s$0 = 10;
 while(1) {
  $3 = (((($z)) + 1056|0) + ($s$0<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)<($4|0);
  $6 = (($s$0) + 1)|0;
  if ($5) {
   $s$0$lcssa = $s$0;
   break;
  } else {
   $s$0 = $6;
  }
 }
 $7 = ($s$0$lcssa|0)==(16);
 if ($7) {
  $$0 = -1;
  return ($$0|0);
 }
 $8 = (16 - ($s$0$lcssa))|0;
 $9 = $2 >> $8;
 $10 = (((($z)) + 1024|0) + ($s$0$lcssa<<1)|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($9) - ($12))|0;
 $14 = (((($z)) + 1124|0) + ($s$0$lcssa<<1)|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = (($13) + ($16))|0;
 $18 = (((($z)) + 1156|0) + ($17)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = ($20|0)==($s$0$lcssa|0);
 if (!($21)) {
  ___assert_fail((26760|0),(25096|0),3581,(26776|0));
  // unreachable;
 }
 $22 = HEAP32[$0>>2]|0;
 $23 = $22 >>> $s$0$lcssa;
 HEAP32[$0>>2] = $23;
 $24 = ((($a)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) - ($s$0$lcssa))|0;
 HEAP32[$24>>2] = $26;
 $27 = (((($z)) + 1444|0) + ($17<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $$0 = $29;
 return ($$0|0);
}
function _stbi__bit_reverse($v,$bits) {
 $v = $v|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bits|0)<(17);
 if ($0) {
  $1 = (_stbi__bitreverse16($v)|0);
  $2 = (16 - ($bits))|0;
  $3 = $1 >> $2;
  return ($3|0);
 } else {
  ___assert_fail((26808|0),(25096|0),3471,(26824|0));
  // unreachable;
 }
 return (0)|0;
}
function _stbi__bitreverse16($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $n >>> 1;
 $1 = $0 & 21845;
 $2 = $n << 1;
 $3 = $2 & 43690;
 $4 = $1 | $3;
 $5 = $4 >>> 2;
 $6 = $5 & 13107;
 $7 = $4 << 2;
 $8 = $7 & 52428;
 $9 = $6 | $8;
 $10 = $9 >>> 4;
 $11 = $10 & 3855;
 $12 = $9 << 4;
 $13 = $12 & 61680;
 $14 = $11 | $13;
 $15 = $14 >>> 8;
 $16 = $14 << 8;
 $17 = $16 & 65280;
 $18 = $17 | $15;
 return ($18|0);
}
function _stbi__zget8($z) {
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$z>>2]|0;
 $1 = ((($z)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)<($2>>>0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 1|0);
 HEAP32[$z>>2] = $4;
 $5 = HEAP8[$0>>0]|0;
 $$0 = $5;
 return ($$0|0);
}
function _stbi__load_main($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__jpeg_test($s)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = (_stbi__jpeg_load($s,$x,$y,$comp,$req_comp)|0);
  $$0 = $2;
  return ($$0|0);
 }
 $3 = (_stbi__png_test($s)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = (_stbi__png_load($s,$x,$y,$comp,$req_comp)|0);
  $$0 = $5;
  return ($$0|0);
 }
 $6 = (_stbi__bmp_test($s)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = (_stbi__bmp_load($s,$x,$y,$comp,$req_comp)|0);
  $$0 = $8;
  return ($$0|0);
 }
 $9 = (_stbi__gif_test($s)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = (_stbi__gif_load($s,$x,$y,$comp,$req_comp)|0);
  $$0 = $11;
  return ($$0|0);
 }
 $12 = (_stbi__psd_test($s)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = (_stbi__psd_load($s,$x,$y,$comp,$req_comp)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (_stbi__pic_test($s)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $17 = (_stbi__pic_load($s,$x,$y,$comp,$req_comp)|0);
  $$0 = $17;
  return ($$0|0);
 }
 $18 = (_stbi__pnm_test($s)|0);
 $19 = ($18|0)==(0);
 if (!($19)) {
  $20 = (_stbi__pnm_load($s,$x,$y,$comp,$req_comp)|0);
  $$0 = $20;
  return ($$0|0);
 }
 $21 = (_stbi__tga_test($s)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  _stbi__err(24648);
  $$0 = 0;
  return ($$0|0);
 } else {
  $23 = (_stbi__tga_load($s,$x,$y,$comp,$req_comp)|0);
  $$0 = $23;
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__jpeg_test($s) {
 $s = $s|0;
 var $0 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18192|0;
 $j = sp;
 HEAP32[$j>>2] = $s;
 _stbi__setup_jpeg($j);
 $0 = (_stbi__decode_jpeg_header($j,1)|0);
 _stbi__rewind($s);
 STACKTOP = sp;return ($0|0);
}
function _stbi__jpeg_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18192|0;
 $j = sp;
 HEAP32[$j>>2] = $s;
 _stbi__setup_jpeg($j);
 $0 = (_load_jpeg_image($j,$x,$y,$comp,$req_comp)|0);
 STACKTOP = sp;return ($0|0);
}
function _stbi__png_test($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__check_png_header($s)|0);
 _stbi__rewind($s);
 return ($0|0);
}
function _stbi__png_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp;
 HEAP32[$p>>2] = $s;
 $0 = (_stbi__do_png($p,$x,$y,$comp,$req_comp)|0);
 STACKTOP = sp;return ($0|0);
}
function _stbi__bmp_test($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__bmp_test_raw($s)|0);
 _stbi__rewind($s);
 return ($0|0);
}
function _stbi__bmp_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $$0 = 0, $$31 = 0, $$32 = 0, $$33 = 0, $$off = 0, $$ph = 0, $$sum = 0, $$sum30 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $acount$0 = 0;
 var $ashift$0 = 0, $bcount$0 = 0, $bshift$0 = 0, $easy$042 = 0, $exitcond = 0, $gcount$0 = 0, $gshift$0 = 0, $i$166 = 0, $i$258 = 0, $i$373 = 0, $i$469 = 0, $i$555 = 0, $ispos = 0, $j$064 = 0, $j$177 = 0, $j$256 = 0, $ma$0 = 0, $ma$1 = 0, $mb$0 = 0, $mb$1 = 0;
 var $mg$0 = 0, $mg$1 = 0, $mr$0 = 0, $mr$1 = 0, $neg = 0, $or$cond = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond35 = 0, $out$0 = 0, $pal = 0, $psize$0 = 0, $rcount$0 = 0, $req_comp$ = 0, $rshift$0 = 0, $v$0 = 0;
 var $v2$0 = 0, $width$0 = 0, $z$065 = 0, $z$159 = 0, $z$2 = 0, $z$3 = 0, $z$4 = 0, $z1$078 = 0, $z1$174 = 0, $z1$2 = 0, $z1$370 = 0, $z1$4 = 0, $z1$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $pal = sp;
 $0 = (_stbi__get8($s)|0);
 $1 = ($0<<24>>24)==(66);
 if ($1) {
  $2 = (_stbi__get8($s)|0);
  $3 = ($2<<24>>24)==(77);
  if ($3) {
   (_stbi__get32le($s)|0);
   (_stbi__get16le($s)|0);
   (_stbi__get16le($s)|0);
   $4 = (_stbi__get32le($s)|0);
   $5 = (_stbi__get32le($s)|0);
   $6 = ($5|0)==(12);
   switch ($5|0) {
   case 12: case 40: case 56: case 108: case 124:  {
    break;
   }
   default: {
    _stbi__err(27496);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   }
   $7 = ($5|0)==(12);
   if ($7) {
    $8 = (_stbi__get16le($s)|0);
    HEAP32[$s>>2] = $8;
    $9 = (_stbi__get16le($s)|0);
    $10 = ((($s)) + 4|0);
    HEAP32[$10>>2] = $9;
   } else {
    $11 = (_stbi__get32le($s)|0);
    HEAP32[$s>>2] = $11;
    $12 = (_stbi__get32le($s)|0);
    $13 = ((($s)) + 4|0);
    HEAP32[$13>>2] = $12;
   }
   $14 = (_stbi__get16le($s)|0);
   $15 = ($14|0)==(1);
   if (!($15)) {
    _stbi__err(27512);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $16 = (_stbi__get16le($s)|0);
   $17 = ($16|0)==(1);
   if ($17) {
    _stbi__err(27520);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $18 = ((($s)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)>(0);
   $ispos = ($19|0)>(-1);
   $neg = (0 - ($19))|0;
   $21 = $ispos ? $19 : $neg;
   HEAP32[$18>>2] = $21;
   do {
    if ($7) {
     $22 = ($16|0)<(24);
     if ($22) {
      $23 = (($4) + -38)|0;
      $24 = (($23|0) / 3)&-1;
      $ma$1 = 0;$mb$1 = 0;$mg$1 = 0;$mr$1 = 0;$psize$0 = $24;
     } else {
      $ma$1 = 0;$mb$1 = 0;$mg$1 = 0;$mr$1 = 0;$psize$0 = 0;
     }
    } else {
     $25 = (_stbi__get32le($s)|0);
     $$off = (($25) + -1)|0;
     $26 = ($$off>>>0)<(2);
     if ($26) {
      _stbi__err(27536);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     (_stbi__get32le($s)|0);
     (_stbi__get32le($s)|0);
     (_stbi__get32le($s)|0);
     (_stbi__get32le($s)|0);
     (_stbi__get32le($s)|0);
     $27 = $5 & -17;
     if ((($27|0) == 108)) {
      $35 = ($5|0)==(124);
      $36 = (_stbi__get32le($s)|0);
      $37 = (_stbi__get32le($s)|0);
      $38 = (_stbi__get32le($s)|0);
      $39 = (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      (_stbi__get32le($s)|0);
      if ($35) {
       (_stbi__get32le($s)|0);
       (_stbi__get32le($s)|0);
       (_stbi__get32le($s)|0);
       (_stbi__get32le($s)|0);
       $ma$0 = $39;$mb$0 = $38;$mg$0 = $37;$mr$0 = $36;
      } else {
       $ma$0 = $39;$mb$0 = $38;$mg$0 = $37;$mr$0 = $36;
      }
     } else if ((($27|0) == 40)) {
      $28 = ($5|0)==(56);
      if ($28) {
       (_stbi__get32le($s)|0);
       (_stbi__get32le($s)|0);
       (_stbi__get32le($s)|0);
       (_stbi__get32le($s)|0);
      }
      $29 = ($16|0)==(32);
      if ((($16|0) == 16) | (($16|0) == 32)) {
       if ((($25|0) == 0)) {
        $$ = $29 ? -16777216 : 0;
        $$31 = $29 ? 255 : 31;
        $$32 = $29 ? 65280 : 992;
        $$33 = $29 ? 16711680 : 31744;
        $ma$1 = $$;$mb$1 = $$31;$mg$1 = $$32;$mr$1 = $$33;$psize$0 = 0;
        break;
       } else if ((($25|0) == 3)) {
        $30 = (_stbi__get32le($s)|0);
        $31 = (_stbi__get32le($s)|0);
        $32 = (_stbi__get32le($s)|0);
        $33 = ($30|0)==($31|0);
        $34 = ($31|0)==($32|0);
        $or$cond = $33 & $34;
        if (!($or$cond)) {
         $ma$1 = 0;$mb$1 = $32;$mg$1 = $31;$mr$1 = $30;$psize$0 = 0;
         break;
        }
        _stbi__err(27512);
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       } else {
        _stbi__err(27512);
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
      } else {
       $ma$0 = 0;$mb$0 = 0;$mg$0 = 0;$mr$0 = 0;
      }
     } else {
      ___assert_fail((27544|0),(25096|0),4658,(27576|0));
      // unreachable;
     }
     $40 = ($16|0)<(16);
     if ($40) {
      $41 = (($4) + -14)|0;
      $42 = (($41) - ($5))|0;
      $43 = $42 >> 2;
      $ma$1 = $ma$0;$mb$1 = $mb$0;$mg$1 = $mg$0;$mr$1 = $mr$0;$psize$0 = $43;
     } else {
      $ma$1 = $ma$0;$mb$1 = $mb$0;$mg$1 = $mg$0;$mr$1 = $mr$0;$psize$0 = 0;
     }
    }
   } while(0);
   $44 = ($ma$1|0)!=(0);
   $45 = $44 ? 4 : 3;
   $46 = ((($s)) + 8|0);
   HEAP32[$46>>2] = $45;
   $47 = ($req_comp|0)==(0);
   $48 = ($req_comp|0)>(2);
   $req_comp$ = $48 ? $req_comp : $45;
   $49 = HEAP32[$s>>2]|0;
   $50 = Math_imul($49, $req_comp$)|0;
   $51 = HEAP32[$18>>2]|0;
   $52 = Math_imul($50, $51)|0;
   $53 = (_stbi__malloc($52)|0);
   $54 = ($53|0)==(0|0);
   if ($54) {
    _stbi__err(25000);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $55 = ($16|0)<(16);
   if ($55) {
    $56 = ($psize$0|0)==(0);
    $57 = ($psize$0|0)>(256);
    $or$cond19 = $56 | $57;
    if ($or$cond19) {
     _free($53);
     _stbi__err(27592);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    $58 = ($psize$0|0)>(0);
    if ($58) {
     $i$166 = 0;
     while(1) {
      $59 = (_stbi__get8($s)|0);
      $60 = (((($pal) + ($i$166<<2)|0)) + 2|0);
      HEAP8[$60>>0] = $59;
      $61 = (_stbi__get8($s)|0);
      $62 = (((($pal) + ($i$166<<2)|0)) + 1|0);
      HEAP8[$62>>0] = $61;
      $63 = (_stbi__get8($s)|0);
      $64 = (($pal) + ($i$166<<2)|0);
      HEAP8[$64>>0] = $63;
      if (!($6)) {
       (_stbi__get8($s)|0);
      }
      $65 = (((($pal) + ($i$166<<2)|0)) + 3|0);
      HEAP8[$65>>0] = -1;
      $66 = (($i$166) + 1)|0;
      $exitcond = ($66|0)==($psize$0|0);
      if ($exitcond) {
       break;
      } else {
       $i$166 = $66;
      }
     }
    }
    $67 = (($4) + -14)|0;
    $68 = (($67) - ($5))|0;
    $69 = $7 ? 3 : 4;
    $70 = Math_imul($psize$0, $69)|0;
    $71 = (($68) - ($70))|0;
    _stbi__skip($s,$71);
    $72 = ($16|0)==(4);
    do {
     if ($72) {
      $73 = HEAP32[$s>>2]|0;
      $74 = (($73) + 1)|0;
      $75 = $74 >>> 1;
      $width$0 = $75;
     } else {
      $76 = ($16|0)==(8);
      if ($76) {
       $77 = HEAP32[$s>>2]|0;
       $width$0 = $77;
       break;
      }
      _free($53);
      _stbi__err(27600);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $78 = (0 - ($width$0))|0;
    $79 = $78 & 3;
    $80 = HEAP32[$18>>2]|0;
    $81 = ($80|0)>(0);
    if ($81) {
     $82 = ($req_comp$|0)==(4);
     $83 = ($16|0)==(8);
     $j$064 = 0;$z$065 = 0;
     while(1) {
      $84 = HEAP32[$s>>2]|0;
      $85 = ($84|0)>(0);
      L114: do {
       if ($85) {
        $i$258 = 0;$z$159 = $z$065;
        while(1) {
         $86 = (_stbi__get8($s)|0);
         $87 = $86&255;
         $88 = $87 & 15;
         $89 = $87 >>> 4;
         $v$0 = $72 ? $89 : $87;
         $v2$0 = $72 ? $88 : 0;
         $90 = (($pal) + ($v$0<<2)|0);
         $91 = HEAP8[$90>>0]|0;
         $92 = (($z$159) + 1)|0;
         $93 = (($53) + ($z$159)|0);
         HEAP8[$93>>0] = $91;
         $94 = (((($pal) + ($v$0<<2)|0)) + 1|0);
         $95 = HEAP8[$94>>0]|0;
         $96 = (($z$159) + 2)|0;
         $97 = (($53) + ($92)|0);
         HEAP8[$97>>0] = $95;
         $98 = (((($pal) + ($v$0<<2)|0)) + 2|0);
         $99 = HEAP8[$98>>0]|0;
         $100 = (($z$159) + 3)|0;
         $101 = (($53) + ($96)|0);
         HEAP8[$101>>0] = $99;
         if ($82) {
          $102 = (($z$159) + 4)|0;
          $103 = (($53) + ($100)|0);
          HEAP8[$103>>0] = -1;
          $z$2 = $102;
         } else {
          $z$2 = $100;
         }
         $104 = $i$258 | 1;
         $105 = HEAP32[$s>>2]|0;
         $106 = ($104|0)==($105|0);
         if ($106) {
          $z$4 = $z$2;
          break L114;
         }
         if ($83) {
          $107 = (_stbi__get8($s)|0);
          $108 = $107&255;
          $110 = $108;
         } else {
          $110 = $v2$0;
         }
         $109 = (($pal) + ($110<<2)|0);
         $111 = HEAP8[$109>>0]|0;
         $112 = (($z$2) + 1)|0;
         $113 = (($53) + ($z$2)|0);
         HEAP8[$113>>0] = $111;
         $114 = (((($pal) + ($110<<2)|0)) + 1|0);
         $115 = HEAP8[$114>>0]|0;
         $116 = (($z$2) + 2)|0;
         $117 = (($53) + ($112)|0);
         HEAP8[$117>>0] = $115;
         $118 = (((($pal) + ($110<<2)|0)) + 2|0);
         $119 = HEAP8[$118>>0]|0;
         $120 = (($z$2) + 3)|0;
         $121 = (($53) + ($116)|0);
         HEAP8[$121>>0] = $119;
         if ($82) {
          $122 = (($z$2) + 4)|0;
          $123 = (($53) + ($120)|0);
          HEAP8[$123>>0] = -1;
          $z$3 = $122;
         } else {
          $z$3 = $120;
         }
         $124 = (($i$258) + 2)|0;
         $125 = HEAP32[$s>>2]|0;
         $126 = ($124|0)<($125|0);
         if ($126) {
          $i$258 = $124;$z$159 = $z$3;
         } else {
          $z$4 = $z$3;
          break;
         }
        }
       } else {
        $z$4 = $z$065;
       }
      } while(0);
      _stbi__skip($s,$79);
      $127 = (($j$064) + 1)|0;
      $128 = HEAP32[$18>>2]|0;
      $129 = ($127|0)<($128|0);
      if ($129) {
       $j$064 = $127;$z$065 = $z$4;
      } else {
       break;
      }
     }
    }
   } else {
    $130 = (($4) + -14)|0;
    $131 = (($130) - ($5))|0;
    _stbi__skip($s,$131);
    if ((($16|0) == 24)) {
     $136 = HEAP32[$s>>2]|0;
     $137 = Math_imul($136, -3)|0;
     $138 = $137 & 3;
     $211 = $138;$249 = 1;$acount$0 = 0;$ashift$0 = 0;$bcount$0 = 0;$bshift$0 = 0;$easy$042 = 1;$gcount$0 = 0;$gshift$0 = 0;$rcount$0 = 0;$rshift$0 = 0;
    } else if ((($16|0) == 32)) {
     $139 = ($mb$1|0)==(255);
     $140 = ($mg$1|0)==(65280);
     $or$cond21 = $139 & $140;
     $141 = ($mr$1|0)==(16711680);
     $or$cond23 = $or$cond21 & $141;
     $142 = ($ma$1|0)==(-16777216);
     $or$cond25 = $142 & $or$cond23;
     if ($or$cond25) {
      $211 = 0;$249 = 1;$acount$0 = 0;$ashift$0 = 0;$bcount$0 = 0;$bshift$0 = 0;$easy$042 = 2;$gcount$0 = 0;$gshift$0 = 0;$rcount$0 = 0;$rshift$0 = 0;
     } else {
      $$ph = 0;
      label = 62;
     }
    } else if ((($16|0) == 16)) {
     $132 = HEAP32[$s>>2]|0;
     $133 = $132 << 1;
     $134 = (0 - ($133))|0;
     $135 = $134 & 2;
     $$ph = $135;
     label = 62;
    } else {
     $$ph = 0;
     label = 62;
    }
    do {
     if ((label|0) == 62) {
      $143 = ($mr$1|0)!=(0);
      $144 = ($mg$1|0)!=(0);
      $or$cond27 = $144 & $143;
      $145 = ($mb$1|0)!=(0);
      $or$cond29 = $145 & $or$cond27;
      if ($or$cond29) {
       $146 = (_stbi__high_bit($mr$1)|0);
       $147 = (($146) + -7)|0;
       $148 = (_stbi__bitcount($mr$1)|0);
       $149 = (_stbi__high_bit($mg$1)|0);
       $150 = (($149) + -7)|0;
       $151 = (_stbi__bitcount($mg$1)|0);
       $152 = (_stbi__high_bit($mb$1)|0);
       $153 = (($152) + -7)|0;
       $154 = (_stbi__bitcount($mb$1)|0);
       $155 = (_stbi__high_bit($ma$1)|0);
       $156 = (($155) + -7)|0;
       $157 = (_stbi__bitcount($ma$1)|0);
       $211 = $$ph;$249 = 0;$acount$0 = $157;$ashift$0 = $156;$bcount$0 = $154;$bshift$0 = $153;$easy$042 = 0;$gcount$0 = $151;$gshift$0 = $150;$rcount$0 = $148;$rshift$0 = $147;
       break;
      }
      _free($53);
      _stbi__err(27608);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    } while(0);
    $158 = HEAP32[$18>>2]|0;
    $159 = ($158|0)>(0);
    if ($159) {
     $160 = ($easy$042|0)==(2);
     $161 = ($req_comp$|0)==(4);
     $162 = ($16|0)==(16);
     $163 = ($req_comp$|0)==(4);
     $j$177 = 0;$z1$078 = 0;
     while(1) {
      $164 = HEAP32[$s>>2]|0;
      $165 = ($164|0)>(0);
      if ($249) {
       if ($165) {
        $i$373 = 0;$z1$174 = $z1$078;
        while(1) {
         $166 = (_stbi__get8($s)|0);
         $167 = (($z1$174) + 2)|0;
         $168 = (($53) + ($167)|0);
         HEAP8[$168>>0] = $166;
         $169 = (_stbi__get8($s)|0);
         $170 = (($z1$174) + 1)|0;
         $171 = (($53) + ($170)|0);
         HEAP8[$171>>0] = $169;
         $172 = (_stbi__get8($s)|0);
         $173 = (($53) + ($z1$174)|0);
         HEAP8[$173>>0] = $172;
         $174 = (($z1$174) + 3)|0;
         if ($160) {
          $175 = (_stbi__get8($s)|0);
          $176 = $175&255;
          $178 = $176;
         } else {
          $178 = 255;
         }
         if ($161) {
          $177 = $178&255;
          $179 = (($z1$174) + 4)|0;
          $180 = (($53) + ($174)|0);
          HEAP8[$180>>0] = $177;
          $z1$2 = $179;
         } else {
          $z1$2 = $174;
         }
         $181 = (($i$373) + 1)|0;
         $182 = HEAP32[$s>>2]|0;
         $183 = ($181|0)<($182|0);
         if ($183) {
          $i$373 = $181;$z1$174 = $z1$2;
         } else {
          $z1$5 = $z1$2;
          break;
         }
        }
       } else {
        $z1$5 = $z1$078;
       }
      } else {
       if ($165) {
        $i$469 = 0;$z1$370 = $z1$078;
        while(1) {
         if ($162) {
          $184 = (_stbi__get16le($s)|0);
          $187 = $184;
         } else {
          $185 = (_stbi__get32le($s)|0);
          $187 = $185;
         }
         $186 = $187 & $mr$1;
         $188 = (_stbi__shiftsigned($186,$rshift$0,$rcount$0)|0);
         $189 = $188&255;
         $190 = (($z1$370) + 1)|0;
         $191 = (($53) + ($z1$370)|0);
         HEAP8[$191>>0] = $189;
         $192 = $187 & $mg$1;
         $193 = (_stbi__shiftsigned($192,$gshift$0,$gcount$0)|0);
         $194 = $193&255;
         $195 = (($z1$370) + 2)|0;
         $196 = (($53) + ($190)|0);
         HEAP8[$196>>0] = $194;
         $197 = $187 & $mb$1;
         $198 = (_stbi__shiftsigned($197,$bshift$0,$bcount$0)|0);
         $199 = $198&255;
         $200 = (($z1$370) + 3)|0;
         $201 = (($53) + ($195)|0);
         HEAP8[$201>>0] = $199;
         if ($44) {
          $202 = $187 & $ma$1;
          $203 = (_stbi__shiftsigned($202,$ashift$0,$acount$0)|0);
          $205 = $203;
         } else {
          $205 = 255;
         }
         if ($163) {
          $204 = $205&255;
          $206 = (($z1$370) + 4)|0;
          $207 = (($53) + ($200)|0);
          HEAP8[$207>>0] = $204;
          $z1$4 = $206;
         } else {
          $z1$4 = $200;
         }
         $208 = (($i$469) + 1)|0;
         $209 = HEAP32[$s>>2]|0;
         $210 = ($208|0)<($209|0);
         if ($210) {
          $i$469 = $208;$z1$370 = $z1$4;
         } else {
          $z1$5 = $z1$4;
          break;
         }
        }
       } else {
        $z1$5 = $z1$078;
       }
      }
      _stbi__skip($s,$211);
      $212 = (($j$177) + 1)|0;
      $213 = HEAP32[$18>>2]|0;
      $214 = ($212|0)<($213|0);
      if ($214) {
       $j$177 = $212;$z1$078 = $z1$5;
      } else {
       break;
      }
     }
    }
   }
   if ($20) {
    $215 = HEAP32[$18>>2]|0;
    $216 = $215 >> 1;
    $217 = ($216|0)>(0);
    if ($217) {
     $218 = HEAP32[$s>>2]|0;
     $219 = Math_imul($218, $req_comp$)|0;
     $220 = ($219|0)>(0);
     $221 = HEAP32[$18>>2]|0;
     $222 = $221 >> 1;
     $227 = $215;$j$256 = 0;
     while(1) {
      $223 = Math_imul($j$256, $req_comp$)|0;
      $224 = Math_imul($223, $218)|0;
      $225 = $j$256 ^ -1;
      $226 = (($227) + ($225))|0;
      $228 = Math_imul($226, $req_comp$)|0;
      $229 = Math_imul($228, $218)|0;
      if ($220) {
       $230 = HEAP32[$s>>2]|0;
       $231 = Math_imul($230, $req_comp$)|0;
       $i$555 = 0;
       while(1) {
        $$sum = (($i$555) + ($224))|0;
        $232 = (($53) + ($$sum)|0);
        $233 = HEAP8[$232>>0]|0;
        $$sum30 = (($i$555) + ($229))|0;
        $234 = (($53) + ($$sum30)|0);
        $235 = HEAP8[$234>>0]|0;
        HEAP8[$232>>0] = $235;
        HEAP8[$234>>0] = $233;
        $236 = (($i$555) + 1)|0;
        $237 = ($236|0)<($231|0);
        if ($237) {
         $i$555 = $236;
        } else {
         break;
        }
       }
      }
      $238 = (($j$256) + 1)|0;
      $239 = ($238|0)<($222|0);
      if ($239) {
       $227 = $221;$j$256 = $238;
      } else {
       break;
      }
     }
    }
   }
   $240 = ($req_comp$|0)==($req_comp|0);
   $or$cond35 = $47 | $240;
   if ($or$cond35) {
    $out$0 = $53;
   } else {
    $241 = HEAP32[$s>>2]|0;
    $242 = HEAP32[$18>>2]|0;
    $243 = (_stbi__convert_format($53,$req_comp$,$req_comp,$241,$242)|0);
    $244 = ($243|0)==(0|0);
    if ($244) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $out$0 = $243;
    }
   }
   $245 = HEAP32[$s>>2]|0;
   HEAP32[$x>>2] = $245;
   $246 = HEAP32[$18>>2]|0;
   HEAP32[$y>>2] = $246;
   $247 = ($comp|0)==(0|0);
   if ($247) {
    $$0 = $out$0;
    STACKTOP = sp;return ($$0|0);
   }
   $248 = HEAP32[$46>>2]|0;
   HEAP32[$comp>>2] = $248;
   $$0 = $out$0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _stbi__err(27488);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__gif_test($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__gif_test_raw($s)|0);
 _stbi__rewind($s);
 return ($0|0);
}
function _stbi__gif_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $g = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18512|0;
 $g = sp;
 _memset(($g|0),0,18508)|0;
 $0 = (_stbi__gif_load_next($s,$g,$comp,$req_comp)|0);
 $1 = ($0|0)==($s|0);
 $$ = $1 ? 0 : $0;
 $2 = ($$|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($$|0);
 }
 $3 = HEAP32[$g>>2]|0;
 HEAP32[$x>>2] = $3;
 $4 = ((($g)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$y>>2] = $5;
 STACKTOP = sp;return ($$|0);
}
function _stbi__psd_test($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get32be($s)|0);
 $1 = ($0|0)==(943870035);
 $2 = $1&1;
 _stbi__rewind($s);
 return ($2|0);
}
function _stbi__psd_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $$lcssa = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $channel$033 = 0, $count$0$ph$be = 0, $count$0$ph31 = 0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $exitcond$3 = 0, $exitcond36$1 = 0, $exitcond36$2 = 0, $exitcond36$3 = 0, $exitcond39 = 0, $exitcond43 = 0;
 var $i$022 = 0, $i$118$1 = 0, $i$118$2 = 0, $i$118$3 = 0, $i$216 = 0, $i$216$1 = 0, $i$216$2 = 0, $i$216$3 = 0, $len$029 = 0, $len$126 = 0, $out$0 = 0, $p$023 = 0, $p$1$ph$be = 0, $p$1$ph32 = 0, $p$230 = 0, $p$327 = 0, $p1$019$1 = 0, $p1$019$2 = 0, $p1$019$3 = 0, $p1$117 = 0;
 var $p1$117$1 = 0, $p1$117$2 = 0, $p1$117$3 = 0, $scevgep$sum = 0, $scevgep40 = 0, $scevgep41$sum = 0, $scevgep42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get32be($s)|0);
 $1 = ($0|0)==(943870035);
 if (!($1)) {
  _stbi__err(27272);
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_stbi__get16be($s)|0);
 $3 = ($2|0)==(1);
 if (!($3)) {
  _stbi__err(27280);
  $$0 = 0;
  return ($$0|0);
 }
 _stbi__skip($s,6);
 $4 = (_stbi__get16be($s)|0);
 $5 = ($4>>>0)>(16);
 if ($5) {
  _stbi__err(27296);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_stbi__get32be($s)|0);
 $7 = (_stbi__get32be($s)|0);
 $8 = (_stbi__get16be($s)|0);
 $9 = ($8|0)==(8);
 if (!($9)) {
  _stbi__err(27320);
  $$0 = 0;
  return ($$0|0);
 }
 $10 = (_stbi__get16be($s)|0);
 $11 = ($10|0)==(3);
 if (!($11)) {
  _stbi__err(27344);
  $$0 = 0;
  return ($$0|0);
 }
 $12 = (_stbi__get32be($s)|0);
 _stbi__skip($s,$12);
 $13 = (_stbi__get32be($s)|0);
 _stbi__skip($s,$13);
 $14 = (_stbi__get32be($s)|0);
 _stbi__skip($s,$14);
 $15 = (_stbi__get16be($s)|0);
 $16 = ($15|0)>(1);
 if ($16) {
  _stbi__err(27128);
  $$0 = 0;
  return ($$0|0);
 }
 $17 = $6 << 2;
 $18 = Math_imul($17, $7)|0;
 $19 = (_stbi__malloc($18)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  _stbi__err(25000);
  $$0 = 0;
  return ($$0|0);
 }
 $21 = Math_imul($7, $6)|0;
 $22 = ($15|0)==(0);
 do {
  if ($22) {
   $55 = ($21|0)>(0);
   $56 = ($21|0)>(0);
   $57 = Math_imul($7, $6)|0;
   if ($56) {
    $i$216 = 0;$p1$117 = $19;
    while(1) {
     $58 = (_stbi__get8($s)|0);
     HEAP8[$p1$117>>0] = $58;
     $59 = (($i$216) + 1)|0;
     $60 = ((($p1$117)) + 4|0);
     $exitcond = ($59|0)==($57|0);
     if ($exitcond) {
      break;
     } else {
      $i$216 = $59;$p1$117 = $60;
     }
    }
   }
   $61 = ((($19)) + 1|0);
   $62 = ($4|0)<(1);
   if ($62) {
    if ($55) {
     $i$118$1 = 0;$p1$019$1 = $61;
    } else {
     break;
    }
    while(1) {
     HEAP8[$p1$019$1>>0] = 0;
     $69 = (($i$118$1) + 1)|0;
     $70 = ((($p1$019$1)) + 4|0);
     $exitcond36$1 = ($69|0)==($57|0);
     if ($exitcond36$1) {
      break;
     } else {
      $i$118$1 = $69;$p1$019$1 = $70;
     }
    }
   } else {
    if ($56) {
     $i$216$1 = 0;$p1$117$1 = $61;
     while(1) {
      $66 = (_stbi__get8($s)|0);
      HEAP8[$p1$117$1>>0] = $66;
      $67 = (($i$216$1) + 1)|0;
      $68 = ((($p1$117$1)) + 4|0);
      $exitcond$1 = ($67|0)==($57|0);
      if ($exitcond$1) {
       break;
      } else {
       $i$216$1 = $67;$p1$117$1 = $68;
      }
     }
    }
   }
   $71 = ((($19)) + 2|0);
   $72 = ($4|0)<(2);
   if ($72) {
    if ($55) {
     $i$118$2 = 0;$p1$019$2 = $71;
    } else {
     break;
    }
    while(1) {
     HEAP8[$p1$019$2>>0] = 0;
     $76 = (($i$118$2) + 1)|0;
     $77 = ((($p1$019$2)) + 4|0);
     $exitcond36$2 = ($76|0)==($57|0);
     if ($exitcond36$2) {
      break;
     } else {
      $i$118$2 = $76;$p1$019$2 = $77;
     }
    }
   } else {
    if ($56) {
     $i$216$2 = 0;$p1$117$2 = $71;
     while(1) {
      $73 = (_stbi__get8($s)|0);
      HEAP8[$p1$117$2>>0] = $73;
      $74 = (($i$216$2) + 1)|0;
      $75 = ((($p1$117$2)) + 4|0);
      $exitcond$2 = ($74|0)==($57|0);
      if ($exitcond$2) {
       break;
      } else {
       $i$216$2 = $74;$p1$117$2 = $75;
      }
     }
    }
   }
   $78 = ((($19)) + 3|0);
   $79 = ($4|0)<(3);
   if ($79) {
    if ($55) {
     $i$118$3 = 0;$p1$019$3 = $78;
    } else {
     break;
    }
    while(1) {
     HEAP8[$p1$019$3>>0] = -1;
     $83 = (($i$118$3) + 1)|0;
     $84 = ((($p1$019$3)) + 4|0);
     $exitcond36$3 = ($83|0)==($57|0);
     if ($exitcond36$3) {
      break;
     } else {
      $i$118$3 = $83;$p1$019$3 = $84;
     }
    }
   } else {
    if ($56) {
     $i$216$3 = 0;$p1$117$3 = $78;
    } else {
     break;
    }
    while(1) {
     $80 = (_stbi__get8($s)|0);
     HEAP8[$p1$117$3>>0] = $80;
     $81 = (($i$216$3) + 1)|0;
     $82 = ((($p1$117$3)) + 4|0);
     $exitcond$3 = ($81|0)==($57|0);
     if ($exitcond$3) {
      break;
     } else {
      $i$216$3 = $81;$p1$117$3 = $82;
     }
    }
   }
  } else {
   $23 = $4 << 1;
   $24 = Math_imul($23, $6)|0;
   _stbi__skip($s,$24);
   $25 = ($21|0)>(0);
   $26 = ($21|0)>(0);
   $27 = Math_imul($7, $6)|0;
   $channel$033 = 0;
   while(1) {
    $28 = (($19) + ($channel$033)|0);
    $29 = ($channel$033|0)<($4|0);
    if ($29) {
     if ($25) {
      $count$0$ph31 = 0;$p$1$ph32 = $28;
      while(1) {
       while(1) {
        $37 = (_stbi__get8($s)|0);
        $38 = ($37<<24>>24)==(-128);
        if (!($38)) {
         $$lcssa = $37;
         break;
        }
       }
       $39 = $$lcssa&255;
       $40 = ($$lcssa<<24>>24)>(-1);
       if ($40) {
        $41 = (($39) + 1)|0;
        $42 = $$lcssa&255;
        $34 = $42 << 2;
        $len$029 = $41;$p$230 = $p$1$ph32;
        while(1) {
         $43 = (_stbi__get8($s)|0);
         HEAP8[$p$230>>0] = $43;
         $44 = ((($p$230)) + 4|0);
         $45 = (($len$029) + -1)|0;
         $46 = ($45|0)==(0);
         if ($46) {
          break;
         } else {
          $len$029 = $45;$p$230 = $44;
         }
        }
        $scevgep41$sum = (($34) + 4)|0;
        $scevgep42 = (($p$1$ph32) + ($scevgep41$sum)|0);
        $$pn = $41;$p$1$ph$be = $scevgep42;
       } else {
        $47 = (257 - ($39))|0;
        $48 = (_stbi__get8($s)|0);
        $49 = ($47|0)==(0);
        if ($49) {
         $$pn = 0;$p$1$ph$be = $p$1$ph32;
        } else {
         $50 = $$lcssa&255;
         $36 = Math_imul($50, -4)|0;
         $len$126 = $47;$p$327 = $p$1$ph32;
         while(1) {
          HEAP8[$p$327>>0] = $48;
          $51 = ((($p$327)) + 4|0);
          $52 = (($len$126) + -1)|0;
          $53 = ($52|0)==(0);
          if ($53) {
           break;
          } else {
           $len$126 = $52;$p$327 = $51;
          }
         }
         $scevgep$sum = (($36) + 1028)|0;
         $scevgep40 = (($p$1$ph32) + ($scevgep$sum)|0);
         $$pn = $47;$p$1$ph$be = $scevgep40;
        }
       }
       $count$0$ph$be = (($$pn) + ($count$0$ph31))|0;
       $35 = ($count$0$ph$be|0)<($21|0);
       if ($35) {
        $count$0$ph31 = $count$0$ph$be;$p$1$ph32 = $p$1$ph$be;
       } else {
        break;
       }
      }
     }
    } else {
     if ($26) {
      $30 = ($channel$033|0)==(3);
      $31 = $30 << 31 >> 31;
      $i$022 = 0;$p$023 = $28;
      while(1) {
       HEAP8[$p$023>>0] = $31;
       $32 = (($i$022) + 1)|0;
       $33 = ((($p$023)) + 4|0);
       $exitcond39 = ($32|0)==($27|0);
       if ($exitcond39) {
        break;
       } else {
        $i$022 = $32;$p$023 = $33;
       }
      }
     }
    }
    $54 = (($channel$033) + 1)|0;
    $exitcond43 = ($54|0)==(4);
    if ($exitcond43) {
     break;
    } else {
     $channel$033 = $54;
    }
   }
  }
 } while(0);
 if ((($req_comp|0) == 0) | (($req_comp|0) == 4)) {
  $out$0 = $19;
 } else {
  $63 = (_stbi__convert_format($19,4,$req_comp,$7,$6)|0);
  $64 = ($63|0)==(0|0);
  if ($64) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $out$0 = $63;
  }
 }
 $65 = ($comp|0)==(0|0);
 if (!($65)) {
  HEAP32[$comp>>2] = 4;
 }
 HEAP32[$y>>2] = $6;
 HEAP32[$x>>2] = $7;
 $$0 = $out$0;
 return ($$0|0);
}
function _stbi__pic_test($s) {
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__pic_test_core($s)|0);
 _stbi__rewind($s);
 return ($0|0);
}
function _stbi__pic_load($s,$px,$py,$comp,$req_comp) {
 $s = $s|0;
 $px = $px|0;
 $py = $py|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $result$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $i$02 = 0;
 while(1) {
  (_stbi__get8($s)|0);
  $0 = (($i$02) + 1)|0;
  $exitcond = ($0|0)==(92);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $0;
  }
 }
 $1 = (_stbi__get16be($s)|0);
 $2 = (_stbi__get16be($s)|0);
 $3 = (_stbi__at_eof($s)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _stbi__err(27224);
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (268435456 / ($1|0))&-1;
 $6 = ($5|0)<($2|0);
 if ($6) {
  _stbi__err(24736);
  $$0 = 0;
  return ($$0|0);
 }
 (_stbi__get32be($s)|0);
 (_stbi__get16be($s)|0);
 (_stbi__get16be($s)|0);
 $7 = $1 << 2;
 $8 = Math_imul($7, $2)|0;
 $9 = (_stbi__malloc($8)|0);
 _memset(($9|0),-1,($8|0))|0;
 $10 = (_stbi__pic_load_core($s,$1,$2,$comp,$9)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  _free($9);
  $result$0 = 0;
 } else {
  $result$0 = $9;
 }
 HEAP32[$px>>2] = $1;
 HEAP32[$py>>2] = $2;
 $12 = ($req_comp|0)==(0);
 if ($12) {
  $13 = HEAP32[$comp>>2]|0;
  $$01 = $13;
 } else {
  $$01 = $req_comp;
 }
 $14 = (_stbi__convert_format($result$0,4,$$01,$1,$2)|0);
 $$0 = $14;
 return ($$0|0);
}
function _stbi__pnm_test($s) {
 $s = $s|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $or$cond = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = (_stbi__get8($s)|0);
 $2 = ($0<<24>>24)==(80);
 $$off = (($1) + -53)<<24>>24;
 $switch = ($$off&255)<(2);
 $or$cond = $2 & $switch;
 if ($or$cond) {
  $$0 = 1;
  return ($$0|0);
 }
 _stbi__rewind($s);
 $$0 = 0;
 return ($$0|0);
}
function _stbi__pnm_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 4|0);
 $1 = ((($s)) + 8|0);
 $2 = (_stbi__pnm_info($s,$s,$0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$s>>2]|0;
 HEAP32[$x>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 HEAP32[$y>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 HEAP32[$comp>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$s>>2]|0;
 $9 = Math_imul($8, $7)|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = Math_imul($9, $10)|0;
 $12 = (_stbi__malloc($11)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  _stbi__err(25000);
  $$0 = 0;
  return ($$0|0);
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$s>>2]|0;
 $16 = Math_imul($15, $14)|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = Math_imul($16, $17)|0;
 (_stbi__getn($s,$12,$18)|0);
 $19 = ($req_comp|0)==(0);
 if ($19) {
  $$0 = $12;
  return ($$0|0);
 }
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==($req_comp|0);
 if ($21) {
  $$0 = $12;
  return ($$0|0);
 } else {
  $22 = HEAP32[$s>>2]|0;
  $23 = HEAP32[$0>>2]|0;
  $24 = (_stbi__convert_format($12,$20,$req_comp,$22,$23)|0);
  return ($24|0);
 }
 return (0)|0;
}
function _stbi__tga_test($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_stbi__get8($s)|0);
 $0 = (_stbi__get8($s)|0);
 $1 = ($0&255)>(1);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_stbi__get8($s)|0);
 switch ($2<<24>>24) {
 case 1: case 2: case 3: case 9: case 10: case 11:  {
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 (_stbi__get16be($s)|0);
 (_stbi__get16be($s)|0);
 (_stbi__get8($s)|0);
 (_stbi__get16be($s)|0);
 (_stbi__get16be($s)|0);
 $3 = (_stbi__get16be($s)|0);
 $4 = ($3|0)<(1);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_stbi__get16be($s)|0);
 $6 = ($5|0)<(1);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = (_stbi__get8($s)|0);
 if ((($7<<24>>24) == 8) | (($7<<24>>24) == 16) | (($7<<24>>24) == 24) | (($7<<24>>24) == 32)) {
  $res$0 = 1;
 } else {
  $res$0 = 0;
 }
 _stbi__rewind($s);
 $$0 = $res$0;
 return ($$0|0);
}
function _stbi__tga_load($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $$0 = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $RLE_count$047 = 0, $RLE_count$118 = 0, $RLE_count$119 = 0, $RLE_repeating$048 = 0, $RLE_repeating$120 = 0;
 var $RLE_repeating$121 = 0, $exitcond = 0, $exitcond55 = 0, $exitcond59 = 0, $exitcond60 = 0, $i$053 = 0, $i$146 = 0, $i$231 = 0, $i$329 = 0, $index1$032 = 0, $index2$033 = 0, $j$137 = 0, $j$335 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond61 = 0, $or$cond63 = 0, $raw_data = 0, $read_next_pixel$049 = 0;
 var $scevgep = 0, $scevgep58 = 0, $smax = 0, $tga_comp$0 = 0, $tga_comp$0$v = 0, $tga_comp$0$v$v = 0, $tga_image_type$0$off = 0, $tga_palette$0 = 0, $tga_pixel$030 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $raw_data = sp;
 $0 = (_stbi__get8($s)|0);
 $1 = $0&255;
 $2 = (_stbi__get8($s)|0);
 $3 = (_stbi__get8($s)|0);
 $4 = $3&255;
 $5 = (_stbi__get16le($s)|0);
 $6 = (_stbi__get16le($s)|0);
 $7 = (_stbi__get8($s)|0);
 $8 = $7&255;
 (_stbi__get16le($s)|0);
 (_stbi__get16le($s)|0);
 $9 = (_stbi__get16le($s)|0);
 $10 = (_stbi__get16le($s)|0);
 $11 = (_stbi__get8($s)|0);
 $12 = (_stbi__get8($s)|0);
 $13 = $12&255;
 $14 = ($3&255)>(7);
 $15 = (($4) + -8)|0;
 $$16 = $14 ? $15 : $4;
 $16 = $13 >>> 5;
 $17 = $16 & 1;
 $18 = ($9|0)<(1);
 $19 = ($10|0)<(1);
 $or$cond = $18 | $19;
 $tga_image_type$0$off = (($$16) + -1)|0;
 $20 = ($tga_image_type$0$off>>>0)>(2);
 $21 = $20 | $or$cond;
 if ($21) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 if (!((($11<<24>>24) == 8) | (($11<<24>>24) == 16) | (($11<<24>>24) == 24) | (($11<<24>>24) == 32))) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ($2<<24>>24)!=(0);
 $tga_comp$0$v$v = $22 ? $7 : $11;
 $tga_comp$0$v = ($tga_comp$0$v$v&255) >>> 3;
 $tga_comp$0 = $tga_comp$0$v&255;
 HEAP32[$x>>2] = $9;
 HEAP32[$y>>2] = $10;
 $23 = ($comp|0)==(0|0);
 if (!($23)) {
  HEAP32[$comp>>2] = $tga_comp$0;
 }
 $24 = Math_imul($10, $9)|0;
 $25 = Math_imul($24, $tga_comp$0)|0;
 $26 = (_stbi__malloc($25)|0);
 $27 = ($26|0)==(0|0);
 if ($27) {
  _stbi__err(25000);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _stbi__skip($s,$1);
 $or$cond13 = $22 | $14;
 if ($or$cond13) {
  if ($22) {
   _stbi__skip($s,$5);
   $38 = Math_imul($8, $6)|0;
   $39 = (($38|0) / 8)&-1;
   $40 = (_stbi__malloc($39)|0);
   $41 = ($40|0)==(0|0);
   if ($41) {
    _free($26);
    _stbi__err(25000);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = (_stbi__getn($s,$40,$39)|0);
   $43 = ($42|0)==(0);
   if ($43) {
    _free($26);
    _free($40);
    _stbi__err(27144);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $tga_palette$0 = $40;
   }
  } else {
   $tga_palette$0 = 0;
  }
  $44 = Math_imul($10, $9)|0;
  $45 = ($44|0)>(0);
  if ($45) {
   $46 = ($11<<24>>24)==(0);
   $47 = ($11<<24>>24)==(0);
   $48 = ($tga_comp$0$v<<24>>24)==(0);
   $49 = $11&255;
   $50 = (($49) + -1)|0;
   $51 = $50 >>> 3;
   $52 = ($11&255) >>> 3;
   $53 = $52&255;
   $54 = $11&255;
   $55 = (($54) + -1)|0;
   $56 = $55 >>> 3;
   $57 = (($56) + 1)|0;
   $58 = ($tga_comp$0>>>0)>(1);
   $smax = $58 ? $tga_comp$0 : 1;
   $59 = Math_imul($10, $9)|0;
   $RLE_count$047 = 0;$RLE_repeating$048 = 0;$i$146 = 0;$read_next_pixel$049 = 1;
   while(1) {
    $60 = Math_imul($tga_comp$0, $i$146)|0;
    $scevgep58 = (($26) + ($60)|0);
    do {
     if ($14) {
      $61 = ($RLE_count$047|0)==(0);
      if ($61) {
       $62 = (_stbi__get8($s)|0);
       $63 = $62&255;
       $64 = $63 & 127;
       $65 = (($64) + 1)|0;
       $66 = $63 >>> 7;
       $RLE_count$118 = $65;$RLE_repeating$120 = $66;
       label = 23;
       break;
      }
      $67 = ($RLE_repeating$048|0)==(0);
      if ($67) {
       $RLE_count$118 = $RLE_count$047;$RLE_repeating$120 = 0;
       label = 23;
      } else {
       $68 = ($read_next_pixel$049|0)==(0);
       if ($68) {
        $RLE_count$119 = $RLE_count$047;$RLE_repeating$121 = $RLE_repeating$048;
       } else {
        $RLE_count$118 = $RLE_count$047;$RLE_repeating$120 = $RLE_repeating$048;
        label = 23;
       }
      }
     } else {
      $RLE_count$118 = $RLE_count$047;$RLE_repeating$120 = $RLE_repeating$048;
      label = 23;
     }
    } while(0);
    do {
     if ((label|0) == 23) {
      label = 0;
      if ($22) {
       $69 = (_stbi__get8($s)|0);
       $70 = $69&255;
       if ($46) {
        $RLE_count$119 = $RLE_count$118;$RLE_repeating$121 = $RLE_repeating$120;
        break;
       }
       $74 = ($70|0)>=($6|0);
       $$ = $74 ? 0 : $70;
       $75 = Math_imul($53, $$)|0;
       $scevgep = (($tga_palette$0) + ($75)|0);
       _memcpy(($raw_data|0),($scevgep|0),($57|0))|0;
       $RLE_count$119 = $RLE_count$118;$RLE_repeating$121 = $RLE_repeating$120;
       break;
      } else {
       if ($47) {
        $RLE_count$119 = $RLE_count$118;$RLE_repeating$121 = $RLE_repeating$120;
        break;
       } else {
        $j$137 = 0;
       }
       while(1) {
        $71 = (_stbi__get8($s)|0);
        $72 = (($raw_data) + ($j$137)|0);
        HEAP8[$72>>0] = $71;
        $73 = (($j$137) + 1)|0;
        $exitcond55 = ($j$137|0)==($51|0);
        if ($exitcond55) {
         $RLE_count$119 = $RLE_count$118;$RLE_repeating$121 = $RLE_repeating$120;
         break;
        } else {
         $j$137 = $73;
        }
       }
      }
     }
    } while(0);
    if (!($48)) {
     _memcpy(($scevgep58|0),($raw_data|0),($smax|0))|0;
    }
    $76 = (($RLE_count$119) + -1)|0;
    $77 = (($i$146) + 1)|0;
    $exitcond59 = ($77|0)==($59|0);
    if ($exitcond59) {
     break;
    } else {
     $RLE_count$047 = $76;$RLE_repeating$048 = $RLE_repeating$121;$i$146 = $77;$read_next_pixel$049 = 0;
    }
   }
  }
  $78 = ($17|0)==(0);
  $79 = ($10|0)>(0);
  $or$cond61 = $78 & $79;
  if ($or$cond61) {
   $80 = Math_imul($tga_comp$0, $9)|0;
   $81 = (($10) + -1)|0;
   $82 = Math_imul($tga_comp$0, $9)|0;
   $83 = Math_imul($tga_comp$0, $9)|0;
   $84 = ($83|0)>(0);
   $j$335 = 0;
   while(1) {
    if ($84) {
     $85 = (($81) - ($j$335))|0;
     $86 = Math_imul($82, $85)|0;
     $87 = Math_imul($80, $j$335)|0;
     $i$231 = $83;$index1$032 = $87;$index2$033 = $86;
     while(1) {
      $88 = (($26) + ($index1$032)|0);
      $89 = HEAP8[$88>>0]|0;
      $90 = (($26) + ($index2$033)|0);
      $91 = HEAP8[$90>>0]|0;
      HEAP8[$88>>0] = $91;
      HEAP8[$90>>0] = $89;
      $92 = (($index1$032) + 1)|0;
      $93 = (($index2$033) + 1)|0;
      $94 = (($i$231) + -1)|0;
      $95 = ($i$231|0)>(1);
      if ($95) {
       $i$231 = $94;$index1$032 = $92;$index2$033 = $93;
      } else {
       break;
      }
     }
    }
    $96 = (($j$335) + 1)|0;
    $97 = $96 << 1;
    $98 = ($97|0)<($10|0);
    if ($98) {
     $j$335 = $96;
    } else {
     break;
    }
   }
  }
  $99 = ($tga_palette$0|0)==(0|0);
  if (!($99)) {
   _free($tga_palette$0);
  }
 } else {
  $28 = ($10|0)>(0);
  if ($28) {
   $29 = ($17|0)==(0);
   $30 = (($10) + -1)|0;
   $31 = Math_imul($tga_comp$0, $9)|0;
   $32 = Math_imul($tga_comp$0, $9)|0;
   $i$053 = 0;
   while(1) {
    $33 = (($30) - ($i$053))|0;
    $34 = $29 ? $33 : $i$053;
    $35 = Math_imul($31, $34)|0;
    $36 = (($26) + ($35)|0);
    (_stbi__getn($s,$36,$32)|0);
    $37 = (($i$053) + 1)|0;
    $exitcond60 = ($37|0)==($10|0);
    if ($exitcond60) {
     break;
    } else {
     $i$053 = $37;
    }
   }
  }
 }
 $100 = ($tga_comp$0$v$v&255)>(23);
 $101 = Math_imul($10, $9)|0;
 $102 = ($101|0)>(0);
 $or$cond63 = $100 & $102;
 if ($or$cond63) {
  $103 = Math_imul($10, $9)|0;
  $i$329 = 0;$tga_pixel$030 = $26;
  while(1) {
   $104 = HEAP8[$tga_pixel$030>>0]|0;
   $105 = ((($tga_pixel$030)) + 2|0);
   $106 = HEAP8[$105>>0]|0;
   HEAP8[$tga_pixel$030>>0] = $106;
   HEAP8[$105>>0] = $104;
   $107 = (($tga_pixel$030) + ($tga_comp$0)|0);
   $108 = (($i$329) + 1)|0;
   $exitcond = ($108|0)==($103|0);
   if ($exitcond) {
    break;
   } else {
    $i$329 = $108;$tga_pixel$030 = $107;
   }
  }
 }
 $109 = ($req_comp|0)==(0);
 $110 = ($tga_comp$0|0)==($req_comp|0);
 $or$cond17 = $109 | $110;
 if ($or$cond17) {
  $$0 = $26;
  STACKTOP = sp;return ($$0|0);
 }
 $111 = (_stbi__convert_format($26,$tga_comp$0,$req_comp,$9,$10)|0);
 $$0 = $111;
 STACKTOP = sp;return ($$0|0);
}
function _stbi__convert_format($data,$img_n,$req_comp,$x,$y) {
 $data = $data|0;
 $img_n = $img_n|0;
 $req_comp = $req_comp|0;
 $x = $x|0;
 $y = $y|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dest$081 = 0;
 var $dest$1031 = 0, $dest$1127 = 0, $dest$176 = 0, $dest$271 = 0, $dest$366 = 0, $dest$461 = 0, $dest$556 = 0, $dest$651 = 0, $dest$746 = 0, $dest$841 = 0, $dest$936 = 0, $i$0 = 0, $i$079 = 0, $i$082 = 0, $i$1 = 0, $i$10 = 0, $i$1029 = 0, $i$1032 = 0, $i$11 = 0, $i$1125 = 0;
 var $i$1128 = 0, $i$174 = 0, $i$177 = 0, $i$2 = 0, $i$269 = 0, $i$272 = 0, $i$3 = 0, $i$364 = 0, $i$367 = 0, $i$4 = 0, $i$459 = 0, $i$462 = 0, $i$5 = 0, $i$554 = 0, $i$557 = 0, $i$6 = 0, $i$649 = 0, $i$652 = 0, $i$7 = 0, $i$744 = 0;
 var $i$747 = 0, $i$8 = 0, $i$839 = 0, $i$842 = 0, $i$9 = 0, $i$934 = 0, $i$937 = 0, $j$084 = 0, $req_comp$off = 0, $src$080 = 0, $src$1030 = 0, $src$1126 = 0, $src$175 = 0, $src$270 = 0, $src$365 = 0, $src$460 = 0, $src$555 = 0, $src$650 = 0, $src$745 = 0, $src$840 = 0;
 var $src$935 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($req_comp|0)==($img_n|0);
 if ($0) {
  $$0 = $data;
  return ($$0|0);
 }
 $req_comp$off = (($req_comp) + -1)|0;
 $1 = ($req_comp$off>>>0)<(4);
 if (!($1)) {
  ___assert_fail((27160|0),(25096|0),1333,(27192|0));
  // unreachable;
 }
 $2 = Math_imul($x, $req_comp)|0;
 $3 = Math_imul($2, $y)|0;
 $4 = (_stbi__malloc($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  _free($data);
  _stbi__err(25000);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ($y|0)>(0);
 L11: do {
  if ($6) {
   $7 = $img_n << 3;
   $8 = (($7) + ($req_comp))|0;
   $i$079 = (($x) + -1)|0;
   $9 = ($i$079|0)>(-1);
   $i$174 = (($x) + -1)|0;
   $10 = ($i$174|0)>(-1);
   $i$269 = (($x) + -1)|0;
   $11 = ($i$269|0)>(-1);
   $i$364 = (($x) + -1)|0;
   $12 = ($i$364|0)>(-1);
   $i$459 = (($x) + -1)|0;
   $13 = ($i$459|0)>(-1);
   $i$554 = (($x) + -1)|0;
   $14 = ($i$554|0)>(-1);
   $i$649 = (($x) + -1)|0;
   $15 = ($i$649|0)>(-1);
   $i$744 = (($x) + -1)|0;
   $16 = ($i$744|0)>(-1);
   $i$839 = (($x) + -1)|0;
   $17 = ($i$839|0)>(-1);
   $i$934 = (($x) + -1)|0;
   $18 = ($i$934|0)>(-1);
   $i$1029 = (($x) + -1)|0;
   $19 = ($i$1029|0)>(-1);
   $i$1125 = (($x) + -1)|0;
   $20 = ($i$1125|0)>(-1);
   $j$084 = 0;
   L13: while(1) {
    $21 = Math_imul($j$084, $x)|0;
    $22 = Math_imul($21, $img_n)|0;
    $23 = (($data) + ($22)|0);
    $24 = Math_imul($21, $req_comp)|0;
    $25 = (($4) + ($24)|0);
    do {
     switch ($8|0) {
     case 28:  {
      if ($15) {
       $dest$651 = $25;$i$652 = $i$649;$src$650 = $23;
       while(1) {
        $63 = HEAP8[$src$650>>0]|0;
        HEAP8[$dest$651>>0] = $63;
        $64 = ((($src$650)) + 1|0);
        $65 = HEAP8[$64>>0]|0;
        $66 = ((($dest$651)) + 1|0);
        HEAP8[$66>>0] = $65;
        $67 = ((($src$650)) + 2|0);
        $68 = HEAP8[$67>>0]|0;
        $69 = ((($dest$651)) + 2|0);
        HEAP8[$69>>0] = $68;
        $70 = ((($dest$651)) + 3|0);
        HEAP8[$70>>0] = -1;
        $71 = ((($src$650)) + 3|0);
        $72 = ((($dest$651)) + 4|0);
        $i$6 = (($i$652) + -1)|0;
        $73 = ($i$6|0)>(-1);
        if ($73) {
         $dest$651 = $72;$i$652 = $i$6;$src$650 = $71;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 10:  {
      if ($9) {
       $dest$081 = $25;$i$082 = $i$079;$src$080 = $23;
       while(1) {
        $26 = HEAP8[$src$080>>0]|0;
        HEAP8[$dest$081>>0] = $26;
        $27 = ((($dest$081)) + 1|0);
        HEAP8[$27>>0] = -1;
        $28 = ((($src$080)) + 1|0);
        $29 = ((($dest$081)) + 2|0);
        $i$0 = (($i$082) + -1)|0;
        $30 = ($i$0|0)>(-1);
        if ($30) {
         $dest$081 = $29;$i$082 = $i$0;$src$080 = $28;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 34:  {
      if ($19) {
       $dest$1031 = $25;$i$1032 = $i$1029;$src$1030 = $23;
       while(1) {
        $111 = HEAP8[$src$1030>>0]|0;
        $112 = $111&255;
        $113 = ((($src$1030)) + 1|0);
        $114 = HEAP8[$113>>0]|0;
        $115 = $114&255;
        $116 = ((($src$1030)) + 2|0);
        $117 = HEAP8[$116>>0]|0;
        $118 = $117&255;
        $119 = (_stbi__compute_y($112,$115,$118)|0);
        HEAP8[$dest$1031>>0] = $119;
        $120 = ((($src$1030)) + 3|0);
        $121 = HEAP8[$120>>0]|0;
        $122 = ((($dest$1031)) + 1|0);
        HEAP8[$122>>0] = $121;
        $123 = ((($src$1030)) + 4|0);
        $124 = ((($dest$1031)) + 2|0);
        $i$10 = (($i$1032) + -1)|0;
        $125 = ($i$10|0)>(-1);
        if ($125) {
         $dest$1031 = $124;$i$1032 = $i$10;$src$1030 = $123;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 26:  {
      if ($17) {
       $dest$841 = $25;$i$842 = $i$839;$src$840 = $23;
       while(1) {
        $86 = HEAP8[$src$840>>0]|0;
        $87 = $86&255;
        $88 = ((($src$840)) + 1|0);
        $89 = HEAP8[$88>>0]|0;
        $90 = $89&255;
        $91 = ((($src$840)) + 2|0);
        $92 = HEAP8[$91>>0]|0;
        $93 = $92&255;
        $94 = (_stbi__compute_y($87,$90,$93)|0);
        HEAP8[$dest$841>>0] = $94;
        $95 = ((($dest$841)) + 1|0);
        HEAP8[$95>>0] = -1;
        $96 = ((($src$840)) + 3|0);
        $97 = ((($dest$841)) + 2|0);
        $i$8 = (($i$842) + -1)|0;
        $98 = ($i$8|0)>(-1);
        if ($98) {
         $dest$841 = $97;$i$842 = $i$8;$src$840 = $96;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 19:  {
      if ($13) {
       $dest$461 = $25;$i$462 = $i$459;$src$460 = $23;
       while(1) {
        $48 = HEAP8[$src$460>>0]|0;
        $49 = ((($dest$461)) + 2|0);
        HEAP8[$49>>0] = $48;
        $50 = ((($dest$461)) + 1|0);
        HEAP8[$50>>0] = $48;
        HEAP8[$dest$461>>0] = $48;
        $51 = ((($src$460)) + 2|0);
        $52 = ((($dest$461)) + 3|0);
        $i$4 = (($i$462) + -1)|0;
        $53 = ($i$4|0)>(-1);
        if ($53) {
         $dest$461 = $52;$i$462 = $i$4;$src$460 = $51;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 12:  {
      if ($11) {
       $dest$271 = $25;$i$272 = $i$269;$src$270 = $23;
       while(1) {
        $37 = HEAP8[$src$270>>0]|0;
        $38 = ((($dest$271)) + 2|0);
        HEAP8[$38>>0] = $37;
        $39 = ((($dest$271)) + 1|0);
        HEAP8[$39>>0] = $37;
        HEAP8[$dest$271>>0] = $37;
        $40 = ((($dest$271)) + 3|0);
        HEAP8[$40>>0] = -1;
        $41 = ((($src$270)) + 1|0);
        $42 = ((($dest$271)) + 4|0);
        $i$2 = (($i$272) + -1)|0;
        $43 = ($i$2|0)>(-1);
        if ($43) {
         $dest$271 = $42;$i$272 = $i$2;$src$270 = $41;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 17:  {
      if ($12) {
       $dest$366 = $25;$i$367 = $i$364;$src$365 = $23;
       while(1) {
        $44 = HEAP8[$src$365>>0]|0;
        HEAP8[$dest$366>>0] = $44;
        $45 = ((($src$365)) + 2|0);
        $46 = ((($dest$366)) + 1|0);
        $i$3 = (($i$367) + -1)|0;
        $47 = ($i$3|0)>(-1);
        if ($47) {
         $dest$366 = $46;$i$367 = $i$3;$src$365 = $45;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 35:  {
      if ($20) {
       $dest$1127 = $25;$i$1128 = $i$1125;$src$1126 = $23;
       while(1) {
        $126 = HEAP8[$src$1126>>0]|0;
        HEAP8[$dest$1127>>0] = $126;
        $127 = ((($src$1126)) + 1|0);
        $128 = HEAP8[$127>>0]|0;
        $129 = ((($dest$1127)) + 1|0);
        HEAP8[$129>>0] = $128;
        $130 = ((($src$1126)) + 2|0);
        $131 = HEAP8[$130>>0]|0;
        $132 = ((($dest$1127)) + 2|0);
        HEAP8[$132>>0] = $131;
        $133 = ((($src$1126)) + 4|0);
        $134 = ((($dest$1127)) + 3|0);
        $i$11 = (($i$1128) + -1)|0;
        $135 = ($i$11|0)>(-1);
        if ($135) {
         $dest$1127 = $134;$i$1128 = $i$11;$src$1126 = $133;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 20:  {
      if ($14) {
       $dest$556 = $25;$i$557 = $i$554;$src$555 = $23;
       while(1) {
        $54 = HEAP8[$src$555>>0]|0;
        $55 = ((($dest$556)) + 2|0);
        HEAP8[$55>>0] = $54;
        $56 = ((($dest$556)) + 1|0);
        HEAP8[$56>>0] = $54;
        HEAP8[$dest$556>>0] = $54;
        $57 = ((($src$555)) + 1|0);
        $58 = HEAP8[$57>>0]|0;
        $59 = ((($dest$556)) + 3|0);
        HEAP8[$59>>0] = $58;
        $60 = ((($src$555)) + 2|0);
        $61 = ((($dest$556)) + 4|0);
        $i$5 = (($i$557) + -1)|0;
        $62 = ($i$5|0)>(-1);
        if ($62) {
         $dest$556 = $61;$i$557 = $i$5;$src$555 = $60;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 11:  {
      if ($10) {
       $dest$176 = $25;$i$177 = $i$174;$src$175 = $23;
       while(1) {
        $31 = HEAP8[$src$175>>0]|0;
        $32 = ((($dest$176)) + 2|0);
        HEAP8[$32>>0] = $31;
        $33 = ((($dest$176)) + 1|0);
        HEAP8[$33>>0] = $31;
        HEAP8[$dest$176>>0] = $31;
        $34 = ((($src$175)) + 1|0);
        $35 = ((($dest$176)) + 3|0);
        $i$1 = (($i$177) + -1)|0;
        $36 = ($i$1|0)>(-1);
        if ($36) {
         $dest$176 = $35;$i$177 = $i$1;$src$175 = $34;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 33:  {
      if ($18) {
       $dest$936 = $25;$i$937 = $i$934;$src$935 = $23;
       while(1) {
        $99 = HEAP8[$src$935>>0]|0;
        $100 = $99&255;
        $101 = ((($src$935)) + 1|0);
        $102 = HEAP8[$101>>0]|0;
        $103 = $102&255;
        $104 = ((($src$935)) + 2|0);
        $105 = HEAP8[$104>>0]|0;
        $106 = $105&255;
        $107 = (_stbi__compute_y($100,$103,$106)|0);
        HEAP8[$dest$936>>0] = $107;
        $108 = ((($src$935)) + 4|0);
        $109 = ((($dest$936)) + 1|0);
        $i$9 = (($i$937) + -1)|0;
        $110 = ($i$9|0)>(-1);
        if ($110) {
         $dest$936 = $109;$i$937 = $i$9;$src$935 = $108;
        } else {
         break;
        }
       }
      }
      break;
     }
     case 25:  {
      if ($16) {
       $dest$746 = $25;$i$747 = $i$744;$src$745 = $23;
       while(1) {
        $74 = HEAP8[$src$745>>0]|0;
        $75 = $74&255;
        $76 = ((($src$745)) + 1|0);
        $77 = HEAP8[$76>>0]|0;
        $78 = $77&255;
        $79 = ((($src$745)) + 2|0);
        $80 = HEAP8[$79>>0]|0;
        $81 = $80&255;
        $82 = (_stbi__compute_y($75,$78,$81)|0);
        HEAP8[$dest$746>>0] = $82;
        $83 = ((($src$745)) + 3|0);
        $84 = ((($dest$746)) + 1|0);
        $i$7 = (($i$747) + -1)|0;
        $85 = ($i$7|0)>(-1);
        if ($85) {
         $dest$746 = $84;$i$747 = $i$7;$src$745 = $83;
        } else {
         break;
        }
       }
      }
      break;
     }
     default: {
      break L13;
     }
     }
    } while(0);
    $136 = (($j$084) + 1)|0;
    $137 = ($136|0)<($y|0);
    if ($137) {
     $j$084 = $136;
    } else {
     break L11;
    }
   }
   ___assert_fail((27216|0),(25096|0),1362,(27192|0));
   // unreachable;
  }
 } while(0);
 _free($data);
 $$0 = $4;
 return ($$0|0);
}
function _stbi__compute_y($r,$g,$b) {
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r*77)|0;
 $1 = ($g*150)|0;
 $2 = (($1) + ($0))|0;
 $3 = ($b*29)|0;
 $4 = (($2) + ($3))|0;
 $5 = $4 >>> 8;
 $6 = $5&255;
 return ($6|0);
}
function _stbi__pic_load_core($s,$width,$height,$comp,$result) {
 $s = $s|0;
 $width = $width|0;
 $height = $height|0;
 $comp = $comp|0;
 $result = $result|0;
 var $$ = 0, $$0 = 0, $$lcssa108 = 0, $$lcssa111 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $act_comp$0 = 0;
 var $count3$0 = 0, $count3$1 = 0, $dest$038 = 0, $dest$135 = 0, $dest$2$lcssa = 0, $dest$230 = 0, $dest$327 = 0, $dest$425 = 0, $dest$523 = 0, $dest$6 = 0, $exitcond = 0, $exitcond57 = 0, $i$031 = 0, $i4$024 = 0, $i6$026 = 0, $left$036 = 0, $left2$028 = 0, $num_packets$0 = 0, $num_packets$0$lcssa105 = 0, $packet_idx$041 = 0;
 var $packets = 0, $scevgep = 0, $scevgep56 = 0, $value = 0, $value5 = 0, $x$039 = 0, $y$044 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $packets = sp + 8|0;
 $value = sp;
 $value5 = sp + 4|0;
 $act_comp$0 = 0;$num_packets$0 = 0;
 while(1) {
  $0 = ($num_packets$0|0)==(10);
  if ($0) {
   label = 3;
   break;
  }
  $1 = (($num_packets$0) + 1)|0;
  $2 = (_stbi__get8($s)|0);
  $3 = (_stbi__get8($s)|0);
  $4 = (($packets) + (($num_packets$0*3)|0)|0);
  HEAP8[$4>>0] = $3;
  $5 = (_stbi__get8($s)|0);
  $6 = (((($packets) + (($num_packets$0*3)|0)|0)) + 1|0);
  HEAP8[$6>>0] = $5;
  $7 = (_stbi__get8($s)|0);
  $8 = (((($packets) + (($num_packets$0*3)|0)|0)) + 2|0);
  HEAP8[$8>>0] = $7;
  $9 = $7&255;
  $10 = $9 | $act_comp$0;
  $11 = (_stbi__at_eof($s)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   label = 5;
   break;
  }
  $13 = HEAP8[$4>>0]|0;
  $14 = ($13<<24>>24)==(8);
  if (!($14)) {
   label = 7;
   break;
  }
  $15 = ($2<<24>>24)==(0);
  if ($15) {
   $$lcssa108 = $1;$$lcssa111 = $10;$num_packets$0$lcssa105 = $num_packets$0;
   label = 9;
   break;
  } else {
   $act_comp$0 = $10;$num_packets$0 = $1;
  }
 }
 if ((label|0) == 3) {
  _stbi__err(27240);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  _stbi__err(27224);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 7) {
  _stbi__err(27240);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 9) {
  $16 = $$lcssa111 >>> 4;
  $17 = $16 & 1;
  $18 = (($17) + 3)|0;
  HEAP32[$comp>>2] = $18;
  $19 = ($height|0)>(0);
  if (!($19)) {
   $$0 = $result;
   STACKTOP = sp;return ($$0|0);
  }
  $20 = ($num_packets$0$lcssa105|0)>(-1);
  $21 = $width << 2;
  $22 = ($width|0)>(0);
  $23 = ($width|0)>(0);
  $24 = ($width|0)>(0);
  $y$044 = 0;
  L13: while(1) {
   if ($20) {
    $25 = Math_imul($21, $y$044)|0;
    $26 = (($result) + ($25)|0);
    $packet_idx$041 = 0;
    while(1) {
     $27 = (((($packets) + (($packet_idx$041*3)|0)|0)) + 1|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = $28&255;
     if ((($29|0) == 1)) {
      if ($23) {
       $32 = (((($packets) + (($packet_idx$041*3)|0)|0)) + 2|0);
       $dest$135 = $26;$left$036 = $width;
       while(1) {
        $41 = (_stbi__get8($s)|0);
        $42 = (_stbi__at_eof($s)|0);
        $43 = ($42|0)==(0);
        if (!($43)) {
         label = 24;
         break L13;
        }
        $44 = HEAP8[$32>>0]|0;
        $45 = $44&255;
        $46 = (_stbi__readval($s,$45,$value)|0);
        $47 = ($46|0)==(0|0);
        if ($47) {
         $$0 = 0;
         label = 52;
         break L13;
        }
        $48 = $41&255;
        $49 = ($48|0)>($left$036|0);
        $50 = $left$036&255;
        $$ = $49 ? $50 : $41;
        $51 = $$&255;
        $52 = ($$<<24>>24)==(0);
        if ($52) {
         $dest$2$lcssa = $dest$135;
        } else {
         $53 = $$&255;
         $54 = $53 << 2;
         $dest$230 = $dest$135;$i$031 = 0;
         while(1) {
          $55 = HEAP8[$32>>0]|0;
          $56 = $55&255;
          _stbi__copyval($56,$dest$230,$value);
          $57 = (($i$031) + 1)|0;
          $58 = ((($dest$230)) + 4|0);
          $exitcond57 = ($57|0)==($53|0);
          if ($exitcond57) {
           break;
          } else {
           $dest$230 = $58;$i$031 = $57;
          }
         }
         $scevgep56 = (($dest$135) + ($54)|0);
         $dest$2$lcssa = $scevgep56;
        }
        $59 = (($left$036) - ($51))|0;
        $60 = ($59|0)>(0);
        if ($60) {
         $dest$135 = $dest$2$lcssa;$left$036 = $59;
        } else {
         break;
        }
       }
      }
     } else if ((($29|0) == 2)) {
      if ($24) {
       $30 = (((($packets) + (($packet_idx$041*3)|0)|0)) + 2|0);
       $31 = (((($packets) + (($packet_idx$041*3)|0)|0)) + 2|0);
       $dest$327 = $26;$left2$028 = $width;
       while(1) {
        $61 = (_stbi__get8($s)|0);
        $62 = $61&255;
        $63 = (_stbi__at_eof($s)|0);
        $64 = ($63|0)==(0);
        if (!($64)) {
         label = 32;
         break L13;
        }
        $65 = ($61<<24>>24)<(0);
        if ($65) {
         $66 = ($61<<24>>24)==(-128);
         if ($66) {
          $67 = (_stbi__get16be($s)|0);
          $count3$0 = $67;
         } else {
          $68 = (($62) + -127)|0;
          $count3$0 = $68;
         }
         $69 = ($count3$0|0)>($left2$028|0);
         if ($69) {
          label = 38;
          break L13;
         }
         $70 = HEAP8[$30>>0]|0;
         $71 = $70&255;
         $72 = (_stbi__readval($s,$71,$value5)|0);
         $73 = ($72|0)==(0|0);
         if ($73) {
          $$0 = 0;
          label = 52;
          break L13;
         }
         $74 = ($count3$0|0)>(0);
         if ($74) {
          $75 = $count3$0 << 2;
          $dest$425 = $dest$327;$i6$026 = 0;
          while(1) {
           $76 = HEAP8[$30>>0]|0;
           $77 = $76&255;
           _stbi__copyval($77,$dest$425,$value5);
           $78 = (($i6$026) + 1)|0;
           $79 = ((($dest$425)) + 4|0);
           $exitcond = ($78|0)==($count3$0|0);
           if ($exitcond) {
            break;
           } else {
            $dest$425 = $79;$i6$026 = $78;
           }
          }
          $scevgep = (($dest$327) + ($75)|0);
          $count3$1 = $count3$0;$dest$6 = $scevgep;
         } else {
          $count3$1 = $count3$0;$dest$6 = $dest$327;
         }
        } else {
         $80 = (($62) + 1)|0;
         $81 = ($62|0)<($left2$028|0);
         if (!($81)) {
          label = 45;
          break L13;
         }
         $82 = HEAP8[$31>>0]|0;
         $83 = $82&255;
         $dest$523 = $dest$327;$i4$024 = 0;
         while(1) {
          $84 = (_stbi__readval($s,$83,$dest$523)|0);
          $85 = ($84|0)==(0|0);
          if ($85) {
           $$0 = 0;
           label = 52;
           break L13;
          }
          $86 = (($i4$024) + 1)|0;
          $87 = ((($dest$523)) + 4|0);
          $88 = ($86|0)<($80|0);
          if ($88) {
           $dest$523 = $87;$i4$024 = $86;
          } else {
           $count3$1 = $80;$dest$6 = $87;
           break;
          }
         }
        }
        $89 = (($left2$028) - ($count3$1))|0;
        $90 = ($89|0)>(0);
        if ($90) {
         $dest$327 = $dest$6;$left2$028 = $89;
        } else {
         break;
        }
       }
      }
     } else if ((($29|0) == 0)) {
      if ($22) {
       $33 = (((($packets) + (($packet_idx$041*3)|0)|0)) + 2|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $dest$038 = $26;$x$039 = 0;
       while(1) {
        $36 = (_stbi__readval($s,$35,$dest$038)|0);
        $37 = ($36|0)==(0|0);
        if ($37) {
         $$0 = 0;
         label = 52;
         break L13;
        }
        $38 = (($x$039) + 1)|0;
        $39 = ((($dest$038)) + 4|0);
        $40 = ($38|0)<($width|0);
        if ($40) {
         $dest$038 = $39;$x$039 = $38;
        } else {
         break;
        }
       }
      }
     } else {
      label = 20;
      break L13;
     }
     $91 = (($packet_idx$041) + 1)|0;
     $92 = ($91|0)<($$lcssa108|0);
     if ($92) {
      $packet_idx$041 = $91;
     } else {
      break;
     }
    }
   }
   $93 = (($y$044) + 1)|0;
   $94 = ($93|0)<($height|0);
   if ($94) {
    $y$044 = $93;
   } else {
    $$0 = $result;
    label = 52;
    break;
   }
  }
  if ((label|0) == 20) {
   _stbi__err(27240);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 24) {
   _stbi__err(27224);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 32) {
   _stbi__err(27224);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 38) {
   _stbi__err(27224);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 45) {
   _stbi__err(27224);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 52) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 return (0)|0;
}
function _stbi__readval($s,$channel,$dest) {
 $s = $s|0;
 $channel = $channel|0;
 $dest = $dest|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $channel & 128;
 $1 = ($0|0)==(0);
 if ($1) {
  label = 5;
 } else {
  $2 = (_stbi__at_eof($s)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $4 = (_stbi__get8($s)|0);
   HEAP8[$dest>>0] = $4;
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $5 = $channel & 64;
   $6 = ($5|0)==(0);
   if (!($6)) {
    $7 = (_stbi__at_eof($s)|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     break;
    }
    $9 = (_stbi__get8($s)|0);
    $10 = ((($dest)) + 1|0);
    HEAP8[$10>>0] = $9;
   }
   $11 = $channel & 32;
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = (_stbi__at_eof($s)|0);
    $14 = ($13|0)==(0);
    if (!($14)) {
     break;
    }
    $15 = (_stbi__get8($s)|0);
    $16 = ((($dest)) + 2|0);
    HEAP8[$16>>0] = $15;
   }
   $17 = $channel & 16;
   $18 = ($17|0)==(0);
   if ($18) {
    $$0 = $dest;
    return ($$0|0);
   }
   $19 = (_stbi__at_eof($s)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = (_stbi__get8($s)|0);
    $22 = ((($dest)) + 3|0);
    HEAP8[$22>>0] = $21;
    $$0 = $dest;
    return ($$0|0);
   }
  }
 } while(0);
 _stbi__err(27224);
 $$0 = 0;
 return ($$0|0);
}
function _stbi__copyval($channel,$dest,$src) {
 $channel = $channel|0;
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $channel & 128;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP8[$src>>0]|0;
  HEAP8[$dest>>0] = $2;
 }
 $3 = $channel & 64;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = ((($src)) + 1|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($dest)) + 1|0);
  HEAP8[$7>>0] = $6;
 }
 $8 = $channel & 32;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ((($src)) + 2|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ((($dest)) + 2|0);
  HEAP8[$12>>0] = $11;
 }
 $13 = $channel & 16;
 $14 = ($13|0)==(0);
 if ($14) {
  return;
 }
 $15 = ((($src)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ((($dest)) + 3|0);
 HEAP8[$17>>0] = $16;
 return;
}
function _stbi__pic_test_core($s) {
 $s = $s|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond = 0, $i$01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__pic_is4($s,27256)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  (_stbi__get8($s)|0);
  $2 = (($i$01) + 1)|0;
  $exitcond = ($2|0)==(84);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $2;
  }
 }
 $3 = (_stbi__pic_is4($s,27264)|0);
 $not$ = ($3|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _stbi__pic_is4($s,$str) {
 $s = $s|0;
 $str = $str|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = HEAP8[$str>>0]|0;
 $2 = ($0<<24>>24)==($1<<24>>24);
 if (!($2)) {
  return 0;
 }
 $3 = (_stbi__get8($s)|0);
 $4 = ((($str)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($3<<24>>24)==($5<<24>>24);
 if (!($6)) {
  return 0;
 }
 $7 = (_stbi__get8($s)|0);
 $8 = ((($str)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($7<<24>>24)==($9<<24>>24);
 if ($10) {
  $11 = (_stbi__get8($s)|0);
  $12 = ((($str)) + 3|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = ($11<<24>>24)==($13<<24>>24);
  $$ = $14&1;
  return ($$|0);
 } else {
  return 0;
 }
 return (0)|0;
}
function _stbi__gif_load_next($s,$g,$comp,$req_comp) {
 $s = $s|0;
 $g = $g|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($g)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (_stbi__gif_header($s,$g,$comp,0)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$0 = 0;
    return ($$0|0);
   }
   $5 = HEAP32[$g>>2]|0;
   $6 = $5 << 2;
   $7 = ((($g)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = Math_imul($6, $8)|0;
   $10 = (_stbi__malloc($9)|0);
   HEAP32[$0>>2] = $10;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    _stbi__fill_gif_background($g);
    break;
   }
   _stbi__err(25000);
   $$0 = 0;
   return ($$0|0);
  } else {
   $12 = ((($g)) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 28;
   $15 = ($14|0)==(12);
   if ($15) {
    $16 = HEAP32[$g>>2]|0;
    $17 = $16 << 2;
    $18 = ((($g)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = Math_imul($17, $19)|0;
    $21 = (_stbi__malloc($20)|0);
    HEAP32[$0>>2] = $21;
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     $23 = HEAP32[$g>>2]|0;
     $24 = HEAP32[$18>>2]|0;
     $25 = $23 << 2;
     $26 = Math_imul($25, $24)|0;
     _memcpy(($21|0),($1|0),($26|0))|0;
     break;
    }
    _stbi__err(25000);
    $$0 = 0;
    return ($$0|0);
   }
  }
 } while(0);
 $27 = ((($g)) + 28|0);
 $28 = ((($g)) + 24|0);
 L17: while(1) {
  $29 = (_stbi__get8($s)|0);
  $30 = $29&255;
  if ((($30|0) == 44)) {
   label = 12;
   break;
  } else if ((($30|0) == 59)) {
   label = 38;
   break;
  } else if (!((($30|0) == 33))) {
   label = 39;
   break;
  }
  $108 = (_stbi__get8($s)|0);
  $109 = ($108<<24>>24)==(-7);
  do {
   if ($109) {
    $112 = (_stbi__get8($s)|0);
    $113 = ($112<<24>>24)==(4);
    if ($113) {
     $114 = (_stbi__get8($s)|0);
     $115 = $114&255;
     HEAP32[$27>>2] = $115;
     (_stbi__get16le($s)|0);
     $116 = (_stbi__get8($s)|0);
     $117 = $116&255;
     HEAP32[$28>>2] = $117;
     break;
    } else {
     $118 = $112&255;
     _stbi__skip($s,$118);
     continue L17;
    }
   }
  } while(0);
  $110 = (_stbi__get8($s)|0);
  $111 = ($110<<24>>24)==(0);
  if ($111) {
   continue;
  } else {
   $120 = $110;
  }
  while(1) {
   $119 = $120&255;
   _stbi__skip($s,$119);
   $121 = (_stbi__get8($s)|0);
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    continue L17;
   } else {
    $120 = $121;
   }
  }
 }
 if ((label|0) == 12) {
  $31 = (_stbi__get16le($s)|0);
  $32 = (_stbi__get16le($s)|0);
  $33 = (_stbi__get16le($s)|0);
  $34 = (_stbi__get16le($s)|0);
  $35 = (($33) + ($31))|0;
  $36 = HEAP32[$g>>2]|0;
  $37 = ($35|0)>($36|0);
  if (!($37)) {
   $38 = (($34) + ($32))|0;
   $39 = ((($g)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($38|0)>($40|0);
   if (!($41)) {
    $42 = $36 << 2;
    $43 = ((($g)) + 18504|0);
    HEAP32[$43>>2] = $42;
    $44 = $31 << 2;
    $45 = ((($g)) + 18480|0);
    HEAP32[$45>>2] = $44;
    $46 = HEAP32[$43>>2]|0;
    $47 = Math_imul($46, $32)|0;
    $48 = ((($g)) + 18484|0);
    HEAP32[$48>>2] = $47;
    $49 = HEAP32[$45>>2]|0;
    $50 = $33 << 2;
    $51 = (($49) + ($50))|0;
    $52 = ((($g)) + 18488|0);
    HEAP32[$52>>2] = $51;
    $53 = HEAP32[$48>>2]|0;
    $54 = HEAP32[$43>>2]|0;
    $55 = Math_imul($54, $34)|0;
    $56 = (($55) + ($53))|0;
    $57 = ((($g)) + 18492|0);
    HEAP32[$57>>2] = $56;
    $58 = HEAP32[$45>>2]|0;
    $59 = ((($g)) + 18496|0);
    HEAP32[$59>>2] = $58;
    $60 = HEAP32[$48>>2]|0;
    $61 = ((($g)) + 18500|0);
    HEAP32[$61>>2] = $60;
    $62 = (_stbi__get8($s)|0);
    $63 = $62&255;
    $64 = ((($g)) + 18476|0);
    HEAP32[$64>>2] = $63;
    $65 = $63 & 64;
    $66 = ($65|0)==(0);
    $67 = HEAP32[$43>>2]|0;
    if ($66) {
     $71 = ((($g)) + 18472|0);
     HEAP32[$71>>2] = $67;
     $72 = ((($g)) + 18468|0);
     HEAP32[$72>>2] = 0;
    } else {
     $68 = $67 << 3;
     $69 = ((($g)) + 18472|0);
     HEAP32[$69>>2] = $68;
     $70 = ((($g)) + 18468|0);
     HEAP32[$70>>2] = 3;
    }
    $73 = HEAP32[$64>>2]|0;
    $74 = $73 & 128;
    $75 = ($74|0)==(0);
    if ($75) {
     $87 = ((($g)) + 12|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $88 & 128;
     $90 = ($89|0)==(0);
     if ($90) {
      _stbi__err(27392);
      $$0 = 0;
      return ($$0|0);
     } else {
      $i$04 = 0;
     }
     while(1) {
      $91 = (((((($g)) + 32|0) + ($i$04<<2)|0)) + 3|0);
      HEAP8[$91>>0] = -1;
      $92 = (($i$04) + 1)|0;
      $exitcond = ($92|0)==(256);
      if ($exitcond) {
       break;
      } else {
       $i$04 = $92;
      }
     }
     $93 = ((($g)) + 24|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($94|0)>(-1);
     if ($95) {
      $96 = ((($g)) + 28|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = $97 & 1;
      $99 = ($98|0)==(0);
      if (!($99)) {
       $100 = (((((($g)) + 32|0) + ($94<<2)|0)) + 3|0);
       HEAP8[$100>>0] = 0;
      }
     }
     $101 = ((($g)) + 32|0);
     $102 = ((($g)) + 18464|0);
     HEAP32[$102>>2] = $101;
    } else {
     $76 = ((($g)) + 1056|0);
     $77 = $73 & 7;
     $78 = 2 << $77;
     $79 = ((($g)) + 28|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $80 & 1;
     $82 = ($81|0)==(0);
     if ($82) {
      $85 = -1;
     } else {
      $83 = ((($g)) + 24|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $84;
     }
     _stbi__gif_parse_colortable($s,$76,$78,$85);
     $86 = ((($g)) + 18464|0);
     HEAP32[$86>>2] = $76;
    }
    $103 = (_stbi__process_gif_raster($s,$g)|0);
    $104 = ($103|0)==(0|0);
    if ($104) {
     $$0 = 0;
     return ($$0|0);
    }
    if ((($req_comp|0) == 0) | (($req_comp|0) == 4)) {
     $$0 = $103;
     return ($$0|0);
    }
    $105 = HEAP32[$g>>2]|0;
    $106 = HEAP32[$39>>2]|0;
    $107 = (_stbi__convert_format($103,4,$req_comp,$105,$106)|0);
    $$0 = $107;
    return ($$0|0);
   }
  }
  _stbi__err(27368);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 38) {
  $$0 = $s;
  return ($$0|0);
 }
 else if ((label|0) == 39) {
  _stbi__err(27416);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__fill_gif_background($g) {
 $g = $g|0;
 var $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($g)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($g)) + 32|0) + ($1<<2)|0);
 $3 = HEAP32[$g>>2]|0;
 $4 = ((($g)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3 << 2;
 $7 = Math_imul($6, $5)|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  return;
 }
 $9 = ((($g)) + 8|0);
 $10 = (((((($g)) + 32|0) + ($1<<2)|0)) + 2|0);
 $11 = (((((($g)) + 32|0) + ($1<<2)|0)) + 1|0);
 $12 = (((((($g)) + 32|0) + ($1<<2)|0)) + 3|0);
 $i$04 = 0;
 while(1) {
  $13 = HEAP32[$9>>2]|0;
  $14 = (($13) + ($i$04)|0);
  $15 = HEAP8[$10>>0]|0;
  HEAP8[$14>>0] = $15;
  $16 = HEAP8[$11>>0]|0;
  $$sum1 = $i$04 | 1;
  $17 = (($13) + ($$sum1)|0);
  HEAP8[$17>>0] = $16;
  $18 = HEAP8[$2>>0]|0;
  $$sum2 = $i$04 | 2;
  $19 = (($13) + ($$sum2)|0);
  HEAP8[$19>>0] = $18;
  $20 = HEAP8[$12>>0]|0;
  $$sum3 = $i$04 | 3;
  $21 = (($13) + ($$sum3)|0);
  HEAP8[$21>>0] = $20;
  $22 = (($i$04) + 4)|0;
  $23 = HEAP32[$g>>2]|0;
  $24 = HEAP32[$4>>2]|0;
  $25 = $23 << 2;
  $26 = Math_imul($25, $24)|0;
  $27 = ($22|0)<($26|0);
  if ($27) {
   $i$04 = $22;
  } else {
   break;
  }
 }
 return;
}
function _stbi__process_gif_raster($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $$0 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $avail$0$ph = 0;
 var $avail$0$ph7 = 0, $avail$1 = 0, $bits$0$lcssa = 0, $bits$0$ph = 0, $bits$0$ph3 = 0, $bits$0$ph9 = 0, $bits$040 = 0, $code$047 = 0, $codemask$0$ph = 0, $codemask$0$ph$in = 0, $codesize$0$ph = 0, $codesize$0$ph$in = 0, $first$0$ph = 0, $len$0$lcssa = 0, $len$0$lcssa$lcssa169 = 0, $len$0$ph = 0, $len$0$ph11 = 0, $len$0$ph5 = 0, $len$042 = 0, $len$1 = 0;
 var $oldcode$0$ph = 0, $oldcode$0$ph8 = 0, $or$cond = 0, $valid_bits$0$lcssa = 0, $valid_bits$0$ph = 0, $valid_bits$0$ph10 = 0, $valid_bits$0$ph4 = 0, $valid_bits$041 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = $0&255;
 $2 = ($0&255)>(12);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = 1 << $1;
 $code$047 = 0;
 while(1) {
  $4 = (((($g)) + 2080|0) + ($code$047<<2)|0);
  HEAP16[$4>>1] = -1;
  $5 = $code$047&255;
  $6 = (((((($g)) + 2080|0) + ($code$047<<2)|0)) + 2|0);
  HEAP8[$6>>0] = $5;
  $7 = (((((($g)) + 2080|0) + ($code$047<<2)|0)) + 3|0);
  HEAP8[$7>>0] = $5;
  $8 = (($code$047) + 1)|0;
  $9 = ($8|0)<($3|0);
  if ($9) {
   $code$047 = $8;
  } else {
   break;
  }
 }
 $10 = (($3) + 2)|0;
 $11 = (($3) + 1)|0;
 $bits$0$ph = 0;$first$0$ph = 0;$len$0$ph = 0;$valid_bits$0$ph = 0;
 L7: while(1) {
  $avail$0$ph = $10;$bits$0$ph3 = $bits$0$ph;$codesize$0$ph$in = $1;$len$0$ph5 = $len$0$ph;$oldcode$0$ph = -1;$valid_bits$0$ph4 = $valid_bits$0$ph;
  L9: while(1) {
   $codesize$0$ph = (($codesize$0$ph$in) + 1)|0;
   $codemask$0$ph$in = 1 << $codesize$0$ph;
   $codemask$0$ph = (($codemask$0$ph$in) + -1)|0;
   $avail$0$ph7 = $avail$0$ph;$bits$0$ph9 = $bits$0$ph3;$len$0$ph11 = $len$0$ph5;$oldcode$0$ph8 = $oldcode$0$ph;$valid_bits$0$ph10 = $valid_bits$0$ph4;
   while(1) {
    $12 = ($valid_bits$0$ph10|0)<($codesize$0$ph|0);
    if ($12) {
     $bits$040 = $bits$0$ph9;$len$042 = $len$0$ph11;$valid_bits$041 = $valid_bits$0$ph10;
     while(1) {
      $13 = ($len$042|0)==(0);
      if ($13) {
       $14 = (_stbi__get8($s)|0);
       $15 = $14&255;
       $16 = ($14<<24>>24)==(0);
       if ($16) {
        label = 10;
        break L7;
       } else {
        $len$1 = $15;
       }
      } else {
       $len$1 = $len$042;
      }
      $19 = (($len$1) + -1)|0;
      $20 = (_stbi__get8($s)|0);
      $21 = $20&255;
      $22 = $21 << $valid_bits$041;
      $23 = $22 | $bits$040;
      $24 = (($valid_bits$041) + 8)|0;
      $25 = ($24|0)<($codesize$0$ph|0);
      if ($25) {
       $bits$040 = $23;$len$042 = $19;$valid_bits$041 = $24;
      } else {
       $bits$0$lcssa = $23;$len$0$lcssa = $19;$valid_bits$0$lcssa = $24;
       break;
      }
     }
    } else {
     $bits$0$lcssa = $bits$0$ph9;$len$0$lcssa = $len$0$ph11;$valid_bits$0$lcssa = $valid_bits$0$ph10;
    }
    $26 = $bits$0$lcssa & $codemask$0$ph;
    $27 = $bits$0$lcssa >> $codesize$0$ph;
    $28 = (($valid_bits$0$lcssa) - ($codesize$0$ph))|0;
    $29 = ($26|0)==($3|0);
    if ($29) {
     $bits$0$ph = $27;$first$0$ph = 1;$len$0$ph = $len$0$lcssa;$valid_bits$0$ph = $28;
     continue L7;
    }
    $30 = ($26|0)==($11|0);
    if ($30) {
     $len$0$lcssa$lcssa169 = $len$0$lcssa;
     label = 14;
     break L7;
    }
    $39 = ($26|0)>($avail$0$ph7|0);
    if ($39) {
     label = 29;
     break L7;
    }
    if (!($first$0$ph)) {
     label = 19;
     break L7;
    }
    $40 = ($oldcode$0$ph8|0)>(-1);
    if ($40) {
     $41 = (($avail$0$ph7) + 1)|0;
     $42 = ($avail$0$ph7|0)>(4095);
     if ($42) {
      label = 22;
      break L7;
     }
     $43 = $oldcode$0$ph8&65535;
     $44 = (((($g)) + 2080|0) + ($avail$0$ph7<<2)|0);
     HEAP16[$44>>1] = $43;
     $45 = (((((($g)) + 2080|0) + ($oldcode$0$ph8<<2)|0)) + 2|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = (((((($g)) + 2080|0) + ($avail$0$ph7<<2)|0)) + 2|0);
     HEAP8[$47>>0] = $46;
     $48 = ($26|0)==($41|0);
     if ($48) {
      $$sink = $46;
     } else {
      $49 = (((((($g)) + 2080|0) + ($26<<2)|0)) + 2|0);
      $50 = HEAP8[$49>>0]|0;
      $$sink = $50;
     }
     $51 = (((((($g)) + 2080|0) + ($avail$0$ph7<<2)|0)) + 3|0);
     HEAP8[$51>>0] = $$sink;
     $avail$1 = $41;
    } else {
     $52 = ($26|0)==($avail$0$ph7|0);
     if ($52) {
      label = 27;
      break L7;
     } else {
      $avail$1 = $avail$0$ph7;
     }
    }
    $53 = $26&65535;
    _stbi__out_gif_code($g,$53);
    $54 = $avail$1 & $codemask$0$ph;
    $55 = ($54|0)==(0);
    $56 = ($avail$1|0)<(4096);
    $or$cond = $56 & $55;
    if ($or$cond) {
     $avail$0$ph = $avail$1;$bits$0$ph3 = $27;$codesize$0$ph$in = $codesize$0$ph;$len$0$ph5 = $len$0$lcssa;$oldcode$0$ph = $26;$valid_bits$0$ph4 = $28;
     continue L9;
    } else {
     $avail$0$ph7 = $avail$1;$bits$0$ph9 = $27;$len$0$ph11 = $len$0$lcssa;$oldcode$0$ph8 = $26;$valid_bits$0$ph10 = $28;
    }
   }
  }
 }
 if ((label|0) == 10) {
  $17 = ((($g)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $$0 = $18;
  return ($$0|0);
 }
 else if ((label|0) == 14) {
  _stbi__skip($s,$len$0$lcssa$lcssa169);
  $31 = (_stbi__get8($s)|0);
  $32 = ($31<<24>>24)==(0);
  if (!($32)) {
   $34 = $31;
   while(1) {
    $33 = $34&255;
    _stbi__skip($s,$33);
    $35 = (_stbi__get8($s)|0);
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     break;
    } else {
     $34 = $35;
    }
   }
  }
  $37 = ((($g)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $$0 = $38;
  return ($$0|0);
 }
 else if ((label|0) == 19) {
  _stbi__err(27432);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 22) {
  _stbi__err(27448);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 27) {
  _stbi__err(27464);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 29) {
  _stbi__err(27464);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__out_gif_code($g,$code) {
 $g = $g|0;
 $code = $code|0;
 var $$pr = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $code&65535;
 $1 = (((($g)) + 2080|0) + ($0<<2)|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)>(-1);
 if ($3) {
  _stbi__out_gif_code($g,$2);
 }
 $4 = ((($g)) + 18500|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($g)) + 18492|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($7|0);
 if (!($8)) {
  return;
 }
 $9 = ((($g)) + 18496|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($5))|0;
 $12 = ((($g)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (((((($g)) + 2080|0) + ($0<<2)|0)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 2;
 $18 = ((($g)) + 18464|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum1 = $17 | 3;
 $20 = (($19) + ($$sum1)|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)<(0);
 if ($22) {
  $23 = (($19) + ($17)|0);
  $24 = (($13) + ($11)|0);
  $$sum2 = $17 | 2;
  $25 = (($19) + ($$sum2)|0);
  $26 = HEAP8[$25>>0]|0;
  HEAP8[$24>>0] = $26;
  $$sum3 = $17 | 1;
  $27 = (($19) + ($$sum3)|0);
  $28 = HEAP8[$27>>0]|0;
  $$sum = (($11) + 1)|0;
  $29 = (($13) + ($$sum)|0);
  HEAP8[$29>>0] = $28;
  $30 = HEAP8[$23>>0]|0;
  $$sum4 = (($11) + 2)|0;
  $31 = (($13) + ($$sum4)|0);
  HEAP8[$31>>0] = $30;
  $32 = HEAP8[$20>>0]|0;
  $$sum5 = (($11) + 3)|0;
  $33 = (($13) + ($$sum5)|0);
  HEAP8[$33>>0] = $32;
 }
 $34 = HEAP32[$9>>2]|0;
 $35 = (($34) + 4)|0;
 HEAP32[$9>>2] = $35;
 $36 = ((($g)) + 18488|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35|0)<($37|0);
 if ($38) {
  return;
 }
 $39 = ((($g)) + 18480|0);
 $40 = HEAP32[$39>>2]|0;
 HEAP32[$9>>2] = $40;
 $41 = ((($g)) + 18472|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$4>>2]|0;
 $44 = (($43) + ($42))|0;
 HEAP32[$4>>2] = $44;
 $45 = ((($g)) + 18468|0);
 $46 = HEAP32[$6>>2]|0;
 $47 = ($44|0)<($46|0);
 if ($47) {
  return;
 }
 $48 = ((($g)) + 18504|0);
 $49 = ((($g)) + 18484|0);
 $$pr = HEAP32[$45>>2]|0;
 $50 = $$pr;
 while(1) {
  $51 = ($50|0)>(0);
  if (!($51)) {
   label = 11;
   break;
  }
  $52 = HEAP32[$48>>2]|0;
  $53 = $52 << $50;
  HEAP32[$41>>2] = $53;
  $54 = HEAP32[$49>>2]|0;
  $55 = $53 >> 1;
  $56 = (($55) + ($54))|0;
  HEAP32[$4>>2] = $56;
  $57 = HEAP32[$45>>2]|0;
  $58 = (($57) + -1)|0;
  HEAP32[$45>>2] = $58;
  $59 = HEAP32[$4>>2]|0;
  $60 = HEAP32[$6>>2]|0;
  $61 = ($59|0)<($60|0);
  if ($61) {
   label = 11;
   break;
  } else {
   $50 = $58;
  }
 }
 if ((label|0) == 11) {
  return;
 }
}
function _stbi__gif_test_raw($s) {
 $s = $s|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = ($0<<24>>24)==(71);
 if ($1) {
  $2 = (_stbi__get8($s)|0);
  $3 = ($2<<24>>24)==(73);
  if ($3) {
   $4 = (_stbi__get8($s)|0);
   $5 = ($4<<24>>24)==(70);
   if ($5) {
    $6 = (_stbi__get8($s)|0);
    $7 = ($6<<24>>24)==(56);
    if ($7) {
     $8 = (_stbi__get8($s)|0);
     if ((($8<<24>>24) == 55) | (($8<<24>>24) == 57)) {
      $9 = (_stbi__get8($s)|0);
      $10 = ($9<<24>>24)==(97);
      $$ = $10&1;
      $$0 = $$;
     } else {
      $$0 = 0;
     }
    } else {
     $$0 = 0;
    }
   } else {
    $$0 = 0;
   }
  } else {
   $$0 = 0;
  }
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _stbi__high_bit($z) {
 $z = $z|0;
 var $$ = 0, $$01 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$n$3 = 0, $$z = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $n$1 = 0, $n$2 = 0, $n$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)==(0);
 if ($0) {
  $$01 = -1;
  return ($$01|0);
 }
 $1 = ($z>>>0)>(65535);
 $2 = $z >>> 16;
 $$z = $1 ? $2 : $z;
 $$ = $1 ? 16 : 0;
 $3 = ($$z>>>0)>(255);
 $4 = $$ | 8;
 $5 = $$z >>> 8;
 $$1 = $3 ? $5 : $$z;
 $n$1 = $3 ? $4 : $$;
 $6 = ($$1>>>0)>(15);
 $7 = $n$1 | 4;
 $8 = $$1 >>> 4;
 $$2 = $6 ? $8 : $$1;
 $n$2 = $6 ? $7 : $n$1;
 $9 = ($$2>>>0)>(3);
 $10 = $n$2 | 2;
 $11 = $$2 >>> 2;
 $$3 = $9 ? $11 : $$2;
 $n$3 = $9 ? $10 : $n$2;
 $12 = ($$3>>>0)>(1);
 $13 = $12&1;
 $$n$3 = (($13) + ($n$3))|0;
 $$01 = $$n$3;
 return ($$01|0);
}
function _stbi__bitcount($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a & 1431655765;
 $1 = $a >>> 1;
 $2 = $1 & 1431655765;
 $3 = (($2) + ($0))|0;
 $4 = $3 & 858993459;
 $5 = $3 >>> 2;
 $6 = $5 & 858993459;
 $7 = (($6) + ($4))|0;
 $8 = $7 >>> 4;
 $9 = (($8) + ($7))|0;
 $10 = $9 & 252645135;
 $11 = $10 >>> 8;
 $12 = (($11) + ($10))|0;
 $13 = $12 >>> 16;
 $14 = (($13) + ($12))|0;
 $15 = $14 & 255;
 return ($15|0);
}
function _stbi__shiftsigned($v,$shift,$bits) {
 $v = $v|0;
 $shift = $shift|0;
 $bits = $bits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $result$0$lcssa = 0, $result$01 = 0, $z$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($shift|0)<(0);
 $1 = (0 - ($shift))|0;
 $2 = $v << $1;
 $3 = $v >> $shift;
 $$0 = $0 ? $2 : $3;
 $4 = ($bits|0)<(8);
 if ($4) {
  $result$01 = $$0;$z$02 = $bits;
 } else {
  $result$0$lcssa = $$0;
  return ($result$0$lcssa|0);
 }
 while(1) {
  $5 = $$0 >> $z$02;
  $6 = (($5) + ($result$01))|0;
  $7 = (($z$02) + ($bits))|0;
  $8 = ($7|0)<(8);
  if ($8) {
   $result$01 = $6;$z$02 = $7;
  } else {
   $result$0$lcssa = $6;
   break;
  }
 }
 return ($result$0$lcssa|0);
}
function _stbi__bmp_test_raw($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stbi__get8($s)|0);
 $1 = ($0<<24>>24)==(66);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_stbi__get8($s)|0);
 $3 = ($2<<24>>24)==(77);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 (_stbi__get32le($s)|0);
 (_stbi__get16le($s)|0);
 (_stbi__get16le($s)|0);
 (_stbi__get32le($s)|0);
 $4 = (_stbi__get32le($s)|0);
 switch ($4|0) {
 case 124: case 12: case 40: case 56: case 108:  {
  $$0 = 1;
  return ($$0|0);
  break;
 }
 default: {
 }
 }
 $$0 = 0;
 return ($$0|0);
}
function _stbi__do_png($p,$x,$y,$n,$req_comp) {
 $p = $p|0;
 $x = $x|0;
 $y = $y|0;
 $n = $n|0;
 $req_comp = $req_comp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, $result$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($req_comp>>>0)>(4);
 if ($0) {
  _stbi__err(27624);
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_stbi__parse_png_file($p,0,$req_comp)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $result$1 = 0;
 } else {
  $3 = ((($p)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$3>>2] = 0;
  $5 = ($req_comp|0)==(0);
  if ($5) {
   $result$0 = $4;
  } else {
   $6 = HEAP32[$p>>2]|0;
   $7 = ((($6)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==($req_comp|0);
   if ($9) {
    $result$0 = $4;
   } else {
    $10 = HEAP32[$6>>2]|0;
    $11 = ((($6)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (_stbi__convert_format($4,$8,$req_comp,$10,$12)|0);
    $14 = HEAP32[$p>>2]|0;
    $15 = ((($14)) + 12|0);
    HEAP32[$15>>2] = $req_comp;
    $16 = ($13|0)==(0|0);
    if ($16) {
     $$0 = 0;
     return ($$0|0);
    } else {
     $result$0 = $13;
    }
   }
  }
  $17 = HEAP32[$p>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$x>>2] = $18;
  $19 = HEAP32[$p>>2]|0;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$y>>2] = $21;
  $22 = ($n|0)==(0|0);
  if ($22) {
   $result$1 = $result$0;
  } else {
   $23 = HEAP32[$p>>2]|0;
   $24 = ((($23)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$n>>2] = $25;
   $result$1 = $result$0;
  }
 }
 $26 = ((($p)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 _free($27);
 HEAP32[$26>>2] = 0;
 $28 = ((($p)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 _free($29);
 HEAP32[$28>>2] = 0;
 $30 = ((($p)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 _free($31);
 HEAP32[$30>>2] = 0;
 $$0 = $result$1;
 return ($$0|0);
}
function _stbi__setup_jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($j)) + 18176|0);
 HEAP32[$0>>2] = 2;
 $1 = ((($j)) + 18180|0);
 HEAP32[$1>>2] = 1;
 $2 = ((($j)) + 18184|0);
 HEAP32[$2>>2] = 1;
 return;
}
function _load_jpeg_image($z,$out_x,$out_y,$comp,$req_comp) {
 $z = $z|0;
 $out_x = $out_x|0;
 $out_y = $out_y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$in = 0, $$in4 = 0, $$pr = 0, $$pr5 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $coutput = 0, $exitcond = 0, $i$018 = 0, $i$115 = 0, $i$213 = 0, $j$020 = 0, $k$023 = 0, $k$111 = 0, $or$cond3 = 0, $out$017 = 0, $out$112 = 0;
 var $res_comp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $coutput = sp + 128|0;
 $res_comp = sp;
 $0 = HEAP32[$z>>2]|0;
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ($req_comp>>>0)>(4);
 if ($2) {
  _stbi__err(27624);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $3 = (_stbi__decode_jpeg_image($z)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  _stbi__cleanup_jpeg($z);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $5 = ($req_comp|0)==(0);
 if ($5) {
  $6 = HEAP32[$z>>2]|0;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $13 = $8;
 } else {
  $13 = $req_comp;
 }
 $9 = HEAP32[$z>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(3);
 $14 = ($13|0)<(3);
 $or$cond3 = $14 & $12;
 $$ = $or$cond3 ? 1 : $11;
 $15 = ($$|0)>(0);
 L12: do {
  if ($15) {
   $16 = ((($z)) + 17796|0);
   $17 = ((($z)) + 17800|0);
   $18 = ((($z)) + 18184|0);
   $k$023 = 0;
   while(1) {
    $19 = (($res_comp) + ($k$023<<5)|0);
    $20 = HEAP32[$z>>2]|0;
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + 3)|0;
    $23 = (_stbi__malloc($22)|0);
    $24 = (((((($z)) + 17820|0) + (($k$023*72)|0)|0)) + 56|0);
    HEAP32[$24>>2] = $23;
    $25 = ($23|0)==(0|0);
    if ($25) {
     break;
    }
    $26 = HEAP32[$16>>2]|0;
    $27 = (((((($z)) + 17820|0) + (($k$023*72)|0)|0)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($26|0) / ($28|0))&-1;
    $30 = (((($res_comp) + ($k$023<<5)|0)) + 12|0);
    HEAP32[$30>>2] = $29;
    $31 = HEAP32[$17>>2]|0;
    $32 = (((((($z)) + 17820|0) + (($k$023*72)|0)|0)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($31|0) / ($33|0))&-1;
    $35 = (((($res_comp) + ($k$023<<5)|0)) + 16|0);
    HEAP32[$35>>2] = $34;
    $36 = $34 >> 1;
    $37 = (((($res_comp) + ($k$023<<5)|0)) + 24|0);
    HEAP32[$37>>2] = $36;
    $38 = HEAP32[$z>>2]|0;
    $39 = HEAP32[$38>>2]|0;
    $40 = HEAP32[$30>>2]|0;
    $41 = (($39) + -1)|0;
    $42 = (($41) + ($40))|0;
    $43 = (($42>>>0) / ($40>>>0))&-1;
    $44 = (((($res_comp) + ($k$023<<5)|0)) + 20|0);
    HEAP32[$44>>2] = $43;
    $45 = (((($res_comp) + ($k$023<<5)|0)) + 28|0);
    HEAP32[$45>>2] = 0;
    $46 = (((((($z)) + 17820|0) + (($k$023*72)|0)|0)) + 44|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (((($res_comp) + ($k$023<<5)|0)) + 8|0);
    HEAP32[$48>>2] = $47;
    $49 = (((($res_comp) + ($k$023<<5)|0)) + 4|0);
    HEAP32[$49>>2] = $47;
    $50 = HEAP32[$30>>2]|0;
    $51 = ($50|0)==(1);
    do {
     if ($51) {
      $52 = HEAP32[$35>>2]|0;
      $53 = ($52|0)==(1);
      if ($53) {
       HEAP32[$19>>2] = 2;
       break;
      }
      $$pr = HEAP32[$30>>2]|0;
      $54 = ($$pr|0)==(1);
      if ($54) {
       $55 = HEAP32[$35>>2]|0;
       $56 = ($55|0)==(2);
       if ($56) {
        HEAP32[$19>>2] = 3;
       } else {
        label = 17;
       }
      } else {
       $57 = $$pr;
       label = 18;
      }
     } else {
      label = 17;
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     $$pr5 = HEAP32[$30>>2]|0;
     $57 = $$pr5;
     label = 18;
    }
    do {
     if ((label|0) == 18) {
      label = 0;
      $58 = ($57|0)==(2);
      if ($58) {
       $59 = HEAP32[$35>>2]|0;
       $60 = ($59|0)==(1);
       if ($60) {
        HEAP32[$19>>2] = 4;
        break;
       }
      }
      $61 = HEAP32[$30>>2]|0;
      $62 = ($61|0)==(2);
      if ($62) {
       $63 = HEAP32[$35>>2]|0;
       $64 = ($63|0)==(2);
       if ($64) {
        $65 = HEAP32[$18>>2]|0;
        HEAP32[$19>>2] = $65;
        break;
       }
      }
      HEAP32[$19>>2] = 5;
     }
    } while(0);
    $66 = (($k$023) + 1)|0;
    $67 = ($66|0)<($$|0);
    if ($67) {
     $k$023 = $66;
    } else {
     label = 26;
     break L12;
    }
   }
   _stbi__cleanup_jpeg($z);
   _stbi__err(25000);
   $$0 = 0;
  } else {
   label = 26;
  }
 } while(0);
 do {
  if ((label|0) == 26) {
   $68 = HEAP32[$z>>2]|0;
   $69 = HEAP32[$68>>2]|0;
   $70 = Math_imul($69, $13)|0;
   $71 = ((($68)) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = Math_imul($70, $72)|0;
   $74 = (($73) + 1)|0;
   $75 = (_stbi__malloc($74)|0);
   $76 = ($75|0)==(0|0);
   if ($76) {
    _stbi__cleanup_jpeg($z);
    _stbi__err(25000);
    $$0 = 0;
    break;
   }
   $77 = HEAP32[$z>>2]|0;
   $78 = ((($77)) + 4|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($79|0)==(0);
   if (!($80)) {
    $81 = ($$|0)>(0);
    $82 = ($13|0)>(2);
    $83 = ((($z)) + 18180|0);
    $84 = ((($coutput)) + 4|0);
    $85 = ((($coutput)) + 8|0);
    $86 = ($13|0)==(1);
    $88 = $77;$j$020 = 0;
    while(1) {
     $87 = HEAP32[$88>>2]|0;
     $89 = Math_imul($j$020, $13)|0;
     $90 = Math_imul($89, $87)|0;
     $91 = (($75) + ($90)|0);
     if ($81) {
      $k$111 = 0;
      while(1) {
       $92 = (((($res_comp) + ($k$111<<5)|0)) + 24|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = (((($res_comp) + ($k$111<<5)|0)) + 16|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = $95 >> 1;
       $97 = ($93|0)>=($96|0);
       $98 = (($res_comp) + ($k$111<<5)|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (((((($z)) + 17820|0) + (($k$111*72)|0)|0)) + 56|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = (((($res_comp) + ($k$111<<5)|0)) + 8|0);
       $103 = (((($res_comp) + ($k$111<<5)|0)) + 4|0);
       $$in = $97 ? $102 : $103;
       $104 = HEAP32[$$in>>2]|0;
       $$in4 = $97 ? $103 : $102;
       $105 = HEAP32[$$in4>>2]|0;
       $106 = (((($res_comp) + ($k$111<<5)|0)) + 20|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = (((($res_comp) + ($k$111<<5)|0)) + 12|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (FUNCTION_TABLE_iiiiii[$99 & 7]($101,$104,$105,$107,$109)|0);
       $111 = (($coutput) + ($k$111<<2)|0);
       HEAP32[$111>>2] = $110;
       $112 = HEAP32[$92>>2]|0;
       $113 = (($112) + 1)|0;
       HEAP32[$92>>2] = $113;
       $114 = HEAP32[$94>>2]|0;
       $115 = ($113|0)<($114|0);
       if (!($115)) {
        HEAP32[$92>>2] = 0;
        $116 = HEAP32[$102>>2]|0;
        HEAP32[$103>>2] = $116;
        $117 = (((($res_comp) + ($k$111<<5)|0)) + 28|0);
        $118 = HEAP32[$117>>2]|0;
        $119 = (($118) + 1)|0;
        HEAP32[$117>>2] = $119;
        $120 = (((((($z)) + 17820|0) + (($k$111*72)|0)|0)) + 32|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = ($119|0)<($121|0);
        if ($122) {
         $123 = (((((($z)) + 17820|0) + (($k$111*72)|0)|0)) + 36|0);
         $124 = HEAP32[$123>>2]|0;
         $125 = HEAP32[$102>>2]|0;
         $126 = (($125) + ($124)|0);
         HEAP32[$102>>2] = $126;
        }
       }
       $127 = (($k$111) + 1)|0;
       $exitcond = ($127|0)==($$|0);
       if ($exitcond) {
        break;
       } else {
        $k$111 = $127;
       }
      }
     }
     $128 = HEAP32[$coutput>>2]|0;
     $129 = HEAP32[$z>>2]|0;
     do {
      if ($82) {
       $130 = ((($129)) + 8|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = ($131|0)==(3);
       if ($132) {
        $136 = HEAP32[$83>>2]|0;
        $137 = HEAP32[$84>>2]|0;
        $138 = HEAP32[$85>>2]|0;
        $139 = HEAP32[$129>>2]|0;
        FUNCTION_TABLE_viiiiii[$136 & 3]($91,$128,$137,$138,$139,$13);
        break;
       }
       $133 = HEAP32[$z>>2]|0;
       $134 = HEAP32[$133>>2]|0;
       $135 = ($134|0)==(0);
       if (!($135)) {
        $i$018 = 0;$out$017 = $91;
        while(1) {
         $140 = (($128) + ($i$018)|0);
         $141 = HEAP8[$140>>0]|0;
         $142 = ((($out$017)) + 2|0);
         HEAP8[$142>>0] = $141;
         $143 = ((($out$017)) + 1|0);
         HEAP8[$143>>0] = $141;
         HEAP8[$out$017>>0] = $141;
         $144 = ((($out$017)) + 3|0);
         HEAP8[$144>>0] = -1;
         $145 = (($out$017) + ($13)|0);
         $146 = (($i$018) + 1)|0;
         $147 = HEAP32[$z>>2]|0;
         $148 = HEAP32[$147>>2]|0;
         $149 = ($146>>>0)<($148>>>0);
         if ($149) {
          $i$018 = $146;$out$017 = $145;
         } else {
          break;
         }
        }
       }
      } else {
       $150 = HEAP32[$129>>2]|0;
       $151 = ($150|0)==(0);
       if ($86) {
        if ($151) {
         break;
        } else {
         $i$115 = 0;
        }
        while(1) {
         $152 = (($128) + ($i$115)|0);
         $153 = HEAP8[$152>>0]|0;
         $$sum = (($i$115) + ($90))|0;
         $154 = (($75) + ($$sum)|0);
         HEAP8[$154>>0] = $153;
         $155 = (($i$115) + 1)|0;
         $156 = HEAP32[$z>>2]|0;
         $157 = HEAP32[$156>>2]|0;
         $158 = ($155>>>0)<($157>>>0);
         if ($158) {
          $i$115 = $155;
         } else {
          break;
         }
        }
       } else {
        if ($151) {
         break;
        } else {
         $i$213 = 0;$out$112 = $91;
        }
        while(1) {
         $159 = (($128) + ($i$213)|0);
         $160 = HEAP8[$159>>0]|0;
         $161 = ((($out$112)) + 1|0);
         HEAP8[$out$112>>0] = $160;
         $162 = ((($out$112)) + 2|0);
         HEAP8[$161>>0] = -1;
         $163 = (($i$213) + 1)|0;
         $164 = HEAP32[$z>>2]|0;
         $165 = HEAP32[$164>>2]|0;
         $166 = ($163>>>0)<($165>>>0);
         if ($166) {
          $i$213 = $163;$out$112 = $162;
         } else {
          break;
         }
        }
       }
      }
     } while(0);
     $167 = (($j$020) + 1)|0;
     $168 = HEAP32[$z>>2]|0;
     $169 = ((($168)) + 4|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = ($167>>>0)<($170>>>0);
     if ($171) {
      $88 = $168;$j$020 = $167;
     } else {
      break;
     }
    }
   }
   _stbi__cleanup_jpeg($z);
   $172 = HEAP32[$z>>2]|0;
   $173 = HEAP32[$172>>2]|0;
   HEAP32[$out_x>>2] = $173;
   $174 = HEAP32[$z>>2]|0;
   $175 = ((($174)) + 4|0);
   $176 = HEAP32[$175>>2]|0;
   HEAP32[$out_y>>2] = $176;
   $177 = ($comp|0)==(0|0);
   if ($177) {
    $$0 = $75;
   } else {
    $178 = HEAP32[$z>>2]|0;
    $179 = ((($178)) + 8|0);
    $180 = HEAP32[$179>>2]|0;
    HEAP32[$comp>>2] = $180;
    $$0 = $75;
   }
  }
 } while(0);
 $$1 = $$0;
 STACKTOP = sp;return ($$1|0);
}
function _stbi__decode_jpeg_image($j) {
 $j = $j|0;
 var $$0 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($j)) + 17868|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($j)) + 17872|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($j)) + 17940|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($j)) + 17944|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($j)) + 18012|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($j)) + 18016|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($j)) + 18084|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($j)) + 18088|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($j)) + 18168|0);
 HEAP32[$8>>2] = 0;
 $9 = (_stbi__decode_jpeg_header($j,0)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = (_stbi__get_marker($j)|0);
 $12 = ((($j)) + 18116|0);
 $$sink = $11;
 L4: while(1) {
  $13 = $$sink&255;
  L6: do {
   if ((($13|0) == 218)) {
    $14 = (_stbi__process_scan_header($j)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$0 = 0;
     label = 15;
     break L4;
    }
    $16 = (_stbi__parse_entropy_coded_data($j)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $$0 = 0;
     label = 15;
     break L4;
    }
    $18 = HEAP8[$12>>0]|0;
    $19 = ($18<<24>>24)==(-1);
    if ($19) {
     while(1) {
      $20 = HEAP32[$j>>2]|0;
      $21 = (_stbi__at_eof($20)|0);
      $22 = ($21|0)==(0);
      if (!($22)) {
       break L6;
      }
      $23 = HEAP32[$j>>2]|0;
      $24 = (_stbi__get8($23)|0);
      if ((($24<<24>>24) == -1)) {
       break;
      } else if (!((($24<<24>>24) == 0))) {
       label = 10;
       break L4;
      }
     }
     $25 = HEAP32[$j>>2]|0;
     $26 = (_stbi__get8($25)|0);
     HEAP8[$12>>0] = $26;
    }
   } else if ((($13|0) == 217)) {
    label = 13;
    break L4;
   } else {
    $27 = (_stbi__process_marker($j,$13)|0);
    $28 = ($27|0)==(0);
    if ($28) {
     $$0 = 0;
     label = 15;
     break L4;
    }
   }
  } while(0);
  $29 = (_stbi__get_marker($j)|0);
  $$sink = $29;
 }
 if ((label|0) == 10) {
  _stbi__err(27640);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 13) {
  $30 = ((($j)) + 18124|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0);
  if ($32) {
   $$0 = 1;
   return ($$0|0);
  }
  _stbi__jpeg_finish($j);
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 15) {
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__cleanup_jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$j>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if ($3) {
  $i$01 = 0;
 } else {
  return;
 }
 while(1) {
  $4 = (((((($j)) + 17820|0) + (($i$01*72)|0)|0)) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   _free($5);
   HEAP32[$4>>2] = 0;
   $7 = (((((($j)) + 17820|0) + (($i$01*72)|0)|0)) + 44|0);
   HEAP32[$7>>2] = 0;
  }
  $8 = (((((($j)) + 17820|0) + (($i$01*72)|0)|0)) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   _free($9);
   HEAP32[$8>>2] = 0;
   $11 = (((((($j)) + 17820|0) + (($i$01*72)|0)|0)) + 60|0);
   HEAP32[$11>>2] = 0;
  }
  $12 = (((((($j)) + 17820|0) + (($i$01*72)|0)|0)) + 56|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   _free($13);
   HEAP32[$12>>2] = 0;
  }
  $15 = (($i$01) + 1)|0;
  $16 = HEAP32[$j>>2]|0;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($15|0)<($18|0);
  if ($19) {
   $i$01 = $15;
  } else {
   break;
  }
 }
 return;
}
function _resample_row_1($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($in_near|0);
}
function _stbi__resample_row_v_2($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)>(0);
 if ($0) {
  $i$01 = 0;
 } else {
  return ($out|0);
 }
 while(1) {
  $1 = (($in_near) + ($i$01)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3*3)|0;
  $5 = (($in_far) + ($i$01)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (($7) + 2)|0;
  $9 = (($8) + ($4))|0;
  $10 = $9 >>> 2;
  $11 = $10&255;
  $12 = (($out) + ($i$01)|0);
  HEAP8[$12>>0] = $11;
  $13 = (($i$01) + 1)|0;
  $exitcond = ($13|0)==($w|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $13;
  }
 }
 return ($out|0);
}
function _stbi__resample_row_h_2($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$0$lcssa = 0, $i$01 = 0, $phitmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)==(1);
 $1 = HEAP8[$in_near>>0]|0;
 if ($0) {
  $2 = ((($out)) + 1|0);
  HEAP8[$2>>0] = $1;
  HEAP8[$out>>0] = $1;
  return ($out|0);
 }
 HEAP8[$out>>0] = $1;
 $3 = HEAP8[$in_near>>0]|0;
 $4 = $3&255;
 $5 = ($4*3)|0;
 $6 = ((($in_near)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (($8) + 2)|0;
 $10 = (($9) + ($5))|0;
 $11 = $10 >>> 2;
 $12 = $11&255;
 $13 = ((($out)) + 1|0);
 HEAP8[$13>>0] = $12;
 $14 = (($w) + -1)|0;
 $15 = ($14|0)>(1);
 if ($15) {
  $16 = (($w) + -1)|0;
  $i$01 = 1;
  while(1) {
   $17 = (($in_near) + ($i$01)|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = ($19*3)|0;
   $21 = (($20) + 2)|0;
   $22 = (($i$01) + -1)|0;
   $23 = (($in_near) + ($22)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = (($21) + ($25))|0;
   $27 = $26 >>> 2;
   $28 = $27&255;
   $29 = $i$01 << 1;
   $30 = (($out) + ($29)|0);
   HEAP8[$30>>0] = $28;
   $31 = (($i$01) + 1)|0;
   $32 = (($in_near) + ($31)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = (($21) + ($34))|0;
   $36 = $35 >>> 2;
   $37 = $36&255;
   $38 = $29 | 1;
   $39 = (($out) + ($38)|0);
   HEAP8[$39>>0] = $37;
   $exitcond = ($31|0)==($16|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $31;
   }
  }
  $phitmp = $16 << 1;
  $i$0$lcssa = $phitmp;
 } else {
  $i$0$lcssa = 2;
 }
 $40 = (($w) + -2)|0;
 $41 = (($in_near) + ($40)|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = ($43*3)|0;
 $45 = (($in_near) + ($14)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = (($47) + 2)|0;
 $49 = (($48) + ($44))|0;
 $50 = $49 >>> 2;
 $51 = $50&255;
 $52 = (($out) + ($i$0$lcssa)|0);
 HEAP8[$52>>0] = $51;
 $53 = HEAP8[$45>>0]|0;
 $54 = $i$0$lcssa | 1;
 $55 = (($out) + ($54)|0);
 HEAP8[$55>>0] = $53;
 return ($out|0);
}
function _stbi__resample_row_generic($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $exitcond4 = 0, $i$02 = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)>(0);
 if (!($0)) {
  return ($out|0);
 }
 $1 = ($hs|0)>(0);
 $i$02 = 0;
 while(1) {
  if ($1) {
   $2 = (($in_near) + ($i$02)|0);
   $3 = Math_imul($i$02, $hs)|0;
   $j$01 = 0;
   while(1) {
    $4 = HEAP8[$2>>0]|0;
    $5 = (($j$01) + ($3))|0;
    $6 = (($out) + ($5)|0);
    HEAP8[$6>>0] = $4;
    $7 = (($j$01) + 1)|0;
    $exitcond = ($7|0)==($hs|0);
    if ($exitcond) {
     break;
    } else {
     $j$01 = $7;
    }
   }
  }
  $8 = (($i$02) + 1)|0;
  $exitcond4 = ($8|0)==($w|0);
  if ($exitcond4) {
   break;
  } else {
   $i$02 = $8;
  }
 }
 return ($out|0);
}
function _stbi__process_scan_header($z) {
 $z = $z|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $9 = 0, $i$010 = 0, $or$cond1 = 0, $or$cond2 = 0, $which$0$lcssa = 0, $which$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$z>>2]|0;
 $1 = (_stbi__get16be($0)|0);
 $2 = HEAP32[$z>>2]|0;
 $3 = (_stbi__get8($2)|0);
 $4 = $3&255;
 $5 = ((($z)) + 18148|0);
 HEAP32[$5>>2] = $4;
 $6 = (($3) + -1)<<24>>24;
 $7 = ($6&255)>(3);
 if (!($7)) {
  $8 = HEAP32[$z>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($4|0)>($10|0);
  if (!($11)) {
   $12 = $4 << 1;
   $13 = (($12) + 6)|0;
   $14 = ($1|0)==($13|0);
   if (!($14)) {
    _stbi__err(28048);
    $$0 = 0;
    return ($$0|0);
   }
   $15 = HEAP32[$5>>2]|0;
   $16 = ($15|0)>(0);
   $17 = HEAP32[$z>>2]|0;
   $18 = (_stbi__get8($17)|0);
   $19 = $18&255;
   L8: do {
    if ($16) {
     $30 = $19;$i$010 = 0;
     while(1) {
      $20 = HEAP32[$z>>2]|0;
      $21 = (_stbi__get8($20)|0);
      $22 = $21&255;
      $23 = HEAP32[$z>>2]|0;
      $24 = ((($23)) + 8|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)>(0);
      L11: do {
       if ($26) {
        $which$07 = 0;
        while(1) {
         $27 = (((($z)) + 17820|0) + (($which$07*72)|0)|0);
         $28 = HEAP32[$27>>2]|0;
         $29 = ($28|0)==($30|0);
         if ($29) {
          $which$0$lcssa = $which$07;
          break L11;
         }
         $31 = (($which$07) + 1)|0;
         $32 = HEAP32[$z>>2]|0;
         $33 = ((($32)) + 8|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ($31|0)<($34|0);
         if ($35) {
          $which$07 = $31;
         } else {
          $which$0$lcssa = $31;
          break;
         }
        }
       } else {
        $which$0$lcssa = 0;
       }
      } while(0);
      $36 = HEAP32[$z>>2]|0;
      $37 = ((($36)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($which$0$lcssa|0)==($38|0);
      if ($39) {
       $$0 = 0;
       label = 26;
       break;
      }
      $40 = $22 >>> 4;
      $41 = (((((($z)) + 17820|0) + (($which$0$lcssa*72)|0)|0)) + 16|0);
      HEAP32[$41>>2] = $40;
      $42 = ($21&255)>(63);
      if ($42) {
       label = 12;
       break;
      }
      $43 = $22 & 15;
      $44 = (((((($z)) + 17820|0) + (($which$0$lcssa*72)|0)|0)) + 20|0);
      HEAP32[$44>>2] = $43;
      $45 = ($43>>>0)>(3);
      if ($45) {
       label = 14;
       break;
      }
      $46 = (((($z)) + 18152|0) + ($i$010<<2)|0);
      HEAP32[$46>>2] = $which$0$lcssa;
      $47 = (($i$010) + 1)|0;
      $48 = HEAP32[$5>>2]|0;
      $49 = ($47|0)<($48|0);
      $50 = HEAP32[$z>>2]|0;
      $51 = (_stbi__get8($50)|0);
      $52 = $51&255;
      if ($49) {
       $30 = $52;$i$010 = $47;
      } else {
       $$lcssa = $52;
       break L8;
      }
     }
     if ((label|0) == 12) {
      _stbi__err(28064);
      $$0 = 0;
      return ($$0|0);
     }
     else if ((label|0) == 14) {
      _stbi__err(28080);
      $$0 = 0;
      return ($$0|0);
     }
     else if ((label|0) == 26) {
      return ($$0|0);
     }
    } else {
     $$lcssa = $19;
    }
   } while(0);
   $53 = ((($z)) + 18128|0);
   HEAP32[$53>>2] = $$lcssa;
   $54 = HEAP32[$z>>2]|0;
   $55 = (_stbi__get8($54)|0);
   $56 = $55&255;
   $57 = ((($z)) + 18132|0);
   HEAP32[$57>>2] = $56;
   $58 = HEAP32[$z>>2]|0;
   $59 = (_stbi__get8($58)|0);
   $60 = $59&255;
   $61 = $60 >>> 4;
   $62 = ((($z)) + 18136|0);
   HEAP32[$62>>2] = $61;
   $63 = $60 & 15;
   $64 = ((($z)) + 18140|0);
   HEAP32[$64>>2] = $63;
   $65 = ((($z)) + 18124|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(0);
   $68 = HEAP32[$53>>2]|0;
   if (!($67)) {
    $69 = ($68|0)>(63);
    if (!($69)) {
     $70 = HEAP32[$57>>2]|0;
     $71 = ($70|0)>(63);
     $72 = ($68|0)>($70|0);
     $or$cond1 = $71 | $72;
     if (!($or$cond1)) {
      $73 = HEAP32[$62>>2]|0;
      $74 = ($73|0)>(13);
      $75 = ($63>>>0)>(13);
      $or$cond2 = $75 | $74;
      if (!($or$cond2)) {
       $$0 = 1;
       return ($$0|0);
      }
     }
    }
    _stbi__err(28096);
    $$0 = 0;
    return ($$0|0);
   }
   $76 = ($68|0)==(0);
   if (!($76)) {
    _stbi__err(28096);
    $$0 = 0;
    return ($$0|0);
   }
   $77 = HEAP32[$62>>2]|0;
   $78 = $77 | $63;
   $79 = ($78|0)==(0);
   if ($79) {
    HEAP32[$57>>2] = 63;
    $$0 = 1;
    return ($$0|0);
   } else {
    _stbi__err(28096);
    $$0 = 0;
    return ($$0|0);
   }
  }
 }
 _stbi__err(28024);
 $$0 = 0;
 return ($$0|0);
}
function _stbi__parse_entropy_coded_data($z) {
 $z = $z|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $i$023 = 0, $i1$035 = 0, $i13$054 = 0;
 var $i6$040 = 0, $j$024 = 0, $j14$057 = 0, $j2$038 = 0, $j7$043 = 0, $k$032 = 0, $k15$051 = 0, $tmp = 0, $tmp5 = 0, $x$026 = 0, $x16$045 = 0, $y$029 = 0, $y17$048 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $data = sp;
 _stbi__jpeg_reset($z);
 $0 = ((($z)) + 18124|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = ((($z)) + 18148|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if ($2) {
  if ($5) {
   $6 = ((($z)) + 18152|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (((((($z)) + 17820|0) + (($7*72)|0)|0)) + 28|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + 7)|0;
   $11 = $10 >> 3;
   $12 = (((((($z)) + 17820|0) + (($7*72)|0)|0)) + 32|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 7)|0;
   $15 = $14 >> 3;
   $16 = ($15|0)>(0);
   L5: do {
    if ($16) {
     $17 = ($11|0)>(0);
     $18 = (((((($z)) + 17820|0) + (($7*72)|0)|0)) + 20|0);
     $19 = (((((($z)) + 17820|0) + (($7*72)|0)|0)) + 16|0);
     $20 = (((((($z)) + 17820|0) + (($7*72)|0)|0)) + 12|0);
     $21 = ((($z)) + 18176|0);
     $22 = (((((($z)) + 17820|0) + (($7*72)|0)|0)) + 44|0);
     $23 = (((((($z)) + 17820|0) + (($7*72)|0)|0)) + 36|0);
     $24 = ((($z)) + 18172|0);
     $25 = ((($z)) + 18112|0);
     $26 = ((($z)) + 18116|0);
     $j$024 = 0;
     while(1) {
      if ($17) {
       $i$023 = 0;
       while(1) {
        $27 = HEAP32[$18>>2]|0;
        $28 = HEAP32[$19>>2]|0;
        $29 = (((($z)) + 4|0) + (($28*1680)|0)|0);
        $30 = (((($z)) + 6724|0) + (($27*1680)|0)|0);
        $31 = (((($z)) + 13700|0) + ($27<<10)|0);
        $32 = HEAP32[$20>>2]|0;
        $33 = (((($z)) + 13444|0) + ($32<<6)|0);
        $34 = (_stbi__jpeg_decode_block($z,$data,$29,$30,$31,$7,$33)|0);
        $35 = ($34|0)==(0);
        if ($35) {
         $$0 = 0;
         break L5;
        }
        $36 = HEAP32[$21>>2]|0;
        $37 = HEAP32[$22>>2]|0;
        $38 = HEAP32[$23>>2]|0;
        $39 = Math_imul($38, $j$024)|0;
        $40 = (($39) + ($i$023))|0;
        $$sum1 = $40 << 3;
        $41 = (($37) + ($$sum1)|0);
        FUNCTION_TABLE_viii[$36 & 31]($41,$38,$data);
        $42 = HEAP32[$24>>2]|0;
        $43 = (($42) + -1)|0;
        HEAP32[$24>>2] = $43;
        $44 = ($42|0)<(2);
        if ($44) {
         $45 = HEAP32[$25>>2]|0;
         $46 = ($45|0)<(24);
         if ($46) {
          _stbi__grow_buffer_unsafe($z);
         }
         $47 = HEAP8[$26>>0]|0;
         $48 = $47 & -8;
         $49 = ($48<<24>>24)==(-48);
         if (!($49)) {
          $$0 = 1;
          break L5;
         }
         _stbi__jpeg_reset($z);
        }
        $50 = (($i$023) + 1)|0;
        $51 = ($50|0)<($11|0);
        if ($51) {
         $i$023 = $50;
        } else {
         break;
        }
       }
      }
      $52 = (($j$024) + 1)|0;
      $53 = ($52|0)<($15|0);
      if ($53) {
       $j$024 = $52;
      } else {
       $$0 = 1;
       break;
      }
     }
    } else {
     $$0 = 1;
    }
   } while(0);
   $$2 = $$0;
   STACKTOP = sp;return ($$2|0);
  }
  $54 = ((($z)) + 17808|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)>(0);
  L24: do {
   if ($56) {
    $57 = ((($z)) + 17804|0);
    $58 = ((($z)) + 18172|0);
    $59 = ((($z)) + 18112|0);
    $60 = ((($z)) + 18116|0);
    $61 = ((($z)) + 18176|0);
    $j2$038 = 0;
    while(1) {
     $62 = HEAP32[$57>>2]|0;
     $63 = ($62|0)>(0);
     if ($63) {
      $i1$035 = 0;
      while(1) {
       $64 = HEAP32[$3>>2]|0;
       $65 = ($64|0)>(0);
       if ($65) {
        $k$032 = 0;
        while(1) {
         $66 = (((($z)) + 18152|0) + ($k$032<<2)|0);
         $67 = HEAP32[$66>>2]|0;
         $68 = (((((($z)) + 17820|0) + (($67*72)|0)|0)) + 8|0);
         $69 = HEAP32[$68>>2]|0;
         $70 = ($69|0)>(0);
         if ($70) {
          $71 = (((((($z)) + 17820|0) + (($67*72)|0)|0)) + 4|0);
          $72 = (((((($z)) + 17820|0) + (($67*72)|0)|0)) + 20|0);
          $73 = (((((($z)) + 17820|0) + (($67*72)|0)|0)) + 16|0);
          $74 = (((((($z)) + 17820|0) + (($67*72)|0)|0)) + 12|0);
          $75 = (((((($z)) + 17820|0) + (($67*72)|0)|0)) + 44|0);
          $76 = (((((($z)) + 17820|0) + (($67*72)|0)|0)) + 36|0);
          $y$029 = 0;
          while(1) {
           $77 = HEAP32[$71>>2]|0;
           $78 = ($77|0)>(0);
           if ($78) {
            $92 = $77;$x$026 = 0;
            while(1) {
             $79 = HEAP32[$68>>2]|0;
             $80 = HEAP32[$72>>2]|0;
             $81 = HEAP32[$73>>2]|0;
             $82 = (((($z)) + 4|0) + (($81*1680)|0)|0);
             $83 = (((($z)) + 6724|0) + (($80*1680)|0)|0);
             $84 = (((($z)) + 13700|0) + ($80<<10)|0);
             $85 = HEAP32[$74>>2]|0;
             $86 = (((($z)) + 13444|0) + ($85<<6)|0);
             $87 = (_stbi__jpeg_decode_block($z,$data,$82,$83,$84,$67,$86)|0);
             $88 = ($87|0)==(0);
             if ($88) {
              $$1 = 0;
              break L24;
             }
             $89 = Math_imul($79, $j2$038)|0;
             $90 = (($89) + ($y$029))|0;
             $91 = Math_imul($92, $i1$035)|0;
             $93 = (($91) + ($x$026))|0;
             $94 = HEAP32[$61>>2]|0;
             $95 = HEAP32[$75>>2]|0;
             $96 = HEAP32[$76>>2]|0;
             $97 = Math_imul($96, $90)|0;
             $tmp = (($93) + ($97))|0;
             $tmp5 = $tmp << 3;
             $98 = (($95) + ($tmp5)|0);
             FUNCTION_TABLE_viii[$94 & 31]($98,$96,$data);
             $99 = (($x$026) + 1)|0;
             $100 = HEAP32[$71>>2]|0;
             $101 = ($99|0)<($100|0);
             if ($101) {
              $92 = $100;$x$026 = $99;
             } else {
              break;
             }
            }
           }
           $102 = (($y$029) + 1)|0;
           $103 = HEAP32[$68>>2]|0;
           $104 = ($102|0)<($103|0);
           if ($104) {
            $y$029 = $102;
           } else {
            break;
           }
          }
         }
         $105 = (($k$032) + 1)|0;
         $106 = HEAP32[$3>>2]|0;
         $107 = ($105|0)<($106|0);
         if ($107) {
          $k$032 = $105;
         } else {
          break;
         }
        }
       }
       $108 = HEAP32[$58>>2]|0;
       $109 = (($108) + -1)|0;
       HEAP32[$58>>2] = $109;
       $110 = ($108|0)<(2);
       if ($110) {
        $111 = HEAP32[$59>>2]|0;
        $112 = ($111|0)<(24);
        if ($112) {
         _stbi__grow_buffer_unsafe($z);
        }
        $113 = HEAP8[$60>>0]|0;
        $114 = $113 & -8;
        $115 = ($114<<24>>24)==(-48);
        if (!($115)) {
         $$1 = 1;
         break L24;
        }
        _stbi__jpeg_reset($z);
       }
       $116 = (($i1$035) + 1)|0;
       $117 = HEAP32[$57>>2]|0;
       $118 = ($116|0)<($117|0);
       if ($118) {
        $i1$035 = $116;
       } else {
        break;
       }
      }
     }
     $119 = (($j2$038) + 1)|0;
     $120 = HEAP32[$54>>2]|0;
     $121 = ($119|0)<($120|0);
     if ($121) {
      $j2$038 = $119;
     } else {
      $$1 = 1;
      break;
     }
    }
   } else {
    $$1 = 1;
   }
  } while(0);
  $$2 = $$1;
  STACKTOP = sp;return ($$2|0);
 }
 if ($5) {
  $129 = ((($z)) + 18152|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (((((($z)) + 17820|0) + (($130*72)|0)|0)) + 28|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + 7)|0;
  $134 = $133 >> 3;
  $135 = (((((($z)) + 17820|0) + (($130*72)|0)|0)) + 32|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($136) + 7)|0;
  $138 = $137 >> 3;
  $139 = ($138|0)>(0);
  if (!($139)) {
   $$2 = 1;
   STACKTOP = sp;return ($$2|0);
  }
  $140 = ($134|0)>(0);
  $141 = (((((($z)) + 17820|0) + (($130*72)|0)|0)) + 60|0);
  $142 = (((((($z)) + 17820|0) + (($130*72)|0)|0)) + 64|0);
  $143 = ((($z)) + 18128|0);
  $144 = (((((($z)) + 17820|0) + (($130*72)|0)|0)) + 16|0);
  $145 = ((($z)) + 18172|0);
  $146 = ((($z)) + 18112|0);
  $147 = ((($z)) + 18116|0);
  $148 = (((((($z)) + 17820|0) + (($130*72)|0)|0)) + 20|0);
  $j7$043 = 0;
  L61: while(1) {
   if ($140) {
    $i6$040 = 0;
    while(1) {
     $149 = HEAP32[$141>>2]|0;
     $150 = HEAP32[$142>>2]|0;
     $151 = Math_imul($150, $j7$043)|0;
     $152 = (($151) + ($i6$040))|0;
     $153 = $152 << 6;
     $154 = (($149) + ($153<<1)|0);
     $155 = HEAP32[$143>>2]|0;
     $156 = ($155|0)==(0);
     if ($156) {
      $157 = HEAP32[$144>>2]|0;
      $158 = (((($z)) + 4|0) + (($157*1680)|0)|0);
      $159 = (_stbi__jpeg_decode_block_prog_dc($z,$154,$158,$130)|0);
      $160 = ($159|0)==(0);
      if ($160) {
       $$2 = 0;
       label = 66;
       break L61;
      }
     } else {
      $161 = HEAP32[$148>>2]|0;
      $162 = (((($z)) + 6724|0) + (($161*1680)|0)|0);
      $163 = (((($z)) + 13700|0) + ($161<<10)|0);
      $164 = (_stbi__jpeg_decode_block_prog_ac($z,$154,$162,$163)|0);
      $165 = ($164|0)==(0);
      if ($165) {
       $$2 = 0;
       label = 66;
       break L61;
      }
     }
     $166 = HEAP32[$145>>2]|0;
     $167 = (($166) + -1)|0;
     HEAP32[$145>>2] = $167;
     $168 = ($166|0)<(2);
     if ($168) {
      $169 = HEAP32[$146>>2]|0;
      $170 = ($169|0)<(24);
      if ($170) {
       _stbi__grow_buffer_unsafe($z);
      }
      $171 = HEAP8[$147>>0]|0;
      $172 = $171 & -8;
      $173 = ($172<<24>>24)==(-48);
      if (!($173)) {
       $$2 = 1;
       label = 66;
       break L61;
      }
      _stbi__jpeg_reset($z);
     }
     $174 = (($i6$040) + 1)|0;
     $175 = ($174|0)<($134|0);
     if ($175) {
      $i6$040 = $174;
     } else {
      break;
     }
    }
   }
   $176 = (($j7$043) + 1)|0;
   $177 = ($176|0)<($138|0);
   if ($177) {
    $j7$043 = $176;
   } else {
    $$2 = 1;
    label = 66;
    break;
   }
  }
  if ((label|0) == 66) {
   STACKTOP = sp;return ($$2|0);
  }
 }
 $122 = ((($z)) + 17808|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123|0)>(0);
 if (!($124)) {
  $$2 = 1;
  STACKTOP = sp;return ($$2|0);
 }
 $125 = ((($z)) + 17804|0);
 $126 = ((($z)) + 18172|0);
 $127 = ((($z)) + 18112|0);
 $128 = ((($z)) + 18116|0);
 $j14$057 = 0;
 L87: while(1) {
  $178 = HEAP32[$125>>2]|0;
  $179 = ($178|0)>(0);
  if ($179) {
   $i13$054 = 0;
   while(1) {
    $180 = HEAP32[$3>>2]|0;
    $181 = ($180|0)>(0);
    if ($181) {
     $k15$051 = 0;
     while(1) {
      $182 = (((($z)) + 18152|0) + ($k15$051<<2)|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = (((((($z)) + 17820|0) + (($183*72)|0)|0)) + 8|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = ($185|0)>(0);
      if ($186) {
       $187 = (((((($z)) + 17820|0) + (($183*72)|0)|0)) + 4|0);
       $188 = (((((($z)) + 17820|0) + (($183*72)|0)|0)) + 60|0);
       $189 = (((((($z)) + 17820|0) + (($183*72)|0)|0)) + 64|0);
       $190 = (((((($z)) + 17820|0) + (($183*72)|0)|0)) + 16|0);
       $y17$048 = 0;
       while(1) {
        $191 = HEAP32[$187>>2]|0;
        $192 = ($191|0)>(0);
        if ($192) {
         $197 = $191;$x16$045 = 0;
         while(1) {
          $196 = Math_imul($197, $i13$054)|0;
          $198 = (($196) + ($x16$045))|0;
          $199 = HEAP32[$184>>2]|0;
          $200 = Math_imul($199, $j14$057)|0;
          $201 = (($200) + ($y17$048))|0;
          $202 = HEAP32[$188>>2]|0;
          $203 = HEAP32[$189>>2]|0;
          $204 = Math_imul($201, $203)|0;
          $205 = (($198) + ($204))|0;
          $206 = $205 << 6;
          $207 = (($202) + ($206<<1)|0);
          $208 = HEAP32[$190>>2]|0;
          $209 = (((($z)) + 4|0) + (($208*1680)|0)|0);
          $210 = (_stbi__jpeg_decode_block_prog_dc($z,$207,$209,$183)|0);
          $211 = ($210|0)==(0);
          $194 = (($x16$045) + 1)|0;
          if ($211) {
           $$2 = 0;
           label = 66;
           break L87;
          }
          $193 = HEAP32[$187>>2]|0;
          $195 = ($194|0)<($193|0);
          if ($195) {
           $197 = $193;$x16$045 = $194;
          } else {
           break;
          }
         }
        }
        $212 = (($y17$048) + 1)|0;
        $213 = HEAP32[$184>>2]|0;
        $214 = ($212|0)<($213|0);
        if ($214) {
         $y17$048 = $212;
        } else {
         break;
        }
       }
      }
      $215 = (($k15$051) + 1)|0;
      $216 = HEAP32[$3>>2]|0;
      $217 = ($215|0)<($216|0);
      if ($217) {
       $k15$051 = $215;
      } else {
       break;
      }
     }
    }
    $218 = HEAP32[$126>>2]|0;
    $219 = (($218) + -1)|0;
    HEAP32[$126>>2] = $219;
    $220 = ($218|0)<(2);
    if ($220) {
     $221 = HEAP32[$127>>2]|0;
     $222 = ($221|0)<(24);
     if ($222) {
      _stbi__grow_buffer_unsafe($z);
     }
     $223 = HEAP8[$128>>0]|0;
     $224 = $223 & -8;
     $225 = ($224<<24>>24)==(-48);
     if (!($225)) {
      $$2 = 1;
      label = 66;
      break L87;
     }
     _stbi__jpeg_reset($z);
    }
    $226 = (($i13$054) + 1)|0;
    $227 = HEAP32[$125>>2]|0;
    $228 = ($226|0)<($227|0);
    if ($228) {
     $i13$054 = $226;
    } else {
     break;
    }
   }
  }
  $229 = (($j14$057) + 1)|0;
  $230 = HEAP32[$122>>2]|0;
  $231 = ($229|0)<($230|0);
  if ($231) {
   $j14$057 = $229;
  } else {
   $$2 = 1;
   label = 66;
   break;
  }
 }
 if ((label|0) == 66) {
  STACKTOP = sp;return ($$2|0);
 }
 return (0)|0;
}
function _stbi__jpeg_finish($z) {
 $z = $z|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond8 = 0, $i$02 = 0, $j$03 = 0, $n$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 18124|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$z>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  return;
 }
 $7 = ((($z)) + 18176|0);
 $n$06 = 0;
 while(1) {
  $8 = (((((($z)) + 17820|0) + (($n$06*72)|0)|0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 7)|0;
  $11 = $10 >> 3;
  $12 = (((((($z)) + 17820|0) + (($n$06*72)|0)|0)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 7)|0;
  $15 = $14 >> 3;
  $16 = ($15|0)>(0);
  if ($16) {
   $17 = ($11|0)>(0);
   $18 = (((((($z)) + 17820|0) + (($n$06*72)|0)|0)) + 60|0);
   $19 = (((((($z)) + 17820|0) + (($n$06*72)|0)|0)) + 64|0);
   $20 = (((((($z)) + 17820|0) + (($n$06*72)|0)|0)) + 12|0);
   $21 = (((((($z)) + 17820|0) + (($n$06*72)|0)|0)) + 44|0);
   $22 = (((((($z)) + 17820|0) + (($n$06*72)|0)|0)) + 36|0);
   $j$03 = 0;
   while(1) {
    if ($17) {
     $i$02 = 0;
     while(1) {
      $23 = HEAP32[$18>>2]|0;
      $24 = HEAP32[$19>>2]|0;
      $25 = Math_imul($24, $j$03)|0;
      $26 = (($25) + ($i$02))|0;
      $27 = $26 << 6;
      $28 = (($23) + ($27<<1)|0);
      $29 = HEAP32[$20>>2]|0;
      $30 = (((($z)) + 13444|0) + ($29<<6)|0);
      _stbi__jpeg_dequantize($28,$30);
      $31 = HEAP32[$7>>2]|0;
      $32 = HEAP32[$21>>2]|0;
      $33 = HEAP32[$22>>2]|0;
      $34 = Math_imul($33, $j$03)|0;
      $35 = (($34) + ($i$02))|0;
      $$sum = $35 << 3;
      $36 = (($32) + ($$sum)|0);
      FUNCTION_TABLE_viii[$31 & 31]($36,$33,$28);
      $37 = (($i$02) + 1)|0;
      $exitcond = ($37|0)==($11|0);
      if ($exitcond) {
       break;
      } else {
       $i$02 = $37;
      }
     }
    }
    $38 = (($j$03) + 1)|0;
    $exitcond8 = ($38|0)==($15|0);
    if ($exitcond8) {
     break;
    } else {
     $j$03 = $38;
    }
   }
  }
  $39 = (($n$06) + 1)|0;
  $40 = HEAP32[$z>>2]|0;
  $41 = ((($40)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($39|0)<($42|0);
  if ($43) {
   $n$06 = $39;
  } else {
   break;
  }
 }
 return;
}
function _stbi__jpeg_dequantize($data,$dequant) {
 $data = $data|0;
 $dequant = $dequant|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $0 = (($dequant) + ($i$01)|0);
  $1 = HEAP8[$0>>0]|0;
  $2 = $1&255;
  $3 = (($data) + ($i$01<<1)|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4 << 16 >> 16;
  $6 = Math_imul($5, $2)|0;
  $7 = $6&65535;
  HEAP16[$3>>1] = $7;
  $8 = (($i$01) + 1)|0;
  $exitcond = ($8|0)==(64);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;
  }
 }
 return;
}
function _stbi__jpeg_reset($j) {
 $j = $j|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($j)) + 18112|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($j)) + 18108|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($j)) + 18120|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($j)) + 17988|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($j)) + 17916|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($j)) + 17844|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($j)) + 18116|0);
 HEAP8[$6>>0] = -1;
 $7 = ((($j)) + 18168|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 $$ = $9 ? 2147483647 : $8;
 $10 = ((($j)) + 18172|0);
 HEAP32[$10>>2] = $$;
 $11 = ((($j)) + 18144|0);
 HEAP32[$11>>2] = 0;
 return;
}
function _stbi__jpeg_decode_block($j,$data,$hdc,$hac,$fac,$b,$dequant) {
 $j = $j|0;
 $data = $data|0;
 $hdc = $hdc|0;
 $hac = $hac|0;
 $fac = $fac|0;
 $b = $b|0;
 $dequant = $dequant|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($j)) + 18112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(16);
 if ($2) {
  _stbi__grow_buffer_unsafe($j);
 }
 $3 = (_stbi__jpeg_huff_decode($j,$hdc)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  _stbi__err(26184);
  $$0 = 0;
  return ($$0|0);
 }
 dest=$data; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $5 = ($3|0)==(0);
 if ($5) {
  $10 = 0;
 } else {
  $6 = (_stbi__extend_receive($j,$3)|0);
  $10 = $6;
 }
 $7 = (((((($j)) + 17820|0) + (($b*72)|0)|0)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($10))|0;
 HEAP32[$7>>2] = $9;
 $11 = HEAP8[$dequant>>0]|0;
 $12 = $11&255;
 $13 = Math_imul($12, $9)|0;
 $14 = $13&65535;
 HEAP16[$data>>1] = $14;
 $15 = ((($j)) + 18108|0);
 $k$0 = 1;
 L11: while(1) {
  $16 = HEAP32[$0>>2]|0;
  $17 = ($16|0)<(16);
  if ($17) {
   _stbi__grow_buffer_unsafe($j);
  }
  $18 = HEAP32[$15>>2]|0;
  $19 = $18 >>> 23;
  $20 = (($fac) + ($19<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = ($21<<16>>16)==(0);
  do {
   if ($23) {
    $42 = (_stbi__jpeg_huff_decode($j,$hac)|0);
    $43 = ($42|0)<(0);
    if ($43) {
     label = 13;
     break L11;
    }
    $44 = $42 & 15;
    $45 = ($44|0)==(0);
    if (!($45)) {
     $48 = $42 >> 4;
     $49 = (($48) + ($k$0))|0;
     $50 = (($49) + 1)|0;
     $51 = (25744 + ($49)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $54 = (_stbi__extend_receive($j,$44)|0);
     $55 = (($dequant) + ($53)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = Math_imul($57, $54)|0;
     $59 = $58&65535;
     $60 = (($data) + ($53<<1)|0);
     HEAP16[$60>>1] = $59;
     $k$1 = $50;
     break;
    }
    $46 = ($42|0)==(240);
    if (!($46)) {
     $$0 = 1;
     label = 19;
     break L11;
    }
    $47 = (($k$0) + 16)|0;
    $k$1 = $47;
   } else {
    $24 = $22 >>> 4;
    $25 = $24 & 15;
    $26 = (($25) + ($k$0))|0;
    $27 = $22 & 15;
    $28 = $18 << $27;
    HEAP32[$15>>2] = $28;
    $29 = HEAP32[$0>>2]|0;
    $30 = (($29) - ($27))|0;
    HEAP32[$0>>2] = $30;
    $31 = (($26) + 1)|0;
    $32 = (25744 + ($26)|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = $22 >> 8;
    $36 = (($dequant) + ($34)|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = Math_imul($38, $35)|0;
    $40 = $39&65535;
    $41 = (($data) + ($34<<1)|0);
    HEAP16[$41>>1] = $40;
    $k$1 = $31;
   }
  } while(0);
  $61 = ($k$1|0)<(64);
  if ($61) {
   $k$0 = $k$1;
  } else {
   $$0 = 1;
   label = 19;
   break;
  }
 }
 if ((label|0) == 13) {
  _stbi__err(26184);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 19) {
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__grow_buffer_unsafe($j) {
 $j = $j|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($j)) + 18120|0);
 $1 = ((($j)) + 18112|0);
 $2 = ((($j)) + 18108|0);
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $5 = HEAP32[$j>>2]|0;
   $6 = (_stbi__get8($5)|0);
   $7 = $6&255;
   $8 = ($6<<24>>24)==(-1);
   if ($8) {
    $9 = HEAP32[$j>>2]|0;
    $10 = (_stbi__get8($9)|0);
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $16 = 255;
    } else {
     $$lcssa = $10;
     break;
    }
   } else {
    $16 = $7;
   }
  } else {
   $16 = 0;
  }
  $13 = HEAP32[$1>>2]|0;
  $14 = (24 - ($13))|0;
  $15 = $16 << $14;
  $17 = HEAP32[$2>>2]|0;
  $18 = $15 | $17;
  HEAP32[$2>>2] = $18;
  $19 = HEAP32[$1>>2]|0;
  $20 = (($19) + 8)|0;
  HEAP32[$1>>2] = $20;
  $21 = ($20|0)<(25);
  if (!($21)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return;
 }
 $12 = ((($j)) + 18116|0);
 HEAP8[$12>>0] = $$lcssa;
 HEAP32[$0>>2] = 1;
 return;
}
function _stbi__jpeg_decode_block_prog_dc($j,$data,$hdc,$b) {
 $j = $j|0;
 $data = $data|0;
 $hdc = $hdc|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($j)) + 18132|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  _stbi__err(27664);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($j)) + 18112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(16);
 if ($5) {
  _stbi__grow_buffer_unsafe($j);
 }
 $6 = ((($j)) + 18136|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  dest=$data; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
  $9 = (_stbi__jpeg_huff_decode($j,$hdc)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $15 = 0;
  } else {
   $11 = (_stbi__extend_receive($j,$9)|0);
   $15 = $11;
  }
  $12 = (((((($j)) + 17820|0) + (($b*72)|0)|0)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($15))|0;
  HEAP32[$12>>2] = $14;
  $16 = ((($j)) + 18140|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $14 << $17;
  $19 = $18&65535;
  HEAP16[$data>>1] = $19;
  $$0 = 1;
  return ($$0|0);
 } else {
  $20 = (_stbi__jpeg_get_bit($j)|0);
  $21 = ($20|0)==(0);
  if ($21) {
   $$0 = 1;
   return ($$0|0);
  }
  $22 = ((($j)) + 18140|0);
  $23 = HEAP32[$22>>2]|0;
  $sext = 65536 << $23;
  $24 = $sext >>> 16;
  $25 = HEAP16[$data>>1]|0;
  $26 = $25&65535;
  $27 = (($26) + ($24))|0;
  $28 = $27&65535;
  HEAP16[$data>>1] = $28;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__jpeg_decode_block_prog_ac($j,$data,$hac,$fac) {
 $j = $j|0;
 $data = $data|0;
 $hac = $hac|0;
 $fac = $fac|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lcssa63 = 0, $$lcssa63$lcssa = 0, $$lcssa66 = 0, $$lcssa66$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $k$0 = 0, $k$1 = 0, $k$223 = 0, $k$3 = 0, $k$4$ph20 = 0, $k$415 = 0, $k$415$lcssa = 0, $k$5 = 0, $r1$0$ph = 0, $r1$0$ph519 = 0, $s2$0$ph = 0, $sext = 0, $sext1 = 0, $sext2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($j)) + 18128|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  _stbi__err(27664);
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($j)) + 18136|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = ((($j)) + 18140|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $8 = ((($j)) + 18144|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $14 = (($9) + -1)|0;
   HEAP32[$8>>2] = $14;
   $$0 = 1;
   return ($$0|0);
  }
  $11 = ((($j)) + 18112|0);
  $12 = ((($j)) + 18108|0);
  $13 = ((($j)) + 18132|0);
  $k$0 = $1;
  L11: while(1) {
   $15 = HEAP32[$11>>2]|0;
   $16 = ($15|0)<(16);
   if ($16) {
    _stbi__grow_buffer_unsafe($j);
   }
   $17 = HEAP32[$12>>2]|0;
   $18 = $17 >>> 23;
   $19 = (($fac) + ($18<<1)|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20 << 16 >> 16;
   $22 = ($20<<16>>16)==(0);
   do {
    if ($22) {
     $38 = (_stbi__jpeg_huff_decode($j,$hac)|0);
     $39 = ($38|0)<(0);
     if ($39) {
      label = 12;
      break L11;
     }
     $40 = $38 & 15;
     $41 = $38 >> 4;
     $42 = ($40|0)==(0);
     if (!($42)) {
      $52 = (($41) + ($k$0))|0;
      $53 = (($52) + 1)|0;
      $54 = (25744 + ($52)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = (_stbi__extend_receive($j,$40)|0);
      $58 = $57 << $7;
      $59 = $58&65535;
      $60 = (($data) + ($56<<1)|0);
      HEAP16[$60>>1] = $59;
      $k$1 = $53;
      break;
     }
     $43 = ($41|0)<(15);
     if ($43) {
      $$lcssa = $41;
      label = 15;
      break L11;
     }
     $51 = (($k$0) + 16)|0;
     $k$1 = $51;
    } else {
     $23 = $21 >>> 4;
     $24 = $23 & 15;
     $25 = (($24) + ($k$0))|0;
     $26 = $21 & 15;
     $27 = $17 << $26;
     HEAP32[$12>>2] = $27;
     $28 = HEAP32[$11>>2]|0;
     $29 = (($28) - ($26))|0;
     HEAP32[$11>>2] = $29;
     $30 = (($25) + 1)|0;
     $31 = (25744 + ($25)|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $21 >> 8;
     $35 = $34 << $7;
     $36 = $35&65535;
     $37 = (($data) + ($33<<1)|0);
     HEAP16[$37>>1] = $36;
     $k$1 = $30;
    }
   } while(0);
   $61 = HEAP32[$13>>2]|0;
   $62 = ($k$1|0)>($61|0);
   if ($62) {
    $$0 = 1;
    label = 53;
    break;
   } else {
    $k$0 = $k$1;
   }
  }
  if ((label|0) == 12) {
   _stbi__err(26184);
   $$0 = 0;
   return ($$0|0);
  }
  else if ((label|0) == 15) {
   $44 = 1 << $$lcssa;
   HEAP32[$8>>2] = $44;
   $45 = ($$lcssa|0)==(0);
   if (!($45)) {
    $46 = (_stbi__jpeg_get_bits($j,$$lcssa)|0);
    $47 = HEAP32[$8>>2]|0;
    $48 = (($47) + ($46))|0;
    HEAP32[$8>>2] = $48;
   }
   $49 = HEAP32[$8>>2]|0;
   $50 = (($49) + -1)|0;
   HEAP32[$8>>2] = $50;
   $$0 = 1;
   return ($$0|0);
  }
  else if ((label|0) == 53) {
   return ($$0|0);
  }
 }
 $63 = 1 << $7;
 $64 = ((($j)) + 18144|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $71 = (($65) + -1)|0;
  HEAP32[$64>>2] = $71;
  $72 = HEAP32[$0>>2]|0;
  $73 = ((($j)) + 18132|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72|0)>($74|0);
  if ($75) {
   $$0 = 1;
   return ($$0|0);
  }
  $sext2 = $63 << 16;
  $76 = $sext2 >> 16;
  $k$223 = $72;
  while(1) {
   $77 = (25744 + ($k$223)|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = (($data) + ($79<<1)|0);
   $81 = HEAP16[$80>>1]|0;
   $82 = ($81<<16>>16)==(0);
   do {
    if (!($82)) {
     $83 = (_stbi__jpeg_get_bit($j)|0);
     $84 = ($83|0)==(0);
     if (!($84)) {
      $85 = HEAP16[$80>>1]|0;
      $86 = $85 << 16 >> 16;
      $87 = $86 & $76;
      $88 = ($87|0)==(0);
      if ($88) {
       $89 = ($85<<16>>16)>(0);
       if ($89) {
        $90 = (($86) + ($76))|0;
        $91 = $90&65535;
        HEAP16[$80>>1] = $91;
        break;
       } else {
        $92 = (($86) - ($76))|0;
        $93 = $92&65535;
        HEAP16[$80>>1] = $93;
        break;
       }
      }
     }
    }
   } while(0);
   $94 = (($k$223) + 1)|0;
   $95 = HEAP32[$73>>2]|0;
   $96 = ($k$223|0)<($95|0);
   if ($96) {
    $k$223 = $94;
   } else {
    $$0 = 1;
    break;
   }
  }
  return ($$0|0);
 }
 $sext = $63 << 16;
 $67 = $sext >> 16;
 $68 = (0 - ($67))|0;
 $69 = ((($j)) + 18132|0);
 $sext1 = $63 << 16;
 $70 = $sext1 >> 16;
 $k$3 = $1;
 while(1) {
  $97 = (_stbi__jpeg_huff_decode($j,$hac)|0);
  $98 = ($97|0)<(0);
  if ($98) {
   label = 33;
   break;
  }
  $99 = $97 & 15;
  $100 = $97 >> 4;
  if ((($99|0) == 0)) {
   $101 = ($100|0)<(15);
   if ($101) {
    $102 = 1 << $100;
    $103 = (($102) + -1)|0;
    HEAP32[$64>>2] = $103;
    $104 = ($100|0)==(0);
    if ($104) {
     $r1$0$ph = 64;$s2$0$ph = 0;
    } else {
     $105 = (_stbi__jpeg_get_bits($j,$100)|0);
     $106 = HEAP32[$64>>2]|0;
     $107 = (($106) + ($105))|0;
     HEAP32[$64>>2] = $107;
     $r1$0$ph = 64;$s2$0$ph = 0;
    }
   } else {
    $r1$0$ph = $100;$s2$0$ph = 0;
   }
  } else if ((($99|0) == 1)) {
   $108 = (_stbi__jpeg_get_bit($j)|0);
   $109 = ($108|0)==(0);
   $$ = $109 ? $68 : $67;
   $r1$0$ph = $100;$s2$0$ph = $$;
  } else {
   label = 38;
   break;
  }
  $110 = HEAP32[$69>>2]|0;
  $111 = ($k$3|0)>($110|0);
  L61: do {
   if ($111) {
    $k$5 = $k$3;
   } else {
    $k$4$ph20 = $k$3;$r1$0$ph519 = $r1$0$ph;
    while(1) {
     $k$415 = $k$4$ph20;
     while(1) {
      $115 = (($k$415) + 1)|0;
      $116 = (25744 + ($k$415)|0);
      $117 = HEAP8[$116>>0]|0;
      $118 = $117&255;
      $119 = (($data) + ($118<<1)|0);
      $120 = HEAP16[$119>>1]|0;
      $121 = ($120<<16>>16)==(0);
      if ($121) {
       $$lcssa63 = $115;$$lcssa66 = $119;$k$415$lcssa = $k$415;
       break;
      }
      $122 = (_stbi__jpeg_get_bit($j)|0);
      $123 = ($122|0)==(0);
      do {
       if (!($123)) {
        $124 = HEAP16[$119>>1]|0;
        $125 = $124 << 16 >> 16;
        $126 = $125 & $70;
        $127 = ($126|0)==(0);
        if ($127) {
         $128 = ($124<<16>>16)>(0);
         if ($128) {
          $129 = (($125) + ($70))|0;
          $130 = $129&65535;
          HEAP16[$119>>1] = $130;
          break;
         } else {
          $133 = (($125) - ($70))|0;
          $134 = $133&65535;
          HEAP16[$119>>1] = $134;
          break;
         }
        }
       }
      } while(0);
      $131 = HEAP32[$69>>2]|0;
      $132 = ($k$415|0)<($131|0);
      if ($132) {
       $k$415 = $115;
      } else {
       $k$5 = $115;
       break L61;
      }
     }
     $135 = ($r1$0$ph519|0)==(0);
     if ($135) {
      $$lcssa63$lcssa = $$lcssa63;$$lcssa66$lcssa = $$lcssa66;
      break;
     }
     $112 = (($r1$0$ph519) + -1)|0;
     $113 = HEAP32[$69>>2]|0;
     $114 = ($k$415$lcssa|0)<($113|0);
     if ($114) {
      $k$4$ph20 = $$lcssa63;$r1$0$ph519 = $112;
     } else {
      $k$5 = $$lcssa63;
      break L61;
     }
    }
    $136 = $s2$0$ph&65535;
    HEAP16[$$lcssa66$lcssa>>1] = $136;
    $k$5 = $$lcssa63$lcssa;
   }
  } while(0);
  $137 = HEAP32[$69>>2]|0;
  $138 = ($k$5|0)>($137|0);
  if ($138) {
   $$0 = 1;
   label = 53;
   break;
  } else {
   $k$3 = $k$5;
  }
 }
 if ((label|0) == 33) {
  _stbi__err(26184);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 38) {
  _stbi__err(26184);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 53) {
  return ($$0|0);
 }
 return (0)|0;
}
function _stbi__jpeg_huff_decode($j,$h) {
 $j = $j|0;
 $h = $h|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$lcssa = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($j)) + 18112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(16);
 if ($2) {
  _stbi__grow_buffer_unsafe($j);
 }
 $3 = ((($j)) + 18108|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >>> 23;
 $6 = (($h) + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ($7<<24>>24)==(-1);
 if (!($9)) {
  $10 = (((($h)) + 1280|0) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = HEAP32[$0>>2]|0;
  $14 = ($12|0)>($13|0);
  if ($14) {
   $$0 = -1;
   return ($$0|0);
  }
  $15 = $4 << $12;
  HEAP32[$3>>2] = $15;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) - ($12))|0;
  HEAP32[$0>>2] = $17;
  $18 = (((($h)) + 1024|0) + ($8)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $$0 = $20;
  return ($$0|0);
 }
 $21 = $4 >>> 16;
 $k$0 = 10;
 while(1) {
  $22 = (((($h)) + 1540|0) + ($k$0<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($21>>>0)<($23>>>0);
  $25 = (($k$0) + 1)|0;
  if ($24) {
   $k$0$lcssa = $k$0;
   break;
  } else {
   $k$0 = $25;
  }
 }
 $26 = ($k$0$lcssa|0)==(17);
 $27 = HEAP32[$0>>2]|0;
 if ($26) {
  $28 = (($27) + -16)|0;
  HEAP32[$0>>2] = $28;
  $$0 = -1;
  return ($$0|0);
 }
 $29 = ($27|0)<($k$0$lcssa|0);
 if ($29) {
  $$0 = -1;
  return ($$0|0);
 }
 $30 = HEAP32[$3>>2]|0;
 $31 = (32 - ($k$0$lcssa))|0;
 $32 = $30 >>> $31;
 $33 = (27776 + ($k$0$lcssa<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $32 & $34;
 $36 = (((($h)) + 1612|0) + ($k$0$lcssa<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + ($37))|0;
 $39 = (((($h)) + 1280|0) + ($38)|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = (32 - ($41))|0;
 $43 = $30 >>> $42;
 $44 = (27776 + ($41<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $43 & $45;
 $47 = (((($h)) + 512|0) + ($38<<1)|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48&65535;
 $50 = ($46|0)==($49|0);
 if (!($50)) {
  ___assert_fail((27912|0),(25096|0),1636,(28000|0));
  // unreachable;
 }
 $51 = (($27) - ($k$0$lcssa))|0;
 HEAP32[$0>>2] = $51;
 $52 = HEAP32[$3>>2]|0;
 $53 = $52 << $k$0$lcssa;
 HEAP32[$3>>2] = $53;
 $54 = (((($h)) + 1024|0) + ($38)|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $$0 = $56;
 return ($$0|0);
}
function _stbi__jpeg_get_bits($j,$n) {
 $j = $j|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($j)) + 18112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($n|0);
 if ($2) {
  _stbi__grow_buffer_unsafe($j);
 }
 $3 = ((($j)) + 18108|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << $n;
 $6 = (32 - ($n))|0;
 $7 = $4 >>> $6;
 $8 = $5 | $7;
 $9 = (27776 + ($n<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 ^ -1;
 $12 = $8 & $11;
 HEAP32[$3>>2] = $12;
 $13 = HEAP32[$9>>2]|0;
 $14 = $8 & $13;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) - ($n))|0;
 HEAP32[$0>>2] = $16;
 return ($14|0);
}
function _stbi__extend_receive($j,$n) {
 $j = $j|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($j)) + 18112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($n|0);
 if ($2) {
  _stbi__grow_buffer_unsafe($j);
 }
 $3 = ((($j)) + 18108|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << $n;
 $6 = (32 - ($n))|0;
 $7 = $4 >>> $6;
 $8 = $5 | $7;
 $9 = ($n>>>0)<(17);
 if ($9) {
  $10 = $4 >> 31;
  $11 = (27776 + ($n<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 ^ -1;
  $14 = $8 & $13;
  HEAP32[$3>>2] = $14;
  $15 = HEAP32[$11>>2]|0;
  $16 = $15 & $8;
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) - ($n))|0;
  HEAP32[$0>>2] = $18;
  $19 = (27848 + ($n<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $10 ^ -1;
  $22 = $20 & $21;
  $23 = (($22) + ($16))|0;
  return ($23|0);
 } else {
  ___assert_fail((27688|0),(25096|0),1657,(27752|0));
  // unreachable;
 }
 return (0)|0;
}
function _stbi__jpeg_get_bit($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($j)) + 18112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(1);
 if ($2) {
  _stbi__grow_buffer_unsafe($j);
 }
 $3 = ((($j)) + 18108|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << 1;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$0>>2] = $7;
 $8 = $4 & -2147483648;
 return ($8|0);
}
function _stbi__idct_block($out,$out_stride,$data) {
 $out = $out|0;
 $out_stride = $out_stride|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d$04 = 0, $exitcond = 0, $exitcond9 = 0, $i$08 = 0, $i$13 = 0, $o$01 = 0, $v$06 = 0, $v$12 = 0;
 var $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $val = sp;
 $d$04 = $data;$i$08 = 0;$v$06 = $val;
 while(1) {
  $0 = ((($d$04)) + 16|0);
  $1 = HEAP16[$0>>1]|0;
  $2 = ($1<<16>>16)==(0);
  if ($2) {
   $3 = ((($d$04)) + 32|0);
   $4 = HEAP16[$3>>1]|0;
   $5 = ($4<<16>>16)==(0);
   if ($5) {
    $6 = ((($d$04)) + 48|0);
    $7 = HEAP16[$6>>1]|0;
    $8 = ($7<<16>>16)==(0);
    if ($8) {
     $9 = ((($d$04)) + 64|0);
     $10 = HEAP16[$9>>1]|0;
     $11 = ($10<<16>>16)==(0);
     if ($11) {
      $12 = ((($d$04)) + 80|0);
      $13 = HEAP16[$12>>1]|0;
      $14 = ($13<<16>>16)==(0);
      if ($14) {
       $15 = ((($d$04)) + 96|0);
       $16 = HEAP16[$15>>1]|0;
       $17 = ($16<<16>>16)==(0);
       if ($17) {
        $18 = ((($d$04)) + 112|0);
        $19 = HEAP16[$18>>1]|0;
        $20 = ($19<<16>>16)==(0);
        if ($20) {
         $21 = HEAP16[$d$04>>1]|0;
         $22 = $21 << 16 >> 16;
         $23 = $22 << 2;
         $24 = ((($v$06)) + 224|0);
         HEAP32[$24>>2] = $23;
         $25 = ((($v$06)) + 192|0);
         HEAP32[$25>>2] = $23;
         $26 = ((($v$06)) + 160|0);
         HEAP32[$26>>2] = $23;
         $27 = ((($v$06)) + 128|0);
         HEAP32[$27>>2] = $23;
         $28 = ((($v$06)) + 96|0);
         HEAP32[$28>>2] = $23;
         $29 = ((($v$06)) + 64|0);
         HEAP32[$29>>2] = $23;
         $30 = ((($v$06)) + 32|0);
         HEAP32[$30>>2] = $23;
         HEAP32[$v$06>>2] = $23;
        } else {
         label = 10;
        }
       } else {
        label = 10;
       }
      } else {
       label = 10;
      }
     } else {
      label = 10;
     }
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
  if ((label|0) == 10) {
   label = 0;
   $31 = ((($d$04)) + 32|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32 << 16 >> 16;
   $34 = ((($d$04)) + 96|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35 << 16 >> 16;
   $37 = (($36) + ($33))|0;
   $38 = ($37*2217)|0;
   $39 = Math_imul($36, -7567)|0;
   $40 = (($38) + ($39))|0;
   $41 = ($33*3135)|0;
   $42 = (($38) + ($41))|0;
   $43 = HEAP16[$d$04>>1]|0;
   $44 = $43 << 16 >> 16;
   $45 = ((($d$04)) + 64|0);
   $46 = HEAP16[$45>>1]|0;
   $47 = $46 << 16 >> 16;
   $48 = (($47) + ($44))|0;
   $49 = $48 << 12;
   $50 = (($44) - ($47))|0;
   $51 = $50 << 12;
   $52 = (($49) - ($42))|0;
   $53 = (($51) - ($40))|0;
   $54 = ((($d$04)) + 112|0);
   $55 = HEAP16[$54>>1]|0;
   $56 = $55 << 16 >> 16;
   $57 = ((($d$04)) + 80|0);
   $58 = HEAP16[$57>>1]|0;
   $59 = $58 << 16 >> 16;
   $60 = ((($d$04)) + 48|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61 << 16 >> 16;
   $63 = HEAP16[$0>>1]|0;
   $64 = $63 << 16 >> 16;
   $65 = (($62) + ($56))|0;
   $66 = (($64) + ($59))|0;
   $67 = (($64) + ($56))|0;
   $68 = (($62) + ($59))|0;
   $69 = (($66) + ($65))|0;
   $70 = ($69*4816)|0;
   $71 = ($56*1223)|0;
   $72 = ($59*8410)|0;
   $73 = ($62*12586)|0;
   $74 = ($64*6149)|0;
   $75 = Math_imul($67, -3685)|0;
   $76 = (($70) + ($75))|0;
   $77 = Math_imul($68, -10497)|0;
   $78 = (($70) + ($77))|0;
   $79 = Math_imul($65, -8034)|0;
   $80 = Math_imul($66, -1597)|0;
   $81 = (($80) + ($74))|0;
   $82 = (($81) + ($76))|0;
   $83 = (($79) + ($73))|0;
   $84 = (($83) + ($78))|0;
   $85 = (($80) + ($72))|0;
   $86 = (($85) + ($78))|0;
   $87 = (($79) + ($71))|0;
   $88 = (($87) + ($76))|0;
   $89 = (($42) + 512)|0;
   $90 = (($89) + ($49))|0;
   $91 = (($40) + 512)|0;
   $92 = (($91) + ($51))|0;
   $93 = (($53) + 512)|0;
   $94 = (($52) + 512)|0;
   $95 = (($82) + ($90))|0;
   $96 = $95 >> 10;
   HEAP32[$v$06>>2] = $96;
   $97 = (($90) - ($82))|0;
   $98 = $97 >> 10;
   $99 = ((($v$06)) + 224|0);
   HEAP32[$99>>2] = $98;
   $100 = (($84) + ($92))|0;
   $101 = $100 >> 10;
   $102 = ((($v$06)) + 32|0);
   HEAP32[$102>>2] = $101;
   $103 = (($92) - ($84))|0;
   $104 = $103 >> 10;
   $105 = ((($v$06)) + 192|0);
   HEAP32[$105>>2] = $104;
   $106 = (($86) + ($93))|0;
   $107 = $106 >> 10;
   $108 = ((($v$06)) + 64|0);
   HEAP32[$108>>2] = $107;
   $109 = (($93) - ($86))|0;
   $110 = $109 >> 10;
   $111 = ((($v$06)) + 160|0);
   HEAP32[$111>>2] = $110;
   $112 = (($88) + ($94))|0;
   $113 = $112 >> 10;
   $114 = ((($v$06)) + 96|0);
   HEAP32[$114>>2] = $113;
   $115 = (($94) - ($88))|0;
   $116 = $115 >> 10;
   $117 = ((($v$06)) + 128|0);
   HEAP32[$117>>2] = $116;
  }
  $118 = (($i$08) + 1)|0;
  $119 = ((($d$04)) + 2|0);
  $120 = ((($v$06)) + 4|0);
  $exitcond9 = ($118|0)==(8);
  if ($exitcond9) {
   $i$13 = 0;$o$01 = $out;$v$12 = $val;
   break;
  } else {
   $d$04 = $119;$i$08 = $118;$v$06 = $120;
  }
 }
 while(1) {
  $121 = ((($v$12)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ((($v$12)) + 24|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + ($122))|0;
  $126 = ($125*2217)|0;
  $127 = Math_imul($124, -7567)|0;
  $128 = (($126) + ($127))|0;
  $129 = ($122*3135)|0;
  $130 = (($126) + ($129))|0;
  $131 = HEAP32[$v$12>>2]|0;
  $132 = ((($v$12)) + 16|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (($133) + ($131))|0;
  $135 = $134 << 12;
  $136 = (($131) - ($133))|0;
  $137 = $136 << 12;
  $138 = (($135) - ($130))|0;
  $139 = (($137) - ($128))|0;
  $140 = ((($v$12)) + 28|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ((($v$12)) + 20|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = ((($v$12)) + 12|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = ((($v$12)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($145) + ($141))|0;
  $149 = (($147) + ($143))|0;
  $150 = (($147) + ($141))|0;
  $151 = (($145) + ($143))|0;
  $152 = (($149) + ($148))|0;
  $153 = ($152*4816)|0;
  $154 = ($141*1223)|0;
  $155 = ($143*8410)|0;
  $156 = ($145*12586)|0;
  $157 = ($147*6149)|0;
  $158 = Math_imul($150, -3685)|0;
  $159 = (($153) + ($158))|0;
  $160 = Math_imul($151, -10497)|0;
  $161 = (($153) + ($160))|0;
  $162 = Math_imul($148, -8034)|0;
  $163 = Math_imul($149, -1597)|0;
  $164 = (($163) + ($157))|0;
  $165 = (($164) + ($159))|0;
  $166 = (($162) + ($156))|0;
  $167 = (($166) + ($161))|0;
  $168 = (($163) + ($155))|0;
  $169 = (($168) + ($161))|0;
  $170 = (($162) + ($154))|0;
  $171 = (($170) + ($159))|0;
  $172 = (($130) + 16842752)|0;
  $173 = (($172) + ($135))|0;
  $174 = (($128) + 16842752)|0;
  $175 = (($174) + ($137))|0;
  $176 = (($139) + 16842752)|0;
  $177 = (($138) + 16842752)|0;
  $178 = (($165) + ($173))|0;
  $179 = $178 >> 17;
  $180 = (_stbi__clamp($179)|0);
  HEAP8[$o$01>>0] = $180;
  $181 = (($173) - ($165))|0;
  $182 = $181 >> 17;
  $183 = (_stbi__clamp($182)|0);
  $184 = ((($o$01)) + 7|0);
  HEAP8[$184>>0] = $183;
  $185 = (($167) + ($175))|0;
  $186 = $185 >> 17;
  $187 = (_stbi__clamp($186)|0);
  $188 = ((($o$01)) + 1|0);
  HEAP8[$188>>0] = $187;
  $189 = (($175) - ($167))|0;
  $190 = $189 >> 17;
  $191 = (_stbi__clamp($190)|0);
  $192 = ((($o$01)) + 6|0);
  HEAP8[$192>>0] = $191;
  $193 = (($169) + ($176))|0;
  $194 = $193 >> 17;
  $195 = (_stbi__clamp($194)|0);
  $196 = ((($o$01)) + 2|0);
  HEAP8[$196>>0] = $195;
  $197 = (($176) - ($169))|0;
  $198 = $197 >> 17;
  $199 = (_stbi__clamp($198)|0);
  $200 = ((($o$01)) + 5|0);
  HEAP8[$200>>0] = $199;
  $201 = (($171) + ($177))|0;
  $202 = $201 >> 17;
  $203 = (_stbi__clamp($202)|0);
  $204 = ((($o$01)) + 3|0);
  HEAP8[$204>>0] = $203;
  $205 = (($177) - ($171))|0;
  $206 = $205 >> 17;
  $207 = (_stbi__clamp($206)|0);
  $208 = ((($o$01)) + 4|0);
  HEAP8[$208>>0] = $207;
  $209 = (($i$13) + 1)|0;
  $210 = ((($v$12)) + 32|0);
  $211 = (($o$01) + ($out_stride)|0);
  $exitcond = ($209|0)==(8);
  if ($exitcond) {
   break;
  } else {
   $i$13 = $209;$o$01 = $211;$v$12 = $210;
  }
 }
 STACKTOP = sp;return;
}
function _stbi__YCbCr_to_RGB_row($out,$y,$pcb,$pcr,$count,$step) {
 $out = $out|0;
 $y = $y|0;
 $pcb = $pcb|0;
 $pcr = $pcr|0;
 $count = $count|0;
 $step = $step|0;
 var $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b$0 = 0, $exitcond = 0, $g$0 = 0, $i$03 = 0, $r$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count|0)>(0);
 if ($0) {
  $$04 = $out;$i$03 = 0;
 } else {
  return;
 }
 while(1) {
  $1 = (($y) + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = $3 << 20;
  $5 = $4 | 524288;
  $6 = (($pcr) + ($i$03)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = (($8) + -128)|0;
  $10 = (($pcb) + ($i$03)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (($12) + -128)|0;
  $14 = Math_imul($9, 1470208)|0;
  $15 = (($14) + ($5))|0;
  $16 = Math_imul($9, -748800)|0;
  $17 = (($5) + ($16))|0;
  $18 = Math_imul($13, -360960)|0;
  $19 = $18 & -65536;
  $20 = (($19) + ($17))|0;
  $21 = Math_imul($13, 1858048)|0;
  $22 = (($21) + ($5))|0;
  $23 = $15 >> 20;
  $24 = $20 >> 20;
  $25 = $22 >> 20;
  $26 = ($23>>>0)>(255);
  $27 = $15 >>> 31;
  $28 = (($27) + 255)|0;
  $r$0 = $26 ? $28 : $23;
  $29 = ($24>>>0)>(255);
  $30 = $20 >>> 31;
  $31 = (($30) + 255)|0;
  $g$0 = $29 ? $31 : $24;
  $32 = ($25>>>0)>(255);
  $33 = $22 >>> 31;
  $34 = (($33) + 255)|0;
  $b$0 = $32 ? $34 : $25;
  $35 = $r$0&255;
  HEAP8[$$04>>0] = $35;
  $36 = $g$0&255;
  $37 = ((($$04)) + 1|0);
  HEAP8[$37>>0] = $36;
  $38 = $b$0&255;
  $39 = ((($$04)) + 2|0);
  HEAP8[$39>>0] = $38;
  $40 = ((($$04)) + 3|0);
  HEAP8[$40>>0] = -1;
  $41 = (($$04) + ($step)|0);
  $42 = (($i$03) + 1)|0;
  $exitcond = ($42|0)==($count|0);
  if ($exitcond) {
   break;
  } else {
   $$04 = $41;$i$03 = $42;
  }
 }
 return;
}
function _stbi__resample_row_hv_2($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $i$01 = 0, $t1$0$lcssa = 0, $t1$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($w|0)==(1);
 $1 = HEAP8[$in_near>>0]|0;
 $2 = $1&255;
 $3 = ($2*3)|0;
 $4 = HEAP8[$in_far>>0]|0;
 $5 = $4&255;
 $6 = (($3) + ($5))|0;
 $7 = (($6) + 2)|0;
 $8 = $7 >>> 2;
 $9 = $8&255;
 if ($0) {
  $10 = ((($out)) + 1|0);
  HEAP8[$10>>0] = $9;
  HEAP8[$out>>0] = $9;
  return ($out|0);
 }
 HEAP8[$out>>0] = $9;
 $11 = ($w|0)>(1);
 if ($11) {
  $i$01 = 1;$t1$02 = $6;
  while(1) {
   $12 = (($in_near) + ($i$01)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = ($14*3)|0;
   $16 = (($in_far) + ($i$01)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = (($15) + ($18))|0;
   $20 = ($t1$02*3)|0;
   $21 = (($20) + 8)|0;
   $22 = (($21) + ($19))|0;
   $23 = $22 >>> 4;
   $24 = $23&255;
   $25 = $i$01 << 1;
   $26 = (($25) + -1)|0;
   $27 = (($out) + ($26)|0);
   HEAP8[$27>>0] = $24;
   $28 = ($19*3)|0;
   $29 = (($t1$02) + 8)|0;
   $30 = (($29) + ($28))|0;
   $31 = $30 >>> 4;
   $32 = $31&255;
   $33 = (($out) + ($25)|0);
   HEAP8[$33>>0] = $32;
   $34 = (($i$01) + 1)|0;
   $exitcond = ($34|0)==($w|0);
   if ($exitcond) {
    $t1$0$lcssa = $19;
    break;
   } else {
    $i$01 = $34;$t1$02 = $19;
   }
  }
 } else {
  $t1$0$lcssa = $6;
 }
 $35 = (($t1$0$lcssa) + 2)|0;
 $36 = $35 >>> 2;
 $37 = $36&255;
 $38 = $w << 1;
 $39 = (($38) + -1)|0;
 $40 = (($out) + ($39)|0);
 HEAP8[$40>>0] = $37;
 return ($out|0);
}
function _stbi__clamp($x) {
 $x = $x|0;
 var $$not = 0, $0 = 0, $1 = 0, $2 = 0, $x$lobit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x>>>0)>(255);
 if ($0) {
  $x$lobit = $x >> 31;
  $1 = $x$lobit&255;
  $$not = $1 ^ -1;
  return ($$not|0);
 } else {
  $2 = $x&255;
  return ($2|0);
 }
 return (0)|0;
}
function _stbi__stdio_read($user,$data,$size) {
 $user = $user|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fread(($data|0),1,($size|0),($user|0))|0);
 return ($0|0);
}
function _stbi__stdio_skip($user,$n) {
 $user = $user|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_fseek(($user|0),($n|0),1)|0);
 return;
}
function _stbi__stdio_eof($user) {
 $user = $user|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_feof(($user|0))|0);
 return ($0|0);
}
function _ErrorCallback($error,$description) {
 $error = $error|0;
 $description = $description|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $error;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $description;
 _TraceLog(2,31136,$vararg_buffer);
 STACKTOP = sp;return;
}
function _SetupFramebufferSize($displayWidth,$displayHeight) {
 $displayWidth = $displayWidth|0;
 $displayHeight = $displayHeight|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $or$cond = 0, $roundf = 0.0, $roundf1 = 0.0, $roundf2 = 0.0, $roundf3 = 0.0, $storemerge = 0, $vararg_buffer = 0, $vararg_buffer4 = 0;
 var $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = sp + 40|0;
 $1 = HEAP32[8856>>2]|0;
 $2 = ($1|0)>($displayWidth|0);
 if (!($2)) {
  $3 = HEAP32[8872>>2]|0;
  $4 = ($3|0)>($displayHeight|0);
  if (!($4)) {
   $29 = ($1|0)<($displayWidth|0);
   $30 = ($3|0)<($displayHeight|0);
   $or$cond = $29 | $30;
   if (!($or$cond)) {
    HEAP32[10216>>2] = $1;
    $51 = HEAP32[8872>>2]|0;
    HEAP32[10224>>2] = $51;
    HEAP32[10200>>2] = 0;
    HEAP32[10208>>2] = 0;
    STACKTOP = sp;return;
   }
   HEAP32[$vararg_buffer8>>2] = $1;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $3;
   $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
   HEAP32[$vararg_ptr12>>2] = $displayWidth;
   $vararg_ptr13 = ((($vararg_buffer8)) + 12|0);
   HEAP32[$vararg_ptr13>>2] = $displayHeight;
   _TraceLog(0,31064,$vararg_buffer8);
   $31 = (+($displayWidth|0));
   $32 = (+($displayHeight|0));
   $33 = $31 / $32;
   $34 = HEAP32[8856>>2]|0;
   $35 = (+($34|0));
   $36 = HEAP32[8872>>2]|0;
   $37 = (+($36|0));
   $38 = $35 / $37;
   $39 = !($33 <= $38);
   if ($39) {
    $46 = $33 * $37;
    $roundf = (+_roundf($46));
    $47 = (~~(($roundf)));
    HEAP32[10216>>2] = $47;
    $48 = HEAP32[8872>>2]|0;
    HEAP32[10224>>2] = $48;
    $49 = HEAP32[8856>>2]|0;
    $50 = (($47) - ($49))|0;
    HEAP32[10200>>2] = $50;
    HEAP32[10208>>2] = 0;
    STACKTOP = sp;return;
   } else {
    HEAP32[10216>>2] = $34;
    $40 = HEAP32[8856>>2]|0;
    $41 = (+($40|0));
    $42 = $41 / $33;
    $roundf1 = (+_roundf($42));
    $43 = (~~(($roundf1)));
    HEAP32[10224>>2] = $43;
    HEAP32[10200>>2] = 0;
    $44 = HEAP32[8872>>2]|0;
    $45 = (($43) - ($44))|0;
    HEAP32[10208>>2] = $45;
    STACKTOP = sp;return;
   }
  }
 }
 $5 = HEAP32[8856>>2]|0;
 $6 = HEAP32[8872>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $displayWidth;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $displayHeight;
 _TraceLog(2,30912,$vararg_buffer);
 $7 = (+($displayWidth|0));
 $8 = HEAP32[8856>>2]|0;
 $9 = (+($8|0));
 $10 = $7 / $9;
 $11 = (+($displayHeight|0));
 $12 = HEAP32[8872>>2]|0;
 $13 = (+($12|0));
 $14 = $11 / $13;
 $15 = !($10 <= $14);
 if ($15) {
  $21 = $9 * $14;
  $roundf2 = (+_roundf($21));
  $22 = (~~(($roundf2)));
  HEAP32[10216>>2] = $22;
  HEAP32[10224>>2] = $displayHeight;
  $23 = (($displayWidth) - ($22))|0;
  HEAP32[10200>>2] = $23;
  $storemerge = 0;
 } else {
  HEAP32[10216>>2] = $displayWidth;
  $16 = HEAP32[8872>>2]|0;
  $17 = (+($16|0));
  $18 = $10 * $17;
  $roundf3 = (+_roundf($18));
  $19 = (~~(($roundf3)));
  HEAP32[10224>>2] = $19;
  HEAP32[10200>>2] = 0;
  $20 = (($displayHeight) - ($19))|0;
  $storemerge = $20;
 }
 HEAP32[10208>>2] = $storemerge;
 $24 = HEAP32[10216>>2]|0;
 $25 = (+($24|0));
 $26 = HEAP32[8856>>2]|0;
 $27 = (+($26|0));
 $28 = $25 / $27;
 _MatrixScale($0,$28,$28,$28);
 dest=9024; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[10216>>2] = $displayWidth;
 HEAP32[10224>>2] = $displayHeight;
 HEAP32[$vararg_buffer4>>2] = $displayWidth;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $displayHeight;
 _TraceLog(2,30992,$vararg_buffer4);
 STACKTOP = sp;return;
}
function _WindowSizeCallback($window,$width,$height) {
 $window = $window|0;
 $width = $width|0;
 $height = $height|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[10200>>2]|0;
 $2 = HEAP32[10208>>2]|0;
 $3 = HEAP32[10216>>2]|0;
 $4 = HEAP32[10224>>2]|0;
 _rlglInitGraphics($1,$2,$3,$4);
 HEAP8[$0>>0] = -11;
 $5 = ((($0)) + 1|0);
 HEAP8[$5>>0] = -11;
 $6 = ((($0)) + 2|0);
 HEAP8[$6>>0] = -11;
 $7 = ((($0)) + 3|0);
 HEAP8[$7>>0] = -1;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$0+3>>0]|0;
 _ClearBackground($$byval_copy);
 STACKTOP = sp;return;
}
function _CursorEnterCallback($window,$enter) {
 $window = $window|0;
 $enter = $enter|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _KeyCallback($window,$key,$scancode,$action,$mods) {
 $window = $window|0;
 $key = $key|0;
 $scancode = $scancode|0;
 $action = $action|0;
 $mods = $mods|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8992>>2]|0;
 $1 = ($0|0)==($key|0);
 $2 = ($action|0)==(1);
 $or$cond = $2 & $1;
 if ($or$cond) {
  _glfwSetWindowShouldClose(($window|0),1);
 } else {
  $3 = $action&255;
  $4 = (9120 + ($key)|0);
  HEAP8[$4>>0] = $3;
 }
 $5 = ($key|0)==(259);
 $or$cond3 = $5 & $2;
 if (!($or$cond3)) {
  return;
 }
 HEAP32[10144>>2] = 3;
 return;
}
function _MouseButtonCallback($window,$button,$action,$mods) {
 $window = $window|0;
 $button = $button|0;
 $action = $action|0;
 $mods = $mods|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $action&255;
 $1 = (10152 + ($button)|0);
 HEAP8[$1>>0] = $0;
 return;
}
function _CharCallback($window,$key) {
 $window = $window|0;
 $key = $key|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[10144>>2] = $key;
 return;
}
function _ScrollCallback($window,$xoffset,$yoffset) {
 $window = $window|0;
 $xoffset = +$xoffset;
 $yoffset = +$yoffset;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (~~(($yoffset)));
 HEAP32[30512>>2] = $0;
 return;
}
function _WindowIconifyCallback($window,$iconified) {
 $window = $window|0;
 $iconified = $iconified|0;
 var $$ = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $not$ = ($iconified|0)!=(0);
 $$ = $not$&1;
 HEAP32[8984>>2] = $$;
 return;
}
function _ldexp($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$0$be$i = 0, $$0$be$i19 = 0, $$0$i44 = 0, $$01$be$i = 0, $$01$be$i18 = 0, $$012$i = 0, $$012$i15 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$us$i = 0, $$02$us$i30 = 0, $$03$i = 0, $$03$i14 = 0, $$66 = 0, $$67 = 0, $$lcssa = 0, $$lcssa102 = 0, $$lcssa70 = 0, $$lcssa71 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre6$i = 0, $$pre6$i26 = 0, $$sum = 0, $$sum$i = 0, $$sum$i17 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0;
 var $exitcond$i = 0, $exitcond$i29 = 0, $head$0$lcssa = 0, $head$076 = 0, $head$174 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i23 = 0, $i$01$us$i = 0, $i$01$us$i28 = 0, $i$04$i = 0, $i$04$i13 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond68 = 0, $or$cond6873 = 0, $or$cond72 = 0;
 var $pshift$0$lcssa = 0, $pshift$077 = 0, $pshift$1 = 0, $pshift$275 = 0, $sum = 0, $sum$i = 0, $sum$i16 = 0, $tmp$i25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0;
 $tmp$i25 = sp + 424|0;
 $ar$i = sp;
 $lp = sp + 232|0;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = ((($lp)) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = $11;
  $16 = 1;$51 = 0;$head$076 = $base;$pshift$077 = 1;
  while(1) {
   $15 = $16 & 3;
   $17 = ($15|0)==(3);
   do {
    if ($17) {
     HEAP32[$ar$i>>2] = $head$076;
     $18 = ($pshift$077|0)>(1);
     L42: do {
      if ($18) {
       $$012$i = $pshift$077;$$03$i = $head$076;$24 = $head$076;$i$04$i = 1;
       while(1) {
        $19 = (($$03$i) + ($10)|0);
        $20 = (($$012$i) + -2)|0;
        $21 = (($lp) + ($20<<2)|0);
        $22 = HEAP32[$21>>2]|0;
        $sum$i = (($22) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $23 = (($$03$i) + ($$sum$i)|0);
        $25 = (FUNCTION_TABLE_iii[$cmp & 7]($24,$23)|0);
        $26 = ($25|0)>(-1);
        if ($26) {
         $27 = (FUNCTION_TABLE_iii[$cmp & 7]($24,$19)|0);
         $28 = ($27|0)>(-1);
         if ($28) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $29 = (FUNCTION_TABLE_iii[$cmp & 7]($23,$19)|0);
        $30 = ($29|0)>(-1);
        $31 = (($i$04$i) + 1)|0;
        $32 = (($ar$i) + ($i$04$i<<2)|0);
        if ($30) {
         HEAP32[$32>>2] = $23;
         $33 = (($$012$i) + -1)|0;
         $$0$be$i = $23;$$01$be$i = $33;
        } else {
         HEAP32[$32>>2] = $19;
         $$0$be$i = $19;$$01$be$i = $20;
        }
        $34 = ($$01$be$i|0)>(1);
        if (!($34)) {
         $i$0$lcssa$i = $31;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$24 = $$pre$i;$i$04$i = $31;
       }
       $35 = ($i$0$lcssa$i|0)<(2);
       if (!($35)) {
        $36 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$36>>2] = $tmp$i25;
        if (!($13)) {
         $$02$us$i = $width;$48 = $tmp$i25;
         while(1) {
          $46 = ($$02$us$i>>>0)>(256);
          $38 = $46 ? 256 : $$02$us$i;
          $47 = HEAP32[$ar$i>>2]|0;
          _memcpy(($48|0),($47|0),($38|0))|0;
          $44 = $47;$i$01$us$i = 0;
          while(1) {
           $40 = (($ar$i) + ($i$01$us$i<<2)|0);
           $41 = (($i$01$us$i) + 1)|0;
           $42 = (($ar$i) + ($41<<2)|0);
           $43 = HEAP32[$42>>2]|0;
           _memcpy(($44|0),($43|0),($38|0))|0;
           $45 = (($44) + ($38)|0);
           HEAP32[$40>>2] = $45;
           $exitcond$i = ($41|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $44 = $43;$i$01$us$i = $41;
           }
          }
          $37 = ($$02$us$i|0)==($38|0);
          if ($37) {
           break L42;
          }
          $39 = (($$02$us$i) - ($38))|0;
          $$pre6$i = HEAP32[$36>>2]|0;
          $$02$us$i = $39;$48 = $$pre6$i;
         }
        }
       }
      } else {
      }
     } while(0);
     $49 = $16 >>> 2;
     $50 = $51 << 30;
     $52 = $49 | $50;
     $53 = $51 >>> 2;
     $54 = (($pshift$077) + 2)|0;
     $105 = $52;$168 = $53;$pshift$1 = $54;
    } else {
     $55 = (($pshift$077) + -1)|0;
     $56 = (($lp) + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $head$076;
     $59 = (($14) - ($58))|0;
     $60 = ($57>>>0)<($59>>>0);
     if ($60) {
      HEAP32[$ar$i>>2] = $head$076;
      $61 = ($pshift$077|0)>(1);
      L15: do {
       if ($61) {
        $$012$i15 = $pshift$077;$$03$i14 = $head$076;$67 = $head$076;$i$04$i13 = 1;
        while(1) {
         $62 = (($$03$i14) + ($10)|0);
         $63 = (($$012$i15) + -2)|0;
         $64 = (($lp) + ($63<<2)|0);
         $65 = HEAP32[$64>>2]|0;
         $sum$i16 = (($65) + ($width))|0;
         $$sum$i17 = (0 - ($sum$i16))|0;
         $66 = (($$03$i14) + ($$sum$i17)|0);
         $68 = (FUNCTION_TABLE_iii[$cmp & 7]($67,$66)|0);
         $69 = ($68|0)>(-1);
         if ($69) {
          $70 = (FUNCTION_TABLE_iii[$cmp & 7]($67,$62)|0);
          $71 = ($70|0)>(-1);
          if ($71) {
           $i$0$lcssa$i23 = $i$04$i13;
           break;
          }
         }
         $72 = (FUNCTION_TABLE_iii[$cmp & 7]($66,$62)|0);
         $73 = ($72|0)>(-1);
         $74 = (($i$04$i13) + 1)|0;
         $75 = (($ar$i) + ($i$04$i13<<2)|0);
         if ($73) {
          HEAP32[$75>>2] = $66;
          $76 = (($$012$i15) + -1)|0;
          $$0$be$i19 = $66;$$01$be$i18 = $76;
         } else {
          HEAP32[$75>>2] = $62;
          $$0$be$i19 = $62;$$01$be$i18 = $63;
         }
         $77 = ($$01$be$i18|0)>(1);
         if (!($77)) {
          $i$0$lcssa$i23 = $74;
          break;
         }
         $$pre$i21 = HEAP32[$ar$i>>2]|0;
         $$012$i15 = $$01$be$i18;$$03$i14 = $$0$be$i19;$67 = $$pre$i21;$i$04$i13 = $74;
        }
        $78 = ($i$0$lcssa$i23|0)<(2);
        if (!($78)) {
         $79 = (($ar$i) + ($i$0$lcssa$i23<<2)|0);
         HEAP32[$79>>2] = $tmp$i25;
         if (!($13)) {
          $$02$us$i30 = $width;$91 = $tmp$i25;
          while(1) {
           $89 = ($$02$us$i30>>>0)>(256);
           $81 = $89 ? 256 : $$02$us$i30;
           $90 = HEAP32[$ar$i>>2]|0;
           _memcpy(($91|0),($90|0),($81|0))|0;
           $87 = $90;$i$01$us$i28 = 0;
           while(1) {
            $83 = (($ar$i) + ($i$01$us$i28<<2)|0);
            $84 = (($i$01$us$i28) + 1)|0;
            $85 = (($ar$i) + ($84<<2)|0);
            $86 = HEAP32[$85>>2]|0;
            _memcpy(($87|0),($86|0),($81|0))|0;
            $88 = (($87) + ($81)|0);
            HEAP32[$83>>2] = $88;
            $exitcond$i29 = ($84|0)==($i$0$lcssa$i23|0);
            if ($exitcond$i29) {
             break;
            } else {
             $87 = $86;$i$01$us$i28 = $84;
            }
           }
           $80 = ($$02$us$i30|0)==($81|0);
           if ($80) {
            break L15;
           }
           $82 = (($$02$us$i30) - ($81))|0;
           $$pre6$i26 = HEAP32[$79>>2]|0;
           $$02$us$i30 = $82;$91 = $$pre6$i26;
          }
         }
        }
       } else {
       }
      } while(0);
     } else {
      _trinkle($head$076,$width,$cmp,$16,$51,$pshift$077,0,$lp);
     }
     $92 = ($pshift$077|0)==(1);
     if ($92) {
      $93 = $51 << 1;
      $94 = $16 >>> 31;
      $95 = $94 | $93;
      $96 = $16 << 1;
      $105 = $96;$168 = $95;$pshift$1 = 0;
      break;
     } else {
      $97 = ($55>>>0)>(31);
      $98 = (($pshift$077) + -33)|0;
      $$ = $97 ? 0 : $16;
      $$66 = $97 ? $16 : $51;
      $$67 = $97 ? $98 : $55;
      $99 = $$66 << $$67;
      $100 = (32 - ($$67))|0;
      $101 = $$ >>> $100;
      $102 = $101 | $99;
      $103 = $$ << $$67;
      $105 = $103;$168 = $102;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $104 = $105 | 1;
   $106 = (($head$076) + ($width)|0);
   $107 = ($106>>>0)<($11>>>0);
   if ($107) {
    $16 = $104;$51 = $168;$head$076 = $106;$pshift$077 = $pshift$1;
   } else {
    $$lcssa70 = $168;$$lcssa71 = $104;$head$0$lcssa = $106;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa70 = 0;$$lcssa71 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa71,$$lcssa70,$pshift$0$lcssa,0,$lp);
 $108 = ($pshift$0$lcssa|0)==(1);
 $109 = ($$lcssa71|0)==(1);
 $or$cond72 = $109 & $108;
 $110 = ($$lcssa70|0)==(0);
 $or$cond6873 = $110 & $or$cond72;
 if ($or$cond6873) {
  STACKTOP = sp;return;
 } else {
  $113 = $$lcssa71;$122 = $$lcssa70;$head$174 = $head$0$lcssa;$pshift$275 = $pshift$0$lcssa;
 }
 while(1) {
  $111 = ($pshift$275|0)<(2);
  if (!($111)) {
   $136 = $122 << 2;
   $137 = $113 >>> 30;
   $138 = $137 | $136;
   $139 = (($pshift$275) + -2)|0;
   $140 = $113 << 1;
   $141 = $140 & 2147483646;
   $142 = $137 << 31;
   $143 = $141 | $142;
   $144 = $143 ^ 3;
   $145 = $138 >>> 1;
   $146 = (($lp) + ($139<<2)|0);
   $147 = HEAP32[$146>>2]|0;
   $sum = (($147) + ($width))|0;
   $$sum2 = (0 - ($sum))|0;
   $148 = (($head$174) + ($$sum2)|0);
   $149 = (($pshift$275) + -1)|0;
   _trinkle($148,$width,$cmp,$144,$145,$149,1,$lp);
   $150 = $145 << 1;
   $151 = $137 & 1;
   $152 = $150 | $151;
   $153 = $144 << 1;
   $154 = $153 | 1;
   $155 = (($head$174) + ($10)|0);
   _trinkle($155,$width,$cmp,$154,$152,$139,1,$lp);
   $113 = $154;$122 = $152;$head$174 = $155;$pshift$275 = $139;
   continue;
  }
  $112 = (($113) + -1)|0;
  $114 = ($112|0)==(0);
  do {
   if ($114) {
    $135 = 32;
    label = 56;
   } else {
    $115 = $112 & 1;
    $116 = ($115|0)==(0);
    if ($116) {
     $$02$i$i = $112;$nTrailingZeros$03$i$i = 0;
     while(1) {
      $117 = (($nTrailingZeros$03$i$i) + 1)|0;
      $118 = $$02$i$i >>> 1;
      $119 = $118 & 1;
      $120 = ($119|0)==(0);
      if ($120) {
       $$02$i$i = $118;$nTrailingZeros$03$i$i = $117;
      } else {
       $$lcssa = $117;
       break;
      }
     }
     $121 = ($$lcssa|0)==(0);
     if ($121) {
      label = 51;
     } else {
      $132 = $$lcssa;
     }
    } else {
     label = 51;
    }
    if ((label|0) == 51) {
     label = 0;
     $123 = ($122|0)==(0);
     if ($123) {
      $135 = 64;
      label = 56;
      break;
     }
     $124 = $122 & 1;
     $125 = ($124|0)==(0);
     if ($125) {
      $$02$i3$i = $122;$nTrailingZeros$03$i2$i = 0;
     } else {
      $$0$i44 = 0;$157 = $113;$160 = $122;$164 = 0;
      break;
     }
     while(1) {
      $126 = (($nTrailingZeros$03$i2$i) + 1)|0;
      $127 = $$02$i3$i >>> 1;
      $128 = $127 & 1;
      $129 = ($128|0)==(0);
      if ($129) {
       $$02$i3$i = $127;$nTrailingZeros$03$i2$i = $126;
      } else {
       $$lcssa102 = $126;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
       break;
      }
     }
     $130 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
     $131 = ($$lcssa102|0)==(0);
     if ($131) {
      $$0$i44 = 0;$157 = $113;$160 = $122;$164 = 0;
      break;
     } else {
      $132 = $130;
     }
    }
    $133 = ($132>>>0)>(31);
    if ($133) {
     $135 = $132;
     label = 56;
    } else {
     $$0$i44 = $132;$157 = $113;$160 = $122;$164 = $132;
    }
   }
  } while(0);
  if ((label|0) == 56) {
   label = 0;
   $134 = (($135) + -32)|0;
   $$0$i44 = $134;$157 = $122;$160 = 0;$164 = $135;
  }
  $156 = $157 >>> $$0$i44;
  $158 = (32 - ($$0$i44))|0;
  $159 = $160 << $158;
  $161 = $159 | $156;
  $162 = $160 >>> $$0$i44;
  $163 = (($164) + ($pshift$275))|0;
  $$pre = (($head$174) + ($10)|0);
  $165 = ($163|0)==(1);
  $166 = ($161|0)==(1);
  $or$cond = $166 & $165;
  $167 = ($162|0)==(0);
  $or$cond68 = $167 & $or$cond;
  if ($or$cond68) {
   break;
  } else {
   $113 = $161;$122 = $162;$head$174 = $$pre;$pshift$275 = $163;
  }
 }
 STACKTOP = sp;return;
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$0211 = $s;
   while(1) {
    $8 = HEAP8[$$0211>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ($8<<24>>24)==($5<<24>>24);
    $or$cond = $9 | $10;
    if ($or$cond) {
     $$0 = $$0211;
     break;
    }
    $11 = ((($$0211)) + 1|0);
    $12 = $11;
    $13 = $12 & 3;
    $14 = ($13|0)==(0);
    if ($14) {
     $$02$lcssa = $11;
     break L5;
    } else {
     $$0211 = $11;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L12: do {
  if ($21) {
   $23 = $16;$w$08 = $$02$lcssa;
   while(1) {
    $22 = $23 ^ $15;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if (!($28)) {
     $w$0$lcssa = $w$08;
     break L12;
    }
    $29 = ((($w$08)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + -16843009)|0;
    $32 = $30 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    if ($35) {
     $23 = $30;$w$08 = $29;
    } else {
     $w$0$lcssa = $29;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond5 = $38 | $39;
  $40 = ((($$1)) + 1|0);
  if ($or$cond5) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 return ($$0|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$027 = 0, $$03$lcssa = 0, $$035 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $2 = ((($c)) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if (!($4)) {
   ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$027 = $c;$13 = $0;
   while(1) {
    $12 = $13 & 31;
    $14 = $12&255;
    $15 = 1 << $14;
    $div4 = ($13&255) >>> 5;
    $16 = $div4&255;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = ((($$027)) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$027 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$03$lcssa = $s;
    } else {
     $$035 = $s;$23 = $10;
     while(1) {
      $div = ($23&255) >>> 5;
      $24 = $div&255;
      $25 = (($byteset) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $23 & 31;
      $28 = $27&255;
      $29 = 1 << $28;
      $30 = $26 & $29;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $$03$lcssa = $$035;
       break L7;
      }
      $32 = ((($$035)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$03$lcssa = $32;
       break;
      } else {
       $$035 = $32;$23 = $33;
      }
     }
    }
   } while(0);
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = $0 << 24 >> 24;
 $6 = (___strchrnul($s,$5)|0);
 $7 = $6;
 $8 = $s;
 $9 = (($7) - ($8))|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $byteset = sp;
 ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($c)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$03 = $s;
  while(1) {
   $5 = HEAP8[$$03>>0]|0;
   $6 = ($5<<24>>24)==($0<<24>>24);
   $7 = ((($$03)) + 1|0);
   if ($6) {
    $$03 = $7;
   } else {
    $$03$lcssa = $$03;
    break;
   }
  }
  $8 = $$03$lcssa;
  $9 = $s;
  $10 = (($8) - ($9))|0;
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$028 = $c;$14 = $0;
 }
 while(1) {
  $13 = $14 & 31;
  $15 = $13&255;
  $16 = 1 << $15;
  $div4 = ($14&255) >>> 5;
  $17 = $div4&255;
  $18 = (($byteset) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 | $16;
  HEAP32[$18>>2] = $20;
  $21 = ((($$028)) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   break;
  } else {
   $$028 = $21;$14 = $22;
  }
 }
 $11 = HEAP8[$s>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L12: do {
  if ($12) {
   $$1$lcssa = $s;
  } else {
   $$16 = $s;$24 = $11;
   while(1) {
    $div = ($24&255) >>> 5;
    $25 = $div&255;
    $26 = (($byteset) + ($25<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $24 & 31;
    $29 = $28&255;
    $30 = 1 << $29;
    $31 = $27 & $30;
    $32 = ($31|0)==(0);
    if ($32) {
     $$1$lcssa = $$16;
     break L12;
    }
    $33 = ((($$16)) + 1|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)==(0);
    if ($35) {
     $$1$lcssa = $33;
     break;
    } else {
     $$16 = $33;$24 = $34;
    }
   }
  }
 } while(0);
 $36 = $$1$lcssa;
 $37 = $s;
 $38 = (($36) - ($37))|0;
 $$0 = $38;
 STACKTOP = sp;return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i13 = 0, $$01$i = 0, $$02$i = 0, $$02$i9 = 0, $$03$i = 0, $$03$us$i = 0, $$lcssa$i = 0, $$lcssa$i12 = 0, $$lcssa$i6 = 0, $$lcssa303 = 0, $$lcssa306 = 0, $$lcssa309 = 0, $$lcssa323 = 0, $$lcssa326 = 0, $$lcssa329 = 0, $$lcssa344 = 0, $$pr$i = 0;
 var $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $281$phi = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $div$i = 0, $div$us$i = 0, $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i8 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa147$i = 0, $ip$0$ph76$i = 0;
 var $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0, $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$us$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$338$us$i = 0;
 var $k$338$us$i$lcssa = 0, $k$4$i = 0, $k$4$us$i = 0, $l$080$i = 0, $l$080$i$lcssa343 = 0, $mem$0$us$i = 0, $or$cond$i = 0, $or$cond$i10 = 0, $or$cond5$us$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32151$i = 0, $p$0$ph$ph71$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3155$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0;
 var $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($n)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ((($3)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($n)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $19 << 8;
  $21 = $9&255;
  $22 = $20 | $21;
  $$01$i = $8;$280 = $9;$281 = $3;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$lcssa$i = $281;$31 = $280;
    break;
   }
   $25 = $23 << 8;
   $26 = ((($$01$i)) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 | $25;
   $30 = ($27<<24>>24)==(0);
   if ($30) {
    $$lcssa$i = $$01$i;$31 = 0;
    break;
   } else {
    $281$phi = $$01$i;$$01$i = $26;$280 = $27;$hw$0$in2$i = $29;$281 = $281$phi;
   }
  }
  $32 = ($31<<24>>24)!=(0);
  $33 = $32 ? $$lcssa$i : 0;
  $$0 = $33;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = ((($3)) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = ((($n)) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i = $34;$$lcssa$i6 = $35;
  } else {
   $$02$i = $34;$hw$03$i = $56;
   while(1) {
    $58 = ((($$02$i)) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$0$lcssa$i = $58;$$lcssa$i6 = $59;
     break;
    } else {
     $$02$i = $58;$hw$03$i = $62;
    }
   }
  }
  $65 = ($$lcssa$i6<<24>>24)!=(0);
  $66 = ((($$0$lcssa$i)) + -2|0);
  $67 = $65 ? $66 : 0;
  $$0 = $67;
  STACKTOP = sp;return ($$0|0);
 }
 $68 = ((($3)) + 3|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = ($69<<24>>24)==(0);
 if ($70) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $71 = ((($n)) + 4|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = ($72<<24>>24)==(0);
 if ($73) {
  $74 = $0&255;
  $75 = $74 << 24;
  $76 = $6&255;
  $77 = $76 << 16;
  $78 = $77 | $75;
  $79 = $12&255;
  $80 = $79 << 8;
  $81 = $78 | $80;
  $82 = $38&255;
  $83 = $81 | $82;
  $84 = HEAP8[$3>>0]|0;
  $85 = $84&255;
  $86 = $85 << 24;
  $87 = $9&255;
  $88 = $87 << 16;
  $89 = $35&255;
  $90 = $89 << 8;
  $91 = $69&255;
  $92 = $90 | $88;
  $93 = $92 | $91;
  $94 = $93 | $86;
  $95 = ($94|0)==($83|0);
  if ($95) {
   $$0$lcssa$i13 = $68;$$lcssa$i12 = $69;
  } else {
   $$02$i9 = $68;$hw$03$i8 = $94;
   while(1) {
    $96 = $hw$03$i8 << 8;
    $97 = ((($$02$i9)) + 1|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = $99 | $96;
    $101 = ($98<<24>>24)==(0);
    $102 = ($100|0)==($83|0);
    $or$cond$i10 = $101 | $102;
    if ($or$cond$i10) {
     $$0$lcssa$i13 = $97;$$lcssa$i12 = $98;
     break;
    } else {
     $$02$i9 = $97;$hw$03$i8 = $100;
    }
   }
  }
  $103 = ($$lcssa$i12<<24>>24)!=(0);
  $104 = ((($$0$lcssa$i13)) + -3|0);
  $105 = $103 ? $104 : 0;
  $$0 = $105;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $110 = $0;$l$080$i = 0;
 while(1) {
  $106 = (($3) + ($l$080$i)|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = ($107<<24>>24)==(0);
  if ($108) {
   $$0$i = 0;
   break;
  }
  $109 = $110 & 31;
  $111 = $109&255;
  $112 = 1 << $111;
  $div4$i = ($110&255) >>> 5;
  $113 = $div4$i&255;
  $114 = (($byteset$i) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $115 | $112;
  HEAP32[$114>>2] = $116;
  $117 = (($l$080$i) + 1)|0;
  $118 = $110&255;
  $119 = (($shift$i) + ($118<<2)|0);
  HEAP32[$119>>2] = $117;
  $120 = (($n) + ($117)|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = ($121<<24>>24)==(0);
  if ($122) {
   $$lcssa344 = $117;$l$080$i$lcssa343 = $l$080$i;
   label = 23;
   break;
  } else {
   $110 = $121;$l$080$i = $117;
  }
 }
 L46: do {
  if ((label|0) == 23) {
   $123 = ($$lcssa344>>>0)>(1);
   L48: do {
    if ($123) {
     $282 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
     L49: while(1) {
      $283 = $282;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
      while(1) {
       $284 = $283;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
       L53: while(1) {
        $133 = $284;$k$059$i = 1;
        while(1) {
         $129 = (($k$059$i) + ($ip$0$ph76$i))|0;
         $130 = (($n) + ($129)|0);
         $131 = HEAP8[$130>>0]|0;
         $132 = (($n) + ($133)|0);
         $134 = HEAP8[$132>>0]|0;
         $135 = ($131<<24>>24)==($134<<24>>24);
         if (!($135)) {
          $$lcssa323 = $133;$$lcssa326 = $131;$$lcssa329 = $134;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
          break L53;
         }
         $136 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
         $127 = (($k$059$i) + 1)|0;
         if ($136) {
          break;
         }
         $126 = (($127) + ($jp$0$ph1365$i))|0;
         $128 = ($126>>>0)<($$lcssa344>>>0);
         if ($128) {
          $133 = $126;$k$059$i = $127;
         } else {
          $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
          break L49;
         }
        }
        $137 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
        $138 = (($137) + 1)|0;
        $139 = ($138>>>0)<($$lcssa344>>>0);
        if ($139) {
         $284 = $138;$jp$0$ph1365$i = $137;
        } else {
         $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
         break L49;
        }
       }
       $140 = ($$lcssa326&255)>($$lcssa329&255);
       $141 = (($$lcssa323) - ($ip$0$ph76$i))|0;
       if (!($140)) {
        $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
        break;
       }
       $124 = (($$lcssa323) + 1)|0;
       $125 = ($124>>>0)<($$lcssa344>>>0);
       if ($125) {
        $283 = $124;$jp$0$ph13$ph70$i = $$lcssa323;$p$0$ph$ph71$i = $141;
       } else {
        $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $141;
        break L49;
       }
      }
      $142 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
      $143 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
      $144 = ($143>>>0)<($$lcssa344>>>0);
      if ($144) {
       $282 = $143;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $142;
      } else {
       $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
       break;
      }
     }
     $285 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
     while(1) {
      $287 = $285;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
      while(1) {
       $286 = $287;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
       L68: while(1) {
        $152 = $286;$k$139$i = 1;
        while(1) {
         $148 = (($k$139$i) + ($ip$1$ph55$i))|0;
         $149 = (($n) + ($148)|0);
         $150 = HEAP8[$149>>0]|0;
         $151 = (($n) + ($152)|0);
         $153 = HEAP8[$151>>0]|0;
         $154 = ($150<<24>>24)==($153<<24>>24);
         if (!($154)) {
          $$lcssa303 = $152;$$lcssa306 = $150;$$lcssa309 = $153;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
          break L68;
         }
         $155 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
         $146 = (($k$139$i) + 1)|0;
         if ($155) {
          break;
         }
         $145 = (($146) + ($jp$1$ph944$i))|0;
         $147 = ($145>>>0)<($$lcssa344>>>0);
         if ($147) {
          $152 = $145;$k$139$i = $146;
         } else {
          $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
          break L48;
         }
        }
        $156 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
        $157 = (($156) + 1)|0;
        $158 = ($157>>>0)<($$lcssa344>>>0);
        if ($158) {
         $286 = $157;$jp$1$ph944$i = $156;
        } else {
         $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
         break L48;
        }
       }
       $159 = ($$lcssa306&255)<($$lcssa309&255);
       $160 = (($$lcssa303) - ($ip$1$ph55$i))|0;
       if (!($159)) {
        $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
        break;
       }
       $164 = (($$lcssa303) + 1)|0;
       $165 = ($164>>>0)<($$lcssa344>>>0);
       if ($165) {
        $287 = $164;$jp$1$ph9$ph49$i = $$lcssa303;$p$1$ph$ph50$i = $160;
       } else {
        $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $160;
        break L48;
       }
      }
      $161 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
      $162 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
      $163 = ($162>>>0)<($$lcssa344>>>0);
      if ($163) {
       $285 = $162;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $161;
      } else {
       $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
       break;
      }
     }
    } else {
     $ip$0$ph$lcssa147$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32151$i = 1;$p$1$ph$ph$lcssa23$i = 1;
    }
   } while(0);
   $166 = (($ip$1$ph$lcssa$i) + 1)|0;
   $167 = (($ip$0$ph$lcssa147$i) + 1)|0;
   $168 = ($166>>>0)>($167>>>0);
   $p$1$p$0$i = $168 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32151$i;
   $ip$1$ip$0$i = $168 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa147$i;
   $169 = (($n) + ($p$1$p$0$i)|0);
   $170 = (($ip$1$ip$0$i) + 1)|0;
   $171 = (_memcmp($n,$169,$170)|0);
   $172 = ($171|0)==(0);
   if ($172) {
    $178 = (($$lcssa344) - ($p$1$p$0$i))|0;
    $179 = $$lcssa344 | 63;
    $180 = ($$lcssa344|0)==($p$1$p$0$i|0);
    if ($180) {
     $237 = $179;$p$3155$i = $$lcssa344;
    } else {
     $$03$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
     L82: while(1) {
      $182 = $z$0$us$i;
      $183 = $$03$us$i;
      $184 = (($182) - ($183))|0;
      $185 = ($184>>>0)<($$lcssa344>>>0);
      do {
       if ($185) {
        $186 = (_memchr($z$0$us$i,0,$179)|0);
        $187 = ($186|0)==(0|0);
        if ($187) {
         $191 = (($z$0$us$i) + ($179)|0);
         $z$1$us$i = $191;
         break;
        } else {
         $188 = $186;
         $189 = (($188) - ($183))|0;
         $190 = ($189>>>0)<($$lcssa344>>>0);
         if ($190) {
          $$0$i = 0;
          break L46;
         } else {
          $z$1$us$i = $186;
          break;
         }
        }
       } else {
        $z$1$us$i = $z$0$us$i;
       }
      } while(0);
      $192 = (($$03$us$i) + ($l$080$i$lcssa343)|0);
      $193 = HEAP8[$192>>0]|0;
      $div$us$i = ($193&255) >>> 5;
      $194 = $div$us$i&255;
      $195 = (($byteset$i) + ($194<<2)|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = $193 & 31;
      $198 = $197&255;
      $199 = 1 << $198;
      $200 = $199 & $196;
      $201 = ($200|0)==(0);
      if ($201) {
       $232 = (($$03$us$i) + ($$lcssa344)|0);
       $$03$us$i = $232;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
       continue;
      }
      $202 = $193&255;
      $203 = (($shift$i) + ($202<<2)|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = (($$lcssa344) - ($204))|0;
      $206 = ($$lcssa344|0)==($204|0);
      if (!($206)) {
       $207 = ($mem$0$us$i|0)!=(0);
       $208 = ($205>>>0)<($p$1$p$0$i>>>0);
       $or$cond5$us$i = $207 & $208;
       $k$2$us$i = $or$cond5$us$i ? $178 : $205;
       $209 = (($$03$us$i) + ($k$2$us$i)|0);
       $$03$us$i = $209;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
       continue;
      }
      $210 = ($170>>>0)>($mem$0$us$i>>>0);
      $211 = $210 ? $170 : $mem$0$us$i;
      $212 = (($n) + ($211)|0);
      $213 = HEAP8[$212>>0]|0;
      $214 = ($213<<24>>24)==(0);
      L96: do {
       if ($214) {
        $k$4$us$i = $170;
       } else {
        $$pr$us$i = $213;$k$338$us$i = $211;
        while(1) {
         $215 = (($$03$us$i) + ($k$338$us$i)|0);
         $216 = HEAP8[$215>>0]|0;
         $217 = ($$pr$us$i<<24>>24)==($216<<24>>24);
         if (!($217)) {
          $k$338$us$i$lcssa = $k$338$us$i;
          break;
         }
         $220 = (($k$338$us$i) + 1)|0;
         $221 = (($n) + ($220)|0);
         $222 = HEAP8[$221>>0]|0;
         $223 = ($222<<24>>24)==(0);
         if ($223) {
          $k$4$us$i = $170;
          break L96;
         } else {
          $$pr$us$i = $222;$k$338$us$i = $220;
         }
        }
        $218 = (($k$338$us$i$lcssa) - ($ip$1$ip$0$i))|0;
        $219 = (($$03$us$i) + ($218)|0);
        $$03$us$i = $219;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
        continue L82;
       }
      } while(0);
      while(1) {
       $224 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
       if (!($224)) {
        $$0$i = $$03$us$i;
        break L46;
       }
       $225 = (($k$4$us$i) + -1)|0;
       $226 = (($n) + ($225)|0);
       $227 = HEAP8[$226>>0]|0;
       $228 = (($$03$us$i) + ($225)|0);
       $229 = HEAP8[$228>>0]|0;
       $230 = ($227<<24>>24)==($229<<24>>24);
       if ($230) {
        $k$4$us$i = $225;
       } else {
        break;
       }
      }
      $231 = (($$03$us$i) + ($p$1$p$0$i)|0);
      $$03$us$i = $231;$mem$0$us$i = $178;$z$0$us$i = $z$1$us$i;
     }
    }
   } else {
    $173 = (($$lcssa344) - ($ip$1$ip$0$i))|0;
    $174 = (($173) + -1)|0;
    $175 = ($ip$1$ip$0$i>>>0)>($174>>>0);
    $ip$1$ip$0$$i = $175 ? $ip$1$ip$0$i : $174;
    $176 = (($ip$1$ip$0$$i) + 1)|0;
    $177 = $$lcssa344 | 63;
    $237 = $177;$p$3155$i = $176;
   }
   $181 = (($n) + ($170)|0);
   $$03$i = $3;$z$0$i = $3;
   L106: while(1) {
    $233 = $z$0$i;
    $234 = $$03$i;
    $235 = (($233) - ($234))|0;
    $236 = ($235>>>0)<($$lcssa344>>>0);
    do {
     if ($236) {
      $238 = (_memchr($z$0$i,0,$237)|0);
      $239 = ($238|0)==(0|0);
      if ($239) {
       $243 = (($z$0$i) + ($237)|0);
       $z$1$i = $243;
       break;
      } else {
       $240 = $238;
       $241 = (($240) - ($234))|0;
       $242 = ($241>>>0)<($$lcssa344>>>0);
       if ($242) {
        $$0$i = 0;
        break L46;
       } else {
        $z$1$i = $238;
        break;
       }
      }
     } else {
      $z$1$i = $z$0$i;
     }
    } while(0);
    $244 = (($$03$i) + ($l$080$i$lcssa343)|0);
    $245 = HEAP8[$244>>0]|0;
    $div$i = ($245&255) >>> 5;
    $246 = $div$i&255;
    $247 = (($byteset$i) + ($246<<2)|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = $245 & 31;
    $250 = $249&255;
    $251 = 1 << $250;
    $252 = $251 & $248;
    $253 = ($252|0)==(0);
    if ($253) {
     $260 = (($$03$i) + ($$lcssa344)|0);
     $$03$i = $260;$z$0$i = $z$1$i;
     continue;
    }
    $254 = $245&255;
    $255 = (($shift$i) + ($254<<2)|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = ($$lcssa344|0)==($256|0);
    if (!($257)) {
     $258 = (($$lcssa344) - ($256))|0;
     $259 = (($$03$i) + ($258)|0);
     $$03$i = $259;$z$0$i = $z$1$i;
     continue;
    }
    $261 = HEAP8[$181>>0]|0;
    $262 = ($261<<24>>24)==(0);
    L120: do {
     if ($262) {
      $k$4$i = $170;
     } else {
      $$pr$i = $261;$k$338$i = $170;
      while(1) {
       $263 = (($$03$i) + ($k$338$i)|0);
       $264 = HEAP8[$263>>0]|0;
       $265 = ($$pr$i<<24>>24)==($264<<24>>24);
       if (!($265)) {
        $k$338$i$lcssa = $k$338$i;
        break;
       }
       $266 = (($k$338$i) + 1)|0;
       $267 = (($n) + ($266)|0);
       $268 = HEAP8[$267>>0]|0;
       $269 = ($268<<24>>24)==(0);
       if ($269) {
        $k$4$i = $170;
        break L120;
       } else {
        $$pr$i = $268;$k$338$i = $266;
       }
      }
      $270 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
      $271 = (($$03$i) + ($270)|0);
      $$03$i = $271;$z$0$i = $z$1$i;
      continue L106;
     }
    } while(0);
    while(1) {
     $272 = ($k$4$i|0)==(0);
     if ($272) {
      $$0$i = $$03$i;
      break L46;
     }
     $273 = (($k$4$i) + -1)|0;
     $274 = (($n) + ($273)|0);
     $275 = HEAP8[$274>>0]|0;
     $276 = (($$03$i) + ($273)|0);
     $277 = HEAP8[$276>>0]|0;
     $278 = ($275<<24>>24)==($277<<24>>24);
     if ($278) {
      $k$4$i = $273;
     } else {
      break;
     }
    }
    $279 = (($$03$i) + ($p$3155$i)|0);
    $$03$i = $279;$z$0$i = $z$1$i;
   }
  }
 } while(0);
 $$0 = $$0$i;
 STACKTOP = sp;return ($$0|0);
}
function _strtok($s,$sep) {
 $s = $s|0;
 $sep = $sep|0;
 var $$0 = 0, $$01 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $1 = HEAP32[31176>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $$01 = $1;
  }
 } else {
  $$01 = $s;
 }
 $3 = (_strspn($$01,$sep)|0);
 $4 = (($$01) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  HEAP32[31176>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $7 = (_strcspn($4,$sep)|0);
 $$sum = (($7) + ($3))|0;
 $8 = (($$01) + ($$sum)|0);
 HEAP32[31176>>2] = $8;
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  HEAP32[31176>>2] = 0;
  $$0 = $4;
  return ($$0|0);
 } else {
  $$sum2 = (($$sum) + 1)|0;
  $11 = (($$01) + ($$sum2)|0);
  HEAP32[31176>>2] = $11;
  HEAP8[$8>>0] = 0;
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01$be$i = 0, $$01162 = 0, $$01162$phi = 0, $$012$i = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02$us$i = 0, $$02$us$i10 = 0, $$02964 = 0, $$03$i = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa76 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre6$i = 0, $$pre6$i6 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ar = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i9 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0, $i$0$lcssa50 = 0, $i$01$us$i = 0, $i$01$us$i8 = 0, $i$01063 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $pp$val1666 = 0, $sum = 0, $sum$i = 0, $tmp$i5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0;
 $tmp$i5 = sp + 456|0;
 $ar$i = sp;
 $ar = sp + 228|0;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)!=(1);
 $2 = ($pp$1$val|0)!=(0);
 $3 = $2 | $1;
 L1: do {
  if ($3) {
   $4 = (($lp) + ($pshift<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (0 - ($5))|0;
   $7 = (($head) + ($6)|0);
   $8 = (FUNCTION_TABLE_iii[$cmp & 7]($7,$head)|0);
   $9 = ($8|0)<(1);
   if ($9) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 18;
   } else {
    $$01162 = $head;$$02964 = $pshift;$$03865 = $trusty;$16 = $7;$33 = $pp$1$val;$i$01063 = 1;$pp$val1666 = $pp$val;
    while(1) {
     $10 = ($$03865|0)==(0);
     $11 = ($$02964|0)>(1);
     $or$cond = $10 & $11;
     if ($or$cond) {
      $12 = (($$01162) + ($0)|0);
      $13 = (($$02964) + -2)|0;
      $14 = (($lp) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      $17 = (FUNCTION_TABLE_iii[$cmp & 7]($12,$16)|0);
      $18 = ($17|0)>(-1);
      if ($18) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       break L1;
      }
      $sum = (($15) + ($width))|0;
      $$sum = (0 - ($sum))|0;
      $19 = (($$01162) + ($$sum)|0);
      $20 = (FUNCTION_TABLE_iii[$cmp & 7]($19,$16)|0);
      $21 = ($20|0)>(-1);
      if ($21) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       break L1;
      }
     }
     $22 = (($i$01063) + 1)|0;
     $23 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$23>>2] = $16;
     $24 = (($pp$val1666) + -1)|0;
     $25 = ($24|0)==(0);
     do {
      if ($25) {
       $46 = 32;
       label = 15;
      } else {
       $26 = $24 & 1;
       $27 = ($26|0)==(0);
       if ($27) {
        $$02$i$i = $24;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $28 = (($nTrailingZeros$03$i$i) + 1)|0;
         $29 = $$02$i$i >>> 1;
         $30 = $29 & 1;
         $31 = ($30|0)==(0);
         if ($31) {
          $$02$i$i = $29;$nTrailingZeros$03$i$i = $28;
         } else {
          $$lcssa = $28;
          break;
         }
        }
        $32 = ($$lcssa|0)==(0);
        if ($32) {
         label = 10;
        } else {
         $43 = $$lcssa;
        }
       } else {
        label = 10;
       }
       if ((label|0) == 10) {
        label = 0;
        $34 = ($33|0)==(0);
        if ($34) {
         $46 = 64;
         label = 15;
         break;
        }
        $35 = $33 & 1;
        $36 = ($35|0)==(0);
        if ($36) {
         $$02$i3$i = $33;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i = 0;$48 = $pp$val1666;$51 = $33;$55 = 0;
         break;
        }
        while(1) {
         $37 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $38 = $$02$i3$i >>> 1;
         $39 = $38 & 1;
         $40 = ($39|0)==(0);
         if ($40) {
          $$02$i3$i = $38;$nTrailingZeros$03$i2$i = $37;
         } else {
          $$lcssa76 = $37;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $41 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $42 = ($$lcssa76|0)==(0);
        if ($42) {
         $$0$i = 0;$48 = $pp$val1666;$51 = $33;$55 = 0;
         break;
        } else {
         $43 = $41;
        }
       }
       $44 = ($43>>>0)>(31);
       if ($44) {
        $46 = $43;
        label = 15;
       } else {
        $$0$i = $43;$48 = $pp$val1666;$51 = $33;$55 = $43;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $45 = (($46) + -32)|0;
      $$0$i = $45;$48 = $33;$51 = 0;$55 = $46;
     }
     $47 = $48 >>> $$0$i;
     $49 = (32 - ($$0$i))|0;
     $50 = $51 << $49;
     $52 = $50 | $47;
     $53 = $51 >>> $$0$i;
     $54 = (($55) + ($$02964))|0;
     $56 = ($52|0)!=(1);
     $57 = ($53|0)!=(0);
     $58 = $57 | $56;
     if (!($58)) {
      $$0$lcssa49 = $16;$$02$lcssa51 = $54;$i$0$lcssa50 = $22;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $59 = (($lp) + ($54<<2)|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = (0 - ($60))|0;
     $62 = (($16) + ($61)|0);
     $63 = (FUNCTION_TABLE_iii[$cmp & 7]($62,$$pre)|0);
     $64 = ($63|0)<(1);
     if ($64) {
      $$0$lcssa = $16;$$02$lcssa = $54;$$03$lcssa = 0;$i$0$lcssa = $22;
      label = 18;
      break;
     } else {
      $$01162$phi = $16;$$02964 = $54;$$03865 = 0;$16 = $62;$33 = $53;$i$01063 = $22;$pp$val1666 = $52;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  }
 } while(0);
 if ((label|0) == 18) {
  $65 = ($$03$lcssa|0)==(0);
  if ($65) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $66 = ($i$0$lcssa50|0)<(2);
 L30: do {
  if (!($66)) {
   $67 = (($ar) + ($i$0$lcssa50<<2)|0);
   HEAP32[$67>>2] = $tmp$i5;
   $68 = ($width|0)==(0);
   if (!($68)) {
    $$02$us$i10 = $width;$80 = $tmp$i5;
    while(1) {
     $78 = ($$02$us$i10>>>0)>(256);
     $70 = $78 ? 256 : $$02$us$i10;
     $79 = HEAP32[$ar>>2]|0;
     _memcpy(($80|0),($79|0),($70|0))|0;
     $76 = $79;$i$01$us$i8 = 0;
     while(1) {
      $72 = (($ar) + ($i$01$us$i8<<2)|0);
      $73 = (($i$01$us$i8) + 1)|0;
      $74 = (($ar) + ($73<<2)|0);
      $75 = HEAP32[$74>>2]|0;
      _memcpy(($76|0),($75|0),($70|0))|0;
      $77 = (($76) + ($70)|0);
      HEAP32[$72>>2] = $77;
      $exitcond$i9 = ($73|0)==($i$0$lcssa50|0);
      if ($exitcond$i9) {
       break;
      } else {
       $76 = $75;$i$01$us$i8 = $73;
      }
     }
     $69 = ($$02$us$i10|0)==($70|0);
     if ($69) {
      break L30;
     }
     $71 = (($$02$us$i10) - ($70))|0;
     $$pre6$i6 = HEAP32[$67>>2]|0;
     $$02$us$i10 = $71;$80 = $$pre6$i6;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa49;
 $81 = ($$02$lcssa51|0)>(1);
 L39: do {
  if ($81) {
   $$012$i = $$02$lcssa51;$$03$i = $$0$lcssa49;$87 = $$0$lcssa49;$i$04$i = 1;
   while(1) {
    $82 = (($$03$i) + ($0)|0);
    $83 = (($$012$i) + -2)|0;
    $84 = (($lp) + ($83<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $sum$i = (($85) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $86 = (($$03$i) + ($$sum$i)|0);
    $88 = (FUNCTION_TABLE_iii[$cmp & 7]($87,$86)|0);
    $89 = ($88|0)>(-1);
    if ($89) {
     $90 = (FUNCTION_TABLE_iii[$cmp & 7]($87,$82)|0);
     $91 = ($90|0)>(-1);
     if ($91) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $92 = (FUNCTION_TABLE_iii[$cmp & 7]($86,$82)|0);
    $93 = ($92|0)>(-1);
    $94 = (($i$04$i) + 1)|0;
    $95 = (($ar$i) + ($i$04$i<<2)|0);
    if ($93) {
     HEAP32[$95>>2] = $86;
     $96 = (($$012$i) + -1)|0;
     $$0$be$i = $86;$$01$be$i = $96;
    } else {
     HEAP32[$95>>2] = $82;
     $$0$be$i = $82;$$01$be$i = $83;
    }
    $97 = ($$01$be$i|0)>(1);
    if (!($97)) {
     $i$0$lcssa$i = $94;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$87 = $$pre$i;$i$04$i = $94;
   }
   $98 = ($i$0$lcssa$i|0)<(2);
   if ($98) {
    $113 = $tmp$i5;
   } else {
    $99 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$99>>2] = $tmp$i5;
    $100 = ($width|0)==(0);
    if ($100) {
     $113 = $tmp$i5;
    } else {
     $$02$us$i = $width;$112 = $tmp$i5;
     while(1) {
      $110 = ($$02$us$i>>>0)>(256);
      $102 = $110 ? 256 : $$02$us$i;
      $111 = HEAP32[$ar$i>>2]|0;
      _memcpy(($112|0),($111|0),($102|0))|0;
      $108 = $111;$i$01$us$i = 0;
      while(1) {
       $104 = (($ar$i) + ($i$01$us$i<<2)|0);
       $105 = (($i$01$us$i) + 1)|0;
       $106 = (($ar$i) + ($105<<2)|0);
       $107 = HEAP32[$106>>2]|0;
       _memcpy(($108|0),($107|0),($102|0))|0;
       $109 = (($108) + ($102)|0);
       HEAP32[$104>>2] = $109;
       $exitcond$i = ($105|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $108 = $107;$i$01$us$i = $105;
       }
      }
      $101 = ($$02$us$i|0)==($102|0);
      if ($101) {
       $113 = $tmp$i5;
       break L39;
      }
      $103 = (($$02$us$i) - ($102))|0;
      $$pre6$i = HEAP32[$99>>2]|0;
      $$02$us$i = $103;$112 = $$pre6$i;
     }
    }
   }
  } else {
   $113 = $tmp$i5;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _emscripten_GetProcAddress($name_) {
 $name_ = $name_|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $end = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp;
 $name = sp + 4|0;
 $end = sp + 8|0;
 HEAP32[$1>>2] = $name_;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strlen(($2|0))|0);
 $4 = (($3) + 1)|0;
 $5 = (_malloc($4)|0);
 HEAP32[$name>>2] = $5;
 $6 = HEAP32[$name>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 (_strcpy(($6|0),($7|0))|0);
 $8 = HEAP32[$name>>2]|0;
 $9 = (_strstr($8,31184)|0);
 HEAP32[$end>>2] = $9;
 $10 = HEAP32[$end>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = HEAP32[$end>>2]|0;
  HEAP8[$12>>0] = 0;
 }
 $13 = HEAP32[$name>>2]|0;
 $14 = (_strstr($13,31192)|0);
 HEAP32[$end>>2] = $14;
 $15 = HEAP32[$end>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = HEAP32[$end>>2]|0;
  HEAP8[$17>>0] = 0;
 }
 $18 = HEAP32[$name>>2]|0;
 $19 = (_strstr($18,31200)|0);
 HEAP32[$end>>2] = $19;
 $20 = HEAP32[$end>>2]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = HEAP32[$end>>2]|0;
  HEAP8[$22>>0] = 0;
 }
 $23 = HEAP32[$name>>2]|0;
 $24 = (_strstr($23,31208)|0);
 HEAP32[$end>>2] = $24;
 $25 = HEAP32[$end>>2]|0;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = HEAP32[$end>>2]|0;
  HEAP8[$27>>0] = 0;
 }
 $28 = HEAP32[$name>>2]|0;
 $29 = (_strcmp($28,31216)|0);
 $30 = ($29|0)!=(0);
 do {
  if ($30) {
   $31 = HEAP32[$name>>2]|0;
   $32 = (_strcmp($31,31256)|0);
   $33 = ($32|0)!=(0);
   if (!($33)) {
    HEAP32[$name>>2] = 31280;
    break;
   }
   $34 = HEAP32[$name>>2]|0;
   $35 = (_strcmp($34,31296)|0);
   $36 = ($35|0)!=(0);
   if (!($36)) {
    HEAP32[$name>>2] = 31320;
    break;
   }
   $37 = HEAP32[$name>>2]|0;
   $38 = (_strcmp($37,31336)|0);
   $39 = ($38|0)!=(0);
   if (!($39)) {
    HEAP32[$name>>2] = 31352;
    break;
   }
   $40 = HEAP32[$name>>2]|0;
   $41 = (_strcmp($40,31368)|0);
   $42 = ($41|0)!=(0);
   if (!($42)) {
    HEAP32[$name>>2] = 31384;
   }
  } else {
   HEAP32[$name>>2] = 31240;
  }
 } while(0);
 $43 = HEAP32[$name>>2]|0;
 $44 = (_strcmp($43,31400)|0);
 $45 = ($44|0)!=(0);
 do {
  if ($45) {
   $46 = HEAP32[$name>>2]|0;
   $47 = (_strcmp($46,31416)|0);
   $48 = ($47|0)!=(0);
   if (!($48)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $49 = HEAP32[$name>>2]|0;
   $50 = (_strcmp($49,31432)|0);
   $51 = ($50|0)!=(0);
   if (!($51)) {
    HEAP32[$0>>2] = 7;
    break;
   }
   $52 = HEAP32[$name>>2]|0;
   $53 = (_strcmp($52,31448)|0);
   $54 = ($53|0)!=(0);
   if (!($54)) {
    HEAP32[$0>>2] = 8;
    break;
   }
   $55 = HEAP32[$name>>2]|0;
   $56 = (_strcmp($55,31464)|0);
   $57 = ($56|0)!=(0);
   if (!($57)) {
    HEAP32[$0>>2] = 9;
    break;
   }
   $58 = HEAP32[$name>>2]|0;
   $59 = (_strcmp($58,31480)|0);
   $60 = ($59|0)!=(0);
   if (!($60)) {
    HEAP32[$0>>2] = 10;
    break;
   }
   $61 = HEAP32[$name>>2]|0;
   $62 = (_strcmp($61,31496)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    HEAP32[$0>>2] = 11;
    break;
   }
   $64 = HEAP32[$name>>2]|0;
   $65 = (_strcmp($64,31520)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $67 = HEAP32[$name>>2]|0;
   $68 = (_strcmp($67,31544)|0);
   $69 = ($68|0)!=(0);
   if (!($69)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $70 = HEAP32[$name>>2]|0;
   $71 = (_strcmp($70,31576)|0);
   $72 = ($71|0)!=(0);
   if (!($72)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $73 = HEAP32[$name>>2]|0;
   $74 = (_strcmp($73,31592)|0);
   $75 = ($74|0)!=(0);
   if (!($75)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $76 = HEAP32[$name>>2]|0;
   $77 = (_strcmp($76,31608)|0);
   $78 = ($77|0)!=(0);
   if (!($78)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $79 = HEAP32[$name>>2]|0;
   $80 = (_strcmp($79,31624)|0);
   $81 = ($80|0)!=(0);
   if (!($81)) {
    HEAP32[$0>>2] = 12;
    break;
   }
   $82 = HEAP32[$name>>2]|0;
   $83 = (_strcmp($82,31640)|0);
   $84 = ($83|0)!=(0);
   if (!($84)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $85 = HEAP32[$name>>2]|0;
   $86 = (_strcmp($85,31664)|0);
   $87 = ($86|0)!=(0);
   if (!($87)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $88 = HEAP32[$name>>2]|0;
   $89 = (_strcmp($88,31688)|0);
   $90 = ($89|0)!=(0);
   if (!($90)) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $91 = HEAP32[$name>>2]|0;
   $92 = (_strcmp($91,31712)|0);
   $93 = ($92|0)!=(0);
   if (!($93)) {
    HEAP32[$0>>2] = 6;
    break;
   }
   $94 = HEAP32[$name>>2]|0;
   $95 = (_strcmp($94,31736)|0);
   $96 = ($95|0)!=(0);
   if (!($96)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $97 = HEAP32[$name>>2]|0;
   $98 = (_strcmp($97,31752)|0);
   $99 = ($98|0)!=(0);
   if (!($99)) {
    HEAP32[$0>>2] = 13;
    break;
   }
   $100 = HEAP32[$name>>2]|0;
   $101 = (_strcmp($100,31768)|0);
   $102 = ($101|0)!=(0);
   if (!($102)) {
    HEAP32[$0>>2] = 14;
    break;
   }
   $103 = HEAP32[$name>>2]|0;
   $104 = (_strcmp($103,31784)|0);
   $105 = ($104|0)!=(0);
   if (!($105)) {
    HEAP32[$0>>2] = 7;
    break;
   }
   $106 = HEAP32[$name>>2]|0;
   $107 = (_strcmp($106,31808)|0);
   $108 = ($107|0)!=(0);
   if (!($108)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $109 = HEAP32[$name>>2]|0;
   $110 = (_strcmp($109,31824)|0);
   $111 = ($110|0)!=(0);
   if (!($111)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $112 = HEAP32[$name>>2]|0;
   $113 = (_strcmp($112,31840)|0);
   $114 = ($113|0)!=(0);
   if (!($114)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $115 = HEAP32[$name>>2]|0;
   $116 = (_strcmp($115,31856)|0);
   $117 = ($116|0)!=(0);
   if (!($117)) {
    HEAP32[$0>>2] = 15;
    break;
   }
   $118 = HEAP32[$name>>2]|0;
   $119 = (_strcmp($118,31880)|0);
   $120 = ($119|0)!=(0);
   if (!($120)) {
    HEAP32[$0>>2] = 16;
    break;
   }
   $121 = HEAP32[$name>>2]|0;
   $122 = (_strcmp($121,31904)|0);
   $123 = ($122|0)!=(0);
   if (!($123)) {
    HEAP32[$0>>2] = 17;
    break;
   }
   $124 = HEAP32[$name>>2]|0;
   $125 = (_strcmp($124,31928)|0);
   $126 = ($125|0)!=(0);
   if (!($126)) {
    HEAP32[$0>>2] = 8;
    break;
   }
   $127 = HEAP32[$name>>2]|0;
   $128 = (_strcmp($127,31960)|0);
   $129 = ($128|0)!=(0);
   if (!($129)) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $130 = HEAP32[$name>>2]|0;
   $131 = (_strcmp($130,31984)|0);
   $132 = ($131|0)!=(0);
   if (!($132)) {
    HEAP32[$0>>2] = 9;
    break;
   }
   $133 = HEAP32[$name>>2]|0;
   $134 = (_strcmp($133,32000)|0);
   $135 = ($134|0)!=(0);
   if (!($135)) {
    HEAP32[$0>>2] = 10;
    break;
   }
   $136 = HEAP32[$name>>2]|0;
   $137 = (_strcmp($136,32016)|0);
   $138 = ($137|0)!=(0);
   if (!($138)) {
    HEAP32[$0>>2] = 6;
    break;
   }
   $139 = HEAP32[$name>>2]|0;
   $140 = (_strcmp($139,32040)|0);
   $141 = ($140|0)!=(0);
   if (!($141)) {
    HEAP32[$0>>2] = 11;
    break;
   }
   $142 = HEAP32[$name>>2]|0;
   $143 = (_strcmp($142,32064)|0);
   $144 = ($143|0)!=(0);
   if (!($144)) {
    HEAP32[$0>>2] = 12;
    break;
   }
   $145 = HEAP32[$name>>2]|0;
   $146 = (_strcmp($145,32088)|0);
   $147 = ($146|0)!=(0);
   if (!($147)) {
    HEAP32[$0>>2] = 13;
    break;
   }
   $148 = HEAP32[$name>>2]|0;
   $149 = (_strcmp($148,32120)|0);
   $150 = ($149|0)!=(0);
   if (!($150)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $151 = HEAP32[$name>>2]|0;
   $152 = (_strcmp($151,32144)|0);
   $153 = ($152|0)!=(0);
   if (!($153)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $154 = HEAP32[$name>>2]|0;
   $155 = (_strcmp($154,32160)|0);
   $156 = ($155|0)!=(0);
   if (!($156)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $157 = HEAP32[$name>>2]|0;
   $158 = (_strcmp($157,32176)|0);
   $159 = ($158|0)!=(0);
   if (!($159)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $160 = HEAP32[$name>>2]|0;
   $161 = (_strcmp($160,32192)|0);
   $162 = ($161|0)!=(0);
   if (!($162)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $163 = HEAP32[$name>>2]|0;
   $164 = (_strcmp($163,32208)|0);
   $165 = ($164|0)!=(0);
   if (!($165)) {
    HEAP32[$0>>2] = 18;
    break;
   }
   $166 = HEAP32[$name>>2]|0;
   $167 = (_strcmp($166,32224)|0);
   $168 = ($167|0)!=(0);
   if (!($168)) {
    HEAP32[$0>>2] = 14;
    break;
   }
   $169 = HEAP32[$name>>2]|0;
   $170 = (_strcmp($169,32240)|0);
   $171 = ($170|0)!=(0);
   if (!($171)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $172 = HEAP32[$name>>2]|0;
   $173 = (_strcmp($172,32256)|0);
   $174 = ($173|0)!=(0);
   if (!($174)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $175 = HEAP32[$name>>2]|0;
   $176 = (_strcmp($175,32272)|0);
   $177 = ($176|0)!=(0);
   if (!($177)) {
    HEAP32[$0>>2] = 15;
    break;
   }
   $178 = HEAP32[$name>>2]|0;
   $179 = (_strcmp($178,32288)|0);
   $180 = ($179|0)!=(0);
   if (!($180)) {
    HEAP32[$0>>2] = 16;
    break;
   }
   $181 = HEAP32[$name>>2]|0;
   $182 = (_strcmp($181,32304)|0);
   $183 = ($182|0)!=(0);
   if (!($183)) {
    HEAP32[$0>>2] = 17;
    break;
   }
   $184 = HEAP32[$name>>2]|0;
   $185 = (_strcmp($184,32320)|0);
   $186 = ($185|0)!=(0);
   if (!($186)) {
    HEAP32[$0>>2] = 18;
    break;
   }
   $187 = HEAP32[$name>>2]|0;
   $188 = (_strcmp($187,32336)|0);
   $189 = ($188|0)!=(0);
   if (!($189)) {
    HEAP32[$0>>2] = 19;
    break;
   }
   $190 = HEAP32[$name>>2]|0;
   $191 = (_strcmp($190,32352)|0);
   $192 = ($191|0)!=(0);
   if (!($192)) {
    HEAP32[$0>>2] = 20;
    break;
   }
   $193 = HEAP32[$name>>2]|0;
   $194 = (_strcmp($193,32368)|0);
   $195 = ($194|0)!=(0);
   if (!($195)) {
    HEAP32[$0>>2] = 21;
    break;
   }
   $196 = HEAP32[$name>>2]|0;
   $197 = (_strcmp($196,32384)|0);
   $198 = ($197|0)!=(0);
   if (!($198)) {
    HEAP32[$0>>2] = 22;
    break;
   }
   $199 = HEAP32[$name>>2]|0;
   $200 = (_strcmp($199,32400)|0);
   $201 = ($200|0)!=(0);
   if (!($201)) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $202 = HEAP32[$name>>2]|0;
   $203 = (_strcmp($202,32424)|0);
   $204 = ($203|0)!=(0);
   if (!($204)) {
    HEAP32[$0>>2] = 6;
    break;
   }
   $205 = HEAP32[$name>>2]|0;
   $206 = (_strcmp($205,32448)|0);
   $207 = ($206|0)!=(0);
   if (!($207)) {
    HEAP32[$0>>2] = 7;
    break;
   }
   $208 = HEAP32[$name>>2]|0;
   $209 = (_strcmp($208,32472)|0);
   $210 = ($209|0)!=(0);
   if (!($210)) {
    HEAP32[$0>>2] = 19;
    break;
   }
   $211 = HEAP32[$name>>2]|0;
   $212 = (_strcmp($211,32488)|0);
   $213 = ($212|0)!=(0);
   if (!($213)) {
    HEAP32[$0>>2] = 20;
    break;
   }
   $214 = HEAP32[$name>>2]|0;
   $215 = (_strcmp($214,32512)|0);
   $216 = ($215|0)!=(0);
   if (!($216)) {
    HEAP32[$0>>2] = 21;
    break;
   }
   $217 = HEAP32[$name>>2]|0;
   $218 = (_strcmp($217,32536)|0);
   $219 = ($218|0)!=(0);
   if (!($219)) {
    HEAP32[$0>>2] = 22;
    break;
   }
   $220 = HEAP32[$name>>2]|0;
   $221 = (_strcmp($220,32560)|0);
   $222 = ($221|0)!=(0);
   if (!($222)) {
    HEAP32[$0>>2] = 23;
    break;
   }
   $223 = HEAP32[$name>>2]|0;
   $224 = (_strcmp($223,32584)|0);
   $225 = ($224|0)!=(0);
   if (!($225)) {
    HEAP32[$0>>2] = 7;
    break;
   }
   $226 = HEAP32[$name>>2]|0;
   $227 = (_strcmp($226,32608)|0);
   $228 = ($227|0)!=(0);
   if (!($228)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $229 = HEAP32[$name>>2]|0;
   $230 = (_strcmp($229,31320)|0);
   $231 = ($230|0)!=(0);
   if (!($231)) {
    HEAP32[$0>>2] = 6;
    break;
   }
   $232 = HEAP32[$name>>2]|0;
   $233 = (_strcmp($232,32632)|0);
   $234 = ($233|0)!=(0);
   if (!($234)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $235 = HEAP32[$name>>2]|0;
   $236 = (_strcmp($235,32648)|0);
   $237 = ($236|0)!=(0);
   if (!($237)) {
    HEAP32[$0>>2] = 8;
    break;
   }
   $238 = HEAP32[$name>>2]|0;
   $239 = (_strcmp($238,32672)|0);
   $240 = ($239|0)!=(0);
   if (!($240)) {
    HEAP32[$0>>2] = 9;
    break;
   }
   $241 = HEAP32[$name>>2]|0;
   $242 = (_strcmp($241,32688)|0);
   $243 = ($242|0)!=(0);
   if (!($243)) {
    HEAP32[$0>>2] = 10;
    break;
   }
   $244 = HEAP32[$name>>2]|0;
   $245 = (_strcmp($244,32712)|0);
   $246 = ($245|0)!=(0);
   if (!($246)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $247 = HEAP32[$name>>2]|0;
   $248 = (_strcmp($247,32728)|0);
   $249 = ($248|0)!=(0);
   if (!($249)) {
    HEAP32[$0>>2] = 11;
    break;
   }
   $250 = HEAP32[$name>>2]|0;
   $251 = (_strcmp($250,32752)|0);
   $252 = ($251|0)!=(0);
   if (!($252)) {
    HEAP32[$0>>2] = 23;
    break;
   }
   $253 = HEAP32[$name>>2]|0;
   $254 = (_strcmp($253,32768)|0);
   $255 = ($254|0)!=(0);
   if (!($255)) {
    HEAP32[$0>>2] = 24;
    break;
   }
   $256 = HEAP32[$name>>2]|0;
   $257 = (_strcmp($256,32784)|0);
   $258 = ($257|0)!=(0);
   if (!($258)) {
    HEAP32[$0>>2] = 7;
    break;
   }
   $259 = HEAP32[$name>>2]|0;
   $260 = (_strcmp($259,31240)|0);
   $261 = ($260|0)!=(0);
   if (!($261)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $262 = HEAP32[$name>>2]|0;
   $263 = (_strcmp($262,32800)|0);
   $264 = ($263|0)!=(0);
   if (!($264)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $265 = HEAP32[$name>>2]|0;
   $266 = (_strcmp($265,31352)|0);
   $267 = ($266|0)!=(0);
   if (!($267)) {
    HEAP32[$0>>2] = 24;
    break;
   }
   $268 = HEAP32[$name>>2]|0;
   $269 = (_strcmp($268,31384)|0);
   $270 = ($269|0)!=(0);
   if (!($270)) {
    HEAP32[$0>>2] = 25;
    break;
   }
   $271 = HEAP32[$name>>2]|0;
   $272 = (_strcmp($271,32816)|0);
   $273 = ($272|0)!=(0);
   if (!($273)) {
    HEAP32[$0>>2] = 12;
    break;
   }
   $274 = HEAP32[$name>>2]|0;
   $275 = (_strcmp($274,32848)|0);
   $276 = ($275|0)!=(0);
   if (!($276)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $277 = HEAP32[$name>>2]|0;
   $278 = (_strcmp($277,32864)|0);
   $279 = ($278|0)!=(0);
   if (!($279)) {
    HEAP32[$0>>2] = 13;
    break;
   }
   $280 = HEAP32[$name>>2]|0;
   $281 = (_strcmp($280,31280)|0);
   $282 = ($281|0)!=(0);
   if (!($282)) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $283 = HEAP32[$name>>2]|0;
   $284 = (_strcmp($283,32888)|0);
   $285 = ($284|0)!=(0);
   if (!($285)) {
    HEAP32[$0>>2] = 6;
    break;
   }
   $286 = HEAP32[$name>>2]|0;
   $287 = (_strcmp($286,32912)|0);
   $288 = ($287|0)!=(0);
   if (!($288)) {
    HEAP32[$0>>2] = 8;
    break;
   }
   $289 = HEAP32[$name>>2]|0;
   $290 = (_strcmp($289,32928)|0);
   $291 = ($290|0)!=(0);
   if (!($291)) {
    HEAP32[$0>>2] = 25;
    break;
   }
   $292 = HEAP32[$name>>2]|0;
   $293 = (_strcmp($292,32952)|0);
   $294 = ($293|0)!=(0);
   if (!($294)) {
    HEAP32[$0>>2] = 26;
    break;
   }
   $295 = HEAP32[$name>>2]|0;
   $296 = (_strcmp($295,32976)|0);
   $297 = ($296|0)!=(0);
   if (!($297)) {
    HEAP32[$0>>2] = 27;
    break;
   }
   $298 = HEAP32[$name>>2]|0;
   $299 = (_strcmp($298,33000)|0);
   $300 = ($299|0)!=(0);
   if (!($300)) {
    HEAP32[$0>>2] = 28;
    break;
   }
   $301 = HEAP32[$name>>2]|0;
   $302 = (_strcmp($301,33024)|0);
   $303 = ($302|0)!=(0);
   if (!($303)) {
    HEAP32[$0>>2] = 14;
    break;
   }
   $304 = HEAP32[$name>>2]|0;
   $305 = (_strcmp($304,33056)|0);
   $306 = ($305|0)!=(0);
   if (!($306)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $307 = HEAP32[$name>>2]|0;
   $308 = (_strcmp($307,33080)|0);
   $309 = ($308|0)!=(0);
   if (!($309)) {
    HEAP32[$0>>2] = 15;
    break;
   }
   $310 = HEAP32[$name>>2]|0;
   $311 = (_strcmp($310,33120)|0);
   $312 = ($311|0)!=(0);
   if (!($312)) {
    HEAP32[$0>>2] = 9;
    break;
   }
   $313 = HEAP32[$name>>2]|0;
   $314 = (_strcmp($313,33136)|0);
   $315 = ($314|0)!=(0);
   if (!($315)) {
    HEAP32[$0>>2] = 7;
    break;
   }
   $316 = HEAP32[$name>>2]|0;
   $317 = (_strcmp($316,33152)|0);
   $318 = ($317|0)!=(0);
   if (!($318)) {
    HEAP32[$0>>2] = 26;
    break;
   }
   $319 = HEAP32[$name>>2]|0;
   $320 = (_strcmp($319,33176)|0);
   $321 = ($320|0)!=(0);
   if (!($321)) {
    HEAP32[$0>>2] = 16;
    break;
   }
   $322 = HEAP32[$name>>2]|0;
   $323 = (_strcmp($322,33192)|0);
   $324 = ($323|0)!=(0);
   if (!($324)) {
    HEAP32[$0>>2] = 29;
    break;
   }
   $325 = HEAP32[$name>>2]|0;
   $326 = (_strcmp($325,33208)|0);
   $327 = ($326|0)!=(0);
   if (!($327)) {
    HEAP32[$0>>2] = 30;
    break;
   }
   $328 = HEAP32[$name>>2]|0;
   $329 = (_strcmp($328,33224)|0);
   $330 = ($329|0)!=(0);
   if (!($330)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $331 = HEAP32[$name>>2]|0;
   $332 = (_strcmp($331,33248)|0);
   $333 = ($332|0)!=(0);
   if (!($333)) {
    HEAP32[$0>>2] = 8;
    break;
   }
   $334 = HEAP32[$name>>2]|0;
   $335 = (_strcmp($334,33272)|0);
   $336 = ($335|0)!=(0);
   if (!($336)) {
    HEAP32[$0>>2] = 17;
    break;
   }
   $337 = HEAP32[$name>>2]|0;
   $338 = (_strcmp($337,33288)|0);
   $339 = ($338|0)!=(0);
   if (!($339)) {
    HEAP32[$0>>2] = 18;
    break;
   }
   $340 = HEAP32[$name>>2]|0;
   $341 = (_strcmp($340,33312)|0);
   $342 = ($341|0)!=(0);
   if (!($342)) {
    HEAP32[$0>>2] = 27;
    break;
   }
   $343 = HEAP32[$name>>2]|0;
   $344 = (_strcmp($343,33328)|0);
   $345 = ($344|0)!=(0);
   if (!($345)) {
    HEAP32[$0>>2] = 19;
    break;
   }
   $346 = HEAP32[$name>>2]|0;
   $347 = (_strcmp($346,33344)|0);
   $348 = ($347|0)!=(0);
   if (!($348)) {
    HEAP32[$0>>2] = 9;
    break;
   }
   $349 = HEAP32[$name>>2]|0;
   $350 = (_strcmp($349,33368)|0);
   $351 = ($350|0)!=(0);
   if (!($351)) {
    HEAP32[$0>>2] = 31;
    break;
   }
   $352 = HEAP32[$name>>2]|0;
   $353 = (_strcmp($352,33392)|0);
   $354 = ($353|0)!=(0);
   if (!($354)) {
    HEAP32[$0>>2] = 32;
    break;
   }
   $355 = HEAP32[$name>>2]|0;
   $356 = (_strcmp($355,33416)|0);
   $357 = ($356|0)!=(0);
   if (!($357)) {
    HEAP32[$0>>2] = 10;
    break;
   }
   $358 = HEAP32[$name>>2]|0;
   $359 = (_strcmp($358,33440)|0);
   $360 = ($359|0)!=(0);
   if (!($360)) {
    HEAP32[$0>>2] = 11;
    break;
   }
   $361 = HEAP32[$name>>2]|0;
   $362 = (_strcmp($361,33456)|0);
   $363 = ($362|0)!=(0);
   if (!($363)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $364 = HEAP32[$name>>2]|0;
   $365 = (_strcmp($364,33472)|0);
   $366 = ($365|0)!=(0);
   if (!($366)) {
    HEAP32[$0>>2] = 12;
    break;
   }
   $367 = HEAP32[$name>>2]|0;
   $368 = (_strcmp($367,33488)|0);
   $369 = ($368|0)!=(0);
   if (!($369)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $370 = HEAP32[$name>>2]|0;
   $371 = (_strcmp($370,33504)|0);
   $372 = ($371|0)!=(0);
   if (!($372)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $373 = HEAP32[$name>>2]|0;
   $374 = (_strcmp($373,33520)|0);
   $375 = ($374|0)!=(0);
   if (!($375)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $376 = HEAP32[$name>>2]|0;
   $377 = (_strcmp($376,33544)|0);
   $378 = ($377|0)!=(0);
   if (!($378)) {
    HEAP32[$0>>2] = 13;
    break;
   }
   $379 = HEAP32[$name>>2]|0;
   $380 = (_strcmp($379,33576)|0);
   $381 = ($380|0)!=(0);
   if (!($381)) {
    HEAP32[$0>>2] = 14;
    break;
   }
   $382 = HEAP32[$name>>2]|0;
   $383 = (_strcmp($382,33608)|0);
   $384 = ($383|0)!=(0);
   if (!($384)) {
    HEAP32[$0>>2] = 28;
    break;
   }
   $385 = HEAP32[$name>>2]|0;
   $386 = (_strcmp($385,33624)|0);
   $387 = ($386|0)!=(0);
   if (!($387)) {
    HEAP32[$0>>2] = 20;
    break;
   }
   $388 = HEAP32[$name>>2]|0;
   $389 = (_strcmp($388,33640)|0);
   $390 = ($389|0)!=(0);
   if (!($390)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $391 = HEAP32[$name>>2]|0;
   $392 = (_strcmp($391,33656)|0);
   $393 = ($392|0)!=(0);
   if (!($393)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $394 = HEAP32[$name>>2]|0;
   $395 = (_strcmp($394,33680)|0);
   $396 = ($395|0)!=(0);
   if (!($396)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $397 = HEAP32[$name>>2]|0;
   $398 = (_strcmp($397,33696)|0);
   $399 = ($398|0)!=(0);
   if (!($399)) {
    HEAP32[$0>>2] = 33;
    break;
   }
   $400 = HEAP32[$name>>2]|0;
   $401 = (_strcmp($400,33720)|0);
   $402 = ($401|0)!=(0);
   if (!($402)) {
    HEAP32[$0>>2] = 21;
    break;
   }
   $403 = HEAP32[$name>>2]|0;
   $404 = (_strcmp($403,33744)|0);
   $405 = ($404|0)!=(0);
   if (!($405)) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $406 = HEAP32[$name>>2]|0;
   $407 = (_strcmp($406,33768)|0);
   $408 = ($407|0)!=(0);
   if (!($408)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $409 = HEAP32[$name>>2]|0;
   $410 = (_strcmp($409,33784)|0);
   $411 = ($410|0)!=(0);
   if (!($411)) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $412 = HEAP32[$name>>2]|0;
   $413 = (_strcmp($412,33792)|0);
   $414 = ($413|0)!=(0);
   if (!($414)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $415 = HEAP32[$name>>2]|0;
   $416 = (_strcmp($415,33808)|0);
   $417 = ($416|0)!=(0);
   if (!($417)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $418 = HEAP32[$name>>2]|0;
   $419 = (_strcmp($418,33824)|0);
   $420 = ($419|0)!=(0);
   if (!($420)) {
    HEAP32[$0>>2] = 15;
    break;
   }
   $421 = HEAP32[$name>>2]|0;
   $422 = (_strcmp($421,33840)|0);
   $423 = ($422|0)!=(0);
   if (!($423)) {
    HEAP32[$0>>2] = 16;
    break;
   }
   $424 = HEAP32[$name>>2]|0;
   $425 = (_strcmp($424,33856)|0);
   $426 = ($425|0)!=(0);
   if (!($426)) {
    HEAP32[$0>>2] = 17;
    break;
   }
   $427 = HEAP32[$name>>2]|0;
   $428 = (_strcmp($427,33872)|0);
   $429 = ($428|0)!=(0);
   if (!($429)) {
    HEAP32[$0>>2] = 18;
    break;
   }
   $430 = HEAP32[$name>>2]|0;
   $431 = (_strcmp($430,33888)|0);
   $432 = ($431|0)!=(0);
   if (!($432)) {
    HEAP32[$0>>2] = 19;
    break;
   }
   $433 = HEAP32[$name>>2]|0;
   $434 = (_strcmp($433,33904)|0);
   $435 = ($434|0)!=(0);
   if (!($435)) {
    HEAP32[$0>>2] = 20;
    break;
   }
   $436 = HEAP32[$name>>2]|0;
   $437 = (_strcmp($436,33912)|0);
   $438 = ($437|0)!=(0);
   if (!($438)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $439 = HEAP32[$name>>2]|0;
   $440 = (_strcmp($439,33928)|0);
   $441 = ($440|0)!=(0);
   if (!($441)) {
    HEAP32[$0>>2] = 21;
    break;
   }
   $442 = HEAP32[$name>>2]|0;
   $443 = (_strcmp($442,33944)|0);
   $444 = ($443|0)!=(0);
   if (!($444)) {
    HEAP32[$0>>2] = 22;
    break;
   }
   $445 = HEAP32[$name>>2]|0;
   $446 = (_strcmp($445,33960)|0);
   $447 = ($446|0)!=(0);
   if (!($447)) {
    HEAP32[$0>>2] = 23;
    break;
   }
   $448 = HEAP32[$name>>2]|0;
   $449 = (_strcmp($448,33976)|0);
   $450 = ($449|0)!=(0);
   if (!($450)) {
    HEAP32[$0>>2] = 10;
    break;
   }
   $451 = HEAP32[$name>>2]|0;
   $452 = (_strcmp($451,34008)|0);
   $453 = ($452|0)!=(0);
   if (!($453)) {
    HEAP32[$0>>2] = 24;
    break;
   }
   $454 = HEAP32[$name>>2]|0;
   $455 = (_strcmp($454,34032)|0);
   $456 = ($455|0)!=(0);
   if (!($456)) {
    HEAP32[$0>>2] = 25;
    break;
   }
   $457 = HEAP32[$name>>2]|0;
   $458 = (_strcmp($457,34048)|0);
   $459 = ($458|0)!=(0);
   if (!($459)) {
    HEAP32[$0>>2] = 26;
    break;
   }
   $460 = HEAP32[$name>>2]|0;
   $461 = (_strcmp($460,34064)|0);
   $462 = ($461|0)!=(0);
   if (!($462)) {
    HEAP32[$0>>2] = 11;
    break;
   }
   $463 = HEAP32[$name>>2]|0;
   $464 = (_strcmp($463,34080)|0);
   $465 = ($464|0)!=(0);
   if (!($465)) {
    HEAP32[$0>>2] = 34;
    break;
   }
   $466 = HEAP32[$name>>2]|0;
   $467 = (_strcmp($466,34096)|0);
   $468 = ($467|0)!=(0);
   if (!($468)) {
    HEAP32[$0>>2] = 35;
    break;
   }
   $469 = HEAP32[$name>>2]|0;
   $470 = (_strcmp($469,34120)|0);
   $471 = ($470|0)!=(0);
   if (!($471)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $472 = HEAP32[$name>>2]|0;
   $473 = (_strcmp($472,34136)|0);
   $474 = ($473|0)!=(0);
   if (!($474)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $475 = HEAP32[$name>>2]|0;
   $476 = (_strcmp($475,34152)|0);
   $477 = ($476|0)!=(0);
   if (!($477)) {
    HEAP32[$0>>2] = 36;
    break;
   }
   $478 = HEAP32[$name>>2]|0;
   $479 = (_strcmp($478,34176)|0);
   $480 = ($479|0)!=(0);
   if (!($480)) {
    HEAP32[$0>>2] = 37;
    break;
   }
   $481 = HEAP32[$name>>2]|0;
   $482 = (_strcmp($481,34184)|0);
   $483 = ($482|0)!=(0);
   if (!($483)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $484 = HEAP32[$name>>2]|0;
   $485 = (_strcmp($484,34200)|0);
   $486 = ($485|0)!=(0);
   if (!($486)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $487 = HEAP32[$name>>2]|0;
   $488 = (_strcmp($487,34224)|0);
   $489 = ($488|0)!=(0);
   if (!($489)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $490 = HEAP32[$name>>2]|0;
   $491 = (_strcmp($490,34248)|0);
   $492 = ($491|0)!=(0);
   if (!($492)) {
    HEAP32[$0>>2] = 29;
    break;
   }
   $493 = HEAP32[$name>>2]|0;
   $494 = (_strcmp($493,34264)|0);
   $495 = ($494|0)!=(0);
   if (!($495)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $496 = HEAP32[$name>>2]|0;
   $497 = (_strcmp($496,34280)|0);
   $498 = ($497|0)!=(0);
   if (!($498)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $499 = HEAP32[$name>>2]|0;
   $500 = (_strcmp($499,34304)|0);
   $501 = ($500|0)!=(0);
   if (!($501)) {
    HEAP32[$0>>2] = 30;
    break;
   }
   $502 = HEAP32[$name>>2]|0;
   $503 = (_strcmp($502,34320)|0);
   $504 = ($503|0)!=(0);
   if (!($504)) {
    HEAP32[$0>>2] = 31;
    break;
   }
   $505 = HEAP32[$name>>2]|0;
   $506 = (_strcmp($505,34336)|0);
   $507 = ($506|0)!=(0);
   if (!($507)) {
    HEAP32[$0>>2] = 22;
    break;
   }
   $508 = HEAP32[$name>>2]|0;
   $509 = (_strcmp($508,34352)|0);
   $510 = ($509|0)!=(0);
   if (!($510)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $511 = HEAP32[$name>>2]|0;
   $512 = (_strcmp($511,34368)|0);
   $513 = ($512|0)!=(0);
   if (!($513)) {
    HEAP32[$0>>2] = 23;
    break;
   }
   $514 = HEAP32[$name>>2]|0;
   $515 = (_strcmp($514,34384)|0);
   $516 = ($515|0)!=(0);
   if (!($516)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $517 = HEAP32[$name>>2]|0;
   $518 = (_strcmp($517,34408)|0);
   $519 = ($518|0)!=(0);
   if (!($519)) {
    HEAP32[$0>>2] = 24;
    break;
   }
   $520 = HEAP32[$name>>2]|0;
   $521 = (_strcmp($520,34424)|0);
   $522 = ($521|0)!=(0);
   if (!($522)) {
    HEAP32[$0>>2] = 25;
    break;
   }
   $523 = HEAP32[$name>>2]|0;
   $524 = (_strcmp($523,34448)|0);
   $525 = ($524|0)!=(0);
   if (!($525)) {
    HEAP32[$0>>2] = 26;
    break;
   }
   $526 = HEAP32[$name>>2]|0;
   $527 = (_strcmp($526,34472)|0);
   $528 = ($527|0)!=(0);
   if (!($528)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $529 = HEAP32[$name>>2]|0;
   $530 = (_strcmp($529,34488)|0);
   $531 = ($530|0)!=(0);
   if (!($531)) {
    HEAP32[$0>>2] = 27;
    break;
   }
   $532 = HEAP32[$name>>2]|0;
   $533 = (_strcmp($532,34512)|0);
   $534 = ($533|0)!=(0);
   if (!($534)) {
    HEAP32[$0>>2] = 28;
    break;
   }
   $535 = HEAP32[$name>>2]|0;
   $536 = (_strcmp($535,34536)|0);
   $537 = ($536|0)!=(0);
   if (!($537)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $538 = HEAP32[$name>>2]|0;
   $539 = (_strcmp($538,34560)|0);
   $540 = ($539|0)!=(0);
   if (!($540)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $541 = HEAP32[$name>>2]|0;
   $542 = (_strcmp($541,34584)|0);
   $543 = ($542|0)!=(0);
   if (!($543)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $544 = HEAP32[$name>>2]|0;
   $545 = (_strcmp($544,34608)|0);
   $546 = ($545|0)!=(0);
   if ($546) {
    $547 = HEAP32[$1>>2]|0;
    $548 = HEAP32[$name>>2]|0;
    $549 = _emscripten_asm_const_2(0, ($547|0), ($548|0))|0;
    HEAP32[$0>>2] = 0;
    break;
   } else {
    HEAP32[$0>>2] = 38;
    break;
   }
  } else {
   HEAP32[$0>>2] = 6;
  }
 } while(0);
 $550 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($550|0);
}
function _roundf($x) {
 $x = +$x;
 var $$0 = 0.0, $$x = 0.0, $$y$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, $__x = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__x = sp;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = $0 >>> 23;
 $2 = $1 & 255;
 $3 = ($2>>>0)>(149);
 if ($3) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 }
 $4 = ($0|0)<(0);
 $5 = -$x;
 $$x = $4 ? $5 : $x;
 $6 = ($2>>>0)<(126);
 $7 = $$x + 8388608.0;
 if ($6) {
  HEAPF32[$__x>>2] = $7;
  $8 = $x * 0.0;
  $$0 = $8;
  STACKTOP = sp;return (+$$0);
 }
 $9 = $7 + -8388608.0;
 $10 = $9 - $$x;
 $11 = $10 > 0.5;
 if ($11) {
  $12 = $$x + $10;
  $13 = $12 + -1.0;
  $y$0 = $13;
 } else {
  $14 = !($10 <= -0.5);
  $15 = $$x + $10;
  if ($14) {
   $y$0 = $15;
  } else {
   $16 = $15 + 1.0;
   $y$0 = $16;
  }
 }
 $17 = -$y$0;
 $$y$0 = $4 ? $17 : $y$0;
 $$0 = $$y$0;
 STACKTOP = sp;return (+$$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 34728;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 return;
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 } else {
  $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 }
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa19 = $2;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = ((($l$04)) + 1|0);
  $6 = ((($r$05)) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   $11 = 0;
   label = 5;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  return ($11|0);
 }
 $8 = $$lcssa&255;
 $9 = $$lcssa19&255;
 $10 = (($8) - ($9))|0;
 $11 = $10;
 return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $13 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $4 = ($3<<24>>24)!=(0);
    $5 = ($$08|0)!=(0);
    $or$cond = $5 & $4;
    $7 = ($6<<24>>24)==($3<<24>>24);
    $or$cond4 = $7 & $or$cond;
    if (!($or$cond4)) {
     $13 = $6;$r$0$lcssa = $r$07;
     break L4;
    }
    $8 = ((($l$06)) + 1|0);
    $9 = ((($r$07)) + 1|0);
    $10 = HEAP8[$8>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $13 = 0;$r$0$lcssa = $9;
     break;
    } else {
     $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
    }
   }
  }
 } while(0);
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$03 = $16;
 return ($$03|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[34736>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (34776 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (34776 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[34736>>2] = $22;
     } else {
      $23 = HEAP32[(34752)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(34744)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (34776 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (34776 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[34736>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(34752)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(34744)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(34756)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (34776 + ($92<<2)|0);
      $94 = HEAP32[34736>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[34736>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (34776 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (34776 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(34752)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(34744)>>2] = $81;
     HEAP32[(34756)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(34740)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (35040 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(34752)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (35040 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(34740)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(34740)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(34752)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(34752)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(34752)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(34744)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(34756)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (34776 + ($229<<2)|0);
       $231 = HEAP32[34736>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[34736>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (34776 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (34776 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(34752)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(34744)>>2] = $rsize$0$i$lcssa;
      HEAP32[(34756)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(34740)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (35040 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (35040 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(34744)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(34752)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (35040 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(34740)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(34740)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(34752)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(34752)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(34752)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (34776 + ($424<<2)|0);
          $426 = HEAP32[34736>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[34736>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (34776 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (34776 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(34752)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (35040 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(34740)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(34740)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(34752)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(34752)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(34744)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(34756)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(34756)>>2] = $514;
   HEAP32[(34744)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(34744)>>2] = 0;
   HEAP32[(34756)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(34748)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(34748)>>2] = $528;
  $529 = HEAP32[(34760)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(34760)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[35208>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(35216)>>2] = $538;
    HEAP32[(35212)>>2] = $538;
    HEAP32[(35220)>>2] = -1;
    HEAP32[(35224)>>2] = -1;
    HEAP32[(35228)>>2] = 0;
    HEAP32[(35180)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[35208>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(35216)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(35176)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(35168)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(35180)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(34760)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (35184);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(34748)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(35212)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(35168)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(35176)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(35216)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(35180)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(35180)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(35168)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(35168)>>2] = $632;
  $633 = HEAP32[(35172)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(35172)>>2] = $632;
  }
  $635 = HEAP32[(34760)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(34752)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(34752)>>2] = $tbase$255$i;
    }
    HEAP32[(35184)>>2] = $tbase$255$i;
    HEAP32[(35188)>>2] = $tsize$254$i;
    HEAP32[(35196)>>2] = 0;
    $640 = HEAP32[35208>>2]|0;
    HEAP32[(34772)>>2] = $640;
    HEAP32[(34768)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (34776 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (34776 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (34776 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(34760)>>2] = $654;
    HEAP32[(34748)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(35224)>>2]|0;
    HEAP32[(34764)>>2] = $659;
   } else {
    $sp$084$i = (35184);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(34748)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(34760)>>2] = $684;
       HEAP32[(34748)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(35224)>>2]|0;
       HEAP32[(34764)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(34752)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(34752)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (35184);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (35184);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L317: do {
       if ($728) {
        $729 = HEAP32[(34748)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(34748)>>2] = $730;
        HEAP32[(34760)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(34756)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(34744)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(34744)>>2] = $736;
         HEAP32[(34756)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L325: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (34776 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[34736>>2]|0;
            $763 = $762 & $761;
            HEAP32[34736>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (35040 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(34740)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(34740)>>2] = $806;
             break L325;
            } else {
             $807 = HEAP32[(34752)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L325;
             }
            }
           } while(0);
           $814 = HEAP32[(34752)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(34752)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (34776 + ($840<<2)|0);
         $842 = HEAP32[34736>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[34736>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (34776 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (34776 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(34752)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (35040 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(34740)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(34740)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L411: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L411;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(34752)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L317;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(34752)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (35184);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(34760)>>2] = $953;
    HEAP32[(34748)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(35224)>>2]|0;
    HEAP32[(34764)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(35184)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(35184)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(35184)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(35184)+12>>2]|0;
    HEAP32[(35184)>>2] = $tbase$255$i;
    HEAP32[(35188)>>2] = $tsize$254$i;
    HEAP32[(35196)>>2] = 0;
    HEAP32[(35192)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (34776 + ($977<<2)|0);
      $979 = HEAP32[34736>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[34736>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (34776 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (34776 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(34752)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (35040 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(34740)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(34740)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L452: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L452;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(34752)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(34752)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(34748)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(34748)>>2] = $1062;
   $1063 = HEAP32[(34760)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(34760)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(34752)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(34756)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(34744)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (34776 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[34736>>2]|0;
     $36 = $35 & $34;
     HEAP32[34736>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (35040 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(34740)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(34740)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(34752)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(34752)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(34752)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(34760)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(34748)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(34748)>>2] = $120;
   HEAP32[(34760)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(34756)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(34756)>>2] = 0;
   HEAP32[(34744)>>2] = 0;
   return;
  }
  $125 = HEAP32[(34756)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(34744)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(34744)>>2] = $128;
   HEAP32[(34756)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (34776 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(34752)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[34736>>2]|0;
     $152 = $151 & $150;
     HEAP32[34736>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(34752)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(34752)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(34752)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (35040 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(34740)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(34740)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(34752)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(34752)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(34752)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(34756)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(34744)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (34776 + ($233<<2)|0);
  $235 = HEAP32[34736>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[34736>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (34776 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (34776 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(34752)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (35040 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(34740)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(34740)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L201: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L201;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(34752)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(34752)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(34768)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(34768)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (35192);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(34768)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(34752)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(35216)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(34760)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(34748)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(34760)>>2] = $36;
  HEAP32[(34748)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(34756)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(34744)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(34744)>>2] = $storemerge21;
  HEAP32[(34756)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (34776 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[34736>>2]|0;
    $88 = $87 & $86;
    HEAP32[34736>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (35040 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(34740)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(34740)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(34752)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(34752)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(34752)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(34752)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(34756)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(34744)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (34776 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[34736>>2]|0;
     $32 = $31 & $30;
     HEAP32[34736>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (35040 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(34740)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(34740)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(34752)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(34752)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(34752)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(34752)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(34760)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(34748)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(34748)>>2] = $115;
   HEAP32[(34760)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(34756)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(34756)>>2] = 0;
   HEAP32[(34744)>>2] = 0;
   return;
  }
  $120 = HEAP32[(34756)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(34744)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(34744)>>2] = $123;
   HEAP32[(34756)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (34776 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[34736>>2]|0;
     $146 = $145 & $144;
     HEAP32[34736>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (35040 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(34740)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(34740)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(34752)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(34752)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(34752)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(34756)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(34744)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (34776 + ($224<<2)|0);
  $226 = HEAP32[34736>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[34736>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (34776 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (34776 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(34752)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (35040 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(34740)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(34740)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(34752)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(34752)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {

}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}

  
function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vd(index,a1) {
  index = index|0;
  a1=+a1;
  FUNCTION_TABLE_vd[index&3](+a1);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&3](a1|0,+a2);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&15](a1|0)|0;
}


function dynCall_viddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viddd[index&3](a1|0,+a2,+a3,+a4);
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&3](a1|0,+a2,+a3);
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&3](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function dynCall_vidddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  FUNCTION_TABLE_vidddd[index&3](a1|0,+a2,+a3,+a4,+a5);
}


function dynCall_vdi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  FUNCTION_TABLE_vdi[index&1](+a1,a2|0);
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&7](a1|0,a2|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&3]()|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6;
  FUNCTION_TABLE_vdddddd[index&1](+a1,+a2,+a3,+a4,+a5,+a6);
}


function dynCall_vdddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_vdddd[index&3](+a1,+a2,+a3,+a4);
}


function dynCall_vdd(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=+a2;
  FUNCTION_TABLE_vdd[index&3](+a1,+a2);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&7]();
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&1](a1|0,a2|0,+a3);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(0); }
function _emscripten_glUniform4i__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glUniform4i(p0|0,p1|0,p2|0,p3|0,p4|0); }
function _emscripten_glFramebufferTexture2D__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glFramebufferTexture2D(p0|0,p1|0,p2|0,p3|0,p4|0); }
function _emscripten_glShaderBinary__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glShaderBinary(p0|0,p1|0,p2|0,p3|0,p4|0); }
function _emscripten_glDrawElementsInstanced__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glDrawElementsInstanced(p0|0,p1|0,p2|0,p3|0,p4|0); }
function b1(p0) { p0 = +p0; abort(1); }
function _emscripten_glClearDepth__wrapper(p0) { p0 = +p0; _emscripten_glClearDepth(+p0); }
function _emscripten_glClearDepthf__wrapper(p0) { p0 = +p0; _emscripten_glClearDepthf(+p0); }
function _emscripten_glLineWidth__wrapper(p0) { p0 = +p0; _emscripten_glLineWidth(+p0); }
function b2(p0,p1) { p0 = p0|0;p1 = +p1; abort(2); }
function _emscripten_glUniform1f__wrapper(p0,p1) { p0 = p0|0;p1 = +p1; _emscripten_glUniform1f(p0|0,+p1); }
function _emscripten_glVertexAttrib1f__wrapper(p0,p1) { p0 = p0|0;p1 = +p1; _emscripten_glVertexAttrib1f(p0|0,+p1); }
function b3(p0) { p0 = p0|0; abort(3); }
function _emscripten_glDeleteShader__wrapper(p0) { p0 = p0|0; _emscripten_glDeleteShader(p0|0); }
function _emscripten_glCompileShader__wrapper(p0) { p0 = p0|0; _emscripten_glCompileShader(p0|0); }
function _emscripten_glDeleteProgram__wrapper(p0) { p0 = p0|0; _emscripten_glDeleteProgram(p0|0); }
function _emscripten_glLinkProgram__wrapper(p0) { p0 = p0|0; _emscripten_glLinkProgram(p0|0); }
function _emscripten_glUseProgram__wrapper(p0) { p0 = p0|0; _emscripten_glUseProgram(p0|0); }
function _emscripten_glValidateProgram__wrapper(p0) { p0 = p0|0; _emscripten_glValidateProgram(p0|0); }
function _emscripten_glDeleteObjectARB__wrapper(p0) { p0 = p0|0; _emscripten_glDeleteObjectARB(p0|0); }
function _emscripten_glEnableClientState__wrapper(p0) { p0 = p0|0; _emscripten_glEnableClientState(p0|0); }
function _emscripten_glClientActiveTexture__wrapper(p0) { p0 = p0|0; _emscripten_glClientActiveTexture(p0|0); }
function _emscripten_glBindVertexArray__wrapper(p0) { p0 = p0|0; _emscripten_glBindVertexArray(p0|0); }
function _emscripten_glMatrixMode__wrapper(p0) { p0 = p0|0; _emscripten_glMatrixMode(p0|0); }
function _emscripten_glLoadMatrixf__wrapper(p0) { p0 = p0|0; _emscripten_glLoadMatrixf(p0|0); }
function _emscripten_glEnableVertexAttribArray__wrapper(p0) { p0 = p0|0; _emscripten_glEnableVertexAttribArray(p0|0); }
function _emscripten_glDisableVertexAttribArray__wrapper(p0) { p0 = p0|0; _emscripten_glDisableVertexAttribArray(p0|0); }
function _emscripten_glDepthFunc__wrapper(p0) { p0 = p0|0; _emscripten_glDepthFunc(p0|0); }
function _emscripten_glEnable__wrapper(p0) { p0 = p0|0; _emscripten_glEnable(p0|0); }
function _emscripten_glDisable__wrapper(p0) { p0 = p0|0; _emscripten_glDisable(p0|0); }
function _emscripten_glFrontFace__wrapper(p0) { p0 = p0|0; _emscripten_glFrontFace(p0|0); }
function _emscripten_glCullFace__wrapper(p0) { p0 = p0|0; _emscripten_glCullFace(p0|0); }
function _emscripten_glClear__wrapper(p0) { p0 = p0|0; _emscripten_glClear(p0|0); }
function _emscripten_glClearStencil__wrapper(p0) { p0 = p0|0; _emscripten_glClearStencil(p0|0); }
function _emscripten_glDepthMask__wrapper(p0) { p0 = p0|0; _emscripten_glDepthMask(p0|0); }
function _emscripten_glStencilMask__wrapper(p0) { p0 = p0|0; _emscripten_glStencilMask(p0|0); }
function _emscripten_glGenerateMipmap__wrapper(p0) { p0 = p0|0; _emscripten_glGenerateMipmap(p0|0); }
function _emscripten_glActiveTexture__wrapper(p0) { p0 = p0|0; _emscripten_glActiveTexture(p0|0); }
function _emscripten_glBlendEquation__wrapper(p0) { p0 = p0|0; _emscripten_glBlendEquation(p0|0); }
function b4(p0,p1) { p0 = p0|0;p1 = p1|0; abort(4); }
function _emscripten_glPixelStorei__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glPixelStorei(p0|0,p1|0); }
function _emscripten_glGetIntegerv__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glGetIntegerv(p0|0,p1|0); }
function _emscripten_glGetFloatv__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glGetFloatv(p0|0,p1|0); }
function _emscripten_glGetBooleanv__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glGetBooleanv(p0|0,p1|0); }
function _emscripten_glGenTextures__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glGenTextures(p0|0,p1|0); }
function _emscripten_glDeleteTextures__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glDeleteTextures(p0|0,p1|0); }
function _emscripten_glBindTexture__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glBindTexture(p0|0,p1|0); }
function _emscripten_glGenBuffers__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glGenBuffers(p0|0,p1|0); }
function _emscripten_glDeleteBuffers__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glDeleteBuffers(p0|0,p1|0); }
function _emscripten_glGenRenderbuffers__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glGenRenderbuffers(p0|0,p1|0); }
function _emscripten_glDeleteRenderbuffers__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glDeleteRenderbuffers(p0|0,p1|0); }
function _emscripten_glBindRenderbuffer__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glBindRenderbuffer(p0|0,p1|0); }
function _emscripten_glUniform1i__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glUniform1i(p0|0,p1|0); }
function _emscripten_glBindBuffer__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glBindBuffer(p0|0,p1|0); }
function _emscripten_glVertexAttrib1fv__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib1fv(p0|0,p1|0); }
function _emscripten_glVertexAttrib2fv__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib2fv(p0|0,p1|0); }
function _emscripten_glVertexAttrib3fv__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib3fv(p0|0,p1|0); }
function _emscripten_glVertexAttrib4fv__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib4fv(p0|0,p1|0); }
function _emscripten_glAttachShader__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glAttachShader(p0|0,p1|0); }
function _emscripten_glDetachShader__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glDetachShader(p0|0,p1|0); }
function _emscripten_glBindFramebuffer__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glBindFramebuffer(p0|0,p1|0); }
function _emscripten_glGenFramebuffers__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glGenFramebuffers(p0|0,p1|0); }
function _emscripten_glDeleteFramebuffers__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glDeleteFramebuffers(p0|0,p1|0); }
function _emscripten_glBindProgramARB__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glBindProgramARB(p0|0,p1|0); }
function _emscripten_glGetPointerv__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glGetPointerv(p0|0,p1|0); }
function _emscripten_glGenVertexArrays__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glGenVertexArrays(p0|0,p1|0); }
function _emscripten_glDeleteVertexArrays__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glDeleteVertexArrays(p0|0,p1|0); }
function _emscripten_glVertexAttribDivisor__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttribDivisor(p0|0,p1|0); }
function _emscripten_glBlendFunc__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glBlendFunc(p0|0,p1|0); }
function _emscripten_glBlendEquationSeparate__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glBlendEquationSeparate(p0|0,p1|0); }
function _emscripten_glStencilMaskSeparate__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glStencilMaskSeparate(p0|0,p1|0); }
function _emscripten_glHint__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glHint(p0|0,p1|0); }
function _emscripten_glDrawBuffers__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _emscripten_glDrawBuffers(p0|0,p1|0); }
function b5(p0) { p0 = p0|0; abort(5);return 0; }
function _emscripten_glGetString__wrapper(p0) { p0 = p0|0; return _emscripten_glGetString(p0|0)|0; }
function _emscripten_glIsTexture__wrapper(p0) { p0 = p0|0; return _emscripten_glIsTexture(p0|0)|0; }
function _emscripten_glIsBuffer__wrapper(p0) { p0 = p0|0; return _emscripten_glIsBuffer(p0|0)|0; }
function _emscripten_glIsRenderbuffer__wrapper(p0) { p0 = p0|0; return _emscripten_glIsRenderbuffer(p0|0)|0; }
function _emscripten_glCreateShader__wrapper(p0) { p0 = p0|0; return _emscripten_glCreateShader(p0|0)|0; }
function _emscripten_glIsShader__wrapper(p0) { p0 = p0|0; return _emscripten_glIsShader(p0|0)|0; }
function _emscripten_glIsProgram__wrapper(p0) { p0 = p0|0; return _emscripten_glIsProgram(p0|0)|0; }
function _emscripten_glIsFramebuffer__wrapper(p0) { p0 = p0|0; return _emscripten_glIsFramebuffer(p0|0)|0; }
function _emscripten_glCheckFramebufferStatus__wrapper(p0) { p0 = p0|0; return _emscripten_glCheckFramebufferStatus(p0|0)|0; }
function _emscripten_glIsEnabled__wrapper(p0) { p0 = p0|0; return _emscripten_glIsEnabled(p0|0)|0; }
function b6(p0,p1,p2,p3) { p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; abort(6); }
function _emscripten_glUniform3f__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glUniform3f(p0|0,+p1,+p2,+p3); }
function _emscripten_glVertexAttrib3f__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glVertexAttrib3f(p0|0,+p1,+p2,+p3); }
function b7(p0,p1,p2) { p0 = p0|0;p1 = +p1;p2 = +p2; abort(7); }
function _emscripten_glUniform2f__wrapper(p0,p1,p2) { p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glUniform2f(p0|0,+p1,+p2); }
function _emscripten_glVertexAttrib2f__wrapper(p0,p1,p2) { p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glVertexAttrib2f(p0|0,+p1,+p2); }
function b8(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(8);return 0; }
function b9(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; abort(9); }
function _emscripten_glCompressedTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCompressedTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0); }
function _emscripten_glCopyTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0); }
function _emscripten_glCopyTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0); }
function b10(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(10); }
function _emscripten_glDrawRangeElements__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glDrawRangeElements(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0); }
function _emscripten_glVertexAttribPointer__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glVertexAttribPointer(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0); }
function b11(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(11); }
function _emscripten_glGetTexParameterfv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameterfv(p0|0,p1|0,p2|0); }
function _emscripten_glGetTexParameteriv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameteriv(p0|0,p1|0,p2|0); }
function _emscripten_glTexParameterfv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameterfv(p0|0,p1|0,p2|0); }
function _emscripten_glTexParameteriv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteriv(p0|0,p1|0,p2|0); }
function _emscripten_glGetBufferParameteriv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetBufferParameteriv(p0|0,p1|0,p2|0); }
function _emscripten_glGetRenderbufferParameteriv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetRenderbufferParameteriv(p0|0,p1|0,p2|0); }
function _emscripten_glGetUniformfv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformfv(p0|0,p1|0,p2|0); }
function _emscripten_glGetUniformiv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformiv(p0|0,p1|0,p2|0); }
function _emscripten_glGetVertexAttribfv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribfv(p0|0,p1|0,p2|0); }
function _emscripten_glGetVertexAttribiv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribiv(p0|0,p1|0,p2|0); }
function _emscripten_glGetVertexAttribPointerv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribPointerv(p0|0,p1|0,p2|0); }
function _emscripten_glUniform2i__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2i(p0|0,p1|0,p2|0); }
function _emscripten_glUniform1iv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1iv(p0|0,p1|0,p2|0); }
function _emscripten_glUniform2iv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2iv(p0|0,p1|0,p2|0); }
function _emscripten_glUniform3iv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3iv(p0|0,p1|0,p2|0); }
function _emscripten_glUniform4iv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4iv(p0|0,p1|0,p2|0); }
function _emscripten_glUniform1fv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1fv(p0|0,p1|0,p2|0); }
function _emscripten_glUniform2fv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2fv(p0|0,p1|0,p2|0); }
function _emscripten_glUniform3fv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3fv(p0|0,p1|0,p2|0); }
function _emscripten_glUniform4fv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4fv(p0|0,p1|0,p2|0); }
function _emscripten_glGetShaderiv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetShaderiv(p0|0,p1|0,p2|0); }
function _emscripten_glGetProgramiv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetProgramiv(p0|0,p1|0,p2|0); }
function _emscripten_glBindAttribLocation__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glBindAttribLocation(p0|0,p1|0,p2|0); }
function _emscripten_glGetObjectParameterivARB__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetObjectParameterivARB(p0|0,p1|0,p2|0); }
function _emscripten_glNormalPointer__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glNormalPointer(p0|0,p1|0,p2|0); }
function _emscripten_glDrawArrays__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glDrawArrays(p0|0,p1|0,p2|0); }
function _emscripten_glTexParameteri__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteri(p0|0,p1|0,p2|0); }
function _emscripten_glStencilFunc__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilFunc(p0|0,p1|0,p2|0); }
function _emscripten_glStencilOp__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilOp(p0|0,p1|0,p2|0); }
function b12(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; abort(12); }
function _emscripten_glUniform4f__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glUniform4f(p0|0,+p1,+p2,+p3,+p4); }
function _emscripten_glVertexAttrib4f__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glVertexAttrib4f(p0|0,+p1,+p2,+p3,+p4); }
function b13(p0,p1) { p0 = +p0;p1 = p1|0; abort(13); }
function _emscripten_glSampleCoverage__wrapper(p0,p1) { p0 = +p0;p1 = p1|0; _emscripten_glSampleCoverage(+p0,p1|0); }
function b14(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(14); }
function _emscripten_glReadPixels__wrapper(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glReadPixels(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0); }
function _emscripten_glGetActiveUniform__wrapper(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveUniform(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0); }
function _emscripten_glGetActiveAttrib__wrapper(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveAttrib(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0); }
function b15(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; abort(15); }
function _emscripten_glCompressedTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glCompressedTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0); }
function _emscripten_glTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0); }
function _emscripten_glTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0); }
function b16(p0,p1) { p0 = p0|0;p1 = p1|0; abort(16);return 0; }
function _emscripten_glGetUniformLocation__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _emscripten_glGetUniformLocation(p0|0,p1|0)|0; }
function _emscripten_glGetAttribLocation__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _emscripten_glGetAttribLocation(p0|0,p1|0)|0; }
function b17() { ; abort(17);return 0; }
function _emscripten_glCreateProgram__wrapper() { ; return _emscripten_glCreateProgram()|0; }
function _emscripten_glGetError__wrapper() { ; return _emscripten_glGetError()|0; }
function b18(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(18);return 0; }
function b19(p0,p1,p2,p3,p4,p5) { p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; abort(19); }
function _emscripten_glFrustum__wrapper(p0,p1,p2,p3,p4,p5) { p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; _emscripten_glFrustum(+p0,+p1,+p2,+p3,+p4,+p5); }
function b20(p0,p1,p2,p3) { p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; abort(20); }
function _emscripten_glRotatef__wrapper(p0,p1,p2,p3) { p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glRotatef(+p0,+p1,+p2,+p3); }
function _emscripten_glClearColor__wrapper(p0,p1,p2,p3) { p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glClearColor(+p0,+p1,+p2,+p3); }
function _emscripten_glBlendColor__wrapper(p0,p1,p2,p3) { p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glBlendColor(+p0,+p1,+p2,+p3); }
function b21(p0,p1) { p0 = +p0;p1 = +p1; abort(21); }
function _emscripten_glDepthRange__wrapper(p0,p1) { p0 = +p0;p1 = +p1; _emscripten_glDepthRange(+p0,+p1); }
function _emscripten_glDepthRangef__wrapper(p0,p1) { p0 = +p0;p1 = +p1; _emscripten_glDepthRangef(+p0,+p1); }
function _emscripten_glPolygonOffset__wrapper(p0,p1) { p0 = +p0;p1 = +p1; _emscripten_glPolygonOffset(+p0,+p1); }
function b22() { ; abort(22); }
function _emscripten_glLoadIdentity__wrapper() { ; _emscripten_glLoadIdentity(); }
function _emscripten_glReleaseShaderCompiler__wrapper() { ; _emscripten_glReleaseShaderCompiler(); }
function _emscripten_glFinish__wrapper() { ; _emscripten_glFinish(); }
function _emscripten_glFlush__wrapper() { ; _emscripten_glFlush(); }
function b23(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = +p2; abort(23); }
function _emscripten_glTexParameterf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = +p2; _emscripten_glTexParameterf(p0|0,p1|0,+p2); }
function b24(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(24); }
function _emscripten_glBufferData__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferData(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glBufferSubData__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferSubData(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glUniform3i__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniform3i(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glUniformMatrix2fv__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix2fv(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glUniformMatrix3fv__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix3fv(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glUniformMatrix4fv__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix4fv(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glGetAttachedShaders__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetAttachedShaders(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glShaderSource__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glShaderSource(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glGetShaderSource__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderSource(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glGetShaderInfoLog__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderInfoLog(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glGetShaderPrecisionFormat__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderPrecisionFormat(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glGetProgramInfoLog__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetProgramInfoLog(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glFramebufferRenderbuffer__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glFramebufferRenderbuffer(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glGetFramebufferAttachmentParameteriv__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetFramebufferAttachmentParameteriv(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glGetInfoLogARB__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetInfoLogARB(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glVertexPointer__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glVertexPointer(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glTexCoordPointer__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glTexCoordPointer(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glColorPointer__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorPointer(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glDrawElements__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawElements(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glDrawArraysInstanced__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawArraysInstanced(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glViewport__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glViewport(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glScissor__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glScissor(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glColorMask__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorMask(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glRenderbufferStorage__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glRenderbufferStorage(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glBlendFuncSeparate__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBlendFuncSeparate(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glStencilFuncSeparate__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilFuncSeparate(p0|0,p1|0,p2|0,p3|0); }
function _emscripten_glStencilOpSeparate__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilOpSeparate(p0|0,p1|0,p2|0,p3|0); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_viiiii = [b0,_KeyCallback,_emscripten_glUniform4i__wrapper,_emscripten_glFramebufferTexture2D__wrapper,_emscripten_glShaderBinary__wrapper,_emscripten_glDrawElementsInstanced__wrapper,b0,b0];
var FUNCTION_TABLE_vd = [b1,_emscripten_glClearDepth__wrapper,_emscripten_glClearDepthf__wrapper,_emscripten_glLineWidth__wrapper];
var FUNCTION_TABLE_vid = [b2,_emscripten_glUniform1f__wrapper,_emscripten_glVertexAttrib1f__wrapper,b2];
var FUNCTION_TABLE_vi = [b3,_emscripten_glDeleteShader__wrapper,_emscripten_glCompileShader__wrapper,_emscripten_glDeleteProgram__wrapper,_emscripten_glLinkProgram__wrapper,_emscripten_glUseProgram__wrapper,_emscripten_glValidateProgram__wrapper,_emscripten_glDeleteObjectARB__wrapper,_emscripten_glEnableClientState__wrapper,_emscripten_glClientActiveTexture__wrapper,_emscripten_glBindVertexArray__wrapper,_emscripten_glMatrixMode__wrapper,_emscripten_glLoadMatrixf__wrapper,_emscripten_glEnableVertexAttribArray__wrapper,_emscripten_glDisableVertexAttribArray__wrapper,_emscripten_glDepthFunc__wrapper,_emscripten_glEnable__wrapper,_emscripten_glDisable__wrapper,_emscripten_glFrontFace__wrapper,_emscripten_glCullFace__wrapper,_emscripten_glClear__wrapper,_emscripten_glClearStencil__wrapper,_emscripten_glDepthMask__wrapper,_emscripten_glStencilMask__wrapper,_emscripten_glGenerateMipmap__wrapper,_emscripten_glActiveTexture__wrapper,_emscripten_glBlendEquation__wrapper,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,_stbi__stdio_skip,_ErrorCallback,_CursorEnterCallback,_CharCallback,_WindowIconifyCallback,_emscripten_glPixelStorei__wrapper,_emscripten_glGetIntegerv__wrapper,_emscripten_glGetFloatv__wrapper,_emscripten_glGetBooleanv__wrapper,_emscripten_glGenTextures__wrapper,_emscripten_glDeleteTextures__wrapper,_emscripten_glBindTexture__wrapper,_emscripten_glGenBuffers__wrapper,_emscripten_glDeleteBuffers__wrapper,_emscripten_glGenRenderbuffers__wrapper,_emscripten_glDeleteRenderbuffers__wrapper,_emscripten_glBindRenderbuffer__wrapper,_emscripten_glUniform1i__wrapper,_emscripten_glBindBuffer__wrapper,_emscripten_glVertexAttrib1fv__wrapper,_emscripten_glVertexAttrib2fv__wrapper,_emscripten_glVertexAttrib3fv__wrapper,_emscripten_glVertexAttrib4fv__wrapper,_emscripten_glAttachShader__wrapper,_emscripten_glDetachShader__wrapper,_emscripten_glBindFramebuffer__wrapper,_emscripten_glGenFramebuffers__wrapper,_emscripten_glDeleteFramebuffers__wrapper,_emscripten_glBindProgramARB__wrapper,_emscripten_glGetPointerv__wrapper,_emscripten_glGenVertexArrays__wrapper,_emscripten_glDeleteVertexArrays__wrapper,_emscripten_glVertexAttribDivisor__wrapper,_emscripten_glBlendFunc__wrapper,_emscripten_glBlendEquationSeparate__wrapper,_emscripten_glStencilMaskSeparate__wrapper,_emscripten_glHint__wrapper,_emscripten_glDrawBuffers__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,_stbi__stdio_eof,_emscripten_glGetString__wrapper,_emscripten_glIsTexture__wrapper,_emscripten_glIsBuffer__wrapper,_emscripten_glIsRenderbuffer__wrapper,_emscripten_glCreateShader__wrapper,_emscripten_glIsShader__wrapper,_emscripten_glIsProgram__wrapper,_emscripten_glIsFramebuffer__wrapper,_emscripten_glCheckFramebufferStatus__wrapper,_emscripten_glIsEnabled__wrapper,b5,b5,b5,b5];
var FUNCTION_TABLE_viddd = [b6,_emscripten_glUniform3f__wrapper,_emscripten_glVertexAttrib3f__wrapper,b6];
var FUNCTION_TABLE_vidd = [b7,_ScrollCallback,_emscripten_glUniform2f__wrapper,_emscripten_glVertexAttrib2f__wrapper];
var FUNCTION_TABLE_iiii = [b8,_stbi__stdio_read,_EmscriptenFullscreenChangeCallback,_EmscriptenInputCallback];
var FUNCTION_TABLE_viiiiiiii = [b9,_emscripten_glCompressedTexImage2D__wrapper,_emscripten_glCopyTexImage2D__wrapper,_emscripten_glCopyTexSubImage2D__wrapper];
var FUNCTION_TABLE_viiiiii = [b10,_stbi__YCbCr_to_RGB_row,_emscripten_glDrawRangeElements__wrapper,_emscripten_glVertexAttribPointer__wrapper];
var FUNCTION_TABLE_viii = [b11,_WindowSizeCallback,_stbi__idct_block,_emscripten_glGetTexParameterfv__wrapper,_emscripten_glGetTexParameteriv__wrapper,_emscripten_glTexParameterfv__wrapper,_emscripten_glTexParameteriv__wrapper,_emscripten_glGetBufferParameteriv__wrapper,_emscripten_glGetRenderbufferParameteriv__wrapper,_emscripten_glGetUniformfv__wrapper,_emscripten_glGetUniformiv__wrapper,_emscripten_glGetVertexAttribfv__wrapper,_emscripten_glGetVertexAttribiv__wrapper,_emscripten_glGetVertexAttribPointerv__wrapper,_emscripten_glUniform2i__wrapper,_emscripten_glUniform1iv__wrapper,_emscripten_glUniform2iv__wrapper,_emscripten_glUniform3iv__wrapper,_emscripten_glUniform4iv__wrapper,_emscripten_glUniform1fv__wrapper,_emscripten_glUniform2fv__wrapper,_emscripten_glUniform3fv__wrapper,_emscripten_glUniform4fv__wrapper,_emscripten_glGetShaderiv__wrapper,_emscripten_glGetProgramiv__wrapper,_emscripten_glBindAttribLocation__wrapper,_emscripten_glGetObjectParameterivARB__wrapper,_emscripten_glNormalPointer__wrapper,_emscripten_glDrawArrays__wrapper,_emscripten_glTexParameteri__wrapper,_emscripten_glStencilFunc__wrapper,_emscripten_glStencilOp__wrapper];
var FUNCTION_TABLE_vidddd = [b12,_emscripten_glUniform4f__wrapper,_emscripten_glVertexAttrib4f__wrapper,b12];
var FUNCTION_TABLE_vdi = [b13,_emscripten_glSampleCoverage__wrapper];
var FUNCTION_TABLE_viiiiiii = [b14,_emscripten_glReadPixels__wrapper,_emscripten_glGetActiveUniform__wrapper,_emscripten_glGetActiveAttrib__wrapper];
var FUNCTION_TABLE_viiiiiiiii = [b15,_emscripten_glCompressedTexSubImage2D__wrapper,_emscripten_glTexImage2D__wrapper,_emscripten_glTexSubImage2D__wrapper];
var FUNCTION_TABLE_iii = [b16,_rect_height_compare,_rect_original_order,_point_compare,_stbtt__edge_compare,_uint32_compare,_emscripten_glGetUniformLocation__wrapper,_emscripten_glGetAttribLocation__wrapper];
var FUNCTION_TABLE_i = [b17,_emscripten_glCreateProgram__wrapper,_emscripten_glGetError__wrapper,b17];
var FUNCTION_TABLE_iiiiii = [b18,_stbi__resample_row_hv_2,_resample_row_1,_stbi__resample_row_v_2,_stbi__resample_row_h_2,_stbi__resample_row_generic,b18,b18];
var FUNCTION_TABLE_vdddddd = [b19,_emscripten_glFrustum__wrapper];
var FUNCTION_TABLE_vdddd = [b20,_emscripten_glRotatef__wrapper,_emscripten_glClearColor__wrapper,_emscripten_glBlendColor__wrapper];
var FUNCTION_TABLE_vdd = [b21,_emscripten_glDepthRange__wrapper,_emscripten_glDepthRangef__wrapper,_emscripten_glPolygonOffset__wrapper];
var FUNCTION_TABLE_v = [b22,_UpdateDrawFrame,_emscripten_glLoadIdentity__wrapper,_emscripten_glReleaseShaderCompiler__wrapper,_emscripten_glFinish__wrapper,_emscripten_glFlush__wrapper,b22,b22];
var FUNCTION_TABLE_viid = [b23,_emscripten_glTexParameterf__wrapper];
var FUNCTION_TABLE_viiii = [b24,_MouseButtonCallback,_emscripten_glBufferData__wrapper,_emscripten_glBufferSubData__wrapper,_emscripten_glUniform3i__wrapper,_emscripten_glUniformMatrix2fv__wrapper,_emscripten_glUniformMatrix3fv__wrapper,_emscripten_glUniformMatrix4fv__wrapper,_emscripten_glGetAttachedShaders__wrapper,_emscripten_glShaderSource__wrapper,_emscripten_glGetShaderSource__wrapper,_emscripten_glGetShaderInfoLog__wrapper,_emscripten_glGetShaderPrecisionFormat__wrapper,_emscripten_glGetProgramInfoLog__wrapper,_emscripten_glFramebufferRenderbuffer__wrapper,_emscripten_glGetFramebufferAttachmentParameteriv__wrapper,_emscripten_glGetInfoLogARB__wrapper,_emscripten_glVertexPointer__wrapper,_emscripten_glTexCoordPointer__wrapper,_emscripten_glColorPointer__wrapper,_emscripten_glDrawElements__wrapper,_emscripten_glDrawArraysInstanced__wrapper,_emscripten_glViewport__wrapper,_emscripten_glScissor__wrapper,_emscripten_glColorMask__wrapper,_emscripten_glRenderbufferStorage__wrapper,_emscripten_glBlendFuncSeparate__wrapper,_emscripten_glStencilFuncSeparate__wrapper,_emscripten_glStencilOpSeparate__wrapper,b24,b24,b24];

  return { _strlen: _strlen, _free: _free, _main: _main, _strncpy: _strncpy, _memmove: _memmove, _strstr: _strstr, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _emscripten_GetProcAddress: _emscripten_GetProcAddress, _strcpy: _strcpy, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_viiiii: dynCall_viiiii, dynCall_vd: dynCall_vd, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viddd: dynCall_viddd, dynCall_vidd: dynCall_vidd, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viii: dynCall_viii, dynCall_vidddd: dynCall_vidddd, dynCall_vdi: dynCall_vdi, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_iii: dynCall_iii, dynCall_i: dynCall_i, dynCall_iiiiii: dynCall_iiiiii, dynCall_vdddddd: dynCall_vdddddd, dynCall_vdddd: dynCall_vdddd, dynCall_vdd: dynCall_vdd, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _strlen = Module["_strlen"] = asm["_strlen"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strstr = Module["_strstr"] = asm["_strstr"];
var _memset = Module["_memset"] = asm["_memset"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = asm["_emscripten_GetProcAddress"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vd = Module["dynCall_vd"] = asm["dynCall_vd"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_vdi = Module["dynCall_vdi"] = asm["dynCall_vdi"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_vdddddd = Module["dynCall_vdddddd"] = asm["dynCall_vdddddd"];
var dynCall_vdddd = Module["dynCall_vdddd"] = asm["dynCall_vdddd"];
var dynCall_vdd = Module["dynCall_vdd"] = asm["dynCall_vdd"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



